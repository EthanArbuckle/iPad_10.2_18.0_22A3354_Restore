uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_OverridingKind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_QuerySource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_QuerySource._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for _NameMap();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SortByDir@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SortByDir._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SortByNulls@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SortByNulls._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_A_Expr_Kind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_A_Expr_Kind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RoleSpecType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RoleSpecType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TableLikeOption@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TableLikeOption._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DefElemAction@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DefElemAction._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_PartitionRangeDatumKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_PartitionRangeDatumKind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RTEKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RTEKind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_WCOKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_WCOKind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_GroupingSetKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_GroupingSetKind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CTEMaterialize@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CTEMaterialize._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SetOperation@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SetOperation._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ObjectType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ObjectType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DropBehavior@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DropBehavior._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterTableType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterTableType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_GrantTargetType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_GrantTargetType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_VariableSetKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_VariableSetKind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ConstrType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ConstrType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ImportForeignSchemaType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ImportForeignSchemaType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RoleStmtType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RoleStmtType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_FetchDirection@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_FetchDirection._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_FunctionParameterMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_FunctionParameterMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TransactionStmtKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TransactionStmtKind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ViewCheckOption@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ViewCheckOption._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ClusterOption@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ClusterOption._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DiscardMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DiscardMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ReindexObjectType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ReindexObjectType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterTSConfigType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterTSConfigType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterSubscriptionType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterSubscriptionType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OnCommitAction@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_OnCommitAction._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ParamKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ParamKind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CoercionContext@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CoercionContext._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CoercionForm@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CoercionForm._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_BoolExprType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_BoolExprType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SubLinkType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SubLinkType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RowCompareType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RowCompareType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_MinMaxOp@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_MinMaxOp._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SQLValueFunctionOp@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SQLValueFunctionOp._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_XmlExprOp@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_XmlExprOp._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_XmlOptionType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_XmlOptionType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_NullTestType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_NullTestType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_BoolTestType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_BoolTestType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CmdType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CmdType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_JoinType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_JoinType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AggStrategy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AggStrategy._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AggSplit@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AggSplit._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SetOpCmd@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SetOpCmd._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SetOpStrategy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SetOpStrategy._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OnConflictAction@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_OnConflictAction._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_LimitOption@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_LimitOption._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_LockClauseStrength@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_LockClauseStrength._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_LockWaitPolicy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_LockWaitPolicy._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_LockTupleMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_LockTupleMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_KeywordKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_KeywordKind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Token@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Token._protobuf_nameMap, a1);
}

uint64_t PgQuery_ParseResult.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ParseResult.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RawStmt, &lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RawStmt);
}

uint64_t PgQuery_ParseResult.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ParseResult.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for PgQuery_RawStmt, &lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RawStmt, (void (*)(_QWORD))type metadata accessor for PgQuery_ParseResult);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ParseResult()
{
  return 0xD000000000000014;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PgQuery_ParseResult())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ParseResult()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParseResult and conformance PgQuery_ParseResult, type metadata accessor for PgQuery_ParseResult, (uint64_t)&protocol conformance descriptor for PgQuery_ParseResult);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ParseResult@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ParseResult._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ParseResult()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParseResult and conformance PgQuery_ParseResult, type metadata accessor for PgQuery_ParseResult, (uint64_t)&protocol conformance descriptor for PgQuery_ParseResult);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ParseResult()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParseResult and conformance PgQuery_ParseResult, type metadata accessor for PgQuery_ParseResult, (uint64_t)&protocol conformance descriptor for PgQuery_ParseResult);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ParseResult(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_ParseResult.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized static Array<A>.== infix(_:_:), type metadata accessor for PgQuery_ParseResult) & 1;
}

uint64_t PgQuery_ScanResult.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ParseResult.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_ScanToken, &lazy protocol witness table cache variable for type PgQuery_ScanToken and conformance PgQuery_ScanToken, (uint64_t)&protocol conformance descriptor for PgQuery_ScanToken);
}

uint64_t PgQuery_ParseResult.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;
  char v11;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v6)
  {
    while ((v11 & 1) == 0)
    {
      if (result == 2)
      {
        a4(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(a5, a4, a6);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ScanResult.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ParseResult.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for PgQuery_ScanToken, &lazy protocol witness table cache variable for type PgQuery_ScanToken and conformance PgQuery_ScanToken, (uint64_t)&protocol conformance descriptor for PgQuery_ScanToken, (void (*)(_QWORD))type metadata accessor for PgQuery_ScanResult);
}

uint64_t PgQuery_ParseResult.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, void (*a7)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *v12;
  uint64_t result;

  if (*(_DWORD *)v7)
  {
    v12 = a5;
    result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v8)
      return result;
  }
  else
  {
    v12 = a5;
  }
  if (!*(_QWORD *)(*(_QWORD *)(v7 + 8) + 16)
    || (a4(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(v12, a4, a6),
        result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
        !v8))
  {
    a7(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ScanResult@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DEE9D8];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ScanResult()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ScanResult()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanResult and conformance PgQuery_ScanResult, type metadata accessor for PgQuery_ScanResult, (uint64_t)&protocol conformance descriptor for PgQuery_ScanResult);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ScanResult@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ScanResult._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ScanResult()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanResult and conformance PgQuery_ScanResult, type metadata accessor for PgQuery_ScanResult, (uint64_t)&protocol conformance descriptor for PgQuery_ScanResult);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ScanResult()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanResult and conformance PgQuery_ScanResult, type metadata accessor for PgQuery_ScanResult, (uint64_t)&protocol conformance descriptor for PgQuery_ScanResult);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ScanResult(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_ParseResult.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for PgQuery_ScanResult) & 1;
}

uint64_t one-time initialization function for defaultInstance()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  type metadata accessor for PgQuery_Node._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  v2 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  static PgQuery_Node._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_Var._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varno) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattno) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartypmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varcollid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varlevelsup) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varnosyn) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattnosyn) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_Var._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for PgQuery_Param._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramkind;
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtypmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramcollid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_Param._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for PgQuery_GroupingFunc._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refs) = v4;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols) = v4;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_GroupingFunc._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;

  type metadata accessor for PgQuery_SubscriptingRef._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcontainertype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refelemtype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reftypmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcollid) = 0;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refupperindexpr) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reflowerindexpr) = v4;
  v3(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refexpr, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refassgnexpr, 1, 1, Node);
  static PgQuery_SubscriptingRef._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _QWORD *v5;

  type metadata accessor for PgQuery_NamedArgExpr._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  v5 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name);
  *v5 = 0;
  v5[1] = 0xE000000000000000;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argnumber) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_NamedArgExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_OpExpr._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_OpExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_DistinctExpr._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_DistinctExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_NullIfExpr._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_NullIfExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_ScalarArrayOpExpr._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOr) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_ScalarArrayOpExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for PgQuery_BoolExpr._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLop;
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_BoolExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;

  type metadata accessor for PgQuery_SubLink._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType;
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkID) = 0;
  v3(v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, 1, 1, Node);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__operName) = MEMORY[0x1E0DEE9D8];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subselect, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_SubLink._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_FieldSelect._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnum) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid) = 0;
  static PgQuery_FieldSelect._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PgQuery_FieldStore._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  v5 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newvals) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnums) = v5;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  static PgQuery_FieldStore._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PgQuery_RelabelType._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid) = 0;
  v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relabelformat;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_RelabelType._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PgQuery_CoerceViaIO._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid) = 0;
  v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_CoerceViaIO._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PgQuery_ArrayCoerceExpr._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  v3(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elemexpr, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid) = 0;
  v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_ArrayCoerceExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PgQuery_ConvertRowtypeExpr._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__convertformat;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_ConvertRowtypeExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_CollateExpr._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collOid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_CollateExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_CaseExpr._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casetype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casecollid) = 0;
  v3(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defresult, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_CaseExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_CaseWhen._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  v3(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__result, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_CaseWhen._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_CaseTestExpr._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation) = 0;
  static PgQuery_CaseTestExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_ArrayExpr._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayTypeid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayCollid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elementTypeid) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elements) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__multidims) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_ArrayExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for PgQuery_RowExpr._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowTypeid) = 0;
  v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowFormat;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames) = v4;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_RowExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for PgQuery_RowCompareExpr._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype;
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opnos) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfamilies) = v5;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollids) = v5;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__largs) = v5;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rargs) = v5;
  static PgQuery_RowCompareExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_CoalesceExpr._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescetype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescecollid) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_CoalesceExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for PgQuery_MinMaxExpr._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxtype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxcollid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  v4 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op;
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_MinMaxExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for PgQuery_SQLValueFunction._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op;
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_SQLValueFunction._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PgQuery_NullTest._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nulltesttype;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argisrow) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_NullTest._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PgQuery_BooleanTest._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLtesttype;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_BooleanTest._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PgQuery_CoerceToDomain._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid) = 0;
  v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coercionformat;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_CoerceToDomain._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_CoerceToDomainValue._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_CoerceToDomainValue._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_SetToDefault._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_SetToDefault._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  _QWORD *v4;

  type metadata accessor for PgQuery_CurrentOfExpr._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cvarno) = 0;
  v4 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorName);
  *v4 = 0;
  v4[1] = 0xE000000000000000;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorParam) = 0;
  static PgQuery_CurrentOfExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_NextValueExpr._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__seqid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) = 0;
  static PgQuery_NextValueExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_InferenceElem._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infercollid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inferopclass) = 0;
  static PgQuery_InferenceElem._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _QWORD *v5;

  type metadata accessor for PgQuery_TargetEntry._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resno) = 0;
  v5 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resname);
  *v5 = 0;
  v5[1] = 0xE000000000000000;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ressortgroupref) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigtbl) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigcol) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resjunk) = 0;
  static PgQuery_TargetEntry._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t Alias;
  uint64_t result;

  type metadata accessor for PgQuery_JoinExpr._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_WORD *)(v0 + 24) = 1;
  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  v3(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, 1, 1, Node);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause) = MEMORY[0x1E0DEE9D8];
  v3(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals, 1, 1, Node);
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
  Alias = type metadata accessor for PgQuery_Alias(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Alias - 8) + 56))(v4, 1, 1, Alias);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtindex) = 0;
  static PgQuery_JoinExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_FromExpr._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FromExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  static PgQuery_FromExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Node;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_OnConflictExpr._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 32) = MEMORY[0x1E0DEE9D8];
  v2 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arbiterWhere;
  Node = type metadata accessor for PgQuery_Node(0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v4(v2, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraint) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictSet) = v1;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v4)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictWhere, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelIndex) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelTlist) = v1;
  static PgQuery_OnConflictExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_IntoClause._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rel;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colNames) = MEMORY[0x1E0DEE9D8];
  v4 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod);
  *v4 = 0;
  v4[1] = 0xE000000000000000;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) = v3;
  v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName);
  v7 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__viewQuery;
  *v6 = 0;
  v6[1] = 0xE000000000000000;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v7, 1, 1, Node);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipData) = 0;
  static PgQuery_IntoClause._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_RawStmt._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmt;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen) = 0;
  static PgQuery_RawStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  type metadata accessor for PgQuery_InsertStmt._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols) = MEMORY[0x1E0DEE9D8];
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectStmt;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v4, 1, 1, Node);
  v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictClause;
  v7 = type metadata accessor for PgQuery_OnConflictClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList) = v3;
  v8 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  v9 = type metadata accessor for PgQuery_WithClause(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v11 = v0
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  static PgQuery_InsertStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for PgQuery_DeleteStmt._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause) = MEMORY[0x1E0DEE9D8];
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v4, 1, 1, Node);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList) = v3;
  v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  v7 = type metadata accessor for PgQuery_WithClause(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  static PgQuery_DeleteStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for PgQuery_UpdateStmt._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList) = MEMORY[0x1E0DEE9D8];
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v4, 1, 1, Node);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause) = v3;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList) = v3;
  v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  v7 = type metadata accessor for PgQuery_WithClause(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  static PgQuery_UpdateStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RoleSpec;
  uint64_t v3;
  uint64_t Node;
  uint64_t result;
  uint64_t v6;

  type metadata accessor for PgQuery_AlterTableCmd._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0xE000000000000000;
  *(_DWORD *)(v0 + 48) = 0;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 56))(v1, 1, 1, RoleSpec);
  v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk) = 0;
  static PgQuery_AlterTableCmd._StorageClass.defaultInstance = v0;
  return result;
}

{
  _QWORD *v0;
  char *v1;
  uint64_t Node;
  uint64_t result;
  char *v4;

  type metadata accessor for PgQuery_AlterDomainStmt._StorageClass(0);
  v0 = (_QWORD *)swift_allocObject();
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v0[4] = MEMORY[0x1E0DEE9D8];
  v0[5] = 0;
  v0[6] = 0xE000000000000000;
  v1 = (char *)v0
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v4 = (char *)v0
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior;
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  *((_BYTE *)v0
  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk) = 0;
  static PgQuery_AlterDomainStmt._StorageClass.defaultInstance = (uint64_t)v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PgQuery_SetOperationStmt._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_WORD *)(v0 + 24) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, 1, 1, Node);
  v5 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypes) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypmods) = v5;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colCollations) = v5;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClauses) = v5;
  static PgQuery_SetOperationStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  type metadata accessor for PgQuery_CopyStmt._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  v6 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__attlist) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFrom) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isProgram) = 0;
  v7 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename);
  *v7 = 0;
  v7[1] = 0xE000000000000000;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) = v6;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, 1, 1, Node);
  static PgQuery_CopyStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  _QWORD *v4;

  type metadata accessor for PgQuery_CommentStmt._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v4 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__comment);
  *v4 = 0;
  v4[1] = 0xE000000000000000;
  static PgQuery_CommentStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t Node;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  type metadata accessor for PgQuery_RenameStmt._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v6 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subname);
  *v6 = 0;
  v6[1] = 0xE000000000000000;
  v7 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newname);
  *v7 = 0;
  v7[1] = 0xE000000000000000;
  v8 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk) = 0;
  static PgQuery_RenameStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  _QWORD *v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t result;
  uint64_t v7;

  type metadata accessor for PgQuery_RuleStmt._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  v3 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rulename);
  *v3 = 0;
  v3[1] = 0xE000000000000000;
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v4, 1, 1, Node);
  v7 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__event;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__instead) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__actions) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__replace) = 0;
  static PgQuery_RuleStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t result;
  uint64_t v7;

  type metadata accessor for PgQuery_ViewStmt._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__view;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aliases) = MEMORY[0x1E0DEE9D8];
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v4, 1, 1, Node);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__replace) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) = v3;
  v7 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOption;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  static PgQuery_ViewStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t TypeName;
  uint64_t v4;
  uint64_t CollateClause;
  uint64_t result;

  type metadata accessor for PgQuery_CreateDomainStmt._StorageClass(0);
  v0 = swift_allocObject();
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
  v2 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 56))(v2, 1, 1, TypeName);
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause;
  CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CollateClause - 8) + 56))(v4, 1, 1, CollateClause);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints) = v1;
  static PgQuery_CreateDomainStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t v3;
  uint64_t IntoClause;
  uint64_t result;
  uint64_t v6;

  type metadata accessor for PgQuery_CreateTableAsStmt._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__into;
  IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(IntoClause - 8) + 56))(v3, 1, 1, IntoClause);
  v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relkind;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isSelectInto) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists) = 0;
  static PgQuery_CreateTableAsStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t TypeName;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t ObjectWithArgs;
  uint64_t result;
  uint64_t v7;

  type metadata accessor for PgQuery_CreateCastStmt._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sourcetype;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 56);
  v3(v1, 1, 1, TypeName);
  v3(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targettype, 1, 1, TypeName);
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__func;
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(ObjectWithArgs - 8) + 56))(v4, 1, 1, ObjectWithArgs);
  v7 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__context;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inout) = 0;
  static PgQuery_CreateCastStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  _QWORD *v0;
  char *v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_PrepareStmt._StorageClass(0);
  v0 = (_QWORD *)swift_allocObject();
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v0[4] = MEMORY[0x1E0DEE9D8];
  v1 = (char *)v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_PrepareStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  static PgQuery_PrepareStmt._StorageClass.defaultInstance = (uint64_t)v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_DeclareCursorStmt._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  *(_DWORD *)(v0 + 32) = 0;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_DeclareCursorStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  static PgQuery_DeclareCursorStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_AlterObjectDependsStmt._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extname, 1, 1, Node);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__remove) = 0;
  static PgQuery_AlterObjectDependsStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t Node;
  uint64_t result;
  _QWORD *v6;

  type metadata accessor for PgQuery_AlterObjectSchemaStmt._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v6 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newschema);
  *v6 = 0;
  v6[1] = 0xE000000000000000;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk) = 0;
  static PgQuery_AlterObjectSchemaStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t RoleSpec;
  uint64_t result;

  type metadata accessor for PgQuery_AlterOwnerStmt._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 56))(v5, 1, 1, RoleSpec);
  static PgQuery_AlterOwnerStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;

  type metadata accessor for PgQuery_SecLabelStmt._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v4 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider);
  *v4 = 0;
  v4[1] = 0xE000000000000000;
  v5 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label);
  *v5 = 0;
  v5[1] = 0xE000000000000000;
  static PgQuery_SecLabelStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_AlterExtensionContentsStmt._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  *(_DWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_BYTE *)(v0 + 48) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser34PgQuery_AlterExtensionContentsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  static PgQuery_AlterExtensionContentsStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  _QWORD *v3;
  uint64_t v4;
  uint64_t Node;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_CreatePolicyStmt._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  v3 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName);
  *v3 = 0;
  v3[1] = 0xE000000000000000;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__permissive) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles) = MEMORY[0x1E0DEE9D8];
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual;
  Node = type metadata accessor for PgQuery_Node(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v6(v4, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, 1, 1, Node);
  static PgQuery_CreatePolicyStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_AlterPolicyStmt._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles) = MEMORY[0x1E0DEE9D8];
  v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, 1, 1, Node);
  static PgQuery_AlterPolicyStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t FuncExpr;
  uint64_t result;

  type metadata accessor for PgQuery_CallStmt._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccall;
  v2 = type metadata accessor for PgQuery_FuncCall(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr;
  FuncExpr = type metadata accessor for PgQuery_FuncExpr(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(FuncExpr - 8) + 56))(v3, 1, 1, FuncExpr);
  static PgQuery_CallStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_A_Expr._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_QWORD *)(v0 + 32) = MEMORY[0x1E0DEE9D8];
  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lexpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rexpr, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_A_Expr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_A_Const._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_A_Const._StorageClass.defaultInstance = v0;
  return result;
}

{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t Node;
  char *v4;
  uint64_t WindowDef;
  uint64_t result;

  type metadata accessor for PgQuery_FuncCall._StorageClass(0);
  v0 = (_QWORD *)swift_allocObject();
  v1 = MEMORY[0x1E0DEE9D8];
  v0[2] = MEMORY[0x1E0DEE9D8];
  v0[3] = v1;
  v0[4] = v1;
  v2 = (char *)v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggFilter;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v2, 1, 1, Node);
  *((_BYTE *)v0
  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggWithinGroup) = 0;
  *((_BYTE *)v0
  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggStar) = 0;
  *((_BYTE *)v0
  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggDistinct) = 0;
  *((_BYTE *)v0
  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcVariadic) = 0;
  v4 = (char *)v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__over;
  WindowDef = type metadata accessor for PgQuery_WindowDef(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(WindowDef - 8) + 56))(v4, 1, 1, WindowDef);
  *(_DWORD *)((char *)v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_FuncCall._StorageClass.defaultInstance = (uint64_t)v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_A_Indices._StorageClass(0);
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 16) = 0;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lidx;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__uidx, 1, 1, Node);
  static PgQuery_A_Indices._StorageClass.defaultInstance = v0;
  return result;
}

{
  _QWORD *v0;
  char *v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_ResTarget._StorageClass(0);
  v0 = (_QWORD *)swift_allocObject();
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v0[4] = MEMORY[0x1E0DEE9D8];
  v1 = (char *)v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ResTargetP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)((char *)v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ResTargetP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_ResTarget._StorageClass.defaultInstance = (uint64_t)v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_MultiAssignRef._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__source;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colno) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ncolumns) = 0;
  static PgQuery_MultiAssignRef._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t v3;
  uint64_t TypeName;
  uint64_t result;

  type metadata accessor for PgQuery_TypeCast._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 56))(v3, 1, 1, TypeName);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_TypeCast._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_CollateClause._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collname) = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_CollateClause._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for PgQuery_SortBy._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyDir;
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyNulls;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOp) = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_SortBy._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Node;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_WindowDef._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0xE000000000000000;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 48) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 56) = v1;
  *(_DWORD *)(v0 + 64) = 0;
  v2 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset;
  Node = type metadata accessor for PgQuery_Node(0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v4(v2, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v4)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_WindowDef._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t v3;
  uint64_t Alias;
  uint64_t result;

  type metadata accessor for PgQuery_RangeSubselect._StorageClass(0);
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 16) = 0;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
  Alias = type metadata accessor for PgQuery_Alias(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Alias - 8) + 56))(v3, 1, 1, Alias);
  static PgQuery_RangeSubselect._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;

  type metadata accessor for PgQuery_RangeTableSample._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__method) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = v4;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_RangeTableSample._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t Alias;
  uint64_t result;

  type metadata accessor for PgQuery_RangeTableFunc._StorageClass(0);
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 16) = 0;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  v3(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr, 1, 1, Node);
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namespaces) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns) = v4;
  v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
  Alias = type metadata accessor for PgQuery_Alias(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Alias - 8) + 56))(v5, 1, 1, Alias);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_RangeTableFunc._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t TypeName;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_RangeTableFuncCol._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 56))(v1, 1, 1, TypeName);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__forOrdinality) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isNotNull) = 0;
  v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexpr, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_RangeTableFuncCol._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for PgQuery_IndexElem._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v4 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexcolname);
  *v4 = 0;
  v4[1] = 0xE000000000000000;
  v5 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclass) = v5;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclassopts) = v5;
  v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordering;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nullsOrdering;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  static PgQuery_IndexElem._StorageClass.defaultInstance = v0;
  return result;
}

{
  _QWORD *v0;
  char *v1;
  uint64_t Node;
  uint64_t result;
  char *v4;

  type metadata accessor for PgQuery_DefElem._StorageClass(0);
  v0 = (_QWORD *)swift_allocObject();
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v0[4] = 0;
  v0[5] = 0xE000000000000000;
  v1 = (char *)v0
     + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v4 = (char *)v0
     + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defaction;
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  *(_DWORD *)((char *)v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_DefElem._StorageClass.defaultInstance = (uint64_t)v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for PgQuery_RangeTblFunction._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcount) = 0;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolnames) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypes) = v4;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypmods) = v4;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcollations) = v4;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcparams) = v4;
  static PgQuery_RangeTblFunction._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_TableSampleClause._StorageClass(0);
  v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = MEMORY[0x1E0DEE9D8];
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_TableSampleClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  static PgQuery_TableSampleClause._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_WithCheckOption._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0xE000000000000000;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0xE000000000000000;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_WithCheckOptionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_WithCheckOptionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cascaded) = 0;
  static PgQuery_WithCheckOption._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t TypeName;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_FunctionParameter._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argType;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 56))(v1, 1, 1, TypeName);
  v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode;
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defexpr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v4, 1, 1, Node);
  static PgQuery_FunctionParameter._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t v3;
  uint64_t TypeName;
  uint64_t result;

  type metadata accessor for PgQuery_XmlSerialize._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 56))(v3, 1, 1, TypeName);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_XmlSerialize._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  _QWORD *v4;

  type metadata accessor for PgQuery_InferClause._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v4 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname);
  *v4 = 0;
  v4[1] = 0xE000000000000000;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_InferClause._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t InferClause;
  uint64_t v3;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_OnConflictClause._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infer;
  InferClause = type metadata accessor for PgQuery_InferClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(InferClause - 8) + 56))(v1, 1, 1, InferClause);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList) = MEMORY[0x1E0DEE9D8];
  v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_OnConflictClause._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for PgQuery_PartitionElem._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclass) = v4;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_PartitionElem._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_PartitionRangeDatum._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__value;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_PartitionRangeDatum._StorageClass.defaultInstance = v0;
  return result;
}

uint64_t PgQuery_Node._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
}

uint64_t ObjC metadata update function for PgQuery_Node._StorageClass()
{
  return type metadata accessor for PgQuery_Node._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_Node._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Node._StorageClass);
}

void type metadata completion function for PgQuery_Node._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node.OneOf_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node.OneOf_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for PgQuery_Node.OneOf_Node(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Node.OneOf_Node);
}

uint64_t PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v7 = *(int *)(type metadata accessor for PgQuery_Node(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v8 = *(_QWORD *)(v3 + v7);
    type metadata accessor for PgQuery_Node._StorageClass(0);
    v15 = a3;
    v9 = swift_allocObject();
    v10 = v9 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
    v11 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
    v12 = v8 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)(v10, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with copy of PgQuery_Alias?(v12, v10, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    swift_release();
    *(_QWORD *)(v3 + v7) = v9;
    a3 = v15;
    swift_release();
  }
  v13 = swift_retain();
  closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(v13, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 2:
          closure #2 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 3:
          closure #3 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 4:
          closure #4 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 5:
          closure #5 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 6:
          closure #6 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 7:
          closure #7 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 8:
          closure #8 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 9:
          closure #9 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 10:
          closure #10 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 11:
          closure #11 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 12:
          closure #12 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 13:
          closure #13 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 14:
          closure #14 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 15:
          closure #15 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 16:
          closure #16 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 17:
          closure #17 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 18:
          closure #18 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 19:
          closure #19 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 20:
          closure #20 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 21:
          closure #21 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 22:
          closure #22 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 23:
          closure #23 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 24:
          closure #24 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 25:
          closure #25 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 26:
          closure #26 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 27:
          closure #27 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 28:
          closure #28 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 29:
          closure #29 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 30:
          closure #30 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 31:
          closure #31 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 32:
          closure #32 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 33:
          closure #33 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 34:
          closure #34 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 35:
          closure #35 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 36:
          closure #36 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 37:
          closure #37 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 38:
          closure #38 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 39:
          closure #39 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 40:
          closure #40 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 41:
          closure #41 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 42:
          closure #42 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 43:
          closure #43 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 44:
          closure #44 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 45:
          closure #45 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 46:
          closure #46 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 47:
          closure #47 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 48:
          closure #48 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 49:
          closure #49 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 50:
          closure #50 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 51:
          closure #51 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 52:
          closure #52 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 53:
          closure #53 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 54:
          closure #54 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 55:
          closure #55 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 56:
          closure #56 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 57:
          closure #57 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 58:
          closure #58 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 59:
          closure #59 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 60:
          closure #60 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 61:
          closure #61 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 62:
          closure #62 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 63:
          closure #63 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        case 64:
          closure #64 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
          break;
        default:
          switch(result)
          {
            case 65:
              closure #65 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 66:
              closure #66 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 67:
              closure #67 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 68:
              closure #68 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 69:
              closure #69 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 70:
              closure #70 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 71:
              closure #71 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 72:
              closure #72 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 73:
              closure #73 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 74:
              closure #74 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 75:
              closure #75 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 76:
              closure #76 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 77:
              closure #77 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 78:
              closure #78 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 79:
              closure #79 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 80:
              closure #80 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 81:
              closure #81 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 82:
              closure #82 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 83:
              closure #83 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 84:
              closure #84 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 85:
              closure #85 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 86:
              closure #86 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 87:
              closure #87 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 88:
              closure #88 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 89:
              closure #89 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 90:
              closure #90 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 91:
              closure #91 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 92:
              closure #92 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 93:
              closure #93 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 94:
              closure #94 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 95:
              closure #95 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 96:
              closure #96 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 97:
              closure #97 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 98:
              closure #98 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 99:
              closure #99 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 100:
              closure #100 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 101:
              closure #101 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 102:
              closure #102 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 103:
              closure #103 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 104:
              closure #104 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 105:
              closure #105 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 106:
              closure #106 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 107:
              closure #107 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 108:
              closure #108 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 109:
              closure #109 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 110:
              closure #110 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 111:
              closure #111 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 112:
              closure #112 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 113:
              closure #113 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 114:
              closure #114 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 115:
              closure #115 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 116:
              closure #116 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 117:
              closure #117 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 118:
              closure #118 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 119:
              closure #119 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 120:
              closure #120 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 121:
              closure #121 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 122:
              closure #122 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 123:
              closure #123 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 124:
              closure #124 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 125:
              closure #125 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 126:
              closure #126 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 127:
              closure #127 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            case 128:
              closure #128 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
              break;
            default:
              switch(result)
              {
                case 129:
                  closure #129 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 130:
                  closure #130 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 131:
                  closure #131 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 132:
                  closure #132 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 133:
                  closure #133 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 134:
                  closure #134 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 135:
                  closure #135 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 136:
                  closure #136 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 137:
                  closure #137 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 138:
                  closure #138 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 139:
                  closure #139 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 140:
                  closure #140 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 141:
                  closure #141 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 142:
                  closure #142 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 143:
                  closure #143 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 144:
                  closure #144 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 145:
                  closure #145 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 146:
                  closure #146 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 147:
                  closure #147 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 148:
                  closure #148 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 149:
                  closure #149 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 150:
                  closure #150 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 151:
                  closure #151 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 152:
                  closure #152 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 153:
                  closure #153 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 154:
                  closure #154 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 155:
                  closure #155 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 156:
                  closure #156 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 157:
                  closure #157 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 158:
                  closure #158 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 159:
                  closure #159 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 160:
                  closure #160 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 161:
                  closure #161 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 162:
                  closure #162 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 163:
                  closure #163 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 164:
                  closure #164 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 165:
                  closure #165 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 166:
                  closure #166 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 167:
                  closure #167 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 168:
                  closure #168 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 169:
                  closure #169 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 170:
                  closure #170 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 171:
                  closure #171 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 172:
                  closure #172 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 173:
                  closure #173 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 174:
                  closure #174 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 175:
                  closure #175 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 176:
                  closure #176 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 177:
                  closure #177 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 178:
                  closure #178 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 179:
                  closure #179 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 180:
                  closure #180 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 181:
                  closure #181 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 182:
                  closure #182 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 183:
                  closure #183 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 184:
                  closure #184 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 185:
                  closure #185 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 186:
                  closure #186 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 187:
                  closure #187 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 188:
                  closure #188 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 189:
                  closure #189 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 190:
                  closure #190 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 191:
                  closure #191 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                case 192:
                  closure #192 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                  break;
                default:
                  switch(result)
                  {
                    case 193:
                      closure #193 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 194:
                      closure #194 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 195:
                      closure #195 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 196:
                      closure #196 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 197:
                      closure #197 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 198:
                      closure #198 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 199:
                      closure #199 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 200:
                      closure #200 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 201:
                      closure #201 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 202:
                      closure #202 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 203:
                      closure #203 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 204:
                      closure #204 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 205:
                      closure #205 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 206:
                      closure #206 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 207:
                      closure #207 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 208:
                      closure #208 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 209:
                      closure #209 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 210:
                      closure #210 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 211:
                      closure #211 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 212:
                      closure #212 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 213:
                      closure #213 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 214:
                      closure #214 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 215:
                      closure #215 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 216:
                      closure #216 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 217:
                      closure #217 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 218:
                      closure #218 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 219:
                      closure #219 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 220:
                      closure #220 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 221:
                      closure #221 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 222:
                      closure #222 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 223:
                      closure #223 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 224:
                      closure #224 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 225:
                      closure #225 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 226:
                      closure #226 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 227:
                      closure #227 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    case 228:
                      closure #228 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                      break;
                    default:
                      goto LABEL_5;
                  }
                  break;
              }
              break;
          }
          break;
      }
LABEL_5:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Alias;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  Alias = type metadata accessor for PgQuery_Alias(0);
  v5 = *(_QWORD *)(Alias - 8);
  v6 = MEMORY[0x1E0C80A78](Alias);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, Alias);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
    else
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Alias?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_Alias);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_Alias);
      v25(v24, 0, 1, Alias);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Alias?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_Alias?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, Alias) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Alias?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_Alias?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_Alias);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Alias?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_Alias);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #2 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RangeVar;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v5 = *(_QWORD *)(RangeVar - 8);
  v6 = MEMORY[0x1E0C80A78](RangeVar);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RangeVar);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_RangeVar);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_RangeVar);
      v25(v24, 0, 1, RangeVar);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_RangeVar);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_RangeVar);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #3 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TableFunc;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  TableFunc = type metadata accessor for PgQuery_TableFunc(0);
  v5 = *(_QWORD *)(TableFunc - 8);
  v6 = MEMORY[0x1E0C80A78](TableFunc);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TableFunc?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, TableFunc);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TableFunc?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_TableFunc);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_TableFunc);
      v25(v24, 0, 1, TableFunc);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, type metadata accessor for PgQuery_TableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_TableFunc);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TableFunc?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_TableFunc?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, TableFunc) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TableFunc?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_TableFunc?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_TableFunc);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TableFunc?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_TableFunc);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #4 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Expr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  Expr = type metadata accessor for PgQuery_Expr(0);
  v5 = *(_QWORD *)(Expr - 8);
  v6 = MEMORY[0x1E0C80A78](Expr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Expr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, Expr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Expr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_Expr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_Expr);
      v25(v24, 0, 1, Expr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Expr and conformance PgQuery_Expr, type metadata accessor for PgQuery_Expr, (uint64_t)&protocol conformance descriptor for PgQuery_Expr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Expr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_Expr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, Expr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Expr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_Expr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_Expr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Expr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_Expr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #5 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Var;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  Var = type metadata accessor for PgQuery_Var(0);
  v5 = *(_QWORD *)(Var - 8);
  v6 = MEMORY[0x1E0C80A78](Var);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Var?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, Var);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Var?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_Var);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_Var);
      v25(v24, 0, 1, Var);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Var and conformance PgQuery_Var, type metadata accessor for PgQuery_Var, (uint64_t)&protocol conformance descriptor for PgQuery_Var);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Var?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_Var?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, Var) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Var?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_Var?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_Var);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Var?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_Var);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #6 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Param;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  Param = type metadata accessor for PgQuery_Param(0);
  v5 = *(_QWORD *)(Param - 8);
  v6 = MEMORY[0x1E0C80A78](Param);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Param?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, Param);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Param?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_Param);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_Param);
      v25(v24, 0, 1, Param);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Param and conformance PgQuery_Param, type metadata accessor for PgQuery_Param, (uint64_t)&protocol conformance descriptor for PgQuery_Param);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Param?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_Param?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, Param) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Param?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_Param?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_Param);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Param?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_Param);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #7 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Aggref;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  Aggref = type metadata accessor for PgQuery_Aggref(0);
  v5 = *(_QWORD *)(Aggref - 8);
  v6 = MEMORY[0x1E0C80A78](Aggref);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Aggref?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, Aggref);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Aggref?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_Aggref);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_Aggref);
      v25(v24, 0, 1, Aggref);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Aggref and conformance PgQuery_Aggref, type metadata accessor for PgQuery_Aggref, (uint64_t)&protocol conformance descriptor for PgQuery_Aggref);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Aggref?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_Aggref?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, Aggref) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Aggref?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_Aggref?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_Aggref);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Aggref?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_Aggref);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #8 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t GroupingFunc;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  GroupingFunc = type metadata accessor for PgQuery_GroupingFunc(0);
  v5 = *(_QWORD *)(GroupingFunc - 8);
  v6 = MEMORY[0x1E0C80A78](GroupingFunc);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GroupingFunc?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, GroupingFunc);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 7)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_GroupingFunc?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_GroupingFunc);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_GroupingFunc);
      v25(v24, 0, 1, GroupingFunc);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingFunc and conformance PgQuery_GroupingFunc, type metadata accessor for PgQuery_GroupingFunc, (uint64_t)&protocol conformance descriptor for PgQuery_GroupingFunc);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_GroupingFunc?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_GroupingFunc?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, GroupingFunc) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_GroupingFunc?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_GroupingFunc?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_GroupingFunc);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_GroupingFunc?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_GroupingFunc);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #9 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WindowFunc;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  WindowFunc = type metadata accessor for PgQuery_WindowFunc(0);
  v5 = *(_QWORD *)(WindowFunc - 8);
  v6 = MEMORY[0x1E0C80A78](WindowFunc);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WindowFunc?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, WindowFunc);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 8)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WindowFunc?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_WindowFunc);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_WindowFunc);
      v25(v24, 0, 1, WindowFunc);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowFunc and conformance PgQuery_WindowFunc, type metadata accessor for PgQuery_WindowFunc, (uint64_t)&protocol conformance descriptor for PgQuery_WindowFunc);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WindowFunc?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_WindowFunc?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, WindowFunc) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WindowFunc?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_WindowFunc?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_WindowFunc);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WindowFunc?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_WindowFunc);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #10 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t SubscriptingRef;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  SubscriptingRef = type metadata accessor for PgQuery_SubscriptingRef(0);
  v5 = *(_QWORD *)(SubscriptingRef - 8);
  v6 = MEMORY[0x1E0C80A78](SubscriptingRef);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SubscriptingRef?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, SubscriptingRef);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 9)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SubscriptingRef?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_SubscriptingRef);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_SubscriptingRef);
      v25(v24, 0, 1, SubscriptingRef);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubscriptingRef and conformance PgQuery_SubscriptingRef, type metadata accessor for PgQuery_SubscriptingRef, (uint64_t)&protocol conformance descriptor for PgQuery_SubscriptingRef);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SubscriptingRef?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_SubscriptingRef?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, SubscriptingRef) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SubscriptingRef?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_SubscriptingRef?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_SubscriptingRef);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SubscriptingRef?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_SubscriptingRef);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #11 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FuncExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  FuncExpr = type metadata accessor for PgQuery_FuncExpr(0);
  v5 = *(_QWORD *)(FuncExpr - 8);
  v6 = MEMORY[0x1E0C80A78](FuncExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FuncExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, FuncExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 10)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_FuncExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_FuncExpr);
      v25(v24, 0, 1, FuncExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, type metadata accessor for PgQuery_FuncExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FuncExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, FuncExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_FuncExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_FuncExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #12 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t NamedArgExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  NamedArgExpr = type metadata accessor for PgQuery_NamedArgExpr(0);
  v5 = *(_QWORD *)(NamedArgExpr - 8);
  v6 = MEMORY[0x1E0C80A78](NamedArgExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_NamedArgExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, NamedArgExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NamedArgExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_NamedArgExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_NamedArgExpr);
      v25(v24, 0, 1, NamedArgExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NamedArgExpr and conformance PgQuery_NamedArgExpr, type metadata accessor for PgQuery_NamedArgExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NamedArgExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NamedArgExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_NamedArgExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, NamedArgExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NamedArgExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_NamedArgExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_NamedArgExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NamedArgExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_NamedArgExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #13 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t OpExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  OpExpr = type metadata accessor for PgQuery_OpExpr(0);
  v5 = *(_QWORD *)(OpExpr - 8);
  v6 = MEMORY[0x1E0C80A78](OpExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_OpExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, OpExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 12)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_OpExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_OpExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_OpExpr);
      v25(v24, 0, 1, OpExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OpExpr and conformance PgQuery_OpExpr, type metadata accessor for PgQuery_OpExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OpExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_OpExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_OpExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, OpExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_OpExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_OpExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_OpExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_OpExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_OpExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #14 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DistinctExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  DistinctExpr = type metadata accessor for PgQuery_DistinctExpr(0);
  v5 = *(_QWORD *)(DistinctExpr - 8);
  v6 = MEMORY[0x1E0C80A78](DistinctExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DistinctExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, DistinctExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 13)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DistinctExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_DistinctExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_DistinctExpr);
      v25(v24, 0, 1, DistinctExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DistinctExpr and conformance PgQuery_DistinctExpr, type metadata accessor for PgQuery_DistinctExpr, (uint64_t)&protocol conformance descriptor for PgQuery_DistinctExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DistinctExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_DistinctExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, DistinctExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DistinctExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_DistinctExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_DistinctExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DistinctExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_DistinctExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #15 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t NullIfExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  NullIfExpr = type metadata accessor for PgQuery_NullIfExpr(0);
  v5 = *(_QWORD *)(NullIfExpr - 8);
  v6 = MEMORY[0x1E0C80A78](NullIfExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_NullIfExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, NullIfExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 14)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NullIfExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_NullIfExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_NullIfExpr);
      v25(v24, 0, 1, NullIfExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullIfExpr and conformance PgQuery_NullIfExpr, type metadata accessor for PgQuery_NullIfExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NullIfExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NullIfExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_NullIfExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, NullIfExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NullIfExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_NullIfExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_NullIfExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NullIfExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_NullIfExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #16 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ScalarArrayOpExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ScalarArrayOpExpr = type metadata accessor for PgQuery_ScalarArrayOpExpr(0);
  v5 = *(_QWORD *)(ScalarArrayOpExpr - 8);
  v6 = MEMORY[0x1E0C80A78](ScalarArrayOpExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ScalarArrayOpExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ScalarArrayOpExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 15)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ScalarArrayOpExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ScalarArrayOpExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ScalarArrayOpExpr);
      v25(v24, 0, 1, ScalarArrayOpExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScalarArrayOpExpr and conformance PgQuery_ScalarArrayOpExpr, type metadata accessor for PgQuery_ScalarArrayOpExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ScalarArrayOpExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ScalarArrayOpExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ScalarArrayOpExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ScalarArrayOpExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ScalarArrayOpExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ScalarArrayOpExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ScalarArrayOpExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ScalarArrayOpExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ScalarArrayOpExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #17 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t BoolExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  BoolExpr = type metadata accessor for PgQuery_BoolExpr(0);
  v5 = *(_QWORD *)(BoolExpr - 8);
  v6 = MEMORY[0x1E0C80A78](BoolExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_BoolExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, BoolExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 16)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_BoolExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_BoolExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_BoolExpr);
      v25(v24, 0, 1, BoolExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BoolExpr and conformance PgQuery_BoolExpr, type metadata accessor for PgQuery_BoolExpr, (uint64_t)&protocol conformance descriptor for PgQuery_BoolExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_BoolExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_BoolExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, BoolExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_BoolExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_BoolExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_BoolExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_BoolExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_BoolExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #18 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t SubLink;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  SubLink = type metadata accessor for PgQuery_SubLink(0);
  v5 = *(_QWORD *)(SubLink - 8);
  v6 = MEMORY[0x1E0C80A78](SubLink);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SubLink?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, SubLink);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 17)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SubLink?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_SubLink);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_SubLink);
      v25(v24, 0, 1, SubLink);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubLink and conformance PgQuery_SubLink, type metadata accessor for PgQuery_SubLink, (uint64_t)&protocol conformance descriptor for PgQuery_SubLink);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SubLink?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_SubLink?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, SubLink) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SubLink?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_SubLink?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_SubLink);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SubLink?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_SubLink);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #19 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t SubPlan;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  SubPlan = type metadata accessor for PgQuery_SubPlan(0);
  v5 = *(_QWORD *)(SubPlan - 8);
  v6 = MEMORY[0x1E0C80A78](SubPlan);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SubPlan?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, SubPlan);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 18)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SubPlan?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_SubPlan);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_SubPlan);
      v25(v24, 0, 1, SubPlan);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubPlan and conformance PgQuery_SubPlan, type metadata accessor for PgQuery_SubPlan, (uint64_t)&protocol conformance descriptor for PgQuery_SubPlan);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SubPlan?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_SubPlan?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, SubPlan) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SubPlan?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_SubPlan?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_SubPlan);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SubPlan?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_SubPlan);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #20 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlternativeSubPlan;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlternativeSubPlan = type metadata accessor for PgQuery_AlternativeSubPlan(0);
  v5 = *(_QWORD *)(AlternativeSubPlan - 8);
  v6 = MEMORY[0x1E0C80A78](AlternativeSubPlan);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlternativeSubPlan?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlternativeSubPlan);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 19)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlternativeSubPlan?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlternativeSubPlan);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlternativeSubPlan);
      v25(v24, 0, 1, AlternativeSubPlan);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlternativeSubPlan and conformance PgQuery_AlternativeSubPlan, type metadata accessor for PgQuery_AlternativeSubPlan, (uint64_t)&protocol conformance descriptor for PgQuery_AlternativeSubPlan);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlternativeSubPlan?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlternativeSubPlan?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlternativeSubPlan) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlternativeSubPlan?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlternativeSubPlan?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlternativeSubPlan);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlternativeSubPlan?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlternativeSubPlan);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #21 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FieldSelect;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  FieldSelect = type metadata accessor for PgQuery_FieldSelect(0);
  v5 = *(_QWORD *)(FieldSelect - 8);
  v6 = MEMORY[0x1E0C80A78](FieldSelect);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FieldSelect?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, FieldSelect);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 20)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FieldSelect?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_FieldSelect);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_FieldSelect);
      v25(v24, 0, 1, FieldSelect);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldSelect and conformance PgQuery_FieldSelect, type metadata accessor for PgQuery_FieldSelect, (uint64_t)&protocol conformance descriptor for PgQuery_FieldSelect);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FieldSelect?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_FieldSelect?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, FieldSelect) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FieldSelect?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_FieldSelect?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_FieldSelect);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FieldSelect?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_FieldSelect);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #22 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FieldStore;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  FieldStore = type metadata accessor for PgQuery_FieldStore(0);
  v5 = *(_QWORD *)(FieldStore - 8);
  v6 = MEMORY[0x1E0C80A78](FieldStore);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FieldStore?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, FieldStore);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 21)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FieldStore?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_FieldStore);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_FieldStore);
      v25(v24, 0, 1, FieldStore);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldStore and conformance PgQuery_FieldStore, type metadata accessor for PgQuery_FieldStore, (uint64_t)&protocol conformance descriptor for PgQuery_FieldStore);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FieldStore?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_FieldStore?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, FieldStore) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FieldStore?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_FieldStore?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_FieldStore);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FieldStore?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_FieldStore);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #23 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RelabelType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RelabelType = type metadata accessor for PgQuery_RelabelType(0);
  v5 = *(_QWORD *)(RelabelType - 8);
  v6 = MEMORY[0x1E0C80A78](RelabelType);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RelabelType?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RelabelType);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 22)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RelabelType?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_RelabelType);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_RelabelType);
      v25(v24, 0, 1, RelabelType);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RelabelType and conformance PgQuery_RelabelType, type metadata accessor for PgQuery_RelabelType, (uint64_t)&protocol conformance descriptor for PgQuery_RelabelType);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RelabelType?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_RelabelType?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RelabelType) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RelabelType?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RelabelType?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_RelabelType);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RelabelType?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_RelabelType);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #24 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CoerceViaIO;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  CoerceViaIO = type metadata accessor for PgQuery_CoerceViaIO(0);
  v5 = *(_QWORD *)(CoerceViaIO - 8);
  v6 = MEMORY[0x1E0C80A78](CoerceViaIO);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CoerceViaIO?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, CoerceViaIO);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 23)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CoerceViaIO?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CoerceViaIO);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CoerceViaIO);
      v25(v24, 0, 1, CoerceViaIO);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceViaIO and conformance PgQuery_CoerceViaIO, type metadata accessor for PgQuery_CoerceViaIO, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceViaIO);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CoerceViaIO?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CoerceViaIO?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, CoerceViaIO) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CoerceViaIO?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CoerceViaIO?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CoerceViaIO);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CoerceViaIO?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CoerceViaIO);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #25 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ArrayCoerceExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ArrayCoerceExpr = type metadata accessor for PgQuery_ArrayCoerceExpr(0);
  v5 = *(_QWORD *)(ArrayCoerceExpr - 8);
  v6 = MEMORY[0x1E0C80A78](ArrayCoerceExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ArrayCoerceExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ArrayCoerceExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 24)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ArrayCoerceExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ArrayCoerceExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ArrayCoerceExpr);
      v25(v24, 0, 1, ArrayCoerceExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayCoerceExpr and conformance PgQuery_ArrayCoerceExpr, type metadata accessor for PgQuery_ArrayCoerceExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ArrayCoerceExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ArrayCoerceExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ArrayCoerceExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ArrayCoerceExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ArrayCoerceExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ArrayCoerceExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ArrayCoerceExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ArrayCoerceExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ArrayCoerceExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #26 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ConvertRowtypeExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ConvertRowtypeExpr = type metadata accessor for PgQuery_ConvertRowtypeExpr(0);
  v5 = *(_QWORD *)(ConvertRowtypeExpr - 8);
  v6 = MEMORY[0x1E0C80A78](ConvertRowtypeExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ConvertRowtypeExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ConvertRowtypeExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 25)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ConvertRowtypeExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ConvertRowtypeExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ConvertRowtypeExpr);
      v25(v24, 0, 1, ConvertRowtypeExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConvertRowtypeExpr and conformance PgQuery_ConvertRowtypeExpr, type metadata accessor for PgQuery_ConvertRowtypeExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ConvertRowtypeExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ConvertRowtypeExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ConvertRowtypeExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ConvertRowtypeExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ConvertRowtypeExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ConvertRowtypeExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ConvertRowtypeExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ConvertRowtypeExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ConvertRowtypeExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #27 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CollateExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  CollateExpr = type metadata accessor for PgQuery_CollateExpr(0);
  v5 = *(_QWORD *)(CollateExpr - 8);
  v6 = MEMORY[0x1E0C80A78](CollateExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CollateExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, CollateExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 26)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CollateExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CollateExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CollateExpr);
      v25(v24, 0, 1, CollateExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateExpr and conformance PgQuery_CollateExpr, type metadata accessor for PgQuery_CollateExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CollateExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CollateExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CollateExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, CollateExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CollateExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CollateExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CollateExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CollateExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CollateExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #28 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CaseExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  CaseExpr = type metadata accessor for PgQuery_CaseExpr(0);
  v5 = *(_QWORD *)(CaseExpr - 8);
  v6 = MEMORY[0x1E0C80A78](CaseExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CaseExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, CaseExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 27)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CaseExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CaseExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CaseExpr);
      v25(v24, 0, 1, CaseExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseExpr and conformance PgQuery_CaseExpr, type metadata accessor for PgQuery_CaseExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CaseExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CaseExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CaseExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, CaseExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CaseExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CaseExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CaseExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CaseExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CaseExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #29 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CaseWhen;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  CaseWhen = type metadata accessor for PgQuery_CaseWhen(0);
  v5 = *(_QWORD *)(CaseWhen - 8);
  v6 = MEMORY[0x1E0C80A78](CaseWhen);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CaseWhen?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, CaseWhen);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 28)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CaseWhen?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CaseWhen);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CaseWhen);
      v25(v24, 0, 1, CaseWhen);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseWhen and conformance PgQuery_CaseWhen, type metadata accessor for PgQuery_CaseWhen, (uint64_t)&protocol conformance descriptor for PgQuery_CaseWhen);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CaseWhen?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CaseWhen?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, CaseWhen) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CaseWhen?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CaseWhen?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CaseWhen);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CaseWhen?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CaseWhen);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #30 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CaseTestExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  CaseTestExpr = type metadata accessor for PgQuery_CaseTestExpr(0);
  v5 = *(_QWORD *)(CaseTestExpr - 8);
  v6 = MEMORY[0x1E0C80A78](CaseTestExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CaseTestExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, CaseTestExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 29)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CaseTestExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CaseTestExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CaseTestExpr);
      v25(v24, 0, 1, CaseTestExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseTestExpr and conformance PgQuery_CaseTestExpr, type metadata accessor for PgQuery_CaseTestExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CaseTestExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CaseTestExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CaseTestExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, CaseTestExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CaseTestExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CaseTestExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CaseTestExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CaseTestExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CaseTestExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #31 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ArrayExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ArrayExpr = type metadata accessor for PgQuery_ArrayExpr(0);
  v5 = *(_QWORD *)(ArrayExpr - 8);
  v6 = MEMORY[0x1E0C80A78](ArrayExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ArrayExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ArrayExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 30)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ArrayExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ArrayExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ArrayExpr);
      v25(v24, 0, 1, ArrayExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayExpr and conformance PgQuery_ArrayExpr, type metadata accessor for PgQuery_ArrayExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ArrayExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ArrayExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ArrayExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ArrayExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ArrayExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ArrayExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ArrayExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ArrayExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ArrayExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #32 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RowExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RowExpr = type metadata accessor for PgQuery_RowExpr(0);
  v5 = *(_QWORD *)(RowExpr - 8);
  v6 = MEMORY[0x1E0C80A78](RowExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RowExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RowExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 31)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RowExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_RowExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_RowExpr);
      v25(v24, 0, 1, RowExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowExpr and conformance PgQuery_RowExpr, type metadata accessor for PgQuery_RowExpr, (uint64_t)&protocol conformance descriptor for PgQuery_RowExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RowExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_RowExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RowExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RowExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RowExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_RowExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RowExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_RowExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #33 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RowCompareExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RowCompareExpr = type metadata accessor for PgQuery_RowCompareExpr(0);
  v5 = *(_QWORD *)(RowCompareExpr - 8);
  v6 = MEMORY[0x1E0C80A78](RowCompareExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RowCompareExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RowCompareExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 32)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RowCompareExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_RowCompareExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_RowCompareExpr);
      v25(v24, 0, 1, RowCompareExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowCompareExpr and conformance PgQuery_RowCompareExpr, type metadata accessor for PgQuery_RowCompareExpr, (uint64_t)&protocol conformance descriptor for PgQuery_RowCompareExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RowCompareExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_RowCompareExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RowCompareExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RowCompareExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RowCompareExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_RowCompareExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RowCompareExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_RowCompareExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #34 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CoalesceExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  CoalesceExpr = type metadata accessor for PgQuery_CoalesceExpr(0);
  v5 = *(_QWORD *)(CoalesceExpr - 8);
  v6 = MEMORY[0x1E0C80A78](CoalesceExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CoalesceExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, CoalesceExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 33)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CoalesceExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CoalesceExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CoalesceExpr);
      v25(v24, 0, 1, CoalesceExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoalesceExpr and conformance PgQuery_CoalesceExpr, type metadata accessor for PgQuery_CoalesceExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CoalesceExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CoalesceExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CoalesceExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, CoalesceExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CoalesceExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CoalesceExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CoalesceExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CoalesceExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CoalesceExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #35 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t MinMaxExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  MinMaxExpr = type metadata accessor for PgQuery_MinMaxExpr(0);
  v5 = *(_QWORD *)(MinMaxExpr - 8);
  v6 = MEMORY[0x1E0C80A78](MinMaxExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_MinMaxExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, MinMaxExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 34)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_MinMaxExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_MinMaxExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_MinMaxExpr);
      v25(v24, 0, 1, MinMaxExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MinMaxExpr and conformance PgQuery_MinMaxExpr, type metadata accessor for PgQuery_MinMaxExpr, (uint64_t)&protocol conformance descriptor for PgQuery_MinMaxExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_MinMaxExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_MinMaxExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, MinMaxExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_MinMaxExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_MinMaxExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_MinMaxExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_MinMaxExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_MinMaxExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #36 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t SQLValueFunction;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  SQLValueFunction = type metadata accessor for PgQuery_SQLValueFunction(0);
  v5 = *(_QWORD *)(SQLValueFunction - 8);
  v6 = MEMORY[0x1E0C80A78](SQLValueFunction);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SQLValueFunction?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, SQLValueFunction);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 35)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SQLValueFunction?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_SQLValueFunction);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_SQLValueFunction);
      v25(v24, 0, 1, SQLValueFunction);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SQLValueFunction and conformance PgQuery_SQLValueFunction, type metadata accessor for PgQuery_SQLValueFunction, (uint64_t)&protocol conformance descriptor for PgQuery_SQLValueFunction);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SQLValueFunction?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_SQLValueFunction?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, SQLValueFunction) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SQLValueFunction?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_SQLValueFunction?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_SQLValueFunction);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SQLValueFunction?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_SQLValueFunction);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #37 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t XmlExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  XmlExpr = type metadata accessor for PgQuery_XmlExpr(0);
  v5 = *(_QWORD *)(XmlExpr - 8);
  v6 = MEMORY[0x1E0C80A78](XmlExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_XmlExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, XmlExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 36)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_XmlExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_XmlExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_XmlExpr);
      v25(v24, 0, 1, XmlExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlExpr and conformance PgQuery_XmlExpr, type metadata accessor for PgQuery_XmlExpr, (uint64_t)&protocol conformance descriptor for PgQuery_XmlExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_XmlExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_XmlExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, XmlExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_XmlExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_XmlExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_XmlExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_XmlExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_XmlExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #38 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t NullTest;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  NullTest = type metadata accessor for PgQuery_NullTest(0);
  v5 = *(_QWORD *)(NullTest - 8);
  v6 = MEMORY[0x1E0C80A78](NullTest);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_NullTest?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, NullTest);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 37)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NullTest?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_NullTest);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_NullTest);
      v25(v24, 0, 1, NullTest);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullTest and conformance PgQuery_NullTest, type metadata accessor for PgQuery_NullTest, (uint64_t)&protocol conformance descriptor for PgQuery_NullTest);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NullTest?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_NullTest?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, NullTest) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NullTest?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_NullTest?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_NullTest);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NullTest?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_NullTest);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #39 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t BooleanTest;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  BooleanTest = type metadata accessor for PgQuery_BooleanTest(0);
  v5 = *(_QWORD *)(BooleanTest - 8);
  v6 = MEMORY[0x1E0C80A78](BooleanTest);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_BooleanTest?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, BooleanTest);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 38)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_BooleanTest?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_BooleanTest);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_BooleanTest);
      v25(v24, 0, 1, BooleanTest);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BooleanTest and conformance PgQuery_BooleanTest, type metadata accessor for PgQuery_BooleanTest, (uint64_t)&protocol conformance descriptor for PgQuery_BooleanTest);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_BooleanTest?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_BooleanTest?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, BooleanTest) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_BooleanTest?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_BooleanTest?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_BooleanTest);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_BooleanTest?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_BooleanTest);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #40 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CoerceToDomain;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  CoerceToDomain = type metadata accessor for PgQuery_CoerceToDomain(0);
  v5 = *(_QWORD *)(CoerceToDomain - 8);
  v6 = MEMORY[0x1E0C80A78](CoerceToDomain);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CoerceToDomain?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, CoerceToDomain);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 39)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CoerceToDomain?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CoerceToDomain);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CoerceToDomain);
      v25(v24, 0, 1, CoerceToDomain);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomain and conformance PgQuery_CoerceToDomain, type metadata accessor for PgQuery_CoerceToDomain, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceToDomain);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CoerceToDomain?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CoerceToDomain?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, CoerceToDomain) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CoerceToDomain?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CoerceToDomain?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CoerceToDomain);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CoerceToDomain?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CoerceToDomain);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #41 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CoerceToDomainValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  CoerceToDomainValue = type metadata accessor for PgQuery_CoerceToDomainValue(0);
  v5 = *(_QWORD *)(CoerceToDomainValue - 8);
  v6 = MEMORY[0x1E0C80A78](CoerceToDomainValue);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CoerceToDomainValue?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, CoerceToDomainValue);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 40)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CoerceToDomainValue?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CoerceToDomainValue);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CoerceToDomainValue);
      v25(v24, 0, 1, CoerceToDomainValue);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomainValue and conformance PgQuery_CoerceToDomainValue, type metadata accessor for PgQuery_CoerceToDomainValue, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceToDomainValue);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CoerceToDomainValue?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CoerceToDomainValue?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, CoerceToDomainValue) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CoerceToDomainValue?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CoerceToDomainValue?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CoerceToDomainValue);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CoerceToDomainValue?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CoerceToDomainValue);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #42 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t SetToDefault;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  SetToDefault = type metadata accessor for PgQuery_SetToDefault(0);
  v5 = *(_QWORD *)(SetToDefault - 8);
  v6 = MEMORY[0x1E0C80A78](SetToDefault);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SetToDefault?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, SetToDefault);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 41)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SetToDefault?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_SetToDefault);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_SetToDefault);
      v25(v24, 0, 1, SetToDefault);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetToDefault and conformance PgQuery_SetToDefault, type metadata accessor for PgQuery_SetToDefault, (uint64_t)&protocol conformance descriptor for PgQuery_SetToDefault);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SetToDefault?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_SetToDefault?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, SetToDefault) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SetToDefault?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_SetToDefault?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_SetToDefault);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SetToDefault?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_SetToDefault);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #43 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CurrentOfExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  CurrentOfExpr = type metadata accessor for PgQuery_CurrentOfExpr(0);
  v5 = *(_QWORD *)(CurrentOfExpr - 8);
  v6 = MEMORY[0x1E0C80A78](CurrentOfExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CurrentOfExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, CurrentOfExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 42)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CurrentOfExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CurrentOfExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CurrentOfExpr);
      v25(v24, 0, 1, CurrentOfExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CurrentOfExpr and conformance PgQuery_CurrentOfExpr, type metadata accessor for PgQuery_CurrentOfExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CurrentOfExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CurrentOfExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CurrentOfExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, CurrentOfExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CurrentOfExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CurrentOfExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CurrentOfExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CurrentOfExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CurrentOfExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #44 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t NextValueExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  NextValueExpr = type metadata accessor for PgQuery_NextValueExpr(0);
  v5 = *(_QWORD *)(NextValueExpr - 8);
  v6 = MEMORY[0x1E0C80A78](NextValueExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_NextValueExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, NextValueExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 43)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NextValueExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_NextValueExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_NextValueExpr);
      v25(v24, 0, 1, NextValueExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NextValueExpr and conformance PgQuery_NextValueExpr, type metadata accessor for PgQuery_NextValueExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NextValueExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NextValueExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_NextValueExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, NextValueExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NextValueExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_NextValueExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_NextValueExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NextValueExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_NextValueExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #45 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t InferenceElem;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  InferenceElem = type metadata accessor for PgQuery_InferenceElem(0);
  v5 = *(_QWORD *)(InferenceElem - 8);
  v6 = MEMORY[0x1E0C80A78](InferenceElem);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_InferenceElem?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, InferenceElem);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 44)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_InferenceElem?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_InferenceElem);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_InferenceElem);
      v25(v24, 0, 1, InferenceElem);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferenceElem and conformance PgQuery_InferenceElem, type metadata accessor for PgQuery_InferenceElem, (uint64_t)&protocol conformance descriptor for PgQuery_InferenceElem);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_InferenceElem?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_InferenceElem?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, InferenceElem) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_InferenceElem?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_InferenceElem?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_InferenceElem);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_InferenceElem?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_InferenceElem);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #46 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TargetEntry;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  TargetEntry = type metadata accessor for PgQuery_TargetEntry(0);
  v5 = *(_QWORD *)(TargetEntry - 8);
  v6 = MEMORY[0x1E0C80A78](TargetEntry);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TargetEntry?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, TargetEntry);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 45)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TargetEntry?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_TargetEntry);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_TargetEntry);
      v25(v24, 0, 1, TargetEntry);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TargetEntry and conformance PgQuery_TargetEntry, type metadata accessor for PgQuery_TargetEntry, (uint64_t)&protocol conformance descriptor for PgQuery_TargetEntry);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TargetEntry?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_TargetEntry?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, TargetEntry) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TargetEntry?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_TargetEntry?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_TargetEntry);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TargetEntry?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_TargetEntry);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #47 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RangeTblRef;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RangeTblRef = type metadata accessor for PgQuery_RangeTblRef(0);
  v5 = *(_QWORD *)(RangeTblRef - 8);
  v6 = MEMORY[0x1E0C80A78](RangeTblRef);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeTblRef?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RangeTblRef);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 46)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTblRef?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_RangeTblRef);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_RangeTblRef);
      v25(v24, 0, 1, RangeTblRef);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblRef and conformance PgQuery_RangeTblRef, type metadata accessor for PgQuery_RangeTblRef, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblRef);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTblRef?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_RangeTblRef?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RangeTblRef) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTblRef?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RangeTblRef?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_RangeTblRef);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTblRef?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_RangeTblRef);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #48 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t JoinExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  JoinExpr = type metadata accessor for PgQuery_JoinExpr(0);
  v5 = *(_QWORD *)(JoinExpr - 8);
  v6 = MEMORY[0x1E0C80A78](JoinExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_JoinExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, JoinExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 47)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_JoinExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_JoinExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_JoinExpr);
      v25(v24, 0, 1, JoinExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_JoinExpr and conformance PgQuery_JoinExpr, type metadata accessor for PgQuery_JoinExpr, (uint64_t)&protocol conformance descriptor for PgQuery_JoinExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_JoinExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_JoinExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, JoinExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_JoinExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_JoinExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_JoinExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_JoinExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_JoinExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #49 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  v4 = type metadata accessor for PgQuery_FromExpr(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FromExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, v4);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 48)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FromExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_FromExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_FromExpr);
      v25(v24, 0, 1, v4);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, type metadata accessor for PgQuery_FromExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FromExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, v4) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FromExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_FromExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FromExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_FromExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #50 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  v4 = type metadata accessor for PgQuery_OnConflictExpr(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, v4);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 49)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_OnConflictExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_OnConflictExpr);
      v25(v24, 0, 1, v4);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, type metadata accessor for PgQuery_OnConflictExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, v4) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_OnConflictExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_OnConflictExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #51 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t IntoClause;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  v5 = *(_QWORD *)(IntoClause - 8);
  v6 = MEMORY[0x1E0C80A78](IntoClause);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_IntoClause?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, IntoClause);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 50)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_IntoClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_IntoClause);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_IntoClause);
      v25(v24, 0, 1, IntoClause);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, type metadata accessor for PgQuery_IntoClause, (uint64_t)&protocol conformance descriptor for PgQuery_IntoClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, IntoClause) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_IntoClause?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_IntoClause);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_IntoClause?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_IntoClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #52 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RawStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RawStmt = type metadata accessor for PgQuery_RawStmt(0);
  v5 = *(_QWORD *)(RawStmt - 8);
  v6 = MEMORY[0x1E0C80A78](RawStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RawStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RawStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 51)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RawStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_RawStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_RawStmt);
      v25(v24, 0, 1, RawStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, type metadata accessor for PgQuery_RawStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RawStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RawStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_RawStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RawStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RawStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RawStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_RawStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RawStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_RawStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #53 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Query;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  Query = type metadata accessor for PgQuery_Query(0);
  v5 = *(_QWORD *)(Query - 8);
  v6 = MEMORY[0x1E0C80A78](Query);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Query?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, Query);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 52)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Query?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_Query);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_Query);
      v25(v24, 0, 1, Query);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, type metadata accessor for PgQuery_Query, (uint64_t)&protocol conformance descriptor for PgQuery_Query);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Query?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_Query?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, Query) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Query?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_Query?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_Query);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Query?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_Query);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #54 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t InsertStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  InsertStmt = type metadata accessor for PgQuery_InsertStmt(0);
  v5 = *(_QWORD *)(InsertStmt - 8);
  v6 = MEMORY[0x1E0C80A78](InsertStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_InsertStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, InsertStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 53)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_InsertStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_InsertStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_InsertStmt);
      v25(v24, 0, 1, InsertStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InsertStmt and conformance PgQuery_InsertStmt, type metadata accessor for PgQuery_InsertStmt, (uint64_t)&protocol conformance descriptor for PgQuery_InsertStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_InsertStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_InsertStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, InsertStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_InsertStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_InsertStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_InsertStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_InsertStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_InsertStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #55 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  v4 = type metadata accessor for PgQuery_DeleteStmt(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DeleteStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, v4);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 54)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DeleteStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_DeleteStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_DeleteStmt);
      v25(v24, 0, 1, v4);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeleteStmt and conformance PgQuery_DeleteStmt, type metadata accessor for PgQuery_DeleteStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeleteStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DeleteStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_DeleteStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, v4) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DeleteStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_DeleteStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_DeleteStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DeleteStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_DeleteStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #56 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t UpdateStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  UpdateStmt = type metadata accessor for PgQuery_UpdateStmt(0);
  v5 = *(_QWORD *)(UpdateStmt - 8);
  v6 = MEMORY[0x1E0C80A78](UpdateStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_UpdateStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, UpdateStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 55)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_UpdateStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_UpdateStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_UpdateStmt);
      v25(v24, 0, 1, UpdateStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UpdateStmt and conformance PgQuery_UpdateStmt, type metadata accessor for PgQuery_UpdateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_UpdateStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_UpdateStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_UpdateStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, UpdateStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_UpdateStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_UpdateStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_UpdateStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_UpdateStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_UpdateStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #57 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t SelectStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
  v5 = *(_QWORD *)(SelectStmt - 8);
  v6 = MEMORY[0x1E0C80A78](SelectStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SelectStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, SelectStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 56)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_SelectStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_SelectStmt);
      v25(v24, 0, 1, SelectStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, type metadata accessor for PgQuery_SelectStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SelectStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, SelectStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_SelectStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_SelectStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #58 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterTableStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterTableStmt = type metadata accessor for PgQuery_AlterTableStmt(0);
  v5 = *(_QWORD *)(AlterTableStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterTableStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterTableStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterTableStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 57)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTableStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterTableStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterTableStmt);
      v25(v24, 0, 1, AlterTableStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableStmt and conformance PgQuery_AlterTableStmt, type metadata accessor for PgQuery_AlterTableStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTableStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterTableStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterTableStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTableStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterTableStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterTableStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTableStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterTableStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #59 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterTableCmd;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterTableCmd = type metadata accessor for PgQuery_AlterTableCmd(0);
  v5 = *(_QWORD *)(AlterTableCmd - 8);
  v6 = MEMORY[0x1E0C80A78](AlterTableCmd);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterTableCmd?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterTableCmd);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 58)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTableCmd?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterTableCmd);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterTableCmd);
      v25(v24, 0, 1, AlterTableCmd);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableCmd and conformance PgQuery_AlterTableCmd, type metadata accessor for PgQuery_AlterTableCmd, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableCmd);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTableCmd?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterTableCmd?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterTableCmd) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTableCmd?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterTableCmd?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterTableCmd);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTableCmd?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterTableCmd);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #60 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterDomainStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterDomainStmt = type metadata accessor for PgQuery_AlterDomainStmt(0);
  v5 = *(_QWORD *)(AlterDomainStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterDomainStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterDomainStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterDomainStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 59)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterDomainStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterDomainStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterDomainStmt);
      v25(v24, 0, 1, AlterDomainStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDomainStmt and conformance PgQuery_AlterDomainStmt, type metadata accessor for PgQuery_AlterDomainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDomainStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterDomainStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterDomainStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterDomainStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterDomainStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterDomainStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterDomainStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterDomainStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterDomainStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #61 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t SetOperationStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  SetOperationStmt = type metadata accessor for PgQuery_SetOperationStmt(0);
  v5 = *(_QWORD *)(SetOperationStmt - 8);
  v6 = MEMORY[0x1E0C80A78](SetOperationStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SetOperationStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, SetOperationStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 60)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SetOperationStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_SetOperationStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_SetOperationStmt);
      v25(v24, 0, 1, SetOperationStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetOperationStmt and conformance PgQuery_SetOperationStmt, type metadata accessor for PgQuery_SetOperationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SetOperationStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SetOperationStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_SetOperationStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, SetOperationStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SetOperationStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_SetOperationStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_SetOperationStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SetOperationStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_SetOperationStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #62 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t GrantStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  v5 = *(_QWORD *)(GrantStmt - 8);
  v6 = MEMORY[0x1E0C80A78](GrantStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, GrantStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 61)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_GrantStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_GrantStmt);
      v25(v24, 0, 1, GrantStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, type metadata accessor for PgQuery_GrantStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, GrantStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_GrantStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_GrantStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #63 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t GrantRoleStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  GrantRoleStmt = type metadata accessor for PgQuery_GrantRoleStmt(0);
  v5 = *(_QWORD *)(GrantRoleStmt - 8);
  v6 = MEMORY[0x1E0C80A78](GrantRoleStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantRoleStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, GrantRoleStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 62)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_GrantRoleStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_GrantRoleStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_GrantRoleStmt);
      v25(v24, 0, 1, GrantRoleStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantRoleStmt and conformance PgQuery_GrantRoleStmt, type metadata accessor for PgQuery_GrantRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantRoleStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_GrantRoleStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_GrantRoleStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, GrantRoleStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_GrantRoleStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_GrantRoleStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_GrantRoleStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_GrantRoleStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_GrantRoleStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #64 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterDefaultPrivilegesStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterDefaultPrivilegesStmt = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(0);
  v5 = *(_QWORD *)(AlterDefaultPrivilegesStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterDefaultPrivilegesStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterDefaultPrivilegesStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterDefaultPrivilegesStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 63)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterDefaultPrivilegesStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
      v25(v24, 0, 1, AlterDefaultPrivilegesStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDefaultPrivilegesStmt and conformance PgQuery_AlterDefaultPrivilegesStmt, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDefaultPrivilegesStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterDefaultPrivilegesStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterDefaultPrivilegesStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterDefaultPrivilegesStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterDefaultPrivilegesStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterDefaultPrivilegesStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterDefaultPrivilegesStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #65 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ClosePortalStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ClosePortalStmt = type metadata accessor for PgQuery_ClosePortalStmt(0);
  v5 = *(_QWORD *)(ClosePortalStmt - 8);
  v6 = MEMORY[0x1E0C80A78](ClosePortalStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ClosePortalStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ClosePortalStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 64)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ClosePortalStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ClosePortalStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ClosePortalStmt);
      v25(v24, 0, 1, ClosePortalStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClosePortalStmt and conformance PgQuery_ClosePortalStmt, type metadata accessor for PgQuery_ClosePortalStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ClosePortalStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ClosePortalStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ClosePortalStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ClosePortalStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ClosePortalStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ClosePortalStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ClosePortalStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ClosePortalStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ClosePortalStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #66 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ClusterStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ClusterStmt = type metadata accessor for PgQuery_ClusterStmt(0);
  v5 = *(_QWORD *)(ClusterStmt - 8);
  v6 = MEMORY[0x1E0C80A78](ClusterStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ClusterStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ClusterStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 65)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ClusterStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ClusterStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ClusterStmt);
      v25(v24, 0, 1, ClusterStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClusterStmt and conformance PgQuery_ClusterStmt, type metadata accessor for PgQuery_ClusterStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ClusterStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ClusterStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ClusterStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ClusterStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ClusterStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ClusterStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ClusterStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ClusterStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ClusterStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #67 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CopyStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  CopyStmt = type metadata accessor for PgQuery_CopyStmt(0);
  v5 = *(_QWORD *)(CopyStmt - 8);
  v6 = MEMORY[0x1E0C80A78](CopyStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CopyStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, CopyStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 66)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CopyStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CopyStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CopyStmt);
      v25(v24, 0, 1, CopyStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CopyStmt and conformance PgQuery_CopyStmt, type metadata accessor for PgQuery_CopyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CopyStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CopyStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CopyStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, CopyStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CopyStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CopyStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CopyStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CopyStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CopyStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #68 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Stmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  v5 = *(_QWORD *)(Stmt - 8);
  v6 = MEMORY[0x1E0C80A78](Stmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, Stmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 67)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateStmt);
      v25(v24, 0, 1, Stmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, type metadata accessor for PgQuery_CreateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, Stmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #69 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DefineStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  DefineStmt = type metadata accessor for PgQuery_DefineStmt(0);
  v5 = *(_QWORD *)(DefineStmt - 8);
  v6 = MEMORY[0x1E0C80A78](DefineStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DefineStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, DefineStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 68)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DefineStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_DefineStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_DefineStmt);
      v25(v24, 0, 1, DefineStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefineStmt and conformance PgQuery_DefineStmt, type metadata accessor for PgQuery_DefineStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DefineStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DefineStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_DefineStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, DefineStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DefineStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_DefineStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_DefineStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DefineStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_DefineStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #70 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DropStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  DropStmt = type metadata accessor for PgQuery_DropStmt(0);
  v5 = *(_QWORD *)(DropStmt - 8);
  v6 = MEMORY[0x1E0C80A78](DropStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DropStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, DropStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 69)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_DropStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_DropStmt);
      v25(v24, 0, 1, DropStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropStmt and conformance PgQuery_DropStmt, type metadata accessor for PgQuery_DropStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_DropStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, DropStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_DropStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_DropStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_DropStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #71 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TruncateStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  TruncateStmt = type metadata accessor for PgQuery_TruncateStmt(0);
  v5 = *(_QWORD *)(TruncateStmt - 8);
  v6 = MEMORY[0x1E0C80A78](TruncateStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TruncateStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, TruncateStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 70)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TruncateStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_TruncateStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_TruncateStmt);
      v25(v24, 0, 1, TruncateStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TruncateStmt and conformance PgQuery_TruncateStmt, type metadata accessor for PgQuery_TruncateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_TruncateStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TruncateStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_TruncateStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, TruncateStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TruncateStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_TruncateStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_TruncateStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TruncateStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_TruncateStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #72 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CommentStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  CommentStmt = type metadata accessor for PgQuery_CommentStmt(0);
  v5 = *(_QWORD *)(CommentStmt - 8);
  v6 = MEMORY[0x1E0C80A78](CommentStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CommentStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, CommentStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 71)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CommentStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CommentStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CommentStmt);
      v25(v24, 0, 1, CommentStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommentStmt and conformance PgQuery_CommentStmt, type metadata accessor for PgQuery_CommentStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CommentStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CommentStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CommentStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, CommentStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CommentStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CommentStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CommentStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CommentStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CommentStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #73 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Stmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  Stmt = type metadata accessor for PgQuery_FetchStmt(0);
  v5 = *(_QWORD *)(Stmt - 8);
  v6 = MEMORY[0x1E0C80A78](Stmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FetchStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, Stmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 72)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FetchStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_FetchStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_FetchStmt);
      v25(v24, 0, 1, Stmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FetchStmt and conformance PgQuery_FetchStmt, type metadata accessor for PgQuery_FetchStmt, (uint64_t)&protocol conformance descriptor for PgQuery_FetchStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FetchStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_FetchStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, Stmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FetchStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_FetchStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_FetchStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FetchStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_FetchStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #74 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t IndexStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  IndexStmt = type metadata accessor for PgQuery_IndexStmt(0);
  v5 = *(_QWORD *)(IndexStmt - 8);
  v6 = MEMORY[0x1E0C80A78](IndexStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_IndexStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, IndexStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 73)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_IndexStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_IndexStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_IndexStmt);
      v25(v24, 0, 1, IndexStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexStmt and conformance PgQuery_IndexStmt, type metadata accessor for PgQuery_IndexStmt, (uint64_t)&protocol conformance descriptor for PgQuery_IndexStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_IndexStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_IndexStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, IndexStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_IndexStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_IndexStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_IndexStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_IndexStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_IndexStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #75 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FunctionStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  FunctionStmt = type metadata accessor for PgQuery_CreateFunctionStmt(0);
  v5 = *(_QWORD *)(FunctionStmt - 8);
  v6 = MEMORY[0x1E0C80A78](FunctionStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateFunctionStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, FunctionStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 74)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateFunctionStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateFunctionStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateFunctionStmt);
      v25(v24, 0, 1, FunctionStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFunctionStmt and conformance PgQuery_CreateFunctionStmt, type metadata accessor for PgQuery_CreateFunctionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateFunctionStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateFunctionStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateFunctionStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, FunctionStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateFunctionStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateFunctionStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateFunctionStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateFunctionStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateFunctionStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #76 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterFunctionStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterFunctionStmt = type metadata accessor for PgQuery_AlterFunctionStmt(0);
  v5 = *(_QWORD *)(AlterFunctionStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterFunctionStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterFunctionStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterFunctionStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 75)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterFunctionStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterFunctionStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterFunctionStmt);
      v25(v24, 0, 1, AlterFunctionStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFunctionStmt and conformance PgQuery_AlterFunctionStmt, type metadata accessor for PgQuery_AlterFunctionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterFunctionStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterFunctionStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterFunctionStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterFunctionStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterFunctionStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterFunctionStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterFunctionStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterFunctionStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterFunctionStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #77 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DoStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  DoStmt = type metadata accessor for PgQuery_DoStmt(0);
  v5 = *(_QWORD *)(DoStmt - 8);
  v6 = MEMORY[0x1E0C80A78](DoStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DoStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, DoStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 76)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DoStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_DoStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_DoStmt);
      v25(v24, 0, 1, DoStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DoStmt and conformance PgQuery_DoStmt, type metadata accessor for PgQuery_DoStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DoStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DoStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_DoStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, DoStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DoStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_DoStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_DoStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DoStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_DoStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #78 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RenameStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RenameStmt = type metadata accessor for PgQuery_RenameStmt(0);
  v5 = *(_QWORD *)(RenameStmt - 8);
  v6 = MEMORY[0x1E0C80A78](RenameStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RenameStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RenameStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 77)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RenameStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_RenameStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_RenameStmt);
      v25(v24, 0, 1, RenameStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RenameStmt and conformance PgQuery_RenameStmt, type metadata accessor for PgQuery_RenameStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RenameStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RenameStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_RenameStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RenameStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RenameStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RenameStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_RenameStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RenameStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_RenameStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #79 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RuleStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RuleStmt = type metadata accessor for PgQuery_RuleStmt(0);
  v5 = *(_QWORD *)(RuleStmt - 8);
  v6 = MEMORY[0x1E0C80A78](RuleStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RuleStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RuleStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 78)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RuleStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_RuleStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_RuleStmt);
      v25(v24, 0, 1, RuleStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RuleStmt and conformance PgQuery_RuleStmt, type metadata accessor for PgQuery_RuleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RuleStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RuleStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_RuleStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RuleStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RuleStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RuleStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_RuleStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RuleStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_RuleStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #80 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t NotifyStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  NotifyStmt = type metadata accessor for PgQuery_NotifyStmt(0);
  v5 = *(_QWORD *)(NotifyStmt - 8);
  v6 = MEMORY[0x1E0C80A78](NotifyStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_NotifyStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, NotifyStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 79)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NotifyStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_NotifyStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_NotifyStmt);
      v25(v24, 0, 1, NotifyStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NotifyStmt and conformance PgQuery_NotifyStmt, type metadata accessor for PgQuery_NotifyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_NotifyStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NotifyStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_NotifyStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, NotifyStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NotifyStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_NotifyStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_NotifyStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_NotifyStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_NotifyStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #81 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ListenStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ListenStmt = type metadata accessor for PgQuery_ListenStmt(0);
  v5 = *(_QWORD *)(ListenStmt - 8);
  v6 = MEMORY[0x1E0C80A78](ListenStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ListenStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ListenStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 80)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ListenStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ListenStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ListenStmt);
      v25(v24, 0, 1, ListenStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ListenStmt and conformance PgQuery_ListenStmt, type metadata accessor for PgQuery_ListenStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ListenStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ListenStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ListenStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ListenStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ListenStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ListenStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ListenStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ListenStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ListenStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #82 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t UnlistenStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  UnlistenStmt = type metadata accessor for PgQuery_UnlistenStmt(0);
  v5 = *(_QWORD *)(UnlistenStmt - 8);
  v6 = MEMORY[0x1E0C80A78](UnlistenStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_UnlistenStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, UnlistenStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 81)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_UnlistenStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_UnlistenStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_UnlistenStmt);
      v25(v24, 0, 1, UnlistenStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UnlistenStmt and conformance PgQuery_UnlistenStmt, type metadata accessor for PgQuery_UnlistenStmt, (uint64_t)&protocol conformance descriptor for PgQuery_UnlistenStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_UnlistenStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_UnlistenStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, UnlistenStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_UnlistenStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_UnlistenStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_UnlistenStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_UnlistenStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_UnlistenStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #83 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TransactionStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  TransactionStmt = type metadata accessor for PgQuery_TransactionStmt(0);
  v5 = *(_QWORD *)(TransactionStmt - 8);
  v6 = MEMORY[0x1E0C80A78](TransactionStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TransactionStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, TransactionStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 82)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TransactionStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_TransactionStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_TransactionStmt);
      v25(v24, 0, 1, TransactionStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TransactionStmt and conformance PgQuery_TransactionStmt, type metadata accessor for PgQuery_TransactionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_TransactionStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TransactionStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_TransactionStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, TransactionStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TransactionStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_TransactionStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_TransactionStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TransactionStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_TransactionStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #84 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ViewStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ViewStmt = type metadata accessor for PgQuery_ViewStmt(0);
  v5 = *(_QWORD *)(ViewStmt - 8);
  v6 = MEMORY[0x1E0C80A78](ViewStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ViewStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ViewStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 83)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ViewStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ViewStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ViewStmt);
      v25(v24, 0, 1, ViewStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ViewStmt and conformance PgQuery_ViewStmt, type metadata accessor for PgQuery_ViewStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ViewStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ViewStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ViewStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ViewStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ViewStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ViewStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ViewStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ViewStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ViewStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #85 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t LoadStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  LoadStmt = type metadata accessor for PgQuery_LoadStmt(0);
  v5 = *(_QWORD *)(LoadStmt - 8);
  v6 = MEMORY[0x1E0C80A78](LoadStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_LoadStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, LoadStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 84)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_LoadStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_LoadStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_LoadStmt);
      v25(v24, 0, 1, LoadStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LoadStmt and conformance PgQuery_LoadStmt, type metadata accessor for PgQuery_LoadStmt, (uint64_t)&protocol conformance descriptor for PgQuery_LoadStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_LoadStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_LoadStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, LoadStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_LoadStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_LoadStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_LoadStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_LoadStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_LoadStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #86 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DomainStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  DomainStmt = type metadata accessor for PgQuery_CreateDomainStmt(0);
  v5 = *(_QWORD *)(DomainStmt - 8);
  v6 = MEMORY[0x1E0C80A78](DomainStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateDomainStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, DomainStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 85)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateDomainStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateDomainStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateDomainStmt);
      v25(v24, 0, 1, DomainStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateDomainStmt and conformance PgQuery_CreateDomainStmt, type metadata accessor for PgQuery_CreateDomainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateDomainStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateDomainStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateDomainStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, DomainStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateDomainStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateDomainStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateDomainStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateDomainStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateDomainStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #87 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CreatedbStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  CreatedbStmt = type metadata accessor for PgQuery_CreatedbStmt(0);
  v5 = *(_QWORD *)(CreatedbStmt - 8);
  v6 = MEMORY[0x1E0C80A78](CreatedbStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreatedbStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, CreatedbStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 86)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreatedbStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreatedbStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreatedbStmt);
      v25(v24, 0, 1, CreatedbStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatedbStmt and conformance PgQuery_CreatedbStmt, type metadata accessor for PgQuery_CreatedbStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatedbStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreatedbStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreatedbStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, CreatedbStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreatedbStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreatedbStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreatedbStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreatedbStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreatedbStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #88 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DropdbStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  DropdbStmt = type metadata accessor for PgQuery_DropdbStmt(0);
  v5 = *(_QWORD *)(DropdbStmt - 8);
  v6 = MEMORY[0x1E0C80A78](DropdbStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DropdbStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, DropdbStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 87)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropdbStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_DropdbStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_DropdbStmt);
      v25(v24, 0, 1, DropdbStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropdbStmt and conformance PgQuery_DropdbStmt, type metadata accessor for PgQuery_DropdbStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropdbStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropdbStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_DropdbStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, DropdbStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropdbStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_DropdbStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_DropdbStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropdbStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_DropdbStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #89 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t VacuumStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  VacuumStmt = type metadata accessor for PgQuery_VacuumStmt(0);
  v5 = *(_QWORD *)(VacuumStmt - 8);
  v6 = MEMORY[0x1E0C80A78](VacuumStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VacuumStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, VacuumStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 88)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_VacuumStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_VacuumStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_VacuumStmt);
      v25(v24, 0, 1, VacuumStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumStmt and conformance PgQuery_VacuumStmt, type metadata accessor for PgQuery_VacuumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VacuumStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_VacuumStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_VacuumStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, VacuumStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_VacuumStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_VacuumStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_VacuumStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_VacuumStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_VacuumStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #90 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ExplainStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ExplainStmt = type metadata accessor for PgQuery_ExplainStmt(0);
  v5 = *(_QWORD *)(ExplainStmt - 8);
  v6 = MEMORY[0x1E0C80A78](ExplainStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ExplainStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ExplainStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 89)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ExplainStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ExplainStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ExplainStmt);
      v25(v24, 0, 1, ExplainStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExplainStmt and conformance PgQuery_ExplainStmt, type metadata accessor for PgQuery_ExplainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ExplainStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ExplainStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ExplainStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ExplainStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ExplainStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ExplainStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ExplainStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ExplainStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ExplainStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #91 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TableAsStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  TableAsStmt = type metadata accessor for PgQuery_CreateTableAsStmt(0);
  v5 = *(_QWORD *)(TableAsStmt - 8);
  v6 = MEMORY[0x1E0C80A78](TableAsStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateTableAsStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, TableAsStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 90)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateTableAsStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateTableAsStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateTableAsStmt);
      v25(v24, 0, 1, TableAsStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableAsStmt and conformance PgQuery_CreateTableAsStmt, type metadata accessor for PgQuery_CreateTableAsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTableAsStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateTableAsStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateTableAsStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, TableAsStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateTableAsStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateTableAsStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateTableAsStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateTableAsStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateTableAsStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #92 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t SeqStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  SeqStmt = type metadata accessor for PgQuery_CreateSeqStmt(0);
  v5 = *(_QWORD *)(SeqStmt - 8);
  v6 = MEMORY[0x1E0C80A78](SeqStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateSeqStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, SeqStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 91)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateSeqStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateSeqStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateSeqStmt);
      v25(v24, 0, 1, SeqStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSeqStmt and conformance PgQuery_CreateSeqStmt, type metadata accessor for PgQuery_CreateSeqStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSeqStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateSeqStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateSeqStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, SeqStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateSeqStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateSeqStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateSeqStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateSeqStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateSeqStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #93 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterSeqStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterSeqStmt = type metadata accessor for PgQuery_AlterSeqStmt(0);
  v5 = *(_QWORD *)(AlterSeqStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterSeqStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterSeqStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterSeqStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 92)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterSeqStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterSeqStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterSeqStmt);
      v25(v24, 0, 1, AlterSeqStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSeqStmt and conformance PgQuery_AlterSeqStmt, type metadata accessor for PgQuery_AlterSeqStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSeqStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterSeqStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterSeqStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterSeqStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterSeqStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterSeqStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterSeqStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterSeqStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterSeqStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #94 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t VariableSetStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v5 = *(_QWORD *)(VariableSetStmt - 8);
  v6 = MEMORY[0x1E0C80A78](VariableSetStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, VariableSetStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 93)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_VariableSetStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_VariableSetStmt);
      v25(v24, 0, 1, VariableSetStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, type metadata accessor for PgQuery_VariableSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableSetStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, VariableSetStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_VariableSetStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_VariableSetStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #95 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t VariableShowStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  VariableShowStmt = type metadata accessor for PgQuery_VariableShowStmt(0);
  v5 = *(_QWORD *)(VariableShowStmt - 8);
  v6 = MEMORY[0x1E0C80A78](VariableShowStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableShowStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, VariableShowStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 94)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_VariableShowStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_VariableShowStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_VariableShowStmt);
      v25(v24, 0, 1, VariableShowStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableShowStmt and conformance PgQuery_VariableShowStmt, type metadata accessor for PgQuery_VariableShowStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableShowStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_VariableShowStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_VariableShowStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, VariableShowStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_VariableShowStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_VariableShowStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_VariableShowStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_VariableShowStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_VariableShowStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #96 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DiscardStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  DiscardStmt = type metadata accessor for PgQuery_DiscardStmt(0);
  v5 = *(_QWORD *)(DiscardStmt - 8);
  v6 = MEMORY[0x1E0C80A78](DiscardStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DiscardStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, DiscardStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 95)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DiscardStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_DiscardStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_DiscardStmt);
      v25(v24, 0, 1, DiscardStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DiscardStmt and conformance PgQuery_DiscardStmt, type metadata accessor for PgQuery_DiscardStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DiscardStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DiscardStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_DiscardStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, DiscardStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DiscardStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_DiscardStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_DiscardStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DiscardStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_DiscardStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #97 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TrigStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  TrigStmt = type metadata accessor for PgQuery_CreateTrigStmt(0);
  v5 = *(_QWORD *)(TrigStmt - 8);
  v6 = MEMORY[0x1E0C80A78](TrigStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateTrigStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, TrigStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 96)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateTrigStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateTrigStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateTrigStmt);
      v25(v24, 0, 1, TrigStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTrigStmt and conformance PgQuery_CreateTrigStmt, type metadata accessor for PgQuery_CreateTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTrigStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateTrigStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateTrigStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, TrigStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateTrigStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateTrigStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateTrigStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateTrigStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateTrigStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #98 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t PLangStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  PLangStmt = type metadata accessor for PgQuery_CreatePLangStmt(0);
  v5 = *(_QWORD *)(PLangStmt - 8);
  v6 = MEMORY[0x1E0C80A78](PLangStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreatePLangStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, PLangStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 97)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreatePLangStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreatePLangStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreatePLangStmt);
      v25(v24, 0, 1, PLangStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePLangStmt and conformance PgQuery_CreatePLangStmt, type metadata accessor for PgQuery_CreatePLangStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePLangStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreatePLangStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreatePLangStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, PLangStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreatePLangStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreatePLangStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreatePLangStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreatePLangStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreatePLangStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #99 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RoleStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RoleStmt = type metadata accessor for PgQuery_CreateRoleStmt(0);
  v5 = *(_QWORD *)(RoleStmt - 8);
  v6 = MEMORY[0x1E0C80A78](RoleStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateRoleStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RoleStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 98)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateRoleStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateRoleStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateRoleStmt);
      v25(v24, 0, 1, RoleStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRoleStmt and conformance PgQuery_CreateRoleStmt, type metadata accessor for PgQuery_CreateRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateRoleStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateRoleStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateRoleStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RoleStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateRoleStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateRoleStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateRoleStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateRoleStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateRoleStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #100 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterRoleStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterRoleStmt = type metadata accessor for PgQuery_AlterRoleStmt(0);
  v5 = *(_QWORD *)(AlterRoleStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterRoleStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterRoleStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterRoleStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 99)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterRoleStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterRoleStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterRoleStmt);
      v25(v24, 0, 1, AlterRoleStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleStmt and conformance PgQuery_AlterRoleStmt, type metadata accessor for PgQuery_AlterRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterRoleStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterRoleStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterRoleStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterRoleStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterRoleStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterRoleStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterRoleStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterRoleStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterRoleStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #101 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DropRoleStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  DropRoleStmt = type metadata accessor for PgQuery_DropRoleStmt(0);
  v5 = *(_QWORD *)(DropRoleStmt - 8);
  v6 = MEMORY[0x1E0C80A78](DropRoleStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DropRoleStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, DropRoleStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 100)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropRoleStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_DropRoleStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_DropRoleStmt);
      v25(v24, 0, 1, DropRoleStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropRoleStmt and conformance PgQuery_DropRoleStmt, type metadata accessor for PgQuery_DropRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropRoleStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropRoleStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_DropRoleStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, DropRoleStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropRoleStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_DropRoleStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_DropRoleStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropRoleStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_DropRoleStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #102 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t LockStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  LockStmt = type metadata accessor for PgQuery_LockStmt(0);
  v5 = *(_QWORD *)(LockStmt - 8);
  v6 = MEMORY[0x1E0C80A78](LockStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_LockStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, LockStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 101)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_LockStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_LockStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_LockStmt);
      v25(v24, 0, 1, LockStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockStmt and conformance PgQuery_LockStmt, type metadata accessor for PgQuery_LockStmt, (uint64_t)&protocol conformance descriptor for PgQuery_LockStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_LockStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_LockStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, LockStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_LockStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_LockStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_LockStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_LockStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_LockStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #103 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ConstraintsSetStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ConstraintsSetStmt = type metadata accessor for PgQuery_ConstraintsSetStmt(0);
  v5 = *(_QWORD *)(ConstraintsSetStmt - 8);
  v6 = MEMORY[0x1E0C80A78](ConstraintsSetStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ConstraintsSetStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ConstraintsSetStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 102)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ConstraintsSetStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ConstraintsSetStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ConstraintsSetStmt);
      v25(v24, 0, 1, ConstraintsSetStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConstraintsSetStmt and conformance PgQuery_ConstraintsSetStmt, type metadata accessor for PgQuery_ConstraintsSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ConstraintsSetStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ConstraintsSetStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ConstraintsSetStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ConstraintsSetStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ConstraintsSetStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ConstraintsSetStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ConstraintsSetStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ConstraintsSetStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ConstraintsSetStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #104 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ReindexStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ReindexStmt = type metadata accessor for PgQuery_ReindexStmt(0);
  v5 = *(_QWORD *)(ReindexStmt - 8);
  v6 = MEMORY[0x1E0C80A78](ReindexStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ReindexStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ReindexStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 103)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ReindexStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ReindexStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ReindexStmt);
      v25(v24, 0, 1, ReindexStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReindexStmt and conformance PgQuery_ReindexStmt, type metadata accessor for PgQuery_ReindexStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReindexStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ReindexStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ReindexStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ReindexStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ReindexStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ReindexStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ReindexStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ReindexStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ReindexStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #105 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  v4 = type metadata accessor for PgQuery_CheckPointStmt(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CheckPointStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, v4);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 104)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CheckPointStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CheckPointStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CheckPointStmt);
      v25(v24, 0, 1, v4);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CheckPointStmt and conformance PgQuery_CheckPointStmt, type metadata accessor for PgQuery_CheckPointStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CheckPointStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CheckPointStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CheckPointStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, v4) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CheckPointStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CheckPointStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CheckPointStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CheckPointStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CheckPointStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #106 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t SchemaStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  SchemaStmt = type metadata accessor for PgQuery_CreateSchemaStmt(0);
  v5 = *(_QWORD *)(SchemaStmt - 8);
  v6 = MEMORY[0x1E0C80A78](SchemaStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateSchemaStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, SchemaStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 105)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateSchemaStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateSchemaStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateSchemaStmt);
      v25(v24, 0, 1, SchemaStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSchemaStmt and conformance PgQuery_CreateSchemaStmt, type metadata accessor for PgQuery_CreateSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSchemaStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateSchemaStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateSchemaStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, SchemaStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateSchemaStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateSchemaStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateSchemaStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateSchemaStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateSchemaStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #107 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterDatabaseStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterDatabaseStmt = type metadata accessor for PgQuery_AlterDatabaseStmt(0);
  v5 = *(_QWORD *)(AlterDatabaseStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterDatabaseStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterDatabaseStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterDatabaseStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 106)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterDatabaseStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterDatabaseStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterDatabaseStmt);
      v25(v24, 0, 1, AlterDatabaseStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseStmt and conformance PgQuery_AlterDatabaseStmt, type metadata accessor for PgQuery_AlterDatabaseStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDatabaseStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterDatabaseStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterDatabaseStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterDatabaseStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterDatabaseStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterDatabaseStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterDatabaseStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterDatabaseStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterDatabaseStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #108 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterDatabaseSetStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterDatabaseSetStmt = type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
  v5 = *(_QWORD *)(AlterDatabaseSetStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterDatabaseSetStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterDatabaseSetStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterDatabaseSetStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 107)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterDatabaseSetStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterDatabaseSetStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterDatabaseSetStmt);
      v25(v24, 0, 1, AlterDatabaseSetStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseSetStmt and conformance PgQuery_AlterDatabaseSetStmt, type metadata accessor for PgQuery_AlterDatabaseSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDatabaseSetStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterDatabaseSetStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterDatabaseSetStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterDatabaseSetStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterDatabaseSetStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterDatabaseSetStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterDatabaseSetStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterDatabaseSetStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterDatabaseSetStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #109 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterRoleSetStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterRoleSetStmt = type metadata accessor for PgQuery_AlterRoleSetStmt(0);
  v5 = *(_QWORD *)(AlterRoleSetStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterRoleSetStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterRoleSetStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterRoleSetStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 108)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterRoleSetStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterRoleSetStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterRoleSetStmt);
      v25(v24, 0, 1, AlterRoleSetStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleSetStmt and conformance PgQuery_AlterRoleSetStmt, type metadata accessor for PgQuery_AlterRoleSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterRoleSetStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterRoleSetStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterRoleSetStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterRoleSetStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterRoleSetStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterRoleSetStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterRoleSetStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterRoleSetStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterRoleSetStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #110 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ConversionStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ConversionStmt = type metadata accessor for PgQuery_CreateConversionStmt(0);
  v5 = *(_QWORD *)(ConversionStmt - 8);
  v6 = MEMORY[0x1E0C80A78](ConversionStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateConversionStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ConversionStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 109)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateConversionStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateConversionStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateConversionStmt);
      v25(v24, 0, 1, ConversionStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateConversionStmt and conformance PgQuery_CreateConversionStmt, type metadata accessor for PgQuery_CreateConversionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateConversionStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateConversionStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateConversionStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ConversionStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateConversionStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateConversionStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateConversionStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateConversionStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateConversionStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #111 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CastStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  CastStmt = type metadata accessor for PgQuery_CreateCastStmt(0);
  v5 = *(_QWORD *)(CastStmt - 8);
  v6 = MEMORY[0x1E0C80A78](CastStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateCastStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, CastStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 110)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateCastStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateCastStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateCastStmt);
      v25(v24, 0, 1, CastStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateCastStmt and conformance PgQuery_CreateCastStmt, type metadata accessor for PgQuery_CreateCastStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateCastStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateCastStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateCastStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, CastStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateCastStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateCastStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateCastStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateCastStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateCastStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #112 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t OpClassStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  OpClassStmt = type metadata accessor for PgQuery_CreateOpClassStmt(0);
  v5 = *(_QWORD *)(OpClassStmt - 8);
  v6 = MEMORY[0x1E0C80A78](OpClassStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateOpClassStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, OpClassStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 111)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateOpClassStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateOpClassStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateOpClassStmt);
      v25(v24, 0, 1, OpClassStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassStmt and conformance PgQuery_CreateOpClassStmt, type metadata accessor for PgQuery_CreateOpClassStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpClassStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateOpClassStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateOpClassStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, OpClassStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateOpClassStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateOpClassStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateOpClassStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateOpClassStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateOpClassStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #113 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t OpFamilyStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  OpFamilyStmt = type metadata accessor for PgQuery_CreateOpFamilyStmt(0);
  v5 = *(_QWORD *)(OpFamilyStmt - 8);
  v6 = MEMORY[0x1E0C80A78](OpFamilyStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateOpFamilyStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, OpFamilyStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 112)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateOpFamilyStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateOpFamilyStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateOpFamilyStmt);
      v25(v24, 0, 1, OpFamilyStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpFamilyStmt and conformance PgQuery_CreateOpFamilyStmt, type metadata accessor for PgQuery_CreateOpFamilyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpFamilyStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateOpFamilyStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateOpFamilyStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, OpFamilyStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateOpFamilyStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateOpFamilyStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateOpFamilyStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateOpFamilyStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateOpFamilyStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #114 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterOpFamilyStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterOpFamilyStmt = type metadata accessor for PgQuery_AlterOpFamilyStmt(0);
  v5 = *(_QWORD *)(AlterOpFamilyStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterOpFamilyStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterOpFamilyStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterOpFamilyStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 113)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterOpFamilyStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterOpFamilyStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterOpFamilyStmt);
      v25(v24, 0, 1, AlterOpFamilyStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOpFamilyStmt and conformance PgQuery_AlterOpFamilyStmt, type metadata accessor for PgQuery_AlterOpFamilyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOpFamilyStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterOpFamilyStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterOpFamilyStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterOpFamilyStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterOpFamilyStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterOpFamilyStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterOpFamilyStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterOpFamilyStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterOpFamilyStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #115 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t PrepareStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  PrepareStmt = type metadata accessor for PgQuery_PrepareStmt(0);
  v5 = *(_QWORD *)(PrepareStmt - 8);
  v6 = MEMORY[0x1E0C80A78](PrepareStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PrepareStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, PrepareStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 114)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PrepareStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_PrepareStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_PrepareStmt);
      v25(v24, 0, 1, PrepareStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PrepareStmt and conformance PgQuery_PrepareStmt, type metadata accessor for PgQuery_PrepareStmt, (uint64_t)&protocol conformance descriptor for PgQuery_PrepareStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PrepareStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_PrepareStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, PrepareStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PrepareStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_PrepareStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_PrepareStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PrepareStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_PrepareStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #116 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ExecuteStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ExecuteStmt = type metadata accessor for PgQuery_ExecuteStmt(0);
  v5 = *(_QWORD *)(ExecuteStmt - 8);
  v6 = MEMORY[0x1E0C80A78](ExecuteStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ExecuteStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ExecuteStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 115)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ExecuteStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ExecuteStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ExecuteStmt);
      v25(v24, 0, 1, ExecuteStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExecuteStmt and conformance PgQuery_ExecuteStmt, type metadata accessor for PgQuery_ExecuteStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ExecuteStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ExecuteStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ExecuteStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ExecuteStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ExecuteStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ExecuteStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ExecuteStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ExecuteStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ExecuteStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #117 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DeallocateStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  DeallocateStmt = type metadata accessor for PgQuery_DeallocateStmt(0);
  v5 = *(_QWORD *)(DeallocateStmt - 8);
  v6 = MEMORY[0x1E0C80A78](DeallocateStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DeallocateStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, DeallocateStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 116)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DeallocateStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_DeallocateStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_DeallocateStmt);
      v25(v24, 0, 1, DeallocateStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeallocateStmt and conformance PgQuery_DeallocateStmt, type metadata accessor for PgQuery_DeallocateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeallocateStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DeallocateStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_DeallocateStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, DeallocateStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DeallocateStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_DeallocateStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_DeallocateStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DeallocateStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_DeallocateStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #118 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DeclareCursorStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  DeclareCursorStmt = type metadata accessor for PgQuery_DeclareCursorStmt(0);
  v5 = *(_QWORD *)(DeclareCursorStmt - 8);
  v6 = MEMORY[0x1E0C80A78](DeclareCursorStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DeclareCursorStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, DeclareCursorStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 117)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DeclareCursorStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_DeclareCursorStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_DeclareCursorStmt);
      v25(v24, 0, 1, DeclareCursorStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeclareCursorStmt and conformance PgQuery_DeclareCursorStmt, type metadata accessor for PgQuery_DeclareCursorStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeclareCursorStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DeclareCursorStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_DeclareCursorStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, DeclareCursorStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DeclareCursorStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_DeclareCursorStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_DeclareCursorStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DeclareCursorStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_DeclareCursorStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #119 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TableSpaceStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  TableSpaceStmt = type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
  v5 = *(_QWORD *)(TableSpaceStmt - 8);
  v6 = MEMORY[0x1E0C80A78](TableSpaceStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateTableSpaceStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, TableSpaceStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 118)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateTableSpaceStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateTableSpaceStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateTableSpaceStmt);
      v25(v24, 0, 1, TableSpaceStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableSpaceStmt and conformance PgQuery_CreateTableSpaceStmt, type metadata accessor for PgQuery_CreateTableSpaceStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTableSpaceStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateTableSpaceStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateTableSpaceStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, TableSpaceStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateTableSpaceStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateTableSpaceStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateTableSpaceStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateTableSpaceStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateTableSpaceStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #120 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DropTableSpaceStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  DropTableSpaceStmt = type metadata accessor for PgQuery_DropTableSpaceStmt(0);
  v5 = *(_QWORD *)(DropTableSpaceStmt - 8);
  v6 = MEMORY[0x1E0C80A78](DropTableSpaceStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DropTableSpaceStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, DropTableSpaceStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 119)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropTableSpaceStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_DropTableSpaceStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_DropTableSpaceStmt);
      v25(v24, 0, 1, DropTableSpaceStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropTableSpaceStmt and conformance PgQuery_DropTableSpaceStmt, type metadata accessor for PgQuery_DropTableSpaceStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropTableSpaceStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropTableSpaceStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_DropTableSpaceStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, DropTableSpaceStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropTableSpaceStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_DropTableSpaceStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_DropTableSpaceStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropTableSpaceStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_DropTableSpaceStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #121 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterObjectDependsStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterObjectDependsStmt = type metadata accessor for PgQuery_AlterObjectDependsStmt(0);
  v5 = *(_QWORD *)(AlterObjectDependsStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterObjectDependsStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterObjectDependsStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterObjectDependsStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 120)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterObjectDependsStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterObjectDependsStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterObjectDependsStmt);
      v25(v24, 0, 1, AlterObjectDependsStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectDependsStmt and conformance PgQuery_AlterObjectDependsStmt, type metadata accessor for PgQuery_AlterObjectDependsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterObjectDependsStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterObjectDependsStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterObjectDependsStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterObjectDependsStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterObjectDependsStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterObjectDependsStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterObjectDependsStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterObjectDependsStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterObjectDependsStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #122 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterObjectSchemaStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterObjectSchemaStmt = type metadata accessor for PgQuery_AlterObjectSchemaStmt(0);
  v5 = *(_QWORD *)(AlterObjectSchemaStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterObjectSchemaStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterObjectSchemaStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterObjectSchemaStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 121)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterObjectSchemaStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterObjectSchemaStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterObjectSchemaStmt);
      v25(v24, 0, 1, AlterObjectSchemaStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectSchemaStmt and conformance PgQuery_AlterObjectSchemaStmt, type metadata accessor for PgQuery_AlterObjectSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterObjectSchemaStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterObjectSchemaStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterObjectSchemaStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterObjectSchemaStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterObjectSchemaStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterObjectSchemaStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterObjectSchemaStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterObjectSchemaStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterObjectSchemaStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #123 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterOwnerStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterOwnerStmt = type metadata accessor for PgQuery_AlterOwnerStmt(0);
  v5 = *(_QWORD *)(AlterOwnerStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterOwnerStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterOwnerStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterOwnerStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 122)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterOwnerStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterOwnerStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterOwnerStmt);
      v25(v24, 0, 1, AlterOwnerStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOwnerStmt and conformance PgQuery_AlterOwnerStmt, type metadata accessor for PgQuery_AlterOwnerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOwnerStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterOwnerStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterOwnerStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterOwnerStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterOwnerStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterOwnerStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterOwnerStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterOwnerStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterOwnerStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #124 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterOperatorStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterOperatorStmt = type metadata accessor for PgQuery_AlterOperatorStmt(0);
  v5 = *(_QWORD *)(AlterOperatorStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterOperatorStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterOperatorStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterOperatorStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 123)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterOperatorStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterOperatorStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterOperatorStmt);
      v25(v24, 0, 1, AlterOperatorStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOperatorStmt and conformance PgQuery_AlterOperatorStmt, type metadata accessor for PgQuery_AlterOperatorStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOperatorStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterOperatorStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterOperatorStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterOperatorStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterOperatorStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterOperatorStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterOperatorStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterOperatorStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterOperatorStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #125 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterTypeStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterTypeStmt = type metadata accessor for PgQuery_AlterTypeStmt(0);
  v5 = *(_QWORD *)(AlterTypeStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterTypeStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterTypeStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterTypeStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 124)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTypeStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterTypeStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterTypeStmt);
      v25(v24, 0, 1, AlterTypeStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTypeStmt and conformance PgQuery_AlterTypeStmt, type metadata accessor for PgQuery_AlterTypeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTypeStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTypeStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterTypeStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterTypeStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTypeStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterTypeStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterTypeStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTypeStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterTypeStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #126 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DropOwnedStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  DropOwnedStmt = type metadata accessor for PgQuery_DropOwnedStmt(0);
  v5 = *(_QWORD *)(DropOwnedStmt - 8);
  v6 = MEMORY[0x1E0C80A78](DropOwnedStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DropOwnedStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, DropOwnedStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 125)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropOwnedStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_DropOwnedStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_DropOwnedStmt);
      v25(v24, 0, 1, DropOwnedStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropOwnedStmt and conformance PgQuery_DropOwnedStmt, type metadata accessor for PgQuery_DropOwnedStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropOwnedStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropOwnedStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_DropOwnedStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, DropOwnedStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropOwnedStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_DropOwnedStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_DropOwnedStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropOwnedStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_DropOwnedStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #127 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ReassignOwnedStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ReassignOwnedStmt = type metadata accessor for PgQuery_ReassignOwnedStmt(0);
  v5 = *(_QWORD *)(ReassignOwnedStmt - 8);
  v6 = MEMORY[0x1E0C80A78](ReassignOwnedStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ReassignOwnedStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ReassignOwnedStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 126)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ReassignOwnedStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ReassignOwnedStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ReassignOwnedStmt);
      v25(v24, 0, 1, ReassignOwnedStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReassignOwnedStmt and conformance PgQuery_ReassignOwnedStmt, type metadata accessor for PgQuery_ReassignOwnedStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReassignOwnedStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ReassignOwnedStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ReassignOwnedStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ReassignOwnedStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ReassignOwnedStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ReassignOwnedStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ReassignOwnedStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ReassignOwnedStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ReassignOwnedStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #128 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CompositeTypeStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  CompositeTypeStmt = type metadata accessor for PgQuery_CompositeTypeStmt(0);
  v5 = *(_QWORD *)(CompositeTypeStmt - 8);
  v6 = MEMORY[0x1E0C80A78](CompositeTypeStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CompositeTypeStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, CompositeTypeStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 127)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CompositeTypeStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CompositeTypeStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CompositeTypeStmt);
      v25(v24, 0, 1, CompositeTypeStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CompositeTypeStmt and conformance PgQuery_CompositeTypeStmt, type metadata accessor for PgQuery_CompositeTypeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CompositeTypeStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CompositeTypeStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CompositeTypeStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, CompositeTypeStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CompositeTypeStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CompositeTypeStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CompositeTypeStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CompositeTypeStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CompositeTypeStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #129 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t EnumStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  EnumStmt = type metadata accessor for PgQuery_CreateEnumStmt(0);
  v5 = *(_QWORD *)(EnumStmt - 8);
  v6 = MEMORY[0x1E0C80A78](EnumStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateEnumStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, EnumStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 128)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateEnumStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateEnumStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateEnumStmt);
      v25(v24, 0, 1, EnumStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEnumStmt and conformance PgQuery_CreateEnumStmt, type metadata accessor for PgQuery_CreateEnumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateEnumStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateEnumStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateEnumStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, EnumStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateEnumStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateEnumStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateEnumStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateEnumStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateEnumStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #130 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RangeStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RangeStmt = type metadata accessor for PgQuery_CreateRangeStmt(0);
  v5 = *(_QWORD *)(RangeStmt - 8);
  v6 = MEMORY[0x1E0C80A78](RangeStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateRangeStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RangeStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 129)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateRangeStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateRangeStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateRangeStmt);
      v25(v24, 0, 1, RangeStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRangeStmt and conformance PgQuery_CreateRangeStmt, type metadata accessor for PgQuery_CreateRangeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateRangeStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateRangeStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateRangeStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RangeStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateRangeStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateRangeStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateRangeStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateRangeStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateRangeStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #131 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterEnumStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterEnumStmt = type metadata accessor for PgQuery_AlterEnumStmt(0);
  v5 = *(_QWORD *)(AlterEnumStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterEnumStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterEnumStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterEnumStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 130)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterEnumStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterEnumStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterEnumStmt);
      v25(v24, 0, 1, AlterEnumStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEnumStmt and conformance PgQuery_AlterEnumStmt, type metadata accessor for PgQuery_AlterEnumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterEnumStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterEnumStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterEnumStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterEnumStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterEnumStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterEnumStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterEnumStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterEnumStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterEnumStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #132 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterTSDictionaryStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterTSDictionaryStmt = type metadata accessor for PgQuery_AlterTSDictionaryStmt(0);
  v5 = *(_QWORD *)(AlterTSDictionaryStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterTSDictionaryStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterTSDictionaryStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterTSDictionaryStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 131)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTSDictionaryStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterTSDictionaryStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterTSDictionaryStmt);
      v25(v24, 0, 1, AlterTSDictionaryStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSDictionaryStmt and conformance PgQuery_AlterTSDictionaryStmt, type metadata accessor for PgQuery_AlterTSDictionaryStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTSDictionaryStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTSDictionaryStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterTSDictionaryStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterTSDictionaryStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTSDictionaryStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterTSDictionaryStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterTSDictionaryStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTSDictionaryStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterTSDictionaryStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #133 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterTSConfigurationStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterTSConfigurationStmt = type metadata accessor for PgQuery_AlterTSConfigurationStmt(0);
  v5 = *(_QWORD *)(AlterTSConfigurationStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterTSConfigurationStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterTSConfigurationStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterTSConfigurationStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 132)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTSConfigurationStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterTSConfigurationStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterTSConfigurationStmt);
      v25(v24, 0, 1, AlterTSConfigurationStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSConfigurationStmt and conformance PgQuery_AlterTSConfigurationStmt, type metadata accessor for PgQuery_AlterTSConfigurationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTSConfigurationStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTSConfigurationStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterTSConfigurationStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterTSConfigurationStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTSConfigurationStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterTSConfigurationStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterTSConfigurationStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTSConfigurationStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterTSConfigurationStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #134 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FdwStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  FdwStmt = type metadata accessor for PgQuery_CreateFdwStmt(0);
  v5 = *(_QWORD *)(FdwStmt - 8);
  v6 = MEMORY[0x1E0C80A78](FdwStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateFdwStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, FdwStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 133)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateFdwStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateFdwStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateFdwStmt);
      v25(v24, 0, 1, FdwStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFdwStmt and conformance PgQuery_CreateFdwStmt, type metadata accessor for PgQuery_CreateFdwStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateFdwStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateFdwStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateFdwStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, FdwStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateFdwStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateFdwStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateFdwStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateFdwStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateFdwStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #135 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterFdwStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterFdwStmt = type metadata accessor for PgQuery_AlterFdwStmt(0);
  v5 = *(_QWORD *)(AlterFdwStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterFdwStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterFdwStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterFdwStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 134)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterFdwStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterFdwStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterFdwStmt);
      v25(v24, 0, 1, AlterFdwStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFdwStmt and conformance PgQuery_AlterFdwStmt, type metadata accessor for PgQuery_AlterFdwStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterFdwStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterFdwStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterFdwStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterFdwStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterFdwStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterFdwStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterFdwStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterFdwStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterFdwStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #136 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ForeignServerStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ForeignServerStmt = type metadata accessor for PgQuery_CreateForeignServerStmt(0);
  v5 = *(_QWORD *)(ForeignServerStmt - 8);
  v6 = MEMORY[0x1E0C80A78](ForeignServerStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateForeignServerStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ForeignServerStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 135)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateForeignServerStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateForeignServerStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateForeignServerStmt);
      v25(v24, 0, 1, ForeignServerStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignServerStmt and conformance PgQuery_CreateForeignServerStmt, type metadata accessor for PgQuery_CreateForeignServerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateForeignServerStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateForeignServerStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateForeignServerStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ForeignServerStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateForeignServerStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateForeignServerStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateForeignServerStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateForeignServerStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateForeignServerStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #137 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterForeignServerStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterForeignServerStmt = type metadata accessor for PgQuery_AlterForeignServerStmt(0);
  v5 = *(_QWORD *)(AlterForeignServerStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterForeignServerStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterForeignServerStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterForeignServerStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 136)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterForeignServerStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterForeignServerStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterForeignServerStmt);
      v25(v24, 0, 1, AlterForeignServerStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterForeignServerStmt and conformance PgQuery_AlterForeignServerStmt, type metadata accessor for PgQuery_AlterForeignServerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterForeignServerStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterForeignServerStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterForeignServerStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterForeignServerStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterForeignServerStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterForeignServerStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterForeignServerStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterForeignServerStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterForeignServerStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #138 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t UserMappingStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  UserMappingStmt = type metadata accessor for PgQuery_CreateUserMappingStmt(0);
  v5 = *(_QWORD *)(UserMappingStmt - 8);
  v6 = MEMORY[0x1E0C80A78](UserMappingStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateUserMappingStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, UserMappingStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 137)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateUserMappingStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateUserMappingStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateUserMappingStmt);
      v25(v24, 0, 1, UserMappingStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateUserMappingStmt and conformance PgQuery_CreateUserMappingStmt, type metadata accessor for PgQuery_CreateUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateUserMappingStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateUserMappingStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateUserMappingStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, UserMappingStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateUserMappingStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateUserMappingStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateUserMappingStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateUserMappingStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateUserMappingStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #139 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterUserMappingStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterUserMappingStmt = type metadata accessor for PgQuery_AlterUserMappingStmt(0);
  v5 = *(_QWORD *)(AlterUserMappingStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterUserMappingStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterUserMappingStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterUserMappingStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 138)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterUserMappingStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterUserMappingStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterUserMappingStmt);
      v25(v24, 0, 1, AlterUserMappingStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterUserMappingStmt and conformance PgQuery_AlterUserMappingStmt, type metadata accessor for PgQuery_AlterUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterUserMappingStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterUserMappingStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterUserMappingStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterUserMappingStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterUserMappingStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterUserMappingStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterUserMappingStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterUserMappingStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterUserMappingStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #140 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DropUserMappingStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  DropUserMappingStmt = type metadata accessor for PgQuery_DropUserMappingStmt(0);
  v5 = *(_QWORD *)(DropUserMappingStmt - 8);
  v6 = MEMORY[0x1E0C80A78](DropUserMappingStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DropUserMappingStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, DropUserMappingStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 139)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropUserMappingStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_DropUserMappingStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_DropUserMappingStmt);
      v25(v24, 0, 1, DropUserMappingStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropUserMappingStmt and conformance PgQuery_DropUserMappingStmt, type metadata accessor for PgQuery_DropUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropUserMappingStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropUserMappingStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_DropUserMappingStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, DropUserMappingStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropUserMappingStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_DropUserMappingStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_DropUserMappingStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropUserMappingStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_DropUserMappingStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #141 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterTableSpaceOptionsStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterTableSpaceOptionsStmt = type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(0);
  v5 = *(_QWORD *)(AlterTableSpaceOptionsStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterTableSpaceOptionsStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterTableSpaceOptionsStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterTableSpaceOptionsStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 140)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTableSpaceOptionsStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
      v25(v24, 0, 1, AlterTableSpaceOptionsStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableSpaceOptionsStmt and conformance PgQuery_AlterTableSpaceOptionsStmt, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableSpaceOptionsStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTableSpaceOptionsStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterTableSpaceOptionsStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterTableSpaceOptionsStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTableSpaceOptionsStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterTableSpaceOptionsStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTableSpaceOptionsStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #142 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterTableMoveAllStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterTableMoveAllStmt = type metadata accessor for PgQuery_AlterTableMoveAllStmt(0);
  v5 = *(_QWORD *)(AlterTableMoveAllStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterTableMoveAllStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterTableMoveAllStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterTableMoveAllStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 141)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTableMoveAllStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterTableMoveAllStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterTableMoveAllStmt);
      v25(v24, 0, 1, AlterTableMoveAllStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableMoveAllStmt and conformance PgQuery_AlterTableMoveAllStmt, type metadata accessor for PgQuery_AlterTableMoveAllStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableMoveAllStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTableMoveAllStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterTableMoveAllStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterTableMoveAllStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTableMoveAllStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterTableMoveAllStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterTableMoveAllStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterTableMoveAllStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterTableMoveAllStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #143 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t SecLabelStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  SecLabelStmt = type metadata accessor for PgQuery_SecLabelStmt(0);
  v5 = *(_QWORD *)(SecLabelStmt - 8);
  v6 = MEMORY[0x1E0C80A78](SecLabelStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SecLabelStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, SecLabelStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 142)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SecLabelStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_SecLabelStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_SecLabelStmt);
      v25(v24, 0, 1, SecLabelStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SecLabelStmt and conformance PgQuery_SecLabelStmt, type metadata accessor for PgQuery_SecLabelStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SecLabelStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SecLabelStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_SecLabelStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, SecLabelStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SecLabelStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_SecLabelStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_SecLabelStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SecLabelStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_SecLabelStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #144 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ForeignTableStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ForeignTableStmt = type metadata accessor for PgQuery_CreateForeignTableStmt(0);
  v5 = *(_QWORD *)(ForeignTableStmt - 8);
  v6 = MEMORY[0x1E0C80A78](ForeignTableStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateForeignTableStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ForeignTableStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 143)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateForeignTableStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateForeignTableStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateForeignTableStmt);
      v25(v24, 0, 1, ForeignTableStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignTableStmt and conformance PgQuery_CreateForeignTableStmt, type metadata accessor for PgQuery_CreateForeignTableStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateForeignTableStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateForeignTableStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateForeignTableStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ForeignTableStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateForeignTableStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateForeignTableStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateForeignTableStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateForeignTableStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateForeignTableStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #145 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ImportForeignSchemaStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ImportForeignSchemaStmt = type metadata accessor for PgQuery_ImportForeignSchemaStmt(0);
  v5 = *(_QWORD *)(ImportForeignSchemaStmt - 8);
  v6 = MEMORY[0x1E0C80A78](ImportForeignSchemaStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ImportForeignSchemaStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ImportForeignSchemaStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 144)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ImportForeignSchemaStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ImportForeignSchemaStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ImportForeignSchemaStmt);
      v25(v24, 0, 1, ImportForeignSchemaStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ImportForeignSchemaStmt and conformance PgQuery_ImportForeignSchemaStmt, type metadata accessor for PgQuery_ImportForeignSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ImportForeignSchemaStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ImportForeignSchemaStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ImportForeignSchemaStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ImportForeignSchemaStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ImportForeignSchemaStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ImportForeignSchemaStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ImportForeignSchemaStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ImportForeignSchemaStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ImportForeignSchemaStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #146 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ExtensionStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ExtensionStmt = type metadata accessor for PgQuery_CreateExtensionStmt(0);
  v5 = *(_QWORD *)(ExtensionStmt - 8);
  v6 = MEMORY[0x1E0C80A78](ExtensionStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateExtensionStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ExtensionStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 145)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateExtensionStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateExtensionStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateExtensionStmt);
      v25(v24, 0, 1, ExtensionStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateExtensionStmt and conformance PgQuery_CreateExtensionStmt, type metadata accessor for PgQuery_CreateExtensionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateExtensionStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateExtensionStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateExtensionStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ExtensionStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateExtensionStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateExtensionStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateExtensionStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateExtensionStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateExtensionStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #147 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterExtensionStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterExtensionStmt = type metadata accessor for PgQuery_AlterExtensionStmt(0);
  v5 = *(_QWORD *)(AlterExtensionStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterExtensionStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterExtensionStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterExtensionStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 146)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterExtensionStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterExtensionStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterExtensionStmt);
      v25(v24, 0, 1, AlterExtensionStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionStmt and conformance PgQuery_AlterExtensionStmt, type metadata accessor for PgQuery_AlterExtensionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterExtensionStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterExtensionStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterExtensionStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterExtensionStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterExtensionStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterExtensionStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterExtensionStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterExtensionStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterExtensionStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #148 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterExtensionContentsStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterExtensionContentsStmt = type metadata accessor for PgQuery_AlterExtensionContentsStmt(0);
  v5 = *(_QWORD *)(AlterExtensionContentsStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterExtensionContentsStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterExtensionContentsStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterExtensionContentsStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 147)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterExtensionContentsStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterExtensionContentsStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterExtensionContentsStmt);
      v25(v24, 0, 1, AlterExtensionContentsStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionContentsStmt and conformance PgQuery_AlterExtensionContentsStmt, type metadata accessor for PgQuery_AlterExtensionContentsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterExtensionContentsStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterExtensionContentsStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterExtensionContentsStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterExtensionContentsStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterExtensionContentsStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterExtensionContentsStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterExtensionContentsStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterExtensionContentsStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterExtensionContentsStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #149 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t EventTrigStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  EventTrigStmt = type metadata accessor for PgQuery_CreateEventTrigStmt(0);
  v5 = *(_QWORD *)(EventTrigStmt - 8);
  v6 = MEMORY[0x1E0C80A78](EventTrigStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateEventTrigStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, EventTrigStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 148)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateEventTrigStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateEventTrigStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateEventTrigStmt);
      v25(v24, 0, 1, EventTrigStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEventTrigStmt and conformance PgQuery_CreateEventTrigStmt, type metadata accessor for PgQuery_CreateEventTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateEventTrigStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateEventTrigStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateEventTrigStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, EventTrigStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateEventTrigStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateEventTrigStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateEventTrigStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateEventTrigStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateEventTrigStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #150 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterEventTrigStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterEventTrigStmt = type metadata accessor for PgQuery_AlterEventTrigStmt(0);
  v5 = *(_QWORD *)(AlterEventTrigStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterEventTrigStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterEventTrigStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterEventTrigStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 149)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterEventTrigStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterEventTrigStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterEventTrigStmt);
      v25(v24, 0, 1, AlterEventTrigStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEventTrigStmt and conformance PgQuery_AlterEventTrigStmt, type metadata accessor for PgQuery_AlterEventTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterEventTrigStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterEventTrigStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterEventTrigStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterEventTrigStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterEventTrigStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterEventTrigStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterEventTrigStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterEventTrigStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterEventTrigStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #151 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RefreshMatViewStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RefreshMatViewStmt = type metadata accessor for PgQuery_RefreshMatViewStmt(0);
  v5 = *(_QWORD *)(RefreshMatViewStmt - 8);
  v6 = MEMORY[0x1E0C80A78](RefreshMatViewStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RefreshMatViewStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RefreshMatViewStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 150)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RefreshMatViewStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_RefreshMatViewStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_RefreshMatViewStmt);
      v25(v24, 0, 1, RefreshMatViewStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RefreshMatViewStmt and conformance PgQuery_RefreshMatViewStmt, type metadata accessor for PgQuery_RefreshMatViewStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RefreshMatViewStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RefreshMatViewStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_RefreshMatViewStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RefreshMatViewStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RefreshMatViewStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RefreshMatViewStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_RefreshMatViewStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RefreshMatViewStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_RefreshMatViewStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #152 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ReplicaIdentityStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ReplicaIdentityStmt = type metadata accessor for PgQuery_ReplicaIdentityStmt(0);
  v5 = *(_QWORD *)(ReplicaIdentityStmt - 8);
  v6 = MEMORY[0x1E0C80A78](ReplicaIdentityStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ReplicaIdentityStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ReplicaIdentityStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 151)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ReplicaIdentityStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ReplicaIdentityStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ReplicaIdentityStmt);
      v25(v24, 0, 1, ReplicaIdentityStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReplicaIdentityStmt and conformance PgQuery_ReplicaIdentityStmt, type metadata accessor for PgQuery_ReplicaIdentityStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReplicaIdentityStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ReplicaIdentityStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ReplicaIdentityStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ReplicaIdentityStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ReplicaIdentityStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ReplicaIdentityStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ReplicaIdentityStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ReplicaIdentityStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ReplicaIdentityStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #153 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterSystemStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterSystemStmt = type metadata accessor for PgQuery_AlterSystemStmt(0);
  v5 = *(_QWORD *)(AlterSystemStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterSystemStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterSystemStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterSystemStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 152)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterSystemStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterSystemStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterSystemStmt);
      v25(v24, 0, 1, AlterSystemStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSystemStmt and conformance PgQuery_AlterSystemStmt, type metadata accessor for PgQuery_AlterSystemStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSystemStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterSystemStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterSystemStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterSystemStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterSystemStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterSystemStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterSystemStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterSystemStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterSystemStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #154 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t PolicyStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  PolicyStmt = type metadata accessor for PgQuery_CreatePolicyStmt(0);
  v5 = *(_QWORD *)(PolicyStmt - 8);
  v6 = MEMORY[0x1E0C80A78](PolicyStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreatePolicyStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, PolicyStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 153)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreatePolicyStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreatePolicyStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreatePolicyStmt);
      v25(v24, 0, 1, PolicyStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePolicyStmt and conformance PgQuery_CreatePolicyStmt, type metadata accessor for PgQuery_CreatePolicyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePolicyStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreatePolicyStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreatePolicyStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, PolicyStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreatePolicyStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreatePolicyStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreatePolicyStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreatePolicyStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreatePolicyStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #155 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterPolicyStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterPolicyStmt = type metadata accessor for PgQuery_AlterPolicyStmt(0);
  v5 = *(_QWORD *)(AlterPolicyStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterPolicyStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterPolicyStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterPolicyStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 154)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterPolicyStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterPolicyStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterPolicyStmt);
      v25(v24, 0, 1, AlterPolicyStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPolicyStmt and conformance PgQuery_AlterPolicyStmt, type metadata accessor for PgQuery_AlterPolicyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterPolicyStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterPolicyStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterPolicyStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterPolicyStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterPolicyStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterPolicyStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterPolicyStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterPolicyStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterPolicyStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #156 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TransformStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  TransformStmt = type metadata accessor for PgQuery_CreateTransformStmt(0);
  v5 = *(_QWORD *)(TransformStmt - 8);
  v6 = MEMORY[0x1E0C80A78](TransformStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateTransformStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, TransformStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 155)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateTransformStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateTransformStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateTransformStmt);
      v25(v24, 0, 1, TransformStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTransformStmt and conformance PgQuery_CreateTransformStmt, type metadata accessor for PgQuery_CreateTransformStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTransformStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateTransformStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateTransformStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, TransformStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateTransformStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateTransformStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateTransformStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateTransformStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateTransformStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #157 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AmStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AmStmt = type metadata accessor for PgQuery_CreateAmStmt(0);
  v5 = *(_QWORD *)(AmStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AmStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateAmStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AmStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 156)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateAmStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateAmStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateAmStmt);
      v25(v24, 0, 1, AmStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateAmStmt and conformance PgQuery_CreateAmStmt, type metadata accessor for PgQuery_CreateAmStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateAmStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateAmStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateAmStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AmStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateAmStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateAmStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateAmStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateAmStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateAmStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #158 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t PublicationStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  PublicationStmt = type metadata accessor for PgQuery_CreatePublicationStmt(0);
  v5 = *(_QWORD *)(PublicationStmt - 8);
  v6 = MEMORY[0x1E0C80A78](PublicationStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreatePublicationStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, PublicationStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 157)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreatePublicationStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreatePublicationStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreatePublicationStmt);
      v25(v24, 0, 1, PublicationStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePublicationStmt and conformance PgQuery_CreatePublicationStmt, type metadata accessor for PgQuery_CreatePublicationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePublicationStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreatePublicationStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreatePublicationStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, PublicationStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreatePublicationStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreatePublicationStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreatePublicationStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreatePublicationStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreatePublicationStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #159 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterPublicationStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterPublicationStmt = type metadata accessor for PgQuery_AlterPublicationStmt(0);
  v5 = *(_QWORD *)(AlterPublicationStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterPublicationStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterPublicationStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterPublicationStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 158)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterPublicationStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterPublicationStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterPublicationStmt);
      v25(v24, 0, 1, AlterPublicationStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPublicationStmt and conformance PgQuery_AlterPublicationStmt, type metadata accessor for PgQuery_AlterPublicationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterPublicationStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterPublicationStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterPublicationStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterPublicationStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterPublicationStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterPublicationStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterPublicationStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterPublicationStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterPublicationStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #160 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t SubscriptionStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  SubscriptionStmt = type metadata accessor for PgQuery_CreateSubscriptionStmt(0);
  v5 = *(_QWORD *)(SubscriptionStmt - 8);
  v6 = MEMORY[0x1E0C80A78](SubscriptionStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateSubscriptionStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, SubscriptionStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 159)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateSubscriptionStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateSubscriptionStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateSubscriptionStmt);
      v25(v24, 0, 1, SubscriptionStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSubscriptionStmt and conformance PgQuery_CreateSubscriptionStmt, type metadata accessor for PgQuery_CreateSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSubscriptionStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateSubscriptionStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateSubscriptionStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, SubscriptionStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateSubscriptionStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateSubscriptionStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateSubscriptionStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateSubscriptionStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateSubscriptionStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #161 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterSubscriptionStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterSubscriptionStmt = type metadata accessor for PgQuery_AlterSubscriptionStmt(0);
  v5 = *(_QWORD *)(AlterSubscriptionStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterSubscriptionStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterSubscriptionStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterSubscriptionStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 160)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterSubscriptionStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterSubscriptionStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterSubscriptionStmt);
      v25(v24, 0, 1, AlterSubscriptionStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSubscriptionStmt and conformance PgQuery_AlterSubscriptionStmt, type metadata accessor for PgQuery_AlterSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSubscriptionStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterSubscriptionStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterSubscriptionStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterSubscriptionStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterSubscriptionStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterSubscriptionStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterSubscriptionStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterSubscriptionStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterSubscriptionStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #162 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DropSubscriptionStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  DropSubscriptionStmt = type metadata accessor for PgQuery_DropSubscriptionStmt(0);
  v5 = *(_QWORD *)(DropSubscriptionStmt - 8);
  v6 = MEMORY[0x1E0C80A78](DropSubscriptionStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DropSubscriptionStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, DropSubscriptionStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 161)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropSubscriptionStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_DropSubscriptionStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_DropSubscriptionStmt);
      v25(v24, 0, 1, DropSubscriptionStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropSubscriptionStmt and conformance PgQuery_DropSubscriptionStmt, type metadata accessor for PgQuery_DropSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropSubscriptionStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropSubscriptionStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_DropSubscriptionStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, DropSubscriptionStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropSubscriptionStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_DropSubscriptionStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_DropSubscriptionStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DropSubscriptionStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_DropSubscriptionStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #163 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t StatsStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  StatsStmt = type metadata accessor for PgQuery_CreateStatsStmt(0);
  v5 = *(_QWORD *)(StatsStmt - 8);
  v6 = MEMORY[0x1E0C80A78](StatsStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStatsStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, StatsStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 162)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateStatsStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateStatsStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateStatsStmt);
      v25(v24, 0, 1, StatsStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStatsStmt and conformance PgQuery_CreateStatsStmt, type metadata accessor for PgQuery_CreateStatsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStatsStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateStatsStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateStatsStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, StatsStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateStatsStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateStatsStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateStatsStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateStatsStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateStatsStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #164 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterCollationStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterCollationStmt = type metadata accessor for PgQuery_AlterCollationStmt(0);
  v5 = *(_QWORD *)(AlterCollationStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterCollationStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterCollationStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterCollationStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 163)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterCollationStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterCollationStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterCollationStmt);
      v25(v24, 0, 1, AlterCollationStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterCollationStmt and conformance PgQuery_AlterCollationStmt, type metadata accessor for PgQuery_AlterCollationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterCollationStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterCollationStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterCollationStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterCollationStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterCollationStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterCollationStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterCollationStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterCollationStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterCollationStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #165 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  v4 = type metadata accessor for PgQuery_CallStmt(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CallStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, v4);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 164)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CallStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CallStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CallStmt);
      v25(v24, 0, 1, v4);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallStmt and conformance PgQuery_CallStmt, type metadata accessor for PgQuery_CallStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CallStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CallStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CallStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, v4) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CallStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CallStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CallStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CallStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CallStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #166 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AlterStatsStmt;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AlterStatsStmt = type metadata accessor for PgQuery_AlterStatsStmt(0);
  v5 = *(_QWORD *)(AlterStatsStmt - 8);
  v6 = MEMORY[0x1E0C80A78](AlterStatsStmt);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterStatsStmt?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AlterStatsStmt);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 165)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterStatsStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AlterStatsStmt);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AlterStatsStmt);
      v25(v24, 0, 1, AlterStatsStmt);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterStatsStmt and conformance PgQuery_AlterStatsStmt, type metadata accessor for PgQuery_AlterStatsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterStatsStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterStatsStmt?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AlterStatsStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AlterStatsStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterStatsStmt?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AlterStatsStmt?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AlterStatsStmt);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AlterStatsStmt?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AlterStatsStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #167 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t A_Expr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  A_Expr = type metadata accessor for PgQuery_A_Expr(0);
  v5 = *(_QWORD *)(A_Expr - 8);
  v6 = MEMORY[0x1E0C80A78](A_Expr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_A_Expr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, A_Expr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 166)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Expr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_A_Expr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_A_Expr);
      v25(v24, 0, 1, A_Expr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Expr and conformance PgQuery_A_Expr, type metadata accessor for PgQuery_A_Expr, (uint64_t)&protocol conformance descriptor for PgQuery_A_Expr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Expr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_A_Expr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, A_Expr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Expr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_A_Expr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_A_Expr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Expr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_A_Expr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #168 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ColumnRef;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ColumnRef = type metadata accessor for PgQuery_ColumnRef(0);
  v5 = *(_QWORD *)(ColumnRef - 8);
  v6 = MEMORY[0x1E0C80A78](ColumnRef);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ColumnRef?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ColumnRef);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 167)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ColumnRef?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ColumnRef);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ColumnRef);
      v25(v24, 0, 1, ColumnRef);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnRef and conformance PgQuery_ColumnRef, type metadata accessor for PgQuery_ColumnRef, (uint64_t)&protocol conformance descriptor for PgQuery_ColumnRef);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ColumnRef?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ColumnRef?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ColumnRef) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ColumnRef?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ColumnRef?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ColumnRef);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ColumnRef?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ColumnRef);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #169 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ParamRef;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ParamRef = type metadata accessor for PgQuery_ParamRef(0);
  v5 = *(_QWORD *)(ParamRef - 8);
  v6 = MEMORY[0x1E0C80A78](ParamRef);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ParamRef?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ParamRef);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 168)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ParamRef?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ParamRef);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ParamRef);
      v25(v24, 0, 1, ParamRef);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParamRef and conformance PgQuery_ParamRef, type metadata accessor for PgQuery_ParamRef, (uint64_t)&protocol conformance descriptor for PgQuery_ParamRef);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ParamRef?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ParamRef?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ParamRef) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ParamRef?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ParamRef?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ParamRef);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ParamRef?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ParamRef);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #170 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t A_Const;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  A_Const = type metadata accessor for PgQuery_A_Const(0);
  v5 = *(_QWORD *)(A_Const - 8);
  v6 = MEMORY[0x1E0C80A78](A_Const);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_A_Const?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, A_Const);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 169)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Const?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_A_Const);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_A_Const);
      v25(v24, 0, 1, A_Const);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Const and conformance PgQuery_A_Const, type metadata accessor for PgQuery_A_Const, (uint64_t)&protocol conformance descriptor for PgQuery_A_Const);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Const?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_A_Const?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, A_Const) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Const?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_A_Const?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_A_Const);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Const?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_A_Const);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #171 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  v4 = type metadata accessor for PgQuery_FuncCall(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FuncCall?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, v4);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 170)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FuncCall?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_FuncCall);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_FuncCall);
      v25(v24, 0, 1, v4);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, type metadata accessor for PgQuery_FuncCall, (uint64_t)&protocol conformance descriptor for PgQuery_FuncCall);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FuncCall?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_FuncCall?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, v4) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FuncCall?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_FuncCall?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_FuncCall);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FuncCall?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_FuncCall);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #172 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t A_Star;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  A_Star = type metadata accessor for PgQuery_A_Star(0);
  v5 = *(_QWORD *)(A_Star - 8);
  v6 = MEMORY[0x1E0C80A78](A_Star);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_A_Star?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, A_Star);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 171)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Star?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_A_Star);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_A_Star);
      v25(v24, 0, 1, A_Star);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Star and conformance PgQuery_A_Star, type metadata accessor for PgQuery_A_Star, (uint64_t)&protocol conformance descriptor for PgQuery_A_Star);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Star?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_A_Star?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, A_Star) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Star?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_A_Star?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_A_Star);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Star?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_A_Star);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #173 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t A_Indices;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  A_Indices = type metadata accessor for PgQuery_A_Indices(0);
  v5 = *(_QWORD *)(A_Indices - 8);
  v6 = MEMORY[0x1E0C80A78](A_Indices);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_A_Indices?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, A_Indices);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 172)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Indices?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_A_Indices);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_A_Indices);
      v25(v24, 0, 1, A_Indices);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indices and conformance PgQuery_A_Indices, type metadata accessor for PgQuery_A_Indices, (uint64_t)&protocol conformance descriptor for PgQuery_A_Indices);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Indices?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_A_Indices?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, A_Indices) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Indices?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_A_Indices?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_A_Indices);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Indices?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_A_Indices);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #174 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t A_Indirection;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  A_Indirection = type metadata accessor for PgQuery_A_Indirection(0);
  v5 = *(_QWORD *)(A_Indirection - 8);
  v6 = MEMORY[0x1E0C80A78](A_Indirection);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_A_Indirection?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, A_Indirection);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 173)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Indirection?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_A_Indirection);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_A_Indirection);
      v25(v24, 0, 1, A_Indirection);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indirection and conformance PgQuery_A_Indirection, type metadata accessor for PgQuery_A_Indirection, (uint64_t)&protocol conformance descriptor for PgQuery_A_Indirection);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Indirection?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_A_Indirection?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, A_Indirection) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Indirection?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_A_Indirection?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_A_Indirection);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_Indirection?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_A_Indirection);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #175 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t A_ArrayExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  A_ArrayExpr = type metadata accessor for PgQuery_A_ArrayExpr(0);
  v5 = *(_QWORD *)(A_ArrayExpr - 8);
  v6 = MEMORY[0x1E0C80A78](A_ArrayExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_A_ArrayExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, A_ArrayExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 174)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_ArrayExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_A_ArrayExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_A_ArrayExpr);
      v25(v24, 0, 1, A_ArrayExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_ArrayExpr and conformance PgQuery_A_ArrayExpr, type metadata accessor for PgQuery_A_ArrayExpr, (uint64_t)&protocol conformance descriptor for PgQuery_A_ArrayExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_ArrayExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_A_ArrayExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, A_ArrayExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_ArrayExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_A_ArrayExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_A_ArrayExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_A_ArrayExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_A_ArrayExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #176 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ResTarget;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ResTarget = type metadata accessor for PgQuery_ResTarget(0);
  v5 = *(_QWORD *)(ResTarget - 8);
  v6 = MEMORY[0x1E0C80A78](ResTarget);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ResTarget?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ResTarget);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 175)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ResTarget?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ResTarget);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ResTarget);
      v25(v24, 0, 1, ResTarget);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ResTarget and conformance PgQuery_ResTarget, type metadata accessor for PgQuery_ResTarget, (uint64_t)&protocol conformance descriptor for PgQuery_ResTarget);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ResTarget?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ResTarget?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ResTarget) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ResTarget?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ResTarget?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ResTarget);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ResTarget?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ResTarget);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #177 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t MultiAssignRef;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  MultiAssignRef = type metadata accessor for PgQuery_MultiAssignRef(0);
  v5 = *(_QWORD *)(MultiAssignRef - 8);
  v6 = MEMORY[0x1E0C80A78](MultiAssignRef);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_MultiAssignRef?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, MultiAssignRef);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 176)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_MultiAssignRef?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_MultiAssignRef);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_MultiAssignRef);
      v25(v24, 0, 1, MultiAssignRef);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MultiAssignRef and conformance PgQuery_MultiAssignRef, type metadata accessor for PgQuery_MultiAssignRef, (uint64_t)&protocol conformance descriptor for PgQuery_MultiAssignRef);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_MultiAssignRef?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_MultiAssignRef?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, MultiAssignRef) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_MultiAssignRef?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_MultiAssignRef?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_MultiAssignRef);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_MultiAssignRef?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_MultiAssignRef);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #178 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TypeCast;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  TypeCast = type metadata accessor for PgQuery_TypeCast(0);
  v5 = *(_QWORD *)(TypeCast - 8);
  v6 = MEMORY[0x1E0C80A78](TypeCast);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeCast?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, TypeCast);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 177)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TypeCast?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_TypeCast);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_TypeCast);
      v25(v24, 0, 1, TypeCast);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeCast and conformance PgQuery_TypeCast, type metadata accessor for PgQuery_TypeCast, (uint64_t)&protocol conformance descriptor for PgQuery_TypeCast);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TypeCast?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_TypeCast?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, TypeCast) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TypeCast?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_TypeCast?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_TypeCast);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TypeCast?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_TypeCast);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #179 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CollateClause;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  v5 = *(_QWORD *)(CollateClause - 8);
  v6 = MEMORY[0x1E0C80A78](CollateClause);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CollateClause?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, CollateClause);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 178)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CollateClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CollateClause);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CollateClause);
      v25(v24, 0, 1, CollateClause);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, type metadata accessor for PgQuery_CollateClause, (uint64_t)&protocol conformance descriptor for PgQuery_CollateClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, CollateClause) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CollateClause?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CollateClause);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CollateClause?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CollateClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #180 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t SortBy;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  SortBy = type metadata accessor for PgQuery_SortBy(0);
  v5 = *(_QWORD *)(SortBy - 8);
  v6 = MEMORY[0x1E0C80A78](SortBy);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SortBy?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, SortBy);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 179)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SortBy?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_SortBy);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_SortBy);
      v25(v24, 0, 1, SortBy);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortBy and conformance PgQuery_SortBy, type metadata accessor for PgQuery_SortBy, (uint64_t)&protocol conformance descriptor for PgQuery_SortBy);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SortBy?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_SortBy?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, SortBy) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SortBy?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_SortBy?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_SortBy);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SortBy?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_SortBy);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #181 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WindowDef;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  WindowDef = type metadata accessor for PgQuery_WindowDef(0);
  v5 = *(_QWORD *)(WindowDef - 8);
  v6 = MEMORY[0x1E0C80A78](WindowDef);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WindowDef?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, WindowDef);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 180)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WindowDef?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_WindowDef);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_WindowDef);
      v25(v24, 0, 1, WindowDef);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, type metadata accessor for PgQuery_WindowDef, (uint64_t)&protocol conformance descriptor for PgQuery_WindowDef);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, WindowDef) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WindowDef?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_WindowDef);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WindowDef?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_WindowDef);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #182 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RangeSubselect;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RangeSubselect = type metadata accessor for PgQuery_RangeSubselect(0);
  v5 = *(_QWORD *)(RangeSubselect - 8);
  v6 = MEMORY[0x1E0C80A78](RangeSubselect);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeSubselect?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RangeSubselect);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 181)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeSubselect?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_RangeSubselect);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_RangeSubselect);
      v25(v24, 0, 1, RangeSubselect);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeSubselect and conformance PgQuery_RangeSubselect, type metadata accessor for PgQuery_RangeSubselect, (uint64_t)&protocol conformance descriptor for PgQuery_RangeSubselect);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeSubselect?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_RangeSubselect?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RangeSubselect) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeSubselect?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RangeSubselect?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_RangeSubselect);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeSubselect?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_RangeSubselect);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #183 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RangeFunction;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RangeFunction = type metadata accessor for PgQuery_RangeFunction(0);
  v5 = *(_QWORD *)(RangeFunction - 8);
  v6 = MEMORY[0x1E0C80A78](RangeFunction);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeFunction?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RangeFunction);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 182)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeFunction?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_RangeFunction);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_RangeFunction);
      v25(v24, 0, 1, RangeFunction);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeFunction and conformance PgQuery_RangeFunction, type metadata accessor for PgQuery_RangeFunction, (uint64_t)&protocol conformance descriptor for PgQuery_RangeFunction);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeFunction?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_RangeFunction?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RangeFunction) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeFunction?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RangeFunction?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_RangeFunction);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeFunction?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_RangeFunction);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #184 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RangeTableSample;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RangeTableSample = type metadata accessor for PgQuery_RangeTableSample(0);
  v5 = *(_QWORD *)(RangeTableSample - 8);
  v6 = MEMORY[0x1E0C80A78](RangeTableSample);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeTableSample?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RangeTableSample);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 183)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTableSample?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_RangeTableSample);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_RangeTableSample);
      v25(v24, 0, 1, RangeTableSample);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableSample and conformance PgQuery_RangeTableSample, type metadata accessor for PgQuery_RangeTableSample, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableSample);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTableSample?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_RangeTableSample?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RangeTableSample) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTableSample?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RangeTableSample?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_RangeTableSample);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTableSample?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_RangeTableSample);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #185 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RangeTableFunc;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RangeTableFunc = type metadata accessor for PgQuery_RangeTableFunc(0);
  v5 = *(_QWORD *)(RangeTableFunc - 8);
  v6 = MEMORY[0x1E0C80A78](RangeTableFunc);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeTableFunc?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RangeTableFunc);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 184)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTableFunc?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_RangeTableFunc);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_RangeTableFunc);
      v25(v24, 0, 1, RangeTableFunc);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFunc and conformance PgQuery_RangeTableFunc, type metadata accessor for PgQuery_RangeTableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableFunc);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTableFunc?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_RangeTableFunc?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RangeTableFunc) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTableFunc?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RangeTableFunc?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_RangeTableFunc);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTableFunc?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_RangeTableFunc);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #186 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RangeTableFuncCol;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RangeTableFuncCol = type metadata accessor for PgQuery_RangeTableFuncCol(0);
  v5 = *(_QWORD *)(RangeTableFuncCol - 8);
  v6 = MEMORY[0x1E0C80A78](RangeTableFuncCol);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeTableFuncCol?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RangeTableFuncCol);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 185)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTableFuncCol?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_RangeTableFuncCol);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_RangeTableFuncCol);
      v25(v24, 0, 1, RangeTableFuncCol);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFuncCol and conformance PgQuery_RangeTableFuncCol, type metadata accessor for PgQuery_RangeTableFuncCol, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableFuncCol);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTableFuncCol?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_RangeTableFuncCol?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RangeTableFuncCol) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTableFuncCol?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RangeTableFuncCol?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_RangeTableFuncCol);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTableFuncCol?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_RangeTableFuncCol);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #187 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TypeName;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v5 = *(_QWORD *)(TypeName - 8);
  v6 = MEMORY[0x1E0C80A78](TypeName);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, TypeName);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 186)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_TypeName);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_TypeName);
      v25(v24, 0, 1, TypeName);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, TypeName) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TypeName?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_TypeName?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_TypeName);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TypeName?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_TypeName);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #188 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ColumnDef;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ColumnDef = type metadata accessor for PgQuery_ColumnDef(0);
  v5 = *(_QWORD *)(ColumnDef - 8);
  v6 = MEMORY[0x1E0C80A78](ColumnDef);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ColumnDef?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ColumnDef);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 187)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ColumnDef?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ColumnDef);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ColumnDef);
      v25(v24, 0, 1, ColumnDef);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnDef and conformance PgQuery_ColumnDef, type metadata accessor for PgQuery_ColumnDef, (uint64_t)&protocol conformance descriptor for PgQuery_ColumnDef);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ColumnDef?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ColumnDef?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ColumnDef) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ColumnDef?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ColumnDef?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ColumnDef);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ColumnDef?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ColumnDef);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #189 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t IndexElem;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  IndexElem = type metadata accessor for PgQuery_IndexElem(0);
  v5 = *(_QWORD *)(IndexElem - 8);
  v6 = MEMORY[0x1E0C80A78](IndexElem);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_IndexElem?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, IndexElem);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 188)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_IndexElem?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_IndexElem);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_IndexElem);
      v25(v24, 0, 1, IndexElem);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexElem and conformance PgQuery_IndexElem, type metadata accessor for PgQuery_IndexElem, (uint64_t)&protocol conformance descriptor for PgQuery_IndexElem);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_IndexElem?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_IndexElem?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, IndexElem) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_IndexElem?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_IndexElem?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_IndexElem);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_IndexElem?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_IndexElem);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #190 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Constraint;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  Constraint = type metadata accessor for PgQuery_Constraint(0);
  v5 = *(_QWORD *)(Constraint - 8);
  v6 = MEMORY[0x1E0C80A78](Constraint);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Constraint?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, Constraint);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 189)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Constraint?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_Constraint);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_Constraint);
      v25(v24, 0, 1, Constraint);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Constraint and conformance PgQuery_Constraint, type metadata accessor for PgQuery_Constraint, (uint64_t)&protocol conformance descriptor for PgQuery_Constraint);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Constraint?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_Constraint?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, Constraint) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Constraint?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_Constraint?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_Constraint);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Constraint?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_Constraint);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #191 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DefElem;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  DefElem = type metadata accessor for PgQuery_DefElem(0);
  v5 = *(_QWORD *)(DefElem - 8);
  v6 = MEMORY[0x1E0C80A78](DefElem);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DefElem?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, DefElem);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 190)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DefElem?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_DefElem);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_DefElem);
      v25(v24, 0, 1, DefElem);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefElem and conformance PgQuery_DefElem, type metadata accessor for PgQuery_DefElem, (uint64_t)&protocol conformance descriptor for PgQuery_DefElem);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DefElem?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_DefElem?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, DefElem) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DefElem?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_DefElem?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_DefElem);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_DefElem?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_DefElem);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #192 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RangeTblEntry;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RangeTblEntry = type metadata accessor for PgQuery_RangeTblEntry(0);
  v5 = *(_QWORD *)(RangeTblEntry - 8);
  v6 = MEMORY[0x1E0C80A78](RangeTblEntry);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeTblEntry?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RangeTblEntry);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 191)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTblEntry?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_RangeTblEntry);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_RangeTblEntry);
      v25(v24, 0, 1, RangeTblEntry);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblEntry and conformance PgQuery_RangeTblEntry, type metadata accessor for PgQuery_RangeTblEntry, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblEntry);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTblEntry?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_RangeTblEntry?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RangeTblEntry) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTblEntry?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RangeTblEntry?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_RangeTblEntry);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTblEntry?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_RangeTblEntry);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #193 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RangeTblFunction;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RangeTblFunction = type metadata accessor for PgQuery_RangeTblFunction(0);
  v5 = *(_QWORD *)(RangeTblFunction - 8);
  v6 = MEMORY[0x1E0C80A78](RangeTblFunction);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeTblFunction?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RangeTblFunction);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 192)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTblFunction?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_RangeTblFunction);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_RangeTblFunction);
      v25(v24, 0, 1, RangeTblFunction);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblFunction and conformance PgQuery_RangeTblFunction, type metadata accessor for PgQuery_RangeTblFunction, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblFunction);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTblFunction?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_RangeTblFunction?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RangeTblFunction) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTblFunction?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RangeTblFunction?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_RangeTblFunction);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeTblFunction?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_RangeTblFunction);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #194 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TableSampleClause;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
  v5 = *(_QWORD *)(TableSampleClause - 8);
  v6 = MEMORY[0x1E0C80A78](TableSampleClause);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, TableSampleClause);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 193)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_TableSampleClause);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_TableSampleClause);
      v25(v24, 0, 1, TableSampleClause);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, type metadata accessor for PgQuery_TableSampleClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableSampleClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, TableSampleClause) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_TableSampleClause);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_TableSampleClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #195 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  v4 = type metadata accessor for PgQuery_WithCheckOption(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithCheckOption?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, v4);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 194)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WithCheckOption?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_WithCheckOption);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_WithCheckOption);
      v25(v24, 0, 1, v4);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithCheckOption and conformance PgQuery_WithCheckOption, type metadata accessor for PgQuery_WithCheckOption, (uint64_t)&protocol conformance descriptor for PgQuery_WithCheckOption);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WithCheckOption?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_WithCheckOption?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, v4) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WithCheckOption?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_WithCheckOption?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_WithCheckOption);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WithCheckOption?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_WithCheckOption);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #196 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t SortGroupClause;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  SortGroupClause = type metadata accessor for PgQuery_SortGroupClause(0);
  v5 = *(_QWORD *)(SortGroupClause - 8);
  v6 = MEMORY[0x1E0C80A78](SortGroupClause);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SortGroupClause?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, SortGroupClause);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 195)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SortGroupClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_SortGroupClause);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_SortGroupClause);
      v25(v24, 0, 1, SortGroupClause);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortGroupClause and conformance PgQuery_SortGroupClause, type metadata accessor for PgQuery_SortGroupClause, (uint64_t)&protocol conformance descriptor for PgQuery_SortGroupClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SortGroupClause?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_SortGroupClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, SortGroupClause) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SortGroupClause?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_SortGroupClause?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_SortGroupClause);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_SortGroupClause?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_SortGroupClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #197 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t GroupingSet;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  GroupingSet = type metadata accessor for PgQuery_GroupingSet(0);
  v5 = *(_QWORD *)(GroupingSet - 8);
  v6 = MEMORY[0x1E0C80A78](GroupingSet);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GroupingSet?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, GroupingSet);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 196)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_GroupingSet?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_GroupingSet);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_GroupingSet);
      v25(v24, 0, 1, GroupingSet);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingSet and conformance PgQuery_GroupingSet, type metadata accessor for PgQuery_GroupingSet, (uint64_t)&protocol conformance descriptor for PgQuery_GroupingSet);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_GroupingSet?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_GroupingSet?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, GroupingSet) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_GroupingSet?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_GroupingSet?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_GroupingSet);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_GroupingSet?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_GroupingSet);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #198 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WindowClause;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  WindowClause = type metadata accessor for PgQuery_WindowClause(0);
  v5 = *(_QWORD *)(WindowClause - 8);
  v6 = MEMORY[0x1E0C80A78](WindowClause);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WindowClause?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, WindowClause);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 197)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WindowClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_WindowClause);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_WindowClause);
      v25(v24, 0, 1, WindowClause);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowClause and conformance PgQuery_WindowClause, type metadata accessor for PgQuery_WindowClause, (uint64_t)&protocol conformance descriptor for PgQuery_WindowClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WindowClause?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_WindowClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, WindowClause) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WindowClause?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_WindowClause?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_WindowClause);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WindowClause?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_WindowClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #199 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectWithArgs;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v5 = *(_QWORD *)(ObjectWithArgs - 8);
  v6 = MEMORY[0x1E0C80A78](ObjectWithArgs);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, ObjectWithArgs);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 198)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_ObjectWithArgs);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_ObjectWithArgs);
      v25(v24, 0, 1, ObjectWithArgs);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, type metadata accessor for PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, ObjectWithArgs) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_ObjectWithArgs);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_ObjectWithArgs);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #200 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AccessPriv;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  AccessPriv = type metadata accessor for PgQuery_AccessPriv(0);
  v5 = *(_QWORD *)(AccessPriv - 8);
  v6 = MEMORY[0x1E0C80A78](AccessPriv);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AccessPriv?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, AccessPriv);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 199)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AccessPriv?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_AccessPriv);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_AccessPriv);
      v25(v24, 0, 1, AccessPriv);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AccessPriv and conformance PgQuery_AccessPriv, type metadata accessor for PgQuery_AccessPriv, (uint64_t)&protocol conformance descriptor for PgQuery_AccessPriv);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AccessPriv?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_AccessPriv?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, AccessPriv) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AccessPriv?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_AccessPriv?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_AccessPriv);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_AccessPriv?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_AccessPriv);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #201 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t OpClassItem;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  OpClassItem = type metadata accessor for PgQuery_CreateOpClassItem(0);
  v5 = *(_QWORD *)(OpClassItem - 8);
  v6 = MEMORY[0x1E0C80A78](OpClassItem);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateOpClassItem?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, OpClassItem);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 200)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateOpClassItem?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CreateOpClassItem);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CreateOpClassItem);
      v25(v24, 0, 1, OpClassItem);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassItem and conformance PgQuery_CreateOpClassItem, type metadata accessor for PgQuery_CreateOpClassItem, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpClassItem);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateOpClassItem?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CreateOpClassItem?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, OpClassItem) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateOpClassItem?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CreateOpClassItem?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CreateOpClassItem);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CreateOpClassItem?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CreateOpClassItem);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #202 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TableLikeClause;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  TableLikeClause = type metadata accessor for PgQuery_TableLikeClause(0);
  v5 = *(_QWORD *)(TableLikeClause - 8);
  v6 = MEMORY[0x1E0C80A78](TableLikeClause);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TableLikeClause?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, TableLikeClause);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 201)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TableLikeClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_TableLikeClause);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_TableLikeClause);
      v25(v24, 0, 1, TableLikeClause);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableLikeClause and conformance PgQuery_TableLikeClause, type metadata accessor for PgQuery_TableLikeClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableLikeClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TableLikeClause?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_TableLikeClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, TableLikeClause) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TableLikeClause?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_TableLikeClause?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_TableLikeClause);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TableLikeClause?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_TableLikeClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #203 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FunctionParameter;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  FunctionParameter = type metadata accessor for PgQuery_FunctionParameter(0);
  v5 = *(_QWORD *)(FunctionParameter - 8);
  v6 = MEMORY[0x1E0C80A78](FunctionParameter);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FunctionParameter?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, FunctionParameter);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 202)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FunctionParameter?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_FunctionParameter);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_FunctionParameter);
      v25(v24, 0, 1, FunctionParameter);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FunctionParameter and conformance PgQuery_FunctionParameter, type metadata accessor for PgQuery_FunctionParameter, (uint64_t)&protocol conformance descriptor for PgQuery_FunctionParameter);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FunctionParameter?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_FunctionParameter?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, FunctionParameter) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FunctionParameter?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_FunctionParameter?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_FunctionParameter);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_FunctionParameter?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_FunctionParameter);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #204 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t LockingClause;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  LockingClause = type metadata accessor for PgQuery_LockingClause(0);
  v5 = *(_QWORD *)(LockingClause - 8);
  v6 = MEMORY[0x1E0C80A78](LockingClause);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_LockingClause?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, LockingClause);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 203)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_LockingClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_LockingClause);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_LockingClause);
      v25(v24, 0, 1, LockingClause);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockingClause and conformance PgQuery_LockingClause, type metadata accessor for PgQuery_LockingClause, (uint64_t)&protocol conformance descriptor for PgQuery_LockingClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_LockingClause?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_LockingClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, LockingClause) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_LockingClause?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_LockingClause?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_LockingClause);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_LockingClause?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_LockingClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #205 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RowMarkClause;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RowMarkClause = type metadata accessor for PgQuery_RowMarkClause(0);
  v5 = *(_QWORD *)(RowMarkClause - 8);
  v6 = MEMORY[0x1E0C80A78](RowMarkClause);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RowMarkClause?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RowMarkClause);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 204)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RowMarkClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_RowMarkClause);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_RowMarkClause);
      v25(v24, 0, 1, RowMarkClause);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowMarkClause and conformance PgQuery_RowMarkClause, type metadata accessor for PgQuery_RowMarkClause, (uint64_t)&protocol conformance descriptor for PgQuery_RowMarkClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RowMarkClause?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_RowMarkClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RowMarkClause) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RowMarkClause?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RowMarkClause?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_RowMarkClause);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RowMarkClause?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_RowMarkClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #206 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t XmlSerialize;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  XmlSerialize = type metadata accessor for PgQuery_XmlSerialize(0);
  v5 = *(_QWORD *)(XmlSerialize - 8);
  v6 = MEMORY[0x1E0C80A78](XmlSerialize);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_XmlSerialize?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, XmlSerialize);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 205)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_XmlSerialize?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_XmlSerialize);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_XmlSerialize);
      v25(v24, 0, 1, XmlSerialize);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlSerialize and conformance PgQuery_XmlSerialize, type metadata accessor for PgQuery_XmlSerialize, (uint64_t)&protocol conformance descriptor for PgQuery_XmlSerialize);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_XmlSerialize?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_XmlSerialize?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, XmlSerialize) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_XmlSerialize?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_XmlSerialize?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_XmlSerialize);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_XmlSerialize?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_XmlSerialize);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #207 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  v4 = type metadata accessor for PgQuery_WithClause(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, v4);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 206)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WithClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_WithClause);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_WithClause);
      v25(v24, 0, 1, v4);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, type metadata accessor for PgQuery_WithClause, (uint64_t)&protocol conformance descriptor for PgQuery_WithClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WithClause?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_WithClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, v4) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WithClause?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_WithClause?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_WithClause);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_WithClause?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_WithClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #208 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t InferClause;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  InferClause = type metadata accessor for PgQuery_InferClause(0);
  v5 = *(_QWORD *)(InferClause - 8);
  v6 = MEMORY[0x1E0C80A78](InferClause);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_InferClause?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, InferClause);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 207)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_InferClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_InferClause);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_InferClause);
      v25(v24, 0, 1, InferClause);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, type metadata accessor for PgQuery_InferClause, (uint64_t)&protocol conformance descriptor for PgQuery_InferClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_InferClause?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_InferClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, InferClause) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_InferClause?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_InferClause?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_InferClause);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_InferClause?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_InferClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #209 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  v4 = type metadata accessor for PgQuery_OnConflictClause(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, v4);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 208)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_OnConflictClause);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_OnConflictClause);
      v25(v24, 0, 1, v4);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, type metadata accessor for PgQuery_OnConflictClause, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, v4) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_OnConflictClause);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_OnConflictClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #210 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CommonTableExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  CommonTableExpr = type metadata accessor for PgQuery_CommonTableExpr(0);
  v5 = *(_QWORD *)(CommonTableExpr - 8);
  v6 = MEMORY[0x1E0C80A78](CommonTableExpr);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CommonTableExpr?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, CommonTableExpr);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 209)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CommonTableExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CommonTableExpr);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CommonTableExpr);
      v25(v24, 0, 1, CommonTableExpr);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommonTableExpr and conformance PgQuery_CommonTableExpr, type metadata accessor for PgQuery_CommonTableExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CommonTableExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CommonTableExpr?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CommonTableExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, CommonTableExpr) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CommonTableExpr?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CommonTableExpr?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CommonTableExpr);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CommonTableExpr?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CommonTableExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #211 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RoleSpec;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v5 = *(_QWORD *)(RoleSpec - 8);
  v6 = MEMORY[0x1E0C80A78](RoleSpec);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, RoleSpec);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 210)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_RoleSpec);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_RoleSpec);
      v25(v24, 0, 1, RoleSpec);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_RoleSpec);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_RoleSpec);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #212 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TriggerTransition;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  TriggerTransition = type metadata accessor for PgQuery_TriggerTransition(0);
  v5 = *(_QWORD *)(TriggerTransition - 8);
  v6 = MEMORY[0x1E0C80A78](TriggerTransition);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TriggerTransition?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, TriggerTransition);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 211)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TriggerTransition?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_TriggerTransition);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_TriggerTransition);
      v25(v24, 0, 1, TriggerTransition);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TriggerTransition and conformance PgQuery_TriggerTransition, type metadata accessor for PgQuery_TriggerTransition, (uint64_t)&protocol conformance descriptor for PgQuery_TriggerTransition);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TriggerTransition?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_TriggerTransition?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, TriggerTransition) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TriggerTransition?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_TriggerTransition?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_TriggerTransition);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TriggerTransition?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_TriggerTransition);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #213 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t PartitionElem;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  PartitionElem = type metadata accessor for PgQuery_PartitionElem(0);
  v5 = *(_QWORD *)(PartitionElem - 8);
  v6 = MEMORY[0x1E0C80A78](PartitionElem);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionElem?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, PartitionElem);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 212)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionElem?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_PartitionElem);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_PartitionElem);
      v25(v24, 0, 1, PartitionElem);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionElem and conformance PgQuery_PartitionElem, type metadata accessor for PgQuery_PartitionElem, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionElem);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionElem?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_PartitionElem?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, PartitionElem) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionElem?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_PartitionElem?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_PartitionElem);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionElem?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_PartitionElem);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #214 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t PartitionSpec;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  PartitionSpec = type metadata accessor for PgQuery_PartitionSpec(0);
  v5 = *(_QWORD *)(PartitionSpec - 8);
  v6 = MEMORY[0x1E0C80A78](PartitionSpec);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, PartitionSpec);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 213)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_PartitionSpec);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_PartitionSpec);
      v25(v24, 0, 1, PartitionSpec);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, type metadata accessor for PgQuery_PartitionSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionSpec);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, PartitionSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_PartitionSpec);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_PartitionSpec);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #215 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t PartitionBoundSpec;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  v5 = *(_QWORD *)(PartitionBoundSpec - 8);
  v6 = MEMORY[0x1E0C80A78](PartitionBoundSpec);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, PartitionBoundSpec);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 214)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_PartitionBoundSpec);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_PartitionBoundSpec);
      v25(v24, 0, 1, PartitionBoundSpec);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, type metadata accessor for PgQuery_PartitionBoundSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionBoundSpec);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, PartitionBoundSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_PartitionBoundSpec);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_PartitionBoundSpec);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #216 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t PartitionRangeDatum;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  PartitionRangeDatum = type metadata accessor for PgQuery_PartitionRangeDatum(0);
  v5 = *(_QWORD *)(PartitionRangeDatum - 8);
  v6 = MEMORY[0x1E0C80A78](PartitionRangeDatum);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionRangeDatum?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, PartitionRangeDatum);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 215)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionRangeDatum?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_PartitionRangeDatum);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_PartitionRangeDatum);
      v25(v24, 0, 1, PartitionRangeDatum);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatum and conformance PgQuery_PartitionRangeDatum, type metadata accessor for PgQuery_PartitionRangeDatum, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionRangeDatum);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionRangeDatum?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_PartitionRangeDatum?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, PartitionRangeDatum) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionRangeDatum?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_PartitionRangeDatum?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_PartitionRangeDatum);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionRangeDatum?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_PartitionRangeDatum);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #217 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t PartitionCmd;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  PartitionCmd = type metadata accessor for PgQuery_PartitionCmd(0);
  v5 = *(_QWORD *)(PartitionCmd - 8);
  v6 = MEMORY[0x1E0C80A78](PartitionCmd);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionCmd?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, PartitionCmd);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 216)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionCmd?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_PartitionCmd);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_PartitionCmd);
      v25(v24, 0, 1, PartitionCmd);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionCmd and conformance PgQuery_PartitionCmd, type metadata accessor for PgQuery_PartitionCmd, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionCmd);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionCmd?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_PartitionCmd?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, PartitionCmd) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionCmd?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_PartitionCmd?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_PartitionCmd);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_PartitionCmd?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_PartitionCmd);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #218 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t VacuumRelation;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  VacuumRelation = type metadata accessor for PgQuery_VacuumRelation(0);
  v5 = *(_QWORD *)(VacuumRelation - 8);
  v6 = MEMORY[0x1E0C80A78](VacuumRelation);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VacuumRelation?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, VacuumRelation);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 217)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_VacuumRelation?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_VacuumRelation);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_VacuumRelation);
      v25(v24, 0, 1, VacuumRelation);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumRelation and conformance PgQuery_VacuumRelation, type metadata accessor for PgQuery_VacuumRelation, (uint64_t)&protocol conformance descriptor for PgQuery_VacuumRelation);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_VacuumRelation?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_VacuumRelation?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, VacuumRelation) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_VacuumRelation?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_VacuumRelation?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_VacuumRelation);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_VacuumRelation?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_VacuumRelation);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #219 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t InlineCodeBlock;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  InlineCodeBlock = type metadata accessor for PgQuery_InlineCodeBlock(0);
  v5 = *(_QWORD *)(InlineCodeBlock - 8);
  v6 = MEMORY[0x1E0C80A78](InlineCodeBlock);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_InlineCodeBlock?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, InlineCodeBlock);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 218)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_InlineCodeBlock?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_InlineCodeBlock);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_InlineCodeBlock);
      v25(v24, 0, 1, InlineCodeBlock);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InlineCodeBlock and conformance PgQuery_InlineCodeBlock, type metadata accessor for PgQuery_InlineCodeBlock, (uint64_t)&protocol conformance descriptor for PgQuery_InlineCodeBlock);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_InlineCodeBlock?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_InlineCodeBlock?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, InlineCodeBlock) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_InlineCodeBlock?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_InlineCodeBlock?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_InlineCodeBlock);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_InlineCodeBlock?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_InlineCodeBlock);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #220 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  v4 = type metadata accessor for PgQuery_CallContext(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CallContext?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, v4);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 219)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CallContext?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_CallContext);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_CallContext);
      v25(v24, 0, 1, v4);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallContext and conformance PgQuery_CallContext, type metadata accessor for PgQuery_CallContext, (uint64_t)&protocol conformance descriptor for PgQuery_CallContext);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CallContext?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_CallContext?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, v4) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CallContext?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_CallContext?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_CallContext);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_CallContext?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_CallContext);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #221 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Integer;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  Integer = type metadata accessor for PgQuery_Integer(0);
  v5 = *(_QWORD *)(Integer - 8);
  v6 = MEMORY[0x1E0C80A78](Integer);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Integer?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, Integer);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 220)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Integer?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_Integer);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_Integer);
      v25(v24, 0, 1, Integer);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Integer and conformance PgQuery_Integer, type metadata accessor for PgQuery_Integer, (uint64_t)&protocol conformance descriptor for PgQuery_Integer);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Integer?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_Integer?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, Integer) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Integer?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_Integer?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_Integer);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Integer?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_Integer);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #222 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Float;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  Float = type metadata accessor for PgQuery_Float(0);
  v5 = *(_QWORD *)(Float - 8);
  v6 = MEMORY[0x1E0C80A78](Float);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Float?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, Float);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 221)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Float?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_Float);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_Float);
      v25(v24, 0, 1, Float);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Float and conformance PgQuery_Float, type metadata accessor for PgQuery_Float, (uint64_t)&protocol conformance descriptor for PgQuery_Float);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Float?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_Float?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, Float) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Float?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_Float?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_Float);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Float?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_Float);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #223 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t String;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  String = type metadata accessor for PgQuery_String(0);
  v5 = *(_QWORD *)(String - 8);
  v6 = MEMORY[0x1E0C80A78](String);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_String?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, String);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 222)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_String?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_String);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_String);
      v25(v24, 0, 1, String);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_String and conformance PgQuery_String, type metadata accessor for PgQuery_String, (uint64_t)&protocol conformance descriptor for PgQuery_String);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_String?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_String?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, String) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_String?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_String?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_String);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_String?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_String);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #224 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t BitString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  BitString = type metadata accessor for PgQuery_BitString(0);
  v5 = *(_QWORD *)(BitString - 8);
  v6 = MEMORY[0x1E0C80A78](BitString);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_BitString?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, BitString);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 223)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_BitString?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_BitString);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_BitString);
      v25(v24, 0, 1, BitString);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BitString and conformance PgQuery_BitString, type metadata accessor for PgQuery_BitString, (uint64_t)&protocol conformance descriptor for PgQuery_BitString);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_BitString?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_BitString?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, BitString) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_BitString?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_BitString?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_BitString);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_BitString?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_BitString);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #225 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Null;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  Null = type metadata accessor for PgQuery_Null(0);
  v5 = *(_QWORD *)(Null - 8);
  v6 = MEMORY[0x1E0C80A78](Null);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Null?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, Null);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 224)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Null?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_Null);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_Null);
      v25(v24, 0, 1, Null);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Null and conformance PgQuery_Null, type metadata accessor for PgQuery_Null, (uint64_t)&protocol conformance descriptor for PgQuery_Null);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Null?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_Null?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, Null) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Null?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_Null?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_Null);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Null?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_Null);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #226 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t List;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  List = type metadata accessor for PgQuery_List(0);
  v5 = *(_QWORD *)(List - 8);
  v6 = MEMORY[0x1E0C80A78](List);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_List?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, List);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 225)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_List?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_List);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_List);
      v25(v24, 0, 1, List);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_List and conformance PgQuery_List, type metadata accessor for PgQuery_List, (uint64_t)&protocol conformance descriptor for PgQuery_List);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_List?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_List?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, List) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_List?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_List?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_List);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_List?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_List);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #227 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t IntList;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  IntList = type metadata accessor for PgQuery_IntList(0);
  v5 = *(_QWORD *)(IntList - 8);
  v6 = MEMORY[0x1E0C80A78](IntList);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_IntList?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, IntList);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 226)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_IntList?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_IntList);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_IntList);
      v25(v24, 0, 1, IntList);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntList and conformance PgQuery_IntList, type metadata accessor for PgQuery_IntList, (uint64_t)&protocol conformance descriptor for PgQuery_IntList);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_IntList?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_IntList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, IntList) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_IntList?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_IntList?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_IntList);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_IntList?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_IntList);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #228 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t OidList;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  OidList = type metadata accessor for PgQuery_OidList(0);
  v5 = *(_QWORD *)(OidList - 8);
  v6 = MEMORY[0x1E0C80A78](OidList);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_OidList?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, OidList);
  v33 = v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v26 = v13;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 227)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_OidList?);
      outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v9, type metadata accessor for PgQuery_OidList);
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v24, type metadata accessor for PgQuery_OidList);
      v25(v24, 0, 1, OidList);
    }
    else
    {
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node.OneOf_Node);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OidList and conformance PgQuery_OidList, type metadata accessor for PgQuery_OidList, (uint64_t)&protocol conformance descriptor for PgQuery_OidList);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_OidList?);
  v29 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24, v36, &demangling cache variable for type metadata for PgQuery_OidList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, OidList) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_OidList?);
    return outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_OidList?);
  }
  else
  {
    v30 = v35;
    outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_OidList);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_OidList?);
    v31 = v33;
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v30, v31, type metadata accessor for PgQuery_OidList);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t PgQuery_Node.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_Node, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_Node.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  char *v7;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v5 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if ((_DWORD)result != 1)
  {
    v7 = (char *)&loc_18D9946F8 + 4 * word_18DC0DBC4[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t closure #1 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Alias;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Alias = type metadata accessor for PgQuery_Alias(0);
  MEMORY[0x1E0C80A78](Alias);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Alias);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Alias);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #2 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RangeVar;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  MEMORY[0x1E0C80A78](RangeVar);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RangeVar);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #3 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t TableFunc;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TableFunc = type metadata accessor for PgQuery_TableFunc(0);
  MEMORY[0x1E0C80A78](TableFunc);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_TableFunc);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, type metadata accessor for PgQuery_TableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_TableFunc);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_TableFunc);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #4 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Expr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Expr = type metadata accessor for PgQuery_Expr(0);
  MEMORY[0x1E0C80A78](Expr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 3)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Expr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Expr and conformance PgQuery_Expr, type metadata accessor for PgQuery_Expr, (uint64_t)&protocol conformance descriptor for PgQuery_Expr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Expr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #5 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Var;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Var = type metadata accessor for PgQuery_Var(0);
  MEMORY[0x1E0C80A78](Var);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 4)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Var);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Var and conformance PgQuery_Var, type metadata accessor for PgQuery_Var, (uint64_t)&protocol conformance descriptor for PgQuery_Var);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Var);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #6 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Param;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Param = type metadata accessor for PgQuery_Param(0);
  MEMORY[0x1E0C80A78](Param);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 5)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Param);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Param and conformance PgQuery_Param, type metadata accessor for PgQuery_Param, (uint64_t)&protocol conformance descriptor for PgQuery_Param);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Param);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #7 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Aggref;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Aggref = type metadata accessor for PgQuery_Aggref(0);
  MEMORY[0x1E0C80A78](Aggref);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 6)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Aggref);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Aggref and conformance PgQuery_Aggref, type metadata accessor for PgQuery_Aggref, (uint64_t)&protocol conformance descriptor for PgQuery_Aggref);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Aggref);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #8 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t GroupingFunc;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  GroupingFunc = type metadata accessor for PgQuery_GroupingFunc(0);
  MEMORY[0x1E0C80A78](GroupingFunc);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 7)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_GroupingFunc);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingFunc and conformance PgQuery_GroupingFunc, type metadata accessor for PgQuery_GroupingFunc, (uint64_t)&protocol conformance descriptor for PgQuery_GroupingFunc);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_GroupingFunc);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #9 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t WindowFunc;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  WindowFunc = type metadata accessor for PgQuery_WindowFunc(0);
  MEMORY[0x1E0C80A78](WindowFunc);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 8)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_WindowFunc);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowFunc and conformance PgQuery_WindowFunc, type metadata accessor for PgQuery_WindowFunc, (uint64_t)&protocol conformance descriptor for PgQuery_WindowFunc);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_WindowFunc);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #10 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t SubscriptingRef;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  SubscriptingRef = type metadata accessor for PgQuery_SubscriptingRef(0);
  MEMORY[0x1E0C80A78](SubscriptingRef);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 9)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SubscriptingRef);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubscriptingRef and conformance PgQuery_SubscriptingRef, type metadata accessor for PgQuery_SubscriptingRef, (uint64_t)&protocol conformance descriptor for PgQuery_SubscriptingRef);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SubscriptingRef);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #11 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t FuncExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  FuncExpr = type metadata accessor for PgQuery_FuncExpr(0);
  MEMORY[0x1E0C80A78](FuncExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 10)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_FuncExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, type metadata accessor for PgQuery_FuncExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FuncExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_FuncExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #12 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t NamedArgExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  NamedArgExpr = type metadata accessor for PgQuery_NamedArgExpr(0);
  MEMORY[0x1E0C80A78](NamedArgExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 11)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_NamedArgExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NamedArgExpr and conformance PgQuery_NamedArgExpr, type metadata accessor for PgQuery_NamedArgExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NamedArgExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_NamedArgExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #13 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t OpExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  OpExpr = type metadata accessor for PgQuery_OpExpr(0);
  MEMORY[0x1E0C80A78](OpExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 12)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_OpExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OpExpr and conformance PgQuery_OpExpr, type metadata accessor for PgQuery_OpExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OpExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_OpExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #14 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t DistinctExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DistinctExpr = type metadata accessor for PgQuery_DistinctExpr(0);
  MEMORY[0x1E0C80A78](DistinctExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 13)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DistinctExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DistinctExpr and conformance PgQuery_DistinctExpr, type metadata accessor for PgQuery_DistinctExpr, (uint64_t)&protocol conformance descriptor for PgQuery_DistinctExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DistinctExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #15 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t NullIfExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  NullIfExpr = type metadata accessor for PgQuery_NullIfExpr(0);
  MEMORY[0x1E0C80A78](NullIfExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 14)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_NullIfExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullIfExpr and conformance PgQuery_NullIfExpr, type metadata accessor for PgQuery_NullIfExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NullIfExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_NullIfExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #16 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ScalarArrayOpExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ScalarArrayOpExpr = type metadata accessor for PgQuery_ScalarArrayOpExpr(0);
  MEMORY[0x1E0C80A78](ScalarArrayOpExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 15)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ScalarArrayOpExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScalarArrayOpExpr and conformance PgQuery_ScalarArrayOpExpr, type metadata accessor for PgQuery_ScalarArrayOpExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ScalarArrayOpExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ScalarArrayOpExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #17 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t BoolExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  BoolExpr = type metadata accessor for PgQuery_BoolExpr(0);
  MEMORY[0x1E0C80A78](BoolExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 16)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_BoolExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BoolExpr and conformance PgQuery_BoolExpr, type metadata accessor for PgQuery_BoolExpr, (uint64_t)&protocol conformance descriptor for PgQuery_BoolExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_BoolExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #18 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t SubLink;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  SubLink = type metadata accessor for PgQuery_SubLink(0);
  MEMORY[0x1E0C80A78](SubLink);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 17)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SubLink);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubLink and conformance PgQuery_SubLink, type metadata accessor for PgQuery_SubLink, (uint64_t)&protocol conformance descriptor for PgQuery_SubLink);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SubLink);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #19 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t SubPlan;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  SubPlan = type metadata accessor for PgQuery_SubPlan(0);
  MEMORY[0x1E0C80A78](SubPlan);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 18)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SubPlan);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubPlan and conformance PgQuery_SubPlan, type metadata accessor for PgQuery_SubPlan, (uint64_t)&protocol conformance descriptor for PgQuery_SubPlan);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SubPlan);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #20 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlternativeSubPlan;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlternativeSubPlan = type metadata accessor for PgQuery_AlternativeSubPlan(0);
  MEMORY[0x1E0C80A78](AlternativeSubPlan);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 19)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlternativeSubPlan);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlternativeSubPlan and conformance PgQuery_AlternativeSubPlan, type metadata accessor for PgQuery_AlternativeSubPlan, (uint64_t)&protocol conformance descriptor for PgQuery_AlternativeSubPlan);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlternativeSubPlan);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #21 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t FieldSelect;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  FieldSelect = type metadata accessor for PgQuery_FieldSelect(0);
  MEMORY[0x1E0C80A78](FieldSelect);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 20)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_FieldSelect);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldSelect and conformance PgQuery_FieldSelect, type metadata accessor for PgQuery_FieldSelect, (uint64_t)&protocol conformance descriptor for PgQuery_FieldSelect);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_FieldSelect);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #22 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t FieldStore;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  FieldStore = type metadata accessor for PgQuery_FieldStore(0);
  MEMORY[0x1E0C80A78](FieldStore);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 21)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_FieldStore);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldStore and conformance PgQuery_FieldStore, type metadata accessor for PgQuery_FieldStore, (uint64_t)&protocol conformance descriptor for PgQuery_FieldStore);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_FieldStore);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #23 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RelabelType;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RelabelType = type metadata accessor for PgQuery_RelabelType(0);
  MEMORY[0x1E0C80A78](RelabelType);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 22)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RelabelType);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RelabelType and conformance PgQuery_RelabelType, type metadata accessor for PgQuery_RelabelType, (uint64_t)&protocol conformance descriptor for PgQuery_RelabelType);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RelabelType);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #24 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t CoerceViaIO;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CoerceViaIO = type metadata accessor for PgQuery_CoerceViaIO(0);
  MEMORY[0x1E0C80A78](CoerceViaIO);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 23)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CoerceViaIO);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceViaIO and conformance PgQuery_CoerceViaIO, type metadata accessor for PgQuery_CoerceViaIO, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceViaIO);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CoerceViaIO);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #25 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ArrayCoerceExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ArrayCoerceExpr = type metadata accessor for PgQuery_ArrayCoerceExpr(0);
  MEMORY[0x1E0C80A78](ArrayCoerceExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 24)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ArrayCoerceExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayCoerceExpr and conformance PgQuery_ArrayCoerceExpr, type metadata accessor for PgQuery_ArrayCoerceExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ArrayCoerceExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ArrayCoerceExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #26 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ConvertRowtypeExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ConvertRowtypeExpr = type metadata accessor for PgQuery_ConvertRowtypeExpr(0);
  MEMORY[0x1E0C80A78](ConvertRowtypeExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 25)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ConvertRowtypeExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConvertRowtypeExpr and conformance PgQuery_ConvertRowtypeExpr, type metadata accessor for PgQuery_ConvertRowtypeExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ConvertRowtypeExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ConvertRowtypeExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #27 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t CollateExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CollateExpr = type metadata accessor for PgQuery_CollateExpr(0);
  MEMORY[0x1E0C80A78](CollateExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 26)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CollateExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateExpr and conformance PgQuery_CollateExpr, type metadata accessor for PgQuery_CollateExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CollateExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CollateExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #28 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t CaseExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CaseExpr = type metadata accessor for PgQuery_CaseExpr(0);
  MEMORY[0x1E0C80A78](CaseExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 27)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CaseExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseExpr and conformance PgQuery_CaseExpr, type metadata accessor for PgQuery_CaseExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CaseExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CaseExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #29 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t CaseWhen;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CaseWhen = type metadata accessor for PgQuery_CaseWhen(0);
  MEMORY[0x1E0C80A78](CaseWhen);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 28)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CaseWhen);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseWhen and conformance PgQuery_CaseWhen, type metadata accessor for PgQuery_CaseWhen, (uint64_t)&protocol conformance descriptor for PgQuery_CaseWhen);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CaseWhen);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #30 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t CaseTestExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CaseTestExpr = type metadata accessor for PgQuery_CaseTestExpr(0);
  MEMORY[0x1E0C80A78](CaseTestExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 29)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CaseTestExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseTestExpr and conformance PgQuery_CaseTestExpr, type metadata accessor for PgQuery_CaseTestExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CaseTestExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CaseTestExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #31 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ArrayExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ArrayExpr = type metadata accessor for PgQuery_ArrayExpr(0);
  MEMORY[0x1E0C80A78](ArrayExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 30)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ArrayExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayExpr and conformance PgQuery_ArrayExpr, type metadata accessor for PgQuery_ArrayExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ArrayExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ArrayExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #32 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RowExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RowExpr = type metadata accessor for PgQuery_RowExpr(0);
  MEMORY[0x1E0C80A78](RowExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 31)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RowExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowExpr and conformance PgQuery_RowExpr, type metadata accessor for PgQuery_RowExpr, (uint64_t)&protocol conformance descriptor for PgQuery_RowExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RowExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #33 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RowCompareExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RowCompareExpr = type metadata accessor for PgQuery_RowCompareExpr(0);
  MEMORY[0x1E0C80A78](RowCompareExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 32)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RowCompareExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowCompareExpr and conformance PgQuery_RowCompareExpr, type metadata accessor for PgQuery_RowCompareExpr, (uint64_t)&protocol conformance descriptor for PgQuery_RowCompareExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RowCompareExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #34 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t CoalesceExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CoalesceExpr = type metadata accessor for PgQuery_CoalesceExpr(0);
  MEMORY[0x1E0C80A78](CoalesceExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 33)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CoalesceExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoalesceExpr and conformance PgQuery_CoalesceExpr, type metadata accessor for PgQuery_CoalesceExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CoalesceExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CoalesceExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #35 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t MinMaxExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MinMaxExpr = type metadata accessor for PgQuery_MinMaxExpr(0);
  MEMORY[0x1E0C80A78](MinMaxExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 34)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_MinMaxExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MinMaxExpr and conformance PgQuery_MinMaxExpr, type metadata accessor for PgQuery_MinMaxExpr, (uint64_t)&protocol conformance descriptor for PgQuery_MinMaxExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_MinMaxExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #36 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t SQLValueFunction;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  SQLValueFunction = type metadata accessor for PgQuery_SQLValueFunction(0);
  MEMORY[0x1E0C80A78](SQLValueFunction);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 35)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SQLValueFunction);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SQLValueFunction and conformance PgQuery_SQLValueFunction, type metadata accessor for PgQuery_SQLValueFunction, (uint64_t)&protocol conformance descriptor for PgQuery_SQLValueFunction);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SQLValueFunction);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #37 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t XmlExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  XmlExpr = type metadata accessor for PgQuery_XmlExpr(0);
  MEMORY[0x1E0C80A78](XmlExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 36)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_XmlExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlExpr and conformance PgQuery_XmlExpr, type metadata accessor for PgQuery_XmlExpr, (uint64_t)&protocol conformance descriptor for PgQuery_XmlExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_XmlExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #38 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t NullTest;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  NullTest = type metadata accessor for PgQuery_NullTest(0);
  MEMORY[0x1E0C80A78](NullTest);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 37)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_NullTest);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullTest and conformance PgQuery_NullTest, type metadata accessor for PgQuery_NullTest, (uint64_t)&protocol conformance descriptor for PgQuery_NullTest);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_NullTest);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #39 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t BooleanTest;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  BooleanTest = type metadata accessor for PgQuery_BooleanTest(0);
  MEMORY[0x1E0C80A78](BooleanTest);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 38)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_BooleanTest);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BooleanTest and conformance PgQuery_BooleanTest, type metadata accessor for PgQuery_BooleanTest, (uint64_t)&protocol conformance descriptor for PgQuery_BooleanTest);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_BooleanTest);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #40 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t CoerceToDomain;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CoerceToDomain = type metadata accessor for PgQuery_CoerceToDomain(0);
  MEMORY[0x1E0C80A78](CoerceToDomain);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 39)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CoerceToDomain);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomain and conformance PgQuery_CoerceToDomain, type metadata accessor for PgQuery_CoerceToDomain, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceToDomain);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CoerceToDomain);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #41 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t CoerceToDomainValue;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CoerceToDomainValue = type metadata accessor for PgQuery_CoerceToDomainValue(0);
  MEMORY[0x1E0C80A78](CoerceToDomainValue);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 40)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CoerceToDomainValue);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomainValue and conformance PgQuery_CoerceToDomainValue, type metadata accessor for PgQuery_CoerceToDomainValue, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceToDomainValue);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CoerceToDomainValue);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #42 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t SetToDefault;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  SetToDefault = type metadata accessor for PgQuery_SetToDefault(0);
  MEMORY[0x1E0C80A78](SetToDefault);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 41)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SetToDefault);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetToDefault and conformance PgQuery_SetToDefault, type metadata accessor for PgQuery_SetToDefault, (uint64_t)&protocol conformance descriptor for PgQuery_SetToDefault);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SetToDefault);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #43 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t CurrentOfExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CurrentOfExpr = type metadata accessor for PgQuery_CurrentOfExpr(0);
  MEMORY[0x1E0C80A78](CurrentOfExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 42)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CurrentOfExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CurrentOfExpr and conformance PgQuery_CurrentOfExpr, type metadata accessor for PgQuery_CurrentOfExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CurrentOfExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CurrentOfExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #44 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t NextValueExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  NextValueExpr = type metadata accessor for PgQuery_NextValueExpr(0);
  MEMORY[0x1E0C80A78](NextValueExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 43)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_NextValueExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NextValueExpr and conformance PgQuery_NextValueExpr, type metadata accessor for PgQuery_NextValueExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NextValueExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_NextValueExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #45 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t InferenceElem;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  InferenceElem = type metadata accessor for PgQuery_InferenceElem(0);
  MEMORY[0x1E0C80A78](InferenceElem);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 44)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_InferenceElem);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferenceElem and conformance PgQuery_InferenceElem, type metadata accessor for PgQuery_InferenceElem, (uint64_t)&protocol conformance descriptor for PgQuery_InferenceElem);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_InferenceElem);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #46 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t TargetEntry;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TargetEntry = type metadata accessor for PgQuery_TargetEntry(0);
  MEMORY[0x1E0C80A78](TargetEntry);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 45)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_TargetEntry);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TargetEntry and conformance PgQuery_TargetEntry, type metadata accessor for PgQuery_TargetEntry, (uint64_t)&protocol conformance descriptor for PgQuery_TargetEntry);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_TargetEntry);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #47 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RangeTblRef;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeTblRef = type metadata accessor for PgQuery_RangeTblRef(0);
  MEMORY[0x1E0C80A78](RangeTblRef);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 46)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RangeTblRef);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblRef and conformance PgQuery_RangeTblRef, type metadata accessor for PgQuery_RangeTblRef, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblRef);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RangeTblRef);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #48 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t JoinExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  JoinExpr = type metadata accessor for PgQuery_JoinExpr(0);
  MEMORY[0x1E0C80A78](JoinExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 47)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_JoinExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_JoinExpr and conformance PgQuery_JoinExpr, type metadata accessor for PgQuery_JoinExpr, (uint64_t)&protocol conformance descriptor for PgQuery_JoinExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_JoinExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #49 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PgQuery_FromExpr(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 48)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_FromExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, type metadata accessor for PgQuery_FromExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FromExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_FromExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #50 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PgQuery_OnConflictExpr(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 49)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_OnConflictExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, type metadata accessor for PgQuery_OnConflictExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_OnConflictExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #51 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t IntoClause;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  MEMORY[0x1E0C80A78](IntoClause);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 50)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_IntoClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, type metadata accessor for PgQuery_IntoClause, (uint64_t)&protocol conformance descriptor for PgQuery_IntoClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_IntoClause);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #52 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RawStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RawStmt = type metadata accessor for PgQuery_RawStmt(0);
  MEMORY[0x1E0C80A78](RawStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 51)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RawStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, type metadata accessor for PgQuery_RawStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RawStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RawStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #53 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Query;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Query = type metadata accessor for PgQuery_Query(0);
  MEMORY[0x1E0C80A78](Query);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 52)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Query);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, type metadata accessor for PgQuery_Query, (uint64_t)&protocol conformance descriptor for PgQuery_Query);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Query);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #54 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t InsertStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  InsertStmt = type metadata accessor for PgQuery_InsertStmt(0);
  MEMORY[0x1E0C80A78](InsertStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 53)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_InsertStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InsertStmt and conformance PgQuery_InsertStmt, type metadata accessor for PgQuery_InsertStmt, (uint64_t)&protocol conformance descriptor for PgQuery_InsertStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_InsertStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #55 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PgQuery_DeleteStmt(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 54)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DeleteStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeleteStmt and conformance PgQuery_DeleteStmt, type metadata accessor for PgQuery_DeleteStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeleteStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DeleteStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #56 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t UpdateStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  UpdateStmt = type metadata accessor for PgQuery_UpdateStmt(0);
  MEMORY[0x1E0C80A78](UpdateStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 55)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_UpdateStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UpdateStmt and conformance PgQuery_UpdateStmt, type metadata accessor for PgQuery_UpdateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_UpdateStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_UpdateStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #57 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t SelectStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
  MEMORY[0x1E0C80A78](SelectStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 56)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SelectStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, type metadata accessor for PgQuery_SelectStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SelectStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SelectStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #58 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterTableStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTableStmt = type metadata accessor for PgQuery_AlterTableStmt(0);
  MEMORY[0x1E0C80A78](AlterTableStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 57)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterTableStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableStmt and conformance PgQuery_AlterTableStmt, type metadata accessor for PgQuery_AlterTableStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterTableStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #59 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterTableCmd;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTableCmd = type metadata accessor for PgQuery_AlterTableCmd(0);
  MEMORY[0x1E0C80A78](AlterTableCmd);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 58)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterTableCmd);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableCmd and conformance PgQuery_AlterTableCmd, type metadata accessor for PgQuery_AlterTableCmd, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableCmd);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterTableCmd);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #60 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterDomainStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterDomainStmt = type metadata accessor for PgQuery_AlterDomainStmt(0);
  MEMORY[0x1E0C80A78](AlterDomainStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 59)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterDomainStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDomainStmt and conformance PgQuery_AlterDomainStmt, type metadata accessor for PgQuery_AlterDomainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDomainStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterDomainStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #61 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t SetOperationStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  SetOperationStmt = type metadata accessor for PgQuery_SetOperationStmt(0);
  MEMORY[0x1E0C80A78](SetOperationStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 60)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SetOperationStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetOperationStmt and conformance PgQuery_SetOperationStmt, type metadata accessor for PgQuery_SetOperationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SetOperationStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SetOperationStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #62 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t GrantStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  MEMORY[0x1E0C80A78](GrantStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 61)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_GrantStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, type metadata accessor for PgQuery_GrantStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_GrantStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #63 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t GrantRoleStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  GrantRoleStmt = type metadata accessor for PgQuery_GrantRoleStmt(0);
  MEMORY[0x1E0C80A78](GrantRoleStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 62)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_GrantRoleStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantRoleStmt and conformance PgQuery_GrantRoleStmt, type metadata accessor for PgQuery_GrantRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantRoleStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_GrantRoleStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #64 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterDefaultPrivilegesStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterDefaultPrivilegesStmt = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(0);
  MEMORY[0x1E0C80A78](AlterDefaultPrivilegesStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 63)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDefaultPrivilegesStmt and conformance PgQuery_AlterDefaultPrivilegesStmt, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDefaultPrivilegesStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #65 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ClosePortalStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClosePortalStmt = type metadata accessor for PgQuery_ClosePortalStmt(0);
  MEMORY[0x1E0C80A78](ClosePortalStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 64)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ClosePortalStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClosePortalStmt and conformance PgQuery_ClosePortalStmt, type metadata accessor for PgQuery_ClosePortalStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ClosePortalStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ClosePortalStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #66 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ClusterStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClusterStmt = type metadata accessor for PgQuery_ClusterStmt(0);
  MEMORY[0x1E0C80A78](ClusterStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 65)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ClusterStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClusterStmt and conformance PgQuery_ClusterStmt, type metadata accessor for PgQuery_ClusterStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ClusterStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ClusterStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #67 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t CopyStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CopyStmt = type metadata accessor for PgQuery_CopyStmt(0);
  MEMORY[0x1E0C80A78](CopyStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 66)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CopyStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CopyStmt and conformance PgQuery_CopyStmt, type metadata accessor for PgQuery_CopyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CopyStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CopyStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #68 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Stmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  MEMORY[0x1E0C80A78](Stmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 67)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, type metadata accessor for PgQuery_CreateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #69 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t DefineStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DefineStmt = type metadata accessor for PgQuery_DefineStmt(0);
  MEMORY[0x1E0C80A78](DefineStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 68)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DefineStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefineStmt and conformance PgQuery_DefineStmt, type metadata accessor for PgQuery_DefineStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DefineStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DefineStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #70 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t DropStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropStmt = type metadata accessor for PgQuery_DropStmt(0);
  MEMORY[0x1E0C80A78](DropStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 69)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DropStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropStmt and conformance PgQuery_DropStmt, type metadata accessor for PgQuery_DropStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DropStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #71 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t TruncateStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TruncateStmt = type metadata accessor for PgQuery_TruncateStmt(0);
  MEMORY[0x1E0C80A78](TruncateStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 70)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_TruncateStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TruncateStmt and conformance PgQuery_TruncateStmt, type metadata accessor for PgQuery_TruncateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_TruncateStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_TruncateStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #72 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t CommentStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CommentStmt = type metadata accessor for PgQuery_CommentStmt(0);
  MEMORY[0x1E0C80A78](CommentStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 71)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CommentStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommentStmt and conformance PgQuery_CommentStmt, type metadata accessor for PgQuery_CommentStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CommentStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CommentStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #73 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Stmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Stmt = type metadata accessor for PgQuery_FetchStmt(0);
  MEMORY[0x1E0C80A78](Stmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 72)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_FetchStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FetchStmt and conformance PgQuery_FetchStmt, type metadata accessor for PgQuery_FetchStmt, (uint64_t)&protocol conformance descriptor for PgQuery_FetchStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_FetchStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #74 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t IndexStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  IndexStmt = type metadata accessor for PgQuery_IndexStmt(0);
  MEMORY[0x1E0C80A78](IndexStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 73)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_IndexStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexStmt and conformance PgQuery_IndexStmt, type metadata accessor for PgQuery_IndexStmt, (uint64_t)&protocol conformance descriptor for PgQuery_IndexStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_IndexStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #75 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t FunctionStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  FunctionStmt = type metadata accessor for PgQuery_CreateFunctionStmt(0);
  MEMORY[0x1E0C80A78](FunctionStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 74)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateFunctionStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFunctionStmt and conformance PgQuery_CreateFunctionStmt, type metadata accessor for PgQuery_CreateFunctionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateFunctionStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateFunctionStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #76 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterFunctionStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterFunctionStmt = type metadata accessor for PgQuery_AlterFunctionStmt(0);
  MEMORY[0x1E0C80A78](AlterFunctionStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 75)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterFunctionStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFunctionStmt and conformance PgQuery_AlterFunctionStmt, type metadata accessor for PgQuery_AlterFunctionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterFunctionStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterFunctionStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #77 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t DoStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DoStmt = type metadata accessor for PgQuery_DoStmt(0);
  MEMORY[0x1E0C80A78](DoStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 76)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DoStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DoStmt and conformance PgQuery_DoStmt, type metadata accessor for PgQuery_DoStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DoStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DoStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #78 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RenameStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RenameStmt = type metadata accessor for PgQuery_RenameStmt(0);
  MEMORY[0x1E0C80A78](RenameStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 77)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RenameStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RenameStmt and conformance PgQuery_RenameStmt, type metadata accessor for PgQuery_RenameStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RenameStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RenameStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #79 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RuleStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RuleStmt = type metadata accessor for PgQuery_RuleStmt(0);
  MEMORY[0x1E0C80A78](RuleStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 78)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RuleStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RuleStmt and conformance PgQuery_RuleStmt, type metadata accessor for PgQuery_RuleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RuleStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RuleStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #80 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t NotifyStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  NotifyStmt = type metadata accessor for PgQuery_NotifyStmt(0);
  MEMORY[0x1E0C80A78](NotifyStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 79)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_NotifyStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NotifyStmt and conformance PgQuery_NotifyStmt, type metadata accessor for PgQuery_NotifyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_NotifyStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_NotifyStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #81 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ListenStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ListenStmt = type metadata accessor for PgQuery_ListenStmt(0);
  MEMORY[0x1E0C80A78](ListenStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 80)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ListenStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ListenStmt and conformance PgQuery_ListenStmt, type metadata accessor for PgQuery_ListenStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ListenStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ListenStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #82 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t UnlistenStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnlistenStmt = type metadata accessor for PgQuery_UnlistenStmt(0);
  MEMORY[0x1E0C80A78](UnlistenStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 81)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_UnlistenStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UnlistenStmt and conformance PgQuery_UnlistenStmt, type metadata accessor for PgQuery_UnlistenStmt, (uint64_t)&protocol conformance descriptor for PgQuery_UnlistenStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_UnlistenStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #83 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t TransactionStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TransactionStmt = type metadata accessor for PgQuery_TransactionStmt(0);
  MEMORY[0x1E0C80A78](TransactionStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 82)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_TransactionStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TransactionStmt and conformance PgQuery_TransactionStmt, type metadata accessor for PgQuery_TransactionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_TransactionStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_TransactionStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #84 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ViewStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ViewStmt = type metadata accessor for PgQuery_ViewStmt(0);
  MEMORY[0x1E0C80A78](ViewStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 83)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ViewStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ViewStmt and conformance PgQuery_ViewStmt, type metadata accessor for PgQuery_ViewStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ViewStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ViewStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #85 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t LoadStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  LoadStmt = type metadata accessor for PgQuery_LoadStmt(0);
  MEMORY[0x1E0C80A78](LoadStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 84)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_LoadStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LoadStmt and conformance PgQuery_LoadStmt, type metadata accessor for PgQuery_LoadStmt, (uint64_t)&protocol conformance descriptor for PgQuery_LoadStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_LoadStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #86 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t DomainStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DomainStmt = type metadata accessor for PgQuery_CreateDomainStmt(0);
  MEMORY[0x1E0C80A78](DomainStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 85)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateDomainStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateDomainStmt and conformance PgQuery_CreateDomainStmt, type metadata accessor for PgQuery_CreateDomainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateDomainStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateDomainStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #87 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t CreatedbStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CreatedbStmt = type metadata accessor for PgQuery_CreatedbStmt(0);
  MEMORY[0x1E0C80A78](CreatedbStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 86)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreatedbStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatedbStmt and conformance PgQuery_CreatedbStmt, type metadata accessor for PgQuery_CreatedbStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatedbStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreatedbStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #88 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t DropdbStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropdbStmt = type metadata accessor for PgQuery_DropdbStmt(0);
  MEMORY[0x1E0C80A78](DropdbStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 87)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DropdbStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropdbStmt and conformance PgQuery_DropdbStmt, type metadata accessor for PgQuery_DropdbStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropdbStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DropdbStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #89 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t VacuumStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  VacuumStmt = type metadata accessor for PgQuery_VacuumStmt(0);
  MEMORY[0x1E0C80A78](VacuumStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 88)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_VacuumStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumStmt and conformance PgQuery_VacuumStmt, type metadata accessor for PgQuery_VacuumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VacuumStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_VacuumStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #90 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ExplainStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ExplainStmt = type metadata accessor for PgQuery_ExplainStmt(0);
  MEMORY[0x1E0C80A78](ExplainStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 89)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ExplainStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExplainStmt and conformance PgQuery_ExplainStmt, type metadata accessor for PgQuery_ExplainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ExplainStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ExplainStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #91 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t TableAsStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TableAsStmt = type metadata accessor for PgQuery_CreateTableAsStmt(0);
  MEMORY[0x1E0C80A78](TableAsStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 90)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateTableAsStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableAsStmt and conformance PgQuery_CreateTableAsStmt, type metadata accessor for PgQuery_CreateTableAsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTableAsStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateTableAsStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #92 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t SeqStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  SeqStmt = type metadata accessor for PgQuery_CreateSeqStmt(0);
  MEMORY[0x1E0C80A78](SeqStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 91)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateSeqStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSeqStmt and conformance PgQuery_CreateSeqStmt, type metadata accessor for PgQuery_CreateSeqStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSeqStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateSeqStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #93 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterSeqStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterSeqStmt = type metadata accessor for PgQuery_AlterSeqStmt(0);
  MEMORY[0x1E0C80A78](AlterSeqStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 92)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterSeqStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSeqStmt and conformance PgQuery_AlterSeqStmt, type metadata accessor for PgQuery_AlterSeqStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSeqStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterSeqStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #94 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t VariableSetStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  MEMORY[0x1E0C80A78](VariableSetStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 93)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_VariableSetStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, type metadata accessor for PgQuery_VariableSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableSetStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_VariableSetStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #95 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t VariableShowStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  VariableShowStmt = type metadata accessor for PgQuery_VariableShowStmt(0);
  MEMORY[0x1E0C80A78](VariableShowStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 94)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_VariableShowStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableShowStmt and conformance PgQuery_VariableShowStmt, type metadata accessor for PgQuery_VariableShowStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableShowStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_VariableShowStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #96 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t DiscardStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DiscardStmt = type metadata accessor for PgQuery_DiscardStmt(0);
  MEMORY[0x1E0C80A78](DiscardStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 95)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DiscardStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DiscardStmt and conformance PgQuery_DiscardStmt, type metadata accessor for PgQuery_DiscardStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DiscardStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DiscardStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #97 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t TrigStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TrigStmt = type metadata accessor for PgQuery_CreateTrigStmt(0);
  MEMORY[0x1E0C80A78](TrigStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 96)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateTrigStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTrigStmt and conformance PgQuery_CreateTrigStmt, type metadata accessor for PgQuery_CreateTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTrigStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateTrigStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #98 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t PLangStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  PLangStmt = type metadata accessor for PgQuery_CreatePLangStmt(0);
  MEMORY[0x1E0C80A78](PLangStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 97)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreatePLangStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePLangStmt and conformance PgQuery_CreatePLangStmt, type metadata accessor for PgQuery_CreatePLangStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePLangStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreatePLangStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #99 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RoleStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RoleStmt = type metadata accessor for PgQuery_CreateRoleStmt(0);
  MEMORY[0x1E0C80A78](RoleStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 98)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateRoleStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRoleStmt and conformance PgQuery_CreateRoleStmt, type metadata accessor for PgQuery_CreateRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateRoleStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateRoleStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #100 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterRoleStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterRoleStmt = type metadata accessor for PgQuery_AlterRoleStmt(0);
  MEMORY[0x1E0C80A78](AlterRoleStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 99)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterRoleStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleStmt and conformance PgQuery_AlterRoleStmt, type metadata accessor for PgQuery_AlterRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterRoleStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterRoleStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #101 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t DropRoleStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropRoleStmt = type metadata accessor for PgQuery_DropRoleStmt(0);
  MEMORY[0x1E0C80A78](DropRoleStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 100)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DropRoleStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropRoleStmt and conformance PgQuery_DropRoleStmt, type metadata accessor for PgQuery_DropRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropRoleStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DropRoleStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #102 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t LockStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  LockStmt = type metadata accessor for PgQuery_LockStmt(0);
  MEMORY[0x1E0C80A78](LockStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 101)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_LockStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockStmt and conformance PgQuery_LockStmt, type metadata accessor for PgQuery_LockStmt, (uint64_t)&protocol conformance descriptor for PgQuery_LockStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_LockStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #103 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ConstraintsSetStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ConstraintsSetStmt = type metadata accessor for PgQuery_ConstraintsSetStmt(0);
  MEMORY[0x1E0C80A78](ConstraintsSetStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 102)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ConstraintsSetStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConstraintsSetStmt and conformance PgQuery_ConstraintsSetStmt, type metadata accessor for PgQuery_ConstraintsSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ConstraintsSetStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ConstraintsSetStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #104 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ReindexStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ReindexStmt = type metadata accessor for PgQuery_ReindexStmt(0);
  MEMORY[0x1E0C80A78](ReindexStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 103)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ReindexStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReindexStmt and conformance PgQuery_ReindexStmt, type metadata accessor for PgQuery_ReindexStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReindexStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ReindexStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #105 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PgQuery_CheckPointStmt(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 104)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CheckPointStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CheckPointStmt and conformance PgQuery_CheckPointStmt, type metadata accessor for PgQuery_CheckPointStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CheckPointStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CheckPointStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #106 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t SchemaStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  SchemaStmt = type metadata accessor for PgQuery_CreateSchemaStmt(0);
  MEMORY[0x1E0C80A78](SchemaStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 105)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateSchemaStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSchemaStmt and conformance PgQuery_CreateSchemaStmt, type metadata accessor for PgQuery_CreateSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSchemaStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateSchemaStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #107 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterDatabaseStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterDatabaseStmt = type metadata accessor for PgQuery_AlterDatabaseStmt(0);
  MEMORY[0x1E0C80A78](AlterDatabaseStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 106)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterDatabaseStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseStmt and conformance PgQuery_AlterDatabaseStmt, type metadata accessor for PgQuery_AlterDatabaseStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDatabaseStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterDatabaseStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #108 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterDatabaseSetStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterDatabaseSetStmt = type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
  MEMORY[0x1E0C80A78](AlterDatabaseSetStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 107)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterDatabaseSetStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseSetStmt and conformance PgQuery_AlterDatabaseSetStmt, type metadata accessor for PgQuery_AlterDatabaseSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDatabaseSetStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterDatabaseSetStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #109 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterRoleSetStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterRoleSetStmt = type metadata accessor for PgQuery_AlterRoleSetStmt(0);
  MEMORY[0x1E0C80A78](AlterRoleSetStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 108)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterRoleSetStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleSetStmt and conformance PgQuery_AlterRoleSetStmt, type metadata accessor for PgQuery_AlterRoleSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterRoleSetStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterRoleSetStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #110 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ConversionStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ConversionStmt = type metadata accessor for PgQuery_CreateConversionStmt(0);
  MEMORY[0x1E0C80A78](ConversionStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 109)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateConversionStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateConversionStmt and conformance PgQuery_CreateConversionStmt, type metadata accessor for PgQuery_CreateConversionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateConversionStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateConversionStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #111 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t CastStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CastStmt = type metadata accessor for PgQuery_CreateCastStmt(0);
  MEMORY[0x1E0C80A78](CastStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 110)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateCastStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateCastStmt and conformance PgQuery_CreateCastStmt, type metadata accessor for PgQuery_CreateCastStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateCastStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateCastStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #112 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t OpClassStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  OpClassStmt = type metadata accessor for PgQuery_CreateOpClassStmt(0);
  MEMORY[0x1E0C80A78](OpClassStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 111)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateOpClassStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassStmt and conformance PgQuery_CreateOpClassStmt, type metadata accessor for PgQuery_CreateOpClassStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpClassStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateOpClassStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #113 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t OpFamilyStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  OpFamilyStmt = type metadata accessor for PgQuery_CreateOpFamilyStmt(0);
  MEMORY[0x1E0C80A78](OpFamilyStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 112)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateOpFamilyStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpFamilyStmt and conformance PgQuery_CreateOpFamilyStmt, type metadata accessor for PgQuery_CreateOpFamilyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpFamilyStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateOpFamilyStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #114 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterOpFamilyStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterOpFamilyStmt = type metadata accessor for PgQuery_AlterOpFamilyStmt(0);
  MEMORY[0x1E0C80A78](AlterOpFamilyStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 113)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterOpFamilyStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOpFamilyStmt and conformance PgQuery_AlterOpFamilyStmt, type metadata accessor for PgQuery_AlterOpFamilyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOpFamilyStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterOpFamilyStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #115 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t PrepareStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  PrepareStmt = type metadata accessor for PgQuery_PrepareStmt(0);
  MEMORY[0x1E0C80A78](PrepareStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 114)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_PrepareStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PrepareStmt and conformance PgQuery_PrepareStmt, type metadata accessor for PgQuery_PrepareStmt, (uint64_t)&protocol conformance descriptor for PgQuery_PrepareStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_PrepareStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #116 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ExecuteStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ExecuteStmt = type metadata accessor for PgQuery_ExecuteStmt(0);
  MEMORY[0x1E0C80A78](ExecuteStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 115)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ExecuteStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExecuteStmt and conformance PgQuery_ExecuteStmt, type metadata accessor for PgQuery_ExecuteStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ExecuteStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ExecuteStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #117 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t DeallocateStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DeallocateStmt = type metadata accessor for PgQuery_DeallocateStmt(0);
  MEMORY[0x1E0C80A78](DeallocateStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 116)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DeallocateStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeallocateStmt and conformance PgQuery_DeallocateStmt, type metadata accessor for PgQuery_DeallocateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeallocateStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DeallocateStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #118 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t DeclareCursorStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DeclareCursorStmt = type metadata accessor for PgQuery_DeclareCursorStmt(0);
  MEMORY[0x1E0C80A78](DeclareCursorStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 117)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DeclareCursorStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeclareCursorStmt and conformance PgQuery_DeclareCursorStmt, type metadata accessor for PgQuery_DeclareCursorStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeclareCursorStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DeclareCursorStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #119 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t TableSpaceStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TableSpaceStmt = type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
  MEMORY[0x1E0C80A78](TableSpaceStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 118)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateTableSpaceStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableSpaceStmt and conformance PgQuery_CreateTableSpaceStmt, type metadata accessor for PgQuery_CreateTableSpaceStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTableSpaceStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateTableSpaceStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #120 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t DropTableSpaceStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropTableSpaceStmt = type metadata accessor for PgQuery_DropTableSpaceStmt(0);
  MEMORY[0x1E0C80A78](DropTableSpaceStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 119)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DropTableSpaceStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropTableSpaceStmt and conformance PgQuery_DropTableSpaceStmt, type metadata accessor for PgQuery_DropTableSpaceStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropTableSpaceStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DropTableSpaceStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #121 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterObjectDependsStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterObjectDependsStmt = type metadata accessor for PgQuery_AlterObjectDependsStmt(0);
  MEMORY[0x1E0C80A78](AlterObjectDependsStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 120)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterObjectDependsStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectDependsStmt and conformance PgQuery_AlterObjectDependsStmt, type metadata accessor for PgQuery_AlterObjectDependsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterObjectDependsStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterObjectDependsStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #122 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterObjectSchemaStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterObjectSchemaStmt = type metadata accessor for PgQuery_AlterObjectSchemaStmt(0);
  MEMORY[0x1E0C80A78](AlterObjectSchemaStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 121)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterObjectSchemaStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectSchemaStmt and conformance PgQuery_AlterObjectSchemaStmt, type metadata accessor for PgQuery_AlterObjectSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterObjectSchemaStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterObjectSchemaStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #123 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterOwnerStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterOwnerStmt = type metadata accessor for PgQuery_AlterOwnerStmt(0);
  MEMORY[0x1E0C80A78](AlterOwnerStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 122)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterOwnerStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOwnerStmt and conformance PgQuery_AlterOwnerStmt, type metadata accessor for PgQuery_AlterOwnerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOwnerStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterOwnerStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #124 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterOperatorStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterOperatorStmt = type metadata accessor for PgQuery_AlterOperatorStmt(0);
  MEMORY[0x1E0C80A78](AlterOperatorStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 123)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterOperatorStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOperatorStmt and conformance PgQuery_AlterOperatorStmt, type metadata accessor for PgQuery_AlterOperatorStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOperatorStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterOperatorStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #125 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterTypeStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTypeStmt = type metadata accessor for PgQuery_AlterTypeStmt(0);
  MEMORY[0x1E0C80A78](AlterTypeStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 124)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterTypeStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTypeStmt and conformance PgQuery_AlterTypeStmt, type metadata accessor for PgQuery_AlterTypeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTypeStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterTypeStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #126 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t DropOwnedStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropOwnedStmt = type metadata accessor for PgQuery_DropOwnedStmt(0);
  MEMORY[0x1E0C80A78](DropOwnedStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 125)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DropOwnedStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropOwnedStmt and conformance PgQuery_DropOwnedStmt, type metadata accessor for PgQuery_DropOwnedStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropOwnedStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DropOwnedStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #127 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ReassignOwnedStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ReassignOwnedStmt = type metadata accessor for PgQuery_ReassignOwnedStmt(0);
  MEMORY[0x1E0C80A78](ReassignOwnedStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 126)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ReassignOwnedStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReassignOwnedStmt and conformance PgQuery_ReassignOwnedStmt, type metadata accessor for PgQuery_ReassignOwnedStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReassignOwnedStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ReassignOwnedStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #128 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t CompositeTypeStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CompositeTypeStmt = type metadata accessor for PgQuery_CompositeTypeStmt(0);
  MEMORY[0x1E0C80A78](CompositeTypeStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 127)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CompositeTypeStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CompositeTypeStmt and conformance PgQuery_CompositeTypeStmt, type metadata accessor for PgQuery_CompositeTypeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CompositeTypeStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CompositeTypeStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #129 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t EnumStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  EnumStmt = type metadata accessor for PgQuery_CreateEnumStmt(0);
  MEMORY[0x1E0C80A78](EnumStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 128)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateEnumStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEnumStmt and conformance PgQuery_CreateEnumStmt, type metadata accessor for PgQuery_CreateEnumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateEnumStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateEnumStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #130 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RangeStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeStmt = type metadata accessor for PgQuery_CreateRangeStmt(0);
  MEMORY[0x1E0C80A78](RangeStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 129)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateRangeStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRangeStmt and conformance PgQuery_CreateRangeStmt, type metadata accessor for PgQuery_CreateRangeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateRangeStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateRangeStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #131 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterEnumStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterEnumStmt = type metadata accessor for PgQuery_AlterEnumStmt(0);
  MEMORY[0x1E0C80A78](AlterEnumStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 130)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterEnumStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEnumStmt and conformance PgQuery_AlterEnumStmt, type metadata accessor for PgQuery_AlterEnumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterEnumStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterEnumStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #132 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterTSDictionaryStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTSDictionaryStmt = type metadata accessor for PgQuery_AlterTSDictionaryStmt(0);
  MEMORY[0x1E0C80A78](AlterTSDictionaryStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 131)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterTSDictionaryStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSDictionaryStmt and conformance PgQuery_AlterTSDictionaryStmt, type metadata accessor for PgQuery_AlterTSDictionaryStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTSDictionaryStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterTSDictionaryStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #133 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterTSConfigurationStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTSConfigurationStmt = type metadata accessor for PgQuery_AlterTSConfigurationStmt(0);
  MEMORY[0x1E0C80A78](AlterTSConfigurationStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 132)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterTSConfigurationStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSConfigurationStmt and conformance PgQuery_AlterTSConfigurationStmt, type metadata accessor for PgQuery_AlterTSConfigurationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTSConfigurationStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterTSConfigurationStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #134 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t FdwStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  FdwStmt = type metadata accessor for PgQuery_CreateFdwStmt(0);
  MEMORY[0x1E0C80A78](FdwStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 133)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateFdwStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFdwStmt and conformance PgQuery_CreateFdwStmt, type metadata accessor for PgQuery_CreateFdwStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateFdwStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateFdwStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #135 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterFdwStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterFdwStmt = type metadata accessor for PgQuery_AlterFdwStmt(0);
  MEMORY[0x1E0C80A78](AlterFdwStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 134)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterFdwStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFdwStmt and conformance PgQuery_AlterFdwStmt, type metadata accessor for PgQuery_AlterFdwStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterFdwStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterFdwStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #136 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ForeignServerStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ForeignServerStmt = type metadata accessor for PgQuery_CreateForeignServerStmt(0);
  MEMORY[0x1E0C80A78](ForeignServerStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 135)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateForeignServerStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignServerStmt and conformance PgQuery_CreateForeignServerStmt, type metadata accessor for PgQuery_CreateForeignServerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateForeignServerStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateForeignServerStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #137 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterForeignServerStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterForeignServerStmt = type metadata accessor for PgQuery_AlterForeignServerStmt(0);
  MEMORY[0x1E0C80A78](AlterForeignServerStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 136)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterForeignServerStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterForeignServerStmt and conformance PgQuery_AlterForeignServerStmt, type metadata accessor for PgQuery_AlterForeignServerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterForeignServerStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterForeignServerStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #138 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t UserMappingStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  UserMappingStmt = type metadata accessor for PgQuery_CreateUserMappingStmt(0);
  MEMORY[0x1E0C80A78](UserMappingStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 137)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateUserMappingStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateUserMappingStmt and conformance PgQuery_CreateUserMappingStmt, type metadata accessor for PgQuery_CreateUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateUserMappingStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateUserMappingStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #139 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterUserMappingStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterUserMappingStmt = type metadata accessor for PgQuery_AlterUserMappingStmt(0);
  MEMORY[0x1E0C80A78](AlterUserMappingStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 138)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterUserMappingStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterUserMappingStmt and conformance PgQuery_AlterUserMappingStmt, type metadata accessor for PgQuery_AlterUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterUserMappingStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterUserMappingStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #140 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t DropUserMappingStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropUserMappingStmt = type metadata accessor for PgQuery_DropUserMappingStmt(0);
  MEMORY[0x1E0C80A78](DropUserMappingStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 139)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DropUserMappingStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropUserMappingStmt and conformance PgQuery_DropUserMappingStmt, type metadata accessor for PgQuery_DropUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropUserMappingStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DropUserMappingStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #141 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterTableSpaceOptionsStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTableSpaceOptionsStmt = type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(0);
  MEMORY[0x1E0C80A78](AlterTableSpaceOptionsStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 140)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableSpaceOptionsStmt and conformance PgQuery_AlterTableSpaceOptionsStmt, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableSpaceOptionsStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #142 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterTableMoveAllStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTableMoveAllStmt = type metadata accessor for PgQuery_AlterTableMoveAllStmt(0);
  MEMORY[0x1E0C80A78](AlterTableMoveAllStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 141)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterTableMoveAllStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableMoveAllStmt and conformance PgQuery_AlterTableMoveAllStmt, type metadata accessor for PgQuery_AlterTableMoveAllStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableMoveAllStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterTableMoveAllStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #143 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t SecLabelStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  SecLabelStmt = type metadata accessor for PgQuery_SecLabelStmt(0);
  MEMORY[0x1E0C80A78](SecLabelStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 142)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SecLabelStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SecLabelStmt and conformance PgQuery_SecLabelStmt, type metadata accessor for PgQuery_SecLabelStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SecLabelStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SecLabelStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #144 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ForeignTableStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ForeignTableStmt = type metadata accessor for PgQuery_CreateForeignTableStmt(0);
  MEMORY[0x1E0C80A78](ForeignTableStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 143)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateForeignTableStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignTableStmt and conformance PgQuery_CreateForeignTableStmt, type metadata accessor for PgQuery_CreateForeignTableStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateForeignTableStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateForeignTableStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #145 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ImportForeignSchemaStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ImportForeignSchemaStmt = type metadata accessor for PgQuery_ImportForeignSchemaStmt(0);
  MEMORY[0x1E0C80A78](ImportForeignSchemaStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 144)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ImportForeignSchemaStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ImportForeignSchemaStmt and conformance PgQuery_ImportForeignSchemaStmt, type metadata accessor for PgQuery_ImportForeignSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ImportForeignSchemaStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ImportForeignSchemaStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #146 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ExtensionStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ExtensionStmt = type metadata accessor for PgQuery_CreateExtensionStmt(0);
  MEMORY[0x1E0C80A78](ExtensionStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 145)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateExtensionStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateExtensionStmt and conformance PgQuery_CreateExtensionStmt, type metadata accessor for PgQuery_CreateExtensionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateExtensionStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateExtensionStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #147 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterExtensionStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterExtensionStmt = type metadata accessor for PgQuery_AlterExtensionStmt(0);
  MEMORY[0x1E0C80A78](AlterExtensionStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 146)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterExtensionStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionStmt and conformance PgQuery_AlterExtensionStmt, type metadata accessor for PgQuery_AlterExtensionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterExtensionStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterExtensionStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #148 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterExtensionContentsStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterExtensionContentsStmt = type metadata accessor for PgQuery_AlterExtensionContentsStmt(0);
  MEMORY[0x1E0C80A78](AlterExtensionContentsStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 147)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterExtensionContentsStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionContentsStmt and conformance PgQuery_AlterExtensionContentsStmt, type metadata accessor for PgQuery_AlterExtensionContentsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterExtensionContentsStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterExtensionContentsStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #149 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t EventTrigStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  EventTrigStmt = type metadata accessor for PgQuery_CreateEventTrigStmt(0);
  MEMORY[0x1E0C80A78](EventTrigStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 148)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateEventTrigStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEventTrigStmt and conformance PgQuery_CreateEventTrigStmt, type metadata accessor for PgQuery_CreateEventTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateEventTrigStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateEventTrigStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #150 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterEventTrigStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterEventTrigStmt = type metadata accessor for PgQuery_AlterEventTrigStmt(0);
  MEMORY[0x1E0C80A78](AlterEventTrigStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 149)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterEventTrigStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEventTrigStmt and conformance PgQuery_AlterEventTrigStmt, type metadata accessor for PgQuery_AlterEventTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterEventTrigStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterEventTrigStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #151 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RefreshMatViewStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RefreshMatViewStmt = type metadata accessor for PgQuery_RefreshMatViewStmt(0);
  MEMORY[0x1E0C80A78](RefreshMatViewStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 150)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RefreshMatViewStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RefreshMatViewStmt and conformance PgQuery_RefreshMatViewStmt, type metadata accessor for PgQuery_RefreshMatViewStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RefreshMatViewStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RefreshMatViewStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #152 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ReplicaIdentityStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ReplicaIdentityStmt = type metadata accessor for PgQuery_ReplicaIdentityStmt(0);
  MEMORY[0x1E0C80A78](ReplicaIdentityStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 151)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ReplicaIdentityStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReplicaIdentityStmt and conformance PgQuery_ReplicaIdentityStmt, type metadata accessor for PgQuery_ReplicaIdentityStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReplicaIdentityStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ReplicaIdentityStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #153 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterSystemStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterSystemStmt = type metadata accessor for PgQuery_AlterSystemStmt(0);
  MEMORY[0x1E0C80A78](AlterSystemStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 152)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterSystemStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSystemStmt and conformance PgQuery_AlterSystemStmt, type metadata accessor for PgQuery_AlterSystemStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSystemStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterSystemStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #154 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t PolicyStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  PolicyStmt = type metadata accessor for PgQuery_CreatePolicyStmt(0);
  MEMORY[0x1E0C80A78](PolicyStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 153)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreatePolicyStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePolicyStmt and conformance PgQuery_CreatePolicyStmt, type metadata accessor for PgQuery_CreatePolicyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePolicyStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreatePolicyStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #155 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterPolicyStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterPolicyStmt = type metadata accessor for PgQuery_AlterPolicyStmt(0);
  MEMORY[0x1E0C80A78](AlterPolicyStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 154)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterPolicyStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPolicyStmt and conformance PgQuery_AlterPolicyStmt, type metadata accessor for PgQuery_AlterPolicyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterPolicyStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterPolicyStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #156 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t TransformStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TransformStmt = type metadata accessor for PgQuery_CreateTransformStmt(0);
  MEMORY[0x1E0C80A78](TransformStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 155)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateTransformStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTransformStmt and conformance PgQuery_CreateTransformStmt, type metadata accessor for PgQuery_CreateTransformStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTransformStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateTransformStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #157 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AmStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AmStmt = type metadata accessor for PgQuery_CreateAmStmt(0);
  MEMORY[0x1E0C80A78](AmStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 156)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateAmStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateAmStmt and conformance PgQuery_CreateAmStmt, type metadata accessor for PgQuery_CreateAmStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateAmStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateAmStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #158 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t PublicationStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  PublicationStmt = type metadata accessor for PgQuery_CreatePublicationStmt(0);
  MEMORY[0x1E0C80A78](PublicationStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 157)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreatePublicationStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePublicationStmt and conformance PgQuery_CreatePublicationStmt, type metadata accessor for PgQuery_CreatePublicationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePublicationStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreatePublicationStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #159 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterPublicationStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterPublicationStmt = type metadata accessor for PgQuery_AlterPublicationStmt(0);
  MEMORY[0x1E0C80A78](AlterPublicationStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 158)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterPublicationStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPublicationStmt and conformance PgQuery_AlterPublicationStmt, type metadata accessor for PgQuery_AlterPublicationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterPublicationStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterPublicationStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #160 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t SubscriptionStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  SubscriptionStmt = type metadata accessor for PgQuery_CreateSubscriptionStmt(0);
  MEMORY[0x1E0C80A78](SubscriptionStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 159)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateSubscriptionStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSubscriptionStmt and conformance PgQuery_CreateSubscriptionStmt, type metadata accessor for PgQuery_CreateSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSubscriptionStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateSubscriptionStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #161 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterSubscriptionStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterSubscriptionStmt = type metadata accessor for PgQuery_AlterSubscriptionStmt(0);
  MEMORY[0x1E0C80A78](AlterSubscriptionStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 160)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterSubscriptionStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSubscriptionStmt and conformance PgQuery_AlterSubscriptionStmt, type metadata accessor for PgQuery_AlterSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSubscriptionStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterSubscriptionStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #162 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t DropSubscriptionStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropSubscriptionStmt = type metadata accessor for PgQuery_DropSubscriptionStmt(0);
  MEMORY[0x1E0C80A78](DropSubscriptionStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 161)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DropSubscriptionStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropSubscriptionStmt and conformance PgQuery_DropSubscriptionStmt, type metadata accessor for PgQuery_DropSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropSubscriptionStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DropSubscriptionStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #163 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t StatsStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  StatsStmt = type metadata accessor for PgQuery_CreateStatsStmt(0);
  MEMORY[0x1E0C80A78](StatsStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 162)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateStatsStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStatsStmt and conformance PgQuery_CreateStatsStmt, type metadata accessor for PgQuery_CreateStatsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStatsStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateStatsStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #164 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterCollationStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterCollationStmt = type metadata accessor for PgQuery_AlterCollationStmt(0);
  MEMORY[0x1E0C80A78](AlterCollationStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 163)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterCollationStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterCollationStmt and conformance PgQuery_AlterCollationStmt, type metadata accessor for PgQuery_AlterCollationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterCollationStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterCollationStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #165 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PgQuery_CallStmt(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 164)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CallStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallStmt and conformance PgQuery_CallStmt, type metadata accessor for PgQuery_CallStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CallStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CallStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #166 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AlterStatsStmt;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterStatsStmt = type metadata accessor for PgQuery_AlterStatsStmt(0);
  MEMORY[0x1E0C80A78](AlterStatsStmt);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 165)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterStatsStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterStatsStmt and conformance PgQuery_AlterStatsStmt, type metadata accessor for PgQuery_AlterStatsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterStatsStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterStatsStmt);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #167 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t A_Expr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  A_Expr = type metadata accessor for PgQuery_A_Expr(0);
  MEMORY[0x1E0C80A78](A_Expr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 166)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_A_Expr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Expr and conformance PgQuery_A_Expr, type metadata accessor for PgQuery_A_Expr, (uint64_t)&protocol conformance descriptor for PgQuery_A_Expr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_A_Expr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #168 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ColumnRef;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ColumnRef = type metadata accessor for PgQuery_ColumnRef(0);
  MEMORY[0x1E0C80A78](ColumnRef);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 167)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ColumnRef);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnRef and conformance PgQuery_ColumnRef, type metadata accessor for PgQuery_ColumnRef, (uint64_t)&protocol conformance descriptor for PgQuery_ColumnRef);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ColumnRef);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #169 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ParamRef;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParamRef = type metadata accessor for PgQuery_ParamRef(0);
  MEMORY[0x1E0C80A78](ParamRef);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 168)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ParamRef);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParamRef and conformance PgQuery_ParamRef, type metadata accessor for PgQuery_ParamRef, (uint64_t)&protocol conformance descriptor for PgQuery_ParamRef);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ParamRef);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #170 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t A_Const;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  A_Const = type metadata accessor for PgQuery_A_Const(0);
  MEMORY[0x1E0C80A78](A_Const);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 169)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_A_Const);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Const and conformance PgQuery_A_Const, type metadata accessor for PgQuery_A_Const, (uint64_t)&protocol conformance descriptor for PgQuery_A_Const);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_A_Const);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #171 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PgQuery_FuncCall(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 170)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_FuncCall);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, type metadata accessor for PgQuery_FuncCall, (uint64_t)&protocol conformance descriptor for PgQuery_FuncCall);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_FuncCall);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #172 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t A_Star;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  A_Star = type metadata accessor for PgQuery_A_Star(0);
  MEMORY[0x1E0C80A78](A_Star);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 171)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_A_Star);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Star and conformance PgQuery_A_Star, type metadata accessor for PgQuery_A_Star, (uint64_t)&protocol conformance descriptor for PgQuery_A_Star);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_A_Star);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #173 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t A_Indices;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  A_Indices = type metadata accessor for PgQuery_A_Indices(0);
  MEMORY[0x1E0C80A78](A_Indices);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 172)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_A_Indices);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indices and conformance PgQuery_A_Indices, type metadata accessor for PgQuery_A_Indices, (uint64_t)&protocol conformance descriptor for PgQuery_A_Indices);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_A_Indices);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #174 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t A_Indirection;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  A_Indirection = type metadata accessor for PgQuery_A_Indirection(0);
  MEMORY[0x1E0C80A78](A_Indirection);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 173)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_A_Indirection);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indirection and conformance PgQuery_A_Indirection, type metadata accessor for PgQuery_A_Indirection, (uint64_t)&protocol conformance descriptor for PgQuery_A_Indirection);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_A_Indirection);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #175 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t A_ArrayExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  A_ArrayExpr = type metadata accessor for PgQuery_A_ArrayExpr(0);
  MEMORY[0x1E0C80A78](A_ArrayExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 174)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_A_ArrayExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_ArrayExpr and conformance PgQuery_A_ArrayExpr, type metadata accessor for PgQuery_A_ArrayExpr, (uint64_t)&protocol conformance descriptor for PgQuery_A_ArrayExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_A_ArrayExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #176 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ResTarget;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ResTarget = type metadata accessor for PgQuery_ResTarget(0);
  MEMORY[0x1E0C80A78](ResTarget);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 175)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ResTarget);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ResTarget and conformance PgQuery_ResTarget, type metadata accessor for PgQuery_ResTarget, (uint64_t)&protocol conformance descriptor for PgQuery_ResTarget);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ResTarget);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #177 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t MultiAssignRef;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MultiAssignRef = type metadata accessor for PgQuery_MultiAssignRef(0);
  MEMORY[0x1E0C80A78](MultiAssignRef);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 176)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_MultiAssignRef);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MultiAssignRef and conformance PgQuery_MultiAssignRef, type metadata accessor for PgQuery_MultiAssignRef, (uint64_t)&protocol conformance descriptor for PgQuery_MultiAssignRef);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_MultiAssignRef);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #178 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t TypeCast;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TypeCast = type metadata accessor for PgQuery_TypeCast(0);
  MEMORY[0x1E0C80A78](TypeCast);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 177)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_TypeCast);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeCast and conformance PgQuery_TypeCast, type metadata accessor for PgQuery_TypeCast, (uint64_t)&protocol conformance descriptor for PgQuery_TypeCast);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_TypeCast);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #179 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t CollateClause;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  MEMORY[0x1E0C80A78](CollateClause);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 178)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CollateClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, type metadata accessor for PgQuery_CollateClause, (uint64_t)&protocol conformance descriptor for PgQuery_CollateClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CollateClause);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #180 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t SortBy;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  SortBy = type metadata accessor for PgQuery_SortBy(0);
  MEMORY[0x1E0C80A78](SortBy);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 179)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SortBy);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortBy and conformance PgQuery_SortBy, type metadata accessor for PgQuery_SortBy, (uint64_t)&protocol conformance descriptor for PgQuery_SortBy);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SortBy);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #181 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t WindowDef;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  WindowDef = type metadata accessor for PgQuery_WindowDef(0);
  MEMORY[0x1E0C80A78](WindowDef);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 180)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_WindowDef);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, type metadata accessor for PgQuery_WindowDef, (uint64_t)&protocol conformance descriptor for PgQuery_WindowDef);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_WindowDef);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #182 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RangeSubselect;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeSubselect = type metadata accessor for PgQuery_RangeSubselect(0);
  MEMORY[0x1E0C80A78](RangeSubselect);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 181)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RangeSubselect);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeSubselect and conformance PgQuery_RangeSubselect, type metadata accessor for PgQuery_RangeSubselect, (uint64_t)&protocol conformance descriptor for PgQuery_RangeSubselect);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RangeSubselect);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #183 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RangeFunction;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeFunction = type metadata accessor for PgQuery_RangeFunction(0);
  MEMORY[0x1E0C80A78](RangeFunction);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 182)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RangeFunction);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeFunction and conformance PgQuery_RangeFunction, type metadata accessor for PgQuery_RangeFunction, (uint64_t)&protocol conformance descriptor for PgQuery_RangeFunction);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RangeFunction);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #184 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RangeTableSample;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeTableSample = type metadata accessor for PgQuery_RangeTableSample(0);
  MEMORY[0x1E0C80A78](RangeTableSample);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 183)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RangeTableSample);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableSample and conformance PgQuery_RangeTableSample, type metadata accessor for PgQuery_RangeTableSample, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableSample);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RangeTableSample);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #185 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RangeTableFunc;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeTableFunc = type metadata accessor for PgQuery_RangeTableFunc(0);
  MEMORY[0x1E0C80A78](RangeTableFunc);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 184)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RangeTableFunc);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFunc and conformance PgQuery_RangeTableFunc, type metadata accessor for PgQuery_RangeTableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableFunc);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RangeTableFunc);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #186 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RangeTableFuncCol;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeTableFuncCol = type metadata accessor for PgQuery_RangeTableFuncCol(0);
  MEMORY[0x1E0C80A78](RangeTableFuncCol);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 185)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RangeTableFuncCol);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFuncCol and conformance PgQuery_RangeTableFuncCol, type metadata accessor for PgQuery_RangeTableFuncCol, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableFuncCol);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RangeTableFuncCol);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #187 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t TypeName;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  MEMORY[0x1E0C80A78](TypeName);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 186)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_TypeName);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #188 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ColumnDef;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ColumnDef = type metadata accessor for PgQuery_ColumnDef(0);
  MEMORY[0x1E0C80A78](ColumnDef);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 187)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ColumnDef);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnDef and conformance PgQuery_ColumnDef, type metadata accessor for PgQuery_ColumnDef, (uint64_t)&protocol conformance descriptor for PgQuery_ColumnDef);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ColumnDef);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #189 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t IndexElem;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  IndexElem = type metadata accessor for PgQuery_IndexElem(0);
  MEMORY[0x1E0C80A78](IndexElem);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 188)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_IndexElem);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexElem and conformance PgQuery_IndexElem, type metadata accessor for PgQuery_IndexElem, (uint64_t)&protocol conformance descriptor for PgQuery_IndexElem);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_IndexElem);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #190 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Constraint;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Constraint = type metadata accessor for PgQuery_Constraint(0);
  MEMORY[0x1E0C80A78](Constraint);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 189)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Constraint);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Constraint and conformance PgQuery_Constraint, type metadata accessor for PgQuery_Constraint, (uint64_t)&protocol conformance descriptor for PgQuery_Constraint);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Constraint);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #191 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t DefElem;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DefElem = type metadata accessor for PgQuery_DefElem(0);
  MEMORY[0x1E0C80A78](DefElem);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 190)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DefElem);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefElem and conformance PgQuery_DefElem, type metadata accessor for PgQuery_DefElem, (uint64_t)&protocol conformance descriptor for PgQuery_DefElem);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DefElem);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #192 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RangeTblEntry;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeTblEntry = type metadata accessor for PgQuery_RangeTblEntry(0);
  MEMORY[0x1E0C80A78](RangeTblEntry);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 191)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RangeTblEntry);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblEntry and conformance PgQuery_RangeTblEntry, type metadata accessor for PgQuery_RangeTblEntry, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblEntry);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RangeTblEntry);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #193 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RangeTblFunction;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeTblFunction = type metadata accessor for PgQuery_RangeTblFunction(0);
  MEMORY[0x1E0C80A78](RangeTblFunction);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 192)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RangeTblFunction);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblFunction and conformance PgQuery_RangeTblFunction, type metadata accessor for PgQuery_RangeTblFunction, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblFunction);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RangeTblFunction);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #194 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t TableSampleClause;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
  MEMORY[0x1E0C80A78](TableSampleClause);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 193)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_TableSampleClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, type metadata accessor for PgQuery_TableSampleClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableSampleClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_TableSampleClause);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #195 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PgQuery_WithCheckOption(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 194)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_WithCheckOption);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithCheckOption and conformance PgQuery_WithCheckOption, type metadata accessor for PgQuery_WithCheckOption, (uint64_t)&protocol conformance descriptor for PgQuery_WithCheckOption);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_WithCheckOption);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #196 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t SortGroupClause;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  SortGroupClause = type metadata accessor for PgQuery_SortGroupClause(0);
  MEMORY[0x1E0C80A78](SortGroupClause);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 195)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SortGroupClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortGroupClause and conformance PgQuery_SortGroupClause, type metadata accessor for PgQuery_SortGroupClause, (uint64_t)&protocol conformance descriptor for PgQuery_SortGroupClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SortGroupClause);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #197 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t GroupingSet;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  GroupingSet = type metadata accessor for PgQuery_GroupingSet(0);
  MEMORY[0x1E0C80A78](GroupingSet);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 196)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_GroupingSet);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingSet and conformance PgQuery_GroupingSet, type metadata accessor for PgQuery_GroupingSet, (uint64_t)&protocol conformance descriptor for PgQuery_GroupingSet);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_GroupingSet);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #198 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t WindowClause;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  WindowClause = type metadata accessor for PgQuery_WindowClause(0);
  MEMORY[0x1E0C80A78](WindowClause);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 197)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_WindowClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowClause and conformance PgQuery_WindowClause, type metadata accessor for PgQuery_WindowClause, (uint64_t)&protocol conformance descriptor for PgQuery_WindowClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_WindowClause);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #199 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ObjectWithArgs;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  MEMORY[0x1E0C80A78](ObjectWithArgs);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 198)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ObjectWithArgs);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, type metadata accessor for PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ObjectWithArgs);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #200 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AccessPriv;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AccessPriv = type metadata accessor for PgQuery_AccessPriv(0);
  MEMORY[0x1E0C80A78](AccessPriv);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 199)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AccessPriv);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AccessPriv and conformance PgQuery_AccessPriv, type metadata accessor for PgQuery_AccessPriv, (uint64_t)&protocol conformance descriptor for PgQuery_AccessPriv);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AccessPriv);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #201 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t OpClassItem;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  OpClassItem = type metadata accessor for PgQuery_CreateOpClassItem(0);
  MEMORY[0x1E0C80A78](OpClassItem);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 200)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateOpClassItem);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassItem and conformance PgQuery_CreateOpClassItem, type metadata accessor for PgQuery_CreateOpClassItem, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpClassItem);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateOpClassItem);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #202 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t TableLikeClause;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TableLikeClause = type metadata accessor for PgQuery_TableLikeClause(0);
  MEMORY[0x1E0C80A78](TableLikeClause);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 201)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_TableLikeClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableLikeClause and conformance PgQuery_TableLikeClause, type metadata accessor for PgQuery_TableLikeClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableLikeClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_TableLikeClause);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #203 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t FunctionParameter;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  FunctionParameter = type metadata accessor for PgQuery_FunctionParameter(0);
  MEMORY[0x1E0C80A78](FunctionParameter);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 202)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_FunctionParameter);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FunctionParameter and conformance PgQuery_FunctionParameter, type metadata accessor for PgQuery_FunctionParameter, (uint64_t)&protocol conformance descriptor for PgQuery_FunctionParameter);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_FunctionParameter);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #204 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t LockingClause;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  LockingClause = type metadata accessor for PgQuery_LockingClause(0);
  MEMORY[0x1E0C80A78](LockingClause);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 203)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_LockingClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockingClause and conformance PgQuery_LockingClause, type metadata accessor for PgQuery_LockingClause, (uint64_t)&protocol conformance descriptor for PgQuery_LockingClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_LockingClause);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #205 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RowMarkClause;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RowMarkClause = type metadata accessor for PgQuery_RowMarkClause(0);
  MEMORY[0x1E0C80A78](RowMarkClause);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 204)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RowMarkClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowMarkClause and conformance PgQuery_RowMarkClause, type metadata accessor for PgQuery_RowMarkClause, (uint64_t)&protocol conformance descriptor for PgQuery_RowMarkClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RowMarkClause);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #206 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t XmlSerialize;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  XmlSerialize = type metadata accessor for PgQuery_XmlSerialize(0);
  MEMORY[0x1E0C80A78](XmlSerialize);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 205)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_XmlSerialize);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlSerialize and conformance PgQuery_XmlSerialize, type metadata accessor for PgQuery_XmlSerialize, (uint64_t)&protocol conformance descriptor for PgQuery_XmlSerialize);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_XmlSerialize);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #207 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PgQuery_WithClause(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 206)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_WithClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, type metadata accessor for PgQuery_WithClause, (uint64_t)&protocol conformance descriptor for PgQuery_WithClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_WithClause);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #208 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t InferClause;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  InferClause = type metadata accessor for PgQuery_InferClause(0);
  MEMORY[0x1E0C80A78](InferClause);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 207)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_InferClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, type metadata accessor for PgQuery_InferClause, (uint64_t)&protocol conformance descriptor for PgQuery_InferClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_InferClause);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #209 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PgQuery_OnConflictClause(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 208)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_OnConflictClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, type metadata accessor for PgQuery_OnConflictClause, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_OnConflictClause);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #210 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t CommonTableExpr;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CommonTableExpr = type metadata accessor for PgQuery_CommonTableExpr(0);
  MEMORY[0x1E0C80A78](CommonTableExpr);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 209)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CommonTableExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommonTableExpr and conformance PgQuery_CommonTableExpr, type metadata accessor for PgQuery_CommonTableExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CommonTableExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CommonTableExpr);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #211 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RoleSpec;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  MEMORY[0x1E0C80A78](RoleSpec);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 210)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RoleSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RoleSpec);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #212 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t TriggerTransition;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TriggerTransition = type metadata accessor for PgQuery_TriggerTransition(0);
  MEMORY[0x1E0C80A78](TriggerTransition);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 211)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_TriggerTransition);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TriggerTransition and conformance PgQuery_TriggerTransition, type metadata accessor for PgQuery_TriggerTransition, (uint64_t)&protocol conformance descriptor for PgQuery_TriggerTransition);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_TriggerTransition);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #213 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t PartitionElem;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  PartitionElem = type metadata accessor for PgQuery_PartitionElem(0);
  MEMORY[0x1E0C80A78](PartitionElem);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 212)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_PartitionElem);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionElem and conformance PgQuery_PartitionElem, type metadata accessor for PgQuery_PartitionElem, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionElem);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_PartitionElem);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #214 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t PartitionSpec;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  PartitionSpec = type metadata accessor for PgQuery_PartitionSpec(0);
  MEMORY[0x1E0C80A78](PartitionSpec);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 213)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_PartitionSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, type metadata accessor for PgQuery_PartitionSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_PartitionSpec);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #215 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t PartitionBoundSpec;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  MEMORY[0x1E0C80A78](PartitionBoundSpec);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 214)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_PartitionBoundSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, type metadata accessor for PgQuery_PartitionBoundSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionBoundSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_PartitionBoundSpec);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #216 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t PartitionRangeDatum;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  PartitionRangeDatum = type metadata accessor for PgQuery_PartitionRangeDatum(0);
  MEMORY[0x1E0C80A78](PartitionRangeDatum);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 215)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_PartitionRangeDatum);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatum and conformance PgQuery_PartitionRangeDatum, type metadata accessor for PgQuery_PartitionRangeDatum, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionRangeDatum);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_PartitionRangeDatum);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #217 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t PartitionCmd;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  PartitionCmd = type metadata accessor for PgQuery_PartitionCmd(0);
  MEMORY[0x1E0C80A78](PartitionCmd);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 216)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_PartitionCmd);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionCmd and conformance PgQuery_PartitionCmd, type metadata accessor for PgQuery_PartitionCmd, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionCmd);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_PartitionCmd);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #218 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t VacuumRelation;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  VacuumRelation = type metadata accessor for PgQuery_VacuumRelation(0);
  MEMORY[0x1E0C80A78](VacuumRelation);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 217)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_VacuumRelation);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumRelation and conformance PgQuery_VacuumRelation, type metadata accessor for PgQuery_VacuumRelation, (uint64_t)&protocol conformance descriptor for PgQuery_VacuumRelation);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_VacuumRelation);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #219 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t InlineCodeBlock;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  InlineCodeBlock = type metadata accessor for PgQuery_InlineCodeBlock(0);
  MEMORY[0x1E0C80A78](InlineCodeBlock);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 218)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_InlineCodeBlock);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InlineCodeBlock and conformance PgQuery_InlineCodeBlock, type metadata accessor for PgQuery_InlineCodeBlock, (uint64_t)&protocol conformance descriptor for PgQuery_InlineCodeBlock);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_InlineCodeBlock);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #220 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PgQuery_CallContext(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 219)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CallContext);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallContext and conformance PgQuery_CallContext, type metadata accessor for PgQuery_CallContext, (uint64_t)&protocol conformance descriptor for PgQuery_CallContext);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CallContext);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #221 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Integer;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Integer = type metadata accessor for PgQuery_Integer(0);
  MEMORY[0x1E0C80A78](Integer);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 220)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Integer);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Integer and conformance PgQuery_Integer, type metadata accessor for PgQuery_Integer, (uint64_t)&protocol conformance descriptor for PgQuery_Integer);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Integer);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #222 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Float;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Float = type metadata accessor for PgQuery_Float(0);
  MEMORY[0x1E0C80A78](Float);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 221)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Float);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Float and conformance PgQuery_Float, type metadata accessor for PgQuery_Float, (uint64_t)&protocol conformance descriptor for PgQuery_Float);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Float);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #223 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t String;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  String = type metadata accessor for PgQuery_String(0);
  MEMORY[0x1E0C80A78](String);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 222)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_String);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_String and conformance PgQuery_String, type metadata accessor for PgQuery_String, (uint64_t)&protocol conformance descriptor for PgQuery_String);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_String);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #224 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t BitString;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  BitString = type metadata accessor for PgQuery_BitString(0);
  MEMORY[0x1E0C80A78](BitString);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 223)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_BitString);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BitString and conformance PgQuery_BitString, type metadata accessor for PgQuery_BitString, (uint64_t)&protocol conformance descriptor for PgQuery_BitString);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_BitString);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #225 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Null;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Null = type metadata accessor for PgQuery_Null(0);
  MEMORY[0x1E0C80A78](Null);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 224)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Null);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Null and conformance PgQuery_Null, type metadata accessor for PgQuery_Null, (uint64_t)&protocol conformance descriptor for PgQuery_Null);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Null);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #226 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t List;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  List = type metadata accessor for PgQuery_List(0);
  MEMORY[0x1E0C80A78](List);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 225)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_List);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_List and conformance PgQuery_List, type metadata accessor for PgQuery_List, (uint64_t)&protocol conformance descriptor for PgQuery_List);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_List);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #227 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t IntList;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  IntList = type metadata accessor for PgQuery_IntList(0);
  MEMORY[0x1E0C80A78](IntList);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 226)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_IntList);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntList and conformance PgQuery_IntList, type metadata accessor for PgQuery_IntList, (uint64_t)&protocol conformance descriptor for PgQuery_IntList);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_IntList);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #228 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t OidList;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  OidList = type metadata accessor for PgQuery_OidList(0);
  MEMORY[0x1E0C80A78](OidList);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 227)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_OidList);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OidList and conformance PgQuery_OidList, type metadata accessor for PgQuery_OidList, (uint64_t)&protocol conformance descriptor for PgQuery_OidList);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_OidList);
  }
  result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t static PgQuery_Node.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:)) & 1;
}

BOOL closure #1 in static PgQuery_Node.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  char v19;
  uint64_t v21;

  v4 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node.OneOf_Node?, PgQuery_Node.OneOf_Node?));
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  v16 = a2 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  v17 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of PgQuery_Alias?(v15, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  outlined init with copy of PgQuery_Alias?(v16, v17, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v18((uint64_t)v14, 1, v4) == 1)
  {
    if (v18(v17, 1, v4) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
      return 1;
    }
    goto LABEL_6;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  if (v18(v17, 1, v4) == 1)
  {
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node.OneOf_Node);
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_Node.OneOf_Node?, PgQuery_Node.OneOf_Node?));
    return 0;
  }
  outlined init with take of PgQuery_OidList(v17, (uint64_t)v7, type metadata accessor for PgQuery_Node.OneOf_Node);
  v19 = specialized static PgQuery_Node.OneOf_Node.== infix(_:_:)(v10, v7);
  outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node.OneOf_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node.OneOf_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  return (v19 & 1) != 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Node@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_Node._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Node()
{
  return 0x79726575715F6770;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PgQuery_Node())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_Node(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Node()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Node@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Node._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Node()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Node()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  return Message.hash(into:)();
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1)
{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_Integer._protobuf_nameMap, (uint64_t)"ival", 4);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_Float._protobuf_nameMap, (uint64_t)"str", 3);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_String._protobuf_nameMap, (uint64_t)"str", 3);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_BitString._protobuf_nameMap, (uint64_t)"str", 3);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_Null._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_List._protobuf_nameMap, (uint64_t)"items", 5);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_OidList._protobuf_nameMap, (uint64_t)"items", 5);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_IntList._protobuf_nameMap, (uint64_t)"items", 5);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_Expr._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_CoerceToDomainValue._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_SetToDefault._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_RangeTblRef._protobuf_nameMap, (uint64_t)"rtindex", 7);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_ClosePortalStmt._protobuf_nameMap, (uint64_t)"portalname", 10);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_DoStmt._protobuf_nameMap, (uint64_t)"args", 4);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_ListenStmt._protobuf_nameMap, (uint64_t)"conditionname", 13);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_UnlistenStmt._protobuf_nameMap, (uint64_t)"conditionname", 13);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_LoadStmt._protobuf_nameMap, (uint64_t)"filename", 8);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_VariableShowStmt._protobuf_nameMap, (uint64_t)"name", 4);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_DiscardStmt._protobuf_nameMap, (uint64_t)"target", 6);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_CheckPointStmt._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_DeallocateStmt._protobuf_nameMap, (uint64_t)"name", 4);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_AlterTypeStmt._protobuf_nameMap, (uint64_t)"options", 7);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_CreateEnumStmt._protobuf_nameMap, (uint64_t)"vals", 4);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_CreateRangeStmt._protobuf_nameMap, (uint64_t)"params", 6);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_AlterSystemStmt._protobuf_nameMap, (uint64_t)"setstmt", 7);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_AlterCollationStmt._protobuf_nameMap, (uint64_t)"collname", 8);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_A_Star._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_CallContext._protobuf_nameMap, (uint64_t)"atomic", 6);
}

uint64_t PgQuery_Integer.decodeMessage<A>(decoder:)()
{
  return PgQuery_Integer.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
  }
  return result;
}

uint64_t PgQuery_Integer.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Integer.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_Integer);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Integer@<X0>(_DWORD *a1@<X8>)
{
  *a1 = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Integer()
{
  return 0xD000000000000010;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PgQuery_Integer())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Integer()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Integer and conformance PgQuery_Integer, type metadata accessor for PgQuery_Integer, (uint64_t)&protocol conformance descriptor for PgQuery_Integer);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Integer@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Integer._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Integer()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Integer and conformance PgQuery_Integer, type metadata accessor for PgQuery_Integer, (uint64_t)&protocol conformance descriptor for PgQuery_Integer);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Integer()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Integer and conformance PgQuery_Integer, type metadata accessor for PgQuery_Integer, (uint64_t)&protocol conformance descriptor for PgQuery_Integer);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_Integer(_DWORD *a1, char *a2)
{
  return specialized static PgQuery_RangeTblRef.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_Integer) & 1;
}

uint64_t PgQuery_Float.decodeMessage<A>(decoder:)()
{
  return PgQuery_Float.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
  }
  return result;
}

uint64_t PgQuery_Float.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Float.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_Float);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Float@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Float()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Float()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Float and conformance PgQuery_Float, type metadata accessor for PgQuery_Float, (uint64_t)&protocol conformance descriptor for PgQuery_Float);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Float@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Float._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Float()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Float and conformance PgQuery_Float, type metadata accessor for PgQuery_Float, (uint64_t)&protocol conformance descriptor for PgQuery_Float);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Float()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Float and conformance PgQuery_Float, type metadata accessor for PgQuery_Float, (uint64_t)&protocol conformance descriptor for PgQuery_Float);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_Float(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_VariableShowStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_Float) & 1;
}

uint64_t PgQuery_String.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Float.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_String);
}

uint64_t PgQuery_Float.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = v4[1];
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = *v4 & 0xFFFFFFFFFFFFLL;
  if (!v8 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    a4(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_String()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_String()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_String and conformance PgQuery_String, type metadata accessor for PgQuery_String, (uint64_t)&protocol conformance descriptor for PgQuery_String);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_String@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_String._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_String()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_String and conformance PgQuery_String, type metadata accessor for PgQuery_String, (uint64_t)&protocol conformance descriptor for PgQuery_String);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_String()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_String and conformance PgQuery_String, type metadata accessor for PgQuery_String, (uint64_t)&protocol conformance descriptor for PgQuery_String);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_String(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_VariableShowStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_String) & 1;
}

uint64_t PgQuery_BitString.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Float.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_BitString);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_BitString()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_BitString()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BitString and conformance PgQuery_BitString, type metadata accessor for PgQuery_BitString, (uint64_t)&protocol conformance descriptor for PgQuery_BitString);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_BitString@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_BitString._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_BitString()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BitString and conformance PgQuery_BitString, type metadata accessor for PgQuery_BitString, (uint64_t)&protocol conformance descriptor for PgQuery_BitString);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_BitString()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BitString and conformance PgQuery_BitString, type metadata accessor for PgQuery_BitString, (uint64_t)&protocol conformance descriptor for PgQuery_BitString);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_BitString(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_VariableShowStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_BitString) & 1;
}

uint64_t PgQuery_Null.decodeMessage<A>(decoder:)()
{
  return PgQuery_Null.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  do
    result = dispatch thunk of Decoder.nextFieldNumber()();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Null()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_Null()
{
  return PgQuery_Expr.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Null()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Null and conformance PgQuery_Null, type metadata accessor for PgQuery_Null, (uint64_t)&protocol conformance descriptor for PgQuery_Null);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Null@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Null._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Null()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Null and conformance PgQuery_Null, type metadata accessor for PgQuery_Null, (uint64_t)&protocol conformance descriptor for PgQuery_Null);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Null()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Null and conformance PgQuery_Null, type metadata accessor for PgQuery_Null, (uint64_t)&protocol conformance descriptor for PgQuery_Null);
  return Message.hash(into:)();
}

uint64_t PgQuery_List.decodeMessage<A>(decoder:)()
{
  return PgQuery_List.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_List.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_List.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_List);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_List@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9D8];
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_List()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_List()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_List and conformance PgQuery_List, type metadata accessor for PgQuery_List, (uint64_t)&protocol conformance descriptor for PgQuery_List);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_List@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_List._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_List()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_List and conformance PgQuery_List, type metadata accessor for PgQuery_List, (uint64_t)&protocol conformance descriptor for PgQuery_List);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_List()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_List and conformance PgQuery_List, type metadata accessor for PgQuery_List, (uint64_t)&protocol conformance descriptor for PgQuery_List);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_List(uint64_t *a1, uint64_t *a2)
{
  return specialized static PgQuery_AlterCollationStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_List) & 1;
}

uint64_t PgQuery_OidList.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_List.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_OidList);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_OidList()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_OidList()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OidList and conformance PgQuery_OidList, type metadata accessor for PgQuery_OidList, (uint64_t)&protocol conformance descriptor for PgQuery_OidList);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OidList@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_OidList._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_OidList()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OidList and conformance PgQuery_OidList, type metadata accessor for PgQuery_OidList, (uint64_t)&protocol conformance descriptor for PgQuery_OidList);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_OidList()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OidList and conformance PgQuery_OidList, type metadata accessor for PgQuery_OidList, (uint64_t)&protocol conformance descriptor for PgQuery_OidList);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_OidList(uint64_t *a1, uint64_t *a2)
{
  return specialized static PgQuery_AlterCollationStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_OidList) & 1;
}

uint64_t PgQuery_IntList.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_List.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_IntList);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_IntList()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_IntList()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntList and conformance PgQuery_IntList, type metadata accessor for PgQuery_IntList, (uint64_t)&protocol conformance descriptor for PgQuery_IntList);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_IntList@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_IntList._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_IntList()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntList and conformance PgQuery_IntList, type metadata accessor for PgQuery_IntList, (uint64_t)&protocol conformance descriptor for PgQuery_IntList);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_IntList()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntList and conformance PgQuery_IntList, type metadata accessor for PgQuery_IntList, (uint64_t)&protocol conformance descriptor for PgQuery_IntList);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_IntList(uint64_t *a1, uint64_t *a2)
{
  return specialized static PgQuery_AlterCollationStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_IntList) & 1;
}

uint64_t PgQuery_Alias.decodeMessage<A>(decoder:)()
{
  return PgQuery_Alias.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_Alias.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Alias.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_Alias);
}

uint64_t static PgQuery_Alias.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_Alias) & 1;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Alias@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Alias(0, 0xE000000000000000, MEMORY[0x1E0DEE9D8], a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Alias()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Alias()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Alias@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Alias._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Alias()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Alias()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
  return Message.hash(into:)();
}

uint64_t PgQuery_RangeVar.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 5:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 6:
          type metadata accessor for PgQuery_RangeVar(0);
          type metadata accessor for PgQuery_Alias(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RangeVar.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Alias;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t RangeVar;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Alias = type metadata accessor for PgQuery_Alias(0);
  v6 = *(_QWORD *)(Alias - 8);
  MEMORY[0x1E0C80A78](Alias);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v0 + 8);
  v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v10 = *(_QWORD *)v0 & 0xFFFFFFFFFFFFLL;
  if (!v10 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    v12 = *(_QWORD *)(v0 + 24);
    v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0)
      v13 = *(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    if (!v13 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      v14 = *(_QWORD *)(v0 + 40);
      v15 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000) == 0)
        v15 = *(_QWORD *)(v0 + 32) & 0xFFFFFFFFFFFFLL;
      if (!v15 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (*(_BYTE *)(v0 + 48) != 1
          || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          v16 = *(_QWORD *)(v0 + 64);
          v17 = HIBYTE(v16) & 0xF;
          if ((v16 & 0x2000000000000000) == 0)
            v17 = *(_QWORD *)(v0 + 56) & 0xFFFFFFFFFFFFLL;
          if (!v17 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
          {
            RangeVar = type metadata accessor for PgQuery_RangeVar(0);
            outlined init with copy of PgQuery_Alias?(v0 + *(int *)(RangeVar + 44), (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Alias?);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, Alias) == 1)
            {
              outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Alias?);
            }
            else
            {
              outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v8, type metadata accessor for PgQuery_Alias);
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
              dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
              result = outlined destroy of PgQuery_Alias((uint64_t)v8, type metadata accessor for PgQuery_Alias);
              if (v1)
                return result;
            }
            if (!*(_DWORD *)(v0 + 72))
              return UnknownStorage.traverse<A>(visitor:)();
            result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
            if (!v1)
              return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RangeVar@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t Alias;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0xE000000000000000;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0xE000000000000000;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0xE000000000000000;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0xE000000000000000;
  *(_DWORD *)(a2 + 72) = 0;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 44);
  Alias = type metadata accessor for PgQuery_Alias(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Alias - 8) + 56))(v4, 1, 1, Alias);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RangeVar()
{
  return 0xD000000000000011;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PgQuery_RangeVar())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_RangeVar()
{
  return PgQuery_RangeVar.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RangeVar()
{
  return PgQuery_RangeVar.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RangeVar()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RangeVar@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RangeVar._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RangeVar()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RangeVar()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
  return Message.hash(into:)();
}

uint64_t one-time initialization function for defaultInstance(uint64_t a1)
{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_TableFunc._StorageClass, PgQuery_TableFunc._StorageClass.init(), &static PgQuery_TableFunc._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_Aggref._StorageClass, PgQuery_Aggref._StorageClass.init(), &static PgQuery_Aggref._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_WindowFunc._StorageClass, PgQuery_WindowFunc._StorageClass.init(), &static PgQuery_WindowFunc._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_FuncExpr._StorageClass, PgQuery_FuncExpr._StorageClass.init(), &static PgQuery_FuncExpr._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_SubPlan._StorageClass, PgQuery_SubPlan._StorageClass.init(), &static PgQuery_SubPlan._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_AlternativeSubPlan._StorageClass, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subplans, &static PgQuery_AlternativeSubPlan._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_XmlExpr._StorageClass, PgQuery_XmlExpr._StorageClass.init(), &static PgQuery_XmlExpr._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_Query._StorageClass, PgQuery_Query._StorageClass.init(), &static PgQuery_Query._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_SelectStmt._StorageClass, PgQuery_SelectStmt._StorageClass.init(), &static PgQuery_SelectStmt._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_CreateStmt._StorageClass, PgQuery_CreateStmt._StorageClass.init(), &static PgQuery_CreateStmt._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_IndexStmt._StorageClass, PgQuery_IndexStmt._StorageClass.init(), &static PgQuery_IndexStmt._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_ExplainStmt._StorageClass, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options, &static PgQuery_ExplainStmt._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_CreateTrigStmt._StorageClass, PgQuery_CreateTrigStmt._StorageClass.init(), &static PgQuery_CreateTrigStmt._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_A_Indirection._StorageClass, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indirection, &static PgQuery_A_Indirection._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_ColumnDef._StorageClass, PgQuery_ColumnDef._StorageClass.init(), &static PgQuery_ColumnDef._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_Constraint._StorageClass, PgQuery_Constraint._StorageClass.init(), &static PgQuery_Constraint._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_RangeTblEntry._StorageClass, PgQuery_RangeTblEntry._StorageClass.init(), &static PgQuery_RangeTblEntry._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_WindowClause._StorageClass, PgQuery_WindowClause._StorageClass.init(), &static PgQuery_WindowClause._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PgQuery_CommonTableExpr._StorageClass, PgQuery_CommonTableExpr._StorageClass.init(), &static PgQuery_CommonTableExpr._StorageClass.defaultInstance);
}

uint64_t PgQuery_TableFunc._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Node;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 24) = v1;
  v2 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v4(v2, 1, 1, Node);
  v4(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr, 1, 1, Node);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames) = v1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes) = v1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods) = v1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations) = v1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexprs) = v1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexprs) = v1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__notnulls) = v1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordinalitycol) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  return v0;
}

uint64_t PgQuery_TableFunc._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PgQuery_TableFunc._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit((void (*)(void))PgQuery_TableFunc._StorageClass.deinit);
}

uint64_t ObjC metadata update function for PgQuery_TableFunc._StorageClass()
{
  return type metadata accessor for PgQuery_TableFunc._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_TableFunc._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TableFunc._StorageClass);
}

void type metadata completion function for PgQuery_TableFunc._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for PgQuery_Node(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Node);
}

uint64_t PgQuery_TableFunc.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_TableFunc, (void (*)(_QWORD))type metadata accessor for PgQuery_TableFunc._StorageClass, specialized PgQuery_TableFunc._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_TableFunc.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_TableFunc.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_9;
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_9;
        case 11:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          goto LABEL_9;
        case 12:
        case 13:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_9:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_TableFunc.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v24 - v7;
  Node = type metadata accessor for PgQuery_Node(0);
  v10 = *(_QWORD *)(Node - 8);
  v11 = MEMORY[0x1E0C80A78](Node);
  v26 = (uint64_t)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v27 = (uint64_t)&v24 - v13;
  v14 = *(int *)(type metadata accessor for PgQuery_TableFunc(0) + 20);
  v25 = v0;
  v15 = *(_QWORD *)(v0 + v14);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 16) + 16);
  v28 = v15;
  if (v16)
  {
    v24 = v6;
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v2)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
    v15 = v28;
    v6 = v24;
  }
  else
  {
    swift_retain();
  }
  if (*(_QWORD *)(*(_QWORD *)(v15 + 24) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v2)
      goto LABEL_7;
    swift_bridgeObjectRelease();
    v15 = v28;
  }
  outlined init with copy of PgQuery_Alias?(v15+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v17(v8, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v18 = (uint64_t)v8;
    v19 = v27;
    outlined init with take of PgQuery_OidList(v18, v27, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v20 = v19;
    if (v2)
      goto LABEL_16;
    outlined destroy of PgQuery_Alias(v19, type metadata accessor for PgQuery_Node);
  }
  outlined init with copy of PgQuery_Alias?(v28+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr, (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v17(v6, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_19;
  }
  v21 = v26;
  outlined init with take of PgQuery_OidList((uint64_t)v6, v26, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  v20 = v21;
  if (v2)
  {
LABEL_16:
    outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
    return swift_release();
  }
  outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_Node);
LABEL_19:
  v23 = v28;
  if (*(_QWORD *)(*(_QWORD *)(v28
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v2)
      goto LABEL_7;
    swift_bridgeObjectRelease();
    v23 = v28;
  }
  if (*(_QWORD *)(*(_QWORD *)(v23
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v2)
      goto LABEL_7;
    swift_bridgeObjectRelease();
    v23 = v28;
  }
  if (*(_QWORD *)(*(_QWORD *)(v23
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    v23 = v28;
    if (v2)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v23
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    v23 = v28;
    if (v2)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v23
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexprs)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    v23 = v28;
    if (v2)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v23
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexprs)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    v23 = v28;
    if (v2)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v23
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__notnulls)
                 + 16))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    v23 = v28;
    if (v2)
      return swift_release();
  }
  if (*(_DWORD *)(v23
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordinalitycol))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    v23 = v28;
    if (v2)
      return swift_release();
  }
  if (*(_DWORD *)(v23
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v2)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_TableFunc@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_TableFunc._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_TableFunc()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_TableFunc()
{
  return PgQuery_TableFunc.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_TableFunc()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, type metadata accessor for PgQuery_TableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_TableFunc);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TableFunc@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TableFunc._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_TableFunc()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, type metadata accessor for PgQuery_TableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_TableFunc);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TableFunc()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, type metadata accessor for PgQuery_TableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_TableFunc);
  return Message.hash(into:)();
}

uint64_t PgQuery_Expr.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Expr()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Expr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Expr and conformance PgQuery_Expr, type metadata accessor for PgQuery_Expr, (uint64_t)&protocol conformance descriptor for PgQuery_Expr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Expr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Expr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Expr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Expr and conformance PgQuery_Expr, type metadata accessor for PgQuery_Expr, (uint64_t)&protocol conformance descriptor for PgQuery_Expr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Expr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Expr and conformance PgQuery_Expr, type metadata accessor for PgQuery_Expr, (uint64_t)&protocol conformance descriptor for PgQuery_Expr);
  return Message.hash(into:)();
}

uint64_t PgQuery_Var._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t PgQuery_Node._StorageClass.__deallocating_deinit(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of (key: String, value: StorableValue)(v2 + *a1, a2);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_Var._StorageClass()
{
  return type metadata accessor for PgQuery_Var._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_Var._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Var._StorageClass);
}

void type metadata completion function for PgQuery_Var._StorageClass()
{
  type metadata completion function for PgQuery_Var._StorageClass();
}

{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_Var.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_Var, (void (*)(_QWORD))type metadata accessor for PgQuery_Var._StorageClass, specialized PgQuery_Var._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_Var.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_Var.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 4:
        case 6:
        case 7:
        case 8:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 3:
        case 5:
        case 9:
        case 10:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_Var.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_Var, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_Var.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_Var.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1;
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
    v13 = v17;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    v14 = v17;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v13 = v14;
    result = outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v14)
      return result;
  }
  if (!*(_DWORD *)(v12
                  + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varno)
    || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v13))
  {
    if (!*(_DWORD *)(v12
                    + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattno)
      || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v13))
    {
      if (!*(_DWORD *)(v12
                      + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartype)
        || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v13))
      {
        if (!*(_DWORD *)(v12
                        + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartypmod)
          || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v13))
        {
          if (!*(_DWORD *)(v12
                          + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varcollid)
            || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v13))
          {
            if (!*(_DWORD *)(v12
                            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varlevelsup)
              || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v13))
            {
              if (!*(_DWORD *)(v12
                              + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varnosyn)
                || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v13))
              {
                if (!*(_DWORD *)(v12
                                + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattnosyn)
                  || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v13))
                {
                  result = *(unsigned int *)(v12
                                           + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
                  if ((_DWORD)result)
                    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL closure #1 in static PgQuery_Var.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  unsigned int v18;
  char v19;
  int v20;
  int v21;
  uint64_t v23;

  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a2 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v16 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v15, v16, &demangling cache variable for type metadata for PgQuery_Node?);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v17((uint64_t)v14, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v17(v16, 1, Node) != 1)
    {
      outlined init with take of PgQuery_OidList(v16, (uint64_t)v7, type metadata accessor for PgQuery_Node);
      swift_retain();
      swift_retain();
      v19 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v10, (uint64_t)v7, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v19 & 1) == 0)
        goto LABEL_17;
      goto LABEL_8;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_17;
  }
  v18 = v17(v16, 1, Node);
  swift_retain();
  swift_retain();
  if (v18 != 1)
    goto LABEL_6;
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_8:
  if (*(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varno) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varno)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattno) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattno)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartype) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartype)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartypmod) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartypmod)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varcollid) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varcollid)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varlevelsup) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varlevelsup)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varnosyn) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varnosyn)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattnosyn) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattnosyn))
  {
    v20 = *(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    v21 = *(_DWORD *)(a2
                    + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    return v20 == v21;
  }
LABEL_17:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Var@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_Var._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Var()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Var()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Var and conformance PgQuery_Var, type metadata accessor for PgQuery_Var, (uint64_t)&protocol conformance descriptor for PgQuery_Var);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Var@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Var._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Var()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Var and conformance PgQuery_Var, type metadata accessor for PgQuery_Var, (uint64_t)&protocol conformance descriptor for PgQuery_Var);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Var()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Var and conformance PgQuery_Var, type metadata accessor for PgQuery_Var, (uint64_t)&protocol conformance descriptor for PgQuery_Var);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_Var(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_Var, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Var.== infix(_:_:)) & 1;
}

uint64_t PgQuery_Param._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_Param._StorageClass()
{
  return type metadata accessor for PgQuery_Param._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_Param._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Param._StorageClass);
}

void type metadata completion function for PgQuery_Param._StorageClass()
{
  type metadata completion function for PgQuery_Param._StorageClass();
}

{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_Param.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_Param, (void (*)(_QWORD))type metadata accessor for PgQuery_Param._StorageClass, specialized PgQuery_Param._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_Param.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_Param.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_9;
        case 2:
          lazy protocol witness table accessor for type PgQuery_ParamKind and conformance PgQuery_ParamKind();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_9;
        case 3:
        case 5:
        case 7:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_9;
        case 4:
        case 6:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
LABEL_9:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_Param.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(type metadata accessor for PgQuery_Param(0) + 20);
  v17 = v3;
  v13 = *(_QWORD *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramkind))
  {
    v14 = *(_BYTE *)(v13
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramkind
                   + 8);
    v18 = *(_QWORD *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramkind);
    v19 = v14;
    lazy protocol witness table accessor for type PgQuery_ParamKind and conformance PgQuery_ParamKind();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramid))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtypmod))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Param@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_Param._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Param()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_Param(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Param.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Param()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Param and conformance PgQuery_Param, type metadata accessor for PgQuery_Param, (uint64_t)&protocol conformance descriptor for PgQuery_Param);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Param@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Param._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Param()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Param and conformance PgQuery_Param, type metadata accessor for PgQuery_Param, (uint64_t)&protocol conformance descriptor for PgQuery_Param);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Param()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Param and conformance PgQuery_Param, type metadata accessor for PgQuery_Param, (uint64_t)&protocol conformance descriptor for PgQuery_Param);
  return Message.hash(into:)();
}

uint64_t one-time initialization function for defaultInstance(uint64_t a1, void (*a2)(_QWORD), uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t result;

  a2(0);
  swift_allocObject();
  result = a3();
  *a4 = result;
  return result;
}

uint64_t PgQuery_Aggref._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfnoid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggcollid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtranstype) = 0;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggargtypes) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdirectargs) = v4;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = v4;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggorder) = v4;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdistinct) = v4;
  v3(v0 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter, 1, 1, Node);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggstar) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggvariadic) = 0;
  v5 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggkind);
  *v5 = 0;
  v5[1] = 0xE000000000000000;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup) = 0;
  v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggsplit;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  return v0;
}

uint64_t PgQuery_Aggref._StorageClass.deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PgQuery_Aggref._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit((void (*)(void))PgQuery_Aggref._StorageClass.deinit);
}

uint64_t ObjC metadata update function for PgQuery_Aggref._StorageClass()
{
  return type metadata accessor for PgQuery_Aggref._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_Aggref._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Aggref._StorageClass);
}

void type metadata completion function for PgQuery_Aggref._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_Aggref.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_Aggref, (void (*)(_QWORD))type metadata accessor for PgQuery_Aggref._StorageClass, specialized PgQuery_Aggref._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_Aggref.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_Aggref.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 12:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_10;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 16:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_10;
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_10;
        case 13:
        case 14:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_10;
        case 15:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_10;
        case 17:
          lazy protocol witness table accessor for type PgQuery_AggSplit and conformance PgQuery_AggSplit();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_10;
        case 18:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_10:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_Aggref.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t Node;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v2 = MEMORY[0x1E0C80A78](v1);
  v26 = (uint64_t)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v23 - v4;
  Node = type metadata accessor for PgQuery_Node(0);
  v7 = *(_QWORD *)(Node - 8);
  v8 = MEMORY[0x1E0C80A78](Node);
  v25 = (uint64_t)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v23 - v10;
  v12 = *(int *)(type metadata accessor for PgQuery_Aggref(0) + 20);
  v24 = v0;
  v13 = *(_QWORD *)(v0 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v14(v5, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
    v15 = v29;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v5, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    v16 = v29;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v15 = v16;
    if (v16)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfnoid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v15)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v15)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v15)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v15)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtranstype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v15)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggargtypes)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v15)
      goto LABEL_27;
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdirectargs)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v15)
      goto LABEL_27;
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (!v15)
    {
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    return swift_release();
  }
LABEL_25:
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggorder)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v15)
      goto LABEL_27;
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdistinct)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v15)
      return swift_release();
  }
  v18 = v26;
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter, v26, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v14((char *)v18, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v18, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v19 = v25;
    outlined init with take of PgQuery_OidList(v18, v25, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v19, type metadata accessor for PgQuery_Node);
    if (v15)
      return swift_release();
  }
  if (*(_BYTE *)(v13
                + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggstar) != 1
    || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v15))
  {
    if (*(_BYTE *)(v13
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggvariadic) != 1
      || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v15))
    {
      v20 = *(_QWORD *)(v13
                      + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggkind
                      + 8);
      v21 = HIBYTE(v20) & 0xF;
      if ((v20 & 0x2000000000000000) == 0)
        v21 = *(_QWORD *)(v13
                        + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggkind) & 0xFFFFFFFFFFFFLL;
      if (!v21
        || (swift_bridgeObjectRetain(),
            dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
            swift_bridgeObjectRelease(),
            !v15))
      {
        if (!*(_DWORD *)(v13
                        + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup)
          || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v15))
        {
          if (!*(_QWORD *)(v13
                          + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggsplit)
            || (v22 = *(_BYTE *)(v13
                               + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggsplit
                               + 8),
                v27 = *(_QWORD *)(v13
                                + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggsplit),
                v28 = v22,
                lazy protocol witness table accessor for type PgQuery_AggSplit and conformance PgQuery_AggSplit(),
                dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                !v15))
          {
            if (!*(_DWORD *)(v13
                            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location)
              || (dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v15))
            {
              swift_release();
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Aggref@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_Aggref._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Aggref()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_Aggref()
{
  return PgQuery_Aggref.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Aggref()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Aggref and conformance PgQuery_Aggref, type metadata accessor for PgQuery_Aggref, (uint64_t)&protocol conformance descriptor for PgQuery_Aggref);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Aggref@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Aggref._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Aggref()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Aggref and conformance PgQuery_Aggref, type metadata accessor for PgQuery_Aggref, (uint64_t)&protocol conformance descriptor for PgQuery_Aggref);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Aggref()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Aggref and conformance PgQuery_Aggref, type metadata accessor for PgQuery_Aggref, (uint64_t)&protocol conformance descriptor for PgQuery_Aggref);
  return Message.hash(into:)();
}

uint64_t PgQuery_GroupingFunc._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_GroupingFunc._StorageClass()
{
  return type metadata accessor for PgQuery_GroupingFunc._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_GroupingFunc._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_GroupingFunc._StorageClass);
}

void type metadata completion function for PgQuery_GroupingFunc._StorageClass()
{
  type metadata completion function for PgQuery_GroupingFunc._StorageClass();
}

{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_GroupingFunc.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_GroupingFunc, (void (*)(_QWORD))type metadata accessor for PgQuery_GroupingFunc._StorageClass, specialized PgQuery_GroupingFunc._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_GroupingFunc.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_GroupingFunc.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 6:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_GroupingFunc.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(type metadata accessor for PgQuery_GroupingFunc(0) + 20);
  v16 = v3;
  v13 = *(_QWORD *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refs)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_GroupingFunc@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_GroupingFunc._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_GroupingFunc()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_GroupingFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_GroupingFunc.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_GroupingFunc()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingFunc and conformance PgQuery_GroupingFunc, type metadata accessor for PgQuery_GroupingFunc, (uint64_t)&protocol conformance descriptor for PgQuery_GroupingFunc);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_GroupingFunc@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_GroupingFunc._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_GroupingFunc()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingFunc and conformance PgQuery_GroupingFunc, type metadata accessor for PgQuery_GroupingFunc, (uint64_t)&protocol conformance descriptor for PgQuery_GroupingFunc);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_GroupingFunc()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingFunc and conformance PgQuery_GroupingFunc, type metadata accessor for PgQuery_GroupingFunc, (uint64_t)&protocol conformance descriptor for PgQuery_GroupingFunc);
  return Message.hash(into:)();
}

uint64_t PgQuery_WindowFunc._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winfnoid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wintype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wincollid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  v3(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winstar) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winagg) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  return v0;
}

uint64_t PgQuery_WindowFunc._StorageClass.__deallocating_deinit()
{
  return PgQuery_WindowFunc._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, (uint64_t)&OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args, &OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter);
}

uint64_t ObjC metadata update function for PgQuery_WindowFunc._StorageClass()
{
  return type metadata accessor for PgQuery_WindowFunc._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_WindowFunc._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_WindowFunc._StorageClass);
}

void type metadata completion function for PgQuery_WindowFunc._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_WindowFunc.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_WindowFunc, (void (*)(_QWORD))type metadata accessor for PgQuery_WindowFunc._StorageClass, specialized PgQuery_WindowFunc._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_WindowFunc.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_WindowFunc.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 9:
        case 10:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 11:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_WindowFunc.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t Node;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v2 = MEMORY[0x1E0C80A78](v1);
  v23 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v20 - v4;
  Node = type metadata accessor for PgQuery_Node(0);
  v7 = *(_QWORD *)(Node - 8);
  v8 = MEMORY[0x1E0C80A78](Node);
  v22 = (uint64_t)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v20 - v10;
  v12 = *(int *)(type metadata accessor for PgQuery_WindowFunc(0) + 20);
  v21 = v0;
  v13 = *(_QWORD *)(v0 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v14(v5, 1, Node) == 1)
  {
    v20 = Node;
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
    v15 = (uint64_t)v23;
    v16 = v24;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v5, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    v17 = v24;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v16 = v17;
    if (v17)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
      return swift_release();
    }
    v20 = Node;
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    v15 = (uint64_t)v23;
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winfnoid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v16)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wintype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v16)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wincollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v16)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v16)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v16)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter, v15, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v14((char *)v15, 1, v20) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v15, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v18 = v22;
    outlined init with take of PgQuery_OidList(v15, v22, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v18, type metadata accessor for PgQuery_Node);
    if (v16)
      return swift_release();
  }
  if (!*(_DWORD *)(v13
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref)
    || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v16))
  {
    if (*(_BYTE *)(v13
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winstar) != 1
      || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v16))
    {
      if (*(_BYTE *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winagg) != 1
        || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v16))
      {
        if (!*(_DWORD *)(v13
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location)
          || (dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v16))
        {
          swift_release();
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_WindowFunc@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_WindowFunc._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_WindowFunc()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_WindowFunc()
{
  return PgQuery_WindowFunc.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_WindowFunc()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowFunc and conformance PgQuery_WindowFunc, type metadata accessor for PgQuery_WindowFunc, (uint64_t)&protocol conformance descriptor for PgQuery_WindowFunc);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_WindowFunc@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_WindowFunc._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_WindowFunc()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowFunc and conformance PgQuery_WindowFunc, type metadata accessor for PgQuery_WindowFunc, (uint64_t)&protocol conformance descriptor for PgQuery_WindowFunc);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_WindowFunc()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowFunc and conformance PgQuery_WindowFunc, type metadata accessor for PgQuery_WindowFunc, (uint64_t)&protocol conformance descriptor for PgQuery_WindowFunc);
  return Message.hash(into:)();
}

uint64_t PgQuery_SubscriptingRef._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Node;
  void (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v3);
  v20 = (uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v17 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v7 = *(void (**)(void))(*(_QWORD *)(Node - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(v5, 1, 1, Node);
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcontainertype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcontainertype) = 0;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refelemtype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refelemtype) = 0;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reftypmod;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reftypmod) = 0;
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcollid) = 0;
  v12 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refupperindexpr;
  v13 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refupperindexpr) = MEMORY[0x1E0DEE9D8];
  v14 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reflowerindexpr;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reflowerindexpr) = v13;
  v18 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refexpr;
  v7();
  v19 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refassgnexpr;
  v7();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v17, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v8) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcontainertype);
  *(_DWORD *)(v1 + v9) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refelemtype);
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reftypmod);
  *(_DWORD *)(v1 + v11) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcollid);
  *(_QWORD *)(v1 + v12) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refupperindexpr);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v14) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reflowerindexpr);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refexpr, v18, &demangling cache variable for type metadata for PgQuery_Node?);
  v15 = v20;
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refassgnexpr, v20, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_release();
  outlined assign with take of PgQuery_Node?(v15, v19, &demangling cache variable for type metadata for PgQuery_Node?);
  return v1;
}

uint64_t PgQuery_SubscriptingRef._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refassgnexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_SubscriptingRef._StorageClass()
{
  return type metadata accessor for PgQuery_SubscriptingRef._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_SubscriptingRef._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SubscriptingRef._StorageClass);
}

void type metadata completion function for PgQuery_SubscriptingRef._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_SubscriptingRef, (void (*)(_QWORD))type metadata accessor for PgQuery_SubscriptingRef._StorageClass, PgQuery_SubscriptingRef._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_SubscriptingRef.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 8:
        case 9:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_9;
        case 2:
        case 3:
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_9;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_9;
        case 6:
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_9:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_SubscriptingRef.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  char *v37;
  uint64_t v38;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v2 = MEMORY[0x1E0C80A78](v1);
  v35 = (uint64_t)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x1E0C80A78](v2);
  v37 = (char *)&v30 - v5;
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v30 - v6;
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  v10 = MEMORY[0x1E0C80A78](Node);
  v32 = (uint64_t)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v34 = (uint64_t)&v30 - v13;
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v30 - v14;
  v16 = *(int *)(type metadata accessor for PgQuery_SubscriptingRef(0) + 20);
  v33 = v0;
  v17 = *(_QWORD *)(v0 + v16);
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  v19 = Node;
  v36 = v18;
  if (v18((uint64_t)v7, 1, Node) == 1)
  {
    v31 = Node;
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
    v20 = v38;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v15, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    v21 = v38;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v20 = v21;
    if (v21)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
      return swift_release();
    }
    v31 = v19;
    outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
  }
  v22 = (uint64_t)v37;
  if (*(_DWORD *)(v17
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcontainertype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v20)
      return swift_release();
  }
  if (*(_DWORD *)(v17
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refelemtype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v20)
      return swift_release();
  }
  if (*(_DWORD *)(v17
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reftypmod))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v20)
      return swift_release();
  }
  if (*(_DWORD *)(v17
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v20)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v17
                             + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refupperindexpr)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v20)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v17
                             + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reflowerindexpr)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v20)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refexpr, v22, &demangling cache variable for type metadata for PgQuery_Node?);
  v23 = v31;
  if (v36(v22, 1, v31) == 1)
  {
    v24 = v23;
    outlined destroy of (key: String, value: StorableValue)(v22, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_21;
  }
  v25 = v22;
  v26 = v34;
  outlined init with take of PgQuery_OidList(v25, v34, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  v24 = v23;
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v26, type metadata accessor for PgQuery_Node);
  if (!v20)
  {
LABEL_21:
    v27 = v35;
    outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refassgnexpr, v35, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v36(v27, 1, v24) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v27, &demangling cache variable for type metadata for PgQuery_Node?);
    }
    else
    {
      v28 = v32;
      outlined init with take of PgQuery_OidList(v27, v32, type metadata accessor for PgQuery_Node);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      outlined destroy of PgQuery_Alias(v28, type metadata accessor for PgQuery_Node);
      if (v20)
        return swift_release();
    }
    swift_release();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SubscriptingRef@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_SubscriptingRef._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SubscriptingRef()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_SubscriptingRef()
{
  return PgQuery_SubscriptingRef.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SubscriptingRef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubscriptingRef and conformance PgQuery_SubscriptingRef, type metadata accessor for PgQuery_SubscriptingRef, (uint64_t)&protocol conformance descriptor for PgQuery_SubscriptingRef);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SubscriptingRef@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SubscriptingRef._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SubscriptingRef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubscriptingRef and conformance PgQuery_SubscriptingRef, type metadata accessor for PgQuery_SubscriptingRef, (uint64_t)&protocol conformance descriptor for PgQuery_SubscriptingRef);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SubscriptingRef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubscriptingRef and conformance PgQuery_SubscriptingRef, type metadata accessor for PgQuery_SubscriptingRef, (uint64_t)&protocol conformance descriptor for PgQuery_SubscriptingRef);
  return Message.hash(into:)();
}

uint64_t PgQuery_FuncExpr._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t v3;

  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcresulttype) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcretset) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcvariadic) = 0;
  v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcformat;
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccollid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  return v0;
}

uint64_t PgQuery_FuncExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_FuncExpr._StorageClass()
{
  return type metadata accessor for PgQuery_FuncExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_FuncExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FuncExpr._StorageClass);
}

void type metadata completion function for PgQuery_FuncExpr._StorageClass()
{
  type metadata completion function for PgQuery_Var._StorageClass();
}

uint64_t PgQuery_FuncExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_FuncExpr, (void (*)(_QWORD))type metadata accessor for PgQuery_FuncExpr._StorageClass, specialized PgQuery_FuncExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_FuncExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_FuncExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
        case 7:
        case 8:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 4:
        case 5:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 6:
          lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 9:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 10:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_FuncExpr.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(int *)(type metadata accessor for PgQuery_FuncExpr(0) + 20);
  v15 = v0;
  v9 = *(_QWORD *)(v0 + v8);
  outlined init with copy of PgQuery_Alias?(v9 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v3, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v3, &demangling cache variable for type metadata for PgQuery_Node?);
    v10 = v18;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v3, (uint64_t)v7, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    v11 = v18;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v10 = v11;
    outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
    if (v11)
      return swift_release();
  }
  if (!*(_DWORD *)(v9
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcid)
    || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v10))
  {
    if (!*(_DWORD *)(v9
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcresulttype)
      || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v10))
    {
      if (*(_BYTE *)(v9
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcretset) != 1
        || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v10))
      {
        if (*(_BYTE *)(v9
                      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcvariadic) != 1
          || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v10))
        {
          if (!*(_QWORD *)(v9
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcformat)
            || (v12 = *(_BYTE *)(v9
                               + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcformat
                               + 8),
                v16 = *(_QWORD *)(v9
                                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcformat),
                v17 = v12,
                lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm(),
                dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                !v10))
          {
            if (!*(_DWORD *)(v9
                            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccollid)
              || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v10))
            {
              if (!*(_DWORD *)(v9
                              + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid)
                || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v10))
              {
                if (!*(_QWORD *)(*(_QWORD *)(v9
                                            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                                + 16)
                  || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
                {
                  if (!*(_DWORD *)(v9
                                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location)
                    || (dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v10))
                  {
                    swift_release();
                    return UnknownStorage.traverse<A>(visitor:)();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_FuncExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_FuncExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_FuncExpr()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_FuncExpr()
{
  return PgQuery_FuncExpr.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_FuncExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, type metadata accessor for PgQuery_FuncExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FuncExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_FuncExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_FuncExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_FuncExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, type metadata accessor for PgQuery_FuncExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FuncExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_FuncExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, type metadata accessor for PgQuery_FuncExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FuncExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_NamedArgExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_NamedArgExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg);
}

uint64_t ObjC metadata update function for PgQuery_NamedArgExpr._StorageClass()
{
  return type metadata accessor for PgQuery_NamedArgExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_NamedArgExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_NamedArgExpr._StorageClass);
}

void type metadata completion function for PgQuery_NamedArgExpr._StorageClass()
{
  type metadata completion function for PgQuery_NamedArgExpr._StorageClass();
}

{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_NamedArgExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_NamedArgExpr(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_NamedArgExpr._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_NamedArgExpr._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 3:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_7;
        case 4:
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_NamedArgExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_NamedArgExpr, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_NamedArgExpr.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_NamedArgExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t Node;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v25 = a3;
  v26 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v23 - v10;
  Node = type metadata accessor for PgQuery_Node(0);
  v13 = *(_QWORD *)(Node - 8);
  v14 = MEMORY[0x1E0C80A78](Node);
  v24 = (uint64_t)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v23 - v16;
  v27 = a1;
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v18(v11, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v17, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node);
    if (v4)
      return result;
  }
  outlined init with copy of PgQuery_Alias?(v27+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v18(v9, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v20 = v24;
    outlined init with take of PgQuery_OidList((uint64_t)v9, v24, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
    if (v4)
      return result;
  }
  v21 = *(_QWORD *)(v27
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name
                  + 8);
  v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0)
    v22 = *(_QWORD *)(v27
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name) & 0xFFFFFFFFFFFFLL;
  if (!v22
    || (swift_bridgeObjectRetain(),
        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
        result = swift_bridgeObjectRelease(),
        !v4))
  {
    if (!*(_DWORD *)(v27
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argnumber)
      || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
    {
      result = *(unsigned int *)(v27
                               + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      if ((_DWORD)result)
        return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    }
  }
  return result;
}

BOOL closure #1 in static PgQuery_NamedArgExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v34 = (uint64_t)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v33 = (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v32 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v13 = MEMORY[0x1E0C80A78](v12);
  v35 = (uint64_t)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v32 - v15;
  v17 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v18 = (char *)&v32 + *(int *)(v12 + 48) - v15;
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)&v32 - v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v17, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v19(v16, 1, Node) == 1)
  {
    v20 = v19(v18, 1, Node);
    swift_retain();
    swift_retain();
    if (v20 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_20;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v16, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v18, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    goto LABEL_6;
  }
  v21 = v34;
  outlined init with take of PgQuery_OidList((uint64_t)v18, v34, type metadata accessor for PgQuery_Node);
  swift_retain();
  swift_retain();
  v22 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v11, v21, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v22 & 1) == 0)
    goto LABEL_20;
LABEL_8:
  v23 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v24 = v35;
  v25 = v35 + *(int *)(v12 + 48);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v35, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v23, v25, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19((char *)v24, 1, Node) != 1)
  {
    v26 = v33;
    outlined init with copy of PgQuery_Alias?(v24, v33, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v19((char *)v25, 1, Node) != 1)
    {
      v27 = v34;
      outlined init with take of PgQuery_OidList(v25, v34, type metadata accessor for PgQuery_Node);
      v28 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v26, v27, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias(v26, type metadata accessor for PgQuery_Node);
      outlined destroy of (key: String, value: StorableValue)(v24, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v28 & 1) == 0)
        goto LABEL_20;
      goto LABEL_15;
    }
    outlined destroy of PgQuery_Alias(v26, type metadata accessor for PgQuery_Node);
LABEL_13:
    outlined destroy of (key: String, value: StorableValue)(v24, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_20;
  }
  if (v19((char *)v25, 1, Node) != 1)
    goto LABEL_13;
  outlined destroy of (key: String, value: StorableValue)(v24, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_15:
  if ((*(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name) == *(_QWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name)
     && *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name
                  + 8) == *(_QWORD *)(a2
                                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name
                                    + 8)
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argnumber) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argnumber))
  {
    v29 = *(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    v30 = *(_DWORD *)(a2
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    return v29 == v30;
  }
LABEL_20:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_NamedArgExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_NamedArgExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_NamedArgExpr()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_NamedArgExpr()
{
  return PgQuery_NamedArgExpr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_NamedArgExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NamedArgExpr and conformance PgQuery_NamedArgExpr, type metadata accessor for PgQuery_NamedArgExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NamedArgExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_NamedArgExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_NamedArgExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_NamedArgExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NamedArgExpr and conformance PgQuery_NamedArgExpr, type metadata accessor for PgQuery_NamedArgExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NamedArgExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_NamedArgExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NamedArgExpr and conformance PgQuery_NamedArgExpr, type metadata accessor for PgQuery_NamedArgExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NamedArgExpr);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_NamedArgExpr(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_NamedArgExpr, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_NamedArgExpr.== infix(_:_:)) & 1;
}

uint64_t PgQuery_OpExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t PgQuery_FuncExpr._StorageClass.__deallocating_deinit(_QWORD *a1)
{
  uint64_t v1;

  outlined destroy of (key: String, value: StorableValue)(v1 + *a1, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_OpExpr._StorageClass()
{
  return type metadata accessor for PgQuery_OpExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_OpExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_OpExpr._StorageClass);
}

uint64_t PgQuery_OpExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_OpExpr, (void (*)(_QWORD))type metadata accessor for PgQuery_OpExpr._StorageClass, specialized PgQuery_OpExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_OpExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_OpExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 2:
        case 3:
        case 4:
        case 6:
        case 7:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_8;
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_8;
        case 8:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_8;
        case 9:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_8:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_OpExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(type metadata accessor for PgQuery_OpExpr(0) + 20);
  v16 = v3;
  v13 = *(_QWORD *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_BYTE *)(v13
                + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_OpExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_OpExpr._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_OpExpr()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_OpExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_OpExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_OpExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OpExpr and conformance PgQuery_OpExpr, type metadata accessor for PgQuery_OpExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OpExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OpExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_OpExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_OpExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OpExpr and conformance PgQuery_OpExpr, type metadata accessor for PgQuery_OpExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OpExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_OpExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OpExpr and conformance PgQuery_OpExpr, type metadata accessor for PgQuery_OpExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OpExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_DistinctExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_DistinctExpr._StorageClass()
{
  return type metadata accessor for PgQuery_DistinctExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_DistinctExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DistinctExpr._StorageClass);
}

uint64_t PgQuery_DistinctExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_DistinctExpr, (void (*)(_QWORD))type metadata accessor for PgQuery_DistinctExpr._StorageClass, specialized PgQuery_DistinctExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_DistinctExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_DistinctExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 2:
        case 3:
        case 4:
        case 6:
        case 7:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_8;
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_8;
        case 8:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_8;
        case 9:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_8:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_DistinctExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(type metadata accessor for PgQuery_DistinctExpr(0) + 20);
  v16 = v3;
  v13 = *(_QWORD *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_BYTE *)(v13
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DistinctExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_DistinctExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DistinctExpr()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DistinctExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_DistinctExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DistinctExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DistinctExpr and conformance PgQuery_DistinctExpr, type metadata accessor for PgQuery_DistinctExpr, (uint64_t)&protocol conformance descriptor for PgQuery_DistinctExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DistinctExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DistinctExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DistinctExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DistinctExpr and conformance PgQuery_DistinctExpr, type metadata accessor for PgQuery_DistinctExpr, (uint64_t)&protocol conformance descriptor for PgQuery_DistinctExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DistinctExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DistinctExpr and conformance PgQuery_DistinctExpr, type metadata accessor for PgQuery_DistinctExpr, (uint64_t)&protocol conformance descriptor for PgQuery_DistinctExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_NullIfExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_NullIfExpr._StorageClass()
{
  return type metadata accessor for PgQuery_NullIfExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_NullIfExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_NullIfExpr._StorageClass);
}

void type metadata completion function for PgQuery_OpExpr._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_NullIfExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_NullIfExpr, (void (*)(_QWORD))type metadata accessor for PgQuery_NullIfExpr._StorageClass, specialized PgQuery_NullIfExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_NullIfExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_NullIfExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 2:
        case 3:
        case 4:
        case 6:
        case 7:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_8;
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_8;
        case 8:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_8;
        case 9:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_8:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_NullIfExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(type metadata accessor for PgQuery_NullIfExpr(0) + 20);
  v16 = v3;
  v13 = *(_QWORD *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_BYTE *)(v13
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_NullIfExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_NullIfExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_NullIfExpr()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_NullIfExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_NullIfExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_NullIfExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullIfExpr and conformance PgQuery_NullIfExpr, type metadata accessor for PgQuery_NullIfExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NullIfExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_NullIfExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_NullIfExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_NullIfExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullIfExpr and conformance PgQuery_NullIfExpr, type metadata accessor for PgQuery_NullIfExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NullIfExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_NullIfExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullIfExpr and conformance PgQuery_NullIfExpr, type metadata accessor for PgQuery_NullIfExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NullIfExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_ScalarArrayOpExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_ScalarArrayOpExpr._StorageClass()
{
  return type metadata accessor for PgQuery_ScalarArrayOpExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_ScalarArrayOpExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ScalarArrayOpExpr._StorageClass);
}

void type metadata completion function for PgQuery_ScalarArrayOpExpr._StorageClass()
{
  type metadata completion function for PgQuery_Param._StorageClass();
}

uint64_t PgQuery_ScalarArrayOpExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_ScalarArrayOpExpr, (void (*)(_QWORD))type metadata accessor for PgQuery_ScalarArrayOpExpr._StorageClass, specialized PgQuery_ScalarArrayOpExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_ScalarArrayOpExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_ScalarArrayOpExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
        case 5:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ScalarArrayOpExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(type metadata accessor for PgQuery_ScalarArrayOpExpr(0) + 20);
  v16 = v3;
  v13 = *(_QWORD *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_BYTE *)(v13
                + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOr) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ScalarArrayOpExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_ScalarArrayOpExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ScalarArrayOpExpr()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ScalarArrayOpExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ScalarArrayOpExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ScalarArrayOpExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScalarArrayOpExpr and conformance PgQuery_ScalarArrayOpExpr, type metadata accessor for PgQuery_ScalarArrayOpExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ScalarArrayOpExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ScalarArrayOpExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ScalarArrayOpExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ScalarArrayOpExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScalarArrayOpExpr and conformance PgQuery_ScalarArrayOpExpr, type metadata accessor for PgQuery_ScalarArrayOpExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ScalarArrayOpExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ScalarArrayOpExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScalarArrayOpExpr and conformance PgQuery_ScalarArrayOpExpr, type metadata accessor for PgQuery_ScalarArrayOpExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ScalarArrayOpExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_BoolExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_BoolExpr._StorageClass()
{
  return type metadata accessor for PgQuery_BoolExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_BoolExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_BoolExpr._StorageClass);
}

void type metadata completion function for PgQuery_BoolExpr._StorageClass()
{
  type metadata completion function for PgQuery_BoolExpr._StorageClass();
}

{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_BoolExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_BoolExpr(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_BoolExpr._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_BoolExpr._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 2:
          lazy protocol witness table accessor for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_7;
        case 4:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_BoolExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(type metadata accessor for PgQuery_BoolExpr(0) + 20);
  v17 = v3;
  v13 = *(_QWORD *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLop))
  {
    v14 = *(_BYTE *)(v13
                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLop
                   + 8);
    v18 = *(_QWORD *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLop);
    v19 = v14;
    lazy protocol witness table accessor for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_BoolExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_BoolExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_BoolExpr()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_BoolExpr()
{
  return PgQuery_BoolExpr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_BoolExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_BoolExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_BoolExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BoolExpr and conformance PgQuery_BoolExpr, type metadata accessor for PgQuery_BoolExpr, (uint64_t)&protocol conformance descriptor for PgQuery_BoolExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_BoolExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_BoolExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_BoolExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BoolExpr and conformance PgQuery_BoolExpr, type metadata accessor for PgQuery_BoolExpr, (uint64_t)&protocol conformance descriptor for PgQuery_BoolExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_BoolExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BoolExpr and conformance PgQuery_BoolExpr, type metadata accessor for PgQuery_BoolExpr, (uint64_t)&protocol conformance descriptor for PgQuery_BoolExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_SubLink._StorageClass.__deallocating_deinit()
{
  return PgQuery_SubLink._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, (uint64_t)&OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__operName, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subselect);
}

uint64_t ObjC metadata update function for PgQuery_SubLink._StorageClass()
{
  return type metadata accessor for PgQuery_SubLink._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_SubLink._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SubLink._StorageClass);
}

void type metadata completion function for PgQuery_SubLink._StorageClass()
{
  type metadata completion function for PgQuery_SubLink._StorageClass();
}

{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_SubLink.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_SubLink, (void (*)(_QWORD))type metadata accessor for PgQuery_SubLink._StorageClass, specialized PgQuery_SubLink._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_SubLink.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_SubLink.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
          lazy protocol witness table accessor for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 3:
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_SubLink.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v35;
  char *v36;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v2 = MEMORY[0x1E0C80A78](v1);
  v36 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x1E0C80A78](v2);
  v33 = (char *)&v28 - v5;
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v28 - v6;
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  v10 = MEMORY[0x1E0C80A78](Node);
  v29 = (uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v30 = (uint64_t)&v28 - v13;
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v28 - v14;
  v16 = *(int *)(type metadata accessor for PgQuery_SubLink(0) + 20);
  v28 = v0;
  v17 = *(_QWORD *)(v0 + v16);
  outlined init with copy of PgQuery_Alias?(v17 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v31(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
    v18 = (uint64_t)v36;
    v19 = v32;
    v20 = (uint64_t)v33;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v15, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    v21 = v32;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v19 = v21;
    outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
    v18 = (uint64_t)v36;
    v20 = (uint64_t)v33;
    if (v21)
      return swift_release();
  }
  if (*(_QWORD *)(v17
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType))
  {
    v22 = *(_BYTE *)(v17
                   + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType
                   + 8);
    v34 = *(_QWORD *)(v17
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType);
    v35 = v22;
    lazy protocol witness table accessor for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v19)
      return swift_release();
  }
  if (*(_DWORD *)(v17
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkID))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v19)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, v20, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v31((char *)v20, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v20, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v23 = v20;
    v24 = v30;
    outlined init with take of PgQuery_OidList(v23, v30, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v24, type metadata accessor for PgQuery_Node);
    if (v19)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v17
                             + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__operName)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v19)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subselect, v18, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v31((char *)v18, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v18, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v25 = v18;
    v26 = v29;
    outlined init with take of PgQuery_OidList(v25, v29, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v26, type metadata accessor for PgQuery_Node);
    if (v19)
      return swift_release();
  }
  if (!*(_DWORD *)(v17
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location)
    || (dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v19))
  {
    swift_release();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SubLink@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_SubLink._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SubLink()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_SubLink()
{
  return PgQuery_SubLink.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SubLink()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubLink and conformance PgQuery_SubLink, type metadata accessor for PgQuery_SubLink, (uint64_t)&protocol conformance descriptor for PgQuery_SubLink);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SubLink@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SubLink._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SubLink()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubLink and conformance PgQuery_SubLink, type metadata accessor for PgQuery_SubLink, (uint64_t)&protocol conformance descriptor for PgQuery_SubLink);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SubLink()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubLink and conformance PgQuery_SubLink, type metadata accessor for PgQuery_SubLink, (uint64_t)&protocol conformance descriptor for PgQuery_SubLink);
  return Message.hash(into:)();
}

uint64_t PgQuery_SubPlan._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType;
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v3(v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, 1, 1, Node);
  v5 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramIds) = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planID) = 0;
  v6 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planName);
  *v6 = 0;
  v6[1] = 0xE000000000000000;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColType) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColTypmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColCollation) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useHashTable) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unknownEqFalse) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parallelSafe) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setParam) = v5;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parParam) = v5;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = v5;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startupCost) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__perCallCost) = 0;
  return v0;
}

uint64_t PgQuery_SubPlan._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_SubPlan._StorageClass()
{
  return type metadata accessor for PgQuery_SubPlan._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_SubPlan._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SubPlan._StorageClass);
}

void type metadata completion function for PgQuery_SubPlan._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_SubPlan.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_SubPlan, (void (*)(_QWORD))type metadata accessor for PgQuery_SubPlan._StorageClass, specialized PgQuery_SubPlan._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_SubPlan.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_SubPlan.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
          lazy protocol witness table accessor for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 4:
        case 13:
        case 14:
        case 15:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 5:
        case 8:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 6:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 7:
        case 9:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 10:
        case 11:
        case 12:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 16:
        case 17:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_SubPlan.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t Node;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v2 = MEMORY[0x1E0C80A78](v1);
  v28 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v25 - v4;
  Node = type metadata accessor for PgQuery_Node(0);
  v7 = *(_QWORD *)(Node - 8);
  v8 = MEMORY[0x1E0C80A78](Node);
  v27 = (uint64_t)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - v10;
  v12 = *(int *)(type metadata accessor for PgQuery_SubPlan(0) + 20);
  v26 = v0;
  v13 = *(_QWORD *)(v0 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v14(v5, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
    v15 = v31;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v5, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    v16 = v31;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v15 = v16;
    if (v16)
    {
      v17 = (uint64_t)v11;
      goto LABEL_13;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
  }
  v18 = Node;
  if (*(_QWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType))
  {
    v19 = *(_BYTE *)(v13
                   + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType
                   + 8);
    v29 = *(_QWORD *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType);
    v30 = v19;
    lazy protocol witness table accessor for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    v20 = (uint64_t)v28;
    if (v15)
      return swift_release();
  }
  else
  {
    v20 = (uint64_t)v28;
  }
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, v20, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v14((char *)v20, 1, v18) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v20, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_15;
  }
  v21 = v27;
  outlined init with take of PgQuery_OidList(v20, v27, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  v17 = v21;
  if (v15)
  {
LABEL_13:
    outlined destroy of PgQuery_Alias(v17, type metadata accessor for PgQuery_Node);
    return swift_release();
  }
  outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_Node);
LABEL_15:
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramIds)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v15)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planID))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v15)
      return swift_release();
  }
  v22 = *(_QWORD *)(v13
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planName
                  + 8);
  v23 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0)
    v23 = *(_QWORD *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planName) & 0xFFFFFFFFFFFFLL;
  if (v23)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v15)
      goto LABEL_24;
    swift_bridgeObjectRelease();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColType))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v15)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColTypmod))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v15)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColCollation))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v15)
      return swift_release();
  }
  if (*(_BYTE *)(v13
                + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useHashTable) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v15)
      return swift_release();
  }
  if (*(_BYTE *)(v13
                + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unknownEqFalse) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v15)
      return swift_release();
  }
  if (*(_BYTE *)(v13
                + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parallelSafe) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v15)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setParam)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v15)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parParam)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v15)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v15)
      return swift_release();
  }
  if (*(double *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startupCost) != 0.0)
  {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if (v15)
      return swift_release();
  }
  if (*(double *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__perCallCost) != 0.0)
  {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if (v15)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SubPlan@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_SubPlan._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SubPlan()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_SubPlan()
{
  return PgQuery_SubPlan.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SubPlan()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubPlan and conformance PgQuery_SubPlan, type metadata accessor for PgQuery_SubPlan, (uint64_t)&protocol conformance descriptor for PgQuery_SubPlan);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SubPlan@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SubPlan._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SubPlan()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubPlan and conformance PgQuery_SubPlan, type metadata accessor for PgQuery_SubPlan, (uint64_t)&protocol conformance descriptor for PgQuery_SubPlan);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SubPlan()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubPlan and conformance PgQuery_SubPlan, type metadata accessor for PgQuery_SubPlan, (uint64_t)&protocol conformance descriptor for PgQuery_SubPlan);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlternativeSubPlan._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_AlternativeSubPlan._StorageClass()
{
  return type metadata accessor for PgQuery_AlternativeSubPlan._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_AlternativeSubPlan._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlternativeSubPlan._StorageClass);
}

void type metadata completion function for PgQuery_AlternativeSubPlan._StorageClass()
{
  type metadata completion function for PgQuery_AlternativeSubPlan._StorageClass();
}

{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_AlternativeSubPlan.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlternativeSubPlan.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_AlternativeSubPlan, (void (*)(_QWORD))type metadata accessor for PgQuery_AlternativeSubPlan._StorageClass, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t *)&OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subplans);
}

uint64_t PgQuery_AlternativeSubPlan.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlternativeSubPlan.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for PgQuery_AlternativeSubPlan, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subplans);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlternativeSubPlan@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_AlternativeSubPlan._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlternativeSubPlan()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlternativeSubPlan()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlternativeSubPlan and conformance PgQuery_AlternativeSubPlan, type metadata accessor for PgQuery_AlternativeSubPlan, (uint64_t)&protocol conformance descriptor for PgQuery_AlternativeSubPlan);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlternativeSubPlan@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlternativeSubPlan._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlternativeSubPlan()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlternativeSubPlan and conformance PgQuery_AlternativeSubPlan, type metadata accessor for PgQuery_AlternativeSubPlan, (uint64_t)&protocol conformance descriptor for PgQuery_AlternativeSubPlan);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlternativeSubPlan()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlternativeSubPlan and conformance PgQuery_AlternativeSubPlan, type metadata accessor for PgQuery_AlternativeSubPlan, (uint64_t)&protocol conformance descriptor for PgQuery_AlternativeSubPlan);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlternativeSubPlan(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_AlternativeSubPlan.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AlternativeSubPlan, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subplans) & 1;
}

uint64_t PgQuery_FieldSelect._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_FieldSelect._StorageClass()
{
  return type metadata accessor for PgQuery_FieldSelect._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_FieldSelect._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FieldSelect._StorageClass);
}

void type metadata completion function for PgQuery_FieldSelect._StorageClass()
{
  type metadata completion function for PgQuery_FieldSelect._StorageClass();
}

{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_FieldSelect.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_FieldSelect, (void (*)(_QWORD))type metadata accessor for PgQuery_FieldSelect._StorageClass, specialized PgQuery_FieldSelect._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_FieldSelect.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_FieldSelect.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_5;
        case 4:
        case 6:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_FieldSelect.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_FieldSelect, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_FieldSelect.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_FieldSelect.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t Node;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v24 = a3;
  v25 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v22 - v10;
  Node = type metadata accessor for PgQuery_Node(0);
  v13 = *(_QWORD *)(Node - 8);
  v14 = MEMORY[0x1E0C80A78](Node);
  v23 = (uint64_t)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v22 - v16;
  v26 = a1;
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v18(v11, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
    v19 = v26;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v17, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node);
    v19 = v26;
    if (v4)
      return result;
  }
  outlined init with copy of PgQuery_Alias?(v19 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v18(v9, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v21 = v23;
    outlined init with take of PgQuery_OidList((uint64_t)v9, v23, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v19 = v26;
    result = outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_Node);
    if (v4)
      return result;
  }
  if (!*(_DWORD *)(v19
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnum)
    || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
  {
    if (!*(_DWORD *)(v19
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype)
      || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
    {
      if (!*(_DWORD *)(v19
                      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod)
        || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
      {
        result = *(unsigned int *)(v19
                                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid);
        if ((_DWORD)result)
          return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
      }
    }
  }
  return result;
}

BOOL closure #1 in static PgQuery_FieldSelect.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v36 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v35 = (uint64_t)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v34 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v13 = MEMORY[0x1E0C80A78](v12);
  v37 = (uint64_t)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v34 - v15;
  v17 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v18 = (char *)&v34 + *(int *)(v12 + 48) - v15;
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)&v34 - v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v17, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v19(v16, 1, Node) == 1)
  {
    v20 = v19(v18, 1, Node);
    swift_retain();
    swift_retain();
    v21 = a2;
    if (v20 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_19;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v16, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v18, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    goto LABEL_6;
  }
  v22 = v36;
  outlined init with take of PgQuery_OidList((uint64_t)v18, v36, type metadata accessor for PgQuery_Node);
  swift_retain();
  v21 = a2;
  swift_retain();
  v23 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v11, v22, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v22, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v23 & 1) == 0)
    goto LABEL_19;
LABEL_8:
  v24 = v21
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v25 = v37;
  v26 = v37 + *(int *)(v12 + 48);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v37, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v24, v26, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19((char *)v25, 1, Node) != 1)
  {
    v27 = v35;
    outlined init with copy of PgQuery_Alias?(v25, v35, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v19((char *)v26, 1, Node) != 1)
    {
      v28 = v36;
      outlined init with take of PgQuery_OidList(v26, v36, type metadata accessor for PgQuery_Node);
      v29 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v27, v28, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias(v28, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_Node);
      outlined destroy of (key: String, value: StorableValue)(v25, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v29 & 1) == 0)
        goto LABEL_19;
      goto LABEL_15;
    }
    outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_Node);
LABEL_13:
    outlined destroy of (key: String, value: StorableValue)(v25, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_19;
  }
  if (v19((char *)v26, 1, Node) != 1)
    goto LABEL_13;
  outlined destroy of (key: String, value: StorableValue)(v25, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_15:
  if (*(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnum) == *(_DWORD *)(v21 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnum)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) == *(_DWORD *)(v21 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) == *(_DWORD *)(v21 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod))
  {
    v30 = v21;
    v31 = *(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid);
    swift_release();
    v32 = *(_DWORD *)(v30
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid);
    swift_release();
    return v31 == v32;
  }
LABEL_19:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_FieldSelect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_FieldSelect._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_FieldSelect()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_FieldSelect()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldSelect and conformance PgQuery_FieldSelect, type metadata accessor for PgQuery_FieldSelect, (uint64_t)&protocol conformance descriptor for PgQuery_FieldSelect);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_FieldSelect@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_FieldSelect._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_FieldSelect()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldSelect and conformance PgQuery_FieldSelect, type metadata accessor for PgQuery_FieldSelect, (uint64_t)&protocol conformance descriptor for PgQuery_FieldSelect);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_FieldSelect()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldSelect and conformance PgQuery_FieldSelect, type metadata accessor for PgQuery_FieldSelect, (uint64_t)&protocol conformance descriptor for PgQuery_FieldSelect);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_FieldSelect(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_FieldSelect, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_FieldSelect.== infix(_:_:)) & 1;
}

uint64_t PgQuery_FieldStore._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_FieldStore._StorageClass()
{
  return type metadata accessor for PgQuery_FieldStore._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_FieldStore._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FieldStore._StorageClass);
}

void type metadata completion function for PgQuery_FieldStore._StorageClass()
{
  type metadata completion function for PgQuery_NamedArgExpr._StorageClass();
}

uint64_t PgQuery_FieldStore.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_FieldStore(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_FieldStore._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_FieldStore._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_7;
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
LABEL_7:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_FieldStore.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a3;
  v25 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v22 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  v13 = MEMORY[0x1E0C80A78](Node);
  v24 = (uint64_t)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v22 - v15;
  v17 = *(int *)(type metadata accessor for PgQuery_FieldStore(0) + 20);
  v23 = v3;
  v18 = *(_QWORD *)(v3 + v17);
  outlined init with copy of PgQuery_Alias?(v18 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v19(v10, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v18 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v8, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_7;
  }
  v20 = v24;
  outlined init with take of PgQuery_OidList((uint64_t)v8, v24, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
  if (v4)
    return swift_release();
LABEL_7:
  if (*(_QWORD *)(*(_QWORD *)(v18
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newvals)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v18
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnums)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_FieldStore@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_FieldStore._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_FieldStore()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_FieldStore()
{
  return PgQuery_FieldStore.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_FieldStore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_FieldStore.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_FieldStore()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldStore and conformance PgQuery_FieldStore, type metadata accessor for PgQuery_FieldStore, (uint64_t)&protocol conformance descriptor for PgQuery_FieldStore);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_FieldStore@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_FieldStore._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_FieldStore()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldStore and conformance PgQuery_FieldStore, type metadata accessor for PgQuery_FieldStore, (uint64_t)&protocol conformance descriptor for PgQuery_FieldStore);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_FieldStore()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldStore and conformance PgQuery_FieldStore, type metadata accessor for PgQuery_FieldStore, (uint64_t)&protocol conformance descriptor for PgQuery_FieldStore);
  return Message.hash(into:)();
}

uint64_t PgQuery_RelabelType._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t PgQuery_FieldSelect._StorageClass.__deallocating_deinit(_QWORD *a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v4;

  outlined destroy of (key: String, value: StorableValue)(v4 + *a1, a2);
  outlined destroy of (key: String, value: StorableValue)(v4 + *a3, a4);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_RelabelType._StorageClass()
{
  return type metadata accessor for PgQuery_RelabelType._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RelabelType._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RelabelType._StorageClass);
}

uint64_t PgQuery_RelabelType.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RelabelType, (void (*)(_QWORD))type metadata accessor for PgQuery_RelabelType._StorageClass, specialized PgQuery_RelabelType._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RelabelType.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_RelabelType.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_9;
        case 3:
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_9;
        case 4:
        case 7:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_9;
        case 6:
          lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_9:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RelabelType.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v30 = a2;
  v31 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v26 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  v13 = MEMORY[0x1E0C80A78](Node);
  v28 = (uint64_t)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v26 - v15;
  v17 = *(int *)(type metadata accessor for PgQuery_RelabelType(0) + 20);
  v27 = v3;
  v18 = *(_QWORD *)(v3 + v17);
  outlined init with copy of PgQuery_Alias?(v18 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v20 = v19(v10, 1, Node);
  v34 = a1;
  if (v20 == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    v21 = v29;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    v22 = v29;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v21 = v22;
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v22)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v18 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v8, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v23 = v28;
    outlined init with take of PgQuery_OidList((uint64_t)v8, v28, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
    if (v21)
      return swift_release();
  }
  if (!*(_DWORD *)(v18
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype)
    || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v21))
  {
    if (!*(_DWORD *)(v18
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod)
      || (dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v21))
    {
      if (!*(_DWORD *)(v18
                      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid)
        || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v21))
      {
        if (!*(_QWORD *)(v18
                        + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relabelformat)
          || (v24 = *(_BYTE *)(v18
                             + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relabelformat
                             + 8),
              v32 = *(_QWORD *)(v18
                              + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relabelformat),
              v33 = v24,
              lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm(),
              dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
              !v21))
        {
          if (!*(_DWORD *)(v18
                          + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location)
            || (dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v21))
          {
            swift_release();
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RelabelType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RelabelType._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RelabelType()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RelabelType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_RelabelType.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RelabelType()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RelabelType and conformance PgQuery_RelabelType, type metadata accessor for PgQuery_RelabelType, (uint64_t)&protocol conformance descriptor for PgQuery_RelabelType);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RelabelType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RelabelType._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RelabelType()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RelabelType and conformance PgQuery_RelabelType, type metadata accessor for PgQuery_RelabelType, (uint64_t)&protocol conformance descriptor for PgQuery_RelabelType);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RelabelType()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RelabelType and conformance PgQuery_RelabelType, type metadata accessor for PgQuery_RelabelType, (uint64_t)&protocol conformance descriptor for PgQuery_RelabelType);
  return Message.hash(into:)();
}

uint64_t PgQuery_CoerceViaIO._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_CoerceViaIO._StorageClass()
{
  return type metadata accessor for PgQuery_CoerceViaIO._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CoerceViaIO._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CoerceViaIO._StorageClass);
}

void type metadata completion function for PgQuery_CoerceViaIO._StorageClass()
{
  type metadata completion function for PgQuery_FieldSelect._StorageClass();
}

uint64_t PgQuery_CoerceViaIO.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_CoerceViaIO, (void (*)(_QWORD))type metadata accessor for PgQuery_CoerceViaIO._StorageClass, specialized PgQuery_CoerceViaIO._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CoerceViaIO.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_CoerceViaIO.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 5:
          lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 6:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CoerceViaIO.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = a3;
  v26 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v23 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  v13 = MEMORY[0x1E0C80A78](Node);
  v25 = (uint64_t)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v23 - v15;
  v17 = *(int *)(type metadata accessor for PgQuery_CoerceViaIO(0) + 20);
  v24 = v3;
  v18 = *(_QWORD *)(v3 + v17);
  outlined init with copy of PgQuery_Alias?(v18 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v19(v10, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v18 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v8, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_7;
  }
  v20 = v25;
  outlined init with take of PgQuery_OidList((uint64_t)v8, v25, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
  if (v4)
    return swift_release();
LABEL_7:
  if (*(_DWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat))
  {
    v21 = *(_BYTE *)(v18
                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat
                   + 8);
    v27 = *(_QWORD *)(v18
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat);
    v28 = v21;
    lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CoerceViaIO@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CoerceViaIO._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CoerceViaIO()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CoerceViaIO(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CoerceViaIO.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CoerceViaIO()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceViaIO and conformance PgQuery_CoerceViaIO, type metadata accessor for PgQuery_CoerceViaIO, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceViaIO);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CoerceViaIO@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CoerceViaIO._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CoerceViaIO()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceViaIO and conformance PgQuery_CoerceViaIO, type metadata accessor for PgQuery_CoerceViaIO, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceViaIO);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CoerceViaIO()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceViaIO and conformance PgQuery_CoerceViaIO, type metadata accessor for PgQuery_CoerceViaIO, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceViaIO);
  return Message.hash(into:)();
}

uint64_t PgQuery_ArrayCoerceExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_ArrayCoerceExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elemexpr);
}

uint64_t ObjC metadata update function for PgQuery_ArrayCoerceExpr._StorageClass()
{
  return type metadata accessor for PgQuery_ArrayCoerceExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_ArrayCoerceExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ArrayCoerceExpr._StorageClass);
}

void type metadata completion function for PgQuery_ArrayCoerceExpr._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_ArrayCoerceExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_ArrayCoerceExpr, (void (*)(_QWORD))type metadata accessor for PgQuery_ArrayCoerceExpr._StorageClass, specialized PgQuery_ArrayCoerceExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_ArrayCoerceExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_ArrayCoerceExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_9;
        case 4:
        case 6:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_9;
        case 5:
        case 8:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_9;
        case 7:
          lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_9:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ArrayCoerceExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t Node;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v40 = a3;
  v37 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v36 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v32 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v32 - v11;
  Node = type metadata accessor for PgQuery_Node(0);
  v14 = *(_QWORD *)(Node - 8);
  v15 = MEMORY[0x1E0C80A78](Node);
  v34 = (uint64_t)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v35 = (uint64_t)&v32 - v18;
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v32 - v19;
  v21 = *(int *)(type metadata accessor for PgQuery_ArrayCoerceExpr(0) + 20);
  v33 = v3;
  v22 = *(_QWORD *)(v3 + v21);
  outlined init with copy of PgQuery_Alias?(v22+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v23(v12, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
    v24 = v4;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v20, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v24 = v4;
    outlined destroy of PgQuery_Alias((uint64_t)v20, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v22+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v23(v10, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v25 = (uint64_t)v10;
    v26 = v35;
    outlined init with take of PgQuery_OidList(v25, v35, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v26, type metadata accessor for PgQuery_Node);
    if (v24)
      return swift_release();
  }
  v27 = v36;
  outlined init with copy of PgQuery_Alias?(v22+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elemexpr, v36, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v23((char *)v27, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v27, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_10;
  }
  v28 = v27;
  v29 = v34;
  outlined init with take of PgQuery_OidList(v28, v34, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v29, type metadata accessor for PgQuery_Node);
  if (v24)
    return swift_release();
LABEL_10:
  if (*(_DWORD *)(v22
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v24)
      return swift_release();
  }
  if (*(_DWORD *)(v22
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v24)
      return swift_release();
  }
  if (*(_DWORD *)(v22
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v24)
      return swift_release();
  }
  if (*(_QWORD *)(v22
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat))
  {
    v30 = *(_BYTE *)(v22
                   + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat
                   + 8);
    v38 = *(_QWORD *)(v22
                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat);
    v39 = v30;
    lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v24)
      return swift_release();
  }
  if (*(_DWORD *)(v22
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v24)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ArrayCoerceExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_ArrayCoerceExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ArrayCoerceExpr()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ArrayCoerceExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ArrayCoerceExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ArrayCoerceExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayCoerceExpr and conformance PgQuery_ArrayCoerceExpr, type metadata accessor for PgQuery_ArrayCoerceExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ArrayCoerceExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ArrayCoerceExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ArrayCoerceExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ArrayCoerceExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayCoerceExpr and conformance PgQuery_ArrayCoerceExpr, type metadata accessor for PgQuery_ArrayCoerceExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ArrayCoerceExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ArrayCoerceExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayCoerceExpr and conformance PgQuery_ArrayCoerceExpr, type metadata accessor for PgQuery_ArrayCoerceExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ArrayCoerceExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_ConvertRowtypeExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_ConvertRowtypeExpr._StorageClass()
{
  return type metadata accessor for PgQuery_ConvertRowtypeExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_ConvertRowtypeExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ConvertRowtypeExpr._StorageClass);
}

void type metadata completion function for PgQuery_ConvertRowtypeExpr._StorageClass()
{
  type metadata completion function for PgQuery_NamedArgExpr._StorageClass();
}

uint64_t PgQuery_ConvertRowtypeExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_ConvertRowtypeExpr(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_ConvertRowtypeExpr._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_ConvertRowtypeExpr._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 3:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_7;
        case 4:
          lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_ConvertRowtypeExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = a3;
  v26 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v23 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  v13 = MEMORY[0x1E0C80A78](Node);
  v25 = (uint64_t)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v23 - v15;
  v17 = *(int *)(type metadata accessor for PgQuery_ConvertRowtypeExpr(0) + 20);
  v24 = v3;
  v18 = *(_QWORD *)(v3 + v17);
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v19(v10, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v8, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_7;
  }
  v20 = v25;
  outlined init with take of PgQuery_OidList((uint64_t)v8, v25, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
  if (v4)
    return swift_release();
LABEL_7:
  if (*(_DWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__convertformat))
  {
    v21 = *(_BYTE *)(v18
                   + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__convertformat
                   + 8);
    v27 = *(_QWORD *)(v18
                    + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__convertformat);
    v28 = v21;
    lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ConvertRowtypeExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_ConvertRowtypeExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ConvertRowtypeExpr()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_ConvertRowtypeExpr()
{
  return PgQuery_ConvertRowtypeExpr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ConvertRowtypeExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ConvertRowtypeExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ConvertRowtypeExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConvertRowtypeExpr and conformance PgQuery_ConvertRowtypeExpr, type metadata accessor for PgQuery_ConvertRowtypeExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ConvertRowtypeExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ConvertRowtypeExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ConvertRowtypeExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ConvertRowtypeExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConvertRowtypeExpr and conformance PgQuery_ConvertRowtypeExpr, type metadata accessor for PgQuery_ConvertRowtypeExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ConvertRowtypeExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ConvertRowtypeExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConvertRowtypeExpr and conformance PgQuery_ConvertRowtypeExpr, type metadata accessor for PgQuery_ConvertRowtypeExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ConvertRowtypeExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_CollateExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_CollateExpr._StorageClass()
{
  return type metadata accessor for PgQuery_CollateExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CollateExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CollateExpr._StorageClass);
}

void type metadata completion function for PgQuery_CollateExpr._StorageClass()
{
  type metadata completion function for PgQuery_CollateExpr._StorageClass();
}

{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_CollateExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v5;

  v1 = v0;
  specialized PgQuery_CollateExpr._uniqueStorage()();
  type metadata accessor for PgQuery_CollateExpr(0);
  swift_retain();
  v2 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v3 & 1) == 0)
    {
      switch(v2)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v5 = v1;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          v5 = v1;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 4:
          v5 = v1;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          v1 = v5;
          break;
        default:
          break;
      }
      v2 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_CollateExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a3;
  v25 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v22 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  v13 = MEMORY[0x1E0C80A78](Node);
  v24 = (uint64_t)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v22 - v15;
  v17 = *(int *)(type metadata accessor for PgQuery_CollateExpr(0) + 20);
  v23 = v3;
  v18 = *(_QWORD *)(v3 + v17);
  outlined init with copy of PgQuery_Alias?(v18 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v19(v10, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v18 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v8, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_7;
  }
  v20 = v24;
  outlined init with take of PgQuery_OidList((uint64_t)v8, v24, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
  if (v4)
    return swift_release();
LABEL_7:
  if (*(_DWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collOid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_CollateExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static PgQuery_CollateExpr.== infix(_:_:)(a1, a2, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collOid, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CollateExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CollateExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CollateExpr()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CollateExpr()
{
  return PgQuery_CollateExpr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CollateExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CollateExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CollateExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateExpr and conformance PgQuery_CollateExpr, type metadata accessor for PgQuery_CollateExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CollateExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CollateExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CollateExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CollateExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateExpr and conformance PgQuery_CollateExpr, type metadata accessor for PgQuery_CollateExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CollateExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CollateExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateExpr and conformance PgQuery_CollateExpr, type metadata accessor for PgQuery_CollateExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CollateExpr);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CollateExpr(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CollateExpr, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_CollateExpr.== infix(_:_:)) & 1;
}

uint64_t PgQuery_CaseExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_SubLink._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)&OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args, &OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defresult);
}

uint64_t PgQuery_SubLink._StorageClass.__deallocating_deinit(_QWORD *a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  outlined destroy of (key: String, value: StorableValue)(v4 + *a1, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v4 + *a2, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v4 + *a4, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_CaseExpr._StorageClass()
{
  return type metadata accessor for PgQuery_CaseExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CaseExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CaseExpr._StorageClass);
}

void type metadata completion function for PgQuery_CaseExpr._StorageClass()
{
  type metadata completion function for PgQuery_SubLink._StorageClass();
}

uint64_t PgQuery_CaseExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_CaseExpr, (void (*)(_QWORD))type metadata accessor for PgQuery_CaseExpr._StorageClass, specialized PgQuery_CaseExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CaseExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_CaseExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CaseExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Node;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;

  v33 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v35 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v34 = (char *)&v29 - v9;
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v29 - v10;
  Node = type metadata accessor for PgQuery_Node(0);
  v13 = *(_QWORD *)(Node - 8);
  v14 = MEMORY[0x1E0C80A78](Node);
  v31 = (uint64_t)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v32 = (uint64_t)&v29 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v29 - v18;
  v20 = *(int *)(type metadata accessor for PgQuery_CaseExpr(0) + 20);
  v30 = v3;
  v21 = *(_QWORD *)(v3 + v20);
  outlined init with copy of PgQuery_Alias?(v21 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v22(v11, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
    v23 = (uint64_t)v35;
    v24 = (uint64_t)v34;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v19, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v19, type metadata accessor for PgQuery_Node);
    v23 = (uint64_t)v35;
    v24 = (uint64_t)v34;
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v21
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casetype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v21
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casecollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v21 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v24, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v22((char *)v24, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v24, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v25 = v32;
    outlined init with take of PgQuery_OidList(v24, v32, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v23 = (uint64_t)v35;
    outlined destroy of PgQuery_Alias(v25, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v21
                             + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defresult, v23, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v22((char *)v23, 1, Node) != 1)
  {
    v26 = v23;
    v27 = v31;
    outlined init with take of PgQuery_OidList(v26, v31, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_Node);
    if (!v4)
      goto LABEL_16;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)(v23, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_16:
  if (*(_DWORD *)(v21
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CaseExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CaseExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CaseExpr()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CaseExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CaseExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CaseExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseExpr and conformance PgQuery_CaseExpr, type metadata accessor for PgQuery_CaseExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CaseExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CaseExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CaseExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CaseExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseExpr and conformance PgQuery_CaseExpr, type metadata accessor for PgQuery_CaseExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CaseExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CaseExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseExpr and conformance PgQuery_CaseExpr, type metadata accessor for PgQuery_CaseExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CaseExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_CaseWhen._StorageClass.__deallocating_deinit()
{
  return PgQuery_ArrayCoerceExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, &OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__result);
}

uint64_t PgQuery_ArrayCoerceExpr._StorageClass.__deallocating_deinit(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;

  outlined destroy of (key: String, value: StorableValue)(v3 + *a1, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v3 + *a2, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v3 + *a3, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_CaseWhen._StorageClass()
{
  return type metadata accessor for PgQuery_CaseWhen._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CaseWhen._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CaseWhen._StorageClass);
}

void type metadata completion function for PgQuery_CaseWhen._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_CaseWhen.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  specialized PgQuery_CaseWhen._uniqueStorage()();
  type metadata accessor for PgQuery_CaseWhen(0);
  swift_retain();
  v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 1:
        case 2:
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_CaseWhen.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t Node;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = a3;
  v36 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v34 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v31 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v31 - v12;
  Node = type metadata accessor for PgQuery_Node(0);
  v15 = *(_QWORD *)(Node - 8);
  v16 = MEMORY[0x1E0C80A78](Node);
  v32 = (uint64_t)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v33 = (uint64_t)&v31 - v19;
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v31 - v20;
  v22 = *(int *)(type metadata accessor for PgQuery_CaseWhen(0) + 20);
  v31 = v3;
  v23 = *(_QWORD *)(v3 + v22);
  outlined init with copy of PgQuery_Alias?(v23 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v25 = v24(v13, 1, Node);
  v35 = a1;
  if (v25 == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v13, (uint64_t)v21, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v21, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v23 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v24(v11, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v26 = (uint64_t)v11;
    v27 = v33;
    outlined init with take of PgQuery_OidList(v26, v33, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  v28 = v34;
  outlined init with copy of PgQuery_Alias?(v23 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__result, v34, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v24((char *)v28, 1, Node) != 1)
  {
    v29 = v32;
    outlined init with take of PgQuery_OidList(v28, v32, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v29, type metadata accessor for PgQuery_Node);
    if (!v4)
      goto LABEL_10;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_10:
  if (*(_DWORD *)(v23
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_CaseWhen.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v48 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v44 = (uint64_t)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v46 = (uint64_t)&v43 - v11;
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v43 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v15 = MEMORY[0x1E0C80A78](v14);
  v45 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v43 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v43 - v20;
  v22 = a2 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v47 = v23;
  v24 = (char *)&v43 + *(int *)(v23 + 48) - v20;
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)&v43 - v20, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v22, (uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Node?);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v25(v21, 1, Node) == 1)
  {
    v26 = v25(v24, 1, Node);
    swift_retain();
    swift_retain();
    if (v26 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_8;
    }
LABEL_6:
    v27 = (uint64_t)v21;
LABEL_19:
    outlined destroy of (key: String, value: StorableValue)(v27, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_20;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v25(v24, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_Node);
    goto LABEL_6;
  }
  v28 = v48;
  outlined init with take of PgQuery_OidList((uint64_t)v24, v48, type metadata accessor for PgQuery_Node);
  swift_retain();
  swift_retain();
  v29 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v13, v28, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v28, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v29 & 1) == 0)
    goto LABEL_20;
LABEL_8:
  v30 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
  v31 = v47;
  v32 = (uint64_t)&v19[*(int *)(v47 + 48)];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v30, v32, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v25(v19, 1, Node) == 1)
  {
    if (v25((char *)v32, 1, Node) != 1)
    {
LABEL_18:
      v27 = (uint64_t)v19;
      goto LABEL_19;
    }
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v33 = v46;
    outlined init with copy of PgQuery_Alias?((uint64_t)v19, v46, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v25((char *)v32, 1, Node) == 1)
    {
LABEL_17:
      outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
      goto LABEL_18;
    }
    v34 = v48;
    outlined init with take of PgQuery_OidList(v32, v48, type metadata accessor for PgQuery_Node);
    v35 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v33, v34, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
    if ((v35 & 1) == 0)
    {
LABEL_20:
      swift_release();
      swift_release();
      return 0;
    }
  }
  v36 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__result;
  v19 = v45;
  v37 = (uint64_t)&v45[*(int *)(v31 + 48)];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__result, (uint64_t)v45, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v36, v37, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v25(v19, 1, Node) != 1)
  {
    v33 = v44;
    outlined init with copy of PgQuery_Alias?((uint64_t)v19, v44, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v25((char *)v37, 1, Node) == 1)
      goto LABEL_17;
    v39 = v48;
    outlined init with take of PgQuery_OidList(v37, v48, type metadata accessor for PgQuery_Node);
    v40 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v33, v39, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
    outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
    if ((v40 & 1) != 0)
      goto LABEL_22;
    goto LABEL_20;
  }
  if (v25((char *)v37, 1, Node) != 1)
    goto LABEL_18;
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_22:
  v41 = *(_DWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  v42 = *(_DWORD *)(a2
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  return v41 == v42;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CaseWhen@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CaseWhen._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CaseWhen()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CaseWhen()
{
  return PgQuery_CaseWhen.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CaseWhen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CaseWhen.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CaseWhen()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseWhen and conformance PgQuery_CaseWhen, type metadata accessor for PgQuery_CaseWhen, (uint64_t)&protocol conformance descriptor for PgQuery_CaseWhen);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CaseWhen@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CaseWhen._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CaseWhen()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseWhen and conformance PgQuery_CaseWhen, type metadata accessor for PgQuery_CaseWhen, (uint64_t)&protocol conformance descriptor for PgQuery_CaseWhen);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CaseWhen()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseWhen and conformance PgQuery_CaseWhen, type metadata accessor for PgQuery_CaseWhen, (uint64_t)&protocol conformance descriptor for PgQuery_CaseWhen);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CaseWhen(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CaseWhen, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_CaseWhen.== infix(_:_:)) & 1;
}

uint64_t PgQuery_CaseTestExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_CaseTestExpr._StorageClass()
{
  return type metadata accessor for PgQuery_CaseTestExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CaseTestExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CaseTestExpr._StorageClass);
}

void type metadata completion function for PgQuery_CaseTestExpr._StorageClass()
{
  type metadata completion function for PgQuery_BoolExpr._StorageClass();
}

uint64_t PgQuery_CaseTestExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v5;

  v1 = v0;
  specialized PgQuery_CaseTestExpr._uniqueStorage()();
  type metadata accessor for PgQuery_CaseTestExpr(0);
  swift_retain();
  v2 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v3 & 1) == 0)
    {
      switch(v2)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v5 = v1;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
        case 4:
          v5 = v1;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 3:
          v5 = v1;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          v1 = v5;
          break;
        default:
          break;
      }
      v2 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_CaseTestExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_CaseTestExpr, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CaseTestExpr.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_CaseTestExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  _QWORD v14[4];

  v14[3] = a4;
  v14[1] = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v10 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Node);
    if (v4)
      return result;
  }
  if (!*(_DWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID)
    || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
  {
    if (!*(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod)
      || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
    {
      result = *(unsigned int *)(a1
                               + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation);
      if ((_DWORD)result)
        return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
  }
  return result;
}

BOOL closure #1 in static PgQuery_CaseTestExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  unsigned int v18;
  char v19;
  int v20;
  int v21;
  uint64_t v23;

  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v16 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v15, v16, &demangling cache variable for type metadata for PgQuery_Node?);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v17((uint64_t)v14, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v17(v16, 1, Node) != 1)
    {
      outlined init with take of PgQuery_OidList(v16, (uint64_t)v7, type metadata accessor for PgQuery_Node);
      swift_retain();
      swift_retain();
      v19 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v10, (uint64_t)v7, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v19 & 1) == 0)
        goto LABEL_11;
      goto LABEL_8;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_11;
  }
  v18 = v17(v16, 1, Node);
  swift_retain();
  swift_retain();
  if (v18 != 1)
    goto LABEL_6;
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_8:
  if (*(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod))
  {
    v20 = *(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation);
    swift_release();
    v21 = *(_DWORD *)(a2
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation);
    swift_release();
    return v20 == v21;
  }
LABEL_11:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CaseTestExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CaseTestExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CaseTestExpr()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CaseTestExpr()
{
  return PgQuery_CaseTestExpr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CaseTestExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseTestExpr and conformance PgQuery_CaseTestExpr, type metadata accessor for PgQuery_CaseTestExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CaseTestExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CaseTestExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CaseTestExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CaseTestExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseTestExpr and conformance PgQuery_CaseTestExpr, type metadata accessor for PgQuery_CaseTestExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CaseTestExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CaseTestExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseTestExpr and conformance PgQuery_CaseTestExpr, type metadata accessor for PgQuery_CaseTestExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CaseTestExpr);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CaseTestExpr(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CaseTestExpr, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_CaseTestExpr.== infix(_:_:)) & 1;
}

uint64_t PgQuery_ArrayExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_ArrayExpr._StorageClass()
{
  return type metadata accessor for PgQuery_ArrayExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_ArrayExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ArrayExpr._StorageClass);
}

void type metadata completion function for PgQuery_ArrayExpr._StorageClass()
{
  type metadata completion function for PgQuery_Param._StorageClass();
}

uint64_t PgQuery_ArrayExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_ArrayExpr, (void (*)(_QWORD))type metadata accessor for PgQuery_ArrayExpr._StorageClass, specialized PgQuery_ArrayExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_ArrayExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_ArrayExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 6:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ArrayExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(type metadata accessor for PgQuery_ArrayExpr(0) + 20);
  v16 = v3;
  v13 = *(_QWORD *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayTypeid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayCollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elementTypeid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elements)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_BYTE *)(v13
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__multidims) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ArrayExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_ArrayExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ArrayExpr()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ArrayExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ArrayExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ArrayExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayExpr and conformance PgQuery_ArrayExpr, type metadata accessor for PgQuery_ArrayExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ArrayExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ArrayExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ArrayExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ArrayExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayExpr and conformance PgQuery_ArrayExpr, type metadata accessor for PgQuery_ArrayExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ArrayExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ArrayExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayExpr and conformance PgQuery_ArrayExpr, type metadata accessor for PgQuery_ArrayExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ArrayExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_RowExpr._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_RowExpr._StorageClass()
{
  return type metadata accessor for PgQuery_RowExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RowExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RowExpr._StorageClass);
}

void type metadata completion function for PgQuery_RowExpr._StorageClass()
{
  type metadata completion function for PgQuery_GroupingFunc._StorageClass();
}

uint64_t PgQuery_RowExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RowExpr, (void (*)(_QWORD))type metadata accessor for PgQuery_RowExpr._StorageClass, specialized PgQuery_RowExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RowExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_RowExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 4:
          lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 6:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RowExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(type metadata accessor for PgQuery_RowExpr(0) + 20);
  v17 = v3;
  v13 = *(_QWORD *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowTypeid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowFormat))
  {
    v14 = *(_BYTE *)(v13
                   + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowFormat
                   + 8);
    v18 = *(_QWORD *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowFormat);
    v19 = v14;
    lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RowExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RowExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RowExpr()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RowExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_RowExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RowExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowExpr and conformance PgQuery_RowExpr, type metadata accessor for PgQuery_RowExpr, (uint64_t)&protocol conformance descriptor for PgQuery_RowExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RowExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RowExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RowExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowExpr and conformance PgQuery_RowExpr, type metadata accessor for PgQuery_RowExpr, (uint64_t)&protocol conformance descriptor for PgQuery_RowExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RowExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowExpr and conformance PgQuery_RowExpr, type metadata accessor for PgQuery_RowExpr, (uint64_t)&protocol conformance descriptor for PgQuery_RowExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_RowCompareExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opnos;
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opnos) = MEMORY[0x1E0DEE9D8];
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfamilies;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfamilies) = v7;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollids;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollids) = v7;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__largs;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__largs) = v7;
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rargs;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rargs) = v7;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  v12 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype
                 + 8);
  *(_QWORD *)v5 = *(_QWORD *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype);
  *(_BYTE *)(v5 + 8) = v12;
  *(_QWORD *)(v1 + v6) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opnos);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v8) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfamilies);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v9) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollids);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v10) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__largs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rargs);
  swift_bridgeObjectRetain();
  swift_release();
  *(_QWORD *)(v1 + v11) = v13;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PgQuery_RowCompareExpr._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_RowCompareExpr._StorageClass()
{
  return type metadata accessor for PgQuery_RowCompareExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RowCompareExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RowCompareExpr._StorageClass);
}

void type metadata completion function for PgQuery_RowCompareExpr._StorageClass()
{
  type metadata completion function for PgQuery_RangeTblFunction._StorageClass();
}

void type metadata completion function for PgQuery_RangeTblFunction._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

{
  type metadata completion function for PgQuery_RangeTblFunction._StorageClass();
}

uint64_t PgQuery_RowCompareExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RowCompareExpr, (void (*)(_QWORD))type metadata accessor for PgQuery_RowCompareExpr._StorageClass, PgQuery_RowCompareExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RowCompareExpr.decodeMessage<A>(decoder:));
}

uint64_t PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = *(int *)(a4(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a5(0);
    swift_allocObject();
    v14 = swift_retain();
    *(_QWORD *)(v7 + v13) = a6(v14);
    swift_release();
  }
  v15 = swift_retain();
  a7(v15, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in PgQuery_RowCompareExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 2:
          lazy protocol witness table accessor for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_8;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_8:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RowCompareExpr.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(int *)(type metadata accessor for PgQuery_RowCompareExpr(0) + 20);
  v15 = v0;
  v9 = *(_QWORD *)(v0 + v8);
  outlined init with copy of PgQuery_Alias?(v9+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v3, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v3, &demangling cache variable for type metadata for PgQuery_Node?);
    v10 = v18;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v3, (uint64_t)v7, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    v11 = v18;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v10 = v11;
    if (v11)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
  }
  if (!*(_QWORD *)(v9
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype)
    || (v12 = *(_BYTE *)(v9
                       + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype
                       + 8),
        v16 = *(_QWORD *)(v9
                        + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype),
        v17 = v12,
        lazy protocol witness table accessor for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType(),
        dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v10))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v9
                                + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opnos)
                    + 16)
      || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v9
                                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfamilies)
                      + 16)
        || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
      {
        if (!*(_QWORD *)(*(_QWORD *)(v9
                                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollids)
                        + 16)
          || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
        {
          if (!*(_QWORD *)(*(_QWORD *)(v9
                                      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__largs)
                          + 16)
            || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
          {
            if (!*(_QWORD *)(*(_QWORD *)(v9
                                        + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rargs)
                            + 16)
              || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
            {
              swift_release();
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RowCompareExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RowCompareExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RowCompareExpr()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RowCompareExpr()
{
  return PgQuery_RowCompareExpr.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RowCompareExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowCompareExpr and conformance PgQuery_RowCompareExpr, type metadata accessor for PgQuery_RowCompareExpr, (uint64_t)&protocol conformance descriptor for PgQuery_RowCompareExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RowCompareExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RowCompareExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RowCompareExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowCompareExpr and conformance PgQuery_RowCompareExpr, type metadata accessor for PgQuery_RowCompareExpr, (uint64_t)&protocol conformance descriptor for PgQuery_RowCompareExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RowCompareExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowCompareExpr and conformance PgQuery_RowCompareExpr, type metadata accessor for PgQuery_RowCompareExpr, (uint64_t)&protocol conformance descriptor for PgQuery_RowCompareExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_CoalesceExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_CoalesceExpr._StorageClass()
{
  return type metadata accessor for PgQuery_CoalesceExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CoalesceExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CoalesceExpr._StorageClass);
}

void type metadata completion function for PgQuery_CoalesceExpr._StorageClass()
{
  type metadata completion function for PgQuery_CoalesceExpr._StorageClass();
}

{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_CoalesceExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_CoalesceExpr(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_CoalesceExpr._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_CoalesceExpr._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 2:
        case 3:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_7;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_7;
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_CoalesceExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(type metadata accessor for PgQuery_CoalesceExpr(0) + 20);
  v16 = v3;
  v13 = *(_QWORD *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescetype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescecollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CoalesceExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CoalesceExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CoalesceExpr()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CoalesceExpr()
{
  return PgQuery_CoalesceExpr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CoalesceExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CoalesceExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CoalesceExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoalesceExpr and conformance PgQuery_CoalesceExpr, type metadata accessor for PgQuery_CoalesceExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CoalesceExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CoalesceExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CoalesceExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CoalesceExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoalesceExpr and conformance PgQuery_CoalesceExpr, type metadata accessor for PgQuery_CoalesceExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CoalesceExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CoalesceExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoalesceExpr and conformance PgQuery_CoalesceExpr, type metadata accessor for PgQuery_CoalesceExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CoalesceExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_MinMaxExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_MinMaxExpr._StorageClass()
{
  return type metadata accessor for PgQuery_MinMaxExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_MinMaxExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_MinMaxExpr._StorageClass);
}

void type metadata completion function for PgQuery_MinMaxExpr._StorageClass()
{
  type metadata completion function for PgQuery_Param._StorageClass();
}

uint64_t PgQuery_MinMaxExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_MinMaxExpr, (void (*)(_QWORD))type metadata accessor for PgQuery_MinMaxExpr._StorageClass, specialized PgQuery_MinMaxExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_MinMaxExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_MinMaxExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 5:
          lazy protocol witness table accessor for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_MinMaxExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(type metadata accessor for PgQuery_MinMaxExpr(0) + 20);
  v17 = v3;
  v13 = *(_QWORD *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxtype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op))
  {
    v14 = *(_BYTE *)(v13
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op
                   + 8);
    v18 = *(_QWORD *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op);
    v19 = v14;
    lazy protocol witness table accessor for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_MinMaxExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_MinMaxExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_MinMaxExpr()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_MinMaxExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_MinMaxExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_MinMaxExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MinMaxExpr and conformance PgQuery_MinMaxExpr, type metadata accessor for PgQuery_MinMaxExpr, (uint64_t)&protocol conformance descriptor for PgQuery_MinMaxExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_MinMaxExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_MinMaxExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_MinMaxExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MinMaxExpr and conformance PgQuery_MinMaxExpr, type metadata accessor for PgQuery_MinMaxExpr, (uint64_t)&protocol conformance descriptor for PgQuery_MinMaxExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_MinMaxExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MinMaxExpr and conformance PgQuery_MinMaxExpr, type metadata accessor for PgQuery_MinMaxExpr, (uint64_t)&protocol conformance descriptor for PgQuery_MinMaxExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_SQLValueFunction._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_SQLValueFunction._StorageClass()
{
  return type metadata accessor for PgQuery_SQLValueFunction._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_SQLValueFunction._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SQLValueFunction._StorageClass);
}

void type metadata completion function for PgQuery_SQLValueFunction._StorageClass()
{
  type metadata completion function for PgQuery_CoalesceExpr._StorageClass();
}

uint64_t PgQuery_SQLValueFunction.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_SQLValueFunction(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_SQLValueFunction._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_SQLValueFunction._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 2:
          lazy protocol witness table accessor for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 3:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_7;
        case 4:
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_SQLValueFunction.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(type metadata accessor for PgQuery_SQLValueFunction(0) + 20);
  v17 = v3;
  v13 = *(_QWORD *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op))
  {
    v14 = *(_BYTE *)(v13
                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op
                   + 8);
    v18 = *(_QWORD *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op);
    v19 = v14;
    lazy protocol witness table accessor for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SQLValueFunction@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_SQLValueFunction._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SQLValueFunction()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_SQLValueFunction()
{
  return PgQuery_SQLValueFunction.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_SQLValueFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SQLValueFunction.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SQLValueFunction()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SQLValueFunction and conformance PgQuery_SQLValueFunction, type metadata accessor for PgQuery_SQLValueFunction, (uint64_t)&protocol conformance descriptor for PgQuery_SQLValueFunction);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SQLValueFunction@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SQLValueFunction._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SQLValueFunction()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SQLValueFunction and conformance PgQuery_SQLValueFunction, type metadata accessor for PgQuery_SQLValueFunction, (uint64_t)&protocol conformance descriptor for PgQuery_SQLValueFunction);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SQLValueFunction()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SQLValueFunction and conformance PgQuery_SQLValueFunction, type metadata accessor for PgQuery_SQLValueFunction, (uint64_t)&protocol conformance descriptor for PgQuery_SQLValueFunction);
  return Message.hash(into:)();
}

uint64_t PgQuery_XmlExpr._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v1, 1, 1, Node);
  v3 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op;
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name);
  *v4 = 0;
  v4[1] = 0xE000000000000000;
  v5 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namedArgs) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argNames) = v5;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = v5;
  v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xmloption;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  return v0;
}

uint64_t PgQuery_XmlExpr._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_XmlExpr._StorageClass()
{
  return type metadata accessor for PgQuery_XmlExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_XmlExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_XmlExpr._StorageClass);
}

void type metadata completion function for PgQuery_XmlExpr._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_XmlExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_XmlExpr, (void (*)(_QWORD))type metadata accessor for PgQuery_XmlExpr._StorageClass, specialized PgQuery_XmlExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_XmlExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_XmlExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_13;
        case 2:
          lazy protocol witness table accessor for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp();
          goto LABEL_10;
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_13;
        case 4:
        case 5:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_13;
        case 7:
          lazy protocol witness table accessor for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType();
LABEL_10:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_13;
        case 8:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_13;
        case 9:
        case 10:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_13:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_XmlExpr.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(int *)(type metadata accessor for PgQuery_XmlExpr(0) + 20);
  v18 = v0;
  v9 = *(_QWORD *)(v0 + v8);
  outlined init with copy of PgQuery_Alias?(v9 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v3, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v3, &demangling cache variable for type metadata for PgQuery_Node?);
    v10 = v21;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v3, (uint64_t)v7, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    v11 = v21;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v10 = v11;
    if (v11)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
  }
  if (!*(_QWORD *)(v9
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op)
    || (v12 = *(_BYTE *)(v9
                       + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op
                       + 8),
        v19 = *(_QWORD *)(v9
                        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op),
        v20 = v12,
        lazy protocol witness table accessor for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp(),
        dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v10))
  {
    v13 = *(_QWORD *)(v9
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name
                    + 8);
    v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0)
      v14 = *(_QWORD *)(v9
                      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name) & 0xFFFFFFFFFFFFLL;
    if (!v14
      || (swift_bridgeObjectRetain(),
          dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
          swift_bridgeObjectRelease(),
          !v10))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v9
                                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namedArgs)
                      + 16)
        || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
      {
        if (!*(_QWORD *)(*(_QWORD *)(v9
                                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argNames)
                        + 16)
          || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
        {
          if (!*(_QWORD *)(*(_QWORD *)(v9
                                      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                          + 16)
            || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
          {
            if (!*(_QWORD *)(v9
                            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xmloption)
              || (v15 = *(_BYTE *)(v9
                                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xmloption
                                 + 8),
                  v19 = *(_QWORD *)(v9
                                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xmloption),
                  v20 = v15,
                  lazy protocol witness table accessor for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType(),
                  dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                  !v10))
            {
              if (!*(_DWORD *)(v9
                              + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type)
                || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v10))
              {
                if (!*(_DWORD *)(v9
                                + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod)
                  || (dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v10))
                {
                  if (!*(_DWORD *)(v9
                                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location)
                    || (dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v10))
                  {
                    swift_release();
                    return UnknownStorage.traverse<A>(visitor:)();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_XmlExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_XmlExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_XmlExpr()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_XmlExpr()
{
  return PgQuery_XmlExpr.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_XmlExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlExpr and conformance PgQuery_XmlExpr, type metadata accessor for PgQuery_XmlExpr, (uint64_t)&protocol conformance descriptor for PgQuery_XmlExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_XmlExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_XmlExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_XmlExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlExpr and conformance PgQuery_XmlExpr, type metadata accessor for PgQuery_XmlExpr, (uint64_t)&protocol conformance descriptor for PgQuery_XmlExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_XmlExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlExpr and conformance PgQuery_XmlExpr, type metadata accessor for PgQuery_XmlExpr, (uint64_t)&protocol conformance descriptor for PgQuery_XmlExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_NullTest._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_NullTest._StorageClass()
{
  return type metadata accessor for PgQuery_NullTest._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_NullTest._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_NullTest._StorageClass);
}

void type metadata completion function for PgQuery_NullTest._StorageClass()
{
  type metadata completion function for PgQuery_NamedArgExpr._StorageClass();
}

uint64_t PgQuery_NullTest.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_NullTest(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_NullTest._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_NullTest._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 3:
          lazy protocol witness table accessor for type PgQuery_NullTestType and conformance PgQuery_NullTestType();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 4:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_7;
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_NullTest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = a3;
  v26 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v23 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  v13 = MEMORY[0x1E0C80A78](Node);
  v25 = (uint64_t)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v23 - v15;
  v17 = *(int *)(type metadata accessor for PgQuery_NullTest(0) + 20);
  v24 = v3;
  v18 = *(_QWORD *)(v3 + v17);
  outlined init with copy of PgQuery_Alias?(v18 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v19(v10, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v18 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v8, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_7;
  }
  v20 = v25;
  outlined init with take of PgQuery_OidList((uint64_t)v8, v25, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
  if (v4)
    return swift_release();
LABEL_7:
  if (*(_QWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nulltesttype))
  {
    v21 = *(_BYTE *)(v18
                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nulltesttype
                   + 8);
    v27 = *(_QWORD *)(v18
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nulltesttype);
    v28 = v21;
    lazy protocol witness table accessor for type PgQuery_NullTestType and conformance PgQuery_NullTestType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_BYTE *)(v18
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argisrow) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_NullTest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_NullTest._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_NullTest()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_NullTest()
{
  return PgQuery_NullTest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_NullTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_NullTest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_NullTest()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullTest and conformance PgQuery_NullTest, type metadata accessor for PgQuery_NullTest, (uint64_t)&protocol conformance descriptor for PgQuery_NullTest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_NullTest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_NullTest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_NullTest()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullTest and conformance PgQuery_NullTest, type metadata accessor for PgQuery_NullTest, (uint64_t)&protocol conformance descriptor for PgQuery_NullTest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_NullTest()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullTest and conformance PgQuery_NullTest, type metadata accessor for PgQuery_NullTest, (uint64_t)&protocol conformance descriptor for PgQuery_NullTest);
  return Message.hash(into:)();
}

uint64_t PgQuery_BooleanTest._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_BooleanTest._StorageClass()
{
  return type metadata accessor for PgQuery_BooleanTest._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_BooleanTest._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_BooleanTest._StorageClass);
}

void type metadata completion function for PgQuery_BooleanTest._StorageClass()
{
  type metadata completion function for PgQuery_CollateExpr._StorageClass();
}

uint64_t PgQuery_BooleanTest.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v5;

  v1 = v0;
  specialized PgQuery_BooleanTest._uniqueStorage()();
  type metadata accessor for PgQuery_BooleanTest(0);
  swift_retain();
  v2 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v3 & 1) == 0)
    {
      switch(v2)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v5 = v1;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          lazy protocol witness table accessor for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType();
          v5 = v1;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
          v5 = v1;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          v1 = v5;
          break;
        default:
          break;
      }
      v2 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_BooleanTest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = a3;
  v26 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v23 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  v13 = MEMORY[0x1E0C80A78](Node);
  v25 = (uint64_t)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v23 - v15;
  v17 = *(int *)(type metadata accessor for PgQuery_BooleanTest(0) + 20);
  v24 = v3;
  v18 = *(_QWORD *)(v3 + v17);
  outlined init with copy of PgQuery_Alias?(v18 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v19(v10, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v18 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v8, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_7;
  }
  v20 = v25;
  outlined init with take of PgQuery_OidList((uint64_t)v8, v25, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
  if (v4)
    return swift_release();
LABEL_7:
  if (*(_QWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLtesttype))
  {
    v21 = *(_BYTE *)(v18
                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLtesttype
                   + 8);
    v27 = *(_QWORD *)(v18
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLtesttype);
    v28 = v21;
    lazy protocol witness table accessor for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_BooleanTest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_BooleanTest._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_BooleanTest()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_BooleanTest()
{
  return PgQuery_BooleanTest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_BooleanTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_BooleanTest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_BooleanTest()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BooleanTest and conformance PgQuery_BooleanTest, type metadata accessor for PgQuery_BooleanTest, (uint64_t)&protocol conformance descriptor for PgQuery_BooleanTest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_BooleanTest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_BooleanTest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_BooleanTest()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BooleanTest and conformance PgQuery_BooleanTest, type metadata accessor for PgQuery_BooleanTest, (uint64_t)&protocol conformance descriptor for PgQuery_BooleanTest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_BooleanTest()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BooleanTest and conformance PgQuery_BooleanTest, type metadata accessor for PgQuery_BooleanTest, (uint64_t)&protocol conformance descriptor for PgQuery_BooleanTest);
  return Message.hash(into:)();
}

uint64_t PgQuery_CoerceToDomain._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_CoerceToDomain._StorageClass()
{
  return type metadata accessor for PgQuery_CoerceToDomain._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CoerceToDomain._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CoerceToDomain._StorageClass);
}

void type metadata completion function for PgQuery_RelabelType._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_CoerceToDomain.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_CoerceToDomain, (void (*)(_QWORD))type metadata accessor for PgQuery_CoerceToDomain._StorageClass, specialized PgQuery_CoerceToDomain._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CoerceToDomain.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_CoerceToDomain.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_9;
        case 3:
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_9;
        case 4:
        case 7:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_9;
        case 6:
          lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_9:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CoerceToDomain.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v30 = a2;
  v31 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v26 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  v13 = MEMORY[0x1E0C80A78](Node);
  v28 = (uint64_t)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v26 - v15;
  v17 = *(int *)(type metadata accessor for PgQuery_CoerceToDomain(0) + 20);
  v27 = v3;
  v18 = *(_QWORD *)(v3 + v17);
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v20 = v19(v10, 1, Node);
  v34 = a1;
  if (v20 == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    v21 = v29;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    v22 = v29;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v21 = v22;
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v22)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v8, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v23 = v28;
    outlined init with take of PgQuery_OidList((uint64_t)v8, v28, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
    if (v21)
      return swift_release();
  }
  if (!*(_DWORD *)(v18
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype)
    || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v21))
  {
    if (!*(_DWORD *)(v18
                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod)
      || (dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v21))
    {
      if (!*(_DWORD *)(v18
                      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid)
        || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v21))
      {
        if (!*(_QWORD *)(v18
                        + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coercionformat)
          || (v24 = *(_BYTE *)(v18
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coercionformat
                             + 8),
              v32 = *(_QWORD *)(v18
                              + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coercionformat),
              v33 = v24,
              lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm(),
              dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
              !v21))
        {
          if (!*(_DWORD *)(v18
                          + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location)
            || (dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v21))
          {
            swift_release();
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CoerceToDomain@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CoerceToDomain._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CoerceToDomain()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CoerceToDomain(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CoerceToDomain.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CoerceToDomain()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomain and conformance PgQuery_CoerceToDomain, type metadata accessor for PgQuery_CoerceToDomain, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceToDomain);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CoerceToDomain@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CoerceToDomain._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CoerceToDomain()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomain and conformance PgQuery_CoerceToDomain, type metadata accessor for PgQuery_CoerceToDomain, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceToDomain);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CoerceToDomain()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomain and conformance PgQuery_CoerceToDomain, type metadata accessor for PgQuery_CoerceToDomain, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceToDomain);
  return Message.hash(into:)();
}

uint64_t PgQuery_CoerceToDomainValue._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_CoerceToDomainValue._StorageClass()
{
  return type metadata accessor for PgQuery_CoerceToDomainValue._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CoerceToDomainValue._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CoerceToDomainValue._StorageClass);
}

void type metadata completion function for PgQuery_CoerceToDomainValue._StorageClass()
{
  type metadata completion function for PgQuery_CoalesceExpr._StorageClass();
}

uint64_t PgQuery_CoerceToDomainValue.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_CoerceToDomainValue(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_CoerceToDomainValue._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_CoerceToDomainValue._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 2:
        case 4:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_7;
        case 3:
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_CoerceToDomainValue.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_CoerceToDomainValue, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CoerceToDomainValue.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_CoerceToDomainValue.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  _QWORD v14[4];

  v14[3] = a4;
  v14[1] = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v10 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Node);
    if (v4)
      return result;
  }
  if (!*(_DWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID)
    || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
  {
    if (!*(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod)
      || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
    {
      if (!*(_DWORD *)(a1
                      + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation)
        || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
      {
        result = *(unsigned int *)(a1
                                 + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
        if ((_DWORD)result)
          return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
      }
    }
  }
  return result;
}

BOOL closure #1 in static PgQuery_CoerceToDomainValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  unsigned int v18;
  char v19;
  int v20;
  int v21;
  uint64_t v23;

  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v16 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v15, v16, &demangling cache variable for type metadata for PgQuery_Node?);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v17((uint64_t)v14, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v17(v16, 1, Node) != 1)
    {
      outlined init with take of PgQuery_OidList(v16, (uint64_t)v7, type metadata accessor for PgQuery_Node);
      swift_retain();
      swift_retain();
      v19 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v10, (uint64_t)v7, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v19 & 1) == 0)
        goto LABEL_12;
      goto LABEL_8;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_12;
  }
  v18 = v17(v16, 1, Node);
  swift_retain();
  swift_retain();
  if (v18 != 1)
    goto LABEL_6;
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_8:
  if (*(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation))
  {
    v20 = *(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    v21 = *(_DWORD *)(a2
                    + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    return v20 == v21;
  }
LABEL_12:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CoerceToDomainValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CoerceToDomainValue._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CoerceToDomainValue()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CoerceToDomainValue()
{
  return PgQuery_CoerceToDomainValue.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CoerceToDomainValue()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomainValue and conformance PgQuery_CoerceToDomainValue, type metadata accessor for PgQuery_CoerceToDomainValue, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceToDomainValue);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CoerceToDomainValue@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CoerceToDomainValue._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CoerceToDomainValue()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomainValue and conformance PgQuery_CoerceToDomainValue, type metadata accessor for PgQuery_CoerceToDomainValue, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceToDomainValue);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CoerceToDomainValue()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomainValue and conformance PgQuery_CoerceToDomainValue, type metadata accessor for PgQuery_CoerceToDomainValue, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceToDomainValue);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CoerceToDomainValue(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CoerceToDomainValue, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_CoerceToDomainValue.== infix(_:_:)) & 1;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;

  v3 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_18DC0D8E0;
  v9 = v8 + v7;
  v10 = v8 + v7 + *(int *)(v4 + 48);
  *(_QWORD *)(v8 + v7) = 1;
  *(_QWORD *)v10 = "xpr";
  *(_QWORD *)(v10 + 8) = 3;
  *(_BYTE *)(v10 + 16) = 2;
  v11 = *MEMORY[0x1E0D3EF08];
  v12 = type metadata accessor for _NameMap.NameDescription();
  v13 = *(void (**)(void))(*(_QWORD *)(v12 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v13)(v10, v11, v12);
  v14 = v9 + v6 + *(int *)(v4 + 48);
  *(_QWORD *)(v9 + v6) = 2;
  *(_QWORD *)v14 = "type_id";
  *(_QWORD *)(v14 + 8) = 7;
  *(_BYTE *)(v14 + 16) = 2;
  v13();
  v15 = (_QWORD *)(v9 + 2 * v6);
  v16 = (char *)v15 + *(int *)(v4 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "type_mod";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v13();
  v17 = (_QWORD *)(v9 + 3 * v6);
  v18 = (char *)v17 + *(int *)(v4 + 48);
  *v17 = 4;
  *(_QWORD *)v18 = "collation";
  *((_QWORD *)v18 + 1) = 9;
  v18[16] = 2;
  v13();
  v19 = v9 + 4 * v6 + *(int *)(v4 + 48);
  *(_QWORD *)(v9 + 4 * v6) = 5;
  *(_QWORD *)v19 = "location";
  *(_QWORD *)(v19 + 8) = 8;
  *(_BYTE *)(v19 + 16) = 2;
  v13();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v3;

  v3 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return _NameMap.init()();
}

uint64_t PgQuery_SetToDefault._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_SetToDefault._StorageClass()
{
  return type metadata accessor for PgQuery_SetToDefault._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_SetToDefault._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SetToDefault._StorageClass);
}

uint64_t PgQuery_SetToDefault.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_SetToDefault(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_SetToDefault._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_SetToDefault._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 2:
        case 4:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_7;
        case 3:
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_SetToDefault.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_SetToDefault, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_SetToDefault.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_SetToDefault.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  _QWORD v14[4];

  v14[3] = a4;
  v14[1] = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v10 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Node);
    if (v4)
      return result;
  }
  if (!*(_DWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID)
    || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
  {
    if (!*(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod)
      || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
    {
      if (!*(_DWORD *)(a1
                      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation)
        || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
      {
        result = *(unsigned int *)(a1
                                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
        if ((_DWORD)result)
          return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
      }
    }
  }
  return result;
}

BOOL closure #1 in static PgQuery_SetToDefault.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  unsigned int v18;
  char v19;
  int v20;
  int v21;
  uint64_t v23;

  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v16 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v15, v16, &demangling cache variable for type metadata for PgQuery_Node?);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v17((uint64_t)v14, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v17(v16, 1, Node) != 1)
    {
      outlined init with take of PgQuery_OidList(v16, (uint64_t)v7, type metadata accessor for PgQuery_Node);
      swift_retain();
      swift_retain();
      v19 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v10, (uint64_t)v7, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v19 & 1) == 0)
        goto LABEL_12;
      goto LABEL_8;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_12;
  }
  v18 = v17(v16, 1, Node);
  swift_retain();
  swift_retain();
  if (v18 != 1)
    goto LABEL_6;
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_8:
  if (*(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation))
  {
    v20 = *(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    v21 = *(_DWORD *)(a2
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    return v20 == v21;
  }
LABEL_12:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SetToDefault@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_SetToDefault._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SetToDefault()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_SetToDefault()
{
  return PgQuery_SetToDefault.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SetToDefault()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetToDefault and conformance PgQuery_SetToDefault, type metadata accessor for PgQuery_SetToDefault, (uint64_t)&protocol conformance descriptor for PgQuery_SetToDefault);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SetToDefault@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SetToDefault._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SetToDefault()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetToDefault and conformance PgQuery_SetToDefault, type metadata accessor for PgQuery_SetToDefault, (uint64_t)&protocol conformance descriptor for PgQuery_SetToDefault);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SetToDefault()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetToDefault and conformance PgQuery_SetToDefault, type metadata accessor for PgQuery_SetToDefault, (uint64_t)&protocol conformance descriptor for PgQuery_SetToDefault);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_SetToDefault(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_SetToDefault, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_SetToDefault.== infix(_:_:)) & 1;
}

uint64_t PgQuery_CurrentOfExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_CurrentOfExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_CurrentOfExpr._StorageClass()
{
  return type metadata accessor for PgQuery_CurrentOfExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CurrentOfExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CurrentOfExpr._StorageClass);
}

void type metadata completion function for PgQuery_CurrentOfExpr._StorageClass()
{
  type metadata completion function for PgQuery_BoolExpr._StorageClass();
}

uint64_t PgQuery_CurrentOfExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_CurrentOfExpr(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_CurrentOfExpr._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_CurrentOfExpr._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 2:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_7;
        case 3:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_7;
        case 4:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_CurrentOfExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_CurrentOfExpr, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CurrentOfExpr.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_CurrentOfExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[4];

  v16[3] = a4;
  v16[1] = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v10 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Node);
    if (v4)
      return result;
  }
  if (!*(_DWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cvarno)
    || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
  {
    v14 = *(_QWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorName
                    + 8);
    v15 = HIBYTE(v14) & 0xF;
    if ((v14 & 0x2000000000000000) == 0)
      v15 = *(_QWORD *)(a1
                      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorName) & 0xFFFFFFFFFFFFLL;
    if (!v15
      || (swift_bridgeObjectRetain(),
          dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
          result = swift_bridgeObjectRelease(),
          !v4))
    {
      result = *(unsigned int *)(a1
                               + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorParam);
      if ((_DWORD)result)
        return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    }
  }
  return result;
}

BOOL closure #1 in static PgQuery_CurrentOfExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  unsigned int v18;
  char v19;
  int v20;
  int v21;
  uint64_t v23;

  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v16 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v15, v16, &demangling cache variable for type metadata for PgQuery_Node?);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v17((uint64_t)v14, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v17(v16, 1, Node) != 1)
    {
      outlined init with take of PgQuery_OidList(v16, (uint64_t)v7, type metadata accessor for PgQuery_Node);
      swift_retain();
      swift_retain();
      v19 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v10, (uint64_t)v7, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v19 & 1) == 0)
        goto LABEL_13;
      goto LABEL_8;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_13;
  }
  v18 = v17(v16, 1, Node);
  swift_retain();
  swift_retain();
  if (v18 != 1)
    goto LABEL_6;
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_8:
  if (*(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cvarno) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cvarno)
    && (*(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorName) == *(_QWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorName)
     && *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorName
                  + 8) == *(_QWORD *)(a2
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorName
                                    + 8)
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v20 = *(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorParam);
    swift_release();
    v21 = *(_DWORD *)(a2
                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorParam);
    swift_release();
    return v20 == v21;
  }
LABEL_13:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CurrentOfExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CurrentOfExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CurrentOfExpr()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CurrentOfExpr()
{
  return PgQuery_CurrentOfExpr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CurrentOfExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CurrentOfExpr and conformance PgQuery_CurrentOfExpr, type metadata accessor for PgQuery_CurrentOfExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CurrentOfExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CurrentOfExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CurrentOfExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CurrentOfExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CurrentOfExpr and conformance PgQuery_CurrentOfExpr, type metadata accessor for PgQuery_CurrentOfExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CurrentOfExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CurrentOfExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CurrentOfExpr and conformance PgQuery_CurrentOfExpr, type metadata accessor for PgQuery_CurrentOfExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CurrentOfExpr);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CurrentOfExpr(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CurrentOfExpr, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_CurrentOfExpr.== infix(_:_:)) & 1;
}

uint64_t PgQuery_NextValueExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_NextValueExpr._StorageClass()
{
  return type metadata accessor for PgQuery_NextValueExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_NextValueExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_NextValueExpr._StorageClass);
}

void type metadata completion function for PgQuery_NextValueExpr._StorageClass()
{
  type metadata completion function for PgQuery_NextValueExpr._StorageClass();
}

{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_NextValueExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  specialized PgQuery_NextValueExpr._uniqueStorage()();
  type metadata accessor for PgQuery_NextValueExpr(0);
  swift_retain();
  v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (v1 == 2 || v1 == 3)
      {
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
      v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_NextValueExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t Node;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v14[3] = a2;
  v14[1] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v8 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(int *)(type metadata accessor for PgQuery_NextValueExpr(0) + 20);
  v14[0] = v2;
  v12 = *(_QWORD *)(v2 + v11);
  outlined init with copy of PgQuery_Alias?(v12+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v6, (uint64_t)v10, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
    if (v3)
      return swift_release();
  }
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__seqid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v3)
      return swift_release();
  }
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v3)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_NextValueExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static PgQuery_NextValueExpr.== infix(_:_:)(a1, a2, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__seqid, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_NextValueExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_NextValueExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_NextValueExpr()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_NextValueExpr()
{
  return PgQuery_NextValueExpr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_NextValueExpr(uint64_t a1, uint64_t a2)
{
  return PgQuery_NextValueExpr.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_NextValueExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NextValueExpr and conformance PgQuery_NextValueExpr, type metadata accessor for PgQuery_NextValueExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NextValueExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_NextValueExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_NextValueExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_NextValueExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NextValueExpr and conformance PgQuery_NextValueExpr, type metadata accessor for PgQuery_NextValueExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NextValueExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_NextValueExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NextValueExpr and conformance PgQuery_NextValueExpr, type metadata accessor for PgQuery_NextValueExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NextValueExpr);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_NextValueExpr(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_NextValueExpr, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_NextValueExpr.== infix(_:_:)) & 1;
}

uint64_t PgQuery_InferenceElem._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_InferenceElem._StorageClass()
{
  return type metadata accessor for PgQuery_InferenceElem._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_InferenceElem._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_InferenceElem._StorageClass);
}

uint64_t PgQuery_InferenceElem.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  specialized PgQuery_InferenceElem._uniqueStorage()();
  type metadata accessor for PgQuery_InferenceElem(0);
  swift_retain();
  v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        default:
          break;
      }
      v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_InferenceElem.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a3;
  v25 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v22 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  v13 = MEMORY[0x1E0C80A78](Node);
  v24 = (uint64_t)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v22 - v15;
  v17 = *(int *)(type metadata accessor for PgQuery_InferenceElem(0) + 20);
  v23 = v3;
  v18 = *(_QWORD *)(v3 + v17);
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v19(v10, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v8, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_7;
  }
  v20 = v24;
  outlined init with take of PgQuery_OidList((uint64_t)v8, v24, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
  if (v4)
    return swift_release();
LABEL_7:
  if (*(_DWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infercollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inferopclass))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_InferenceElem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static PgQuery_CollateExpr.== infix(_:_:)(a1, a2, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infercollid, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inferopclass);
}

BOOL closure #1 in static PgQuery_CollateExpr.== infix(_:_:)(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  int v37;
  int v38;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;

  v40 = a6;
  v41 = a5;
  v44 = a4;
  Node = type metadata accessor for PgQuery_Node(0);
  v10 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v43 = (uint64_t)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v42 = (uint64_t)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v40 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v18 = MEMORY[0x1E0C80A78](v17);
  v45 = (uint64_t)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v40 - v20;
  v22 = a1 + *a3;
  v23 = a2 + *a3;
  v24 = (char *)&v40 + *(int *)(v17 + 48) - v20;
  outlined init with copy of PgQuery_Alias?(v22, (uint64_t)&v40 - v20, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v23, (uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Node?);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v25(v21, 1, Node) == 1)
  {
    v26 = v25(v24, 1, Node);
    swift_retain();
    swift_retain();
    v27 = a2;
    if (v26 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_17;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, (uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v25(v24, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    goto LABEL_6;
  }
  v28 = v43;
  outlined init with take of PgQuery_OidList((uint64_t)v24, v43, type metadata accessor for PgQuery_Node);
  swift_retain();
  v27 = a2;
  swift_retain();
  v29 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v16, v28, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v28, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v29 & 1) == 0)
    goto LABEL_17;
LABEL_8:
  v30 = v45;
  v31 = v27 + *v44;
  v32 = v45 + *(int *)(v17 + 48);
  outlined init with copy of PgQuery_Alias?(a1 + *v44, v45, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v31, v32, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v25((char *)v30, 1, Node) != 1)
  {
    v33 = v42;
    outlined init with copy of PgQuery_Alias?(v30, v42, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v25((char *)v32, 1, Node) != 1)
    {
      v34 = v43;
      outlined init with take of PgQuery_OidList(v32, v43, type metadata accessor for PgQuery_Node);
      v35 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v33, v34, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
      outlined destroy of (key: String, value: StorableValue)(v30, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v35 & 1) == 0)
        goto LABEL_17;
      goto LABEL_15;
    }
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
LABEL_13:
    outlined destroy of (key: String, value: StorableValue)(v30, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_17;
  }
  if (v25((char *)v32, 1, Node) != 1)
    goto LABEL_13;
  outlined destroy of (key: String, value: StorableValue)(v30, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_15:
  if (*(_DWORD *)(a1 + *v41) == *(_DWORD *)(v27 + *v41))
  {
    v36 = v40;
    v37 = *(_DWORD *)(a1 + *v40);
    swift_release();
    v38 = *(_DWORD *)(v27 + *v36);
    swift_release();
    return v37 == v38;
  }
LABEL_17:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_InferenceElem@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_InferenceElem._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_InferenceElem()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_InferenceElem()
{
  return PgQuery_InferenceElem.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_InferenceElem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_InferenceElem.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_InferenceElem()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferenceElem and conformance PgQuery_InferenceElem, type metadata accessor for PgQuery_InferenceElem, (uint64_t)&protocol conformance descriptor for PgQuery_InferenceElem);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_InferenceElem@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_InferenceElem._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_InferenceElem()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferenceElem and conformance PgQuery_InferenceElem, type metadata accessor for PgQuery_InferenceElem, (uint64_t)&protocol conformance descriptor for PgQuery_InferenceElem);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_InferenceElem()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferenceElem and conformance PgQuery_InferenceElem, type metadata accessor for PgQuery_InferenceElem, (uint64_t)&protocol conformance descriptor for PgQuery_InferenceElem);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_InferenceElem(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_InferenceElem, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_InferenceElem.== infix(_:_:)) & 1;
}

uint64_t PgQuery_TargetEntry._StorageClass.__deallocating_deinit()
{
  return PgQuery_NamedArgExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr);
}

uint64_t PgQuery_NamedArgExpr._StorageClass.__deallocating_deinit(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  outlined destroy of (key: String, value: StorableValue)(v3 + *a1, a2);
  outlined destroy of (key: String, value: StorableValue)(v3 + *a3, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_TargetEntry._StorageClass()
{
  return type metadata accessor for PgQuery_TargetEntry._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_TargetEntry._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TargetEntry._StorageClass);
}

void type metadata completion function for PgQuery_TargetEntry._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_TargetEntry.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_TargetEntry, (void (*)(_QWORD))type metadata accessor for PgQuery_TargetEntry._StorageClass, specialized PgQuery_TargetEntry._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_TargetEntry.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_TargetEntry.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 3:
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 5:
        case 6:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 8:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_TargetEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_TargetEntry, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_TargetEntry.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_TargetEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v27 = a3;
  v28 = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v25 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  v13 = MEMORY[0x1E0C80A78](Node);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v25 - v16;
  v29 = a1;
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v18(v10, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    v19 = v26;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v17, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    v20 = v26;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v21 = (uint64_t)v17;
    v19 = v20;
    result = outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_Node);
    if (v20)
      return result;
  }
  outlined init with copy of PgQuery_Alias?(v29+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v18(v8, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v15, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
    if (v19)
      return result;
  }
  if (!*(_DWORD *)(v29
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resno)
    || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v19))
  {
    v23 = *(_QWORD *)(v29
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resname
                    + 8);
    v24 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0)
      v24 = *(_QWORD *)(v29
                      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resname) & 0xFFFFFFFFFFFFLL;
    if (!v24
      || (swift_bridgeObjectRetain(),
          dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
          result = swift_bridgeObjectRelease(),
          !v19))
    {
      if (!*(_DWORD *)(v29
                      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ressortgroupref)
        || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v19))
      {
        if (!*(_DWORD *)(v29
                        + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigtbl)
          || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v19))
        {
          result = *(unsigned int *)(v29
                                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigcol);
          if (!(_DWORD)result
            || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v19))
          {
            if (*(_BYTE *)(v29
                          + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resjunk) == 1)
              return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in static PgQuery_TargetEntry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v37 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v36 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v35 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v13 = MEMORY[0x1E0C80A78](v12);
  v38 = (uint64_t)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v35 - v15;
  v17 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v18 = (char *)&v35 + *(int *)(v12 + 48) - v15;
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)&v35 - v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v17, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v19(v16, 1, Node) == 1)
  {
    v20 = v19(v18, 1, Node);
    swift_retain();
    swift_retain();
    v21 = a2;
    if (v20 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  v21 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)v16, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v18, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
LABEL_23:
    swift_release();
    swift_release();
    v33 = 0;
    return v33 & 1;
  }
  v22 = v37;
  outlined init with take of PgQuery_OidList((uint64_t)v18, v37, type metadata accessor for PgQuery_Node);
  swift_retain();
  swift_retain();
  v23 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v11, v22, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v22, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v23 & 1) == 0)
    goto LABEL_23;
LABEL_8:
  v24 = v21
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
  v25 = v38;
  v26 = v38 + *(int *)(v12 + 48);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, v38, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v24, v26, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19((char *)v25, 1, Node) == 1)
  {
    if (v19((char *)v26, 1, Node) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v25, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  v27 = v36;
  outlined init with copy of PgQuery_Alias?(v25, v36, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19((char *)v26, 1, Node) == 1)
  {
    outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_Node);
LABEL_13:
    outlined destroy of (key: String, value: StorableValue)(v25, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_23;
  }
  v28 = v37;
  outlined init with take of PgQuery_OidList(v26, v37, type metadata accessor for PgQuery_Node);
  v29 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v27, v28, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v28, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v25, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v29 & 1) == 0)
    goto LABEL_23;
LABEL_15:
  if (*(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resno) != *(_DWORD *)(v21 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resno)
    || (*(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resname) != *(_QWORD *)(v21 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resname)
     || *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resname
                  + 8) != *(_QWORD *)(v21
                                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resname
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ressortgroupref) != *(_DWORD *)(v21 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ressortgroupref)
    || *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigtbl) != *(_DWORD *)(v21 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigtbl)
    || *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigcol) != *(_DWORD *)(v21 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigcol))
  {
    goto LABEL_23;
  }
  v30 = v21;
  v31 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resjunk);
  swift_release();
  v32 = *(_BYTE *)(v30
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resjunk);
  swift_release();
  v33 = v31 ^ v32 ^ 1;
  return v33 & 1;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_TargetEntry@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_TargetEntry._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_TargetEntry()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_TargetEntry()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TargetEntry and conformance PgQuery_TargetEntry, type metadata accessor for PgQuery_TargetEntry, (uint64_t)&protocol conformance descriptor for PgQuery_TargetEntry);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TargetEntry@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TargetEntry._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_TargetEntry()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TargetEntry and conformance PgQuery_TargetEntry, type metadata accessor for PgQuery_TargetEntry, (uint64_t)&protocol conformance descriptor for PgQuery_TargetEntry);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TargetEntry()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TargetEntry and conformance PgQuery_TargetEntry, type metadata accessor for PgQuery_TargetEntry, (uint64_t)&protocol conformance descriptor for PgQuery_TargetEntry);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_TargetEntry(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_TargetEntry, closure #1 in static PgQuery_TargetEntry.== infix(_:_:)) & 1;
}

uint64_t PgQuery_RangeTblRef.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Integer.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_RangeTblRef);
}

uint64_t PgQuery_Integer.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t result;

  if (!*v4 || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v5))
  {
    a4(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RangeTblRef()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RangeTblRef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblRef and conformance PgQuery_RangeTblRef, type metadata accessor for PgQuery_RangeTblRef, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblRef);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RangeTblRef@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RangeTblRef._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RangeTblRef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblRef and conformance PgQuery_RangeTblRef, type metadata accessor for PgQuery_RangeTblRef, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblRef);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RangeTblRef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblRef and conformance PgQuery_RangeTblRef, type metadata accessor for PgQuery_RangeTblRef, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblRef);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_RangeTblRef(_DWORD *a1, char *a2)
{
  return specialized static PgQuery_RangeTblRef.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_RangeTblRef) & 1;
}

uint64_t PgQuery_JoinExpr._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, &demangling cache variable for type metadata for PgQuery_Alias?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_JoinExpr._StorageClass()
{
  return type metadata accessor for PgQuery_JoinExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_JoinExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_JoinExpr._StorageClass);
}

void type metadata completion function for PgQuery_JoinExpr._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Alias?, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for PgQuery_Alias(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Alias);
}

uint64_t PgQuery_JoinExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_JoinExpr, (void (*)(_QWORD))type metadata accessor for PgQuery_JoinExpr._StorageClass, specialized PgQuery_JoinExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_JoinExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_JoinExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_JoinType and conformance PgQuery_JoinType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 3:
        case 4:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          goto LABEL_10;
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 7:
          type metadata accessor for PgQuery_Alias(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
LABEL_10:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 8:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_JoinExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t Node;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t Alias;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  MEMORY[0x1E0C80A78](v6);
  v44 = (uint64_t)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Alias = type metadata accessor for PgQuery_Alias(0);
  v43 = *(_QWORD *)(Alias - 8);
  MEMORY[0x1E0C80A78](Alias);
  v41 = (uint64_t)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v46 = (uint64_t)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v48 = (uint64_t)&v39 - v13;
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v39 - v14;
  Node = type metadata accessor for PgQuery_Node(0);
  v17 = *(_QWORD *)(Node - 8);
  v18 = MEMORY[0x1E0C80A78](Node);
  v42 = (uint64_t)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v47 = (uint64_t)&v39 - v21;
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v39 - v22;
  v24 = *(int *)(type metadata accessor for PgQuery_JoinExpr(0) + 20);
  v40 = v3;
  v25 = *(_QWORD *)(v3 + v24);
  if (*(_QWORD *)(v25 + 16))
  {
    v26 = *(_BYTE *)(v25 + 24);
    v49 = *(_QWORD *)(v25 + 16);
    v50 = v26;
    lazy protocol witness table accessor for type PgQuery_JoinType and conformance PgQuery_JoinType();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
    v51 = a3;
  }
  else
  {
    v51 = a3;
    swift_retain();
  }
  if (*(_BYTE *)(v25 + 25) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v27 = Node;
    if (v4)
      return swift_release();
  }
  else
  {
    v27 = Node;
  }
  outlined init with copy of PgQuery_Alias?(v25 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v28(v15, 1, v27) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v15, (uint64_t)v23, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v23, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  v29 = v48;
  outlined init with copy of PgQuery_Alias?(v25 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, v48, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v28((char *)v29, 1, v27) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v30 = v29;
    v31 = v47;
    outlined init with take of PgQuery_OidList(v30, v47, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v25
                             + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  v32 = v46;
  outlined init with copy of PgQuery_Alias?(v25 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals, v46, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v28((char *)v32, 1, v27) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v32, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v33 = v32;
    v34 = v42;
    outlined init with take of PgQuery_OidList(v33, v42, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  v35 = v44;
  outlined init with copy of PgQuery_Alias?(v25 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, v44, &demangling cache variable for type metadata for PgQuery_Alias?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v35, 1, Alias) != 1)
  {
    v36 = v35;
    v37 = v41;
    outlined init with take of PgQuery_OidList(v36, v41, type metadata accessor for PgQuery_Alias);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v37, type metadata accessor for PgQuery_Alias);
    if (!v4)
      goto LABEL_23;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)(v35, &demangling cache variable for type metadata for PgQuery_Alias?);
LABEL_23:
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtindex))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_JoinExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_JoinExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_JoinExpr()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_JoinExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_JoinExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_JoinExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_JoinExpr and conformance PgQuery_JoinExpr, type metadata accessor for PgQuery_JoinExpr, (uint64_t)&protocol conformance descriptor for PgQuery_JoinExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_JoinExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_JoinExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_JoinExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_JoinExpr and conformance PgQuery_JoinExpr, type metadata accessor for PgQuery_JoinExpr, (uint64_t)&protocol conformance descriptor for PgQuery_JoinExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_JoinExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_JoinExpr and conformance PgQuery_JoinExpr, type metadata accessor for PgQuery_JoinExpr, (uint64_t)&protocol conformance descriptor for PgQuery_JoinExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_FromExpr._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FromExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_FromExpr._StorageClass()
{
  return type metadata accessor for PgQuery_FromExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_FromExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FromExpr._StorageClass);
}

void type metadata completion function for PgQuery_FromExpr._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_FromExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  specialized PgQuery_FromExpr._uniqueStorage()();
  type metadata accessor for PgQuery_FromExpr(0);
  swift_retain();
  v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (v1 == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_FromExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v10 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v17 = (uint64_t)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(type metadata accessor for PgQuery_FromExpr(0) + 20);
  v18 = v3;
  v19 = a3;
  v13 = *(_QWORD *)(v3 + v12);
  if (*(_QWORD *)(*(_QWORD *)(v13 + 16) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  else
  {
    swift_retain();
  }
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FromExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, Node) != 1)
  {
    v14 = v17;
    outlined init with take of PgQuery_OidList((uint64_t)v8, v17, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v14, type metadata accessor for PgQuery_Node);
    if (!v4)
      goto LABEL_9;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_9:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_FromExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_FromExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_FromExpr()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_FromExpr()
{
  return PgQuery_FromExpr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_FromExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_FromExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_FromExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, type metadata accessor for PgQuery_FromExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FromExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_FromExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_FromExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_FromExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, type metadata accessor for PgQuery_FromExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FromExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_FromExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, type metadata accessor for PgQuery_FromExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FromExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_OnConflictExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 32) = MEMORY[0x1E0DEE9D8];
  v4 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arbiterWhere;
  Node = type metadata accessor for PgQuery_Node(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v6(v4, 1, 1, Node);
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraint;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraint) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictSet;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictSet) = v3;
  v9 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictWhere;
  v6(v1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictWhere, 1, 1, Node);
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelIndex;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelIndex) = 0;
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelTlist;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelTlist) = v3;
  v12 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v1 + 24) = v12;
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arbiterWhere, v4, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraint);
  *(_QWORD *)(v1 + v8) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictSet);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictWhere, v9, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelIndex);
  v13 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelTlist);
  swift_bridgeObjectRetain();
  swift_release();
  *(_QWORD *)(v1 + v11) = v13;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PgQuery_OnConflictExpr._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arbiterWhere, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictWhere, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_OnConflictExpr._StorageClass()
{
  return type metadata accessor for PgQuery_OnConflictExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_OnConflictExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_OnConflictExpr._StorageClass);
}

void type metadata completion function for PgQuery_OnConflictExpr._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_OnConflictExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_OnConflictExpr, (void (*)(_QWORD))type metadata accessor for PgQuery_OnConflictExpr._StorageClass, PgQuery_OnConflictExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_OnConflictExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_OnConflictExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_10;
        case 2:
        case 5:
        case 8:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_10;
        case 3:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_10;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_10;
        case 7:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_10:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_OnConflictExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = a3;
  v26 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v23 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  v13 = MEMORY[0x1E0C80A78](Node);
  v25 = (uint64_t)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v23 - v15;
  v17 = *(int *)(type metadata accessor for PgQuery_OnConflictExpr(0) + 20);
  v24 = v3;
  v18 = *(_QWORD *)(v3 + v17);
  v19 = *(_BYTE *)(v18 + 24);
  if (*(_QWORD *)(v18 + 16))
  {
    v27 = *(_QWORD *)(v18 + 16);
    v28 = v19;
    lazy protocol witness table accessor for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  else
  {
    swift_retain();
  }
  if (*(_QWORD *)(*(_QWORD *)(v18 + 32) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arbiterWhere, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v20(v10, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraint))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v18
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictSet)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictWhere, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v20(v8, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_17;
  }
  v21 = v25;
  outlined init with take of PgQuery_OidList((uint64_t)v8, v25, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_Node);
  if (v4)
    return swift_release();
LABEL_17:
  if (*(_DWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelIndex))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v18
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelTlist)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_OnConflictExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_OnConflictExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_OnConflictExpr()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_OnConflictExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_OnConflictExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_OnConflictExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, type metadata accessor for PgQuery_OnConflictExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OnConflictExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_OnConflictExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_OnConflictExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, type metadata accessor for PgQuery_OnConflictExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_OnConflictExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, type metadata accessor for PgQuery_OnConflictExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_IntoClause._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rel, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__viewQuery, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_IntoClause._StorageClass()
{
  return type metadata accessor for PgQuery_IntoClause._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_IntoClause._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_IntoClause._StorageClass);
}

void type metadata completion function for PgQuery_IntoClause._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for PgQuery_RangeVar(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeVar);
}

uint64_t PgQuery_IntoClause.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_IntoClause, (void (*)(_QWORD))type metadata accessor for PgQuery_IntoClause._StorageClass, specialized PgQuery_IntoClause._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_IntoClause.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_IntoClause.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          goto LABEL_10;
        case 2:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 3:
        case 6:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 5:
          lazy protocol witness table accessor for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
LABEL_10:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 8:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_IntoClause.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t RangeVar;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t Node;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v1);
  v29 = (uint64_t)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v28 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v27 = (uint64_t)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v8 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(int *)(type metadata accessor for PgQuery_IntoClause(0) + 20);
  v26 = v0;
  v12 = *(_QWORD *)(v0 + v11);
  outlined init with copy of PgQuery_Alias?(v12 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rel, (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, RangeVar) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v13 = v33;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v6, (uint64_t)v10, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    swift_retain();
    v14 = v33;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v13 = v14;
    if (v14)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_RangeVar);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_RangeVar);
  }
  v15 = Node;
  if (*(_QWORD *)(*(_QWORD *)(v12
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colNames)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v13)
    {
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  v16 = *(_QWORD *)(v12
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                  + 8);
  v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0)
    v17 = *(_QWORD *)(v12
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v13)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v12
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v13)
      return swift_release();
  }
  if (*(_QWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit))
  {
    v18 = *(_BYTE *)(v12
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit
                   + 8);
    v31 = *(_QWORD *)(v12
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit);
    v32 = v18;
    lazy protocol witness table accessor for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v13)
      return swift_release();
  }
  v19 = *(_QWORD *)(v12
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName
                  + 8);
  v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0)
    v20 = *(_QWORD *)(v12
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName) & 0xFFFFFFFFFFFFLL;
  if (v20)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v13)
      return swift_release();
  }
  v21 = v29;
  outlined init with copy of PgQuery_Alias?(v12+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__viewQuery, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v21, 1, v15) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v21, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v22 = v21;
    v23 = v27;
    outlined init with take of PgQuery_OidList(v22, v27, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
    if (v13)
      return swift_release();
  }
  if (*(_BYTE *)(v12
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipData) != 1
    || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v13))
  {
    swift_release();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_IntoClause@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_IntoClause._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_IntoClause()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_IntoClause()
{
  return PgQuery_IntoClause.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_IntoClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, type metadata accessor for PgQuery_IntoClause, (uint64_t)&protocol conformance descriptor for PgQuery_IntoClause);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_IntoClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_IntoClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_IntoClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, type metadata accessor for PgQuery_IntoClause, (uint64_t)&protocol conformance descriptor for PgQuery_IntoClause);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_IntoClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, type metadata accessor for PgQuery_IntoClause, (uint64_t)&protocol conformance descriptor for PgQuery_IntoClause);
  return Message.hash(into:)();
}

uint64_t PgQuery_RawStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmt, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_RawStmt._StorageClass()
{
  return type metadata accessor for PgQuery_RawStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RawStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RawStmt._StorageClass);
}

uint64_t PgQuery_RawStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  specialized PgQuery_RawStmt._uniqueStorage()();
  type metadata accessor for PgQuery_RawStmt(0);
  swift_retain();
  v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (v1 == 2 || v1 == 3)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_RawStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_MultiAssignRef.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for PgQuery_RawStmt, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmt, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen);
}

uint64_t PgQuery_MultiAssignRef.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Node;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v23 = a7;
  v24 = a6;
  v27 = a3;
  v25 = a1;
  v26 = a2;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v15 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(int *)(a4(0) + 20);
  v22 = v7;
  v19 = *(_QWORD *)(v7 + v18);
  outlined init with copy of PgQuery_Alias?(v19 + *a5, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v13, (uint64_t)v17, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node);
    if (v8)
      return swift_release();
  }
  if (*(_DWORD *)(v19 + *v24))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v8)
      return swift_release();
  }
  if (*(_DWORD *)(v19 + *v23))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v8)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_RawStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static PgQuery_NextValueExpr.== infix(_:_:)(a1, a2, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmt, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RawStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RawStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RawStmt()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_RawStmt()
{
  return PgQuery_RawStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RawStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, type metadata accessor for PgQuery_RawStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RawStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RawStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RawStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RawStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, type metadata accessor for PgQuery_RawStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RawStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RawStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, type metadata accessor for PgQuery_RawStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RawStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_RawStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_RawStmt, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_RawStmt.== infix(_:_:)) & 1;
}

uint64_t PgQuery_Query._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_QWORD *)(v0 + 32) = 0;
  *(_WORD *)(v0 + 40) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__utilityStmt;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultRelation) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasAggs_p) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasWindowFuncs_p) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasTargetSrfs_p) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasSubLinks_p) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasDistinctOn_p) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRecursive_p) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasModifyingCte_p) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasForUpdate_p) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRowSecurity_p) = 0;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cteList) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtable) = v4;
  v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointree;
  v6 = type metadata accessor for PgQuery_FromExpr(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList) = v4;
  v7 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflict;
  v9 = type metadata accessor for PgQuery_OnConflictExpr(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList) = v4;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause) = v4;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupingSets) = v4;
  v3(v0 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingQual, 1, 1, Node);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause) = v4;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__distinctClause) = v4;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause) = v4;
  v3(v0+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset, 1, 1, Node);
  v3(v0 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount, 1, 1, Node);
  v10 = v0
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowMarks) = v4;
  v3(v0+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setOperations, 1, 1, Node);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraintDeps) = v4;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOptions) = v4;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen) = 0;
  return v0;
}

uint64_t PgQuery_Query._StorageClass.deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__utilityStmt, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointree, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflict, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingQual, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setOperations, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PgQuery_Query._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit((void (*)(void))PgQuery_Query._StorageClass.deinit);
}

uint64_t ObjC metadata update function for PgQuery_Query._StorageClass()
{
  return type metadata accessor for PgQuery_Query._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_Query._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Query._StorageClass);
}

void type metadata completion function for PgQuery_Query._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_FromExpr?, (void (*)(uint64_t))type metadata accessor for PgQuery_FromExpr);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_OnConflictExpr?, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictExpr);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for PgQuery_FromExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FromExpr);
}

uint64_t type metadata accessor for PgQuery_OnConflictExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_OnConflictExpr);
}

uint64_t PgQuery_Query.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_Query, (void (*)(_QWORD))type metadata accessor for PgQuery_Query._StorageClass, specialized PgQuery_Query._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_Query.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_Query.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_CmdType and conformance PgQuery_CmdType();
          goto LABEL_12;
        case 2:
          lazy protocol witness table accessor for type PgQuery_QuerySource and conformance PgQuery_QuerySource();
          goto LABEL_12;
        case 3:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 4:
        case 24:
        case 28:
        case 29:
        case 32:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          goto LABEL_14;
        case 5:
        case 35:
        case 36:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 15:
        case 16:
        case 18:
        case 21:
        case 22:
        case 23:
        case 25:
        case 26:
        case 27:
        case 31:
        case 33:
        case 34:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 17:
          type metadata accessor for PgQuery_FromExpr(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, type metadata accessor for PgQuery_FromExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FromExpr);
          goto LABEL_14;
        case 19:
          lazy protocol witness table accessor for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind();
          goto LABEL_12;
        case 20:
          type metadata accessor for PgQuery_OnConflictExpr(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, type metadata accessor for PgQuery_OnConflictExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictExpr);
LABEL_14:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 30:
          lazy protocol witness table accessor for type PgQuery_LimitOption and conformance PgQuery_LimitOption();
LABEL_12:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_Query.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_Query, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_Query.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_Query.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t Node;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t result;
  char v40;
  uint64_t v41;
  int v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(char *, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  MEMORY[0x1E0C80A78](v3);
  v76 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PgQuery_OnConflictExpr(0);
  v73 = *(_QWORD *)(v5 - 8);
  v74 = v5;
  MEMORY[0x1E0C80A78](v5);
  v72 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FromExpr?);
  MEMORY[0x1E0C80A78](v7);
  v77 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for PgQuery_FromExpr(0);
  v9 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78);
  v75 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v65 = (uint64_t)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v68 = (uint64_t)&v61 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v69 = (uint64_t)&v61 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v71 = (uint64_t)&v61 - v19;
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v61 - v20;
  Node = type metadata accessor for PgQuery_Node(0);
  v23 = *(_QWORD *)(Node - 8);
  v24 = MEMORY[0x1E0C80A78](Node);
  v64 = (uint64_t)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v66 = (uint64_t)&v61 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v67 = (uint64_t)&v61 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v70 = (uint64_t)&v61 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v33 = a1;
  v35 = (char *)&v61 - v34;
  v36 = *(_QWORD *)(v33 + 16);
  v81 = v32;
  if (v36)
  {
    v37 = *(_BYTE *)(v33 + 24);
    v79 = v36;
    v80 = v37;
    v38 = v33;
    lazy protocol witness table accessor for type PgQuery_CmdType and conformance PgQuery_CmdType();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1)
      return result;
    v33 = v38;
    Node = v81;
  }
  if (*(_QWORD *)(v33 + 32))
  {
    v40 = *(_BYTE *)(v33 + 40);
    v79 = *(_QWORD *)(v33 + 32);
    v80 = v40;
    v41 = v33;
    lazy protocol witness table accessor for type PgQuery_QuerySource and conformance PgQuery_QuerySource();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1)
      return result;
    v33 = v41;
    Node = v81;
  }
  v42 = *(unsigned __int8 *)(v33 + 41);
  v63 = v33;
  if (v42 == 1)
  {
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v33 = v63;
    if (v1)
      return result;
  }
  outlined init with copy of PgQuery_Alias?(v33+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__utilityStmt, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Node?);
  v62 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v62(v21, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v21, (uint64_t)v35, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v43 = type metadata accessor for PgQuery_Node;
    v44 = (uint64_t)v35;
    if (v1)
      return outlined destroy of PgQuery_Alias(v44, v43);
    outlined destroy of PgQuery_Alias((uint64_t)v35, type metadata accessor for PgQuery_Node);
  }
  v45 = v63;
  if (*(_DWORD *)(v63
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultRelation))
  {
    result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1)
      return result;
    v45 = v63;
  }
  if (*(_BYTE *)(v45
                + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasAggs_p) == 1)
  {
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v45 = v63;
    if (v1)
      return result;
  }
  if (*(_BYTE *)(v45
                + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasWindowFuncs_p) == 1)
  {
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v45 = v63;
    if (v1)
      return result;
  }
  if (*(_BYTE *)(v45
                + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasTargetSrfs_p) == 1)
  {
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v45 = v63;
    if (v1)
      return result;
  }
  if (*(_BYTE *)(v45
                + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasSubLinks_p) == 1)
  {
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v45 = v63;
    if (v1)
      return result;
  }
  if (*(_BYTE *)(v45
                + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasDistinctOn_p) == 1)
  {
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v45 = v63;
    if (v1)
      return result;
  }
  if (*(_BYTE *)(v45
                + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRecursive_p) == 1)
  {
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v45 = v63;
    if (v1)
      return result;
  }
  if (*(_BYTE *)(v45
                + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasModifyingCte_p) == 1)
  {
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v45 = v63;
    if (v1)
      return result;
  }
  if (*(_BYTE *)(v45
                + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasForUpdate_p) == 1)
  {
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v45 = v63;
    if (v1)
      return result;
  }
  if (*(_BYTE *)(v45
                + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRowSecurity_p) == 1)
  {
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v1)
      return result;
    v45 = v63;
  }
  if (*(_QWORD *)(*(_QWORD *)(v45
                             + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cteList)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v45 = v63;
  }
  if (*(_QWORD *)(*(_QWORD *)(v45
                             + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtable)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v45 = v63;
  }
  v46 = v77;
  outlined init with copy of PgQuery_Alias?(v45 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointree, v77, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v46, 1, v78) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v46, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  }
  else
  {
    v47 = v46;
    v48 = v75;
    outlined init with take of PgQuery_OidList(v47, v75, type metadata accessor for PgQuery_FromExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, type metadata accessor for PgQuery_FromExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FromExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v43 = type metadata accessor for PgQuery_FromExpr;
    v44 = v48;
    if (v1)
      return outlined destroy of PgQuery_Alias(v44, v43);
    outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_FromExpr);
  }
  v49 = (uint64_t)v76;
  v50 = v63;
  if (*(_QWORD *)(*(_QWORD *)(v63
                             + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v50 = v63;
  }
  v51 = v74;
  if (*(_QWORD *)(v50
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override))
  {
    v52 = *(_BYTE *)(v50
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override
                   + 8);
    v79 = *(_QWORD *)(v50
                    + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override);
    v80 = v52;
    lazy protocol witness table accessor for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1)
      return result;
    v50 = v63;
  }
  outlined init with copy of PgQuery_Alias?(v50+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflict, v49, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v49, 1, v51) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v49, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
    goto LABEL_57;
  }
  v53 = v49;
  v54 = v72;
  outlined init with take of PgQuery_OidList(v53, v72, type metadata accessor for PgQuery_OnConflictExpr);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, type metadata accessor for PgQuery_OnConflictExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictExpr);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  v43 = type metadata accessor for PgQuery_OnConflictExpr;
  v44 = v54;
  if (v1)
    return outlined destroy of PgQuery_Alias(v44, v43);
  outlined destroy of PgQuery_Alias(v54, type metadata accessor for PgQuery_OnConflictExpr);
LABEL_57:
  v55 = v63;
  if (*(_QWORD *)(*(_QWORD *)(v63
                             + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v55 = v63;
  }
  if (*(_QWORD *)(*(_QWORD *)(v55
                             + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v63
                             + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupingSets)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v56 = v71;
  outlined init with copy of PgQuery_Alias?(v63+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingQual, v71, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v62((char *)v56, 1, v81) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v71, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList(v71, v70, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v1)
      return outlined destroy of PgQuery_Alias(v70, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v70, type metadata accessor for PgQuery_Node);
  }
  if (*(_QWORD *)(*(_QWORD *)(v63
                             + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v63
                             + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__distinctClause)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (!v1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_77;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_77:
  if (*(_QWORD *)(*(_QWORD *)(v63
                             + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v57 = v69;
  outlined init with copy of PgQuery_Alias?(v63+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset, v69, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v62((char *)v57, 1, v81) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v69, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList(v69, v67, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v1)
      return outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_Node);
  }
  v58 = v68;
  outlined init with copy of PgQuery_Alias?(v63+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount, v68, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v62((char *)v58, 1, v81) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v68, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList(v68, v66, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v1)
      return outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
  }
  if (!*(_QWORD *)(v63
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption)
    || (v59 = *(_BYTE *)(v63
                       + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption
                       + 8),
        v79 = *(_QWORD *)(v63
                        + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption),
        v80 = v59,
        lazy protocol witness table accessor for type PgQuery_LimitOption and conformance PgQuery_LimitOption(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (*(_QWORD *)(*(_QWORD *)(v63
                               + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowMarks)
                   + 16))
    {
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      if (v1)
        return swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v60 = v65;
    outlined init with copy of PgQuery_Alias?(v63+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setOperations, v65, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v62((char *)v60, 1, v81) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v65, &demangling cache variable for type metadata for PgQuery_Node?);
    }
    else
    {
      outlined init with take of PgQuery_OidList(v65, v64, type metadata accessor for PgQuery_Node);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      if (v1)
        return outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
    }
    if (*(_QWORD *)(*(_QWORD *)(v63
                               + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraintDeps)
                   + 16))
    {
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      if (v1)
        return swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(*(_QWORD *)(v63
                               + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOptions)
                   + 16))
    {
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      if (v1)
        return swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (!*(_DWORD *)(v63
                    + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation)
      || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
    {
      result = *(unsigned int *)(v63
                               + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen);
      if ((_DWORD)result)
        return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    }
  }
  return result;
}

uint64_t static PgQuery_Query.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_Query, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Query.== infix(_:_:)) & 1;
}

BOOL closure #1 in static PgQuery_Query.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Node;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  int v133;
  int v134;
  unsigned int (*v135)(uint64_t, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;

  v151 = type metadata accessor for PgQuery_OnConflictExpr(0);
  v149 = *(_QWORD *)(v151 - 8);
  MEMORY[0x1E0C80A78](v151);
  v147 = (uint64_t)&v135 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  MEMORY[0x1E0C80A78](v5);
  v150 = (uint64_t)&v135 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_OnConflictExpr?, PgQuery_OnConflictExpr?));
  MEMORY[0x1E0C80A78](v148);
  v152 = (uint64_t)&v135 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PgQuery_FromExpr(0);
  v155 = *(_QWORD *)(v8 - 8);
  v156 = v8;
  MEMORY[0x1E0C80A78](v8);
  v153 = (uint64_t)&v135 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FromExpr?);
  MEMORY[0x1E0C80A78](v10);
  v154 = (uint64_t)&v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_FromExpr?, PgQuery_FromExpr?));
  MEMORY[0x1E0C80A78](v12);
  v157 = (uint64_t)&v135 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v15 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v17 = (char *)&v135 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v135 - v23;
  v25 = MEMORY[0x1E0C80A78](v22);
  v146 = (uint64_t)&v135 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v145 = (uint64_t)&v135 - v28;
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v135 - v29;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v32 = MEMORY[0x1E0C80A78](v31);
  v33 = MEMORY[0x1E0C80A78](v32);
  MEMORY[0x1E0C80A78](v33);
  v35 = MEMORY[0x1E0C80A78]((char *)&v135 - v34);
  v36 = MEMORY[0x1E0C80A78](v35);
  v42 = (char *)&v135 - v38;
  v43 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 24) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(a1 + 16) != v43)
    return 0;
  v44 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(a2 + 40) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(a1 + 32) != v44 || *(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a2 + 41))
    return 0;
  v143 = v37;
  v136 = v36;
  v137 = v41;
  v138 = v24;
  v139 = v39;
  v140 = v21;
  v144 = v17;
  v45 = a1
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__utilityStmt;
  v46 = a1;
  v47 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__utilityStmt;
  v141 = v40;
  v48 = a2;
  v49 = (uint64_t)&v42[*(int *)(v40 + 48)];
  outlined init with copy of PgQuery_Alias?(v45, (uint64_t)&v135 - v38, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v47, v49, &demangling cache variable for type metadata for PgQuery_Node?);
  v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v51 = v50(v42, 1, Node);
  v142 = Node;
  if (v51 == 1)
  {
    v52 = v50((char *)v49, 1, Node);
    swift_retain();
    swift_retain();
    if (v52 == 1)
    {
      v135 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v50;
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v42, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_15;
    }
LABEL_13:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v42, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_25;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v42, (uint64_t)v30, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v50((char *)v49, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v30, type metadata accessor for PgQuery_Node);
    goto LABEL_13;
  }
  v135 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v50;
  v53 = (uint64_t)v144;
  outlined init with take of PgQuery_OidList(v49, (uint64_t)v144, type metadata accessor for PgQuery_Node);
  swift_retain();
  swift_retain();
  v54 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v30, v53, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v53, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v30, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v42, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v54 & 1) == 0)
    goto LABEL_25;
LABEL_15:
  if (*(_DWORD *)(v46
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultRelation) != *(_DWORD *)(v48 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultRelation))
    goto LABEL_25;
  if (*(unsigned __int8 *)(v46
                          + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasAggs_p) != *(unsigned __int8 *)(v48 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasAggs_p))
    goto LABEL_25;
  if (*(unsigned __int8 *)(v46
                          + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasWindowFuncs_p) != *(unsigned __int8 *)(v48 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasWindowFuncs_p))
    goto LABEL_25;
  if (*(unsigned __int8 *)(v46
                          + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasTargetSrfs_p) != *(unsigned __int8 *)(v48 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasTargetSrfs_p))
    goto LABEL_25;
  if (*(unsigned __int8 *)(v46
                          + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasSubLinks_p) != *(unsigned __int8 *)(v48 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasSubLinks_p))
    goto LABEL_25;
  if (*(unsigned __int8 *)(v46
                          + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasDistinctOn_p) != *(unsigned __int8 *)(v48 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasDistinctOn_p))
    goto LABEL_25;
  if (*(unsigned __int8 *)(v46
                          + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRecursive_p) != *(unsigned __int8 *)(v48 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRecursive_p))
    goto LABEL_25;
  if (*(unsigned __int8 *)(v46
                          + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasModifyingCte_p) != *(unsigned __int8 *)(v48 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasModifyingCte_p))
    goto LABEL_25;
  if (*(unsigned __int8 *)(v46
                          + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasForUpdate_p) != *(unsigned __int8 *)(v48 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasForUpdate_p))
    goto LABEL_25;
  if (*(unsigned __int8 *)(v46
                          + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRowSecurity_p) != *(unsigned __int8 *)(v48 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRowSecurity_p))
    goto LABEL_25;
  v56 = *(_QWORD *)(v46
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cteList);
  v57 = v48;
  v58 = *(_QWORD *)(v48
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cteList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v59 = specialized static Array<A>.== infix(_:_:)(v56, v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v59 & 1) == 0)
    goto LABEL_25;
  v60 = *(_QWORD *)(v46
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtable);
  v61 = *(_QWORD *)(v48
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtable);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v62 = specialized static Array<A>.== infix(_:_:)(v60, v61);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v62 & 1) == 0)
    goto LABEL_25;
  v63 = v48
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointree;
  v64 = v157;
  v65 = v157 + *(int *)(v12 + 48);
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointree, v157, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  outlined init with copy of PgQuery_Alias?(v63, v65, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v155 + 48);
  if (v66(v64, 1, v156) == 1)
  {
    if (v66(v65, 1, v156) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v157, &demangling cache variable for type metadata for PgQuery_FromExpr?);
      goto LABEL_36;
    }
LABEL_34:
    outlined destroy of (key: String, value: StorableValue)(v157, &demangling cache variable for type metadata for (PgQuery_FromExpr?, PgQuery_FromExpr?));
    goto LABEL_25;
  }
  outlined init with copy of PgQuery_Alias?(v157, v154, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  if (v66(v65, 1, v156) == 1)
  {
    outlined destroy of PgQuery_Alias(v154, type metadata accessor for PgQuery_FromExpr);
    goto LABEL_34;
  }
  v67 = v153;
  outlined init with take of PgQuery_OidList(v65, v153, type metadata accessor for PgQuery_FromExpr);
  v68 = v154;
  v69 = specialized static PgQuery_FromExpr.== infix(_:_:)(v154, v67);
  outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_FromExpr);
  outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_FromExpr);
  outlined destroy of (key: String, value: StorableValue)(v157, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  if ((v69 & 1) == 0)
    goto LABEL_25;
LABEL_36:
  v70 = *(_QWORD *)(v46
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  v71 = *(_QWORD *)(v57
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v72 = specialized static Array<A>.== infix(_:_:)(v70, v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v72 & 1) == 0)
    goto LABEL_25;
  v73 = *(_QWORD *)(v57
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override);
  if (*(_BYTE *)(v57
                + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override
                + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(v46
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override) != v73)
    goto LABEL_25;
  v74 = v57
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflict;
  v75 = v152;
  v76 = v152 + *(int *)(v148 + 48);
  outlined init with copy of PgQuery_Alias?(v46+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflict, v152, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  outlined init with copy of PgQuery_Alias?(v74, v76, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48);
  if (v77(v75, 1, v151) == 1)
  {
    if (v77(v76, 1, v151) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v152, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
      goto LABEL_47;
    }
LABEL_45:
    outlined destroy of (key: String, value: StorableValue)(v152, &demangling cache variable for type metadata for (PgQuery_OnConflictExpr?, PgQuery_OnConflictExpr?));
    goto LABEL_25;
  }
  outlined init with copy of PgQuery_Alias?(v152, v150, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  if (v77(v76, 1, v151) == 1)
  {
    outlined destroy of PgQuery_Alias(v150, type metadata accessor for PgQuery_OnConflictExpr);
    goto LABEL_45;
  }
  v78 = v147;
  outlined init with take of PgQuery_OidList(v76, v147, type metadata accessor for PgQuery_OnConflictExpr);
  v79 = v150;
  v80 = specialized static PgQuery_OnConflictExpr.== infix(_:_:)(v150, v78);
  outlined destroy of PgQuery_Alias(v78, type metadata accessor for PgQuery_OnConflictExpr);
  outlined destroy of PgQuery_Alias(v79, type metadata accessor for PgQuery_OnConflictExpr);
  outlined destroy of (key: String, value: StorableValue)(v152, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  if ((v80 & 1) == 0)
    goto LABEL_25;
LABEL_47:
  v81 = *(_QWORD *)(v46
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  v82 = *(_QWORD *)(v57
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v83 = specialized static Array<A>.== infix(_:_:)(v81, v82);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v83 & 1) == 0)
    goto LABEL_25;
  v84 = *(_QWORD *)(v46
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause);
  v85 = *(_QWORD *)(v57
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v86 = specialized static Array<A>.== infix(_:_:)(v84, v85);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v86 & 1) == 0)
    goto LABEL_25;
  v87 = *(_QWORD *)(v46
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupingSets);
  v88 = *(_QWORD *)(v57
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupingSets);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v89 = specialized static Array<A>.== infix(_:_:)(v87, v88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v89 & 1) == 0)
    goto LABEL_25;
  v90 = v57
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingQual;
  v91 = v143;
  v92 = v143 + *(int *)(v141 + 48);
  outlined init with copy of PgQuery_Alias?(v46+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingQual, v143, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v90, v92, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v135(v91, 1, v142) == 1)
  {
    if (v135(v92, 1, v142) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v143, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_57;
    }
LABEL_55:
    outlined destroy of (key: String, value: StorableValue)(v143, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_25;
  }
  outlined init with copy of PgQuery_Alias?(v143, v145, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v135(v92, 1, v142) == 1)
  {
    outlined destroy of PgQuery_Alias(v145, type metadata accessor for PgQuery_Node);
    goto LABEL_55;
  }
  v93 = (uint64_t)v144;
  outlined init with take of PgQuery_OidList(v92, (uint64_t)v144, type metadata accessor for PgQuery_Node);
  v94 = v145;
  v95 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v145, v93, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v93, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v94, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v143, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v95 & 1) == 0)
    goto LABEL_25;
LABEL_57:
  v96 = *(_QWORD *)(v46
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause);
  v97 = *(_QWORD *)(v57
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v98 = specialized static Array<A>.== infix(_:_:)(v96, v97);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v98 & 1) == 0)
    goto LABEL_25;
  v99 = *(_QWORD *)(v46
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__distinctClause);
  v100 = *(_QWORD *)(v57
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__distinctClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v101 = specialized static Array<A>.== infix(_:_:)(v99, v100);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v101 & 1) == 0)
    goto LABEL_25;
  v102 = *(_QWORD *)(v46
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause);
  v103 = *(_QWORD *)(v57
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v104 = specialized static Array<A>.== infix(_:_:)(v102, v103);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v104 & 1) == 0)
    goto LABEL_25;
  v105 = v57
       + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset;
  v106 = v136;
  v107 = v136 + *(int *)(v141 + 48);
  outlined init with copy of PgQuery_Alias?(v46+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset, v136, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v105, v107, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v135(v106, 1, v142) == 1)
  {
    if (v135(v107, 1, v142) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v136, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_67;
    }
LABEL_65:
    outlined destroy of (key: String, value: StorableValue)(v136, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_25;
  }
  outlined init with copy of PgQuery_Alias?(v136, v146, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v135(v107, 1, v142) == 1)
  {
    outlined destroy of PgQuery_Alias(v146, type metadata accessor for PgQuery_Node);
    goto LABEL_65;
  }
  v108 = (uint64_t)v144;
  outlined init with take of PgQuery_OidList(v107, (uint64_t)v144, type metadata accessor for PgQuery_Node);
  v109 = v146;
  v110 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v146, v108, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v108, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v109, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v136, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v110 & 1) == 0)
    goto LABEL_25;
LABEL_67:
  v111 = v57
       + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount;
  v112 = v137;
  v113 = v137 + *(int *)(v141 + 48);
  outlined init with copy of PgQuery_Alias?(v46+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount, v137, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v111, v113, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v135(v112, 1, v142) == 1)
  {
    if (v135(v113, 1, v142) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v137, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_74;
    }
LABEL_72:
    outlined destroy of (key: String, value: StorableValue)(v137, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_25;
  }
  outlined init with copy of PgQuery_Alias?(v137, (uint64_t)v138, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v135(v113, 1, v142) == 1)
  {
    outlined destroy of PgQuery_Alias((uint64_t)v138, type metadata accessor for PgQuery_Node);
    goto LABEL_72;
  }
  v114 = (uint64_t)v144;
  outlined init with take of PgQuery_OidList(v113, (uint64_t)v144, type metadata accessor for PgQuery_Node);
  v115 = (uint64_t)v138;
  v116 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v138, v114, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v114, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v115, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v137, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v116 & 1) == 0)
    goto LABEL_25;
LABEL_74:
  v117 = *(_QWORD *)(v57
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption);
  if (*(_BYTE *)(v57
                + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption
                + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(v46
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption) != v117)
    goto LABEL_25;
  v118 = *(_QWORD *)(v46
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowMarks);
  v119 = *(_QWORD *)(v57
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowMarks);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v120 = specialized static Array<A>.== infix(_:_:)(v118, v119);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v120 & 1) == 0)
    goto LABEL_25;
  v121 = v57
       + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setOperations;
  v122 = v139;
  v123 = v139 + *(int *)(v141 + 48);
  outlined init with copy of PgQuery_Alias?(v46+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setOperations, v139, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v121, v123, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v135(v122, 1, v142) != 1)
  {
    outlined init with copy of PgQuery_Alias?(v139, (uint64_t)v140, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v135(v123, 1, v142) == 1)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v140, type metadata accessor for PgQuery_Node);
      goto LABEL_83;
    }
    v124 = (uint64_t)v144;
    outlined init with take of PgQuery_OidList(v123, (uint64_t)v144, type metadata accessor for PgQuery_Node);
    v125 = (uint64_t)v140;
    v126 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v140, v124, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
    outlined destroy of PgQuery_Alias(v124, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v125, type metadata accessor for PgQuery_Node);
    outlined destroy of (key: String, value: StorableValue)(v139, &demangling cache variable for type metadata for PgQuery_Node?);
    if ((v126 & 1) != 0)
      goto LABEL_85;
LABEL_25:
    swift_release();
    swift_release();
    return 0;
  }
  if (v135(v123, 1, v142) != 1)
  {
LABEL_83:
    outlined destroy of (key: String, value: StorableValue)(v139, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_25;
  }
  outlined destroy of (key: String, value: StorableValue)(v139, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_85:
  v127 = *(_QWORD *)(v46
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraintDeps);
  v128 = *(_QWORD *)(v57
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraintDeps);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v129 = specialized static Array<A>.== infix(_:_:)(v127, v128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v129 & 1) == 0)
    goto LABEL_25;
  v130 = *(_QWORD *)(v46
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOptions);
  v131 = *(_QWORD *)(v57
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOptions);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v132 = specialized static Array<A>.== infix(_:_:)(v130, v131);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v132 & 1) == 0
    || *(_DWORD *)(v46
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation) != *(_DWORD *)(v57 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation))
  {
    goto LABEL_25;
  }
  v133 = *(_DWORD *)(v46
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen);
  swift_release();
  v134 = *(_DWORD *)(v57
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen);
  swift_release();
  return v133 == v134;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Query@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_Query._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Query()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Query()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, type metadata accessor for PgQuery_Query, (uint64_t)&protocol conformance descriptor for PgQuery_Query);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Query@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Query._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Query()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, type metadata accessor for PgQuery_Query, (uint64_t)&protocol conformance descriptor for PgQuery_Query);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Query()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, type metadata accessor for PgQuery_Query, (uint64_t)&protocol conformance descriptor for PgQuery_Query);
  return Message.hash(into:)();
}

uint64_t PgQuery_InsertStmt._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectStmt, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictClause, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, &demangling cache variable for type metadata for PgQuery_WithClause?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_InsertStmt._StorageClass()
{
  return type metadata accessor for PgQuery_InsertStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_InsertStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_InsertStmt._StorageClass);
}

void type metadata completion function for PgQuery_InsertStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_OnConflictClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictClause);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_WithClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
        if (v3 <= 0x3F)
          swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t type metadata accessor for PgQuery_OnConflictClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_OnConflictClause);
}

uint64_t type metadata accessor for PgQuery_WithClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_WithClause);
}

uint64_t PgQuery_InsertStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_InsertStmt, (void (*)(_QWORD))type metadata accessor for PgQuery_InsertStmt._StorageClass, specialized PgQuery_InsertStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_InsertStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_InsertStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          goto LABEL_10;
        case 2:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          goto LABEL_10;
        case 4:
          type metadata accessor for PgQuery_OnConflictClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, type metadata accessor for PgQuery_OnConflictClause, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictClause);
          goto LABEL_10;
        case 6:
          type metadata accessor for PgQuery_WithClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, type metadata accessor for PgQuery_WithClause, (uint64_t)&protocol conformance descriptor for PgQuery_WithClause);
LABEL_10:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 7:
          lazy protocol witness table accessor for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_InsertStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t RangeVar;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t Node;

  v48 = a2;
  v49 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  MEMORY[0x1E0C80A78](v4);
  v40 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for PgQuery_WithClause(0);
  v39 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v38 = (uint64_t)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  MEMORY[0x1E0C80A78](v7);
  v45 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for PgQuery_OnConflictClause(0);
  v44 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v42 = (uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v13 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v43 = (uint64_t)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v19 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(int *)(type metadata accessor for PgQuery_InsertStmt(0) + 20);
  v37 = v3;
  v23 = *(_QWORD *)(v3 + v22);
  outlined init with copy of PgQuery_Alias?(v23+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v17, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, RangeVar) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v17, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v24 = v47;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v17, (uint64_t)v21, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    swift_retain();
    v25 = v47;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v24 = v25;
    if (v25)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v21, type metadata accessor for PgQuery_RangeVar);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v21, type metadata accessor for PgQuery_RangeVar);
  }
  v26 = Node;
  if (*(_QWORD *)(*(_QWORD *)(v23
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v24)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v23+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectStmt, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v26) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v27 = v43;
    outlined init with take of PgQuery_OidList((uint64_t)v12, v43, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_Node);
    if (v24)
      return swift_release();
  }
  v28 = v45;
  outlined init with copy of PgQuery_Alias?(v23+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictClause, v45, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v28, 1, v46) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  }
  else
  {
    v29 = v28;
    v30 = v42;
    outlined init with take of PgQuery_OidList(v29, v42, type metadata accessor for PgQuery_OnConflictClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, type metadata accessor for PgQuery_OnConflictClause, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_OnConflictClause);
    if (v24)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v23
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v24)
      return swift_release();
  }
  v31 = v40;
  outlined init with copy of PgQuery_Alias?(v23+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, v40, &demangling cache variable for type metadata for PgQuery_WithClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v31, 1, v41) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v31, &demangling cache variable for type metadata for PgQuery_WithClause?);
  }
  else
  {
    v32 = v31;
    v33 = v38;
    outlined init with take of PgQuery_OidList(v32, v38, type metadata accessor for PgQuery_WithClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, type metadata accessor for PgQuery_WithClause, (uint64_t)&protocol conformance descriptor for PgQuery_WithClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_WithClause);
    if (v24)
      return swift_release();
  }
  if (!*(_QWORD *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override)
    || (v34 = *(_BYTE *)(v23
                       + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override
                       + 8),
        v50 = *(_QWORD *)(v23
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override),
        v51 = v34,
        lazy protocol witness table accessor for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind(),
        dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v24))
  {
    swift_release();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_InsertStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_InsertStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_InsertStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_InsertStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_InsertStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_InsertStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InsertStmt and conformance PgQuery_InsertStmt, type metadata accessor for PgQuery_InsertStmt, (uint64_t)&protocol conformance descriptor for PgQuery_InsertStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_InsertStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_InsertStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_InsertStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InsertStmt and conformance PgQuery_InsertStmt, type metadata accessor for PgQuery_InsertStmt, (uint64_t)&protocol conformance descriptor for PgQuery_InsertStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_InsertStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InsertStmt and conformance PgQuery_InsertStmt, type metadata accessor for PgQuery_InsertStmt, (uint64_t)&protocol conformance descriptor for PgQuery_InsertStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_DeleteStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t RangeVar;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v6, 1, 1, RangeVar);
  v8 = MEMORY[0x1E0DEE9D8];
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause) = MEMORY[0x1E0DEE9D8];
  v10 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v10, 1, 1, Node);
  v12 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList) = v8;
  v13 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  v14 = type metadata accessor for PgQuery_WithClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  *(_QWORD *)(v1 + v9) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v10, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_QWORD *)(v1 + v12) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_WithClause?);
  swift_release();
  outlined assign with take of PgQuery_Node?((uint64_t)v5, v13, &demangling cache variable for type metadata for PgQuery_WithClause?);
  return v1;
}

uint64_t PgQuery_DeleteStmt._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, &demangling cache variable for type metadata for PgQuery_WithClause?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_DeleteStmt._StorageClass()
{
  return type metadata accessor for PgQuery_DeleteStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_DeleteStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DeleteStmt._StorageClass);
}

void type metadata completion function for PgQuery_DeleteStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_WithClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_DeleteStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(int *)(type metadata accessor for PgQuery_DeleteStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_DeleteStmt._StorageClass(0);
    swift_allocObject();
    v3 = swift_retain();
    *(_QWORD *)(v0 + v2) = PgQuery_DeleteStmt._StorageClass.init(copying:)(v3);
    swift_release();
  }
  swift_retain();
  v4 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v5 & 1) == 0)
    {
      switch(v4)
      {
        case 1:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          goto LABEL_7;
        case 2:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          goto LABEL_7;
        case 5:
          type metadata accessor for PgQuery_WithClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, type metadata accessor for PgQuery_WithClause, (uint64_t)&protocol conformance descriptor for PgQuery_WithClause);
LABEL_7:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      v4 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_DeleteStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t Node;

  v36 = a2;
  v37 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  MEMORY[0x1E0C80A78](v5);
  v32 = (uint64_t)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for PgQuery_WithClause(0);
  v31 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v29 = (uint64_t)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v35 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v34 = (uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(int *)(type metadata accessor for PgQuery_DeleteStmt(0) + 20);
  v30 = v3;
  v20 = *(_QWORD *)(v3 + v19);
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RangeVar) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v21 = Node;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v14, (uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
    v21 = Node;
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v20
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v10, 1, v21) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v22 = (uint64_t)v10;
    v23 = v34;
    outlined init with take of PgQuery_OidList(v22, v34, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v20
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  v24 = v32;
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, v32, &demangling cache variable for type metadata for PgQuery_WithClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v24, 1, v33) != 1)
  {
    v25 = v24;
    v26 = v29;
    outlined init with take of PgQuery_OidList(v25, v29, type metadata accessor for PgQuery_WithClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, type metadata accessor for PgQuery_WithClause, (uint64_t)&protocol conformance descriptor for PgQuery_WithClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v26, type metadata accessor for PgQuery_WithClause);
    if (!v4)
      goto LABEL_15;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)(v24, &demangling cache variable for type metadata for PgQuery_WithClause?);
LABEL_15:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DeleteStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_DeleteStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DeleteStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DeleteStmt()
{
  return PgQuery_DeleteStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DeleteStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_DeleteStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DeleteStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeleteStmt and conformance PgQuery_DeleteStmt, type metadata accessor for PgQuery_DeleteStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeleteStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DeleteStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DeleteStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DeleteStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeleteStmt and conformance PgQuery_DeleteStmt, type metadata accessor for PgQuery_DeleteStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeleteStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DeleteStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeleteStmt and conformance PgQuery_DeleteStmt, type metadata accessor for PgQuery_DeleteStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeleteStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_UpdateStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t RangeVar;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v6, 1, 1, RangeVar);
  v8 = MEMORY[0x1E0DEE9D8];
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList) = MEMORY[0x1E0DEE9D8];
  v10 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v10, 1, 1, Node);
  v12 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause) = v8;
  v13 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList) = v8;
  v14 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  v15 = type metadata accessor for PgQuery_WithClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  *(_QWORD *)(v1 + v9) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v10, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_QWORD *)(v1 + v12) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v13) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_WithClause?);
  swift_release();
  outlined assign with take of PgQuery_Node?((uint64_t)v5, v14, &demangling cache variable for type metadata for PgQuery_WithClause?);
  return v1;
}

uint64_t PgQuery_UpdateStmt._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, &demangling cache variable for type metadata for PgQuery_WithClause?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_UpdateStmt._StorageClass()
{
  return type metadata accessor for PgQuery_UpdateStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_UpdateStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_UpdateStmt._StorageClass);
}

void type metadata completion function for PgQuery_UpdateStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_WithClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_UpdateStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_UpdateStmt, (void (*)(_QWORD))type metadata accessor for PgQuery_UpdateStmt._StorageClass, PgQuery_UpdateStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_UpdateStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_UpdateStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          goto LABEL_5;
        case 2:
        case 4:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          goto LABEL_5;
        case 6:
          type metadata accessor for PgQuery_WithClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, type metadata accessor for PgQuery_WithClause, (uint64_t)&protocol conformance descriptor for PgQuery_WithClause);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_UpdateStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t Node;

  v38 = a2;
  v39 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  MEMORY[0x1E0C80A78](v4);
  v33 = (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for PgQuery_WithClause(0);
  v32 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v30 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v36 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(int *)(type metadata accessor for PgQuery_UpdateStmt(0) + 20);
  v31 = v3;
  v20 = *(_QWORD *)(v3 + v19);
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RangeVar);
  v35 = v11;
  if (v21 == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v22 = Node;
    v23 = v37;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v14, (uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    swift_retain();
    v24 = v37;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v23 = v24;
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
    v22 = Node;
    if (v24)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v20
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v23)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, (uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v9, 1, v22) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v25 = (uint64_t)v35;
    outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v35, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v25, type metadata accessor for PgQuery_Node);
    if (v23)
      return swift_release();
  }
  if (!*(_QWORD *)(*(_QWORD *)(v20
                              + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause)
                  + 16)
    || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v23))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v20
                                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList)
                    + 16)
      || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v23))
    {
      v26 = v33;
      outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, v33, &demangling cache variable for type metadata for PgQuery_WithClause?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v26, 1, v34) == 1)
      {
        outlined destroy of (key: String, value: StorableValue)(v26, &demangling cache variable for type metadata for PgQuery_WithClause?);
LABEL_18:
        swift_release();
        return UnknownStorage.traverse<A>(visitor:)();
      }
      v27 = v26;
      v28 = v30;
      outlined init with take of PgQuery_OidList(v27, v30, type metadata accessor for PgQuery_WithClause);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, type metadata accessor for PgQuery_WithClause, (uint64_t)&protocol conformance descriptor for PgQuery_WithClause);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      outlined destroy of PgQuery_Alias(v28, type metadata accessor for PgQuery_WithClause);
      if (!v23)
        goto LABEL_18;
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_UpdateStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_UpdateStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_UpdateStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_UpdateStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_UpdateStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_UpdateStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UpdateStmt and conformance PgQuery_UpdateStmt, type metadata accessor for PgQuery_UpdateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_UpdateStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_UpdateStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_UpdateStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_UpdateStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UpdateStmt and conformance PgQuery_UpdateStmt, type metadata accessor for PgQuery_UpdateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_UpdateStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_UpdateStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UpdateStmt and conformance PgQuery_UpdateStmt, type metadata accessor for PgQuery_UpdateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_UpdateStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_SelectStmt._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t IntoClause;
  uint64_t v4;
  uint64_t Node;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t SelectStmt;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
  v2 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__intoClause;
  IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(IntoClause - 8) + 56))(v2, 1, 1, IntoClause);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList) = v1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause) = v1;
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  Node = type metadata accessor for PgQuery_Node(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v6(v4, 1, 1, Node);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause) = v1;
  v6(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingClause, 1, 1, Node);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause) = v1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists) = v1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause) = v1;
  v6(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset, 1, 1, Node);
  v6(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount, 1, 1, Node);
  v7 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lockingClause) = v1;
  v8 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  v9 = type metadata accessor for PgQuery_WithClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = v0
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__all) = 0;
  v11 = v0
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
  SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(SelectStmt - 8) + 56);
  v13(v11, 1, 1, SelectStmt);
  v13(v0 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, 1, 1, SelectStmt);
  return v0;
}

uint64_t PgQuery_SelectStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t IntoClause;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Node;
  void (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t SelectStmt;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SelectStmt?);
  MEMORY[0x1E0C80A78](v3);
  v39 = (uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 16) = MEMORY[0x1E0DEE9D8];
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__intoClause;
  v27 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__intoClause;
  IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(IntoClause - 8) + 56))(v6, 1, 1, IntoClause);
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList) = v5;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause) = v5;
  v10 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  v28 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(void (**)(void))(*(_QWORD *)(Node - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12)(v10, 1, 1, Node);
  v13 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause) = v5;
  v30 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingClause;
  v12();
  v29 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause) = v5;
  v31 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists) = v5;
  v32 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause) = v5;
  v37 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset;
  v12();
  v36 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount;
  v12();
  v14 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v34 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lockingClause;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lockingClause) = v5;
  v15 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  v38 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  v16 = type metadata accessor for PgQuery_WithClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op;
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  v35 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__all;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__all) = 0;
  v18 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
  v33 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
  SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(SelectStmt - 8) + 56);
  v20(v18, 1, 1, SelectStmt);
  v21 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg;
  v20(v1 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, 1, 1, SelectStmt);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__intoClause, v27, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  *(_QWORD *)(v1 + v8) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v9) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v28, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_QWORD *)(v1 + v13) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingClause, v30, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_QWORD *)(v1 + v29) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v31) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v32) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset, v37, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount, v36, &demangling cache variable for type metadata for PgQuery_Node?);
  v22 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption
                 + 8);
  *(_QWORD *)v14 = *(_QWORD *)(a1
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption);
  *(_BYTE *)(v14 + 8) = v22;
  *(_QWORD *)(v1 + v34) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lockingClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, v38, &demangling cache variable for type metadata for PgQuery_WithClause?);
  v23 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op
                 + 8);
  *(_QWORD *)v17 = *(_QWORD *)(a1
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op);
  *(_BYTE *)(v17 + 8) = v23;
  *(_BYTE *)(v1 + v35) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__all);
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, v33, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  v24 = v39;
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, v39, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  swift_release();
  outlined assign with take of PgQuery_Node?(v24, v21, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  return v1;
}

uint64_t PgQuery_SelectStmt._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__intoClause, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingClause, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, &demangling cache variable for type metadata for PgQuery_WithClause?);
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  return v0;
}

uint64_t PgQuery_SelectStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit((void (*)(void))PgQuery_SelectStmt._StorageClass.deinit);
}

uint64_t ObjC metadata update function for PgQuery_SelectStmt._StorageClass()
{
  return type metadata accessor for PgQuery_SelectStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_SelectStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SelectStmt._StorageClass);
}

void type metadata completion function for PgQuery_SelectStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_IntoClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_IntoClause);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_WithClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_SelectStmt?, (void (*)(uint64_t))type metadata accessor for PgQuery_SelectStmt);
        if (v3 <= 0x3F)
          swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t type metadata accessor for PgQuery_IntoClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_IntoClause);
}

uint64_t type metadata accessor for PgQuery_SelectStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SelectStmt);
}

uint64_t PgQuery_SelectStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_SelectStmt, (void (*)(_QWORD))type metadata accessor for PgQuery_SelectStmt._StorageClass, PgQuery_SelectStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_SelectStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_SelectStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
        case 4:
        case 6:
        case 8:
        case 9:
        case 10:
        case 14:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_15;
        case 2:
          type metadata accessor for PgQuery_IntoClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, type metadata accessor for PgQuery_IntoClause, (uint64_t)&protocol conformance descriptor for PgQuery_IntoClause);
          goto LABEL_14;
        case 5:
        case 7:
        case 11:
        case 12:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          goto LABEL_14;
        case 13:
          lazy protocol witness table accessor for type PgQuery_LimitOption and conformance PgQuery_LimitOption();
          goto LABEL_11;
        case 15:
          type metadata accessor for PgQuery_WithClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, type metadata accessor for PgQuery_WithClause, (uint64_t)&protocol conformance descriptor for PgQuery_WithClause);
          goto LABEL_14;
        case 16:
          lazy protocol witness table accessor for type PgQuery_SetOperation and conformance PgQuery_SetOperation();
LABEL_11:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_15;
        case 17:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_15;
        case 18:
        case 19:
          type metadata accessor for PgQuery_SelectStmt(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, type metadata accessor for PgQuery_SelectStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SelectStmt);
LABEL_14:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_15:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_SelectStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t SelectStmt;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Node;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t IntoClause;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;

  v91 = a3;
  v88 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SelectStmt?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v79 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v75 = (char *)&v66 - v8;
  SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
  v69 = *(_QWORD *)(SelectStmt - 8);
  v10 = MEMORY[0x1E0C80A78](SelectStmt);
  v66 = (uint64_t)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v67 = (uint64_t)&v66 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  MEMORY[0x1E0C80A78](v13);
  v72 = (uint64_t)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for PgQuery_WithClause(0);
  v71 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v70 = (uint64_t)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v78 = (uint64_t)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v80 = (uint64_t)&v66 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v83 = (uint64_t)&v66 - v22;
  MEMORY[0x1E0C80A78](v21);
  v86 = (uint64_t)&v66 - v23;
  Node = type metadata accessor for PgQuery_Node(0);
  v85 = *(_QWORD *)(Node - 8);
  v25 = MEMORY[0x1E0C80A78](Node);
  v76 = (uint64_t)&v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v77 = (uint64_t)&v66 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v82 = (uint64_t)&v66 - v30;
  MEMORY[0x1E0C80A78](v29);
  v84 = (uint64_t)&v66 - v31;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_IntoClause?);
  MEMORY[0x1E0C80A78](v32);
  v34 = (char *)&v66 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  v36 = *(_QWORD *)(IntoClause - 8);
  MEMORY[0x1E0C80A78](IntoClause);
  v38 = (char *)&v66 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = SelectStmt;
  v39 = *(int *)(SelectStmt + 20);
  v68 = v3;
  v40 = *(char **)(v3 + v39);
  if (*(_QWORD *)(*((_QWORD *)v40 + 2) + 16))
  {
    v87 = v38;
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v4)
      goto LABEL_37;
    v81 = Node;
    swift_bridgeObjectRelease();
    v38 = v87;
  }
  else
  {
    v81 = Node;
    swift_retain();
  }
  v87 = v40;
  outlined init with copy of PgQuery_Alias?((uint64_t)&v40[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__intoClause], (uint64_t)v34, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, IntoClause) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_IntoClause?);
    v41 = v4;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v34, (uint64_t)v38, type metadata accessor for PgQuery_IntoClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, type metadata accessor for PgQuery_IntoClause, (uint64_t)&protocol conformance descriptor for PgQuery_IntoClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v41 = v4;
    v42 = type metadata accessor for PgQuery_IntoClause;
    v43 = (uint64_t)v38;
    if (v4)
    {
LABEL_9:
      outlined destroy of PgQuery_Alias(v43, v42);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v38, type metadata accessor for PgQuery_IntoClause);
  }
  v44 = v87;
  v45 = v81;
  if (*(_QWORD *)(*(_QWORD *)&v87[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList]
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v41)
      goto LABEL_37;
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)&v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause]
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v41)
      goto LABEL_37;
    swift_bridgeObjectRelease();
  }
  v46 = v86;
  outlined init with copy of PgQuery_Alias?((uint64_t)&v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause], v86, &demangling cache variable for type metadata for PgQuery_Node?);
  v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
  if (v47(v46, 1, v45) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v46, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v48 = v84;
    outlined init with take of PgQuery_OidList(v46, v84, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v41)
      goto LABEL_27;
    outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Node);
  }
  if (*(_QWORD *)(*(_QWORD *)&v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause]
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v41)
      goto LABEL_37;
    swift_bridgeObjectRelease();
  }
  v49 = v83;
  outlined init with copy of PgQuery_Alias?((uint64_t)&v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingClause], v83, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v47(v49, 1, v45) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v49, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v48 = v82;
    outlined init with take of PgQuery_OidList(v49, v82, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v41)
      goto LABEL_27;
    outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Node);
  }
  if (*(_QWORD *)(*(_QWORD *)&v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause]
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v41)
      goto LABEL_37;
    swift_bridgeObjectRelease();
  }
  if (!*(_QWORD *)(*(_QWORD *)&v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists]
                  + 16))
    goto LABEL_35;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  swift_bridgeObjectRetain();
  dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
  if (v41)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_bridgeObjectRelease();
LABEL_35:
  if (*(_QWORD *)(*(_QWORD *)&v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause]
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v41)
      goto LABEL_37;
    swift_bridgeObjectRelease();
  }
  v51 = v80;
  outlined init with copy of PgQuery_Alias?((uint64_t)&v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset], v80, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v47(v51, 1, v45) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v51, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_44;
  }
  v48 = v77;
  outlined init with take of PgQuery_OidList(v51, v77, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  if (v41)
  {
LABEL_27:
    outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Node);
    return swift_release();
  }
  outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Node);
LABEL_44:
  v52 = v78;
  outlined init with copy of PgQuery_Alias?((uint64_t)&v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount], v78, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v47(v52, 1, v45) != 1)
  {
    v54 = v76;
    outlined init with take of PgQuery_OidList(v52, v76, type metadata accessor for PgQuery_Node);
    v55 = v54;
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v53 = (uint64_t)v79;
    v42 = type metadata accessor for PgQuery_Node;
    v43 = v55;
    if (!v41)
    {
      outlined destroy of PgQuery_Alias(v55, type metadata accessor for PgQuery_Node);
      goto LABEL_48;
    }
    goto LABEL_9;
  }
  outlined destroy of (key: String, value: StorableValue)(v52, &demangling cache variable for type metadata for PgQuery_Node?);
  v53 = (uint64_t)v79;
LABEL_48:
  if (*(_QWORD *)&v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption])
  {
    v56 = v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption
            + 8];
    v89 = *(_QWORD *)&v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption];
    v90 = v56;
    lazy protocol witness table accessor for type PgQuery_LimitOption and conformance PgQuery_LimitOption();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v41)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)&v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lockingClause]
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v41)
      goto LABEL_37;
    swift_bridgeObjectRelease();
  }
  v57 = v72;
  outlined init with copy of PgQuery_Alias?((uint64_t)&v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause], v72, &demangling cache variable for type metadata for PgQuery_WithClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v57, 1, v73) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_WithClause?);
    v58 = v74;
    v59 = (uint64_t)v75;
  }
  else
  {
    v60 = v70;
    outlined init with take of PgQuery_OidList(v57, v70, type metadata accessor for PgQuery_WithClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, type metadata accessor for PgQuery_WithClause, (uint64_t)&protocol conformance descriptor for PgQuery_WithClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_WithClause);
    v58 = v74;
    v59 = (uint64_t)v75;
    if (v41)
      return swift_release();
  }
  if (*(_QWORD *)&v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op])
  {
    v61 = v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op
            + 8];
    v89 = *(_QWORD *)&v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op];
    v90 = v61;
    lazy protocol witness table accessor for type PgQuery_SetOperation and conformance PgQuery_SetOperation();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    v59 = (uint64_t)v75;
    if (v41)
      return swift_release();
  }
  if (v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__all] == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v59 = (uint64_t)v75;
    if (v41)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)&v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg], v59, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
  if (v62(v59, 1, v58) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  }
  else
  {
    v63 = v59;
    v64 = v67;
    outlined init with take of PgQuery_OidList(v63, v67, type metadata accessor for PgQuery_SelectStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, type metadata accessor for PgQuery_SelectStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SelectStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v58 = v74;
    outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_SelectStmt);
    if (v41)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)&v44[OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg], v53, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  if (v62(v53, 1, v58) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  }
  else
  {
    v65 = v66;
    outlined init with take of PgQuery_OidList(v53, v66, type metadata accessor for PgQuery_SelectStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, type metadata accessor for PgQuery_SelectStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SelectStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_SelectStmt);
    if (v41)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t static PgQuery_SelectStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_SelectStmt, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_SelectStmt.== infix(_:_:)) & 1;
}

BOOL closure #1 in static PgQuery_SelectStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t IntoClause;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t SelectStmt;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t Node;
  uint64_t v149;

  SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
  v125 = *(_QWORD *)(SelectStmt - 8);
  MEMORY[0x1E0C80A78](SelectStmt);
  v123 = (uint64_t)&v123 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SelectStmt?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v124 = (uint64_t)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v127 = (uint64_t)&v123 - v8;
  v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_SelectStmt?, PgQuery_SelectStmt?));
  v9 = MEMORY[0x1E0C80A78](v128);
  v126 = (uint64_t)&v123 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v129 = (uint64_t)&v123 - v11;
  v12 = type metadata accessor for PgQuery_WithClause(0);
  v134 = *(_QWORD *)(v12 - 8);
  v135 = v12;
  MEMORY[0x1E0C80A78](v12);
  v131 = (uint64_t)&v123 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  MEMORY[0x1E0C80A78](v14);
  v132 = (uint64_t)&v123 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_WithClause?, PgQuery_WithClause?));
  MEMORY[0x1E0C80A78](v133);
  v136 = (uint64_t)&v123 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v145 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v143 = (uint64_t)&v123 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v19 = MEMORY[0x1E0C80A78](v18);
  v137 = (uint64_t)&v123 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v138 = (uint64_t)&v123 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v141 = (uint64_t)&v123 - v24;
  MEMORY[0x1E0C80A78](v23);
  v144 = (uint64_t)&v123 - v25;
  v147 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v26 = MEMORY[0x1E0C80A78](v147);
  v139 = (char *)&v123 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26);
  v140 = (char *)&v123 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v142 = (uint64_t)&v123 - v31;
  MEMORY[0x1E0C80A78](v30);
  v146 = (uint64_t)&v123 - v32;
  IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  v34 = *(_QWORD *)(IntoClause - 8);
  MEMORY[0x1E0C80A78](IntoClause);
  v149 = (uint64_t)&v123 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_IntoClause?);
  MEMORY[0x1E0C80A78](v36);
  v38 = (char *)&v123 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_IntoClause?, PgQuery_IntoClause?));
  MEMORY[0x1E0C80A78](v39);
  v41 = (char *)&v123 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *(_QWORD *)(a1 + 16);
  v43 = *(_QWORD *)(a2 + 16);
  v44 = a1;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  LOBYTE(a1) = specialized static Array<A>.== infix(_:_:)(v42, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    goto LABEL_67;
  v45 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__intoClause;
  v46 = (uint64_t)&v41[*(int *)(v39 + 48)];
  outlined init with copy of PgQuery_Alias?(v44+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__intoClause, (uint64_t)v41, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  outlined init with copy of PgQuery_Alias?(v45, v46, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  v48 = a2;
  v49 = v44;
  if (v47((uint64_t)v41, 1, IntoClause) == 1)
  {
    if (v47(v46, 1, IntoClause) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v41, &demangling cache variable for type metadata for PgQuery_IntoClause?);
      goto LABEL_11;
    }
LABEL_8:
    v50 = &demangling cache variable for type metadata for (PgQuery_IntoClause?, PgQuery_IntoClause?);
LABEL_9:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v41, v50);
LABEL_67:
    swift_release();
    swift_release();
    return 0;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v41, (uint64_t)v38, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  if (v47(v46, 1, IntoClause) == 1)
  {
    outlined destroy of PgQuery_Alias((uint64_t)v38, type metadata accessor for PgQuery_IntoClause);
    goto LABEL_8;
  }
  v51 = v149;
  outlined init with take of PgQuery_OidList(v46, v149, type metadata accessor for PgQuery_IntoClause);
  v52 = specialized static PgQuery_IntoClause.== infix(_:_:)((uint64_t)v38, v51);
  outlined destroy of PgQuery_Alias(v51, type metadata accessor for PgQuery_IntoClause);
  outlined destroy of PgQuery_Alias((uint64_t)v38, type metadata accessor for PgQuery_IntoClause);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v41, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  if ((v52 & 1) == 0)
    goto LABEL_67;
LABEL_11:
  v53 = *(_QWORD *)(v44
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  v54 = *(_QWORD *)(a2
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v55 = specialized static Array<A>.== infix(_:_:)(v53, v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v55 & 1) == 0)
    goto LABEL_67;
  v56 = *(_QWORD *)(v44
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause);
  v57 = *(_QWORD *)(a2
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v58 = specialized static Array<A>.== infix(_:_:)(v56, v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v58 & 1) == 0)
    goto LABEL_67;
  v59 = v44
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  v60 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  v62 = v146;
  v61 = v147;
  v63 = v146 + *(int *)(v147 + 48);
  outlined init with copy of PgQuery_Alias?(v59, v146, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v60, v63, &demangling cache variable for type metadata for PgQuery_Node?);
  v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v145 + 48);
  v65 = Node;
  if (v64(v62, 1, Node) == 1)
  {
    if (v64(v63, 1, v65) != 1)
      goto LABEL_18;
    outlined destroy of (key: String, value: StorableValue)(v62, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v66 = v144;
    outlined init with copy of PgQuery_Alias?(v62, v144, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v64(v63, 1, v65) == 1)
      goto LABEL_17;
    v67 = v143;
    outlined init with take of PgQuery_OidList(v63, v143, type metadata accessor for PgQuery_Node);
    v68 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v66, v67, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
    outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
    outlined destroy of (key: String, value: StorableValue)(v62, &demangling cache variable for type metadata for PgQuery_Node?);
    if ((v68 & 1) == 0)
      goto LABEL_67;
  }
  v69 = *(_QWORD *)(v49
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause);
  v70 = *(_QWORD *)(v48
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v71 = specialized static Array<A>.== infix(_:_:)(v69, v70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v71 & 1) == 0)
    goto LABEL_67;
  v72 = v48
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingClause;
  v62 = v142;
  v73 = v142 + *(int *)(v61 + 48);
  outlined init with copy of PgQuery_Alias?(v49+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingClause, v142, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v72, v73, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v64(v62, 1, v65) == 1)
  {
    if (v64(v73, 1, v65) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v62, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_26;
    }
LABEL_18:
    outlined destroy of (key: String, value: StorableValue)(v62, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_67;
  }
  v66 = v141;
  outlined init with copy of PgQuery_Alias?(v62, v141, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v64(v73, 1, v65) == 1)
  {
LABEL_17:
    outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
    goto LABEL_18;
  }
  v74 = v143;
  outlined init with take of PgQuery_OidList(v73, v143, type metadata accessor for PgQuery_Node);
  v75 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v66, v74, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v74, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v62, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v75 & 1) == 0)
    goto LABEL_67;
LABEL_26:
  v76 = *(_QWORD *)(v49
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause);
  v77 = *(_QWORD *)(v48
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v78 = specialized static Array<A>.== infix(_:_:)(v76, v77);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v78 & 1) == 0)
    goto LABEL_67;
  v79 = *(_QWORD *)(v49
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists);
  v80 = *(_QWORD *)(v48
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v81 = specialized static Array<A>.== infix(_:_:)(v79, v80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v81 & 1) == 0)
    goto LABEL_67;
  v82 = *(_QWORD *)(v49
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause);
  v83 = *(_QWORD *)(v48
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v84 = specialized static Array<A>.== infix(_:_:)(v82, v83);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v84 & 1) == 0)
    goto LABEL_67;
  v85 = v48
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset;
  v41 = v140;
  v86 = (uint64_t)&v140[*(int *)(v61 + 48)];
  outlined init with copy of PgQuery_Alias?(v49+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset, (uint64_t)v140, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v85, v86, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v64((uint64_t)v41, 1, v65) == 1)
  {
    if (v64(v86, 1, v65) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v41, &demangling cache variable for type metadata for PgQuery_Node?);
      v41 = v139;
      goto LABEL_35;
    }
LABEL_40:
    v50 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_9;
  }
  v87 = (uint64_t)v41;
  v88 = v138;
  outlined init with copy of PgQuery_Alias?(v87, v138, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v64(v86, 1, v65) == 1)
  {
    outlined destroy of PgQuery_Alias(v88, type metadata accessor for PgQuery_Node);
    v41 = v140;
    goto LABEL_40;
  }
  v89 = v143;
  outlined init with take of PgQuery_OidList(v86, v143, type metadata accessor for PgQuery_Node);
  v90 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v88, v89, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v89, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v88, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v140, &demangling cache variable for type metadata for PgQuery_Node?);
  v41 = v139;
  if ((v90 & 1) == 0)
    goto LABEL_67;
LABEL_35:
  v91 = v48
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount;
  v92 = (uint64_t)&v41[*(int *)(v61 + 48)];
  outlined init with copy of PgQuery_Alias?(v49+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount, (uint64_t)v41, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v91, v92, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v64((uint64_t)v41, 1, v65) == 1)
  {
    if (v64(v92, 1, v65) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v41, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_42;
    }
    goto LABEL_40;
  }
  v93 = v137;
  outlined init with copy of PgQuery_Alias?((uint64_t)v41, v137, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v64(v92, 1, v65) == 1)
  {
    outlined destroy of PgQuery_Alias(v93, type metadata accessor for PgQuery_Node);
    goto LABEL_40;
  }
  v94 = v143;
  outlined init with take of PgQuery_OidList(v92, v143, type metadata accessor for PgQuery_Node);
  v95 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v93, v94, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v94, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v93, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v41, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v95 & 1) == 0)
    goto LABEL_67;
LABEL_42:
  v96 = *(_QWORD *)(v48
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption);
  if (*(_BYTE *)(v48
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption
                + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(v49
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption) != v96)
    goto LABEL_67;
  v97 = *(_QWORD *)(v49
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lockingClause);
  v98 = *(_QWORD *)(v48
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lockingClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v99 = specialized static Array<A>.== infix(_:_:)(v97, v98);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v99 & 1) == 0)
    goto LABEL_67;
  v100 = v48
       + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  v101 = v136;
  v102 = v136 + *(int *)(v133 + 48);
  outlined init with copy of PgQuery_Alias?(v49+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, v136, &demangling cache variable for type metadata for PgQuery_WithClause?);
  outlined init with copy of PgQuery_Alias?(v100, v102, &demangling cache variable for type metadata for PgQuery_WithClause?);
  v103 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48);
  if (v103(v101, 1, v135) == 1)
  {
    if (v103(v102, 1, v135) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v136, &demangling cache variable for type metadata for PgQuery_WithClause?);
      goto LABEL_53;
    }
    goto LABEL_51;
  }
  outlined init with copy of PgQuery_Alias?(v136, v132, &demangling cache variable for type metadata for PgQuery_WithClause?);
  if (v103(v102, 1, v135) == 1)
  {
    outlined destroy of PgQuery_Alias(v132, type metadata accessor for PgQuery_WithClause);
LABEL_51:
    outlined destroy of (key: String, value: StorableValue)(v136, &demangling cache variable for type metadata for (PgQuery_WithClause?, PgQuery_WithClause?));
    goto LABEL_67;
  }
  v104 = v131;
  outlined init with take of PgQuery_OidList(v102, v131, type metadata accessor for PgQuery_WithClause);
  v105 = v132;
  v106 = specialized static PgQuery_WithClause.== infix(_:_:)(v132, v104);
  outlined destroy of PgQuery_Alias(v104, type metadata accessor for PgQuery_WithClause);
  outlined destroy of PgQuery_Alias(v105, type metadata accessor for PgQuery_WithClause);
  outlined destroy of (key: String, value: StorableValue)(v136, &demangling cache variable for type metadata for PgQuery_WithClause?);
  if ((v106 & 1) == 0)
    goto LABEL_67;
LABEL_53:
  v107 = *(_QWORD *)(v48
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op);
  if (*(_BYTE *)(v48
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op
                + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(v49
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op) != v107
    || *(unsigned __int8 *)(v49
                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__all) != *(unsigned __int8 *)(v48 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__all))
  {
    goto LABEL_67;
  }
  v108 = v48
       + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
  v109 = v129;
  v110 = v129 + *(int *)(v128 + 48);
  outlined init with copy of PgQuery_Alias?(v49 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, v129, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  outlined init with copy of PgQuery_Alias?(v108, v110, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  v111 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48);
  if (v111(v109, 1, SelectStmt) == 1)
  {
    if (v111(v110, 1, SelectStmt) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v129, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
      goto LABEL_64;
    }
    goto LABEL_62;
  }
  outlined init with copy of PgQuery_Alias?(v129, v127, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  if (v111(v110, 1, SelectStmt) == 1)
  {
    outlined destroy of PgQuery_Alias(v127, type metadata accessor for PgQuery_SelectStmt);
LABEL_62:
    outlined destroy of (key: String, value: StorableValue)(v129, &demangling cache variable for type metadata for (PgQuery_SelectStmt?, PgQuery_SelectStmt?));
    goto LABEL_67;
  }
  v112 = v123;
  outlined init with take of PgQuery_OidList(v110, v123, type metadata accessor for PgQuery_SelectStmt);
  v113 = v127;
  v114 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v127, v112, type metadata accessor for PgQuery_SelectStmt, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_SelectStmt.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v112, type metadata accessor for PgQuery_SelectStmt);
  outlined destroy of PgQuery_Alias(v113, type metadata accessor for PgQuery_SelectStmt);
  outlined destroy of (key: String, value: StorableValue)(v129, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  if ((v114 & 1) == 0)
    goto LABEL_67;
LABEL_64:
  v115 = v48
       + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg;
  v116 = v126;
  v117 = v126 + *(int *)(v128 + 48);
  outlined init with copy of PgQuery_Alias?(v49 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, v126, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  outlined init with copy of PgQuery_Alias?(v115, v117, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  if (v111(v116, 1, SelectStmt) != 1)
  {
    outlined init with copy of PgQuery_Alias?(v126, v124, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
    if (v111(v117, 1, SelectStmt) == 1)
    {
      swift_release();
      swift_release();
      outlined destroy of PgQuery_Alias(v124, type metadata accessor for PgQuery_SelectStmt);
      goto LABEL_71;
    }
    v119 = v117;
    v120 = v123;
    outlined init with take of PgQuery_OidList(v119, v123, type metadata accessor for PgQuery_SelectStmt);
    v121 = v124;
    v122 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v124, v120, type metadata accessor for PgQuery_SelectStmt, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_SelectStmt.== infix(_:_:));
    swift_release();
    swift_release();
    outlined destroy of PgQuery_Alias(v120, type metadata accessor for PgQuery_SelectStmt);
    outlined destroy of PgQuery_Alias(v121, type metadata accessor for PgQuery_SelectStmt);
    outlined destroy of (key: String, value: StorableValue)(v126, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
    return (v122 & 1) != 0;
  }
  swift_release();
  swift_release();
  if (v111(v117, 1, SelectStmt) != 1)
  {
LABEL_71:
    outlined destroy of (key: String, value: StorableValue)(v126, &demangling cache variable for type metadata for (PgQuery_SelectStmt?, PgQuery_SelectStmt?));
    return 0;
  }
  outlined destroy of (key: String, value: StorableValue)(v126, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  return 1;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SelectStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_SelectStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SelectStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_SelectStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SelectStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SelectStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, type metadata accessor for PgQuery_SelectStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SelectStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SelectStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SelectStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SelectStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, type metadata accessor for PgQuery_SelectStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SelectStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SelectStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, type metadata accessor for PgQuery_SelectStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SelectStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterTableStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_AlterTableStmt(0);
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterTableStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t RangeVar;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  unsigned __int8 v14;
  _QWORD v15[3];
  unsigned __int8 v16;
  uint64_t v17;

  v17 = a3;
  v15[1] = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v9 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = type metadata accessor for PgQuery_AlterTableStmt(0);
  outlined init with copy of PgQuery_Alias?(v3 + *(int *)(v15[0] + 32), (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_RangeVar);
    if (v4)
      return result;
  }
  if (!*(_QWORD *)(*(_QWORD *)v3 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
  {
    v13 = *(_QWORD *)(v3 + 8);
    v14 = *(_BYTE *)(v3 + 16);
    if (!destructiveProjectEnumData for StorableValue(v13, v14)
      || (v15[2] = v13,
          v16 = v14,
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType(),
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v4))
    {
      if (*(_BYTE *)(v3 + 17) != 1)
        return UnknownStorage.traverse<A>(visitor:)();
      result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      if (!v4)
        return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterTableStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t RangeVar;

  *(_QWORD *)a2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 8) = 0;
  *(_WORD *)(a2 + 16) = 1;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 32);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v4, 1, 1, RangeVar);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterTableStmt()
{
  return 0xD000000000000017;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PgQuery_AlterTableStmt())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterTableStmt()
{
  return PgQuery_AlterTableStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterTableStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterTableStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterTableStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableStmt and conformance PgQuery_AlterTableStmt, type metadata accessor for PgQuery_AlterTableStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterTableStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterTableStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterTableStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableStmt and conformance PgQuery_AlterTableStmt, type metadata accessor for PgQuery_AlterTableStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterTableStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableStmt and conformance PgQuery_AlterTableStmt, type metadata accessor for PgQuery_AlterTableStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterTableCmd._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_AlterTableCmd._StorageClass()
{
  return type metadata accessor for PgQuery_AlterTableCmd._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_AlterTableCmd._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterTableCmd._StorageClass);
}

void type metadata completion function for PgQuery_AlterTableCmd._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RoleSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for PgQuery_RoleSpec(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RoleSpec);
}

uint64_t PgQuery_AlterTableCmd.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_AlterTableCmd, (void (*)(_QWORD))type metadata accessor for PgQuery_AlterTableCmd._StorageClass, specialized PgQuery_AlterTableCmd._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_AlterTableCmd.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_AlterTableCmd.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType();
          goto LABEL_12;
        case 2:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 4:
          type metadata accessor for PgQuery_RoleSpec(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
          goto LABEL_10;
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
LABEL_10:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 6:
          lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
LABEL_12:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterTableCmd.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Node;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t RoleSpec;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v2);
  v26 = (uint64_t)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v25 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v23 = (uint64_t)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v8 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v24 = (uint64_t)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(int *)(type metadata accessor for PgQuery_AlterTableCmd(0) + 20);
  v22 = v0;
  v11 = *(_QWORD *)(v0 + v10);
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_BYTE *)(v11 + 24);
  if (destructiveProjectEnumData for StorableValue(v12, v13))
  {
    v28 = v12;
    v29 = v13;
    lazy protocol witness table accessor for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  else
  {
    swift_retain();
  }
  v14 = *(_QWORD *)(v11 + 40);
  v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v15 = *(_QWORD *)(v11 + 32) & 0xFFFFFFFFFFFFLL;
  if (v15)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  if (*(_DWORD *)(v11 + 48))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v11+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  }
  else
  {
    v16 = v24;
    outlined init with take of PgQuery_OidList((uint64_t)v7, v24, type metadata accessor for PgQuery_RoleSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v16, type metadata accessor for PgQuery_RoleSpec);
    if (v1)
      return swift_release();
  }
  v17 = v26;
  outlined init with copy of PgQuery_Alias?(v11+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def, v26, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v17, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v17, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_17;
  }
  v18 = v17;
  v19 = v23;
  outlined init with take of PgQuery_OidList(v18, v23, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v19, type metadata accessor for PgQuery_Node);
  if (v1)
    return swift_release();
LABEL_17:
  if (*(_QWORD *)(v11
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior))
  {
    v20 = *(_BYTE *)(v11
                   + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior
                   + 8);
    v28 = *(_QWORD *)(v11
                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
    v29 = v20;
    lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  if (*(_BYTE *)(v11
                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterTableCmd@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_AlterTableCmd._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterTableCmd()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterTableCmd()
{
  return PgQuery_AlterTableCmd.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterTableCmd()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableCmd and conformance PgQuery_AlterTableCmd, type metadata accessor for PgQuery_AlterTableCmd, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableCmd);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterTableCmd@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterTableCmd._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterTableCmd()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableCmd and conformance PgQuery_AlterTableCmd, type metadata accessor for PgQuery_AlterTableCmd, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableCmd);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterTableCmd()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableCmd and conformance PgQuery_AlterTableCmd, type metadata accessor for PgQuery_AlterTableCmd, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableCmd);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterDomainStmt._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_AlterDomainStmt._StorageClass()
{
  return type metadata accessor for PgQuery_AlterDomainStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_AlterDomainStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterDomainStmt._StorageClass);
}

void type metadata completion function for PgQuery_AlterDomainStmt._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_AlterDomainStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_AlterDomainStmt, (void (*)(_QWORD))type metadata accessor for PgQuery_AlterDomainStmt._StorageClass, (uint64_t (*)(uint64_t))specialized PgQuery_AlterDomainStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_AlterDomainStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_AlterDomainStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 5:
          lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 6:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterDomainStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v20 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v17 = (uint64_t)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(int *)(type metadata accessor for PgQuery_AlterDomainStmt(0) + 20);
  v16 = v0;
  v8 = *(_QWORD **)(v0 + v7);
  v9 = v8[3];
  if ((v9 & 0x2000000000000000) != 0)
    v10 = HIBYTE(v9) & 0xF;
  else
    v10 = v8[2] & 0xFFFFFFFFFFFFLL;
  swift_retain();
  if (v10)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  if (*(_QWORD *)(v8[4] + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  v11 = v8[6];
  v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0)
    v12 = v8[5] & 0xFFFFFFFFFFFFLL;
  if (v12)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v8+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v4, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v13 = v17;
    outlined init with take of PgQuery_OidList((uint64_t)v4, v17, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_Node);
    if (v1)
      return swift_release();
  }
  if (*(_QWORD *)((char *)v8
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior))
  {
    v14 = *((_BYTE *)v8
          + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior
          + 8);
    v18 = *(_QWORD *)((char *)v8
                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
    v19 = v14;
    lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  if (*((_BYTE *)v8
       + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterDomainStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_AlterDomainStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterDomainStmt()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterDomainStmt()
{
  return PgQuery_AlterDomainStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterDomainStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDomainStmt and conformance PgQuery_AlterDomainStmt, type metadata accessor for PgQuery_AlterDomainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDomainStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterDomainStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterDomainStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterDomainStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDomainStmt and conformance PgQuery_AlterDomainStmt, type metadata accessor for PgQuery_AlterDomainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDomainStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterDomainStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDomainStmt and conformance PgQuery_AlterDomainStmt, type metadata accessor for PgQuery_AlterDomainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDomainStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_SetOperationStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  *(_QWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 1;
  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg;
  v5(v1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, 1, 1, Node);
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypes;
  v8 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypes) = MEMORY[0x1E0DEE9D8];
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypmods;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypmods) = v8;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colCollations;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colCollations) = v8;
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClauses;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClauses) = v8;
  v12 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v1 + 24) = v12;
  *(_BYTE *)(v1 + 25) = *(_BYTE *)(a1 + 25);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_QWORD *)(v1 + v7) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v9) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypmods);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v10) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colCollations);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClauses);
  swift_bridgeObjectRetain();
  swift_release();
  *(_QWORD *)(v1 + v11) = v13;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PgQuery_SetOperationStmt._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_SetOperationStmt._StorageClass()
{
  return type metadata accessor for PgQuery_SetOperationStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_SetOperationStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SetOperationStmt._StorageClass);
}

void type metadata completion function for PgQuery_SetOperationStmt._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_SetOperationStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_SetOperationStmt, (void (*)(_QWORD))type metadata accessor for PgQuery_SetOperationStmt._StorageClass, PgQuery_SetOperationStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_SetOperationStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_SetOperationStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_SetOperation and conformance PgQuery_SetOperation();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_9;
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_9;
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_9;
        case 5:
        case 6:
        case 7:
        case 8:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_9:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_SetOperationStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Node;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v29 = (uint64_t)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - v8;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v27 = (uint64_t)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v28 = (uint64_t)&v27 - v14;
  v15 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for PgQuery_SetOperationStmt(0) + 20));
  v16 = *(_QWORD *)(v15 + 16);
  v30 = v2;
  if (v16)
  {
    v17 = *(_BYTE *)(v15 + 24);
    v31 = v16;
    v32 = v17;
    lazy protocol witness table accessor for type PgQuery_SetOperation and conformance PgQuery_SetOperation();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v3)
      return swift_release();
    v33 = a2;
    v18 = Node;
    v19 = 0;
  }
  else
  {
    v33 = a2;
    swift_retain();
    v18 = Node;
    v19 = v3;
  }
  if (*(_BYTE *)(v15 + 25) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v19)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v15+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, (uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Node?);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v20(v9, 1, v18) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Node?);
    v21 = v33;
  }
  else
  {
    v22 = v28;
    outlined init with take of PgQuery_OidList((uint64_t)v9, v28, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    v21 = v33;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v19)
    {
      outlined destroy of PgQuery_Alias(v22, type metadata accessor for PgQuery_Node);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias(v22, type metadata accessor for PgQuery_Node);
  }
  v23 = v29;
  outlined init with copy of PgQuery_Alias?(v15+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  v24 = v20((char *)v23, 1, v18);
  v33 = v21;
  if (v24 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v23, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_16;
  }
  v25 = v27;
  outlined init with take of PgQuery_OidList(v23, v27, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v25, type metadata accessor for PgQuery_Node);
  if (v19)
    return swift_release();
LABEL_16:
  if (*(_QWORD *)(*(_QWORD *)(v15
                             + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypes)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v19)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v15
                             + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypmods)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v19)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v15
                             + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colCollations)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v19)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v15
                             + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClauses)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v19)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SetOperationStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_SetOperationStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SetOperationStmt()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_SetOperationStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_SetOperationStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SetOperationStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetOperationStmt and conformance PgQuery_SetOperationStmt, type metadata accessor for PgQuery_SetOperationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SetOperationStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SetOperationStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SetOperationStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SetOperationStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetOperationStmt and conformance PgQuery_SetOperationStmt, type metadata accessor for PgQuery_SetOperationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SetOperationStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SetOperationStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetOperationStmt and conformance PgQuery_SetOperationStmt, type metadata accessor for PgQuery_SetOperationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SetOperationStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_GrantStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 7:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_11;
        case 2:
          lazy protocol witness table accessor for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType();
          goto LABEL_10;
        case 3:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          goto LABEL_10;
        case 4:
        case 5:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_11;
        case 8:
          lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
LABEL_10:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_11:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_GrantStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_BYTE *)v0 != 1 || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0 + 8)
      || (lazy protocol witness table accessor for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType(),
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      if (!destructiveProjectEnumData for StorableValue(*(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32))
        || (lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType(),
            result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        if (!*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          if (!*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16)
            || (type metadata accessor for PgQuery_Node(0),
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
          {
            if (!*(_QWORD *)(*(_QWORD *)(v0 + 56) + 16)
              || (type metadata accessor for PgQuery_Node(0),
                  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
            {
              if (*(_BYTE *)(v0 + 64) != 1
                || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
              {
                if (!*(_QWORD *)(v0 + 72)
                  || (lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior(),
                      result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                      !v1))
                {
                  type metadata accessor for PgQuery_GrantStmt(0);
                  return UnknownStorage.traverse<A>(visitor:)();
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_GrantStmt@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 40) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 48) = v1;
  *(_QWORD *)(a1 + 56) = v1;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_GrantStmt()
{
  return 0xD000000000000012;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PgQuery_GrantStmt())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_GrantStmt()
{
  return PgQuery_GrantStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_GrantStmt()
{
  return PgQuery_GrantStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_GrantStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, type metadata accessor for PgQuery_GrantStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_GrantStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_GrantStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_GrantStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, type metadata accessor for PgQuery_GrantStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_GrantStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, type metadata accessor for PgQuery_GrantStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_GrantRoleStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 5:
          type metadata accessor for PgQuery_GrantRoleStmt(0);
          type metadata accessor for PgQuery_RoleSpec(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 6:
          lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_GrantRoleStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t GrantRoleStmt;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t RoleSpec;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v5 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v12 = (uint64_t)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (*(_BYTE *)(v0 + 16) != 1
        || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
      {
        if (*(_BYTE *)(v0 + 17) != 1
          || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          GrantRoleStmt = type metadata accessor for PgQuery_GrantRoleStmt(0);
          outlined init with copy of PgQuery_Alias?(v0 + *(int *)(GrantRoleStmt + 40), (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, RoleSpec) == 1)
          {
            outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          }
          else
          {
            v9 = v12;
            outlined init with take of PgQuery_OidList((uint64_t)v4, v12, type metadata accessor for PgQuery_RoleSpec);
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
            dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
            result = outlined destroy of PgQuery_Alias(v9, type metadata accessor for PgQuery_RoleSpec);
            if (v1)
              return result;
          }
          if (!*(_QWORD *)(v0 + 24))
            return UnknownStorage.traverse<A>(visitor:)();
          v10 = *(_BYTE *)(v0 + 32);
          v13 = *(_QWORD *)(v0 + 24);
          v14 = v10;
          lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
          if (!v1)
            return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_GrantRoleStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t RoleSpec;

  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)a2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 8) = v4;
  *(_WORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  UnknownStorage.init()();
  v5 = a2 + *(int *)(a1 + 40);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 56))(v5, 1, 1, RoleSpec);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_GrantRoleStmt()
{
  return 0xD000000000000016;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PgQuery_GrantRoleStmt())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_GrantRoleStmt()
{
  return PgQuery_GrantRoleStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_GrantRoleStmt()
{
  return PgQuery_GrantRoleStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_GrantRoleStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantRoleStmt and conformance PgQuery_GrantRoleStmt, type metadata accessor for PgQuery_GrantRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantRoleStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_GrantRoleStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_GrantRoleStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_GrantRoleStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantRoleStmt and conformance PgQuery_GrantRoleStmt, type metadata accessor for PgQuery_GrantRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantRoleStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_GrantRoleStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantRoleStmt and conformance PgQuery_GrantRoleStmt, type metadata accessor for PgQuery_GrantRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantRoleStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterDefaultPrivilegesStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterDefaultPrivilegesStmt.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt, type metadata accessor for PgQuery_GrantStmt, &lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantStmt);
}

uint64_t PgQuery_AlterDefaultPrivilegesStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t GrantStmt;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t AlterDefaultPrivilegesStmt;
  uint64_t v15;
  uint64_t v16[4];

  v16[3] = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  v9 = *(_QWORD *)(GrantStmt - 8);
  MEMORY[0x1E0C80A78](GrantStmt);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v16[0] = (uint64_t)v11;
  v16[1] = a2;
  if (!v12
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v3))
  {
    AlterDefaultPrivilegesStmt = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(0);
    outlined init with copy of PgQuery_Alias?(v2 + *(int *)(AlterDefaultPrivilegesStmt + 24), (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, GrantStmt) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
    }
    else
    {
      v15 = v16[0];
      outlined init with take of PgQuery_OidList((uint64_t)v7, v16[0], type metadata accessor for PgQuery_GrantStmt);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, type metadata accessor for PgQuery_GrantStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantStmt);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      result = outlined destroy of PgQuery_Alias(v15, type metadata accessor for PgQuery_GrantStmt);
      if (v3)
        return result;
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterDefaultPrivilegesStmt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_AlterDefaultPrivilegesStmt(a1, type metadata accessor for PgQuery_GrantStmt, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterDefaultPrivilegesStmt()
{
  return 0xD000000000000023;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterDefaultPrivilegesStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_AlterDefaultPrivilegesStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterDefaultPrivilegesStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDefaultPrivilegesStmt and conformance PgQuery_AlterDefaultPrivilegesStmt, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDefaultPrivilegesStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterDefaultPrivilegesStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterDefaultPrivilegesStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterDefaultPrivilegesStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDefaultPrivilegesStmt and conformance PgQuery_AlterDefaultPrivilegesStmt, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDefaultPrivilegesStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterDefaultPrivilegesStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDefaultPrivilegesStmt and conformance PgQuery_AlterDefaultPrivilegesStmt, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDefaultPrivilegesStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_ClosePortalStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Float.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_ClosePortalStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ClosePortalStmt()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ClosePortalStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClosePortalStmt and conformance PgQuery_ClosePortalStmt, type metadata accessor for PgQuery_ClosePortalStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ClosePortalStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ClosePortalStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ClosePortalStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ClosePortalStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClosePortalStmt and conformance PgQuery_ClosePortalStmt, type metadata accessor for PgQuery_ClosePortalStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ClosePortalStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ClosePortalStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClosePortalStmt and conformance PgQuery_ClosePortalStmt, type metadata accessor for PgQuery_ClosePortalStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ClosePortalStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ClosePortalStmt(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_VariableShowStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_ClosePortalStmt) & 1;
}

uint64_t PgQuery_ClusterStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_ClusterStmt(0);
        type metadata accessor for PgQuery_RangeVar(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v4 = v3;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_ClusterStmt.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t RangeVar;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ClusterStmt;
  uint64_t v16;

  v3 = v1;
  v16 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v8 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClusterStmt = type metadata accessor for PgQuery_ClusterStmt(0);
  outlined init with copy of PgQuery_Alias?(v3 + *(int *)(ClusterStmt + 28), (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v6, (uint64_t)v10, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_RangeVar);
    if (v2)
      return result;
  }
  v12 = *(_QWORD *)(v3 + 8);
  v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v13 = *(_QWORD *)v3 & 0xFFFFFFFFFFFFLL;
  if (!v13 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v2))
  {
    if (!*(_DWORD *)(v3 + 16))
      return UnknownStorage.traverse<A>(visitor:)();
    result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (!v2)
      return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ClusterStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t RangeVar;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0xE000000000000000;
  *(_DWORD *)(a2 + 16) = 0;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 28);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v4, 1, 1, RangeVar);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ClusterStmt()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_ClusterStmt()
{
  return PgQuery_ClusterStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ClusterStmt(uint64_t a1)
{
  return PgQuery_ClusterStmt.traverse<A>(visitor:)(a1);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ClusterStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClusterStmt and conformance PgQuery_ClusterStmt, type metadata accessor for PgQuery_ClusterStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ClusterStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ClusterStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ClusterStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ClusterStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClusterStmt and conformance PgQuery_ClusterStmt, type metadata accessor for PgQuery_ClusterStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ClusterStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ClusterStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClusterStmt and conformance PgQuery_ClusterStmt, type metadata accessor for PgQuery_ClusterStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ClusterStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CopyStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t RangeVar;
  uint64_t v7;
  uint64_t Node;
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v3);
  v22 = (uint64_t)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  v20 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v5, 1, 1, RangeVar);
  v7 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(void (**)(void))(*(_QWORD *)(Node - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9)(v7, 1, 1, Node);
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__attlist;
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__attlist) = MEMORY[0x1E0DEE9D8];
  v12 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFrom;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFrom) = 0;
  v13 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isProgram;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isProgram) = 0;
  v14 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename);
  *v14 = 0;
  v14[1] = 0xE000000000000000;
  v15 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) = v11;
  v21 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  v9();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, v7, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_QWORD *)(v1 + v10) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__attlist);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v1 + v12) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFrom);
  *(_BYTE *)(v1 + v13) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isProgram);
  v16 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename
                  + 8);
  *v14 = *(_QWORD *)(a1
                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename);
  v14[1] = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v15) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = v22;
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v22, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_release();
  outlined assign with take of PgQuery_Node?(v17, v21, &demangling cache variable for type metadata for PgQuery_Node?);
  return v1;
}

uint64_t PgQuery_CopyStmt._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_CopyStmt._StorageClass()
{
  return type metadata accessor for PgQuery_CopyStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CopyStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CopyStmt._StorageClass);
}

void type metadata completion function for PgQuery_CopyStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_CopyStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_CopyStmt, (void (*)(_QWORD))type metadata accessor for PgQuery_CopyStmt._StorageClass, PgQuery_CopyStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CopyStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_CopyStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          goto LABEL_10;
        case 2:
        case 8:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
LABEL_10:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_11;
        case 3:
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_11;
        case 4:
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_11;
        case 6:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_11:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CopyStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t RangeVar;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Node;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a1;
  v41 = a3;
  v40 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v35 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v33 - v7;
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  v10 = MEMORY[0x1E0C80A78](Node);
  v33 = (uint64_t)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v36 = (uint64_t)&v33 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v17 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(int *)(type metadata accessor for PgQuery_CopyStmt(0) + 20);
  v34 = v3;
  v21 = *(_QWORD *)(v3 + v20);
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RangeVar) == 1)
  {
    v22 = v38;
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v15, (uint64_t)v19, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    swift_retain();
    v23 = v38;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v22 = v23;
    if (v23)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v19, type metadata accessor for PgQuery_RangeVar);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v19, type metadata accessor for PgQuery_RangeVar);
  }
  outlined init with copy of PgQuery_Alias?(v21 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  v25 = Node;
  if (v24(v8, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v26 = (uint64_t)v8;
    v27 = v36;
    outlined init with take of PgQuery_OidList(v26, v36, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_Node);
    if (v22)
      return swift_release();
  }
  if (!*(_QWORD *)(*(_QWORD *)(v21
                              + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__attlist)
                  + 16)
    || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v22))
  {
    if (*(_BYTE *)(v21
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFrom) != 1
      || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v22))
    {
      if (*(_BYTE *)(v21
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isProgram) != 1
        || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v22))
      {
        v28 = *(_QWORD *)(v21
                        + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename
                        + 8);
        v29 = HIBYTE(v28) & 0xF;
        if ((v28 & 0x2000000000000000) == 0)
          v29 = *(_QWORD *)(v21
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename) & 0xFFFFFFFFFFFFLL;
        if (!v29
          || (swift_bridgeObjectRetain(),
              dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
              swift_bridgeObjectRelease(),
              !v22))
        {
          if (!*(_QWORD *)(*(_QWORD *)(v21
                                      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options)
                          + 16)
            || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v22))
          {
            v30 = v35;
            outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v35, &demangling cache variable for type metadata for PgQuery_Node?);
            if (v24((char *)v30, 1, v25) == 1)
            {
              outlined destroy of (key: String, value: StorableValue)(v30, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_26:
              swift_release();
              return UnknownStorage.traverse<A>(visitor:)();
            }
            v31 = v33;
            outlined init with take of PgQuery_OidList(v30, v33, type metadata accessor for PgQuery_Node);
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
            dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
            outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_Node);
            if (!v22)
              goto LABEL_26;
          }
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CopyStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CopyStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CopyStmt()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CopyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CopyStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CopyStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CopyStmt and conformance PgQuery_CopyStmt, type metadata accessor for PgQuery_CopyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CopyStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CopyStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CopyStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CopyStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CopyStmt and conformance PgQuery_CopyStmt, type metadata accessor for PgQuery_CopyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CopyStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CopyStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CopyStmt and conformance PgQuery_CopyStmt, type metadata accessor for PgQuery_CopyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CopyStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateStmt._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t v4;
  uint64_t PartitionBoundSpec;
  uint64_t v6;
  uint64_t PartitionSpec;
  uint64_t v8;
  uint64_t TypeName;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableElts) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhRelations) = v3;
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partbound;
  PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(PartitionBoundSpec - 8) + 56))(v4, 1, 1, PartitionBoundSpec);
  v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partspec;
  PartitionSpec = type metadata accessor for PgQuery_PartitionSpec(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(PartitionSpec - 8) + 56))(v6, 1, 1, PartitionSpec);
  v8 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ofTypename;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 56))(v8, 1, 1, TypeName);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints) = v3;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) = v3;
  v10 = v0
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = (_QWORD *)(v0
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename);
  *v11 = 0;
  v11[1] = 0xE000000000000000;
  v12 = (_QWORD *)(v0
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod);
  *v12 = 0;
  v12[1] = 0xE000000000000000;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists) = 0;
  return v0;
}

uint64_t PgQuery_CreateStmt._StorageClass.deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partbound, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partspec, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ofTypename, &demangling cache variable for type metadata for PgQuery_TypeName?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PgQuery_CreateStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit((void (*)(void))PgQuery_CreateStmt._StorageClass.deinit);
}

uint64_t ObjC metadata update function for PgQuery_CreateStmt._StorageClass()
{
  return type metadata accessor for PgQuery_CreateStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CreateStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateStmt._StorageClass);
}

void type metadata completion function for PgQuery_CreateStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_PartitionBoundSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionBoundSpec);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_PartitionSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionSpec);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
        if (v3 <= 0x3F)
          swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t type metadata accessor for PgQuery_PartitionBoundSpec(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_PartitionBoundSpec);
}

uint64_t type metadata accessor for PgQuery_PartitionSpec(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_PartitionSpec);
}

uint64_t type metadata accessor for PgQuery_TypeName(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TypeName);
}

uint64_t PgQuery_CreateStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_CreateStmt, (void (*)(_QWORD))type metadata accessor for PgQuery_CreateStmt._StorageClass, specialized PgQuery_CreateStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CreateStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_CreateStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          goto LABEL_9;
        case 2:
        case 3:
        case 7:
        case 8:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 4:
          type metadata accessor for PgQuery_PartitionBoundSpec(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, type metadata accessor for PgQuery_PartitionBoundSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionBoundSpec);
          goto LABEL_9;
        case 5:
          type metadata accessor for PgQuery_PartitionSpec(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, type metadata accessor for PgQuery_PartitionSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionSpec);
          goto LABEL_9;
        case 6:
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
LABEL_9:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 9:
          lazy protocol witness table accessor for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 10:
        case 11:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 12:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t PartitionSpec;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t RangeVar;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t TypeName;
  uint64_t v52;
  uint64_t v53;
  uint64_t PartitionBoundSpec;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;

  v59 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1E0C80A78](v3);
  v55 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v46 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v44 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  MEMORY[0x1E0C80A78](v6);
  v48 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  PartitionSpec = type metadata accessor for PgQuery_PartitionSpec(0);
  v9 = *(_QWORD *)(PartitionSpec - 8);
  v49 = PartitionSpec;
  v50 = v9;
  MEMORY[0x1E0C80A78](PartitionSpec);
  v45 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  MEMORY[0x1E0C80A78](v11);
  v53 = (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  v52 = *(_QWORD *)(PartitionBoundSpec - 8);
  MEMORY[0x1E0C80A78](PartitionBoundSpec);
  v47 = (uint64_t)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v18 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(int *)(type metadata accessor for PgQuery_CreateStmt(0) + 20);
  v43 = v2;
  v22 = *(_QWORD *)(v2 + v21);
  outlined init with copy of PgQuery_Alias?(v22+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v16, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, RangeVar) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v23 = v56;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v16, (uint64_t)v20, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    swift_retain();
    v24 = v56;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v23 = v24;
    if (v24)
    {
      v25 = type metadata accessor for PgQuery_RangeVar;
      v26 = (uint64_t)v20;
LABEL_26:
      outlined destroy of PgQuery_Alias(v26, v25);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v20, type metadata accessor for PgQuery_RangeVar);
  }
  v27 = v55;
  if (*(_QWORD *)(*(_QWORD *)(v22
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableElts)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v23)
    {
LABEL_11:
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v22
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhRelations)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v23)
      goto LABEL_11;
    v28 = (uint64_t)v27;
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = (uint64_t)v27;
  }
  v29 = v53;
  outlined init with copy of PgQuery_Alias?(v22+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partbound, v53, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v29, 1, PartitionBoundSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    v30 = TypeName;
    v31 = (uint64_t)v48;
  }
  else
  {
    v32 = v29;
    v33 = v47;
    outlined init with take of PgQuery_OidList(v32, v47, type metadata accessor for PgQuery_PartitionBoundSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, type metadata accessor for PgQuery_PartitionBoundSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionBoundSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v25 = type metadata accessor for PgQuery_PartitionBoundSpec;
    if (v23)
      goto LABEL_25;
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_PartitionBoundSpec);
    v30 = TypeName;
    v31 = (uint64_t)v48;
  }
  v34 = v28;
  v35 = v49;
  outlined init with copy of PgQuery_Alias?(v22+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partspec, v31, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v31, 1, v35) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v31, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
    goto LABEL_22;
  }
  v36 = v31;
  v33 = v45;
  outlined init with take of PgQuery_OidList(v36, v45, type metadata accessor for PgQuery_PartitionSpec);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, type metadata accessor for PgQuery_PartitionSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionSpec);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  v25 = type metadata accessor for PgQuery_PartitionSpec;
  if (v23)
  {
LABEL_25:
    v26 = v33;
    goto LABEL_26;
  }
  outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_PartitionSpec);
  v30 = TypeName;
LABEL_22:
  outlined init with copy of PgQuery_Alias?(v22+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ofTypename, v34, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v34, 1, v30) != 1)
  {
    v33 = v44;
    outlined init with take of PgQuery_OidList(v34, v44, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v25 = type metadata accessor for PgQuery_TypeName;
    if (!v23)
    {
      outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_TypeName);
      goto LABEL_30;
    }
    goto LABEL_25;
  }
  outlined destroy of (key: String, value: StorableValue)(v34, &demangling cache variable for type metadata for PgQuery_TypeName?);
LABEL_30:
  if (!*(_QWORD *)(*(_QWORD *)(v22
                              + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints)
                  + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v23))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v22
                                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options)
                    + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v23))
    {
      if (!*(_QWORD *)(v22
                      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit)
        || (v38 = *(_BYTE *)(v22
                           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit
                           + 8),
            v57 = *(_QWORD *)(v22
                            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit),
            v58 = v38,
            lazy protocol witness table accessor for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction(),
            dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v23))
      {
        v39 = *(_QWORD *)(v22
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename
                        + 8);
        v40 = HIBYTE(v39) & 0xF;
        if ((v39 & 0x2000000000000000) == 0)
          v40 = *(_QWORD *)(v22
                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename) & 0xFFFFFFFFFFFFLL;
        if (!v40
          || (swift_bridgeObjectRetain(),
              dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
              swift_bridgeObjectRelease(),
              !v23))
        {
          v41 = *(_QWORD *)(v22
                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                          + 8);
          v42 = HIBYTE(v41) & 0xF;
          if ((v41 & 0x2000000000000000) == 0)
            v42 = *(_QWORD *)(v22
                            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) & 0xFFFFFFFFFFFFLL;
          if (!v42
            || (swift_bridgeObjectRetain(),
                dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
                swift_bridgeObjectRelease(),
                !v23))
          {
            if (*(_BYTE *)(v22
                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists) != 1
              || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v23))
            {
              swift_release();
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CreateStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_CreateStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, type metadata accessor for PgQuery_CreateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, type metadata accessor for PgQuery_CreateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, type metadata accessor for PgQuery_CreateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_DefineStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 2:
        case 6:
        case 7:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 3:
        case 4:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_DefineStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!destructiveProjectEnumData for StorableValue(*(_QWORD *)v0, *(unsigned __int8 *)(v0 + 8))
    || (lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (*(_BYTE *)(v0 + 9) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (!*(_QWORD *)(*(_QWORD *)(v0 + 24) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          if (!*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16)
            || (type metadata accessor for PgQuery_Node(0),
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
          {
            if (*(_BYTE *)(v0 + 40) != 1
              || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
            {
              if (*(_BYTE *)(v0 + 41) != 1
                || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
              {
                type metadata accessor for PgQuery_DefineStmt(0);
                return UnknownStorage.traverse<A>(visitor:)();
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DefineStmt@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 24) = v1;
  *(_QWORD *)(a1 + 32) = v1;
  *(_WORD *)(a1 + 40) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DefineStmt()
{
  return 0xD000000000000013;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PgQuery_DefineStmt())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DefineStmt()
{
  return PgQuery_DefineStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DefineStmt()
{
  return PgQuery_DefineStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DefineStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefineStmt and conformance PgQuery_DefineStmt, type metadata accessor for PgQuery_DefineStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DefineStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DefineStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DefineStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DefineStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefineStmt and conformance PgQuery_DefineStmt, type metadata accessor for PgQuery_DefineStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DefineStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DefineStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefineStmt and conformance PgQuery_DefineStmt, type metadata accessor for PgQuery_DefineStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DefineStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_DropStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          goto LABEL_12;
        case 3:
          lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
LABEL_12:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_DropStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!destructiveProjectEnumData for StorableValue(*(_QWORD *)(v0 + 8), *(unsigned __int8 *)(v0 + 16))
      || (lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType(),
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      if (!*(_QWORD *)(v0 + 24)
        || (lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior(),
            result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        if (*(_BYTE *)(v0 + 33) != 1
          || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          if (*(_BYTE *)(v0 + 34) != 1
            || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for PgQuery_DropStmt(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DropStmt@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_WORD *)(a1 + 33) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DropStmt()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DropStmt()
{
  return PgQuery_DropStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DropStmt()
{
  return PgQuery_DropStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DropStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropStmt and conformance PgQuery_DropStmt, type metadata accessor for PgQuery_DropStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DropStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DropStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DropStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropStmt and conformance PgQuery_DropStmt, type metadata accessor for PgQuery_DropStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DropStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropStmt and conformance PgQuery_DropStmt, type metadata accessor for PgQuery_DropStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_TruncateStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
    v4 = v3;
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_TruncateStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (*(_BYTE *)(v0 + 8) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0 + 16)
        || (lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior(),
            result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        type metadata accessor for PgQuery_TruncateStmt(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_TruncateStmt@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_TruncateStmt()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_TruncateStmt()
{
  return PgQuery_TruncateStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_TruncateStmt()
{
  return PgQuery_TruncateStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_TruncateStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TruncateStmt and conformance PgQuery_TruncateStmt, type metadata accessor for PgQuery_TruncateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_TruncateStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TruncateStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TruncateStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_TruncateStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TruncateStmt and conformance PgQuery_TruncateStmt, type metadata accessor for PgQuery_TruncateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_TruncateStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TruncateStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TruncateStmt and conformance PgQuery_TruncateStmt, type metadata accessor for PgQuery_TruncateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_TruncateStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CommentStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_CurrentOfExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object);
}

uint64_t PgQuery_CurrentOfExpr._StorageClass.__deallocating_deinit(_QWORD *a1)
{
  uint64_t v1;

  outlined destroy of (key: String, value: StorableValue)(v1 + *a1, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_CommentStmt._StorageClass()
{
  return type metadata accessor for PgQuery_CommentStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CommentStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CommentStmt._StorageClass);
}

void type metadata completion function for PgQuery_CommentStmt._StorageClass()
{
  type metadata completion function for PgQuery_CommentStmt._StorageClass();
}

{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_CommentStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v5;

  v1 = v0;
  specialized PgQuery_CommentStmt._uniqueStorage()();
  type metadata accessor for PgQuery_CommentStmt(0);
  swift_retain();
  v2 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v3 & 1) != 0)
        return swift_release();
      if (v2 == 1)
        break;
      if (v2 == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        v5 = v1;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (v2 == 3)
      {
        v5 = v1;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      v2 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    v5 = v1;
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
    v1 = v5;
    goto LABEL_6;
  }
  return swift_release();
}

uint64_t PgQuery_CommentStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Node;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;

  v24 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v8 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v20 = (uint64_t)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(int *)(type metadata accessor for PgQuery_CommentStmt(0) + 20);
  v19 = v3;
  v11 = *(_QWORD *)(v3 + v10);
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_BYTE *)(v11 + 24);
  if (destructiveProjectEnumData for StorableValue(v12, v13))
  {
    v22 = v12;
    v23 = v13;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  else
  {
    swift_retain();
  }
  outlined init with copy of PgQuery_Alias?(v11+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_8;
  }
  v14 = v20;
  outlined init with take of PgQuery_OidList((uint64_t)v7, v20, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v14, type metadata accessor for PgQuery_Node);
  if (v4)
    return swift_release();
LABEL_8:
  v15 = *(_QWORD *)(v11
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__comment
                  + 8);
  v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v16 = *(_QWORD *)(v11
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__comment) & 0xFFFFFFFFFFFFLL;
  if (v16)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CommentStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CommentStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CommentStmt()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CommentStmt()
{
  return PgQuery_CommentStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CommentStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CommentStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CommentStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommentStmt and conformance PgQuery_CommentStmt, type metadata accessor for PgQuery_CommentStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CommentStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CommentStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CommentStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CommentStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommentStmt and conformance PgQuery_CommentStmt, type metadata accessor for PgQuery_CommentStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CommentStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CommentStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommentStmt and conformance PgQuery_CommentStmt, type metadata accessor for PgQuery_CommentStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CommentStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_FetchStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          goto LABEL_5;
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_FetchStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  if (!*(_QWORD *)v0
    || (lazy protocol witness table accessor for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!*(_QWORD *)(v0 + 16)
      || (result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
    {
      v3 = *(_QWORD *)(v0 + 32);
      v4 = HIBYTE(v3) & 0xF;
      if ((v3 & 0x2000000000000000) == 0)
        v4 = *(_QWORD *)(v0 + 24) & 0xFFFFFFFFFFFFLL;
      if (!v4 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (*(_BYTE *)(v0 + 40) != 1
          || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for PgQuery_FetchStmt(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_FetchStmt@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0xE000000000000000;
  *(_BYTE *)(a1 + 40) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_FetchStmt()
{
  return 0xD000000000000012;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PgQuery_FetchStmt())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_FetchStmt()
{
  return PgQuery_FetchStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_FetchStmt()
{
  return PgQuery_FetchStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_FetchStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FetchStmt and conformance PgQuery_FetchStmt, type metadata accessor for PgQuery_FetchStmt, (uint64_t)&protocol conformance descriptor for PgQuery_FetchStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_FetchStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_FetchStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_FetchStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FetchStmt and conformance PgQuery_FetchStmt, type metadata accessor for PgQuery_FetchStmt, (uint64_t)&protocol conformance descriptor for PgQuery_FetchStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_FetchStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FetchStmt and conformance PgQuery_FetchStmt, type metadata accessor for PgQuery_FetchStmt, (uint64_t)&protocol conformance descriptor for PgQuery_FetchStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_IndexStmt._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Node;
  _QWORD *v8;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  v3 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod);
  *v3 = 0;
  v3[1] = 0xE000000000000000;
  v4 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpace);
  *v4 = 0;
  v4[1] = 0xE000000000000000;
  v5 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexParams) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexIncludingParams) = v5;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) = v5;
  v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v6, 1, 1, Node);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__excludeOpNames) = v5;
  v8 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__idxcomment);
  *v8 = 0;
  v8[1] = 0xE000000000000000;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexOid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldNode) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldCreateSubid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldFirstRelfilenodeSubid) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unique) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__primary) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transformed) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__concurrent) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc) = 0;
  return v0;
}

uint64_t PgQuery_IndexStmt._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PgQuery_IndexStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit((void (*)(void))PgQuery_IndexStmt._StorageClass.deinit);
}

uint64_t ObjC metadata update function for PgQuery_IndexStmt._StorageClass()
{
  return type metadata accessor for PgQuery_IndexStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_IndexStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_IndexStmt._StorageClass);
}

void type metadata completion function for PgQuery_IndexStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_IndexStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_IndexStmt, (void (*)(_QWORD))type metadata accessor for PgQuery_IndexStmt._StorageClass, specialized PgQuery_IndexStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_IndexStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_IndexStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
        case 4:
        case 10:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_12;
        case 2:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          goto LABEL_7;
        case 5:
        case 6:
        case 7:
        case 9:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_12;
        case 8:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
LABEL_7:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_12;
        case 11:
        case 12:
        case 13:
        case 14:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_12;
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_12:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_IndexStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t RangeVar;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t Node;
  uint64_t v41;
  uint64_t v42;

  v42 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v38 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v37 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v36 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v12 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(int *)(type metadata accessor for PgQuery_IndexStmt(0) + 20);
  v35 = v3;
  v16 = *(_QWORD *)(v3 + v15);
  v17 = *(_QWORD *)(v16 + 24);
  if ((v17 & 0x2000000000000000) != 0)
    v18 = HIBYTE(v17) & 0xF;
  else
    v18 = *(_QWORD *)(v16 + 16) & 0xFFFFFFFFFFFFLL;
  swift_retain();
  if (v18)
  {
    swift_bridgeObjectRetain();
    v19 = v41;
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    v20 = a3;
    v21 = v19;
    if (v19)
      goto LABEL_44;
    v39 = v20;
    swift_bridgeObjectRelease();
  }
  else
  {
    v39 = a3;
    v21 = v41;
  }
  outlined init with copy of PgQuery_Alias?(v16+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v14, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v22 = type metadata accessor for PgQuery_RangeVar;
    v23 = (uint64_t)v14;
    if (v21)
      goto LABEL_12;
    outlined destroy of PgQuery_Alias((uint64_t)v14, type metadata accessor for PgQuery_RangeVar);
  }
  v24 = *(_QWORD *)(v16
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                  + 8);
  v25 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000) == 0)
    v25 = *(_QWORD *)(v16
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) & 0xFFFFFFFFFFFFLL;
  v26 = Node;
  if (v25)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v21)
      goto LABEL_44;
    swift_bridgeObjectRelease();
  }
  v27 = *(_QWORD *)(v16
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpace
                  + 8);
  v28 = HIBYTE(v27) & 0xF;
  if ((v27 & 0x2000000000000000) == 0)
    v28 = *(_QWORD *)(v16
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpace) & 0xFFFFFFFFFFFFLL;
  if (v28)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v21)
      goto LABEL_44;
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v16
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexParams)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v21)
      goto LABEL_44;
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v16
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexIncludingParams)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v21)
      goto LABEL_44;
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v16
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v21)
      goto LABEL_44;
    swift_bridgeObjectRelease();
  }
  v29 = v38;
  outlined init with copy of PgQuery_Alias?(v16+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v38, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, v26) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_37;
  }
  v30 = v36;
  outlined init with take of PgQuery_OidList(v29, v36, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  v22 = type metadata accessor for PgQuery_Node;
  v23 = v30;
  if (v21)
  {
LABEL_12:
    outlined destroy of PgQuery_Alias(v23, v22);
    return swift_release();
  }
  outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_Node);
LABEL_37:
  if (*(_QWORD *)(*(_QWORD *)(v16
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__excludeOpNames)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (!v21)
    {
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }
LABEL_44:
    swift_bridgeObjectRelease();
    return swift_release();
  }
LABEL_40:
  v31 = *(_QWORD *)(v16
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__idxcomment
                  + 8);
  v32 = HIBYTE(v31) & 0xF;
  if ((v31 & 0x2000000000000000) == 0)
    v32 = *(_QWORD *)(v16
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__idxcomment) & 0xFFFFFFFFFFFFLL;
  if (v32)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v21)
      goto LABEL_44;
    swift_bridgeObjectRelease();
  }
  if (!*(_DWORD *)(v16
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexOid)
    || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v21))
  {
    if (!*(_DWORD *)(v16
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldNode)
      || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v21))
    {
      if (!*(_DWORD *)(v16
                      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldCreateSubid)
        || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v21))
      {
        if (!*(_DWORD *)(v16
                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldFirstRelfilenodeSubid)
          || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v21))
        {
          if (*(_BYTE *)(v16
                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unique) != 1
            || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v21))
          {
            if (*(_BYTE *)(v16
                          + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__primary) != 1
              || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v21))
            {
              if (*(_BYTE *)(v16
                            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint) != 1
                || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v21))
              {
                if (*(_BYTE *)(v16
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable) != 1
                  || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v21))
                {
                  if (*(_BYTE *)(v16
                                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred) != 1
                    || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v21))
                  {
                    if (*(_BYTE *)(v16
                                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transformed) != 1
                      || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v21))
                    {
                      if (*(_BYTE *)(v16
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__concurrent) != 1
                        || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v21))
                      {
                        if (*(_BYTE *)(v16
                                      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists) != 1
                          || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v21))
                        {
                          if (*(_BYTE *)(v16
                                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc) != 1
                            || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v21))
                          {
                            swift_release();
                            return UnknownStorage.traverse<A>(visitor:)();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_IndexStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_IndexStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_IndexStmt()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_IndexStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_IndexStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_IndexStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexStmt and conformance PgQuery_IndexStmt, type metadata accessor for PgQuery_IndexStmt, (uint64_t)&protocol conformance descriptor for PgQuery_IndexStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_IndexStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_IndexStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_IndexStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexStmt and conformance PgQuery_IndexStmt, type metadata accessor for PgQuery_IndexStmt, (uint64_t)&protocol conformance descriptor for PgQuery_IndexStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_IndexStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexStmt and conformance PgQuery_IndexStmt, type metadata accessor for PgQuery_IndexStmt, (uint64_t)&protocol conformance descriptor for PgQuery_IndexStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateFunctionStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 3:
        case 4:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 5:
          type metadata accessor for PgQuery_CreateFunctionStmt(0);
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateFunctionStmt.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t TypeName;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t FunctionStmt;
  _QWORD v13[2];
  uint64_t v14;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v14 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)v3 != 1 || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v2))
  {
    if (*(_BYTE *)(v3 + 1) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v2))
    {
      v13[1] = a1;
      if (!*(_QWORD *)(*(_QWORD *)(v3 + 8) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v2))
      {
        if (!*(_QWORD *)(*(_QWORD *)(v3 + 16) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v2))
        {
          FunctionStmt = type metadata accessor for PgQuery_CreateFunctionStmt(0);
          outlined init with copy of PgQuery_Alias?(v3 + *(int *)(FunctionStmt + 40), (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_TypeName?);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, TypeName) == 1)
          {
            outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_TypeName?);
          }
          else
          {
            outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v10, type metadata accessor for PgQuery_TypeName);
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
            dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
            result = outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_TypeName);
            if (v2)
              return result;
          }
          if (!*(_QWORD *)(*(_QWORD *)(v3 + 24) + 16))
            return UnknownStorage.traverse<A>(visitor:)();
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
          if (!v2)
            return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateFunctionStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t TypeName;

  v4 = MEMORY[0x1E0DEE9D8];
  *(_WORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v4;
  UnknownStorage.init()();
  v5 = a2 + *(int *)(a1 + 40);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 56))(v5, 1, 1, TypeName);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateFunctionStmt()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateFunctionStmt()
{
  return PgQuery_CreateFunctionStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateFunctionStmt(uint64_t a1)
{
  return PgQuery_CreateFunctionStmt.traverse<A>(visitor:)(a1);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateFunctionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFunctionStmt and conformance PgQuery_CreateFunctionStmt, type metadata accessor for PgQuery_CreateFunctionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateFunctionStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateFunctionStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateFunctionStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateFunctionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFunctionStmt and conformance PgQuery_CreateFunctionStmt, type metadata accessor for PgQuery_CreateFunctionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateFunctionStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateFunctionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFunctionStmt and conformance PgQuery_CreateFunctionStmt, type metadata accessor for PgQuery_CreateFunctionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateFunctionStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterFunctionStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        type metadata accessor for PgQuery_AlterFunctionStmt(0);
        type metadata accessor for PgQuery_ObjectWithArgs(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, type metadata accessor for PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_AlterFunctionStmt.traverse<A>(visitor:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t result;
  uint64_t AlterFunctionStmt;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectWithArgs;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t *v16;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v5 = *(_QWORD *)(ObjectWithArgs - 8);
  MEMORY[0x1E0C80A78](ObjectWithArgs);
  v12 = (uint64_t)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v0;
  v16 = v0;
  v8 = *((_BYTE *)v0 + 8);
  if (!destructiveProjectEnumData for StorableValue(v7, v8)
    || (v14 = v7,
        v15 = v8,
        lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    AlterFunctionStmt = type metadata accessor for PgQuery_AlterFunctionStmt(0);
    outlined init with copy of PgQuery_Alias?((uint64_t)v16 + *(int *)(AlterFunctionStmt + 28), (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, ObjectWithArgs) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    }
    else
    {
      v11 = v12;
      outlined init with take of PgQuery_OidList((uint64_t)v4, v12, type metadata accessor for PgQuery_ObjectWithArgs);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, type metadata accessor for PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      result = outlined destroy of PgQuery_Alias(v11, type metadata accessor for PgQuery_ObjectWithArgs);
      if (v1)
        return result;
    }
    if (!*(_QWORD *)(v16[2] + 16))
      return UnknownStorage.traverse<A>(visitor:)();
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (!v1)
      return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterFunctionStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t ObjectWithArgs;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = MEMORY[0x1E0DEE9D8];
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 28);
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(ObjectWithArgs - 8) + 56))(v4, 1, 1, ObjectWithArgs);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterFunctionStmt()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterFunctionStmt()
{
  return PgQuery_AlterFunctionStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterFunctionStmt()
{
  return PgQuery_AlterFunctionStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterFunctionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFunctionStmt and conformance PgQuery_AlterFunctionStmt, type metadata accessor for PgQuery_AlterFunctionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterFunctionStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterFunctionStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterFunctionStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterFunctionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFunctionStmt and conformance PgQuery_AlterFunctionStmt, type metadata accessor for PgQuery_AlterFunctionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterFunctionStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterFunctionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFunctionStmt and conformance PgQuery_AlterFunctionStmt, type metadata accessor for PgQuery_AlterFunctionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterFunctionStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_DoStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_List.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_DoStmt);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DoStmt()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DoStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DoStmt and conformance PgQuery_DoStmt, type metadata accessor for PgQuery_DoStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DoStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DoStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DoStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DoStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DoStmt and conformance PgQuery_DoStmt, type metadata accessor for PgQuery_DoStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DoStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DoStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DoStmt and conformance PgQuery_DoStmt, type metadata accessor for PgQuery_DoStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DoStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_DoStmt(uint64_t *a1, uint64_t *a2)
{
  return specialized static PgQuery_AlterCollationStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_DoStmt) & 1;
}

uint64_t PgQuery_RenameStmt._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_RenameStmt._StorageClass()
{
  return type metadata accessor for PgQuery_RenameStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RenameStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RenameStmt._StorageClass);
}

void type metadata completion function for PgQuery_RenameStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_RenameStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RenameStmt, (void (*)(_QWORD))type metadata accessor for PgQuery_RenameStmt._StorageClass, specialized PgQuery_RenameStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RenameStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_RenameStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          goto LABEL_11;
        case 3:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          goto LABEL_8;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
LABEL_8:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 5:
        case 6:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 7:
          lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
LABEL_11:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 8:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RenameStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t Node;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t RangeVar;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v2);
  v31 = (uint64_t)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v30 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v28 = (uint64_t)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v8 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v29 = (uint64_t)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(int *)(type metadata accessor for PgQuery_RenameStmt(0) + 20);
  v27 = v0;
  v11 = *(_QWORD *)(v0 + v10);
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_BYTE *)(v11 + 24);
  if (destructiveProjectEnumData for StorableValue(v12, v13))
  {
    v33 = v12;
    v34 = v13;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  else
  {
    swift_retain();
  }
  v14 = *(_QWORD *)(v11 + 32);
  v15 = *(_BYTE *)(v11 + 40);
  if (destructiveProjectEnumData for StorableValue(v14, v15))
  {
    v33 = v14;
    v34 = v15;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    v16 = v1;
    if (v1)
      return swift_release();
  }
  else
  {
    v16 = v1;
  }
  outlined init with copy of PgQuery_Alias?(v11+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    v17 = v29;
    outlined init with take of PgQuery_OidList((uint64_t)v7, v29, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v17, type metadata accessor for PgQuery_RangeVar);
    if (v16)
      return swift_release();
  }
  v18 = v31;
  outlined init with copy of PgQuery_Alias?(v11+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v31, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v18, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v18, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_15;
  }
  v19 = v18;
  v20 = v28;
  outlined init with take of PgQuery_OidList(v19, v28, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
  if (v16)
    return swift_release();
LABEL_15:
  v21 = *(_QWORD *)(v11
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subname
                  + 8);
  v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0)
    v22 = *(_QWORD *)(v11
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subname) & 0xFFFFFFFFFFFFLL;
  if (v22)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v16)
      return swift_release();
  }
  v23 = *(_QWORD *)(v11
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newname
                  + 8);
  v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0)
    v24 = *(_QWORD *)(v11
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newname) & 0xFFFFFFFFFFFFLL;
  if (v24)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v16)
      return swift_release();
  }
  if (*(_QWORD *)(v11
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior))
  {
    v25 = *(_BYTE *)(v11
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior
                   + 8);
    v33 = *(_QWORD *)(v11
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
    v34 = v25;
    lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v16)
      return swift_release();
  }
  if (*(_BYTE *)(v11
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v16)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RenameStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RenameStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RenameStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RenameStmt()
{
  return PgQuery_RenameStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RenameStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RenameStmt and conformance PgQuery_RenameStmt, type metadata accessor for PgQuery_RenameStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RenameStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RenameStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RenameStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RenameStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RenameStmt and conformance PgQuery_RenameStmt, type metadata accessor for PgQuery_RenameStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RenameStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RenameStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RenameStmt and conformance PgQuery_RenameStmt, type metadata accessor for PgQuery_RenameStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RenameStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_RuleStmt._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_RuleStmt._StorageClass()
{
  return type metadata accessor for PgQuery_RuleStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RuleStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RuleStmt._StorageClass);
}

void type metadata completion function for PgQuery_RuleStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_RuleStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RuleStmt, (void (*)(_QWORD))type metadata accessor for PgQuery_RuleStmt._StorageClass, specialized PgQuery_RuleStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RuleStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_RuleStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          goto LABEL_8;
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_12;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
LABEL_8:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_12;
        case 4:
          lazy protocol witness table accessor for type PgQuery_CmdType and conformance PgQuery_CmdType();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_12;
        case 5:
        case 7:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_12;
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_12:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RuleStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t RangeVar;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t Node;

  v29 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v28 = (uint64_t)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v27 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v26 = (uint64_t)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v12 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(int *)(type metadata accessor for PgQuery_RuleStmt(0) + 20);
  v25 = v3;
  v16 = *(_QWORD *)(v3 + v15);
  outlined init with copy of PgQuery_Alias?(v16+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, RangeVar) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v17 = Node;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v14, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v14, type metadata accessor for PgQuery_RangeVar);
    v17 = Node;
    if (v4)
      return swift_release();
  }
  v18 = *(_QWORD *)(v16
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rulename
                  + 8);
  v19 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0)
    v19 = *(_QWORD *)(v16
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rulename) & 0xFFFFFFFFFFFFLL;
  if (v19)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  v20 = v28;
  outlined init with copy of PgQuery_Alias?(v16+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v28, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v20, 1, v17) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v20, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_11;
  }
  v21 = v26;
  outlined init with take of PgQuery_OidList(v20, v26, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_Node);
  if (v4)
    return swift_release();
LABEL_11:
  if (*(_QWORD *)(v16
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__event))
  {
    v22 = *(_BYTE *)(v16
                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__event
                   + 8);
    v30 = *(_QWORD *)(v16
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__event);
    v31 = v22;
    lazy protocol witness table accessor for type PgQuery_CmdType and conformance PgQuery_CmdType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_BYTE *)(v16
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__instead) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v16
                             + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__actions)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_BYTE *)(v16
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__replace) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RuleStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RuleStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RuleStmt()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RuleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_RuleStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RuleStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RuleStmt and conformance PgQuery_RuleStmt, type metadata accessor for PgQuery_RuleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RuleStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RuleStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RuleStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RuleStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RuleStmt and conformance PgQuery_RuleStmt, type metadata accessor for PgQuery_RuleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RuleStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RuleStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RuleStmt and conformance PgQuery_RuleStmt, type metadata accessor for PgQuery_RuleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RuleStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_NotifyStmt.decodeMessage<A>(decoder:)()
{
  return PgQuery_NotifyStmt.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_NotifyStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_NotifyStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_NotifyStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_NotifyStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_NotifyStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NotifyStmt and conformance PgQuery_NotifyStmt, type metadata accessor for PgQuery_NotifyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_NotifyStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_NotifyStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_NotifyStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_NotifyStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NotifyStmt and conformance PgQuery_NotifyStmt, type metadata accessor for PgQuery_NotifyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_NotifyStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_NotifyStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NotifyStmt and conformance PgQuery_NotifyStmt, type metadata accessor for PgQuery_NotifyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_NotifyStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_NotifyStmt(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_ReplicaIdentityStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_NotifyStmt) & 1;
}

uint64_t PgQuery_ListenStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Float.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_ListenStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ListenStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ListenStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ListenStmt and conformance PgQuery_ListenStmt, type metadata accessor for PgQuery_ListenStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ListenStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ListenStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ListenStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ListenStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ListenStmt and conformance PgQuery_ListenStmt, type metadata accessor for PgQuery_ListenStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ListenStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ListenStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ListenStmt and conformance PgQuery_ListenStmt, type metadata accessor for PgQuery_ListenStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ListenStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ListenStmt(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_VariableShowStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_ListenStmt) & 1;
}

uint64_t PgQuery_UnlistenStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Float.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_UnlistenStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_UnlistenStmt()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_UnlistenStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UnlistenStmt and conformance PgQuery_UnlistenStmt, type metadata accessor for PgQuery_UnlistenStmt, (uint64_t)&protocol conformance descriptor for PgQuery_UnlistenStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_UnlistenStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_UnlistenStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_UnlistenStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UnlistenStmt and conformance PgQuery_UnlistenStmt, type metadata accessor for PgQuery_UnlistenStmt, (uint64_t)&protocol conformance descriptor for PgQuery_UnlistenStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_UnlistenStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UnlistenStmt and conformance PgQuery_UnlistenStmt, type metadata accessor for PgQuery_UnlistenStmt, (uint64_t)&protocol conformance descriptor for PgQuery_UnlistenStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_UnlistenStmt(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_VariableShowStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_UnlistenStmt) & 1;
}

uint64_t PgQuery_TransactionStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_TransactionStmtKind and conformance PgQuery_TransactionStmtKind();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_TransactionStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!*(_QWORD *)v0
    || (lazy protocol witness table accessor for type PgQuery_TransactionStmtKind and conformance PgQuery_TransactionStmtKind(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      v3 = *(_QWORD *)(v0 + 32);
      v4 = HIBYTE(v3) & 0xF;
      if ((v3 & 0x2000000000000000) == 0)
        v4 = *(_QWORD *)(v0 + 24) & 0xFFFFFFFFFFFFLL;
      if (!v4 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        v5 = *(_QWORD *)(v0 + 48);
        v6 = HIBYTE(v5) & 0xF;
        if ((v5 & 0x2000000000000000) == 0)
          v6 = *(_QWORD *)(v0 + 40) & 0xFFFFFFFFFFFFLL;
        if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          if (*(_BYTE *)(v0 + 56) != 1
            || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for PgQuery_TransactionStmt(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_TransactionStmt@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0xE000000000000000;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0xE000000000000000;
  *(_BYTE *)(a1 + 56) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_TransactionStmt()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_TransactionStmt()
{
  return PgQuery_TransactionStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_TransactionStmt()
{
  return PgQuery_TransactionStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_TransactionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TransactionStmt and conformance PgQuery_TransactionStmt, type metadata accessor for PgQuery_TransactionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_TransactionStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TransactionStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TransactionStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_TransactionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TransactionStmt and conformance PgQuery_TransactionStmt, type metadata accessor for PgQuery_TransactionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_TransactionStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TransactionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TransactionStmt and conformance PgQuery_TransactionStmt, type metadata accessor for PgQuery_TransactionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_TransactionStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_ViewStmt._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__view, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_ViewStmt._StorageClass()
{
  return type metadata accessor for PgQuery_ViewStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_ViewStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ViewStmt._StorageClass);
}

void type metadata completion function for PgQuery_ViewStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_ViewStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_ViewStmt, (void (*)(_QWORD))type metadata accessor for PgQuery_ViewStmt._StorageClass, specialized PgQuery_ViewStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_ViewStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_ViewStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          goto LABEL_5;
        case 2:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_6;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
LABEL_5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_6;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_6;
        case 6:
          lazy protocol witness table accessor for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_6:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ViewStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t RangeVar;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t Node;

  v27 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v26 = (uint64_t)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v25 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v24 = (uint64_t)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v12 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(int *)(type metadata accessor for PgQuery_ViewStmt(0) + 20);
  v23 = v3;
  v16 = *(_QWORD *)(v3 + v15);
  outlined init with copy of PgQuery_Alias?(v16 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__view, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, RangeVar) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v17 = Node;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v14, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v14, type metadata accessor for PgQuery_RangeVar);
    v17 = Node;
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v16
                             + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aliases)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  v18 = v26;
  outlined init with copy of PgQuery_Alias?(v16 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, v26, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v18, 1, v17) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v18, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_9;
  }
  v19 = v24;
  outlined init with take of PgQuery_OidList(v18, v24, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v19, type metadata accessor for PgQuery_Node);
  if (v4)
    return swift_release();
LABEL_9:
  if (*(_BYTE *)(v16
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__replace) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v16
                             + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(v16
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOption))
  {
    v20 = *(_BYTE *)(v16
                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOption
                   + 8);
    v28 = *(_QWORD *)(v16
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOption);
    v29 = v20;
    lazy protocol witness table accessor for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ViewStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_ViewStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ViewStmt()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ViewStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ViewStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ViewStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ViewStmt and conformance PgQuery_ViewStmt, type metadata accessor for PgQuery_ViewStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ViewStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ViewStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ViewStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ViewStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ViewStmt and conformance PgQuery_ViewStmt, type metadata accessor for PgQuery_ViewStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ViewStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ViewStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ViewStmt and conformance PgQuery_ViewStmt, type metadata accessor for PgQuery_ViewStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ViewStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_LoadStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Float.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_LoadStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_LoadStmt()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_LoadStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LoadStmt and conformance PgQuery_LoadStmt, type metadata accessor for PgQuery_LoadStmt, (uint64_t)&protocol conformance descriptor for PgQuery_LoadStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_LoadStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_LoadStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_LoadStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LoadStmt and conformance PgQuery_LoadStmt, type metadata accessor for PgQuery_LoadStmt, (uint64_t)&protocol conformance descriptor for PgQuery_LoadStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_LoadStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LoadStmt and conformance PgQuery_LoadStmt, type metadata accessor for PgQuery_LoadStmt, (uint64_t)&protocol conformance descriptor for PgQuery_LoadStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_LoadStmt(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_VariableShowStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_LoadStmt) & 1;
}

uint64_t PgQuery_CreateDomainStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t TypeName;
  uint64_t v6;
  uint64_t CollateClause;
  uint64_t v8;
  uint64_t v9;

  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 16) = MEMORY[0x1E0DEE9D8];
  v4 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 56))(v4, 1, 1, TypeName);
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause;
  CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CollateClause - 8) + 56))(v6, 1, 1, CollateClause);
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints) = v3;
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, v4, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause, v6, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  v9 = *(_QWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
  swift_bridgeObjectRetain();
  swift_release();
  *(_QWORD *)(v1 + v8) = v9;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PgQuery_CreateDomainStmt._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_CreateDomainStmt._StorageClass()
{
  return type metadata accessor for PgQuery_CreateDomainStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CreateDomainStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateDomainStmt._StorageClass);
}

void type metadata completion function for PgQuery_CreateDomainStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_CollateClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateClause);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for PgQuery_CollateClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CollateClause);
}

uint64_t PgQuery_CreateDomainStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(int *)(type metadata accessor for PgQuery_CreateDomainStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_CreateDomainStmt._StorageClass(0);
    swift_allocObject();
    v3 = swift_retain();
    *(_QWORD *)(v0 + v2) = PgQuery_CreateDomainStmt._StorageClass.init(copying:)(v3);
    swift_release();
  }
  swift_retain();
  v4 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v5 & 1) == 0)
    {
      switch(v4)
      {
        case 1:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 2:
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
          goto LABEL_11;
        case 3:
          type metadata accessor for PgQuery_CollateClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, type metadata accessor for PgQuery_CollateClause, (uint64_t)&protocol conformance descriptor for PgQuery_CollateClause);
LABEL_11:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      v4 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_CreateDomainStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t TypeName;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t CollateClause;
  uint64_t v29;

  v4 = v3;
  v29 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CollateClause?);
  MEMORY[0x1E0C80A78](v5);
  v27 = (uint64_t)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  v26 = *(_QWORD *)(CollateClause - 8);
  MEMORY[0x1E0C80A78](CollateClause);
  v24 = (uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v12 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v25 = (uint64_t)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(int *)(type metadata accessor for PgQuery_CreateDomainStmt(0) + 20);
  v23 = v2;
  v15 = *(_QWORD *)(v2 + v14);
  if (*(_QWORD *)(*(_QWORD *)(v15 + 16) + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    v4 = v3;
    swift_bridgeObjectRelease();
    v16 = v15;
    if (v3)
      return swift_release();
  }
  else
  {
    swift_retain();
    v16 = v15;
  }
  outlined init with copy of PgQuery_Alias?(v16+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, TypeName) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_TypeName?);
  }
  else
  {
    v17 = (uint64_t)v10;
    v18 = v25;
    outlined init with take of PgQuery_OidList(v17, v25, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v18, type metadata accessor for PgQuery_TypeName);
    if (v4)
      return swift_release();
  }
  v19 = v27;
  outlined init with copy of PgQuery_Alias?(v16+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause, v27, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v19, 1, CollateClause) != 1)
  {
    v20 = v19;
    v21 = v24;
    outlined init with take of PgQuery_OidList(v20, v24, type metadata accessor for PgQuery_CollateClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, type metadata accessor for PgQuery_CollateClause, (uint64_t)&protocol conformance descriptor for PgQuery_CollateClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_CollateClause);
    if (!v4)
      goto LABEL_11;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)(v19, &demangling cache variable for type metadata for PgQuery_CollateClause?);
LABEL_11:
  if (*(_QWORD *)(*(_QWORD *)(v16
                             + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateDomainStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CreateDomainStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateDomainStmt()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateDomainStmt()
{
  return PgQuery_CreateDomainStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateDomainStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_CreateDomainStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateDomainStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateDomainStmt and conformance PgQuery_CreateDomainStmt, type metadata accessor for PgQuery_CreateDomainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateDomainStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateDomainStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateDomainStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateDomainStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateDomainStmt and conformance PgQuery_CreateDomainStmt, type metadata accessor for PgQuery_CreateDomainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateDomainStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateDomainStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateDomainStmt and conformance PgQuery_CreateDomainStmt, type metadata accessor for PgQuery_CreateDomainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateDomainStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreatedbStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Alias.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_CreatedbStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreatedbStmt()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreatedbStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatedbStmt and conformance PgQuery_CreatedbStmt, type metadata accessor for PgQuery_CreatedbStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatedbStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreatedbStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreatedbStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreatedbStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatedbStmt and conformance PgQuery_CreatedbStmt, type metadata accessor for PgQuery_CreatedbStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatedbStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreatedbStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatedbStmt and conformance PgQuery_CreatedbStmt, type metadata accessor for PgQuery_CreatedbStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatedbStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CreatedbStmt(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CreatedbStmt) & 1;
}

uint64_t PgQuery_DropdbStmt.decodeMessage<A>(decoder:)()
{
  return PgQuery_DropdbStmt.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_DropdbStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_DropdbStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_DropdbStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DropdbStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DropdbStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropdbStmt and conformance PgQuery_DropdbStmt, type metadata accessor for PgQuery_DropdbStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropdbStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DropdbStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DropdbStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DropdbStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropdbStmt and conformance PgQuery_DropdbStmt, type metadata accessor for PgQuery_DropdbStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropdbStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DropdbStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropdbStmt and conformance PgQuery_DropdbStmt, type metadata accessor for PgQuery_DropdbStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropdbStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_DropdbStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CreateExtensionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_DropdbStmt) & 1;
}

uint64_t PgQuery_VacuumStmt.decodeMessage<A>(decoder:)()
{
  return PgQuery_VacuumStmt.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      else if (result == 2 || result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_VacuumStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_VacuumStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_VacuumStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_VacuumStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_VacuumStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumStmt and conformance PgQuery_VacuumStmt, type metadata accessor for PgQuery_VacuumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VacuumStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_VacuumStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_VacuumStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_VacuumStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumStmt and conformance PgQuery_VacuumStmt, type metadata accessor for PgQuery_VacuumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VacuumStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_VacuumStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumStmt and conformance PgQuery_VacuumStmt, type metadata accessor for PgQuery_VacuumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VacuumStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_VacuumStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_ObjectWithArgs.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_VacuumStmt) & 1;
}

uint64_t one-time initialization function for defaultInstance(uint64_t a1, void (*a2)(_QWORD), _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t Node;
  uint64_t result;

  a2(0);
  v8 = swift_allocObject();
  v9 = v8 + *a3;
  Node = type metadata accessor for PgQuery_Node(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v9, 1, 1, Node);
  *(_QWORD *)(v8 + *a4) = MEMORY[0x1E0DEE9D8];
  *a5 = v8;
  return result;
}

uint64_t PgQuery_ExplainStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query);
}

uint64_t ObjC metadata update function for PgQuery_ExplainStmt._StorageClass()
{
  return type metadata accessor for PgQuery_ExplainStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_ExplainStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ExplainStmt._StorageClass);
}

uint64_t PgQuery_ExplainStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlternativeSubPlan.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_ExplainStmt, (void (*)(_QWORD))type metadata accessor for PgQuery_ExplainStmt._StorageClass, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, (uint64_t *)&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
}

uint64_t PgQuery_ExplainStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlternativeSubPlan.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for PgQuery_ExplainStmt, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ExplainStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_ExplainStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ExplainStmt()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ExplainStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExplainStmt and conformance PgQuery_ExplainStmt, type metadata accessor for PgQuery_ExplainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ExplainStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ExplainStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ExplainStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ExplainStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExplainStmt and conformance PgQuery_ExplainStmt, type metadata accessor for PgQuery_ExplainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ExplainStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ExplainStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExplainStmt and conformance PgQuery_ExplainStmt, type metadata accessor for PgQuery_ExplainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ExplainStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ExplainStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_AlternativeSubPlan.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_ExplainStmt, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) & 1;
}

uint64_t PgQuery_CreateTableAsStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__into, &demangling cache variable for type metadata for PgQuery_IntoClause?);
}

uint64_t ObjC metadata update function for PgQuery_CreateTableAsStmt._StorageClass()
{
  return type metadata accessor for PgQuery_CreateTableAsStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CreateTableAsStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateTableAsStmt._StorageClass);
}

void type metadata completion function for PgQuery_CreateTableAsStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_IntoClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_IntoClause);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_CreateTableAsStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_CreateTableAsStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_CreateTableAsStmt._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_CreateTableAsStmt._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          goto LABEL_7;
        case 2:
          type metadata accessor for PgQuery_IntoClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, type metadata accessor for PgQuery_IntoClause, (uint64_t)&protocol conformance descriptor for PgQuery_IntoClause);
LABEL_7:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 3:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_8;
        case 4:
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_8:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_CreateTableAsStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t IntoClause;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t Node;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;

  v31 = a3;
  v28 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_IntoClause?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  v26 = *(_QWORD *)(IntoClause - 8);
  v27 = IntoClause;
  MEMORY[0x1E0C80A78](IntoClause);
  v25 = (uint64_t)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v14 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(int *)(type metadata accessor for PgQuery_CreateTableAsStmt(0) + 20);
  v24 = v3;
  v18 = *(_QWORD *)(v3 + v17);
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__into, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v7, 1, v27) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_IntoClause?);
    goto LABEL_7;
  }
  v19 = v25;
  outlined init with take of PgQuery_OidList((uint64_t)v7, v25, type metadata accessor for PgQuery_IntoClause);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, type metadata accessor for PgQuery_IntoClause, (uint64_t)&protocol conformance descriptor for PgQuery_IntoClause);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v19, type metadata accessor for PgQuery_IntoClause);
  if (v4)
    return swift_release();
LABEL_7:
  v20 = *(_QWORD *)(v18
                  + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relkind);
  v21 = *(_BYTE *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relkind
                 + 8);
  if (destructiveProjectEnumData for StorableValue(v20, v21))
  {
    v29 = v20;
    v30 = v21;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_BYTE *)(v18
                + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isSelectInto) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_BYTE *)(v18
                + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateTableAsStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CreateTableAsStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateTableAsStmt()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateTableAsStmt()
{
  return PgQuery_CreateTableAsStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateTableAsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateTableAsStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateTableAsStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableAsStmt and conformance PgQuery_CreateTableAsStmt, type metadata accessor for PgQuery_CreateTableAsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTableAsStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateTableAsStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateTableAsStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateTableAsStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableAsStmt and conformance PgQuery_CreateTableAsStmt, type metadata accessor for PgQuery_CreateTableAsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTableAsStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateTableAsStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableAsStmt and conformance PgQuery_CreateTableAsStmt, type metadata accessor for PgQuery_CreateTableAsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTableAsStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateSeqStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_CreateSeqStmt(0);
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 4:
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateSeqStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t RangeVar;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  _QWORD v13[4];

  v13[3] = a3;
  v13[1] = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v9 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = type metadata accessor for PgQuery_CreateSeqStmt(0);
  outlined init with copy of PgQuery_Alias?(v3 + *(int *)(v13[0] + 36), (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_RangeVar);
    if (v4)
      return result;
  }
  if (!*(_QWORD *)(*(_QWORD *)v3 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
  {
    if (!*(_DWORD *)(v3 + 8)
      || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
    {
      if (*(_BYTE *)(v3 + 12) != 1
        || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
      {
        if (*(_BYTE *)(v3 + 13) != 1)
          return UnknownStorage.traverse<A>(visitor:)();
        result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
        if (!v4)
          return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateSeqStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t RangeVar;

  *(_QWORD *)a2 = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(a2 + 8) = 0;
  *(_WORD *)(a2 + 12) = 0;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 36);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v4, 1, 1, RangeVar);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateSeqStmt()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateSeqStmt()
{
  return PgQuery_CreateSeqStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateSeqStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateSeqStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSeqStmt and conformance PgQuery_CreateSeqStmt, type metadata accessor for PgQuery_CreateSeqStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSeqStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateSeqStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateSeqStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateSeqStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSeqStmt and conformance PgQuery_CreateSeqStmt, type metadata accessor for PgQuery_CreateSeqStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSeqStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateSeqStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSeqStmt and conformance PgQuery_CreateSeqStmt, type metadata accessor for PgQuery_CreateSeqStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSeqStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterSeqStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_AlterSeqStmt(0);
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterSeqStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t RangeVar;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  _QWORD v13[4];

  v13[3] = a3;
  v13[1] = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v9 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = type metadata accessor for PgQuery_AlterSeqStmt(0);
  outlined init with copy of PgQuery_Alias?((uint64_t)&v3[*(int *)(v13[0] + 32)], (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_RangeVar);
    if (v4)
      return result;
  }
  if (!*(_QWORD *)(*(_QWORD *)v3 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
  {
    if (v3[8] != 1 || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
    {
      if (v3[9] != 1)
        return UnknownStorage.traverse<A>(visitor:)();
      result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      if (!v4)
        return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterSeqStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t RangeVar;

  *(_QWORD *)a2 = MEMORY[0x1E0DEE9D8];
  *(_WORD *)(a2 + 8) = 0;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 32);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v4, 1, 1, RangeVar);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterSeqStmt()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterSeqStmt()
{
  return PgQuery_AlterSeqStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterSeqStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterSeqStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSeqStmt and conformance PgQuery_AlterSeqStmt, type metadata accessor for PgQuery_AlterSeqStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSeqStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterSeqStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterSeqStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterSeqStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSeqStmt and conformance PgQuery_AlterSeqStmt, type metadata accessor for PgQuery_AlterSeqStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSeqStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterSeqStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSeqStmt and conformance PgQuery_AlterSeqStmt, type metadata accessor for PgQuery_AlterSeqStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSeqStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_VariableSetStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_VariableSetKind and conformance PgQuery_VariableSetKind();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_VariableSetStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  if (!*(_QWORD *)v0
    || (lazy protocol witness table accessor for type PgQuery_VariableSetKind and conformance PgQuery_VariableSetKind(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    v3 = *(_QWORD *)(v0 + 24);
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = *(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    if (!v4 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (*(_BYTE *)(v0 + 40) != 1
          || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for PgQuery_VariableSetStmt(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_VariableSetStmt@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a1 + 40) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_VariableSetStmt()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_VariableSetStmt()
{
  return PgQuery_VariableSetStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_VariableSetStmt()
{
  return PgQuery_VariableSetStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_VariableSetStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, type metadata accessor for PgQuery_VariableSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableSetStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_VariableSetStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_VariableSetStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_VariableSetStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, type metadata accessor for PgQuery_VariableSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableSetStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_VariableSetStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, type metadata accessor for PgQuery_VariableSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableSetStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_VariableShowStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Float.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_VariableShowStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_VariableShowStmt()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_VariableShowStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableShowStmt and conformance PgQuery_VariableShowStmt, type metadata accessor for PgQuery_VariableShowStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableShowStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_VariableShowStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_VariableShowStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_VariableShowStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableShowStmt and conformance PgQuery_VariableShowStmt, type metadata accessor for PgQuery_VariableShowStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableShowStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_VariableShowStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableShowStmt and conformance PgQuery_VariableShowStmt, type metadata accessor for PgQuery_VariableShowStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableShowStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_VariableShowStmt(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_VariableShowStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_VariableShowStmt) & 1;
}

uint64_t PgQuery_DiscardStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        lazy protocol witness table accessor for type PgQuery_DiscardMode and conformance PgQuery_DiscardMode();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_DiscardStmt.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0
    || (lazy protocol witness table accessor for type PgQuery_DiscardMode and conformance PgQuery_DiscardMode(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    type metadata accessor for PgQuery_DiscardStmt(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DiscardStmt@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DiscardStmt()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DiscardStmt()
{
  return PgQuery_DiscardStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DiscardStmt()
{
  return PgQuery_DiscardStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DiscardStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DiscardStmt and conformance PgQuery_DiscardStmt, type metadata accessor for PgQuery_DiscardStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DiscardStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DiscardStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DiscardStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DiscardStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DiscardStmt and conformance PgQuery_DiscardStmt, type metadata accessor for PgQuery_DiscardStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DiscardStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DiscardStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DiscardStmt and conformance PgQuery_DiscardStmt, type metadata accessor for PgQuery_DiscardStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DiscardStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateTrigStmt._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t Node;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56);
  v3(v1, 1, 1, RangeVar);
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcname) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = v4;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__row) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__timing) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__events) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns) = v4;
  v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whenClause;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v5, 1, 1, Node);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transitionRels) = v4;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred) = 0;
  v3(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constrrel, 1, 1, RangeVar);
  return v0;
}

uint64_t PgQuery_CreateTrigStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t RangeVar;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Node;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v3);
  v26 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0xE000000000000000;
  v5 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56);
  v7(v5, 1, 1, RangeVar);
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcname;
  v9 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcname) = MEMORY[0x1E0DEE9D8];
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = v9;
  v21 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__row;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__row) = 0;
  v20 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__timing;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__timing) = 0;
  v19 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__events;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__events) = 0;
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns) = v9;
  v12 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whenClause;
  v23 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whenClause;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v12, 1, 1, Node);
  v22 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint) = 0;
  v14 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transitionRels;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transitionRels) = v9;
  v25 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable) = 0;
  v24 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred) = 0;
  v15 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constrrel;
  v7(v1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constrrel, 1, 1, RangeVar);
  v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v1 + 24) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v5, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  *(_QWORD *)(v1 + v8) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcname);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v10) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v1 + v21) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__row);
  *(_DWORD *)(v1 + v20) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__timing);
  *(_DWORD *)(v1 + v19) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__events);
  *(_QWORD *)(v1 + v11) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whenClause, v23, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_BYTE *)(v1 + v22) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint);
  *(_QWORD *)(v1 + v14) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transitionRels);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = (uint64_t)v26;
  *(_BYTE *)(v1 + v25) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable);
  *(_BYTE *)(v1 + v24) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred);
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constrrel, v17, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_release();
  outlined assign with take of PgQuery_Node?(v17, v15, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  return v1;
}

uint64_t PgQuery_CreateTrigStmt._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whenClause, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constrrel, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  return v0;
}

uint64_t PgQuery_CreateTrigStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit((void (*)(void))PgQuery_CreateTrigStmt._StorageClass.deinit);
}

uint64_t ObjC metadata update function for PgQuery_CreateTrigStmt._StorageClass()
{
  return type metadata accessor for PgQuery_CreateTrigStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CreateTrigStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateTrigStmt._StorageClass);
}

void type metadata completion function for PgQuery_CreateTrigStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_CreateTrigStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_CreateTrigStmt, (void (*)(_QWORD))type metadata accessor for PgQuery_CreateTrigStmt._StorageClass, PgQuery_CreateTrigStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CreateTrigStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_CreateTrigStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
        case 14:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          goto LABEL_11;
        case 3:
        case 4:
        case 8:
        case 11:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 5:
        case 10:
        case 12:
        case 13:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 6:
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 9:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
LABEL_11:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateTrigStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v19)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t Node;
  uint64_t RangeVar;
  unsigned int (*v38)(_QWORD, _QWORD, _QWORD);

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v1);
  v35 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v34 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v33 = (uint64_t)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v32 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v30 - v7;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v9 = *(_QWORD *)(RangeVar - 8);
  v10 = MEMORY[0x1E0C80A78](RangeVar);
  v30 = (uint64_t)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v30 - v12;
  v14 = *(int *)(type metadata accessor for PgQuery_CreateTrigStmt(0) + 20);
  v31 = v0;
  v15 = *(_QWORD *)(v0 + v14);
  v16 = *(_QWORD *)(v15 + 24);
  if ((v16 & 0x2000000000000000) != 0)
    v17 = HIBYTE(v16) & 0xF;
  else
    v17 = *(_QWORD *)(v15 + 16) & 0xFFFFFFFFFFFFLL;
  swift_retain();
  if (v17)
  {
    swift_bridgeObjectRetain();
    v18 = v38;
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    v19 = v18;
    if (v18)
      goto LABEL_18;
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = v38;
  }
  outlined init with copy of PgQuery_Alias?(v15+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v20 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v9 + 48);
  v21 = RangeVar;
  if (v20(v8, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v22 = Node;
  }
  else
  {
    v38 = v20;
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v13, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v19)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_RangeVar);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_RangeVar);
    v22 = Node;
    v20 = v38;
  }
  if (*(_QWORD *)(*(_QWORD *)(v15
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcname)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (!v19)
    {
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    return swift_release();
  }
LABEL_16:
  if (*(_QWORD *)(*(_QWORD *)(v15
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v19)
      goto LABEL_18;
    swift_bridgeObjectRelease();
  }
  if (*(_BYTE *)(v15
                + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__row) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v19)
      return swift_release();
  }
  if (*(_DWORD *)(v15
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__timing))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v19)
      return swift_release();
  }
  if (*(_DWORD *)(v15
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__events))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v19)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v15
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    v24 = (uint64_t)v35;
    if (v19)
      return swift_release();
  }
  else
  {
    v24 = (uint64_t)v35;
  }
  outlined init with copy of PgQuery_Alias?(v15+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whenClause, v24, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v24, 1, v22) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v24, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v25 = v24;
    v26 = v33;
    outlined init with take of PgQuery_OidList(v25, v33, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v26, type metadata accessor for PgQuery_Node);
    if (v19)
      return swift_release();
  }
  if (*(_BYTE *)(v15
                + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v19)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v15
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transitionRels)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    v27 = (uint64_t)v32;
    if (v19)
      return swift_release();
  }
  else
  {
    v27 = (uint64_t)v32;
  }
  if (*(_BYTE *)(v15
                + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v19)
      return swift_release();
  }
  if (*(_BYTE *)(v15
                + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v19)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v15+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constrrel, v27, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v20(v27, 1, v21) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v27, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    v28 = v27;
    v29 = v30;
    outlined init with take of PgQuery_OidList(v28, v30, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v29, type metadata accessor for PgQuery_RangeVar);
    if (v19)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateTrigStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CreateTrigStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateTrigStmt()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateTrigStmt()
{
  return PgQuery_CreateTrigStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateTrigStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTrigStmt and conformance PgQuery_CreateTrigStmt, type metadata accessor for PgQuery_CreateTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTrigStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateTrigStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateTrigStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateTrigStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTrigStmt and conformance PgQuery_CreateTrigStmt, type metadata accessor for PgQuery_CreateTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTrigStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateTrigStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTrigStmt and conformance PgQuery_CreateTrigStmt, type metadata accessor for PgQuery_CreateTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTrigStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreatePLangStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 6:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
        case 4:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreatePLangStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)v0 != 1 || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = *(_QWORD *)(v0 + 8) & 0xFFFFFFFFFFFFLL;
    if (!v4 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v0 + 24) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (!*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          if (!*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16)
            || (type metadata accessor for PgQuery_Node(0),
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
          {
            if (*(_BYTE *)(v0 + 48) != 1
              || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
            {
              type metadata accessor for PgQuery_CreatePLangStmt(0);
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreatePLangStmt@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0xE000000000000000;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 32) = v1;
  *(_QWORD *)(a1 + 40) = v1;
  *(_BYTE *)(a1 + 48) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreatePLangStmt()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreatePLangStmt()
{
  return PgQuery_CreatePLangStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreatePLangStmt()
{
  return PgQuery_CreatePLangStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreatePLangStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePLangStmt and conformance PgQuery_CreatePLangStmt, type metadata accessor for PgQuery_CreatePLangStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePLangStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreatePLangStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreatePLangStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreatePLangStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePLangStmt and conformance PgQuery_CreatePLangStmt, type metadata accessor for PgQuery_CreatePLangStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePLangStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreatePLangStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePLangStmt and conformance PgQuery_CreatePLangStmt, type metadata accessor for PgQuery_CreatePLangStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePLangStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateRoleStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        lazy protocol witness table accessor for type PgQuery_RoleStmtType and conformance PgQuery_RoleStmtType();
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_CreateRoleStmt.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  if (!*v0
    || (lazy protocol witness table accessor for type PgQuery_RoleStmtType and conformance PgQuery_RoleStmtType(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    v3 = v0[3];
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = v0[2] & 0xFFFFFFFFFFFFLL;
    if (!v4 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0[4] + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for PgQuery_CreateRoleStmt(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateRoleStmt@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = MEMORY[0x1E0DEE9D8];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateRoleStmt()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateRoleStmt()
{
  return PgQuery_CreateRoleStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateRoleStmt()
{
  return PgQuery_CreateRoleStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateRoleStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRoleStmt and conformance PgQuery_CreateRoleStmt, type metadata accessor for PgQuery_CreateRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateRoleStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateRoleStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateRoleStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateRoleStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRoleStmt and conformance PgQuery_CreateRoleStmt, type metadata accessor for PgQuery_CreateRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateRoleStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateRoleStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRoleStmt and conformance PgQuery_CreateRoleStmt, type metadata accessor for PgQuery_CreateRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateRoleStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterRoleStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_AlterRoleStmt(0);
        type metadata accessor for PgQuery_RoleSpec(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v4 = v3;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_AlterRoleStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t RoleSpec;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  _QWORD v14[4];

  v5 = v3;
  v14[3] = a3;
  v14[1] = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v10 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = type metadata accessor for PgQuery_AlterRoleStmt(0);
  outlined init with copy of PgQuery_Alias?((uint64_t)v5 + *(int *)(v14[0] + 28), (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_RoleSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_RoleSpec);
    if (v4)
      return result;
  }
  if (!*(_QWORD *)(*(_QWORD *)v5 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
  {
    if (!v5[2])
      return UnknownStorage.traverse<A>(visitor:)();
    result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (!v4)
      return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterRoleStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t RoleSpec;

  *(_QWORD *)a2 = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(a2 + 8) = 0;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 28);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 56))(v4, 1, 1, RoleSpec);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterRoleStmt()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterRoleStmt()
{
  return PgQuery_AlterRoleStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterRoleStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterRoleStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleStmt and conformance PgQuery_AlterRoleStmt, type metadata accessor for PgQuery_AlterRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterRoleStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterRoleStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterRoleStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterRoleStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleStmt and conformance PgQuery_AlterRoleStmt, type metadata accessor for PgQuery_AlterRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterRoleStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterRoleStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleStmt and conformance PgQuery_AlterRoleStmt, type metadata accessor for PgQuery_AlterRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterRoleStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_DropRoleStmt.decodeMessage<A>(decoder:)()
{
  return PgQuery_DropRoleStmt.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_DropRoleStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_DropRoleStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_DropRoleStmt);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DropRoleStmt@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a1 + 8) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DropRoleStmt()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DropRoleStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropRoleStmt and conformance PgQuery_DropRoleStmt, type metadata accessor for PgQuery_DropRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropRoleStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DropRoleStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DropRoleStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DropRoleStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropRoleStmt and conformance PgQuery_DropRoleStmt, type metadata accessor for PgQuery_DropRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropRoleStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DropRoleStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropRoleStmt and conformance PgQuery_DropRoleStmt, type metadata accessor for PgQuery_DropRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropRoleStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_DropRoleStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_ConstraintsSetStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_DropRoleStmt) & 1;
}

uint64_t PgQuery_LockStmt.decodeMessage<A>(decoder:)()
{
  return PgQuery_LockStmt.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v4 = v3;
    dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_LockStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_LockStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_LockStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_LockStmt()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_LockStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockStmt and conformance PgQuery_LockStmt, type metadata accessor for PgQuery_LockStmt, (uint64_t)&protocol conformance descriptor for PgQuery_LockStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_LockStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_LockStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_LockStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockStmt and conformance PgQuery_LockStmt, type metadata accessor for PgQuery_LockStmt, (uint64_t)&protocol conformance descriptor for PgQuery_LockStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_LockStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockStmt and conformance PgQuery_LockStmt, type metadata accessor for PgQuery_LockStmt, (uint64_t)&protocol conformance descriptor for PgQuery_LockStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_LockStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_AlterStatsStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_LockStmt) & 1;
}

uint64_t PgQuery_ConstraintsSetStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_DropRoleStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_ConstraintsSetStmt);
}

uint64_t PgQuery_DropRoleStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v4 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
  {
    if (v4[8] != 1 || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v5))
    {
      a4(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ConstraintsSetStmt()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ConstraintsSetStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConstraintsSetStmt and conformance PgQuery_ConstraintsSetStmt, type metadata accessor for PgQuery_ConstraintsSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ConstraintsSetStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ConstraintsSetStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ConstraintsSetStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ConstraintsSetStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConstraintsSetStmt and conformance PgQuery_ConstraintsSetStmt, type metadata accessor for PgQuery_ConstraintsSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ConstraintsSetStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ConstraintsSetStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConstraintsSetStmt and conformance PgQuery_ConstraintsSetStmt, type metadata accessor for PgQuery_ConstraintsSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ConstraintsSetStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ConstraintsSetStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_ConstraintsSetStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_ConstraintsSetStmt) & 1;
}

uint64_t PgQuery_ReindexStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_ReindexObjectType and conformance PgQuery_ReindexObjectType();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_ReindexStmt(0);
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_5;
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ReindexStmt.traverse<A>(visitor:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RangeVar;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t ReindexStmt;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v6 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*v0
    || (v9 = *((_BYTE *)v0 + 8),
        v13 = *v0,
        v14 = v9,
        lazy protocol witness table accessor for type PgQuery_ReindexObjectType and conformance PgQuery_ReindexObjectType(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    ReindexStmt = type metadata accessor for PgQuery_ReindexStmt(0);
    outlined init with copy of PgQuery_Alias?((uint64_t)v0 + *(int *)(ReindexStmt + 36), (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, RangeVar) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    }
    else
    {
      outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v8, type metadata accessor for PgQuery_RangeVar);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      result = outlined destroy of PgQuery_Alias((uint64_t)v8, type metadata accessor for PgQuery_RangeVar);
      if (v1)
        return result;
    }
    v11 = v0[3];
    v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0)
      v12 = v0[2] & 0xFFFFFFFFFFFFLL;
    if (!v12 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*((_DWORD *)v0 + 8)
        || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
      {
        if (*((_BYTE *)v0 + 36) != 1)
          return UnknownStorage.traverse<A>(visitor:)();
        result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
        if (!v1)
          return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ReindexStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t RangeVar;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0xE000000000000000;
  *(_DWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 36) = 0;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 36);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v4, 1, 1, RangeVar);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ReindexStmt()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_ReindexStmt()
{
  return PgQuery_ReindexStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ReindexStmt()
{
  return PgQuery_ReindexStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ReindexStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReindexStmt and conformance PgQuery_ReindexStmt, type metadata accessor for PgQuery_ReindexStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReindexStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ReindexStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ReindexStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ReindexStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReindexStmt and conformance PgQuery_ReindexStmt, type metadata accessor for PgQuery_ReindexStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReindexStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ReindexStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReindexStmt and conformance PgQuery_ReindexStmt, type metadata accessor for PgQuery_ReindexStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReindexStmt);
  return Message.hash(into:)();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CheckPointStmt()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CheckPointStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CheckPointStmt and conformance PgQuery_CheckPointStmt, type metadata accessor for PgQuery_CheckPointStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CheckPointStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CheckPointStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CheckPointStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CheckPointStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CheckPointStmt and conformance PgQuery_CheckPointStmt, type metadata accessor for PgQuery_CheckPointStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CheckPointStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CheckPointStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CheckPointStmt and conformance PgQuery_CheckPointStmt, type metadata accessor for PgQuery_CheckPointStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CheckPointStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateSchemaStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_CreateSchemaStmt(0);
          type metadata accessor for PgQuery_RoleSpec(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateSchemaStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RoleSpec;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t SchemaStmt;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v6 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v0 + 8);
  v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v10 = *(_QWORD *)v0 & 0xFFFFFFFFFFFFLL;
  if (!v10 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    SchemaStmt = type metadata accessor for PgQuery_CreateSchemaStmt(0);
    outlined init with copy of PgQuery_Alias?(v0 + *(int *)(SchemaStmt + 32), (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, RoleSpec) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    }
    else
    {
      outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v8, type metadata accessor for PgQuery_RoleSpec);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      result = outlined destroy of PgQuery_Alias((uint64_t)v8, type metadata accessor for PgQuery_RoleSpec);
      if (v1)
        return result;
    }
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (*(_BYTE *)(v0 + 24) != 1)
        return UnknownStorage.traverse<A>(visitor:)();
      result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      if (!v1)
        return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateSchemaStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t RoleSpec;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0xE000000000000000;
  *(_QWORD *)(a2 + 16) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a2 + 24) = 0;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 32);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 56))(v4, 1, 1, RoleSpec);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateSchemaStmt()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateSchemaStmt()
{
  return PgQuery_CreateSchemaStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateSchemaStmt()
{
  return PgQuery_CreateSchemaStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateSchemaStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSchemaStmt and conformance PgQuery_CreateSchemaStmt, type metadata accessor for PgQuery_CreateSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSchemaStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateSchemaStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateSchemaStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateSchemaStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSchemaStmt and conformance PgQuery_CreateSchemaStmt, type metadata accessor for PgQuery_CreateSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSchemaStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateSchemaStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSchemaStmt and conformance PgQuery_CreateSchemaStmt, type metadata accessor for PgQuery_CreateSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSchemaStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterDatabaseStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Alias.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_AlterDatabaseStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterDatabaseStmt()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterDatabaseStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseStmt and conformance PgQuery_AlterDatabaseStmt, type metadata accessor for PgQuery_AlterDatabaseStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDatabaseStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterDatabaseStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterDatabaseStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterDatabaseStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseStmt and conformance PgQuery_AlterDatabaseStmt, type metadata accessor for PgQuery_AlterDatabaseStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDatabaseStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterDatabaseStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseStmt and conformance PgQuery_AlterDatabaseStmt, type metadata accessor for PgQuery_AlterDatabaseStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDatabaseStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlterDatabaseStmt(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AlterDatabaseStmt) & 1;
}

uint64_t PgQuery_AlterDatabaseSetStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
        type metadata accessor for PgQuery_VariableSetStmt(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, type metadata accessor for PgQuery_VariableSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableSetStmt);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterDatabaseSetStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t VariableSetStmt;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t AlterDatabaseSetStmt;
  _QWORD v18[4];

  v4 = v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v11 = *(_QWORD *)(VariableSetStmt - 8);
  MEMORY[0x1E0C80A78](VariableSetStmt);
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v4[1];
  v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v15 = *v4 & 0xFFFFFFFFFFFFLL;
  v18[3] = a2;
  v18[1] = a1;
  if (!v15 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v3))
  {
    AlterDatabaseSetStmt = type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
    outlined init with copy of PgQuery_Alias?((uint64_t)v4 + *(int *)(AlterDatabaseSetStmt + 24), (uint64_t)v9, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, VariableSetStmt) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v9, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    }
    else
    {
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v13, type metadata accessor for PgQuery_VariableSetStmt);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, type metadata accessor for PgQuery_VariableSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableSetStmt);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      result = outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_VariableSetStmt);
      if (v3)
        return result;
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterDatabaseSetStmt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t VariableSetStmt;

  *a2 = 0;
  a2[1] = 0xE000000000000000;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(VariableSetStmt - 8) + 56))(v4, 1, 1, VariableSetStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterDatabaseSetStmt()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterDatabaseSetStmt()
{
  return PgQuery_AlterDatabaseSetStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterDatabaseSetStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_AlterDatabaseSetStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterDatabaseSetStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseSetStmt and conformance PgQuery_AlterDatabaseSetStmt, type metadata accessor for PgQuery_AlterDatabaseSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDatabaseSetStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterDatabaseSetStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterDatabaseSetStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterDatabaseSetStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseSetStmt and conformance PgQuery_AlterDatabaseSetStmt, type metadata accessor for PgQuery_AlterDatabaseSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDatabaseSetStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterDatabaseSetStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseSetStmt and conformance PgQuery_AlterDatabaseSetStmt, type metadata accessor for PgQuery_AlterDatabaseSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDatabaseSetStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterRoleSetStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  unint64_t *v3;
  uint64_t (*v4)(uint64_t);
  void *v5;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for PgQuery_AlterRoleSetStmt(0);
        type metadata accessor for PgQuery_RoleSpec(0);
        v3 = &lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec;
        v4 = type metadata accessor for PgQuery_RoleSpec;
        v5 = &protocol conformance descriptor for PgQuery_RoleSpec;
        goto LABEL_5;
      }
LABEL_12:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_AlterRoleSetStmt(0);
    type metadata accessor for PgQuery_VariableSetStmt(0);
    v3 = &lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt;
    v4 = type metadata accessor for PgQuery_VariableSetStmt;
    v5 = &protocol conformance descriptor for PgQuery_VariableSetStmt;
LABEL_5:
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(v3, v4, (uint64_t)v5);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_12;
  }
  return result;
}

uint64_t PgQuery_AlterRoleSetStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t VariableSetStmt;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t RoleSpec;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AlterRoleSetStmt;
  uint64_t v28;
  uint64_t v29;
  char *v30;

  v5 = v3;
  v28 = a1;
  v29 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  MEMORY[0x1E0C80A78](v6);
  v30 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v25 = *(_QWORD *)(VariableSetStmt - 8);
  v26 = VariableSetStmt;
  MEMORY[0x1E0C80A78](VariableSetStmt);
  v24 = (uint64_t)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v14 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterRoleSetStmt = type metadata accessor for PgQuery_AlterRoleSetStmt(0);
  v17 = v5;
  outlined init with copy of PgQuery_Alias?((uint64_t)v5 + *(int *)(AlterRoleSetStmt + 24), (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    v18 = (uint64_t)v30;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v16, type metadata accessor for PgQuery_RoleSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_RoleSpec);
    v18 = (uint64_t)v30;
    if (v4)
      return result;
  }
  v20 = v17[1];
  v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0)
    v21 = *v17 & 0xFFFFFFFFFFFFLL;
  if (!v21 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v17 + *(int *)(AlterRoleSetStmt + 28), v18, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v18, 1, v26) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v18, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    }
    else
    {
      v22 = v18;
      v23 = v24;
      outlined init with take of PgQuery_OidList(v22, v24, type metadata accessor for PgQuery_VariableSetStmt);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, type metadata accessor for PgQuery_VariableSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableSetStmt);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      result = outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_VariableSetStmt);
      if (v4)
        return result;
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterRoleSetStmt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t RoleSpec;
  char *v6;
  uint64_t VariableSetStmt;

  *a2 = 0;
  a2[1] = 0xE000000000000000;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 56))(v4, 1, 1, RoleSpec);
  v6 = (char *)a2 + *(int *)(a1 + 28);
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(VariableSetStmt - 8) + 56))(v6, 1, 1, VariableSetStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterRoleSetStmt()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterRoleSetStmt()
{
  return PgQuery_AlterRoleSetStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterRoleSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterRoleSetStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterRoleSetStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleSetStmt and conformance PgQuery_AlterRoleSetStmt, type metadata accessor for PgQuery_AlterRoleSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterRoleSetStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterRoleSetStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterRoleSetStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterRoleSetStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleSetStmt and conformance PgQuery_AlterRoleSetStmt, type metadata accessor for PgQuery_AlterRoleSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterRoleSetStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterRoleSetStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleSetStmt and conformance PgQuery_AlterRoleSetStmt, type metadata accessor for PgQuery_AlterRoleSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterRoleSetStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateConversionStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateConversionStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = *(_QWORD *)(v0 + 8) & 0xFFFFFFFFFFFFLL;
    if (!v4 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      v5 = *(_QWORD *)(v0 + 32);
      v6 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0)
        v6 = *(_QWORD *)(v0 + 24) & 0xFFFFFFFFFFFFLL;
      if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (!*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          if (*(_BYTE *)(v0 + 48) != 1
            || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for PgQuery_CreateConversionStmt(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateConversionStmt@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0xE000000000000000;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0xE000000000000000;
  *(_QWORD *)(a1 + 40) = v1;
  *(_BYTE *)(a1 + 48) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateConversionStmt()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateConversionStmt()
{
  return PgQuery_CreateConversionStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateConversionStmt()
{
  return PgQuery_CreateConversionStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateConversionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateConversionStmt and conformance PgQuery_CreateConversionStmt, type metadata accessor for PgQuery_CreateConversionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateConversionStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateConversionStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateConversionStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateConversionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateConversionStmt and conformance PgQuery_CreateConversionStmt, type metadata accessor for PgQuery_CreateConversionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateConversionStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateConversionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateConversionStmt and conformance PgQuery_CreateConversionStmt, type metadata accessor for PgQuery_CreateConversionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateConversionStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateCastStmt._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sourcetype, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targettype, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__func, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_CreateCastStmt._StorageClass()
{
  return type metadata accessor for PgQuery_CreateCastStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CreateCastStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateCastStmt._StorageClass);
}

void type metadata completion function for PgQuery_CreateCastStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_ObjectWithArgs?, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for PgQuery_ObjectWithArgs(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ObjectWithArgs);
}

uint64_t PgQuery_CreateCastStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_CreateCastStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_CreateCastStmt._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_CreateCastStmt._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
          goto LABEL_7;
        case 3:
          type metadata accessor for PgQuery_ObjectWithArgs(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, type metadata accessor for PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
LABEL_7:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 4:
          lazy protocol witness table accessor for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_8;
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_8:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_CreateCastStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t TypeName;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ObjectWithArgs;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v37 = a3;
  v40 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  MEMORY[0x1E0C80A78](v4);
  v34 = (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v33 = *(_QWORD *)(ObjectWithArgs - 8);
  MEMORY[0x1E0C80A78](ObjectWithArgs);
  v32 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v30 - v11;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v14 = *(_QWORD *)(TypeName - 8);
  v15 = MEMORY[0x1E0C80A78](TypeName);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v30 - v18;
  v20 = *(int *)(type metadata accessor for PgQuery_CreateCastStmt(0) + 20);
  v31 = v3;
  v21 = *(_QWORD *)(v3 + v20);
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sourcetype, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v22(v12, 1, TypeName) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_TypeName?);
    v23 = v36;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v19, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
    swift_retain();
    v24 = v36;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v23 = v24;
    outlined destroy of PgQuery_Alias((uint64_t)v19, type metadata accessor for PgQuery_TypeName);
    if (v24)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targettype, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if (v22(v10, 1, TypeName) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_TypeName?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v17, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_TypeName);
    if (v23)
      return swift_release();
  }
  v25 = v34;
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__func, v34, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v25, 1, ObjectWithArgs) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v25, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  }
  else
  {
    v26 = v25;
    v27 = v32;
    outlined init with take of PgQuery_OidList(v26, v32, type metadata accessor for PgQuery_ObjectWithArgs);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, type metadata accessor for PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_ObjectWithArgs);
    if (v23)
      return swift_release();
  }
  if (!*(_QWORD *)(v21
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__context)
    || (v28 = *(_BYTE *)(v21
                       + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__context
                       + 8),
        v38 = *(_QWORD *)(v21
                        + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__context),
        v39 = v28,
        lazy protocol witness table accessor for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext(),
        dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v23))
  {
    if (*(_BYTE *)(v21
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inout) != 1
      || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v23))
    {
      swift_release();
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateCastStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CreateCastStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateCastStmt()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateCastStmt()
{
  return PgQuery_CreateCastStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateCastStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateCastStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateCastStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateCastStmt and conformance PgQuery_CreateCastStmt, type metadata accessor for PgQuery_CreateCastStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateCastStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateCastStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateCastStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateCastStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateCastStmt and conformance PgQuery_CreateCastStmt, type metadata accessor for PgQuery_CreateCastStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateCastStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateCastStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateCastStmt and conformance PgQuery_CreateCastStmt, type metadata accessor for PgQuery_CreateCastStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateCastStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateOpClassStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for PgQuery_CreateOpClassStmt(0);
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 6:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateOpClassStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t OpClassStmt;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TypeName;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v5 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v13 = (uint64_t)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      v8 = *(_QWORD *)(v0 + 24);
      v9 = HIBYTE(v8) & 0xF;
      if ((v8 & 0x2000000000000000) == 0)
        v9 = *(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
      if (!v9 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        OpClassStmt = type metadata accessor for PgQuery_CreateOpClassStmt(0);
        outlined init with copy of PgQuery_Alias?(v0 + *(int *)(OpClassStmt + 40), (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_TypeName?);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, TypeName) == 1)
        {
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_TypeName?);
        }
        else
        {
          v12 = OpClassStmt;
          v11 = v13;
          outlined init with take of PgQuery_OidList((uint64_t)v4, v13, type metadata accessor for PgQuery_TypeName);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
          dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
          result = outlined destroy of PgQuery_Alias(v11, type metadata accessor for PgQuery_TypeName);
          if (v1)
            return result;
        }
        if (!*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          if (*(_BYTE *)(v0 + 40) != 1)
            return UnknownStorage.traverse<A>(visitor:)();
          result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
          if (!v1)
            return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateOpClassStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t TypeName;

  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)a2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0xE000000000000000;
  *(_QWORD *)(a2 + 32) = v4;
  *(_BYTE *)(a2 + 40) = 0;
  UnknownStorage.init()();
  v5 = a2 + *(int *)(a1 + 40);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 56))(v5, 1, 1, TypeName);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateOpClassStmt()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateOpClassStmt()
{
  return PgQuery_CreateOpClassStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateOpClassStmt()
{
  return PgQuery_CreateOpClassStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateOpClassStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassStmt and conformance PgQuery_CreateOpClassStmt, type metadata accessor for PgQuery_CreateOpClassStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpClassStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateOpClassStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateOpClassStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateOpClassStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassStmt and conformance PgQuery_CreateOpClassStmt, type metadata accessor for PgQuery_CreateOpClassStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpClassStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateOpClassStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassStmt and conformance PgQuery_CreateOpClassStmt, type metadata accessor for PgQuery_CreateOpClassStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpClassStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateOpFamilyStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateOpFamilyStmt.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  if (!*(_QWORD *)(*v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    v3 = v0[2];
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = v0[1] & 0xFFFFFFFFFFFFLL;
    if (!v4 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for PgQuery_CreateOpFamilyStmt(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateOpFamilyStmt@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Alias(MEMORY[0x1E0DEE9D8], 0, 0xE000000000000000, a1);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateOpFamilyStmt()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateOpFamilyStmt()
{
  return PgQuery_CreateOpFamilyStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateOpFamilyStmt()
{
  return PgQuery_CreateOpFamilyStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateOpFamilyStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpFamilyStmt and conformance PgQuery_CreateOpFamilyStmt, type metadata accessor for PgQuery_CreateOpFamilyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpFamilyStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateOpFamilyStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateOpFamilyStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateOpFamilyStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpFamilyStmt and conformance PgQuery_CreateOpFamilyStmt, type metadata accessor for PgQuery_CreateOpFamilyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpFamilyStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateOpFamilyStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpFamilyStmt and conformance PgQuery_CreateOpFamilyStmt, type metadata accessor for PgQuery_CreateOpFamilyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpFamilyStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterOpFamilyStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterOpFamilyStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = *(_QWORD *)(v0 + 8) & 0xFFFFFFFFFFFFLL;
    if (!v4 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (*(_BYTE *)(v0 + 24) != 1
        || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
      {
        if (!*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for PgQuery_AlterOpFamilyStmt(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterOpFamilyStmt@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0xE000000000000000;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterOpFamilyStmt()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterOpFamilyStmt()
{
  return PgQuery_AlterOpFamilyStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterOpFamilyStmt()
{
  return PgQuery_AlterOpFamilyStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterOpFamilyStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOpFamilyStmt and conformance PgQuery_AlterOpFamilyStmt, type metadata accessor for PgQuery_AlterOpFamilyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOpFamilyStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterOpFamilyStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterOpFamilyStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterOpFamilyStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOpFamilyStmt and conformance PgQuery_AlterOpFamilyStmt, type metadata accessor for PgQuery_AlterOpFamilyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOpFamilyStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterOpFamilyStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOpFamilyStmt and conformance PgQuery_AlterOpFamilyStmt, type metadata accessor for PgQuery_AlterOpFamilyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOpFamilyStmt);
  return Message.hash(into:)();
}

_QWORD *PgQuery_PrepareStmt._StorageClass.init(copying:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t Node;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = 0;
  v1[3] = 0xE000000000000000;
  v1[4] = MEMORY[0x1E0DEE9D8];
  v6 = (uint64_t)v1
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_PrepareStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v6, 1, 1, Node);
  v8 = a1[3];
  v1[2] = a1[2];
  v1[3] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v1[4] = a1[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined init with copy of PgQuery_Alias?((uint64_t)a1+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_PrepareStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_release();
  outlined assign with take of PgQuery_Node?((uint64_t)v5, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  return v1;
}

uint64_t PgQuery_PrepareStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_PrepareStmt._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_PrepareStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query);
}

uint64_t ObjC metadata update function for PgQuery_PrepareStmt._StorageClass()
{
  return type metadata accessor for PgQuery_PrepareStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_PrepareStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_PrepareStmt._StorageClass);
}

void type metadata completion function for PgQuery_PrepareStmt._StorageClass()
{
  type metadata completion function for PgQuery_PrepareStmt._StorageClass();
}

{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_PrepareStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v8;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for PgQuery_PrepareStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_PrepareStmt._StorageClass(0);
    swift_allocObject();
    v4 = (_QWORD *)swift_retain();
    *(_QWORD *)(v0 + v3) = PgQuery_PrepareStmt._StorageClass.init(copying:)(v4);
    swift_release();
  }
  swift_retain();
  v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while (1)
    {
      if ((v6 & 1) != 0)
        return swift_release();
      if (v5 == 1)
        break;
      if (v5 == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        v8 = v2;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_7;
      }
      if (v5 == 3)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        v8 = v2;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_7;
      }
LABEL_8:
      v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v8 = v2;
    dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_7:
    v2 = v8;
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t PgQuery_PrepareStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v2);
  v17 = (uint64_t)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v16 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v14 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(int *)(type metadata accessor for PgQuery_PrepareStmt(0) + 20);
  v15 = v0;
  v7 = *(_QWORD **)(v0 + v6);
  v8 = v7[3];
  if ((v8 & 0x2000000000000000) != 0)
    v9 = HIBYTE(v8) & 0xF;
  else
    v9 = v7[2] & 0xFFFFFFFFFFFFLL;
  swift_retain();
  if (v9)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  if (*(_QWORD *)(v7[4] + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  v10 = v17;
  outlined init with copy of PgQuery_Alias?((uint64_t)v7+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_PrepareStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, v17, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v10, 1, Node) != 1)
  {
    v11 = v14;
    outlined init with take of PgQuery_OidList(v10, v14, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v11, type metadata accessor for PgQuery_Node);
    if (!v1)
      goto LABEL_12;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)(v10, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_12:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_PrepareStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_PrepareStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_PrepareStmt()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_PrepareStmt()
{
  return PgQuery_PrepareStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_PrepareStmt()
{
  return PgQuery_PrepareStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_PrepareStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PrepareStmt and conformance PgQuery_PrepareStmt, type metadata accessor for PgQuery_PrepareStmt, (uint64_t)&protocol conformance descriptor for PgQuery_PrepareStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_PrepareStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_PrepareStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_PrepareStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PrepareStmt and conformance PgQuery_PrepareStmt, type metadata accessor for PgQuery_PrepareStmt, (uint64_t)&protocol conformance descriptor for PgQuery_PrepareStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_PrepareStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PrepareStmt and conformance PgQuery_PrepareStmt, type metadata accessor for PgQuery_PrepareStmt, (uint64_t)&protocol conformance descriptor for PgQuery_PrepareStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_ExecuteStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Alias.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_ExecuteStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ExecuteStmt()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ExecuteStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExecuteStmt and conformance PgQuery_ExecuteStmt, type metadata accessor for PgQuery_ExecuteStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ExecuteStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ExecuteStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ExecuteStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ExecuteStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExecuteStmt and conformance PgQuery_ExecuteStmt, type metadata accessor for PgQuery_ExecuteStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ExecuteStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ExecuteStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExecuteStmt and conformance PgQuery_ExecuteStmt, type metadata accessor for PgQuery_ExecuteStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ExecuteStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ExecuteStmt(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_ExecuteStmt) & 1;
}

uint64_t PgQuery_DeallocateStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Float.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_DeallocateStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DeallocateStmt()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DeallocateStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeallocateStmt and conformance PgQuery_DeallocateStmt, type metadata accessor for PgQuery_DeallocateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeallocateStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DeallocateStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DeallocateStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DeallocateStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeallocateStmt and conformance PgQuery_DeallocateStmt, type metadata accessor for PgQuery_DeallocateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeallocateStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DeallocateStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeallocateStmt and conformance PgQuery_DeallocateStmt, type metadata accessor for PgQuery_DeallocateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeallocateStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_DeallocateStmt(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_VariableShowStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_DeallocateStmt) & 1;
}

uint64_t PgQuery_DeclareCursorStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t Node;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0xE000000000000000;
  *(_DWORD *)(v1 + 32) = 0;
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_DeclareCursorStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v6, 1, 1, Node);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v1 + 24) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + 32) = *(_DWORD *)(a1 + 32);
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_DeclareCursorStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_release();
  outlined assign with take of PgQuery_Node?((uint64_t)v5, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  return v1;
}

uint64_t PgQuery_DeclareCursorStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_DeclareCursorStmt._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_DeclareCursorStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query);
}

uint64_t ObjC metadata update function for PgQuery_DeclareCursorStmt._StorageClass()
{
  return type metadata accessor for PgQuery_DeclareCursorStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_DeclareCursorStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DeclareCursorStmt._StorageClass);
}

void type metadata completion function for PgQuery_DeclareCursorStmt._StorageClass()
{
  type metadata completion function for PgQuery_PrepareStmt._StorageClass();
}

uint64_t PgQuery_DeclareCursorStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for PgQuery_DeclareCursorStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_DeclareCursorStmt._StorageClass(0);
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v0 + v3) = PgQuery_DeclareCursorStmt._StorageClass.init(copying:)(v4);
    swift_release();
  }
  swift_retain();
  v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while (1)
    {
      if ((v6 & 1) != 0)
        return swift_release();
      if (v5 == 1)
        break;
      if (v5 == 2)
      {
        v8 = v2;
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
        goto LABEL_7;
      }
      if (v5 == 3)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        v8 = v2;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_7;
      }
LABEL_8:
      v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v8 = v2;
    dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_7:
    v2 = v8;
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t PgQuery_DeclareCursorStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_DeclareCursorStmt, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_DeclareCursorStmt.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_DeclareCursorStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19[4];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v16 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL;
  v19[3] = a4;
  v19[0] = (uint64_t)v14;
  v19[1] = a3;
  if (!v16
    || (swift_bridgeObjectRetain(),
        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
        result = swift_bridgeObjectRelease(),
        !v4))
  {
    if (!*(_DWORD *)(a1 + 32)
      || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
    {
      outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_DeclareCursorStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, Node) == 1)
      {
        return outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
      }
      else
      {
        v18 = v19[0];
        outlined init with take of PgQuery_OidList((uint64_t)v10, v19[0], type metadata accessor for PgQuery_Node);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
        return outlined destroy of PgQuery_Alias(v18, type metadata accessor for PgQuery_Node);
      }
    }
  }
  return result;
}

BOOL closure #1 in static PgQuery_DeclareCursorStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  _BOOL8 result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  char v20;
  uint64_t v21;

  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
    || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v14 & 1) != 0))
  {
    if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32))
    {
      v16 = a1
          + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_DeclareCursorStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
      v17 = a2
          + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_DeclareCursorStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
      v18 = (uint64_t)&v13[*(int *)(v11 + 48)];
      outlined init with copy of PgQuery_Alias?(v16, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined init with copy of PgQuery_Alias?(v17, v18, &demangling cache variable for type metadata for PgQuery_Node?);
      v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (v19((uint64_t)v13, 1, Node) == 1)
      {
        if (v19(v18, 1, Node) == 1)
        {
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
          return 1;
        }
      }
      else
      {
        outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v19(v18, 1, Node) != 1)
        {
          outlined init with take of PgQuery_OidList(v18, (uint64_t)v7, type metadata accessor for PgQuery_Node);
          v20 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v10, (uint64_t)v7, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
          outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
          outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
          return (v20 & 1) != 0;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
      }
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    }
    return 0;
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DeclareCursorStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_DeclareCursorStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DeclareCursorStmt()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DeclareCursorStmt()
{
  return PgQuery_DeclareCursorStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DeclareCursorStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeclareCursorStmt and conformance PgQuery_DeclareCursorStmt, type metadata accessor for PgQuery_DeclareCursorStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeclareCursorStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DeclareCursorStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DeclareCursorStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DeclareCursorStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeclareCursorStmt and conformance PgQuery_DeclareCursorStmt, type metadata accessor for PgQuery_DeclareCursorStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeclareCursorStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DeclareCursorStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeclareCursorStmt and conformance PgQuery_DeclareCursorStmt, type metadata accessor for PgQuery_DeclareCursorStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeclareCursorStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_DeclareCursorStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_DeclareCursorStmt, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_DeclareCursorStmt.== infix(_:_:)) & 1;
}

uint64_t PgQuery_CreateTableSpaceStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
          type metadata accessor for PgQuery_RoleSpec(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateTableSpaceStmt.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t RoleSpec;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TableSpaceStmt;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v6 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v0[1];
  v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v10 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v10 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    TableSpaceStmt = type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
    outlined init with copy of PgQuery_Alias?((uint64_t)v0 + *(int *)(TableSpaceStmt + 32), (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, RoleSpec) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    }
    else
    {
      outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v8, type metadata accessor for PgQuery_RoleSpec);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      result = outlined destroy of PgQuery_Alias((uint64_t)v8, type metadata accessor for PgQuery_RoleSpec);
      if (v1)
        return result;
    }
    v12 = v0[3];
    v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0)
      v13 = v0[2] & 0xFFFFFFFFFFFFLL;
    if (!v13 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0[4] + 16))
        return UnknownStorage.traverse<A>(visitor:)();
      type metadata accessor for PgQuery_Node(0);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
      result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      if (!v1)
        return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateTableSpaceStmt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t RoleSpec;

  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  a2[4] = MEMORY[0x1E0DEE9D8];
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 32);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 56))(v4, 1, 1, RoleSpec);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateTableSpaceStmt()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateTableSpaceStmt()
{
  return PgQuery_CreateTableSpaceStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateTableSpaceStmt()
{
  return PgQuery_CreateTableSpaceStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateTableSpaceStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableSpaceStmt and conformance PgQuery_CreateTableSpaceStmt, type metadata accessor for PgQuery_CreateTableSpaceStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTableSpaceStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateTableSpaceStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateTableSpaceStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateTableSpaceStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableSpaceStmt and conformance PgQuery_CreateTableSpaceStmt, type metadata accessor for PgQuery_CreateTableSpaceStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTableSpaceStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateTableSpaceStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableSpaceStmt and conformance PgQuery_CreateTableSpaceStmt, type metadata accessor for PgQuery_CreateTableSpaceStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTableSpaceStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_DropTableSpaceStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_DropTableSpaceStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(v0 + 8);
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *(_QWORD *)v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (*(_BYTE *)(v0 + 16) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for PgQuery_DropTableSpaceStmt(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DropTableSpaceStmt@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DropTableSpaceStmt()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DropTableSpaceStmt()
{
  return PgQuery_DropTableSpaceStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DropTableSpaceStmt()
{
  return PgQuery_DropTableSpaceStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DropTableSpaceStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropTableSpaceStmt and conformance PgQuery_DropTableSpaceStmt, type metadata accessor for PgQuery_DropTableSpaceStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropTableSpaceStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DropTableSpaceStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DropTableSpaceStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DropTableSpaceStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropTableSpaceStmt and conformance PgQuery_DropTableSpaceStmt, type metadata accessor for PgQuery_DropTableSpaceStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropTableSpaceStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DropTableSpaceStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropTableSpaceStmt and conformance PgQuery_DropTableSpaceStmt, type metadata accessor for PgQuery_DropTableSpaceStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropTableSpaceStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterObjectDependsStmt._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extname, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_AlterObjectDependsStmt._StorageClass()
{
  return type metadata accessor for PgQuery_AlterObjectDependsStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_AlterObjectDependsStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterObjectDependsStmt._StorageClass);
}

void type metadata completion function for PgQuery_AlterObjectDependsStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_AlterObjectDependsStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_AlterObjectDependsStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_AlterObjectDependsStmt._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_AlterObjectDependsStmt._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_8;
        case 2:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          goto LABEL_7;
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
LABEL_7:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_8:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_AlterObjectDependsStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t RangeVar;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Node;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;

  v41 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v34 = (uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v36 = (uint64_t)&v31 - v6;
  Node = type metadata accessor for PgQuery_Node(0);
  v35 = *(_QWORD *)(Node - 8);
  v7 = MEMORY[0x1E0C80A78](Node);
  v31 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v33 = (uint64_t)&v31 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v14 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(int *)(type metadata accessor for PgQuery_AlterObjectDependsStmt(0) + 20);
  v32 = v2;
  v18 = *(_QWORD *)(v2 + v17);
  v19 = *(_QWORD *)(v18 + 16);
  v20 = *(_BYTE *)(v18 + 24);
  if (destructiveProjectEnumData for StorableValue(v19, v20))
  {
    v39 = v19;
    v40 = v20;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    swift_retain();
    v21 = v38;
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    v22 = v21;
    if (v21)
      return swift_release();
  }
  else
  {
    swift_retain();
    v22 = v38;
  }
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v16, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_RangeVar);
    if (v22)
      return swift_release();
  }
  v23 = v36;
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v36, &demangling cache variable for type metadata for PgQuery_Node?);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  if (v24(v23, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v23, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v25 = v23;
    v26 = v33;
    outlined init with take of PgQuery_OidList(v25, v33, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v26, type metadata accessor for PgQuery_Node);
    if (v22)
      return swift_release();
  }
  v27 = v34;
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extname, v34, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v24(v27, 1, Node) != 1)
  {
    v28 = v27;
    v29 = v31;
    outlined init with take of PgQuery_OidList(v28, v31, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v29, type metadata accessor for PgQuery_Node);
    if (!v22)
      goto LABEL_14;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)(v27, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_14:
  if (*(_BYTE *)(v18
                + OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__remove) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v22)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterObjectDependsStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_AlterObjectDependsStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterObjectDependsStmt()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterObjectDependsStmt()
{
  return PgQuery_AlterObjectDependsStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterObjectDependsStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_AlterObjectDependsStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterObjectDependsStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectDependsStmt and conformance PgQuery_AlterObjectDependsStmt, type metadata accessor for PgQuery_AlterObjectDependsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterObjectDependsStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterObjectDependsStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterObjectDependsStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterObjectDependsStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectDependsStmt and conformance PgQuery_AlterObjectDependsStmt, type metadata accessor for PgQuery_AlterObjectDependsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterObjectDependsStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterObjectDependsStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectDependsStmt and conformance PgQuery_AlterObjectDependsStmt, type metadata accessor for PgQuery_AlterObjectDependsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterObjectDependsStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterObjectSchemaStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_NamedArgExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?, &OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object);
}

uint64_t ObjC metadata update function for PgQuery_AlterObjectSchemaStmt._StorageClass()
{
  return type metadata accessor for PgQuery_AlterObjectSchemaStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_AlterObjectSchemaStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterObjectSchemaStmt._StorageClass);
}

void type metadata completion function for PgQuery_AlterObjectSchemaStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_AlterObjectSchemaStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_AlterObjectSchemaStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_AlterObjectSchemaStmt._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_AlterObjectSchemaStmt._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_8;
        case 2:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          goto LABEL_7;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
LABEL_7:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 4:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_8;
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_8:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_AlterObjectSchemaStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t RangeVar;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t Node;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;

  v33 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v3);
  v28 = (uint64_t)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v27 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v26 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v10 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(int *)(type metadata accessor for PgQuery_AlterObjectSchemaStmt(0) + 20);
  v25 = v2;
  v14 = *(_QWORD *)(v2 + v13);
  v15 = *(_QWORD *)(v14 + 16);
  v16 = *(_BYTE *)(v14 + 24);
  if (destructiveProjectEnumData for StorableValue(v15, v16))
  {
    v31 = v15;
    v32 = v16;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    swift_retain();
    v17 = v30;
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    v18 = v17;
    if (v17)
      return swift_release();
  }
  else
  {
    swift_retain();
    v18 = v30;
  }
  outlined init with copy of PgQuery_Alias?(v14+ OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_RangeVar);
    if (v18)
      return swift_release();
  }
  v19 = v28;
  outlined init with copy of PgQuery_Alias?(v14+ OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v28, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v19, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v19, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_11;
  }
  v20 = v19;
  v21 = v26;
  outlined init with take of PgQuery_OidList(v20, v26, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_Node);
  if (v18)
    return swift_release();
LABEL_11:
  v22 = *(_QWORD *)(v14
                  + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newschema
                  + 8);
  v23 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0)
    v23 = *(_QWORD *)(v14
                    + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newschema) & 0xFFFFFFFFFFFFLL;
  if (v23)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v18)
      return swift_release();
  }
  if (*(_BYTE *)(v14
                + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v18)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterObjectSchemaStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_AlterObjectSchemaStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterObjectSchemaStmt()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterObjectSchemaStmt()
{
  return PgQuery_AlterObjectSchemaStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterObjectSchemaStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_AlterObjectSchemaStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterObjectSchemaStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectSchemaStmt and conformance PgQuery_AlterObjectSchemaStmt, type metadata accessor for PgQuery_AlterObjectSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterObjectSchemaStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterObjectSchemaStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterObjectSchemaStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterObjectSchemaStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectSchemaStmt and conformance PgQuery_AlterObjectSchemaStmt, type metadata accessor for PgQuery_AlterObjectSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterObjectSchemaStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterObjectSchemaStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectSchemaStmt and conformance PgQuery_AlterObjectSchemaStmt, type metadata accessor for PgQuery_AlterObjectSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterObjectSchemaStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterOwnerStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t RangeVar;
  uint64_t v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t RoleSpec;
  char v12;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v6, 1, 1, RangeVar);
  v8 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v8, 1, 1, Node);
  v10 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 56))(v10, 1, 1, RoleSpec);
  v12 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v1 + 24) = v12;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v8, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  swift_release();
  outlined assign with take of PgQuery_Node?((uint64_t)v5, v10, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  return v1;
}

uint64_t PgQuery_AlterOwnerStmt._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_AlterOwnerStmt._StorageClass()
{
  return type metadata accessor for PgQuery_AlterOwnerStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_AlterOwnerStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterOwnerStmt._StorageClass);
}

void type metadata completion function for PgQuery_AlterOwnerStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RoleSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_AlterOwnerStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(int *)(type metadata accessor for PgQuery_AlterOwnerStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_AlterOwnerStmt._StorageClass(0);
    swift_allocObject();
    v3 = swift_retain();
    *(_QWORD *)(v0 + v2) = PgQuery_AlterOwnerStmt._StorageClass.init(copying:)(v3);
    swift_release();
  }
  swift_retain();
  v4 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v5 & 1) == 0)
    {
      switch(v4)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 2:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          goto LABEL_7;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          goto LABEL_7;
        case 4:
          type metadata accessor for PgQuery_RoleSpec(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
LABEL_7:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      v4 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_AlterOwnerStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t RangeVar;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t RoleSpec;
  uint64_t v35;
  uint64_t v36;
  uint64_t Node;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;

  v41 = a3;
  v38 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1E0C80A78](v5);
  v33 = (uint64_t)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v32 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v29 = (uint64_t)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v8);
  v36 = (uint64_t)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v35 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v30 = (uint64_t)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v15 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(int *)(type metadata accessor for PgQuery_AlterOwnerStmt(0) + 20);
  v31 = v3;
  v19 = *(_QWORD *)(v3 + v18);
  v20 = *(_QWORD *)(v19 + 16);
  v21 = *(_BYTE *)(v19 + 24);
  if (destructiveProjectEnumData for StorableValue(v20, v21))
  {
    v39 = v20;
    v40 = v21;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  else
  {
    swift_retain();
  }
  outlined init with copy of PgQuery_Alias?(v19+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v13, (uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
    if (v4)
      return swift_release();
  }
  v22 = v36;
  outlined init with copy of PgQuery_Alias?(v19+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v36, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v22, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v22, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v23 = v22;
    v24 = v30;
    outlined init with take of PgQuery_OidList(v23, v30, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v24, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  v25 = v33;
  outlined init with copy of PgQuery_Alias?(v19+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner, v33, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v25, 1, RoleSpec) != 1)
  {
    v26 = v25;
    v27 = v29;
    outlined init with take of PgQuery_OidList(v26, v29, type metadata accessor for PgQuery_RoleSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_RoleSpec);
    if (!v4)
      goto LABEL_15;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)(v25, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
LABEL_15:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterOwnerStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_AlterOwnerStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterOwnerStmt()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterOwnerStmt()
{
  return PgQuery_AlterOwnerStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterOwnerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterOwnerStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterOwnerStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOwnerStmt and conformance PgQuery_AlterOwnerStmt, type metadata accessor for PgQuery_AlterOwnerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOwnerStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterOwnerStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterOwnerStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterOwnerStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOwnerStmt and conformance PgQuery_AlterOwnerStmt, type metadata accessor for PgQuery_AlterOwnerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOwnerStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterOwnerStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOwnerStmt and conformance PgQuery_AlterOwnerStmt, type metadata accessor for PgQuery_AlterOwnerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOwnerStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterOperatorStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterOperatorStmt.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_AlterOperatorStmt, type metadata accessor for PgQuery_ObjectWithArgs, &lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
}

uint64_t PgQuery_AlterOperatorStmt.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t ObjectWithArgs;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[2];
  uint64_t v15;

  v3 = v1;
  v14[1] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v8 = *(_QWORD *)(ObjectWithArgs - 8);
  MEMORY[0x1E0C80A78](ObjectWithArgs);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = type metadata accessor for PgQuery_AlterOperatorStmt(0);
  v11 = *(int *)(v14[0] + 24);
  v15 = v3;
  outlined init with copy of PgQuery_Alias?(v3 + v11, (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, ObjectWithArgs) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    v12 = v15;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v6, (uint64_t)v10, type metadata accessor for PgQuery_ObjectWithArgs);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, type metadata accessor for PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_ObjectWithArgs);
    v12 = v15;
    if (v2)
      return result;
  }
  if (!*(_QWORD *)(*(_QWORD *)v12 + 16))
    return UnknownStorage.traverse<A>(visitor:)();
  type metadata accessor for PgQuery_Node(0);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
  if (!v2)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterOperatorStmt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_AlterDefaultPrivilegesStmt(a1, type metadata accessor for PgQuery_ObjectWithArgs, a2);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterDefaultPrivilegesStmt@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t v7;

  *a3 = MEMORY[0x1E0DEE9D8];
  UnknownStorage.init()();
  v6 = (char *)a3 + *(int *)(a1 + 24);
  v7 = a2(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterOperatorStmt()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterOperatorStmt(uint64_t a1)
{
  return PgQuery_AlterOperatorStmt.traverse<A>(visitor:)(a1);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterOperatorStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOperatorStmt and conformance PgQuery_AlterOperatorStmt, type metadata accessor for PgQuery_AlterOperatorStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOperatorStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterOperatorStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterOperatorStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterOperatorStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOperatorStmt and conformance PgQuery_AlterOperatorStmt, type metadata accessor for PgQuery_AlterOperatorStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOperatorStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterOperatorStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOperatorStmt and conformance PgQuery_AlterOperatorStmt, type metadata accessor for PgQuery_AlterOperatorStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOperatorStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterTypeStmt.decodeMessage<A>(decoder:)()
{
  return PgQuery_AlterTypeStmt.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterTypeStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterTypeStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_AlterTypeStmt);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterTypeStmt@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterTypeStmt()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterTypeStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTypeStmt and conformance PgQuery_AlterTypeStmt, type metadata accessor for PgQuery_AlterTypeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTypeStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterTypeStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterTypeStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterTypeStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTypeStmt and conformance PgQuery_AlterTypeStmt, type metadata accessor for PgQuery_AlterTypeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTypeStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterTypeStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTypeStmt and conformance PgQuery_AlterTypeStmt, type metadata accessor for PgQuery_AlterTypeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTypeStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlterTypeStmt(uint64_t *a1, uint64_t *a2)
{
  return specialized static PgQuery_AlterTSDictionaryStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AlterTypeStmt) & 1;
}

uint64_t PgQuery_DropOwnedStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_DropOwnedStmt.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!v0[1]
      || (lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior(),
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      type metadata accessor for PgQuery_DropOwnedStmt(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DropOwnedStmt@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DropOwnedStmt()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DropOwnedStmt()
{
  return PgQuery_DropOwnedStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DropOwnedStmt()
{
  return PgQuery_DropOwnedStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DropOwnedStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropOwnedStmt and conformance PgQuery_DropOwnedStmt, type metadata accessor for PgQuery_DropOwnedStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropOwnedStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DropOwnedStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DropOwnedStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DropOwnedStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropOwnedStmt and conformance PgQuery_DropOwnedStmt, type metadata accessor for PgQuery_DropOwnedStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropOwnedStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DropOwnedStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropOwnedStmt and conformance PgQuery_DropOwnedStmt, type metadata accessor for PgQuery_DropOwnedStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropOwnedStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_ReassignOwnedStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterDefaultPrivilegesStmt.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_ReassignOwnedStmt, type metadata accessor for PgQuery_RoleSpec, &lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
}

uint64_t PgQuery_AlterDefaultPrivilegesStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  char v11;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v7 || (v11 & 1) != 0)
      break;
    if (result == 2)
    {
      a4(0);
      a5(0);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(a6, a5, a7);
      dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for PgQuery_Node(0);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
      dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
    }
    v7 = 0;
  }
  return result;
}

uint64_t PgQuery_ReassignOwnedStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t RoleSpec;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t ReassignOwnedStmt;
  uint64_t v15;
  uint64_t v16[4];

  v16[3] = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v9 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v16[0] = (uint64_t)v11;
  v16[1] = a2;
  if (!v12
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v3))
  {
    ReassignOwnedStmt = type metadata accessor for PgQuery_ReassignOwnedStmt(0);
    outlined init with copy of PgQuery_Alias?(v2 + *(int *)(ReassignOwnedStmt + 24), (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, RoleSpec) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    }
    else
    {
      v15 = v16[0];
      outlined init with take of PgQuery_OidList((uint64_t)v7, v16[0], type metadata accessor for PgQuery_RoleSpec);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      result = outlined destroy of PgQuery_Alias(v15, type metadata accessor for PgQuery_RoleSpec);
      if (v3)
        return result;
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ReassignOwnedStmt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_AlterDefaultPrivilegesStmt(a1, type metadata accessor for PgQuery_RoleSpec, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ReassignOwnedStmt()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ReassignOwnedStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_ReassignOwnedStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ReassignOwnedStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReassignOwnedStmt and conformance PgQuery_ReassignOwnedStmt, type metadata accessor for PgQuery_ReassignOwnedStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReassignOwnedStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ReassignOwnedStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ReassignOwnedStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ReassignOwnedStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReassignOwnedStmt and conformance PgQuery_ReassignOwnedStmt, type metadata accessor for PgQuery_ReassignOwnedStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReassignOwnedStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ReassignOwnedStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReassignOwnedStmt and conformance PgQuery_ReassignOwnedStmt, type metadata accessor for PgQuery_ReassignOwnedStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReassignOwnedStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CompositeTypeStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterOperatorStmt.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_CompositeTypeStmt, type metadata accessor for PgQuery_RangeVar, &lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
}

uint64_t PgQuery_AlterOperatorStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  char v11;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v7 || (v11 & 1) != 0)
      break;
    if (result == 2)
    {
      type metadata accessor for PgQuery_Node(0);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
      dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
    }
    else if (result == 1)
    {
      a4(0);
      a5(0);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(a6, a5, a7);
      dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    }
    v7 = 0;
  }
  return result;
}

uint64_t PgQuery_CompositeTypeStmt.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t RangeVar;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[2];
  uint64_t v15;

  v3 = v1;
  v14[1] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v8 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = type metadata accessor for PgQuery_CompositeTypeStmt(0);
  v11 = *(int *)(v14[0] + 24);
  v15 = v3;
  outlined init with copy of PgQuery_Alias?(v3 + v11, (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v12 = v15;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v6, (uint64_t)v10, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_RangeVar);
    v12 = v15;
    if (v2)
      return result;
  }
  if (!*(_QWORD *)(*(_QWORD *)v12 + 16))
    return UnknownStorage.traverse<A>(visitor:)();
  type metadata accessor for PgQuery_Node(0);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
  if (!v2)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CompositeTypeStmt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_AlterDefaultPrivilegesStmt(a1, type metadata accessor for PgQuery_RangeVar, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CompositeTypeStmt()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CompositeTypeStmt(uint64_t a1)
{
  return PgQuery_CompositeTypeStmt.traverse<A>(visitor:)(a1);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CompositeTypeStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CompositeTypeStmt and conformance PgQuery_CompositeTypeStmt, type metadata accessor for PgQuery_CompositeTypeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CompositeTypeStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CompositeTypeStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CompositeTypeStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CompositeTypeStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CompositeTypeStmt and conformance PgQuery_CompositeTypeStmt, type metadata accessor for PgQuery_CompositeTypeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CompositeTypeStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CompositeTypeStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CompositeTypeStmt and conformance PgQuery_CompositeTypeStmt, type metadata accessor for PgQuery_CompositeTypeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CompositeTypeStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateEnumStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterTypeStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_CreateEnumStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateEnumStmt()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateEnumStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEnumStmt and conformance PgQuery_CreateEnumStmt, type metadata accessor for PgQuery_CreateEnumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateEnumStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateEnumStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateEnumStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateEnumStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEnumStmt and conformance PgQuery_CreateEnumStmt, type metadata accessor for PgQuery_CreateEnumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateEnumStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateEnumStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEnumStmt and conformance PgQuery_CreateEnumStmt, type metadata accessor for PgQuery_CreateEnumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateEnumStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CreateEnumStmt(uint64_t *a1, uint64_t *a2)
{
  return specialized static PgQuery_AlterTSDictionaryStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CreateEnumStmt) & 1;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  char *v16;

  v5 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v5, a2);
  __swift_project_value_buffer(v5, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_18DC0CE10;
  v11 = (_QWORD *)(v10 + v9);
  v12 = v10 + v9 + *(int *)(v6 + 48);
  *v11 = 1;
  *(_QWORD *)v12 = "type_name";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v13 = *MEMORY[0x1E0D3EF20];
  v14 = type metadata accessor for _NameMap.NameDescription();
  v15 = *(void (**)(void))(*(_QWORD *)(v14 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v15)(v12, v13, v14);
  v16 = (char *)v11 + v8 + *(int *)(v6 + 48);
  *(_QWORD *)((char *)v11 + v8) = 2;
  *(_QWORD *)v16 = a3;
  *((_QWORD *)v16 + 1) = a4;
  v16[16] = 2;
  v15();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_18DC0CE20;
  v12 = v11 + v10 + *(int *)(v8 + 48);
  *(_QWORD *)(v11 + v10) = 1;
  *(_QWORD *)v12 = a3;
  *(_QWORD *)(v12 + 8) = a4;
  *(_BYTE *)(v12 + 16) = 2;
  v13 = *MEMORY[0x1E0D3EF08];
  v14 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t PgQuery_CreateRangeStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterTypeStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_CreateRangeStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateRangeStmt()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateRangeStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRangeStmt and conformance PgQuery_CreateRangeStmt, type metadata accessor for PgQuery_CreateRangeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateRangeStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateRangeStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateRangeStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateRangeStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRangeStmt and conformance PgQuery_CreateRangeStmt, type metadata accessor for PgQuery_CreateRangeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateRangeStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateRangeStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRangeStmt and conformance PgQuery_CreateRangeStmt, type metadata accessor for PgQuery_CreateRangeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateRangeStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CreateRangeStmt(uint64_t *a1, uint64_t *a2)
{
  return specialized static PgQuery_AlterTSDictionaryStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CreateRangeStmt) & 1;
}

uint64_t PgQuery_AlterEnumStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
        case 3:
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 5:
        case 6:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterEnumStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = *(_QWORD *)(v0 + 8) & 0xFFFFFFFFFFFFLL;
    if (!v4 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      v5 = *(_QWORD *)(v0 + 32);
      v6 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0)
        v6 = *(_QWORD *)(v0 + 24) & 0xFFFFFFFFFFFFLL;
      if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        v7 = *(_QWORD *)(v0 + 48);
        v8 = HIBYTE(v7) & 0xF;
        if ((v7 & 0x2000000000000000) == 0)
          v8 = *(_QWORD *)(v0 + 40) & 0xFFFFFFFFFFFFLL;
        if (!v8 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          if (*(_BYTE *)(v0 + 56) != 1
            || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
          {
            if (*(_BYTE *)(v0 + 57) != 1
              || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
            {
              type metadata accessor for PgQuery_AlterEnumStmt(0);
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterEnumStmt@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0xE000000000000000;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0xE000000000000000;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0xE000000000000000;
  *(_WORD *)(a1 + 56) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterEnumStmt()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterEnumStmt()
{
  return PgQuery_AlterEnumStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterEnumStmt()
{
  return PgQuery_AlterEnumStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterEnumStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEnumStmt and conformance PgQuery_AlterEnumStmt, type metadata accessor for PgQuery_AlterEnumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterEnumStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterEnumStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterEnumStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterEnumStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEnumStmt and conformance PgQuery_AlterEnumStmt, type metadata accessor for PgQuery_AlterEnumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterEnumStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterEnumStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEnumStmt and conformance PgQuery_AlterEnumStmt, type metadata accessor for PgQuery_AlterEnumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterEnumStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterTSDictionaryStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterTypeStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_AlterTSDictionaryStmt);
}

uint64_t PgQuery_AlterTypeStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  if (!*(_QWORD *)(*v4 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
  {
    if (!*(_QWORD *)(v4[1] + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
    {
      a4(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterTSDictionaryStmt()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterTSDictionaryStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSDictionaryStmt and conformance PgQuery_AlterTSDictionaryStmt, type metadata accessor for PgQuery_AlterTSDictionaryStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTSDictionaryStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterTSDictionaryStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterTSDictionaryStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterTSDictionaryStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSDictionaryStmt and conformance PgQuery_AlterTSDictionaryStmt, type metadata accessor for PgQuery_AlterTSDictionaryStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTSDictionaryStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterTSDictionaryStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSDictionaryStmt and conformance PgQuery_AlterTSDictionaryStmt, type metadata accessor for PgQuery_AlterTSDictionaryStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTSDictionaryStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlterTSDictionaryStmt(uint64_t *a1, uint64_t *a2)
{
  return specialized static PgQuery_AlterTSDictionaryStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AlterTSDictionaryStmt) & 1;
}

uint64_t PgQuery_AlterTSConfigurationStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_AlterTSConfigType and conformance PgQuery_AlterTSConfigType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 2:
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 5:
        case 6:
        case 7:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterTSConfigurationStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)v0
    || (lazy protocol witness table accessor for type PgQuery_AlterTSConfigType and conformance PgQuery_AlterTSConfigType(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v0 + 24) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (!*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          if (*(_BYTE *)(v0 + 40) != 1
            || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
          {
            if (*(_BYTE *)(v0 + 41) != 1
              || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
            {
              if (*(_BYTE *)(v0 + 42) != 1
                || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
              {
                type metadata accessor for PgQuery_AlterTSConfigurationStmt(0);
                return UnknownStorage.traverse<A>(visitor:)();
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterTSConfigurationStmt@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 24) = v1;
  *(_QWORD *)(a1 + 32) = v1;
  *(_WORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 42) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterTSConfigurationStmt()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PgQuery_DefineStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 44);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PgQuery_DefineStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 44);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterTSConfigurationStmt()
{
  return PgQuery_AlterTSConfigurationStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterTSConfigurationStmt()
{
  return PgQuery_AlterTSConfigurationStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterTSConfigurationStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSConfigurationStmt and conformance PgQuery_AlterTSConfigurationStmt, type metadata accessor for PgQuery_AlterTSConfigurationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTSConfigurationStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterTSConfigurationStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterTSConfigurationStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterTSConfigurationStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSConfigurationStmt and conformance PgQuery_AlterTSConfigurationStmt, type metadata accessor for PgQuery_AlterTSConfigurationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTSConfigurationStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterTSConfigurationStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSConfigurationStmt and conformance PgQuery_AlterTSConfigurationStmt, type metadata accessor for PgQuery_AlterTSConfigurationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTSConfigurationStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateFdwStmt.decodeMessage<A>(decoder:)()
{
  return PgQuery_CreateFdwStmt.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateFdwStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateFdwStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_CreateFdwStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateFdwStmt()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateFdwStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFdwStmt and conformance PgQuery_CreateFdwStmt, type metadata accessor for PgQuery_CreateFdwStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateFdwStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateFdwStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateFdwStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateFdwStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFdwStmt and conformance PgQuery_CreateFdwStmt, type metadata accessor for PgQuery_CreateFdwStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateFdwStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateFdwStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFdwStmt and conformance PgQuery_CreateFdwStmt, type metadata accessor for PgQuery_CreateFdwStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateFdwStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CreateFdwStmt(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_CreateFdwStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CreateFdwStmt) & 1;
}

uint64_t PgQuery_AlterFdwStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateFdwStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_AlterFdwStmt);
}

uint64_t PgQuery_CreateFdwStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = v4[1];
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = *v4 & 0xFFFFFFFFFFFFLL;
  if (!v8 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    if (!*(_QWORD *)(v4[2] + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
    {
      if (!*(_QWORD *)(v4[3] + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
      {
        a4(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateFdwStmt@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v1 = MEMORY[0x1E0DEE9D8];
  a1[2] = MEMORY[0x1E0DEE9D8];
  a1[3] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterFdwStmt()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterFdwStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFdwStmt and conformance PgQuery_AlterFdwStmt, type metadata accessor for PgQuery_AlterFdwStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterFdwStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterFdwStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterFdwStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterFdwStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFdwStmt and conformance PgQuery_AlterFdwStmt, type metadata accessor for PgQuery_AlterFdwStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterFdwStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterFdwStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFdwStmt and conformance PgQuery_AlterFdwStmt, type metadata accessor for PgQuery_AlterFdwStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterFdwStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlterFdwStmt(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_CreateFdwStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AlterFdwStmt) & 1;
}

uint64_t PgQuery_CreateForeignServerStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateForeignServerStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 8);
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *(_QWORD *)v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    v5 = *(_QWORD *)(v0 + 24);
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = *(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      v7 = *(_QWORD *)(v0 + 40);
      v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0)
        v8 = *(_QWORD *)(v0 + 32) & 0xFFFFFFFFFFFFLL;
      if (!v8 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        v9 = *(_QWORD *)(v0 + 56);
        v10 = HIBYTE(v9) & 0xF;
        if ((v9 & 0x2000000000000000) == 0)
          v10 = *(_QWORD *)(v0 + 48) & 0xFFFFFFFFFFFFLL;
        if (!v10 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          if (*(_BYTE *)(v0 + 64) != 1
            || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
          {
            if (!*(_QWORD *)(*(_QWORD *)(v0 + 72) + 16)
              || (type metadata accessor for PgQuery_Node(0),
                  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
            {
              type metadata accessor for PgQuery_CreateForeignServerStmt(0);
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateForeignServerStmt@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xE000000000000000;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = MEMORY[0x1E0DEE9D8];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateForeignServerStmt()
{
  return 0xD000000000000020;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateForeignServerStmt()
{
  return PgQuery_CreateForeignServerStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateForeignServerStmt()
{
  return PgQuery_CreateForeignServerStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateForeignServerStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignServerStmt and conformance PgQuery_CreateForeignServerStmt, type metadata accessor for PgQuery_CreateForeignServerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateForeignServerStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateForeignServerStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateForeignServerStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateForeignServerStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignServerStmt and conformance PgQuery_CreateForeignServerStmt, type metadata accessor for PgQuery_CreateForeignServerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateForeignServerStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateForeignServerStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignServerStmt and conformance PgQuery_CreateForeignServerStmt, type metadata accessor for PgQuery_CreateForeignServerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateForeignServerStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterForeignServerStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterForeignServerStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 8);
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *(_QWORD *)v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    v5 = *(_QWORD *)(v0 + 24);
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = *(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (*(_BYTE *)(v0 + 40) != 1
          || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for PgQuery_AlterForeignServerStmt(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterForeignServerStmt@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a1 + 40) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterForeignServerStmt()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterForeignServerStmt()
{
  return PgQuery_AlterForeignServerStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterForeignServerStmt()
{
  return PgQuery_AlterForeignServerStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterForeignServerStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterForeignServerStmt and conformance PgQuery_AlterForeignServerStmt, type metadata accessor for PgQuery_AlterForeignServerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterForeignServerStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterForeignServerStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterForeignServerStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterForeignServerStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterForeignServerStmt and conformance PgQuery_AlterForeignServerStmt, type metadata accessor for PgQuery_AlterForeignServerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterForeignServerStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterForeignServerStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterForeignServerStmt and conformance PgQuery_AlterForeignServerStmt, type metadata accessor for PgQuery_AlterForeignServerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterForeignServerStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateUserMappingStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_CreateUserMappingStmt(0);
          type metadata accessor for PgQuery_RoleSpec(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateUserMappingStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t RoleSpec;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[4];

  v15[3] = a3;
  v15[1] = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v9 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = type metadata accessor for PgQuery_CreateUserMappingStmt(0);
  outlined init with copy of PgQuery_Alias?(v3 + *(int *)(v15[0] + 32), (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_RoleSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_RoleSpec);
    if (v4)
      return result;
  }
  v13 = *(_QWORD *)(v3 + 8);
  v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0)
    v14 = *(_QWORD *)v3 & 0xFFFFFFFFFFFFLL;
  if (!v14 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    if (*(_BYTE *)(v3 + 16) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v3 + 24) + 16))
        return UnknownStorage.traverse<A>(visitor:)();
      type metadata accessor for PgQuery_Node(0);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
      result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      if (!v4)
        return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateUserMappingStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t RoleSpec;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0xE000000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEE9D8];
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 32);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 56))(v4, 1, 1, RoleSpec);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateUserMappingStmt()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateUserMappingStmt()
{
  return PgQuery_CreateUserMappingStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateUserMappingStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateUserMappingStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateUserMappingStmt and conformance PgQuery_CreateUserMappingStmt, type metadata accessor for PgQuery_CreateUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateUserMappingStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateUserMappingStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateUserMappingStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateUserMappingStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateUserMappingStmt and conformance PgQuery_CreateUserMappingStmt, type metadata accessor for PgQuery_CreateUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateUserMappingStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateUserMappingStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateUserMappingStmt and conformance PgQuery_CreateUserMappingStmt, type metadata accessor for PgQuery_CreateUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateUserMappingStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterUserMappingStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterUserMappingStmt.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_AlterUserMappingStmt, type metadata accessor for PgQuery_RoleSpec, &lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
}

uint64_t PgQuery_AlterUserMappingStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t RoleSpec;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[4];

  v5 = v3;
  v16[3] = a3;
  v16[1] = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v10 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = type metadata accessor for PgQuery_AlterUserMappingStmt(0);
  outlined init with copy of PgQuery_Alias?((uint64_t)v5 + *(int *)(v16[0] + 28), (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_RoleSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_RoleSpec);
    if (v4)
      return result;
  }
  v14 = v5[1];
  v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v15 = *v5 & 0xFFFFFFFFFFFFLL;
  if (!v15 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    if (!*(_QWORD *)(v5[2] + 16))
      return UnknownStorage.traverse<A>(visitor:)();
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (!v4)
      return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterUserMappingStmt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_AlterUserMappingStmt(a1, type metadata accessor for PgQuery_RoleSpec, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterUserMappingStmt()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterUserMappingStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterUserMappingStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterUserMappingStmt and conformance PgQuery_AlterUserMappingStmt, type metadata accessor for PgQuery_AlterUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterUserMappingStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterUserMappingStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterUserMappingStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterUserMappingStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterUserMappingStmt and conformance PgQuery_AlterUserMappingStmt, type metadata accessor for PgQuery_AlterUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterUserMappingStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterUserMappingStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterUserMappingStmt and conformance PgQuery_AlterUserMappingStmt, type metadata accessor for PgQuery_AlterUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterUserMappingStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_DropUserMappingStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_DropUserMappingStmt(0);
        type metadata accessor for PgQuery_RoleSpec(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v4 = v3;
    dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_DropUserMappingStmt.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t RoleSpec;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t DropUserMappingStmt;
  uint64_t v16;

  v3 = v1;
  v16 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v8 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropUserMappingStmt = type metadata accessor for PgQuery_DropUserMappingStmt(0);
  outlined init with copy of PgQuery_Alias?(v3 + *(int *)(DropUserMappingStmt + 28), (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v6, (uint64_t)v10, type metadata accessor for PgQuery_RoleSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_RoleSpec);
    if (v2)
      return result;
  }
  v12 = *(_QWORD *)(v3 + 8);
  v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v13 = *(_QWORD *)v3 & 0xFFFFFFFFFFFFLL;
  if (!v13 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v2))
  {
    if (*(_BYTE *)(v3 + 16) != 1)
      return UnknownStorage.traverse<A>(visitor:)();
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (!v2)
      return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DropUserMappingStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t RoleSpec;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0xE000000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 28);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 56))(v4, 1, 1, RoleSpec);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DropUserMappingStmt()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DropUserMappingStmt()
{
  return PgQuery_DropUserMappingStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DropUserMappingStmt(uint64_t a1)
{
  return PgQuery_DropUserMappingStmt.traverse<A>(visitor:)(a1);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DropUserMappingStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropUserMappingStmt and conformance PgQuery_DropUserMappingStmt, type metadata accessor for PgQuery_DropUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropUserMappingStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DropUserMappingStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DropUserMappingStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DropUserMappingStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropUserMappingStmt and conformance PgQuery_DropUserMappingStmt, type metadata accessor for PgQuery_DropUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropUserMappingStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DropUserMappingStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropUserMappingStmt and conformance PgQuery_DropUserMappingStmt, type metadata accessor for PgQuery_DropUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropUserMappingStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterTableSpaceOptionsStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v4 = v3;
    dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_AlterTableSpaceOptionsStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(v0 + 8);
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *(_QWORD *)v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (*(_BYTE *)(v0 + 24) != 1
        || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterTableSpaceOptionsStmt@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a1 + 24) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterTableSpaceOptionsStmt()
{
  return 0xD000000000000023;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterTableSpaceOptionsStmt()
{
  return PgQuery_AlterTableSpaceOptionsStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterTableSpaceOptionsStmt()
{
  return PgQuery_AlterTableSpaceOptionsStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterTableSpaceOptionsStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableSpaceOptionsStmt and conformance PgQuery_AlterTableSpaceOptionsStmt, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableSpaceOptionsStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterTableSpaceOptionsStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterTableSpaceOptionsStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterTableSpaceOptionsStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableSpaceOptionsStmt and conformance PgQuery_AlterTableSpaceOptionsStmt, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableSpaceOptionsStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterTableSpaceOptionsStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableSpaceOptionsStmt and conformance PgQuery_AlterTableSpaceOptionsStmt, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableSpaceOptionsStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterTableMoveAllStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterTableMoveAllStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 8);
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *(_QWORD *)v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!destructiveProjectEnumData for StorableValue(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24))
      || (lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType(),
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        v5 = *(_QWORD *)(v0 + 48);
        v6 = HIBYTE(v5) & 0xF;
        if ((v5 & 0x2000000000000000) == 0)
          v6 = *(_QWORD *)(v0 + 40) & 0xFFFFFFFFFFFFLL;
        if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          if (*(_BYTE *)(v0 + 56) != 1
            || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for PgQuery_AlterTableMoveAllStmt(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterTableMoveAllStmt@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0xE000000000000000;
  *(_BYTE *)(a1 + 56) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterTableMoveAllStmt()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterTableMoveAllStmt()
{
  return PgQuery_AlterTableMoveAllStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterTableMoveAllStmt()
{
  return PgQuery_AlterTableMoveAllStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterTableMoveAllStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableMoveAllStmt and conformance PgQuery_AlterTableMoveAllStmt, type metadata accessor for PgQuery_AlterTableMoveAllStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableMoveAllStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterTableMoveAllStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterTableMoveAllStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterTableMoveAllStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableMoveAllStmt and conformance PgQuery_AlterTableMoveAllStmt, type metadata accessor for PgQuery_AlterTableMoveAllStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableMoveAllStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterTableMoveAllStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableMoveAllStmt and conformance PgQuery_AlterTableMoveAllStmt, type metadata accessor for PgQuery_AlterTableMoveAllStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableMoveAllStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_SecLabelStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = (_QWORD *)(v1
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider);
  *v5 = 0;
  v5[1] = 0xE000000000000000;
  v6 = (_QWORD *)(v1
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label);
  *v6 = 0;
  v6[1] = 0xE000000000000000;
  v7 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v1 + 24) = v7;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  v8 = *(_QWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider
                 + 8);
  *v5 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider);
  v5[1] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label);
  v9 = *(_QWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label
                 + 8);
  swift_bridgeObjectRetain();
  swift_release();
  *v6 = v10;
  v6[1] = v9;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PgQuery_SecLabelStmt._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_SecLabelStmt._StorageClass()
{
  return type metadata accessor for PgQuery_SecLabelStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_SecLabelStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SecLabelStmt._StorageClass);
}

void type metadata completion function for PgQuery_SecLabelStmt._StorageClass()
{
  type metadata completion function for PgQuery_SecLabelStmt._StorageClass();
}

{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_SecLabelStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for PgQuery_SecLabelStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_SecLabelStmt._StorageClass(0);
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v0 + v3) = PgQuery_SecLabelStmt._StorageClass.init(copying:)(v4);
    swift_release();
  }
  swift_retain();
  v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v6 & 1) == 0)
    {
      switch(v5)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          v8 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v8 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 3:
        case 4:
          v8 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_7:
          v2 = v8;
          break;
        default:
          break;
      }
      v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_SecLabelStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t Node;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v18 = (uint64_t)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(int *)(type metadata accessor for PgQuery_SecLabelStmt(0) + 20);
  v17 = v0;
  v8 = *(_QWORD *)(v0 + v7);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_BYTE *)(v8 + 24);
  if (destructiveProjectEnumData for StorableValue(v9, v10))
  {
    v19 = v9;
    v20 = v10;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  else
  {
    swift_retain();
  }
  outlined init with copy of PgQuery_Alias?(v8+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_8;
  }
  v11 = v18;
  outlined init with take of PgQuery_OidList((uint64_t)v4, v18, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v11, type metadata accessor for PgQuery_Node);
  if (v1)
    return swift_release();
LABEL_8:
  v12 = *(_QWORD *)(v8
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider
                  + 8);
  v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v13 = *(_QWORD *)(v8
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider) & 0xFFFFFFFFFFFFLL;
  if (v13)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  v14 = *(_QWORD *)(v8
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label
                  + 8);
  v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v15 = *(_QWORD *)(v8
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label) & 0xFFFFFFFFFFFFLL;
  if (v15)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SecLabelStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_SecLabelStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SecLabelStmt()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_SecLabelStmt()
{
  return PgQuery_SecLabelStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_SecLabelStmt()
{
  return PgQuery_SecLabelStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SecLabelStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SecLabelStmt and conformance PgQuery_SecLabelStmt, type metadata accessor for PgQuery_SecLabelStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SecLabelStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SecLabelStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SecLabelStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SecLabelStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SecLabelStmt and conformance PgQuery_SecLabelStmt, type metadata accessor for PgQuery_SecLabelStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SecLabelStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SecLabelStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SecLabelStmt and conformance PgQuery_SecLabelStmt, type metadata accessor for PgQuery_SecLabelStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SecLabelStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateForeignTableStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterUserMappingStmt.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_CreateForeignTableStmt, type metadata accessor for PgQuery_CreateStmt, &lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStmt);
}

uint64_t PgQuery_AlterUserMappingStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  char v12;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v7)
  {
    while ((v12 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 1:
          a4(0);
          a5(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(a6, a5, a7);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateForeignTableStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Stmt;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[4];

  v5 = v3;
  v16[3] = a3;
  v16[1] = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  v10 = *(_QWORD *)(Stmt - 8);
  MEMORY[0x1E0C80A78](Stmt);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = type metadata accessor for PgQuery_CreateForeignTableStmt(0);
  outlined init with copy of PgQuery_Alias?((uint64_t)v5 + *(int *)(v16[0] + 28), (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, Stmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_CreateStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, type metadata accessor for PgQuery_CreateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_CreateStmt);
    if (v4)
      return result;
  }
  v14 = v5[1];
  v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v15 = *v5 & 0xFFFFFFFFFFFFLL;
  if (!v15 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    if (!*(_QWORD *)(v5[2] + 16))
      return UnknownStorage.traverse<A>(visitor:)();
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (!v4)
      return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateForeignTableStmt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_AlterUserMappingStmt(a1, type metadata accessor for PgQuery_CreateStmt, a2);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterUserMappingStmt@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t v7;

  *a3 = 0;
  a3[1] = 0xE000000000000000;
  a3[2] = MEMORY[0x1E0DEE9D8];
  UnknownStorage.init()();
  v6 = (char *)a3 + *(int *)(a1 + 28);
  v7 = a2(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateForeignTableStmt()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateForeignTableStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateForeignTableStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateForeignTableStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignTableStmt and conformance PgQuery_CreateForeignTableStmt, type metadata accessor for PgQuery_CreateForeignTableStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateForeignTableStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateForeignTableStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateForeignTableStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateForeignTableStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignTableStmt and conformance PgQuery_CreateForeignTableStmt, type metadata accessor for PgQuery_CreateForeignTableStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateForeignTableStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateForeignTableStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignTableStmt and conformance PgQuery_CreateForeignTableStmt, type metadata accessor for PgQuery_CreateForeignTableStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateForeignTableStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_ImportForeignSchemaStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 4:
          lazy protocol witness table accessor for type PgQuery_ImportForeignSchemaType and conformance PgQuery_ImportForeignSchemaType();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 5:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ImportForeignSchemaStmt.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    v5 = v0[3];
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      v7 = v0[5];
      v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0)
        v8 = v0[4] & 0xFFFFFFFFFFFFLL;
      if (!v8 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (!v0[6]
          || (lazy protocol witness table accessor for type PgQuery_ImportForeignSchemaType and conformance PgQuery_ImportForeignSchemaType(),
              result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
              !v1))
        {
          if (!*(_QWORD *)(v0[8] + 16)
            || (type metadata accessor for PgQuery_Node(0),
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
          {
            if (!*(_QWORD *)(v0[9] + 16)
              || (type metadata accessor for PgQuery_Node(0),
                  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
            {
              type metadata accessor for PgQuery_ImportForeignSchemaStmt(0);
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ImportForeignSchemaStmt@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 64) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 72) = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ImportForeignSchemaStmt()
{
  return 0xD000000000000020;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_ImportForeignSchemaStmt()
{
  return PgQuery_ImportForeignSchemaStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ImportForeignSchemaStmt()
{
  return PgQuery_ImportForeignSchemaStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ImportForeignSchemaStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ImportForeignSchemaStmt and conformance PgQuery_ImportForeignSchemaStmt, type metadata accessor for PgQuery_ImportForeignSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ImportForeignSchemaStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ImportForeignSchemaStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ImportForeignSchemaStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ImportForeignSchemaStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ImportForeignSchemaStmt and conformance PgQuery_ImportForeignSchemaStmt, type metadata accessor for PgQuery_ImportForeignSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ImportForeignSchemaStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ImportForeignSchemaStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ImportForeignSchemaStmt and conformance PgQuery_ImportForeignSchemaStmt, type metadata accessor for PgQuery_ImportForeignSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ImportForeignSchemaStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateExtensionStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_DropdbStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_CreateExtensionStmt);
}

uint64_t PgQuery_DropdbStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = *(_QWORD *)(v4 + 8);
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFLL;
  if (!v8 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    if (*(_BYTE *)(v4 + 16) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v5))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v4 + 24) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
      {
        a4(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DropdbStmt@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEE9D8];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateExtensionStmt()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateExtensionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateExtensionStmt and conformance PgQuery_CreateExtensionStmt, type metadata accessor for PgQuery_CreateExtensionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateExtensionStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateExtensionStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateExtensionStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateExtensionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateExtensionStmt and conformance PgQuery_CreateExtensionStmt, type metadata accessor for PgQuery_CreateExtensionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateExtensionStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateExtensionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateExtensionStmt and conformance PgQuery_CreateExtensionStmt, type metadata accessor for PgQuery_CreateExtensionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateExtensionStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CreateExtensionStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CreateExtensionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CreateExtensionStmt) & 1;
}

uint64_t PgQuery_AlterExtensionStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Alias.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_AlterExtensionStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterExtensionStmt()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterExtensionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionStmt and conformance PgQuery_AlterExtensionStmt, type metadata accessor for PgQuery_AlterExtensionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterExtensionStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterExtensionStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterExtensionStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterExtensionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionStmt and conformance PgQuery_AlterExtensionStmt, type metadata accessor for PgQuery_AlterExtensionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterExtensionStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterExtensionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionStmt and conformance PgQuery_AlterExtensionStmt, type metadata accessor for PgQuery_AlterExtensionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterExtensionStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlterExtensionStmt(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AlterExtensionStmt) & 1;
}

uint64_t PgQuery_AlterExtensionContentsStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t Node;
  uint64_t v8;
  char v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0xE000000000000000;
  *(_DWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 48) = 1;
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser34PgQuery_AlterExtensionContentsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v6, 1, 1, Node);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v1 + 24) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + 32) = *(_DWORD *)(a1 + 32);
  v9 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(v1 + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v1 + 48) = v9;
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser34PgQuery_AlterExtensionContentsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_release();
  outlined assign with take of PgQuery_Node?((uint64_t)v5, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  return v1;
}

uint64_t PgQuery_AlterExtensionContentsStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_DeclareCursorStmt._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser34PgQuery_AlterExtensionContentsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object);
}

uint64_t PgQuery_DeclareCursorStmt._StorageClass.__deallocating_deinit(_QWORD *a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v1 + *a1, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_AlterExtensionContentsStmt._StorageClass()
{
  return type metadata accessor for PgQuery_AlterExtensionContentsStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_AlterExtensionContentsStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, type metadata singleton initialization cache for PgQuery_AlterExtensionContentsStmt._StorageClass);
}

void type metadata completion function for PgQuery_AlterExtensionContentsStmt._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_AlterExtensionContentsStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for PgQuery_AlterExtensionContentsStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_AlterExtensionContentsStmt._StorageClass(0);
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v0 + v3) = PgQuery_AlterExtensionContentsStmt._StorageClass.init(copying:)(v4);
    swift_release();
  }
  swift_retain();
  v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v6 & 1) == 0)
    {
      switch(v5)
      {
        case 1:
          v8 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_7;
        case 2:
          v8 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_7;
        case 3:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          v8 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v8 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_7:
          v2 = v8;
          break;
        default:
          break;
      }
      v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_AlterExtensionContentsStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t Node;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v8 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v19 = (uint64_t)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(int *)(type metadata accessor for PgQuery_AlterExtensionContentsStmt(0) + 20);
  v20 = v2;
  v11 = *(_QWORD *)(v2 + v10);
  v12 = *(_QWORD *)(v11 + 24);
  if ((v12 & 0x2000000000000000) != 0)
    v13 = HIBYTE(v12) & 0xF;
  else
    v13 = *(_QWORD *)(v11 + 16) & 0xFFFFFFFFFFFFLL;
  swift_retain();
  if (v13)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v3)
      return swift_release();
  }
  if (*(_DWORD *)(v11 + 32))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v3)
      return swift_release();
  }
  v18[1] = a2;
  v14 = *(_QWORD *)(v11 + 40);
  v15 = *(_BYTE *)(v11 + 48);
  if (destructiveProjectEnumData for StorableValue(v14, v15))
  {
    v21 = v14;
    v22 = v15;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v3)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v11+ OBJC_IVAR____TtCV14BiomeSQLParser34PgQuery_AlterExtensionContentsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, Node) != 1)
  {
    v16 = v19;
    outlined init with take of PgQuery_OidList((uint64_t)v7, v19, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v16, type metadata accessor for PgQuery_Node);
    if (!v3)
      goto LABEL_14;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_14:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterExtensionContentsStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_AlterExtensionContentsStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterExtensionContentsStmt()
{
  return 0xD000000000000023;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterExtensionContentsStmt()
{
  return PgQuery_AlterExtensionContentsStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterExtensionContentsStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_AlterExtensionContentsStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterExtensionContentsStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionContentsStmt and conformance PgQuery_AlterExtensionContentsStmt, type metadata accessor for PgQuery_AlterExtensionContentsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterExtensionContentsStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterExtensionContentsStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterExtensionContentsStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterExtensionContentsStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionContentsStmt and conformance PgQuery_AlterExtensionContentsStmt, type metadata accessor for PgQuery_AlterExtensionContentsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterExtensionContentsStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterExtensionContentsStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionContentsStmt and conformance PgQuery_AlterExtensionContentsStmt, type metadata accessor for PgQuery_AlterExtensionContentsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterExtensionContentsStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateEventTrigStmt.decodeMessage<A>(decoder:)()
{
  return PgQuery_CreateEventTrigStmt.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateEventTrigStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateEventTrigStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_CreateEventTrigStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateEventTrigStmt()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateEventTrigStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEventTrigStmt and conformance PgQuery_CreateEventTrigStmt, type metadata accessor for PgQuery_CreateEventTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateEventTrigStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateEventTrigStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateEventTrigStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateEventTrigStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEventTrigStmt and conformance PgQuery_CreateEventTrigStmt, type metadata accessor for PgQuery_CreateEventTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateEventTrigStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateEventTrigStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEventTrigStmt and conformance PgQuery_CreateEventTrigStmt, type metadata accessor for PgQuery_CreateEventTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateEventTrigStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CreateEventTrigStmt(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_CreateSubscriptionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CreateEventTrigStmt) & 1;
}

uint64_t PgQuery_AlterEventTrigStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_NotifyStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_AlterEventTrigStmt);
}

uint64_t PgQuery_NotifyStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;

  v7 = v4[1];
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = *v4 & 0xFFFFFFFFFFFFLL;
  if (!v8 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    v10 = v4[3];
    v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0)
      v11 = v4[2] & 0xFFFFFFFFFFFFLL;
    if (!v11 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
    {
      a4(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterEventTrigStmt()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterEventTrigStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEventTrigStmt and conformance PgQuery_AlterEventTrigStmt, type metadata accessor for PgQuery_AlterEventTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterEventTrigStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterEventTrigStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterEventTrigStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterEventTrigStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEventTrigStmt and conformance PgQuery_AlterEventTrigStmt, type metadata accessor for PgQuery_AlterEventTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterEventTrigStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterEventTrigStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEventTrigStmt and conformance PgQuery_AlterEventTrigStmt, type metadata accessor for PgQuery_AlterEventTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterEventTrigStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlterEventTrigStmt(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_ReplicaIdentityStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AlterEventTrigStmt) & 1;
}

uint64_t PgQuery_RefreshMatViewStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        type metadata accessor for PgQuery_RefreshMatViewStmt(0);
        type metadata accessor for PgQuery_RangeVar(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 2 || result == 1)
      {
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RefreshMatViewStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t RangeVar;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t RefreshMatViewStmt;
  _QWORD v16[4];

  v4 = v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v11 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v12) = *v4;
  v16[3] = a2;
  v16[1] = a1;
  if ((_DWORD)v12 != 1 || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v3))
  {
    if (v4[1] != 1 || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v3))
    {
      RefreshMatViewStmt = type metadata accessor for PgQuery_RefreshMatViewStmt(0);
      outlined init with copy of PgQuery_Alias?((uint64_t)&v4[*(int *)(RefreshMatViewStmt + 28)], (uint64_t)v9, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, RangeVar) == 1)
      {
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v9, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      }
      else
      {
        outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v13, type metadata accessor for PgQuery_RangeVar);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
        dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
        result = outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_RangeVar);
        if (v3)
          return result;
      }
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RefreshMatViewStmt@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  char *v4;
  uint64_t RangeVar;

  *a2 = 0;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 28);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v4, 1, 1, RangeVar);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RefreshMatViewStmt()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_RefreshMatViewStmt()
{
  return PgQuery_RefreshMatViewStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RefreshMatViewStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_RefreshMatViewStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RefreshMatViewStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RefreshMatViewStmt and conformance PgQuery_RefreshMatViewStmt, type metadata accessor for PgQuery_RefreshMatViewStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RefreshMatViewStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RefreshMatViewStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RefreshMatViewStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RefreshMatViewStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RefreshMatViewStmt and conformance PgQuery_RefreshMatViewStmt, type metadata accessor for PgQuery_RefreshMatViewStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RefreshMatViewStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RefreshMatViewStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RefreshMatViewStmt and conformance PgQuery_RefreshMatViewStmt, type metadata accessor for PgQuery_RefreshMatViewStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RefreshMatViewStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_ReplicaIdentityStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_NotifyStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_ReplicaIdentityStmt);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_NotifyStmt@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ReplicaIdentityStmt()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ReplicaIdentityStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReplicaIdentityStmt and conformance PgQuery_ReplicaIdentityStmt, type metadata accessor for PgQuery_ReplicaIdentityStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReplicaIdentityStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ReplicaIdentityStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ReplicaIdentityStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ReplicaIdentityStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReplicaIdentityStmt and conformance PgQuery_ReplicaIdentityStmt, type metadata accessor for PgQuery_ReplicaIdentityStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReplicaIdentityStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ReplicaIdentityStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReplicaIdentityStmt and conformance PgQuery_ReplicaIdentityStmt, type metadata accessor for PgQuery_ReplicaIdentityStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReplicaIdentityStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ReplicaIdentityStmt(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_ReplicaIdentityStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_ReplicaIdentityStmt) & 1;
}

uint64_t PgQuery_AlterSystemStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for PgQuery_AlterSystemStmt(0);
        type metadata accessor for PgQuery_VariableSetStmt(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, type metadata accessor for PgQuery_VariableSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableSetStmt);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterSystemStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t VariableSetStmt;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AlterSystemStmt;
  uint64_t result;
  _QWORD v14[2];

  v14[1] = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v9 = *(_QWORD *)(VariableSetStmt - 8);
  MEMORY[0x1E0C80A78](VariableSetStmt);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterSystemStmt = type metadata accessor for PgQuery_AlterSystemStmt(0);
  outlined init with copy of PgQuery_Alias?(v3 + *(int *)(AlterSystemStmt + 20), (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, VariableSetStmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_VariableSetStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, type metadata accessor for PgQuery_VariableSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableSetStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_VariableSetStmt);
    if (v4)
      return result;
  }
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterSystemStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t VariableSetStmt;

  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 20);
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(VariableSetStmt - 8) + 56))(v4, 1, 1, VariableSetStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterSystemStmt()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterSystemStmt()
{
  return PgQuery_AlterSystemStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterSystemStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterSystemStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterSystemStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSystemStmt and conformance PgQuery_AlterSystemStmt, type metadata accessor for PgQuery_AlterSystemStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSystemStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterSystemStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterSystemStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterSystemStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSystemStmt and conformance PgQuery_AlterSystemStmt, type metadata accessor for PgQuery_AlterSystemStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSystemStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterSystemStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSystemStmt and conformance PgQuery_AlterSystemStmt, type metadata accessor for PgQuery_AlterSystemStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSystemStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreatePolicyStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t RangeVar;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Node;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v3);
  v19 = (uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0xE000000000000000;
  v5 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v5, 1, 1, RangeVar);
  v7 = (_QWORD *)(v1
                + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName);
  *v7 = 0;
  v7[1] = 0xE000000000000000;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__permissive;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__permissive) = 0;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles) = MEMORY[0x1E0DEE9D8];
  v10 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v12(v10, 1, 1, Node);
  v13 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck;
  v12(v1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, 1, 1, Node);
  v14 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v1 + 24) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table, v5, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v15 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName
                  + 8);
  *v7 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName);
  v7[1] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v1 + v8) = *(_BYTE *)(a1
                                 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__permissive);
  *(_QWORD *)(v1 + v9) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, v10, &demangling cache variable for type metadata for PgQuery_Node?);
  v16 = v19;
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, v19, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_release();
  outlined assign with take of PgQuery_Node?(v16, v13, &demangling cache variable for type metadata for PgQuery_Node?);
  return v1;
}

uint64_t PgQuery_CreatePolicyStmt._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_CreatePolicyStmt._StorageClass()
{
  return type metadata accessor for PgQuery_CreatePolicyStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CreatePolicyStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreatePolicyStmt._StorageClass);
}

void type metadata completion function for PgQuery_CreatePolicyStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_CreatePolicyStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_CreatePolicyStmt, (void (*)(_QWORD))type metadata accessor for PgQuery_CreatePolicyStmt._StorageClass, PgQuery_CreatePolicyStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CreatePolicyStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_CreatePolicyStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_11;
        case 2:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          goto LABEL_10;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_11;
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_11;
        case 6:
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
LABEL_10:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_11:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreatePolicyStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t RangeVar;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t Node;
  uint64_t v40;
  uint64_t v41;

  v41 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v36 = (uint64_t)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v38 = (uint64_t)&v33 - v6;
  Node = type metadata accessor for PgQuery_Node(0);
  v37 = *(_QWORD *)(Node - 8);
  v7 = MEMORY[0x1E0C80A78](Node);
  v33 = (uint64_t)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v35 = (uint64_t)&v33 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v14 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(int *)(type metadata accessor for PgQuery_CreatePolicyStmt(0) + 20);
  v34 = v2;
  v18 = *(_QWORD *)(v2 + v17);
  v19 = *(_QWORD *)(v18 + 24);
  if ((v19 & 0x2000000000000000) != 0)
    v20 = HIBYTE(v19) & 0xF;
  else
    v20 = *(_QWORD *)(v18 + 16) & 0xFFFFFFFFFFFFLL;
  swift_retain();
  if (!v20)
  {
    v22 = v40;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  v21 = v40;
  dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  v22 = v21;
  if (!v21)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, RangeVar) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      v23 = Node;
    }
    else
    {
      outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v16, type metadata accessor for PgQuery_RangeVar);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_RangeVar);
      v23 = Node;
      if (v22)
        return swift_release();
    }
    v24 = *(_QWORD *)(v18
                    + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName
                    + 8);
    v25 = HIBYTE(v24) & 0xF;
    if ((v24 & 0x2000000000000000) == 0)
      v25 = *(_QWORD *)(v18
                      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName) & 0xFFFFFFFFFFFFLL;
    if (v25)
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
      if (v22)
        return swift_release();
    }
    if (*(_BYTE *)(v18
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__permissive) == 1)
    {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      if (v22)
        return swift_release();
    }
    if (*(_QWORD *)(*(_QWORD *)(v18
                               + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles)
                   + 16))
    {
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      swift_bridgeObjectRelease();
      if (v22)
        return swift_release();
    }
    v26 = v38;
    outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, v38, &demangling cache variable for type metadata for PgQuery_Node?);
    v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
    if (v27(v26, 1, v23) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v26, &demangling cache variable for type metadata for PgQuery_Node?);
    }
    else
    {
      v28 = v35;
      outlined init with take of PgQuery_OidList(v26, v35, type metadata accessor for PgQuery_Node);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      outlined destroy of PgQuery_Alias(v28, type metadata accessor for PgQuery_Node);
      if (v22)
        return swift_release();
    }
    v29 = v36;
    outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, v36, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v27(v29, 1, v23) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_Node?);
    }
    else
    {
      v30 = v29;
      v31 = v33;
      outlined init with take of PgQuery_OidList(v30, v33, type metadata accessor for PgQuery_Node);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_Node);
      if (v22)
        return swift_release();
    }
    swift_release();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreatePolicyStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CreatePolicyStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreatePolicyStmt()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreatePolicyStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_CreatePolicyStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreatePolicyStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePolicyStmt and conformance PgQuery_CreatePolicyStmt, type metadata accessor for PgQuery_CreatePolicyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePolicyStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreatePolicyStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreatePolicyStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreatePolicyStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePolicyStmt and conformance PgQuery_CreatePolicyStmt, type metadata accessor for PgQuery_CreatePolicyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePolicyStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreatePolicyStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePolicyStmt and conformance PgQuery_CreatePolicyStmt, type metadata accessor for PgQuery_CreatePolicyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePolicyStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterPolicyStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t RangeVar;
  uint64_t v8;
  uint64_t v9;
  uint64_t Node;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0xE000000000000000;
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v6, 1, 1, RangeVar);
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles) = MEMORY[0x1E0DEE9D8];
  v9 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v11(v9, 1, 1, Node);
  v12 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck;
  v11(v1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, 1, 1, Node);
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v1 + 24) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table, v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  *(_QWORD *)(v1 + v8) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, v9, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_release();
  outlined assign with take of PgQuery_Node?((uint64_t)v5, v12, &demangling cache variable for type metadata for PgQuery_Node?);
  return v1;
}

uint64_t PgQuery_AlterPolicyStmt._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_AlterPolicyStmt._StorageClass()
{
  return type metadata accessor for PgQuery_AlterPolicyStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_AlterPolicyStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterPolicyStmt._StorageClass);
}

void type metadata completion function for PgQuery_AlterPolicyStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_AlterPolicyStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for PgQuery_AlterPolicyStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_AlterPolicyStmt._StorageClass(0);
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v0 + v3) = PgQuery_AlterPolicyStmt._StorageClass.init(copying:)(v4);
    swift_release();
  }
  swift_retain();
  v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v6 & 1) == 0)
    {
      switch(v5)
      {
        case 1:
          v8 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_8;
        case 2:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          goto LABEL_7;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v8 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_8;
        case 4:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
LABEL_7:
          v8 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_8:
          v2 = v8;
          break;
        default:
          break;
      }
      v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_AlterPolicyStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t Node;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v37 = (uint64_t)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v39 = (uint64_t)&v33 - v8;
  Node = type metadata accessor for PgQuery_Node(0);
  v38 = *(_QWORD *)(Node - 8);
  v9 = MEMORY[0x1E0C80A78](Node);
  v34 = (uint64_t)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v35 = (uint64_t)&v33 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(int *)(type metadata accessor for PgQuery_AlterPolicyStmt(0) + 20);
  v36 = v3;
  v20 = *(_QWORD *)(v3 + v19);
  v21 = *(_QWORD *)(v20 + 24);
  if ((v21 & 0x2000000000000000) != 0)
    v22 = HIBYTE(v21) & 0xF;
  else
    v22 = *(_QWORD *)(v20 + 16) & 0xFFFFFFFFFFFFLL;
  swift_retain();
  v41 = a2;
  if (v22)
  {
    swift_bridgeObjectRetain();
    v23 = v42;
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    v24 = v23;
    swift_bridgeObjectRelease();
    if (v23)
      return swift_release();
  }
  else
  {
    v24 = v42;
  }
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v14, (uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
    if (v24)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v20
                             + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v24)
      return swift_release();
  }
  v25 = v39;
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, v39, &demangling cache variable for type metadata for PgQuery_Node?);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
  if (v26(v25, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v25, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v27 = v25;
    v28 = v35;
    outlined init with take of PgQuery_OidList(v27, v35, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v28, type metadata accessor for PgQuery_Node);
    if (v24)
      return swift_release();
  }
  v29 = v37;
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, v37, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v26(v29, 1, Node) != 1)
  {
    v30 = v29;
    v31 = v34;
    outlined init with take of PgQuery_OidList(v30, v34, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_Node);
    if (!v24)
      goto LABEL_20;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_20:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterPolicyStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_AlterPolicyStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterPolicyStmt()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterPolicyStmt()
{
  return PgQuery_AlterPolicyStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterPolicyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterPolicyStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterPolicyStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPolicyStmt and conformance PgQuery_AlterPolicyStmt, type metadata accessor for PgQuery_AlterPolicyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterPolicyStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterPolicyStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterPolicyStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterPolicyStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPolicyStmt and conformance PgQuery_AlterPolicyStmt, type metadata accessor for PgQuery_AlterPolicyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterPolicyStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterPolicyStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPolicyStmt and conformance PgQuery_AlterPolicyStmt, type metadata accessor for PgQuery_AlterPolicyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterPolicyStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateTransformStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t (*v6)(uint64_t);
  void *v7;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_CreateTransformStmt(0);
          type metadata accessor for PgQuery_TypeName(0);
          v5 = &lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName;
          v6 = type metadata accessor for PgQuery_TypeName;
          v7 = &protocol conformance descriptor for PgQuery_TypeName;
          goto LABEL_12;
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 4:
        case 5:
          type metadata accessor for PgQuery_CreateTransformStmt(0);
          type metadata accessor for PgQuery_ObjectWithArgs(0);
          v5 = &lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs;
          v6 = type metadata accessor for PgQuery_ObjectWithArgs;
          v7 = &protocol conformance descriptor for PgQuery_ObjectWithArgs;
LABEL_12:
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(v5, v6, (uint64_t)v7);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateTransformStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t TypeName;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t TransformStmt;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ObjectWithArgs;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v37 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v39 = (uint64_t)&v35 - v9;
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v38 = *(_QWORD *)(ObjectWithArgs - 8);
  v10 = MEMORY[0x1E0C80A78](ObjectWithArgs);
  v35 = (uint64_t)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v36 = (uint64_t)&v35 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v17 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v18) = *v3;
  v43 = a3;
  v42 = a2;
  if ((_DWORD)v18 == 1)
  {
    v20 = v41;
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v22 = v20;
    if (v20)
      return result;
  }
  else
  {
    v22 = v41;
  }
  TransformStmt = type metadata accessor for PgQuery_CreateTransformStmt(0);
  outlined init with copy of PgQuery_Alias?((uint64_t)&v3[*(int *)(TransformStmt + 28)], (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, TypeName) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_TypeName?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v15, (uint64_t)v19, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v19, type metadata accessor for PgQuery_TypeName);
    if (v22)
      return result;
  }
  v24 = *((_QWORD *)v3 + 2);
  v25 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000) == 0)
    v25 = *((_QWORD *)v3 + 1) & 0xFFFFFFFFFFFFLL;
  if (!v25 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v22))
  {
    v26 = TransformStmt;
    v27 = v39;
    outlined init with copy of PgQuery_Alias?((uint64_t)&v3[*(int *)(TransformStmt + 32)], v39, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
    if (v28(v27, 1, ObjectWithArgs) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v27, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      v29 = v26;
    }
    else
    {
      v30 = v27;
      v31 = v36;
      outlined init with take of PgQuery_OidList(v30, v36, type metadata accessor for PgQuery_ObjectWithArgs);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, type metadata accessor for PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      result = outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_ObjectWithArgs);
      v29 = v26;
      if (v22)
        return result;
    }
    v32 = v37;
    outlined init with copy of PgQuery_Alias?((uint64_t)&v3[*(int *)(v29 + 36)], v37, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    if (v28(v32, 1, ObjectWithArgs) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v32, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    }
    else
    {
      v33 = v32;
      v34 = v35;
      outlined init with take of PgQuery_OidList(v33, v35, type metadata accessor for PgQuery_ObjectWithArgs);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, type metadata accessor for PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      result = outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_ObjectWithArgs);
      if (v22)
        return result;
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateTransformStmt@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t TypeName;
  uint64_t v6;
  uint64_t ObjectWithArgs;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0xE000000000000000;
  UnknownStorage.init()();
  v4 = a2 + a1[7];
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 56))(v4, 1, 1, TypeName);
  v6 = a2 + a1[8];
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(ObjectWithArgs - 8) + 56);
  v9(v6, 1, 1, ObjectWithArgs);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9)(a2 + a1[9], 1, 1, ObjectWithArgs);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateTransformStmt()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateTransformStmt()
{
  return PgQuery_CreateTransformStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateTransformStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateTransformStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateTransformStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTransformStmt and conformance PgQuery_CreateTransformStmt, type metadata accessor for PgQuery_CreateTransformStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTransformStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateTransformStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateTransformStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateTransformStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTransformStmt and conformance PgQuery_CreateTransformStmt, type metadata accessor for PgQuery_CreateTransformStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTransformStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateTransformStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTransformStmt and conformance PgQuery_CreateTransformStmt, type metadata accessor for PgQuery_CreateTransformStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTransformStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateAmStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        break;
      }
LABEL_11:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    dispatch thunk of Decoder.decodeSingularStringField(value:)();
    goto LABEL_11;
  }
  return result;
}

uint64_t PgQuery_CreateAmStmt.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[2] + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      v5 = v0[4];
      v6 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0)
        v6 = v0[3] & 0xFFFFFFFFFFFFLL;
      if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for PgQuery_CreateAmStmt(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateAmStmt@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = v1;
  a1[3] = 0;
  a1[4] = 0xE000000000000000;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateAmStmt()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateAmStmt()
{
  return PgQuery_CreateAmStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateAmStmt()
{
  return PgQuery_CreateAmStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateAmStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateAmStmt and conformance PgQuery_CreateAmStmt, type metadata accessor for PgQuery_CreateAmStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateAmStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateAmStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateAmStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateAmStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateAmStmt and conformance PgQuery_CreateAmStmt, type metadata accessor for PgQuery_CreateAmStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateAmStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateAmStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateAmStmt and conformance PgQuery_CreateAmStmt, type metadata accessor for PgQuery_CreateAmStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateAmStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreatePublicationStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreatePublicationStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(v0 + 8);
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *(_QWORD *)v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v0 + 24) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (*(_BYTE *)(v0 + 32) != 1
          || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for PgQuery_CreatePublicationStmt(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreatePublicationStmt@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)(a1 + 24) = v1;
  *(_BYTE *)(a1 + 32) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreatePublicationStmt()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreatePublicationStmt()
{
  return PgQuery_CreatePublicationStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreatePublicationStmt()
{
  return PgQuery_CreatePublicationStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreatePublicationStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePublicationStmt and conformance PgQuery_CreatePublicationStmt, type metadata accessor for PgQuery_CreatePublicationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePublicationStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreatePublicationStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreatePublicationStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreatePublicationStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePublicationStmt and conformance PgQuery_CreatePublicationStmt, type metadata accessor for PgQuery_CreatePublicationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePublicationStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreatePublicationStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePublicationStmt and conformance PgQuery_CreatePublicationStmt, type metadata accessor for PgQuery_CreatePublicationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePublicationStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterPublicationStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 5:
          lazy protocol witness table accessor for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterPublicationStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(v0 + 8);
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *(_QWORD *)v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v0 + 24) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (*(_BYTE *)(v0 + 32) != 1
          || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          if (!*(_QWORD *)(v0 + 40)
            || (lazy protocol witness table accessor for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction(),
                result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                !v1))
          {
            type metadata accessor for PgQuery_AlterPublicationStmt(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterPublicationStmt@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 24) = v1;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterPublicationStmt()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterPublicationStmt()
{
  return PgQuery_AlterPublicationStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterPublicationStmt()
{
  return PgQuery_AlterPublicationStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterPublicationStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPublicationStmt and conformance PgQuery_AlterPublicationStmt, type metadata accessor for PgQuery_AlterPublicationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterPublicationStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterPublicationStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterPublicationStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterPublicationStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPublicationStmt and conformance PgQuery_AlterPublicationStmt, type metadata accessor for PgQuery_AlterPublicationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterPublicationStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterPublicationStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPublicationStmt and conformance PgQuery_AlterPublicationStmt, type metadata accessor for PgQuery_AlterPublicationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterPublicationStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateSubscriptionStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateEventTrigStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_CreateSubscriptionStmt);
}

uint64_t PgQuery_CreateEventTrigStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;

  v7 = v4[1];
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = *v4 & 0xFFFFFFFFFFFFLL;
  if (!v8 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    v10 = v4[3];
    v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0)
      v11 = v4[2] & 0xFFFFFFFFFFFFLL;
    if (!v11 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
    {
      if (!*(_QWORD *)(v4[4] + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
      {
        if (!*(_QWORD *)(v4[5] + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
        {
          a4(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateEventTrigStmt@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  v1 = MEMORY[0x1E0DEE9D8];
  a1[4] = MEMORY[0x1E0DEE9D8];
  a1[5] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateSubscriptionStmt()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateSubscriptionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSubscriptionStmt and conformance PgQuery_CreateSubscriptionStmt, type metadata accessor for PgQuery_CreateSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSubscriptionStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateSubscriptionStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateSubscriptionStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateSubscriptionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSubscriptionStmt and conformance PgQuery_CreateSubscriptionStmt, type metadata accessor for PgQuery_CreateSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSubscriptionStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateSubscriptionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSubscriptionStmt and conformance PgQuery_CreateSubscriptionStmt, type metadata accessor for PgQuery_CreateSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSubscriptionStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CreateSubscriptionStmt(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_CreateSubscriptionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CreateSubscriptionStmt) & 1;
}

uint64_t PgQuery_AlterSubscriptionStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_AlterSubscriptionType and conformance PgQuery_AlterSubscriptionType();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 4:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterSubscriptionStmt.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!*v0
    || (lazy protocol witness table accessor for type PgQuery_AlterSubscriptionType and conformance PgQuery_AlterSubscriptionType(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    v3 = v0[3];
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = v0[2] & 0xFFFFFFFFFFFFLL;
    if (!v4 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      v5 = v0[5];
      v6 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0)
        v6 = v0[4] & 0xFFFFFFFFFFFFLL;
      if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (!*(_QWORD *)(v0[6] + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          if (!*(_QWORD *)(v0[7] + 16)
            || (type metadata accessor for PgQuery_Node(0),
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for PgQuery_AlterSubscriptionStmt(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterSubscriptionStmt@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 48) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 56) = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterSubscriptionStmt()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterSubscriptionStmt()
{
  return PgQuery_AlterSubscriptionStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterSubscriptionStmt()
{
  return PgQuery_AlterSubscriptionStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterSubscriptionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSubscriptionStmt and conformance PgQuery_AlterSubscriptionStmt, type metadata accessor for PgQuery_AlterSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSubscriptionStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterSubscriptionStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterSubscriptionStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterSubscriptionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSubscriptionStmt and conformance PgQuery_AlterSubscriptionStmt, type metadata accessor for PgQuery_AlterSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSubscriptionStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterSubscriptionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSubscriptionStmt and conformance PgQuery_AlterSubscriptionStmt, type metadata accessor for PgQuery_AlterSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSubscriptionStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_DropSubscriptionStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
    v4 = v3;
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_DropSubscriptionStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(v0 + 8);
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *(_QWORD *)v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (*(_BYTE *)(v0 + 16) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0 + 24)
        || (lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior(),
            result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        type metadata accessor for PgQuery_DropSubscriptionStmt(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DropSubscriptionStmt@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DropSubscriptionStmt()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DropSubscriptionStmt()
{
  return PgQuery_DropSubscriptionStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DropSubscriptionStmt()
{
  return PgQuery_DropSubscriptionStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DropSubscriptionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropSubscriptionStmt and conformance PgQuery_DropSubscriptionStmt, type metadata accessor for PgQuery_DropSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropSubscriptionStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DropSubscriptionStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DropSubscriptionStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DropSubscriptionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropSubscriptionStmt and conformance PgQuery_DropSubscriptionStmt, type metadata accessor for PgQuery_DropSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropSubscriptionStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DropSubscriptionStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropSubscriptionStmt and conformance PgQuery_DropSubscriptionStmt, type metadata accessor for PgQuery_DropSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropSubscriptionStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_CreateStatsStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 6:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateStatsStmt.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (!*(_QWORD *)(*(_QWORD *)(v0 + 24) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          v3 = *(_QWORD *)(v0 + 40);
          v4 = HIBYTE(v3) & 0xF;
          if ((v3 & 0x2000000000000000) == 0)
            v4 = *(_QWORD *)(v0 + 32) & 0xFFFFFFFFFFFFLL;
          if (!v4 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
          {
            if (*(_BYTE *)(v0 + 48) != 1
              || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
            {
              type metadata accessor for PgQuery_CreateStatsStmt(0);
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateStatsStmt@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 8) = v1;
  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)(a1 + 24) = v1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_BYTE *)(a1 + 48) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateStatsStmt()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PgQuery_RangeVar@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PgQuery_RangeVar(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateStatsStmt()
{
  return PgQuery_CreateStatsStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateStatsStmt()
{
  return PgQuery_CreateStatsStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateStatsStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStatsStmt and conformance PgQuery_CreateStatsStmt, type metadata accessor for PgQuery_CreateStatsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStatsStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateStatsStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateStatsStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateStatsStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStatsStmt and conformance PgQuery_CreateStatsStmt, type metadata accessor for PgQuery_CreateStatsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStatsStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateStatsStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStatsStmt and conformance PgQuery_CreateStatsStmt, type metadata accessor for PgQuery_CreateStatsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStatsStmt);
  return Message.hash(into:)();
}

uint64_t PgQuery_AlterCollationStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_List.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_AlterCollationStmt);
}

uint64_t PgQuery_List.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v4 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
  {
    a4(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterCollationStmt()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterCollationStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterCollationStmt and conformance PgQuery_AlterCollationStmt, type metadata accessor for PgQuery_AlterCollationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterCollationStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterCollationStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterCollationStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterCollationStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterCollationStmt and conformance PgQuery_AlterCollationStmt, type metadata accessor for PgQuery_AlterCollationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterCollationStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterCollationStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterCollationStmt and conformance PgQuery_AlterCollationStmt, type metadata accessor for PgQuery_AlterCollationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterCollationStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlterCollationStmt(uint64_t *a1, uint64_t *a2)
{
  return specialized static PgQuery_AlterCollationStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AlterCollationStmt) & 1;
}

uint64_t PgQuery_CallStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccall, &demangling cache variable for type metadata for PgQuery_FuncCall?, &OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
}

uint64_t ObjC metadata update function for PgQuery_CallStmt._StorageClass()
{
  return type metadata accessor for PgQuery_CallStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CallStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CallStmt._StorageClass);
}

void type metadata completion function for PgQuery_CallStmt._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_FuncCall?, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncCall);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_FuncExpr?, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncExpr);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for PgQuery_FuncCall(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FuncCall);
}

uint64_t type metadata accessor for PgQuery_FuncExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FuncExpr);
}

uint64_t PgQuery_CallStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t FuncExpr;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;

  v1 = *(int *)(type metadata accessor for PgQuery_CallStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + v1);
    type metadata accessor for PgQuery_CallStmt._StorageClass(0);
    v3 = swift_allocObject();
    v4 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccall;
    v5 = type metadata accessor for PgQuery_FuncCall(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
    v6 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr;
    FuncExpr = type metadata accessor for PgQuery_FuncExpr(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(FuncExpr - 8) + 56))(v6, 1, 1, FuncExpr);
    v8 = v2
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccall;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v8, v4, &demangling cache variable for type metadata for PgQuery_FuncCall?);
    v9 = v2
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr;
    outlined destroy of (key: String, value: StorableValue)(v6, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
    outlined init with copy of PgQuery_Alias?(v9, v6, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
    swift_release();
    *(_QWORD *)(v0 + v1) = v3;
    swift_release();
  }
  swift_retain();
  v10 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v13)
  {
    while (1)
    {
      if ((v11 & 1) != 0)
        return swift_release();
      if (v10 == 1)
        break;
      if (v10 == 2)
      {
        type metadata accessor for PgQuery_FuncExpr(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, type metadata accessor for PgQuery_FuncExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FuncExpr);
        goto LABEL_7;
      }
LABEL_8:
      v10 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_FuncCall(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, type metadata accessor for PgQuery_FuncCall, (uint64_t)&protocol conformance descriptor for PgQuery_FuncCall);
LABEL_7:
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t PgQuery_CallStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t FuncExpr;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a3;
  v25 = a1;
  v26 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FuncExpr?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  FuncExpr = type metadata accessor for PgQuery_FuncExpr(0);
  v23 = *(_QWORD *)(FuncExpr - 8);
  v24 = FuncExpr;
  MEMORY[0x1E0C80A78](FuncExpr);
  v21 = (uint64_t)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FuncCall?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PgQuery_FuncCall(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(int *)(type metadata accessor for PgQuery_CallStmt(0) + 20);
  v22 = v3;
  v18 = *(_QWORD *)(v3 + v17);
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccall, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_FuncCall?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_FuncCall?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v16, type metadata accessor for PgQuery_FuncCall);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, type metadata accessor for PgQuery_FuncCall, (uint64_t)&protocol conformance descriptor for PgQuery_FuncCall);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_FuncCall);
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v7, 1, v24) != 1)
  {
    v19 = v21;
    outlined init with take of PgQuery_OidList((uint64_t)v7, v21, type metadata accessor for PgQuery_FuncExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, type metadata accessor for PgQuery_FuncExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FuncExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v19, type metadata accessor for PgQuery_FuncExpr);
    if (!v4)
      goto LABEL_8;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
LABEL_8:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_CallStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t FuncExpr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  FuncExpr = type metadata accessor for PgQuery_FuncExpr(0);
  v37 = *(_QWORD *)(FuncExpr - 8);
  v38 = FuncExpr;
  MEMORY[0x1E0C80A78](FuncExpr);
  v34 = (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FuncExpr?);
  MEMORY[0x1E0C80A78](v6);
  v35 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_FuncExpr?, PgQuery_FuncExpr?));
  MEMORY[0x1E0C80A78](v36);
  v39 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PgQuery_FuncCall(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FuncCall?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_FuncCall?, PgQuery_FuncCall?));
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccall;
  v21 = (uint64_t)&v19[*(int *)(v17 + 48)];
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccall, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_FuncCall?);
  outlined init with copy of PgQuery_Alias?(v20, v21, &demangling cache variable for type metadata for PgQuery_FuncCall?);
  v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v22((uint64_t)v19, 1, v9) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v19, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_FuncCall?);
    if (v22(v21, 1, v9) != 1)
    {
      outlined init with take of PgQuery_OidList(v21, (uint64_t)v12, type metadata accessor for PgQuery_FuncCall);
      swift_retain();
      swift_retain();
      v24 = specialized static PgQuery_FuncCall.== infix(_:_:)((uint64_t)v15, (uint64_t)v12);
      outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_FuncCall);
      outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_FuncCall);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_FuncCall?);
      if ((v24 & 1) != 0)
        goto LABEL_9;
LABEL_7:
      swift_release();
      swift_release();
      return 0;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_FuncCall);
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for (PgQuery_FuncCall?, PgQuery_FuncCall?));
    goto LABEL_7;
  }
  v23 = v22(v21, 1, v9);
  swift_retain();
  swift_retain();
  if (v23 != 1)
    goto LABEL_6;
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_FuncCall?);
LABEL_9:
  v25 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr;
  v26 = v39;
  v27 = v39 + *(int *)(v36 + 48);
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr, v39, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
  outlined init with copy of PgQuery_Alias?(v25, v27, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
  v28 = v38;
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  if (v29(v26, 1, v38) == 1)
  {
    swift_release();
    swift_release();
    if (v29(v27, 1, v28) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v26, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
      return 1;
    }
    goto LABEL_14;
  }
  v30 = v35;
  outlined init with copy of PgQuery_Alias?(v26, v35, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
  if (v29(v27, 1, v28) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_FuncExpr);
LABEL_14:
    outlined destroy of (key: String, value: StorableValue)(v26, &demangling cache variable for type metadata for (PgQuery_FuncExpr?, PgQuery_FuncExpr?));
    return 0;
  }
  v32 = v34;
  outlined init with take of PgQuery_OidList(v27, v34, type metadata accessor for PgQuery_FuncExpr);
  v33 = specialized static PgQuery_FuncExpr.== infix(_:_:)(v30, v32);
  swift_release();
  swift_release();
  outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_FuncExpr);
  outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_FuncExpr);
  outlined destroy of (key: String, value: StorableValue)(v26, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
  return (v33 & 1) != 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CallStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CallStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CallStmt()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CallStmt()
{
  return PgQuery_CallStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CallStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CallStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CallStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallStmt and conformance PgQuery_CallStmt, type metadata accessor for PgQuery_CallStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CallStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CallStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CallStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CallStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallStmt and conformance PgQuery_CallStmt, type metadata accessor for PgQuery_CallStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CallStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CallStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallStmt and conformance PgQuery_CallStmt, type metadata accessor for PgQuery_CallStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CallStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CallStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CallStmt, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_CallStmt.== infix(_:_:)) & 1;
}

uint64_t PgQuery_AlterStatsStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_LockStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_AlterStatsStmt);
}

uint64_t PgQuery_LockStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v4 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
  {
    if (!*(_DWORD *)(v4 + 8) || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v5))
    {
      if (*(_BYTE *)(v4 + 12) != 1
        || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v5))
      {
        a4(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_LockStmt@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterStatsStmt()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterStatsStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterStatsStmt and conformance PgQuery_AlterStatsStmt, type metadata accessor for PgQuery_AlterStatsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterStatsStmt);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterStatsStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterStatsStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterStatsStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterStatsStmt and conformance PgQuery_AlterStatsStmt, type metadata accessor for PgQuery_AlterStatsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterStatsStmt);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterStatsStmt()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterStatsStmt and conformance PgQuery_AlterStatsStmt, type metadata accessor for PgQuery_AlterStatsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterStatsStmt);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlterStatsStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_AlterStatsStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AlterStatsStmt) & 1;
}

uint64_t PgQuery_A_Expr._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_A_Expr._StorageClass()
{
  return type metadata accessor for PgQuery_A_Expr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_A_Expr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_Expr._StorageClass);
}

void type metadata completion function for PgQuery_A_Expr._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_A_Expr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_A_Expr(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_A_Expr._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_A_Expr._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_7;
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_A_Expr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Node;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v32 = (uint64_t)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v28 - v10;
  Node = type metadata accessor for PgQuery_Node(0);
  v13 = *(_QWORD *)(Node - 8);
  v14 = MEMORY[0x1E0C80A78](Node);
  v30 = (uint64_t)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v31 = (uint64_t)&v28 - v16;
  v17 = *(int *)(type metadata accessor for PgQuery_A_Expr(0) + 20);
  v29 = v3;
  v18 = *(_QWORD *)(v3 + v17);
  v19 = *(_QWORD *)(v18 + 16);
  v36 = a2;
  if (v19)
  {
    v20 = *(_BYTE *)(v18 + 24);
    v34 = v19;
    v35 = v20;
    lazy protocol witness table accessor for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    v21 = Node;
    if (v4)
      return swift_release();
  }
  else
  {
    swift_retain();
    v21 = Node;
  }
  v33 = a3;
  if (*(_QWORD *)(*(_QWORD *)(v18 + 32) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v18 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lexpr, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v22(v11, 1, v21) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v23 = v31;
    outlined init with take of PgQuery_OidList((uint64_t)v11, v31, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  v24 = v32;
  outlined init with copy of PgQuery_Alias?(v18 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rexpr, v32, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v22((char *)v24, 1, v21) != 1)
  {
    v25 = v24;
    v26 = v30;
    outlined init with take of PgQuery_OidList(v25, v30, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v26, type metadata accessor for PgQuery_Node);
    if (!v4)
      goto LABEL_13;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)(v24, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_13:
  if (*(_DWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_A_Expr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, one-time initialization token for defaultInstance, &static PgQuery_A_Expr._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_A_Expr()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_A_Expr()
{
  return PgQuery_A_Expr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_A_Expr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_A_Expr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_A_Expr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Expr and conformance PgQuery_A_Expr, type metadata accessor for PgQuery_A_Expr, (uint64_t)&protocol conformance descriptor for PgQuery_A_Expr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_A_Expr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_A_Expr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_A_Expr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Expr and conformance PgQuery_A_Expr, type metadata accessor for PgQuery_A_Expr, (uint64_t)&protocol conformance descriptor for PgQuery_A_Expr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_A_Expr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Expr and conformance PgQuery_A_Expr, type metadata accessor for PgQuery_A_Expr, (uint64_t)&protocol conformance descriptor for PgQuery_A_Expr);
  return Message.hash(into:)();
}

uint64_t PgQuery_ColumnRef.decodeMessage<A>(decoder:)()
{
  return PgQuery_ColumnRef.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ColumnRef.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ColumnRef.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_ColumnRef);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ColumnRef@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(a1 + 8) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ColumnRef()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ColumnRef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnRef and conformance PgQuery_ColumnRef, type metadata accessor for PgQuery_ColumnRef, (uint64_t)&protocol conformance descriptor for PgQuery_ColumnRef);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ColumnRef@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ColumnRef._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ColumnRef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnRef and conformance PgQuery_ColumnRef, type metadata accessor for PgQuery_ColumnRef, (uint64_t)&protocol conformance descriptor for PgQuery_ColumnRef);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ColumnRef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnRef and conformance PgQuery_ColumnRef, type metadata accessor for PgQuery_ColumnRef, (uint64_t)&protocol conformance descriptor for PgQuery_ColumnRef);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ColumnRef(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_A_ArrayExpr.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_ColumnRef) & 1;
}

uint64_t PgQuery_ParamRef.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ParamRef.traverse<A>(visitor:)()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for PgQuery_ParamRef(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ParamRef@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ParamRef()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_ParamRef()
{
  return PgQuery_ParamRef.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ParamRef()
{
  return PgQuery_ParamRef.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ParamRef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParamRef and conformance PgQuery_ParamRef, type metadata accessor for PgQuery_ParamRef, (uint64_t)&protocol conformance descriptor for PgQuery_ParamRef);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ParamRef@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ParamRef._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ParamRef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParamRef and conformance PgQuery_ParamRef, type metadata accessor for PgQuery_ParamRef, (uint64_t)&protocol conformance descriptor for PgQuery_ParamRef);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ParamRef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParamRef and conformance PgQuery_ParamRef, type metadata accessor for PgQuery_ParamRef, (uint64_t)&protocol conformance descriptor for PgQuery_ParamRef);
  return Message.hash(into:)();
}

uint64_t PgQuery_A_Const._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_A_Const._StorageClass()
{
  return type metadata accessor for PgQuery_A_Const._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_A_Const._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_Const._StorageClass);
}

void type metadata completion function for PgQuery_A_Const._StorageClass()
{
  type metadata completion function for PgQuery_AlternativeSubPlan._StorageClass();
}

uint64_t PgQuery_A_Const.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Node;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for PgQuery_A_Const(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v4 = *(_QWORD *)(v0 + v3);
    type metadata accessor for PgQuery_A_Const._StorageClass(0);
    v5 = swift_allocObject();
    v6 = v5 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val;
    Node = type metadata accessor for PgQuery_Node(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v6, 1, 1, Node);
    v13 = v1;
    v8 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
    *(_DWORD *)(v5
              + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
    v9 = v4 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v9, v6, &demangling cache variable for type metadata for PgQuery_Node?);
    LODWORD(v6) = *(_DWORD *)(v4
                            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    *(_DWORD *)(v5 + v8) = v6;
    v2 = v13;
    *(_QWORD *)(v0 + v3) = v5;
    swift_release();
  }
  swift_retain();
  v10 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v2)
  {
    while ((v11 & 1) == 0)
    {
      if (v10 == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (v10 == 2)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      v10 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_A_Const.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t Node;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v14[3] = a2;
  v14[1] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v8 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(int *)(type metadata accessor for PgQuery_A_Const(0) + 20);
  v14[0] = v2;
  v12 = *(_QWORD *)(v2 + v11);
  outlined init with copy of PgQuery_Alias?(v12 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val, (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v6, (uint64_t)v10, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
    if (v3)
      return swift_release();
  }
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v3)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_A_Const.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  char v19;
  int v20;
  int v21;
  uint64_t v23;

  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a2 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val;
  v16 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v15, v16, &demangling cache variable for type metadata for PgQuery_Node?);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v17((uint64_t)v14, 1, Node) == 1)
  {
    v18 = v17(v16, 1, Node);
    swift_retain();
    swift_retain();
    if (v18 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_8:
      v20 = *(_DWORD *)(a1
                      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      v21 = *(_DWORD *)(a2
                      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      return v20 == v21;
    }
    goto LABEL_6;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v17(v16, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_9;
  }
  outlined init with take of PgQuery_OidList(v16, (uint64_t)v7, type metadata accessor for PgQuery_Node);
  swift_retain();
  swift_retain();
  v19 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v10, (uint64_t)v7, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_9:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_A_Const@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_A_Const._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_A_Const()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_A_Const()
{
  return PgQuery_A_Const.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_A_Const(uint64_t a1, uint64_t a2)
{
  return PgQuery_A_Const.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_A_Const()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Const and conformance PgQuery_A_Const, type metadata accessor for PgQuery_A_Const, (uint64_t)&protocol conformance descriptor for PgQuery_A_Const);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_A_Const@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_A_Const._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_A_Const()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Const and conformance PgQuery_A_Const, type metadata accessor for PgQuery_A_Const, (uint64_t)&protocol conformance descriptor for PgQuery_A_Const);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_A_Const()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Const and conformance PgQuery_A_Const, type metadata accessor for PgQuery_A_Const, (uint64_t)&protocol conformance descriptor for PgQuery_A_Const);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_A_Const(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_A_Const, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_A_Const.== infix(_:_:)) & 1;
}

uint64_t PgQuery_FuncCall._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggFilter, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__over, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_FuncCall._StorageClass()
{
  return type metadata accessor for PgQuery_FuncCall._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_FuncCall._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FuncCall._StorageClass);
}

void type metadata completion function for PgQuery_FuncCall._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_WindowDef?, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowDef);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for PgQuery_WindowDef(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_WindowDef);
}

uint64_t PgQuery_FuncCall.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_FuncCall, (void (*)(_QWORD))type metadata accessor for PgQuery_FuncCall._StorageClass, (uint64_t (*)(uint64_t))specialized PgQuery_FuncCall._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_FuncCall.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_FuncCall.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          goto LABEL_9;
        case 5:
        case 6:
        case 7:
        case 8:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 9:
          type metadata accessor for PgQuery_WindowDef(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, type metadata accessor for PgQuery_WindowDef, (uint64_t)&protocol conformance descriptor for PgQuery_WindowDef);
LABEL_9:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 10:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_FuncCall.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Node;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t WindowDef;
  uint64_t v27;
  uint64_t v28;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WindowDef?);
  MEMORY[0x1E0C80A78](v6);
  v25 = (uint64_t)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  WindowDef = type metadata accessor for PgQuery_WindowDef(0);
  v24 = *(_QWORD *)(WindowDef - 8);
  MEMORY[0x1E0C80A78](WindowDef);
  v23 = (uint64_t)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v13 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v27 = (uint64_t)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(int *)(type metadata accessor for PgQuery_FuncCall(0) + 20);
  v22 = v3;
  v16 = *(_QWORD **)(v3 + v15);
  if (*(_QWORD *)(v16[2] + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v4)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      return swift_release();
    }
    v28 = a3;
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = a3;
    swift_retain();
  }
  if (*(_QWORD *)(v16[3] + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v4)
      goto LABEL_7;
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v16[4] + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v16+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggFilter, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v18 = v27;
    outlined init with take of PgQuery_OidList((uint64_t)v11, v27, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v18, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*((_BYTE *)v16
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggWithinGroup) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*((_BYTE *)v16
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggStar) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*((_BYTE *)v16
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggDistinct) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*((_BYTE *)v16
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcVariadic) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  v19 = v25;
  outlined init with copy of PgQuery_Alias?((uint64_t)v16+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__over, v25, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v19, 1, WindowDef) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v19, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  }
  else
  {
    v20 = v19;
    v21 = v23;
    outlined init with take of PgQuery_OidList(v20, v23, type metadata accessor for PgQuery_WindowDef);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, type metadata accessor for PgQuery_WindowDef, (uint64_t)&protocol conformance descriptor for PgQuery_WindowDef);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_WindowDef);
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)((char *)v16
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_FuncCall@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_FuncCall._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_FuncCall()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_FuncCall(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_FuncCall.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_FuncCall()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, type metadata accessor for PgQuery_FuncCall, (uint64_t)&protocol conformance descriptor for PgQuery_FuncCall);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_FuncCall@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_FuncCall._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_FuncCall()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, type metadata accessor for PgQuery_FuncCall, (uint64_t)&protocol conformance descriptor for PgQuery_FuncCall);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_FuncCall()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, type metadata accessor for PgQuery_FuncCall, (uint64_t)&protocol conformance descriptor for PgQuery_FuncCall);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_A_Star()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_A_Star()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Star and conformance PgQuery_A_Star, type metadata accessor for PgQuery_A_Star, (uint64_t)&protocol conformance descriptor for PgQuery_A_Star);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_A_Star@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_A_Star._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_A_Star()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Star and conformance PgQuery_A_Star, type metadata accessor for PgQuery_A_Star, (uint64_t)&protocol conformance descriptor for PgQuery_A_Star);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_A_Star()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Star and conformance PgQuery_A_Star, type metadata accessor for PgQuery_A_Star, (uint64_t)&protocol conformance descriptor for PgQuery_A_Star);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_Null(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v4 = type metadata accessor for UnknownStorage();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v15 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12((char *)&v15 - v10, a1, v4);
  v12(v9, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, v5, MEMORY[0x1E0D3E9A8]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v9, v4);
  v13(v11, v4);
  return a2 & 1;
}

uint64_t PgQuery_A_Indices._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lidx, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__uidx, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_A_Indices._StorageClass()
{
  return type metadata accessor for PgQuery_A_Indices._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_A_Indices._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_Indices._StorageClass);
}

void type metadata completion function for PgQuery_A_Indices._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_A_Indices.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  specialized PgQuery_A_Indices._uniqueStorage()();
  type metadata accessor for PgQuery_A_Indices(0);
  swift_retain();
  v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 1)
      {
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      else if (v1 == 2 || v1 == 3)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_A_Indices.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Node;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v28 = (uint64_t)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - v8;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v26 = (uint64_t)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v26 - v14;
  v16 = *(int *)(type metadata accessor for PgQuery_A_Indices(0) + 20);
  v27 = v3;
  v17 = *(_QWORD *)(v3 + v16);
  v18 = *(unsigned __int8 *)(v17 + 16);
  swift_retain();
  v29 = a3;
  if (v18 == 1)
  {
    v19 = v30;
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v20 = v19;
    if (v19)
      return swift_release();
  }
  else
  {
    v20 = v30;
  }
  outlined init with copy of PgQuery_Alias?(v17 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lidx, (uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Node?);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v21(v9, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v15, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
    if (v20)
      return swift_release();
  }
  v22 = v28;
  outlined init with copy of PgQuery_Alias?(v17 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__uidx, v28, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v21((char *)v22, 1, Node) != 1)
  {
    v23 = v22;
    v24 = v26;
    outlined init with take of PgQuery_OidList(v23, v26, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v24, type metadata accessor for PgQuery_Node);
    if (!v20)
      goto LABEL_12;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)(v22, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_12:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_A_Indices.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;

  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v32 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v15 = MEMORY[0x1E0C80A78](v14);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v32 - v16;
  if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
    return 0;
  v33 = v11;
  v34 = v7;
  v35 = v17;
  v19 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lidx;
  v20 = (uint64_t)&v18[*(int *)(v14 + 48)];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lidx, (uint64_t)&v32 - v16, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v19, v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v18, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v18, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v21(v20, 1, Node) != 1)
    {
      v23 = (uint64_t)v34;
      outlined init with take of PgQuery_OidList(v20, (uint64_t)v34, type metadata accessor for PgQuery_Node);
      swift_retain();
      swift_retain();
      v24 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v13, v23, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_Node);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v24 & 1) != 0)
        goto LABEL_10;
LABEL_8:
      swift_release();
      swift_release();
      return 0;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_Node);
LABEL_7:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_8;
  }
  v22 = v21(v20, 1, Node);
  swift_retain();
  swift_retain();
  if (v22 != 1)
    goto LABEL_7;
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_10:
  v25 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__uidx;
  v26 = v35;
  v27 = v35 + *(int *)(v14 + 48);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__uidx, v35, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v25, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v21(v26, 1, Node) == 1)
  {
    swift_release();
    swift_release();
    if (v21(v27, 1, Node) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v26, &demangling cache variable for type metadata for PgQuery_Node?);
      return 1;
    }
    goto LABEL_15;
  }
  v28 = (uint64_t)v33;
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v33, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v21(v27, 1, Node) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of PgQuery_Alias(v28, type metadata accessor for PgQuery_Node);
LABEL_15:
    outlined destroy of (key: String, value: StorableValue)(v26, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    return 0;
  }
  v30 = (uint64_t)v34;
  outlined init with take of PgQuery_OidList(v27, (uint64_t)v34, type metadata accessor for PgQuery_Node);
  v31 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v28, v30, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  swift_release();
  swift_release();
  outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v28, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v26, &demangling cache variable for type metadata for PgQuery_Node?);
  return (v31 & 1) != 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_A_Indices@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_A_Indices._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_A_Indices()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_A_Indices()
{
  return PgQuery_A_Indices.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_A_Indices(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_A_Indices.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_A_Indices()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indices and conformance PgQuery_A_Indices, type metadata accessor for PgQuery_A_Indices, (uint64_t)&protocol conformance descriptor for PgQuery_A_Indices);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_A_Indices@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_A_Indices._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_A_Indices()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indices and conformance PgQuery_A_Indices, type metadata accessor for PgQuery_A_Indices, (uint64_t)&protocol conformance descriptor for PgQuery_A_Indices);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_A_Indices()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indices and conformance PgQuery_A_Indices, type metadata accessor for PgQuery_A_Indices, (uint64_t)&protocol conformance descriptor for PgQuery_A_Indices);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_A_Indices(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_A_Indices, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_A_Indices.== infix(_:_:)) & 1;
}

uint64_t PgQuery_A_Indirection._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg);
}

uint64_t ObjC metadata update function for PgQuery_A_Indirection._StorageClass()
{
  return type metadata accessor for PgQuery_A_Indirection._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_A_Indirection._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_Indirection._StorageClass);
}

uint64_t PgQuery_A_Indirection.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlternativeSubPlan.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_A_Indirection, (void (*)(_QWORD))type metadata accessor for PgQuery_A_Indirection._StorageClass, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t *)&OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indirection);
}

uint64_t PgQuery_AlternativeSubPlan.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(_QWORD), _QWORD *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v9;
  char v10;

  specialized PgQuery_AlternativeSubPlan._uniqueStorage()(a4, a5, a6, a7);
  a4(0);
  swift_retain();
  v9 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v7)
  {
    while ((v10 & 1) == 0)
    {
      if (v9 == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (v9 == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      v9 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_A_Indirection.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlternativeSubPlan.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for PgQuery_A_Indirection, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indirection);
}

uint64_t PgQuery_AlternativeSubPlan.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), _QWORD *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Node;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v22 = a6;
  v23 = a1;
  v10 = v6;
  v25 = a3;
  v24 = a2;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v15 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(int *)(a4(0) + 20);
  v21 = v10;
  v19 = *(_QWORD *)(v10 + v18);
  outlined init with copy of PgQuery_Alias?(v19 + *a5, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v13, (uint64_t)v17, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node);
    if (v7)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v19 + *v22) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v7)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_A_Indirection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_A_Indirection._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_A_Indirection()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_A_Indirection()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indirection and conformance PgQuery_A_Indirection, type metadata accessor for PgQuery_A_Indirection, (uint64_t)&protocol conformance descriptor for PgQuery_A_Indirection);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_A_Indirection@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_A_Indirection._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_A_Indirection()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indirection and conformance PgQuery_A_Indirection, type metadata accessor for PgQuery_A_Indirection, (uint64_t)&protocol conformance descriptor for PgQuery_A_Indirection);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_A_Indirection()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indirection and conformance PgQuery_A_Indirection, type metadata accessor for PgQuery_A_Indirection, (uint64_t)&protocol conformance descriptor for PgQuery_A_Indirection);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_A_Indirection(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_AlternativeSubPlan.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_A_Indirection, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indirection) & 1;
}

uint64_t PgQuery_A_ArrayExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ColumnRef.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_A_ArrayExpr);
}

uint64_t PgQuery_ColumnRef.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v4 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
  {
    if (!v4[2] || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v5))
    {
      a4(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_A_ArrayExpr()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_A_ArrayExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_ArrayExpr and conformance PgQuery_A_ArrayExpr, type metadata accessor for PgQuery_A_ArrayExpr, (uint64_t)&protocol conformance descriptor for PgQuery_A_ArrayExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_A_ArrayExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_A_ArrayExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_A_ArrayExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_ArrayExpr and conformance PgQuery_A_ArrayExpr, type metadata accessor for PgQuery_A_ArrayExpr, (uint64_t)&protocol conformance descriptor for PgQuery_A_ArrayExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_A_ArrayExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_ArrayExpr and conformance PgQuery_A_ArrayExpr, type metadata accessor for PgQuery_A_ArrayExpr, (uint64_t)&protocol conformance descriptor for PgQuery_A_ArrayExpr);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_A_ArrayExpr(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_A_ArrayExpr.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_A_ArrayExpr) & 1;
}

uint64_t PgQuery_ResTarget._StorageClass.__deallocating_deinit()
{
  return PgQuery_PrepareStmt._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ResTargetP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val);
}

uint64_t PgQuery_PrepareStmt._StorageClass.__deallocating_deinit(_QWORD *a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v1 + *a1, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_ResTarget._StorageClass()
{
  return type metadata accessor for PgQuery_ResTarget._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_ResTarget._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ResTarget._StorageClass);
}

void type metadata completion function for PgQuery_ResTarget._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_ResTarget.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_ResTarget(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_ResTarget._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    v6 = specialized PgQuery_ResTarget._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_7;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_7;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 4:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_ResTarget.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v15 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v14 = (uint64_t)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(int *)(type metadata accessor for PgQuery_ResTarget(0) + 20);
  v13 = v0;
  v8 = *(_QWORD **)(v0 + v7);
  v9 = v8[3];
  if ((v9 & 0x2000000000000000) != 0)
    v10 = HIBYTE(v9) & 0xF;
  else
    v10 = v8[2] & 0xFFFFFFFFFFFFLL;
  swift_retain();
  if (v10)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  if (*(_QWORD *)(v8[4] + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v8+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ResTargetP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v4, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v11 = v14;
    outlined init with take of PgQuery_OidList((uint64_t)v4, v14, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v11, type metadata accessor for PgQuery_Node);
    if (v1)
      return swift_release();
  }
  if (*(_DWORD *)((char *)v8
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ResTargetP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ResTarget@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_ResTarget._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ResTarget()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_ResTarget()
{
  return PgQuery_ResTarget.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ResTarget()
{
  return PgQuery_ResTarget.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ResTarget()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ResTarget and conformance PgQuery_ResTarget, type metadata accessor for PgQuery_ResTarget, (uint64_t)&protocol conformance descriptor for PgQuery_ResTarget);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ResTarget@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ResTarget._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ResTarget()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ResTarget and conformance PgQuery_ResTarget, type metadata accessor for PgQuery_ResTarget, (uint64_t)&protocol conformance descriptor for PgQuery_ResTarget);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ResTarget()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ResTarget and conformance PgQuery_ResTarget, type metadata accessor for PgQuery_ResTarget, (uint64_t)&protocol conformance descriptor for PgQuery_ResTarget);
  return Message.hash(into:)();
}

uint64_t PgQuery_MultiAssignRef._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__source, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_MultiAssignRef._StorageClass()
{
  return type metadata accessor for PgQuery_MultiAssignRef._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_MultiAssignRef._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_MultiAssignRef._StorageClass);
}

uint64_t PgQuery_MultiAssignRef.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  specialized PgQuery_MultiAssignRef._uniqueStorage()();
  type metadata accessor for PgQuery_MultiAssignRef(0);
  swift_retain();
  v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (v1 == 2 || v1 == 3)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_MultiAssignRef.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_MultiAssignRef.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for PgQuery_MultiAssignRef, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__source, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colno, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ncolumns);
}

BOOL closure #1 in static PgQuery_MultiAssignRef.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static PgQuery_NextValueExpr.== infix(_:_:)(a1, a2, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__source, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colno, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ncolumns);
}

BOOL closure #1 in static PgQuery_NextValueExpr.== infix(_:_:)(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  unsigned int v23;
  char v24;
  _QWORD *v25;
  int v26;
  int v27;
  _QWORD *v29;
  _QWORD *v30;

  v29 = a5;
  v30 = a4;
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1 + *a3;
  v20 = a2 + *a3;
  v21 = (uint64_t)&v18[*(int *)(v16 + 48)];
  outlined init with copy of PgQuery_Alias?(v19, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v20, v21, &demangling cache variable for type metadata for PgQuery_Node?);
  v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v22((uint64_t)v18, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v18, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v22(v21, 1, Node) != 1)
    {
      outlined init with take of PgQuery_OidList(v21, (uint64_t)v11, type metadata accessor for PgQuery_Node);
      swift_retain();
      swift_retain();
      v24 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v14, (uint64_t)v11, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v14, type metadata accessor for PgQuery_Node);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v24 & 1) == 0)
        goto LABEL_10;
      goto LABEL_8;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v14, type metadata accessor for PgQuery_Node);
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_10;
  }
  v23 = v22(v21, 1, Node);
  swift_retain();
  swift_retain();
  if (v23 != 1)
    goto LABEL_6;
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_8:
  if (*(_DWORD *)(a1 + *v30) == *(_DWORD *)(a2 + *v30))
  {
    v25 = v29;
    v26 = *(_DWORD *)(a1 + *v29);
    swift_release();
    v27 = *(_DWORD *)(a2 + *v25);
    swift_release();
    return v26 == v27;
  }
LABEL_10:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_MultiAssignRef@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_MultiAssignRef._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_MultiAssignRef()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_MultiAssignRef()
{
  return PgQuery_MultiAssignRef.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_MultiAssignRef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MultiAssignRef and conformance PgQuery_MultiAssignRef, type metadata accessor for PgQuery_MultiAssignRef, (uint64_t)&protocol conformance descriptor for PgQuery_MultiAssignRef);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_MultiAssignRef@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_MultiAssignRef._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_MultiAssignRef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MultiAssignRef and conformance PgQuery_MultiAssignRef, type metadata accessor for PgQuery_MultiAssignRef, (uint64_t)&protocol conformance descriptor for PgQuery_MultiAssignRef);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_MultiAssignRef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MultiAssignRef and conformance PgQuery_MultiAssignRef, type metadata accessor for PgQuery_MultiAssignRef, (uint64_t)&protocol conformance descriptor for PgQuery_MultiAssignRef);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_MultiAssignRef(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_MultiAssignRef, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_MultiAssignRef.== infix(_:_:)) & 1;
}

uint64_t PgQuery_TypeCast._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, &demangling cache variable for type metadata for PgQuery_TypeName?);
}

uint64_t ObjC metadata update function for PgQuery_TypeCast._StorageClass()
{
  return type metadata accessor for PgQuery_TypeCast._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_TypeCast._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TypeCast._StorageClass);
}

void type metadata completion function for PgQuery_TypeCast._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_TypeCast.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  specialized PgQuery_TypeCast._uniqueStorage()();
  type metadata accessor for PgQuery_TypeCast(0);
  swift_retain();
  v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return swift_release();
      if (v1 == 1)
        break;
      if (v1 == 2)
      {
        type metadata accessor for PgQuery_TypeName(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
        goto LABEL_5;
      }
      if (v1 == 3)
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_11:
      v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
LABEL_5:
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_11;
  }
  return swift_release();
}

uint64_t PgQuery_TypeCast.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t TypeName;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t Node;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a3;
  v25 = a1;
  v26 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v23 = *(_QWORD *)(TypeName - 8);
  v24 = TypeName;
  MEMORY[0x1E0C80A78](TypeName);
  v22 = (uint64_t)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v14 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(int *)(type metadata accessor for PgQuery_TypeCast(0) + 20);
  v21 = v3;
  v18 = *(_QWORD *)(v3 + v17);
  outlined init with copy of PgQuery_Alias?(v18 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v7, 1, v24) != 1)
  {
    v19 = v22;
    outlined init with take of PgQuery_OidList((uint64_t)v7, v22, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v19, type metadata accessor for PgQuery_TypeName);
    if (!v4)
      goto LABEL_7;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_TypeName?);
LABEL_7:
  if (*(_DWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_TypeCast.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t TypeName;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char v34;
  int v35;
  int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v41 = *(_QWORD *)(TypeName - 8);
  v42 = TypeName;
  MEMORY[0x1E0C80A78](TypeName);
  v38 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1E0C80A78](v6);
  v39 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1E0C80A78](v40);
  v43 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v10 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a2 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v21 = (uint64_t)&v19[*(int *)(v17 + 48)];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v20, v21, &demangling cache variable for type metadata for PgQuery_Node?);
  v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v22((uint64_t)v19, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v19, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v22(v21, 1, Node) != 1)
    {
      outlined init with take of PgQuery_OidList(v21, (uint64_t)v12, type metadata accessor for PgQuery_Node);
      v25 = a1;
      swift_retain();
      v24 = a2;
      swift_retain();
      v26 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v15, (uint64_t)v12, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v26 & 1) == 0)
        goto LABEL_16;
      goto LABEL_8;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_16;
  }
  v23 = v22(v21, 1, Node);
  swift_retain();
  swift_retain();
  v24 = a2;
  v25 = a1;
  if (v23 != 1)
    goto LABEL_6;
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_8:
  v27 = v24
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  v28 = v43;
  v29 = v43 + *(int *)(v40 + 48);
  outlined init with copy of PgQuery_Alias?(v25+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, v43, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined init with copy of PgQuery_Alias?(v27, v29, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v30 = v42;
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
  if (v31(v28, 1, v42) == 1)
  {
    if (v31(v29, 1, v30) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_TypeName?);
LABEL_15:
      v35 = *(_DWORD *)(v25
                      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      v36 = *(_DWORD *)(v24
                      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      return v35 == v36;
    }
    goto LABEL_13;
  }
  v32 = v39;
  outlined init with copy of PgQuery_Alias?(v28, v39, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if (v31(v29, 1, v30) == 1)
  {
    outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_TypeName);
LABEL_13:
    outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
    goto LABEL_16;
  }
  v33 = v38;
  outlined init with take of PgQuery_OidList(v29, v38, type metadata accessor for PgQuery_TypeName);
  v34 = specialized static PgQuery_TypeName.== infix(_:_:)(v32, v33);
  outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_TypeName);
  outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_TypeName);
  outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((v34 & 1) != 0)
    goto LABEL_15;
LABEL_16:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_TypeCast@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_TypeCast._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_TypeCast()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_TypeCast()
{
  return PgQuery_TypeCast.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_TypeCast(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TypeCast.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_TypeCast()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeCast and conformance PgQuery_TypeCast, type metadata accessor for PgQuery_TypeCast, (uint64_t)&protocol conformance descriptor for PgQuery_TypeCast);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TypeCast@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TypeCast._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_TypeCast()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeCast and conformance PgQuery_TypeCast, type metadata accessor for PgQuery_TypeCast, (uint64_t)&protocol conformance descriptor for PgQuery_TypeCast);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TypeCast()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeCast and conformance PgQuery_TypeCast, type metadata accessor for PgQuery_TypeCast, (uint64_t)&protocol conformance descriptor for PgQuery_TypeCast);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_TypeCast(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_TypeCast, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_TypeCast.== infix(_:_:)) & 1;
}

uint64_t PgQuery_CollateClause._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg);
}

uint64_t ObjC metadata update function for PgQuery_CollateClause._StorageClass()
{
  return type metadata accessor for PgQuery_CollateClause._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CollateClause._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CollateClause._StorageClass);
}

void type metadata completion function for PgQuery_CollateClause._StorageClass()
{
  type metadata completion function for PgQuery_NextValueExpr._StorageClass();
}

uint64_t PgQuery_CollateClause.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v5;

  v1 = v0;
  specialized PgQuery_CollateClause._uniqueStorage()();
  type metadata accessor for PgQuery_CollateClause(0);
  swift_retain();
  v2 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v3 & 1) != 0)
        return swift_release();
      if (v2 == 1)
        break;
      if (v2 == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        v5 = v1;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (v2 == 3)
      {
        v5 = v1;
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
        goto LABEL_5;
      }
LABEL_6:
      v2 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    v5 = v1;
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
    v1 = v5;
    goto LABEL_6;
  }
  return swift_release();
}

uint64_t PgQuery_CollateClause.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  v15[3] = a3;
  v15[1] = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(type metadata accessor for PgQuery_CollateClause(0) + 20);
  v15[0] = v3;
  v13 = *(_QWORD *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collname)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CollateClause@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CollateClause._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CollateClause()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CollateClause()
{
  return PgQuery_CollateClause.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CollateClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CollateClause.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CollateClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, type metadata accessor for PgQuery_CollateClause, (uint64_t)&protocol conformance descriptor for PgQuery_CollateClause);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CollateClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CollateClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CollateClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, type metadata accessor for PgQuery_CollateClause, (uint64_t)&protocol conformance descriptor for PgQuery_CollateClause);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CollateClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, type metadata accessor for PgQuery_CollateClause, (uint64_t)&protocol conformance descriptor for PgQuery_CollateClause);
  return Message.hash(into:)();
}

uint64_t PgQuery_SortBy._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node);
}

uint64_t ObjC metadata update function for PgQuery_SortBy._StorageClass()
{
  return type metadata accessor for PgQuery_SortBy._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_SortBy._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SortBy._StorageClass);
}

void type metadata completion function for PgQuery_SortBy._StorageClass()
{
  type metadata completion function for PgQuery_CoalesceExpr._StorageClass();
}

uint64_t PgQuery_SortBy.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_SortBy(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_SortBy._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_SortBy._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 2:
          lazy protocol witness table accessor for type PgQuery_SortByDir and conformance PgQuery_SortByDir();
          goto LABEL_7;
        case 3:
          lazy protocol witness table accessor for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls();
LABEL_7:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_8;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_8;
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_8:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_SortBy.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v21 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(type metadata accessor for PgQuery_SortBy(0) + 20);
  v18 = v3;
  v13 = *(_QWORD *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyDir))
  {
    v14 = *(_BYTE *)(v13
                   + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyDir
                   + 8);
    v19 = *(_QWORD *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyDir);
    v20 = v14;
    lazy protocol witness table accessor for type PgQuery_SortByDir and conformance PgQuery_SortByDir();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyNulls))
  {
    v15 = *(_BYTE *)(v13
                   + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyNulls
                   + 8);
    v19 = *(_QWORD *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyNulls);
    v20 = v15;
    lazy protocol witness table accessor for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOp)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SortBy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_SortBy._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SortBy()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_SortBy()
{
  return PgQuery_SortBy.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_SortBy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SortBy.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SortBy()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortBy and conformance PgQuery_SortBy, type metadata accessor for PgQuery_SortBy, (uint64_t)&protocol conformance descriptor for PgQuery_SortBy);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SortBy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SortBy._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SortBy()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortBy and conformance PgQuery_SortBy, type metadata accessor for PgQuery_SortBy, (uint64_t)&protocol conformance descriptor for PgQuery_SortBy);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SortBy()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortBy and conformance PgQuery_SortBy, type metadata accessor for PgQuery_SortBy, (uint64_t)&protocol conformance descriptor for PgQuery_SortBy);
  return Message.hash(into:)();
}

uint64_t PgQuery_WindowDef._StorageClass.__deallocating_deinit()
{
  return PgQuery_WindowDef._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset, &OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset);
}

uint64_t ObjC metadata update function for PgQuery_WindowDef._StorageClass()
{
  return type metadata accessor for PgQuery_WindowDef._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_WindowDef._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_WindowDef._StorageClass);
}

void type metadata completion function for PgQuery_WindowDef._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_WindowDef.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_WindowDef, (void (*)(_QWORD))type metadata accessor for PgQuery_WindowDef._StorageClass, specialized PgQuery_WindowDef._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_WindowDef.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_WindowDef.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 5:
        case 8:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 6:
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_WindowDef.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Node;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v29 = (uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v30 = (uint64_t)&v26 - v5;
  Node = type metadata accessor for PgQuery_Node(0);
  v7 = *(_QWORD *)(Node - 8);
  v8 = MEMORY[0x1E0C80A78](Node);
  v27 = (uint64_t)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v28 = (uint64_t)&v26 - v10;
  v11 = *(int *)(type metadata accessor for PgQuery_WindowDef(0) + 20);
  v26 = v0;
  v12 = *(_QWORD *)(v0 + v11);
  v13 = *(_QWORD *)(v12 + 24);
  if ((v13 & 0x2000000000000000) != 0)
    v14 = HIBYTE(v13) & 0xF;
  else
    v14 = *(_QWORD *)(v12 + 16) & 0xFFFFFFFFFFFFLL;
  swift_retain();
  if (v14)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1)
    {
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  v15 = Node;
  v16 = *(_QWORD *)(v12 + 40);
  v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0)
    v17 = *(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v12 + 56) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  if (*(_DWORD *)(v12 + 64))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  v18 = v30;
  outlined init with copy of PgQuery_Alias?(v12+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset, v30, &demangling cache variable for type metadata for PgQuery_Node?);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v19(v18, 1, v15) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v18, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v20 = v18;
    v21 = v28;
    outlined init with take of PgQuery_OidList(v20, v28, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_Node);
    if (v1)
      return swift_release();
  }
  v22 = v29;
  outlined init with copy of PgQuery_Alias?(v12+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v22, 1, v15) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v22, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v23 = v22;
    v24 = v27;
    outlined init with take of PgQuery_OidList(v23, v27, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v24, type metadata accessor for PgQuery_Node);
    if (v1)
      return swift_release();
  }
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_WindowDef@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_WindowDef._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_WindowDef()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_WindowDef()
{
  return PgQuery_WindowDef.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_WindowDef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, type metadata accessor for PgQuery_WindowDef, (uint64_t)&protocol conformance descriptor for PgQuery_WindowDef);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_WindowDef@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_WindowDef._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_WindowDef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, type metadata accessor for PgQuery_WindowDef, (uint64_t)&protocol conformance descriptor for PgQuery_WindowDef);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_WindowDef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, type metadata accessor for PgQuery_WindowDef, (uint64_t)&protocol conformance descriptor for PgQuery_WindowDef);
  return Message.hash(into:)();
}

uint64_t PgQuery_RangeSubselect._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, &demangling cache variable for type metadata for PgQuery_Alias?);
}

uint64_t ObjC metadata update function for PgQuery_RangeSubselect._StorageClass()
{
  return type metadata accessor for PgQuery_RangeSubselect._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RangeSubselect._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeSubselect._StorageClass);
}

void type metadata completion function for PgQuery_RangeSubselect._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Alias?, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_RangeSubselect.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  specialized PgQuery_RangeSubselect._uniqueStorage()();
  type metadata accessor for PgQuery_RangeSubselect(0);
  swift_retain();
  v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return swift_release();
      switch(v1)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_12;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          break;
        case 3:
          type metadata accessor for PgQuery_Alias(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
          break;
        default:
          goto LABEL_12;
      }
      dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_12:
      v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_RangeSubselect.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t Node;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Alias;
  uint64_t v29;
  uint64_t v30;

  v5 = v4;
  v30 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  MEMORY[0x1E0C80A78](v7);
  v27 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Alias = type metadata accessor for PgQuery_Alias(0);
  v26 = *(_QWORD *)(Alias - 8);
  MEMORY[0x1E0C80A78](Alias);
  v24 = (uint64_t)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v14 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(int *)(type metadata accessor for PgQuery_RangeSubselect(0) + 20);
  v25 = v3;
  v18 = *(_QWORD *)(v3 + v17);
  v19 = *(unsigned __int8 *)(v18 + 16);
  swift_retain();
  v29 = a3;
  if (v19 == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v5)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v5)
      return swift_release();
  }
  v20 = v27;
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, v27, &demangling cache variable for type metadata for PgQuery_Alias?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v20, 1, Alias) != 1)
  {
    v21 = v20;
    v22 = v24;
    outlined init with take of PgQuery_OidList(v21, v24, type metadata accessor for PgQuery_Alias);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v22, type metadata accessor for PgQuery_Alias);
    if (!v5)
      goto LABEL_10;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)(v20, &demangling cache variable for type metadata for PgQuery_Alias?);
LABEL_10:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_RangeSubselect.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Alias;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t Node;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  unsigned int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  _QWORD *v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  Alias = type metadata accessor for PgQuery_Alias(0);
  v45 = *(_QWORD *)(Alias - 8);
  v46 = Alias;
  MEMORY[0x1E0C80A78](Alias);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?));
  MEMORY[0x1E0C80A78](v44);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v13 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
    return 0;
  v41 = v6;
  v42 = v9;
  v43 = v11;
  v23 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery;
  v24 = (uint64_t)&v22[*(int *)(v20 + 48)];
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v23, v24, &demangling cache variable for type metadata for PgQuery_Node?);
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (v25((uint64_t)v22, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v25(v24, 1, Node) != 1)
    {
      outlined init with take of PgQuery_OidList(v24, (uint64_t)v15, type metadata accessor for PgQuery_Node);
      swift_retain();
      v27 = a2;
      swift_retain();
      v28 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v18, (uint64_t)v15, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v28 & 1) != 0)
        goto LABEL_10;
LABEL_8:
      swift_release();
      swift_release();
      return 0;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
LABEL_7:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_8;
  }
  v26 = v25(v24, 1, Node);
  swift_retain();
  swift_retain();
  v27 = a2;
  if (v26 != 1)
    goto LABEL_7;
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_10:
  v29 = v27
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
  v30 = (uint64_t)v43;
  v31 = (uint64_t)&v43[*(int *)(v44 + 48)];
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, (uint64_t)v43, &demangling cache variable for type metadata for PgQuery_Alias?);
  outlined init with copy of PgQuery_Alias?(v29, v31, &demangling cache variable for type metadata for PgQuery_Alias?);
  v32 = v46;
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  if (v33(v30, 1, v46) == 1)
  {
    swift_release();
    swift_release();
    if (v33(v31, 1, v32) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v30, &demangling cache variable for type metadata for PgQuery_Alias?);
      return 1;
    }
    goto LABEL_16;
  }
  v35 = v42;
  outlined init with copy of PgQuery_Alias?(v30, (uint64_t)v42, &demangling cache variable for type metadata for PgQuery_Alias?);
  if (v33(v31, 1, v32) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of PgQuery_Alias((uint64_t)v35, type metadata accessor for PgQuery_Alias);
LABEL_16:
    v36 = &demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?);
LABEL_24:
    outlined destroy of (key: String, value: StorableValue)(v30, v36);
    return 0;
  }
  v37 = v41;
  outlined init with take of PgQuery_OidList(v31, (uint64_t)v41, type metadata accessor for PgQuery_Alias);
  if ((*v35 != *v37 || v35[1] != v37[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(v42[2], v41[2]) & 1) == 0)
  {
    swift_release();
    swift_release();
    outlined destroy of PgQuery_Alias((uint64_t)v41, type metadata accessor for PgQuery_Alias);
    outlined destroy of PgQuery_Alias((uint64_t)v42, type metadata accessor for PgQuery_Alias);
    v36 = &demangling cache variable for type metadata for PgQuery_Alias?;
    goto LABEL_24;
  }
  v39 = (uint64_t)v41;
  v38 = (uint64_t)v42;
  type metadata accessor for UnknownStorage();
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  swift_release();
  outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Alias);
  outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_Alias);
  outlined destroy of (key: String, value: StorableValue)(v30, &demangling cache variable for type metadata for PgQuery_Alias?);
  return (v40 & 1) != 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RangeSubselect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RangeSubselect._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RangeSubselect()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_RangeSubselect()
{
  return PgQuery_RangeSubselect.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RangeSubselect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_RangeSubselect.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RangeSubselect()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeSubselect and conformance PgQuery_RangeSubselect, type metadata accessor for PgQuery_RangeSubselect, (uint64_t)&protocol conformance descriptor for PgQuery_RangeSubselect);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RangeSubselect@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RangeSubselect._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RangeSubselect()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeSubselect and conformance PgQuery_RangeSubselect, type metadata accessor for PgQuery_RangeSubselect, (uint64_t)&protocol conformance descriptor for PgQuery_RangeSubselect);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RangeSubselect()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeSubselect and conformance PgQuery_RangeSubselect, type metadata accessor for PgQuery_RangeSubselect, (uint64_t)&protocol conformance descriptor for PgQuery_RangeSubselect);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_RangeSubselect(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_RangeSubselect, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_RangeSubselect.== infix(_:_:)) & 1;
}

uint64_t PgQuery_RangeFunction.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 4:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 5:
          type metadata accessor for PgQuery_RangeFunction(0);
          type metadata accessor for PgQuery_Alias(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RangeFunction.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Alias;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t RangeFunction;
  _QWORD v16[4];

  v4 = v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Alias = type metadata accessor for PgQuery_Alias(0);
  v11 = *(_QWORD *)(Alias - 8);
  MEMORY[0x1E0C80A78](Alias);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v12) = *v4;
  v16[3] = a2;
  v16[1] = a1;
  if ((_DWORD)v12 != 1 || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v3))
  {
    if (v4[1] != 1 || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v3))
    {
      if (v4[2] != 1 || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v3))
      {
        if (!*(_QWORD *)(*((_QWORD *)v4 + 1) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v3))
        {
          RangeFunction = type metadata accessor for PgQuery_RangeFunction(0);
          outlined init with copy of PgQuery_Alias?((uint64_t)&v4[*(int *)(RangeFunction + 40)], (uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Alias?);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, Alias) == 1)
          {
            outlined destroy of (key: String, value: StorableValue)((uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Alias?);
          }
          else
          {
            outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v13, type metadata accessor for PgQuery_Alias);
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
            dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
            result = outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_Alias);
            if (v3)
              return result;
          }
          if (!*(_QWORD *)(*((_QWORD *)v4 + 2) + 16))
            return UnknownStorage.traverse<A>(visitor:)();
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
          if (!v3)
            return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RangeFunction@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Alias;

  *(_WORD *)a2 = 0;
  *(_BYTE *)(a2 + 2) = 0;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 8) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 16) = v4;
  UnknownStorage.init()();
  v5 = a2 + *(int *)(a1 + 40);
  Alias = type metadata accessor for PgQuery_Alias(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Alias - 8) + 56))(v5, 1, 1, Alias);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RangeFunction()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_RangeFunction()
{
  return PgQuery_RangeFunction.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RangeFunction(uint64_t a1, uint64_t a2)
{
  return PgQuery_RangeFunction.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RangeFunction()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeFunction and conformance PgQuery_RangeFunction, type metadata accessor for PgQuery_RangeFunction, (uint64_t)&protocol conformance descriptor for PgQuery_RangeFunction);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RangeFunction@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RangeFunction._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RangeFunction()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeFunction and conformance PgQuery_RangeFunction, type metadata accessor for PgQuery_RangeFunction, (uint64_t)&protocol conformance descriptor for PgQuery_RangeFunction);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RangeFunction()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeFunction and conformance PgQuery_RangeFunction, type metadata accessor for PgQuery_RangeFunction, (uint64_t)&protocol conformance descriptor for PgQuery_RangeFunction);
  return Message.hash(into:)();
}

uint64_t PgQuery_RangeTableSample._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_RangeTableSample._StorageClass()
{
  return type metadata accessor for PgQuery_RangeTableSample._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RangeTableSample._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTableSample._StorageClass);
}

void type metadata completion function for PgQuery_RangeTableSample._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_RangeTableSample.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_RangeTableSample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_RangeTableSample._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_RangeTableSample._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 2:
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_7;
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_RangeTableSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Node;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v25 = (uint64_t)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v22 - v8;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v24 = (uint64_t)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v22 - v14;
  v16 = *(int *)(type metadata accessor for PgQuery_RangeTableSample(0) + 20);
  v23 = v3;
  v17 = *(_QWORD *)(v3 + v16);
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Node?);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v18(v9, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v15, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v17
                             + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__method)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v17
                             + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  v19 = v25;
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable, v25, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v18((char *)v19, 1, Node) != 1)
  {
    v20 = v24;
    outlined init with take of PgQuery_OidList(v19, v24, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
    if (!v4)
      goto LABEL_11;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)(v19, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if (*(_DWORD *)(v17
                 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RangeTableSample@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RangeTableSample._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RangeTableSample()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_RangeTableSample()
{
  return PgQuery_RangeTableSample.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RangeTableSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_RangeTableSample.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RangeTableSample()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableSample and conformance PgQuery_RangeTableSample, type metadata accessor for PgQuery_RangeTableSample, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableSample);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RangeTableSample@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RangeTableSample._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RangeTableSample()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableSample and conformance PgQuery_RangeTableSample, type metadata accessor for PgQuery_RangeTableSample, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableSample);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RangeTableSample()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableSample and conformance PgQuery_RangeTableSample, type metadata accessor for PgQuery_RangeTableSample, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableSample);
  return Message.hash(into:)();
}

uint64_t PgQuery_RangeTableFunc._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, &demangling cache variable for type metadata for PgQuery_Alias?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_RangeTableFunc._StorageClass()
{
  return type metadata accessor for PgQuery_RangeTableFunc._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RangeTableFunc._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTableFunc._StorageClass);
}

void type metadata completion function for PgQuery_RangeTableFunc._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Alias?, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_RangeTableFunc.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RangeTableFunc, (void (*)(_QWORD))type metadata accessor for PgQuery_RangeTableFunc._StorageClass, specialized PgQuery_RangeTableFunc._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RangeTableFunc.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_RangeTableFunc.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 2:
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          goto LABEL_9;
        case 4:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 6:
          type metadata accessor for PgQuery_Alias(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
LABEL_9:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RangeTableFunc.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t Node;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t Alias;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  MEMORY[0x1E0C80A78](v6);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Alias = type metadata accessor for PgQuery_Alias(0);
  v34 = *(_QWORD *)(Alias - 8);
  MEMORY[0x1E0C80A78](Alias);
  v33 = (uint64_t)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v32 - v13;
  Node = type metadata accessor for PgQuery_Node(0);
  v16 = *(_QWORD *)(Node - 8);
  v17 = MEMORY[0x1E0C80A78](Node);
  v37 = (uint64_t)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v32 - v19;
  v21 = *(int *)(type metadata accessor for PgQuery_RangeTableFunc(0) + 20);
  v32 = v3;
  v22 = *(_QWORD *)(v3 + v21);
  v23 = *(unsigned __int8 *)(v22 + 16);
  swift_retain();
  v40 = a3;
  v39 = a2;
  if (v23 == 1)
  {
    v24 = v38;
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v25 = v24;
    if (v24)
      return swift_release();
  }
  else
  {
    v25 = v38;
  }
  outlined init with copy of PgQuery_Alias?(v22+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v26(v14, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v14, (uint64_t)v20, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v20, type metadata accessor for PgQuery_Node);
    if (v25)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v22+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v26(v12, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v27 = v37;
    outlined init with take of PgQuery_OidList((uint64_t)v12, v37, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_Node);
    if (v25)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v22
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namespaces)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v25)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v22
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v25)
      return swift_release();
  }
  v28 = v35;
  outlined init with copy of PgQuery_Alias?(v22+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, v35, &demangling cache variable for type metadata for PgQuery_Alias?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v28, 1, Alias) != 1)
  {
    v29 = v28;
    v30 = v33;
    outlined init with take of PgQuery_OidList(v29, v33, type metadata accessor for PgQuery_Alias);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_Alias);
    if (!v25)
      goto LABEL_18;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Alias?);
LABEL_18:
  if (*(_DWORD *)(v22
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v25)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RangeTableFunc@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RangeTableFunc._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RangeTableFunc()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RangeTableFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_RangeTableFunc.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RangeTableFunc()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFunc and conformance PgQuery_RangeTableFunc, type metadata accessor for PgQuery_RangeTableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableFunc);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RangeTableFunc@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RangeTableFunc._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RangeTableFunc()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFunc and conformance PgQuery_RangeTableFunc, type metadata accessor for PgQuery_RangeTableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableFunc);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RangeTableFunc()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFunc and conformance PgQuery_RangeTableFunc, type metadata accessor for PgQuery_RangeTableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableFunc);
  return Message.hash(into:)();
}

uint64_t PgQuery_RangeTableFuncCol._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_RangeTableFuncCol._StorageClass()
{
  return type metadata accessor for PgQuery_RangeTableFuncCol._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RangeTableFuncCol._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTableFuncCol._StorageClass);
}

void type metadata completion function for PgQuery_RangeTableFuncCol._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_RangeTableFuncCol.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RangeTableFuncCol, (void (*)(_QWORD))type metadata accessor for PgQuery_RangeTableFuncCol._StorageClass, specialized PgQuery_RangeTableFuncCol._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RangeTableFuncCol.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_RangeTableFuncCol.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
          goto LABEL_9;
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 5:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
LABEL_9:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RangeTableFuncCol.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_RangeTableFuncCol, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RangeTableFuncCol.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_RangeTableFuncCol.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t TypeName;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t Node;
  uint64_t v40;
  uint64_t v41;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v36 = (uint64_t)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v38 = (uint64_t)&v33 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v37 = *(_QWORD *)(Node - 8);
  v10 = MEMORY[0x1E0C80A78](Node);
  v34 = (uint64_t)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v35 = (uint64_t)&v33 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v17 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1;
  v21 = *(_QWORD *)(a1 + 16);
  v22 = *(_QWORD *)(a1 + 24);
  v23 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0)
    v23 = v21 & 0xFFFFFFFFFFFFLL;
  v40 = a4;
  if (v23)
  {
    swift_bridgeObjectRetain();
    v24 = v41;
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    v25 = v24;
    result = swift_bridgeObjectRelease();
    if (v24)
      return result;
  }
  else
  {
    v25 = v41;
  }
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, TypeName) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_TypeName?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v15, (uint64_t)v19, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v19, type metadata accessor for PgQuery_TypeName);
    if (v25)
      return result;
  }
  if (*(_BYTE *)(v20
                + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__forOrdinality) != 1
    || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v25))
  {
    if (*(_BYTE *)(v20
                  + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isNotNull) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v25))
    {
      v27 = v38;
      outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexpr, v38, &demangling cache variable for type metadata for PgQuery_Node?);
      v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      if (v28(v27, 1, Node) == 1)
      {
        outlined destroy of (key: String, value: StorableValue)(v27, &demangling cache variable for type metadata for PgQuery_Node?);
      }
      else
      {
        v29 = v27;
        v30 = v35;
        outlined init with take of PgQuery_OidList(v29, v35, type metadata accessor for PgQuery_Node);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
        result = outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_Node);
        if (v25)
          return result;
      }
      v31 = v36;
      outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexpr, v36, &demangling cache variable for type metadata for PgQuery_Node?);
      if (v28(v31, 1, Node) == 1)
      {
        outlined destroy of (key: String, value: StorableValue)(v31, &demangling cache variable for type metadata for PgQuery_Node?);
      }
      else
      {
        v32 = v34;
        outlined init with take of PgQuery_OidList(v31, v34, type metadata accessor for PgQuery_Node);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
        result = outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_Node);
        if (v25)
          return result;
      }
      result = *(unsigned int *)(v20
                               + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      if ((_DWORD)result)
        return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    }
  }
  return result;
}

BOOL closure #1 in static PgQuery_RangeTableFuncCol.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t TypeName;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  _BOOL8 result;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  int v49;
  int v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t Node;
  uint64_t v58;

  Node = type metadata accessor for PgQuery_Node(0);
  v55 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v53 = (uint64_t)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v54 = (uint64_t)&v51 - v9;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v10 = MEMORY[0x1E0C80A78](v56);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v58 = (uint64_t)&v51 - v13;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v15 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
    || (v24 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v24 & 1) != 0))
  {
    v51 = v12;
    v52 = v5;
    v26 = a2
        + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
    v27 = (uint64_t)&v23[*(int *)(v21 + 48)];
    outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined init with copy of PgQuery_Alias?(v26, v27, &demangling cache variable for type metadata for PgQuery_TypeName?);
    v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    if (v28((uint64_t)v23, 1, TypeName) == 1)
    {
      v29 = v28(v27, 1, TypeName);
      swift_retain();
      swift_retain();
      if (v29 == 1)
      {
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
        goto LABEL_11;
      }
    }
    else
    {
      outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_TypeName?);
      if (v28(v27, 1, TypeName) != 1)
      {
        outlined init with take of PgQuery_OidList(v27, (uint64_t)v17, type metadata accessor for PgQuery_TypeName);
        swift_retain();
        swift_retain();
        v30 = specialized static PgQuery_TypeName.== infix(_:_:)((uint64_t)v20, (uint64_t)v17);
        outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_TypeName);
        outlined destroy of PgQuery_Alias((uint64_t)v20, type metadata accessor for PgQuery_TypeName);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
        if ((v30 & 1) == 0)
          goto LABEL_28;
LABEL_11:
        if (*(unsigned __int8 *)(a1
                                + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__forOrdinality) != *(unsigned __int8 *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__forOrdinality)
          || *(unsigned __int8 *)(a1
                                + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isNotNull) != *(unsigned __int8 *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isNotNull))
        {
          goto LABEL_28;
        }
        v31 = a2
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexpr;
        v32 = v56;
        v33 = v58;
        v34 = v58 + *(int *)(v56 + 48);
        outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexpr, v58, &demangling cache variable for type metadata for PgQuery_Node?);
        v35 = v31;
        v36 = v33;
        outlined init with copy of PgQuery_Alias?(v35, v34, &demangling cache variable for type metadata for PgQuery_Node?);
        v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
        v38 = Node;
        if (v37(v36, 1, Node) == 1)
        {
          v39 = v37(v34, 1, v38);
          v41 = (uint64_t)v51;
          v40 = (uint64_t)v52;
          if (v39 == 1)
          {
            outlined destroy of (key: String, value: StorableValue)(v36, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_20:
            v45 = a2
                + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexpr;
            v46 = v41 + *(int *)(v32 + 48);
            outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexpr, v41, &demangling cache variable for type metadata for PgQuery_Node?);
            outlined init with copy of PgQuery_Alias?(v45, v46, &demangling cache variable for type metadata for PgQuery_Node?);
            if (v37(v41, 1, v38) == 1)
            {
              if (v37(v46, 1, v38) == 1)
              {
                outlined destroy of (key: String, value: StorableValue)(v41, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_27:
                v49 = *(_DWORD *)(a1
                                + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
                swift_release();
                v50 = *(_DWORD *)(a2
                                + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
                swift_release();
                return v49 == v50;
              }
            }
            else
            {
              v47 = v53;
              outlined init with copy of PgQuery_Alias?(v41, v53, &demangling cache variable for type metadata for PgQuery_Node?);
              if (v37(v46, 1, v38) != 1)
              {
                outlined init with take of PgQuery_OidList(v46, v40, type metadata accessor for PgQuery_Node);
                v48 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v47, v40, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
                outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
                outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_Node);
                outlined destroy of (key: String, value: StorableValue)(v41, &demangling cache variable for type metadata for PgQuery_Node?);
                if ((v48 & 1) != 0)
                  goto LABEL_27;
                goto LABEL_28;
              }
              outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_Node);
            }
            outlined destroy of (key: String, value: StorableValue)(v41, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
LABEL_28:
            swift_release();
            swift_release();
            return 0;
          }
        }
        else
        {
          v42 = v54;
          outlined init with copy of PgQuery_Alias?(v36, v54, &demangling cache variable for type metadata for PgQuery_Node?);
          v43 = v37(v34, 1, v38);
          v41 = (uint64_t)v51;
          v40 = (uint64_t)v52;
          if (v43 != 1)
          {
            outlined init with take of PgQuery_OidList(v34, (uint64_t)v52, type metadata accessor for PgQuery_Node);
            v44 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v42, v40, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
            outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
            outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_Node);
            outlined destroy of (key: String, value: StorableValue)(v58, &demangling cache variable for type metadata for PgQuery_Node?);
            if ((v44 & 1) == 0)
              goto LABEL_28;
            goto LABEL_20;
          }
          outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_Node);
        }
        outlined destroy of (key: String, value: StorableValue)(v36, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
        goto LABEL_28;
      }
      swift_retain();
      swift_retain();
      outlined destroy of PgQuery_Alias((uint64_t)v20, type metadata accessor for PgQuery_TypeName);
    }
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
    goto LABEL_28;
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RangeTableFuncCol@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RangeTableFuncCol._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RangeTableFuncCol()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RangeTableFuncCol()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFuncCol and conformance PgQuery_RangeTableFuncCol, type metadata accessor for PgQuery_RangeTableFuncCol, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableFuncCol);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RangeTableFuncCol@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RangeTableFuncCol._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RangeTableFuncCol()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFuncCol and conformance PgQuery_RangeTableFuncCol, type metadata accessor for PgQuery_RangeTableFuncCol, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableFuncCol);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RangeTableFuncCol()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFuncCol and conformance PgQuery_RangeTableFuncCol, type metadata accessor for PgQuery_RangeTableFuncCol, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableFuncCol);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_RangeTableFuncCol(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_RangeTableFuncCol, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_RangeTableFuncCol.== infix(_:_:)) & 1;
}

uint64_t PgQuery_TypeName.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 5:
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 6:
        case 8:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_TypeName.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!*(_DWORD *)(v0 + 8)
      || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
    {
      if (*(_BYTE *)(v0 + 12) != 1
        || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
      {
        if (*(_BYTE *)(v0 + 13) != 1
          || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          if (!*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16)
            || (type metadata accessor for PgQuery_Node(0),
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
          {
            if (!*(_DWORD *)(v0 + 24)
              || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
            {
              if (!*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16)
                || (type metadata accessor for PgQuery_Node(0),
                    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
              {
                if (!*(_DWORD *)(v0 + 40)
                  || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
                {
                  type metadata accessor for PgQuery_TypeName(0);
                  return UnknownStorage.traverse<A>(visitor:)();
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_TypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 16) = v1;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v1;
  *(_DWORD *)(a1 + 40) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_TypeName()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_TypeName()
{
  return PgQuery_TypeName.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_TypeName()
{
  return PgQuery_TypeName.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_TypeName()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TypeName@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TypeName._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_TypeName()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TypeName()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
  return Message.hash(into:)();
}

uint64_t PgQuery_ColumnDef._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t TypeName;
  _QWORD *v3;
  uint64_t v4;
  uint64_t Node;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v7;
  uint64_t v8;
  uint64_t RangeVar;
  _QWORD *v10;
  uint64_t v11;
  uint64_t CollateClause;
  uint64_t v13;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 56))(v1, 1, 1, TypeName);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhcount) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isLocal) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isNotNull) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFromType) = 0;
  v3 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__storage);
  *v3 = 0;
  v3[1] = 0xE000000000000000;
  v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawDefault;
  Node = type metadata accessor for PgQuery_Node(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v6(v4, 1, 1, Node);
  v6(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedDefault, 1, 1, Node);
  v7 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identity);
  *v7 = 0;
  v7[1] = 0xE000000000000000;
  v8 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identitySequence;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v8, 1, 1, RangeVar);
  v10 = (_QWORD *)(v0
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generated);
  *v10 = 0;
  v10[1] = 0xE000000000000000;
  v11 = v0
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause;
  CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CollateClause - 8) + 56))(v11, 1, 1, CollateClause);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collOid) = 0;
  v13 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fdwoptions) = v13;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  return v0;
}

uint64_t PgQuery_ColumnDef._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, &demangling cache variable for type metadata for PgQuery_TypeName?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawDefault, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedDefault, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identitySequence, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PgQuery_ColumnDef._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit((void (*)(void))PgQuery_ColumnDef._StorageClass.deinit);
}

uint64_t ObjC metadata update function for PgQuery_ColumnDef._StorageClass()
{
  return type metadata accessor for PgQuery_ColumnDef._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_ColumnDef._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ColumnDef._StorageClass);
}

void type metadata completion function for PgQuery_ColumnDef._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_CollateClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateClause);
        if (v3 <= 0x3F)
          swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t PgQuery_ColumnDef.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_ColumnDef, (void (*)(_QWORD))type metadata accessor for PgQuery_ColumnDef._StorageClass, specialized PgQuery_ColumnDef._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_ColumnDef.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_ColumnDef.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 7:
        case 10:
        case 12:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
          goto LABEL_11;
        case 3:
        case 17:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 4:
        case 5:
        case 6:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 8:
        case 9:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          goto LABEL_11;
        case 11:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
          goto LABEL_11;
        case 13:
          type metadata accessor for PgQuery_CollateClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, type metadata accessor for PgQuery_CollateClause, (uint64_t)&protocol conformance descriptor for PgQuery_CollateClause);
LABEL_11:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 14:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 15:
        case 16:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ColumnDef.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t CollateClause;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RangeVar;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Node;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t TypeName;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CollateClause?);
  MEMORY[0x1E0C80A78](v1);
  v58 = (uint64_t)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  v55 = *(_QWORD *)(CollateClause - 8);
  v56 = CollateClause;
  MEMORY[0x1E0C80A78](CollateClause);
  v54 = (uint64_t)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v5);
  v66 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v59 = *(_QWORD *)(RangeVar - 8);
  v60 = RangeVar;
  MEMORY[0x1E0C80A78](RangeVar);
  v57 = (uint64_t)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v65 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v67 = (char *)&v53 - v12;
  Node = type metadata accessor for PgQuery_Node(0);
  v63 = *(_QWORD *)(Node - 8);
  v64 = Node;
  v14 = MEMORY[0x1E0C80A78](Node);
  v61 = (uint64_t)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v62 = (uint64_t)&v53 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v21 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(int *)(type metadata accessor for PgQuery_ColumnDef(0) + 20);
  v53 = v0;
  v25 = *(_QWORD *)(v0 + v24);
  v26 = *(_QWORD *)(v25 + 24);
  if ((v26 & 0x2000000000000000) != 0)
    v27 = HIBYTE(v26) & 0xF;
  else
    v27 = *(_QWORD *)(v25 + 16) & 0xFFFFFFFFFFFFLL;
  v69 = *(_QWORD *)(v0 + v24);
  swift_retain();
  if (v27)
  {
    swift_bridgeObjectRetain();
    v28 = v68;
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    v29 = v28;
    if (v28)
      goto LABEL_51;
    swift_bridgeObjectRelease();
  }
  else
  {
    v29 = v68;
  }
  v30 = v69;
  outlined init with copy of PgQuery_Alias?(v69+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, TypeName) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_TypeName?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v23, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v31 = type metadata accessor for PgQuery_TypeName;
    v32 = (uint64_t)v23;
    if (v29)
      goto LABEL_12;
    outlined destroy of PgQuery_Alias((uint64_t)v23, type metadata accessor for PgQuery_TypeName);
    v30 = v69;
  }
  v34 = (uint64_t)v65;
  v33 = (uint64_t)v66;
  if (*(_DWORD *)(v30
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhcount))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v29)
      return swift_release();
  }
  if (*(_BYTE *)(v30
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isLocal) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v35 = (uint64_t)v67;
    if (v29)
      return swift_release();
  }
  else
  {
    v35 = (uint64_t)v67;
  }
  if (*(_BYTE *)(v30
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isNotNull) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v35 = (uint64_t)v67;
    if (v29)
      return swift_release();
  }
  if (*(_BYTE *)(v30
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFromType) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v35 = (uint64_t)v67;
    if (v29)
      return swift_release();
  }
  v36 = *(_QWORD *)(v30
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__storage
                  + 8);
  v37 = HIBYTE(v36) & 0xF;
  if ((v36 & 0x2000000000000000) == 0)
    v37 = *(_QWORD *)(v30
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__storage) & 0xFFFFFFFFFFFFLL;
  if (v37)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v29)
      goto LABEL_51;
    swift_bridgeObjectRelease();
    v35 = (uint64_t)v67;
  }
  outlined init with copy of PgQuery_Alias?(v30+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawDefault, v35, &demangling cache variable for type metadata for PgQuery_Node?);
  v38 = v64;
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
  if (v39(v35, 1, v64) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v35, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_33;
  }
  v40 = v35;
  v41 = v62;
  outlined init with take of PgQuery_OidList(v40, v62, type metadata accessor for PgQuery_Node);
  v38 = v64;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  v31 = type metadata accessor for PgQuery_Node;
  v32 = v41;
  if (v29)
  {
LABEL_12:
    outlined destroy of PgQuery_Alias(v32, v31);
    return swift_release();
  }
  outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_Node);
LABEL_33:
  outlined init with copy of PgQuery_Alias?(v69+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedDefault, v34, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v39(v34, 1, v38) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v34, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_37;
  }
  v42 = v61;
  outlined init with take of PgQuery_OidList(v34, v61, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  v31 = type metadata accessor for PgQuery_Node;
  v32 = v42;
  if (v29)
    goto LABEL_12;
  outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_Node);
LABEL_37:
  v43 = v69;
  v44 = *(_QWORD *)(v69
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identity
                  + 8);
  v45 = HIBYTE(v44) & 0xF;
  if ((v44 & 0x2000000000000000) == 0)
    v45 = *(_QWORD *)(v69
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identity) & 0xFFFFFFFFFFFFLL;
  if (v45)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (!v29)
    {
      swift_bridgeObjectRelease();
      goto LABEL_42;
    }
LABEL_51:
    swift_bridgeObjectRelease();
    return swift_release();
  }
LABEL_42:
  outlined init with copy of PgQuery_Alias?(v43+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identitySequence, v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v33, 1, v60) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    goto LABEL_47;
  }
  v46 = v33;
  v47 = v57;
  outlined init with take of PgQuery_OidList(v46, v57, type metadata accessor for PgQuery_RangeVar);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  if (v29)
  {
    outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_RangeVar);
    return swift_release();
  }
  outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_RangeVar);
LABEL_47:
  v48 = *(_QWORD *)(v43
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generated
                  + 8);
  v49 = HIBYTE(v48) & 0xF;
  if ((v48 & 0x2000000000000000) == 0)
    v49 = *(_QWORD *)(v43
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generated) & 0xFFFFFFFFFFFFLL;
  if (v49)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v29)
      goto LABEL_51;
    swift_bridgeObjectRelease();
  }
  v51 = v58;
  outlined init with copy of PgQuery_Alias?(v43+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause, v58, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v51, 1, v56) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v58, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  }
  else
  {
    v52 = v54;
    outlined init with take of PgQuery_OidList(v58, v54, type metadata accessor for PgQuery_CollateClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, type metadata accessor for PgQuery_CollateClause, (uint64_t)&protocol conformance descriptor for PgQuery_CollateClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_CollateClause);
    if (v29)
      return swift_release();
  }
  if (*(_DWORD *)(v43
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collOid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v29)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v43
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v29)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v43
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fdwoptions)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v29)
      return swift_release();
  }
  if (*(_DWORD *)(v43
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v29)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_ColumnDef.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t CollateClause;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t RangeVar;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t TypeName;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char v34;
  _BOOL8 result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t, uint64_t);
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  int v96;
  int v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t Node;

  CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  v103 = *(_QWORD *)(CollateClause - 8);
  v104 = CollateClause;
  MEMORY[0x1E0C80A78](CollateClause);
  v6 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CollateClause?);
  MEMORY[0x1E0C80A78](v7);
  v109 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_CollateClause?, PgQuery_CollateClause?));
  MEMORY[0x1E0C80A78](v102);
  v10 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v107 = *(_QWORD *)(RangeVar - 8);
  v108 = RangeVar;
  MEMORY[0x1E0C80A78](RangeVar);
  v101 = (uint64_t)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v13);
  v105 = (uint64_t)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v106);
  v110 = (uint64_t)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v115 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v112 = (uint64_t)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v111 = (uint64_t)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v114 = (uint64_t)&v98 - v20;
  v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v21 = MEMORY[0x1E0C80A78](v117);
  v113 = (uint64_t)&v98 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v116 = (uint64_t)&v98 - v23;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v25 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v27 = (char *)&v98 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1E0C80A78](v31);
  v33 = (char *)&v98 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
    || (v34 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v34 & 1) != 0))
  {
    v99 = v6;
    v100 = v10;
    v36 = a1
        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
    v37 = a2;
    v38 = a1;
    v39 = a2
        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
    v40 = (uint64_t)&v33[*(int *)(v31 + 48)];
    outlined init with copy of PgQuery_Alias?(v36, (uint64_t)v33, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined init with copy of PgQuery_Alias?(v39, v40, &demangling cache variable for type metadata for PgQuery_TypeName?);
    v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
    if (v41((uint64_t)v33, 1, TypeName) == 1)
    {
      v42 = v41(v40, 1, TypeName);
      swift_retain();
      swift_retain();
      v43 = v37;
      v44 = v38;
      if (v42 == 1)
      {
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_TypeName?);
        goto LABEL_12;
      }
    }
    else
    {
      outlined init with copy of PgQuery_Alias?((uint64_t)v33, (uint64_t)v30, &demangling cache variable for type metadata for PgQuery_TypeName?);
      if (v41(v40, 1, TypeName) != 1)
      {
        outlined init with take of PgQuery_OidList(v40, (uint64_t)v27, type metadata accessor for PgQuery_TypeName);
        v44 = v38;
        swift_retain();
        v43 = v37;
        swift_retain();
        v47 = specialized static PgQuery_TypeName.== infix(_:_:)((uint64_t)v30, (uint64_t)v27);
        outlined destroy of PgQuery_Alias((uint64_t)v27, type metadata accessor for PgQuery_TypeName);
        outlined destroy of PgQuery_Alias((uint64_t)v30, type metadata accessor for PgQuery_TypeName);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_TypeName?);
        if ((v47 & 1) == 0)
          goto LABEL_16;
LABEL_12:
        if (*(_DWORD *)(v44
                       + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhcount) != *(_DWORD *)(v43 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhcount)
          || *(unsigned __int8 *)(v44
                                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isLocal) != *(unsigned __int8 *)(v43 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isLocal)
          || *(unsigned __int8 *)(v44
                                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isNotNull) != *(unsigned __int8 *)(v43 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isNotNull)
          || *(unsigned __int8 *)(v44
                                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFromType) != *(unsigned __int8 *)(v43 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFromType)
          || (*(_QWORD *)(v44
                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__storage) != *(_QWORD *)(v43 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__storage)
           || *(_QWORD *)(v44
                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__storage
                        + 8) != *(_QWORD *)(v43
                                          + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__storage
                                          + 8))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_16;
        }
        v48 = v43
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawDefault;
        v49 = v116;
        v50 = v117;
        v51 = v116 + *(int *)(v117 + 48);
        outlined init with copy of PgQuery_Alias?(v44+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawDefault, v116, &demangling cache variable for type metadata for PgQuery_Node?);
        v52 = v48;
        v53 = v49;
        outlined init with copy of PgQuery_Alias?(v52, v51, &demangling cache variable for type metadata for PgQuery_Node?);
        v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v115 + 48);
        v55 = Node;
        if (v54(v49, 1, Node) == 1)
        {
          v56 = v54(v51, 1, v55);
          v57 = (uint64_t)v100;
          if (v56 != 1)
            goto LABEL_33;
          outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_Node?);
        }
        else
        {
          v58 = v49;
          v59 = v114;
          outlined init with copy of PgQuery_Alias?(v58, v114, &demangling cache variable for type metadata for PgQuery_Node?);
          if (v54(v51, 1, v55) == 1)
          {
            v60 = v59;
            goto LABEL_32;
          }
          v61 = v112;
          outlined init with take of PgQuery_OidList(v51, v112, type metadata accessor for PgQuery_Node);
          v62 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v59, v61, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
          outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Node);
          outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
          v57 = (uint64_t)v100;
          outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_Node?);
          if ((v62 & 1) == 0)
            goto LABEL_16;
        }
        v63 = v43
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedDefault;
        v64 = *(int *)(v50 + 48);
        v65 = v113;
        v66 = v113 + v64;
        outlined init with copy of PgQuery_Alias?(v44+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedDefault, v113, &demangling cache variable for type metadata for PgQuery_Node?);
        v67 = v63;
        v53 = v65;
        outlined init with copy of PgQuery_Alias?(v67, v66, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v54(v65, 1, v55) == 1)
        {
          if (v54(v66, 1, v55) == 1)
          {
            outlined destroy of (key: String, value: StorableValue)(v65, &demangling cache variable for type metadata for PgQuery_Node?);
            goto LABEL_35;
          }
LABEL_33:
          v45 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
          v46 = v53;
          goto LABEL_10;
        }
        v68 = v65;
        v69 = v111;
        outlined init with copy of PgQuery_Alias?(v68, v111, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v54(v66, 1, v55) != 1)
        {
          v70 = v112;
          outlined init with take of PgQuery_OidList(v66, v112, type metadata accessor for PgQuery_Node);
          v71 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v69, v70, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
          outlined destroy of PgQuery_Alias(v70, type metadata accessor for PgQuery_Node);
          outlined destroy of PgQuery_Alias(v69, type metadata accessor for PgQuery_Node);
          outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_Node?);
          if ((v71 & 1) == 0)
            goto LABEL_16;
LABEL_35:
          if ((*(_QWORD *)(v44
                          + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identity) != *(_QWORD *)(v43 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identity)
             || *(_QWORD *)(v44
                          + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identity
                          + 8) != *(_QWORD *)(v43
                                            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identity
                                            + 8))
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            goto LABEL_16;
          }
          v72 = v43
              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identitySequence;
          v73 = v110;
          v74 = v110 + *(int *)(v106 + 48);
          outlined init with copy of PgQuery_Alias?(v44+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identitySequence, v110, &demangling cache variable for type metadata for PgQuery_RangeVar?);
          outlined init with copy of PgQuery_Alias?(v72, v74, &demangling cache variable for type metadata for PgQuery_RangeVar?);
          v75 = v108;
          v76 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 48);
          if (v76(v73, 1, v108) == 1)
          {
            v77 = v76(v74, 1, v75);
            v78 = (uint64_t)v109;
            if (v77 == 1)
            {
              outlined destroy of (key: String, value: StorableValue)(v110, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_45:
              if ((*(_QWORD *)(v44
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generated) != *(_QWORD *)(v43 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generated)
                 || *(_QWORD *)(v44
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generated
                              + 8) != *(_QWORD *)(v43
                                                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generated
                                                + 8))
                && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                goto LABEL_16;
              }
              v84 = v43
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause;
              v85 = v57 + *(int *)(v102 + 48);
              outlined init with copy of PgQuery_Alias?(v44+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause, v57, &demangling cache variable for type metadata for PgQuery_CollateClause?);
              outlined init with copy of PgQuery_Alias?(v84, v85, &demangling cache variable for type metadata for PgQuery_CollateClause?);
              v86 = v104;
              v87 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
              if (v87(v57, 1, v104) == 1)
              {
                if (v87(v85, 1, v86) == 1)
                {
                  outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_CollateClause?);
LABEL_55:
                  if (*(_DWORD *)(v44
                                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collOid) == *(_DWORD *)(v43 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collOid))
                  {
                    v90 = *(_QWORD *)(v44
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
                    v91 = *(_QWORD *)(v43
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    v92 = specialized static Array<A>.== infix(_:_:)(v90, v91);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v92 & 1) != 0)
                    {
                      v93 = *(_QWORD *)(v44
                                      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fdwoptions);
                      v94 = *(_QWORD *)(v43
                                      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fdwoptions);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      v95 = specialized static Array<A>.== infix(_:_:)(v93, v94);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v95 & 1) != 0)
                      {
                        v96 = *(_DWORD *)(v44
                                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
                        swift_release();
                        v97 = *(_DWORD *)(v43
                                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
                        swift_release();
                        return v96 == v97;
                      }
                    }
                  }
                  goto LABEL_16;
                }
              }
              else
              {
                outlined init with copy of PgQuery_Alias?(v57, v78, &demangling cache variable for type metadata for PgQuery_CollateClause?);
                if (v87(v85, 1, v86) != 1)
                {
                  v88 = (uint64_t)v99;
                  outlined init with take of PgQuery_OidList(v85, (uint64_t)v99, type metadata accessor for PgQuery_CollateClause);
                  v89 = specialized static PgQuery_CollateClause.== infix(_:_:)(v78, v88);
                  outlined destroy of PgQuery_Alias(v88, type metadata accessor for PgQuery_CollateClause);
                  outlined destroy of PgQuery_Alias(v78, type metadata accessor for PgQuery_CollateClause);
                  outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_CollateClause?);
                  if ((v89 & 1) != 0)
                    goto LABEL_55;
LABEL_16:
                  swift_release();
                  swift_release();
                  return 0;
                }
                outlined destroy of PgQuery_Alias(v78, type metadata accessor for PgQuery_CollateClause);
              }
              v45 = &demangling cache variable for type metadata for (PgQuery_CollateClause?, PgQuery_CollateClause?);
              v46 = v57;
LABEL_10:
              outlined destroy of (key: String, value: StorableValue)(v46, v45);
              goto LABEL_16;
            }
          }
          else
          {
            v79 = v105;
            outlined init with copy of PgQuery_Alias?(v73, v105, &demangling cache variable for type metadata for PgQuery_RangeVar?);
            v80 = v76(v74, 1, v75);
            v81 = v73;
            v78 = (uint64_t)v109;
            if (v80 != 1)
            {
              v82 = v101;
              outlined init with take of PgQuery_OidList(v74, v101, type metadata accessor for PgQuery_RangeVar);
              v83 = specialized static PgQuery_RangeVar.== infix(_:_:)(v79, v82);
              outlined destroy of PgQuery_Alias(v82, type metadata accessor for PgQuery_RangeVar);
              outlined destroy of PgQuery_Alias(v79, type metadata accessor for PgQuery_RangeVar);
              outlined destroy of (key: String, value: StorableValue)(v81, &demangling cache variable for type metadata for PgQuery_RangeVar?);
              if ((v83 & 1) == 0)
                goto LABEL_16;
              goto LABEL_45;
            }
            outlined destroy of PgQuery_Alias(v79, type metadata accessor for PgQuery_RangeVar);
          }
          v45 = &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?);
          v46 = v110;
          goto LABEL_10;
        }
        v60 = v69;
LABEL_32:
        outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_Node);
        goto LABEL_33;
      }
      swift_retain();
      swift_retain();
      outlined destroy of PgQuery_Alias((uint64_t)v30, type metadata accessor for PgQuery_TypeName);
    }
    v45 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
    v46 = (uint64_t)v33;
    goto LABEL_10;
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ColumnDef@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_ColumnDef._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ColumnDef()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ColumnDef()
{
  return PgQuery_ColumnDef.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ColumnDef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnDef and conformance PgQuery_ColumnDef, type metadata accessor for PgQuery_ColumnDef, (uint64_t)&protocol conformance descriptor for PgQuery_ColumnDef);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ColumnDef@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ColumnDef._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ColumnDef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnDef and conformance PgQuery_ColumnDef, type metadata accessor for PgQuery_ColumnDef, (uint64_t)&protocol conformance descriptor for PgQuery_ColumnDef);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ColumnDef()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnDef and conformance PgQuery_ColumnDef, type metadata accessor for PgQuery_ColumnDef, (uint64_t)&protocol conformance descriptor for PgQuery_ColumnDef);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ColumnDef(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_ColumnDef, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_ColumnDef.== infix(_:_:)) & 1;
}

uint64_t PgQuery_IndexElem._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_IndexElem._StorageClass()
{
  return type metadata accessor for PgQuery_IndexElem._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_IndexElem._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_IndexElem._StorageClass);
}

void type metadata completion function for PgQuery_IndexElem._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_IndexElem.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_IndexElem, (void (*)(_QWORD))type metadata accessor for PgQuery_IndexElem._StorageClass, specialized PgQuery_IndexElem._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_IndexElem.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_IndexElem.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 4:
        case 5:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 7:
          lazy protocol witness table accessor for type PgQuery_SortByDir and conformance PgQuery_SortByDir();
          goto LABEL_10;
        case 8:
          lazy protocol witness table accessor for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls();
LABEL_10:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_IndexElem.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t Node;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v21 = (uint64_t)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(int *)(type metadata accessor for PgQuery_IndexElem(0) + 20);
  v20 = v0;
  v8 = *(_QWORD *)(v0 + v7);
  v9 = *(_QWORD *)(v8 + 24);
  if ((v9 & 0x2000000000000000) != 0)
    v10 = HIBYTE(v9) & 0xF;
  else
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFLL;
  v11 = *(_QWORD *)(v0 + v7);
  swift_retain();
  if (v10)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    v12 = v1;
    if (v1)
    {
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = v1;
  }
  outlined init with copy of PgQuery_Alias?(v11 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v13 = (uint64_t)v4;
    v14 = v21;
    outlined init with take of PgQuery_OidList(v13, v21, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v12)
    {
      outlined destroy of PgQuery_Alias(v14, type metadata accessor for PgQuery_Node);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias(v14, type metadata accessor for PgQuery_Node);
  }
  v15 = *(_QWORD *)(v11
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexcolname
                  + 8);
  v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v16 = *(_QWORD *)(v11
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexcolname) & 0xFFFFFFFFFFFFLL;
  if (v16)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v12)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v11
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v12)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v11
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclass)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v12)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v11
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclassopts)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v12)
      return swift_release();
  }
  if (*(_QWORD *)(v11
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordering))
  {
    v17 = *(_BYTE *)(v11
                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordering
                   + 8);
    v22 = *(_QWORD *)(v11
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordering);
    v23 = v17;
    lazy protocol witness table accessor for type PgQuery_SortByDir and conformance PgQuery_SortByDir();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v12)
      return swift_release();
  }
  if (*(_QWORD *)(v11
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nullsOrdering))
  {
    v18 = *(_BYTE *)(v11
                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nullsOrdering
                   + 8);
    v22 = *(_QWORD *)(v11
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nullsOrdering);
    v23 = v18;
    lazy protocol witness table accessor for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v12)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_IndexElem@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_IndexElem._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_IndexElem()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_IndexElem()
{
  return PgQuery_IndexElem.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_IndexElem()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexElem and conformance PgQuery_IndexElem, type metadata accessor for PgQuery_IndexElem, (uint64_t)&protocol conformance descriptor for PgQuery_IndexElem);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_IndexElem@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_IndexElem._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_IndexElem()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexElem and conformance PgQuery_IndexElem, type metadata accessor for PgQuery_IndexElem, (uint64_t)&protocol conformance descriptor for PgQuery_IndexElem);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_IndexElem()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexElem and conformance PgQuery_IndexElem, type metadata accessor for PgQuery_IndexElem, (uint64_t)&protocol conformance descriptor for PgQuery_IndexElem);
  return Message.hash(into:)();
}

uint64_t PgQuery_Constraint._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t RangeVar;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0xE000000000000000;
  *(_WORD *)(v0 + 48) = 0;
  *(_DWORD *)(v0 + 52) = 0;
  *(_BYTE *)(v0 + 56) = 0;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawExpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  v4 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedExpr);
  *v4 = 0;
  v4[1] = 0xE000000000000000;
  v5 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generatedWhen);
  *v5 = 0;
  v5[1] = 0xE000000000000000;
  v6 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__keys) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__including) = v6;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclusions) = v6;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) = v6;
  v7 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexname);
  *v7 = 0;
  v7[1] = 0xE000000000000000;
  v8 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexspace);
  *v8 = 0;
  v8[1] = 0xE000000000000000;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc) = 0;
  v9 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod);
  *v9 = 0;
  v9[1] = 0xE000000000000000;
  v3(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, 1, 1, Node);
  v10 = v0
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__pktable;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v10, 1, 1, RangeVar);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkAttrs) = v6;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__pkAttrs) = v6;
  v12 = (_QWORD *)(v0
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkMatchtype);
  *v12 = 0;
  v12[1] = 0xE000000000000000;
  v13 = (_QWORD *)(v0
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkUpdAction);
  *v13 = 0;
  v13[1] = 0xE000000000000000;
  v14 = (_QWORD *)(v0
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkDelAction);
  *v14 = 0;
  v14[1] = 0xE000000000000000;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldConpfeqop) = v6;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldPktableOid) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipValidation) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initiallyValid) = 0;
  return v0;
}

uint64_t PgQuery_Constraint._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawExpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__pktable, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PgQuery_Constraint._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit((void (*)(void))PgQuery_Constraint._StorageClass.deinit);
}

uint64_t ObjC metadata update function for PgQuery_Constraint._StorageClass()
{
  return type metadata accessor for PgQuery_Constraint._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_Constraint._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Constraint._StorageClass);
}

void type metadata completion function for PgQuery_Constraint._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_Constraint.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_Constraint, (void (*)(_QWORD))type metadata accessor for PgQuery_Constraint._StorageClass, specialized PgQuery_Constraint._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_Constraint.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_Constraint.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_ConstrType and conformance PgQuery_ConstrType();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_14;
        case 2:
        case 8:
        case 9:
        case 14:
        case 15:
        case 17:
        case 22:
        case 23:
        case 24:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_14;
        case 3:
        case 4:
        case 6:
        case 16:
        case 27:
        case 28:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_14;
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_14;
        case 7:
        case 18:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          goto LABEL_9;
        case 10:
        case 11:
        case 12:
        case 13:
        case 20:
        case 21:
        case 25:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_14;
        case 19:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
LABEL_9:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_14;
        case 26:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
LABEL_14:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_Constraint.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_Constraint, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_Constraint.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_Constraint.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Node;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t RangeVar;
  char *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v4);
  v58 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v57 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v55 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v60 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v55 - v10;
  Node = type metadata accessor for PgQuery_Node(0);
  v13 = *(_QWORD *)(Node - 8);
  v14 = MEMORY[0x1E0C80A78](Node);
  v56 = (uint64_t)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v55 - v16;
  if (*(_QWORD *)(a1 + 16))
  {
    v18 = *(_BYTE *)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 16);
    v62 = v18;
    lazy protocol witness table accessor for type PgQuery_ConstrType and conformance PgQuery_ConstrType();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1)
      return result;
  }
  v20 = *(_QWORD *)(a1 + 32);
  v21 = *(_QWORD *)(a1 + 40);
  v63 = a1;
  v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0)
    v22 = v20 & 0xFFFFFFFFFFFFLL;
  if (v22)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v2)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_BYTE *)(v63 + 48) == 1)
  {
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v23 = v63;
    if (v2)
      return result;
  }
  else
  {
    v23 = v63;
  }
  if (*(_BYTE *)(v23 + 49) == 1)
  {
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v2)
      return result;
  }
  if (*(_DWORD *)(v23 + 52))
  {
    result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v2)
      return result;
  }
  if (*(_BYTE *)(v23 + 56) == 1)
  {
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v2)
      return result;
  }
  outlined init with copy of PgQuery_Alias?(v23+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawExpr, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v24(v11, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v17, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v25 = type metadata accessor for PgQuery_Node;
    if (v2)
      goto LABEL_22;
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node);
    v23 = v63;
  }
  v27 = *(_QWORD *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedExpr
                  + 8);
  v28 = HIBYTE(v27) & 0xF;
  if ((v27 & 0x2000000000000000) == 0)
    v28 = *(_QWORD *)(v23
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedExpr) & 0xFFFFFFFFFFFFLL;
  if (v28)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v2)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v29 = *(_QWORD *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generatedWhen
                  + 8);
  v30 = HIBYTE(v29) & 0xF;
  if ((v29 & 0x2000000000000000) == 0)
    v30 = *(_QWORD *)(v23
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generatedWhen) & 0xFFFFFFFFFFFFLL;
  if (v30)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v2)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v23
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__keys)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v2)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v23
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__including)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v2)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v23
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclusions)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v2)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v23
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v2)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v31 = *(_QWORD *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexname
                  + 8);
  v32 = HIBYTE(v31) & 0xF;
  if ((v31 & 0x2000000000000000) == 0)
    v32 = *(_QWORD *)(v23
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexname) & 0xFFFFFFFFFFFFLL;
  if (v32)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v2)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v33 = *(_QWORD *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexspace
                  + 8);
  v34 = HIBYTE(v33) & 0xF;
  if ((v33 & 0x2000000000000000) == 0)
    v34 = *(_QWORD *)(v23
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexspace) & 0xFFFFFFFFFFFFLL;
  if (v34)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v2)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_BYTE *)(v23
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc) == 1)
  {
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v2)
      return result;
  }
  v35 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v24;
  v36 = *(_QWORD *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                  + 8);
  v37 = HIBYTE(v36) & 0xF;
  if ((v36 & 0x2000000000000000) == 0)
    v37 = *(_QWORD *)(v23
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) & 0xFFFFFFFFFFFFLL;
  if (v37)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    v38 = (uint64_t)v60;
    if (v2)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v38 = (uint64_t)v60;
  }
  outlined init with copy of PgQuery_Alias?(v23+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v38, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v35(v38, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v38, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v39 = v38;
    v40 = v56;
    outlined init with take of PgQuery_OidList(v39, v56, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v25 = type metadata accessor for PgQuery_Node;
    v26 = v40;
    if (v2)
      return outlined destroy of PgQuery_Alias(v26, v25);
    outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
  }
  v42 = v58;
  v41 = RangeVar;
  outlined init with copy of PgQuery_Alias?(v23+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__pktable, v58, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v42, 1, v41) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v42, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    goto LABEL_75;
  }
  v17 = v55;
  outlined init with take of PgQuery_OidList(v42, (uint64_t)v55, type metadata accessor for PgQuery_RangeVar);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  v25 = type metadata accessor for PgQuery_RangeVar;
  if (v2)
  {
LABEL_22:
    v26 = (uint64_t)v17;
    return outlined destroy of PgQuery_Alias(v26, v25);
  }
  outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
LABEL_75:
  if (*(_QWORD *)(*(_QWORD *)(v23
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkAttrs)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v2)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v23
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__pkAttrs)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v2)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v43 = v63;
  v44 = *(_QWORD *)(v63
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkMatchtype
                  + 8);
  v45 = HIBYTE(v44) & 0xF;
  if ((v44 & 0x2000000000000000) == 0)
    v45 = *(_QWORD *)(v63
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkMatchtype) & 0xFFFFFFFFFFFFLL;
  if (!v45
    || (swift_bridgeObjectRetain(),
        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
        result = swift_bridgeObjectRelease(),
        !v2))
  {
    v46 = *(_QWORD *)(v43
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkUpdAction
                    + 8);
    v47 = HIBYTE(v46) & 0xF;
    if ((v46 & 0x2000000000000000) == 0)
      v47 = *(_QWORD *)(v43
                      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkUpdAction) & 0xFFFFFFFFFFFFLL;
    if (v47)
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
      result = swift_bridgeObjectRelease();
      v48 = v63;
      if (v2)
        return result;
    }
    else
    {
      v48 = v63;
    }
    v49 = *(_QWORD *)(v48
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkDelAction
                    + 8);
    v50 = HIBYTE(v49) & 0xF;
    if ((v49 & 0x2000000000000000) == 0)
      v50 = *(_QWORD *)(v48
                      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkDelAction) & 0xFFFFFFFFFFFFLL;
    if (v50)
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
      result = swift_bridgeObjectRelease();
      v51 = v63;
      if (v2)
        return result;
    }
    else
    {
      v51 = v63;
    }
    if (*(_QWORD *)(*(_QWORD *)(v51
                               + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldConpfeqop)
                   + 16))
    {
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      result = swift_bridgeObjectRelease();
      v52 = v63;
      if (v2)
        return result;
    }
    else
    {
      v52 = v63;
    }
    result = *(unsigned int *)(v52
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldPktableOid);
    if ((_DWORD)result)
    {
      result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
      v53 = v63;
      if (v2)
        return result;
    }
    else
    {
      v53 = v63;
    }
    if (*(_BYTE *)(v53
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipValidation) == 1)
    {
      result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      v54 = v63;
      if (v2)
        return result;
    }
    else
    {
      v54 = v63;
    }
    if (*(_BYTE *)(v54
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initiallyValid) == 1)
      return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #1 in static PgQuery_Constraint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  unsigned int (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t RangeVar;
  uint64_t v73;

  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v70 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v68 = (uint64_t)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v5);
  v71 = (uint64_t)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v69);
  v73 = (uint64_t)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v66 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v66 - v22;
  v24 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 24) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(a1 + 16) != v24)
    goto LABEL_19;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40)
    || (v25 = _stringCompareWithSmolCheck(_:_:expecting:)(), v26 = 0, (v25 & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)
      || *(unsigned __int8 *)(a1 + 49) != *(unsigned __int8 *)(a2 + 49)
      || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)
      || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56))
    {
      goto LABEL_19;
    }
    v66 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(a2
                                                                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawExpr);
    v67 = (uint64_t)&v23[*(int *)(v18 + 48)];
    outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawExpr, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined init with copy of PgQuery_Alias?((uint64_t)v66, v67, &demangling cache variable for type metadata for PgQuery_Node?);
    v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v27((uint64_t)v23, 1, Node) == 1)
    {
      v28 = v27(v67, 1, Node);
      swift_retain();
      swift_retain();
      if (v28 == 1)
      {
        v66 = v27;
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
        goto LABEL_22;
      }
    }
    else
    {
      outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v17, &demangling cache variable for type metadata for PgQuery_Node?);
      if (v27(v67, 1, Node) != 1)
      {
        v66 = v27;
        outlined init with take of PgQuery_OidList(v67, (uint64_t)v11, type metadata accessor for PgQuery_Node);
        swift_retain();
        swift_retain();
        LODWORD(v67) = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v17, (uint64_t)v11, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
        outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v67 & 1) == 0)
          goto LABEL_18;
LABEL_22:
        if ((*(_QWORD *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedExpr) != *(_QWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedExpr)
           || *(_QWORD *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedExpr
                        + 8) != *(_QWORD *)(a2
                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedExpr
                                          + 8))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_18;
        }
        if ((*(_QWORD *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generatedWhen) != *(_QWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generatedWhen)
           || *(_QWORD *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generatedWhen
                        + 8) != *(_QWORD *)(a2
                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generatedWhen
                                          + 8))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_18;
        }
        v32 = *(_QWORD *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__keys);
        v33 = *(_QWORD *)(a2
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__keys);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v34 = specialized static Array<A>.== infix(_:_:)(v32, v33);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v34 & 1) == 0)
          goto LABEL_18;
        v35 = *(_QWORD *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__including);
        v36 = *(_QWORD *)(a2
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__including);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v37 = specialized static Array<A>.== infix(_:_:)(v35, v36);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v37 & 1) == 0)
          goto LABEL_18;
        v38 = *(_QWORD *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclusions);
        v39 = *(_QWORD *)(a2
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclusions);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v40 = specialized static Array<A>.== infix(_:_:)(v38, v39);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v40 & 1) == 0)
          goto LABEL_18;
        v41 = *(_QWORD *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
        v42 = *(_QWORD *)(a2
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v43 = specialized static Array<A>.== infix(_:_:)(v41, v42);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v43 & 1) == 0)
          goto LABEL_18;
        if ((*(_QWORD *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexname) != *(_QWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexname)
           || *(_QWORD *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexname
                        + 8) != *(_QWORD *)(a2
                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexname
                                          + 8))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_18;
        }
        if ((*(_QWORD *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexspace) != *(_QWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexspace)
           || *(_QWORD *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexspace
                        + 8) != *(_QWORD *)(a2
                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexspace
                                          + 8))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          || *(unsigned __int8 *)(a1
                                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc) != *(unsigned __int8 *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc)
          || (*(_QWORD *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) != *(_QWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod)
           || *(_QWORD *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                        + 8) != *(_QWORD *)(a2
                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                                          + 8))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_18;
        }
        v44 = a2
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
        v45 = (uint64_t)&v21[*(int *)(v18 + 48)];
        outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined init with copy of PgQuery_Alias?(v44, v45, &demangling cache variable for type metadata for PgQuery_Node?);
        v46 = v66;
        if (v66((uint64_t)v21, 1, Node) == 1)
        {
          if (v46(v45, 1, Node) == 1)
          {
            outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_49:
            v48 = a2
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__pktable;
            v49 = v73;
            v50 = v73 + *(int *)(v69 + 48);
            outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__pktable, v73, &demangling cache variable for type metadata for PgQuery_RangeVar?);
            outlined init with copy of PgQuery_Alias?(v48, v50, &demangling cache variable for type metadata for PgQuery_RangeVar?);
            v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
            if (v51(v49, 1, RangeVar) == 1)
            {
              if (v51(v50, 1, RangeVar) == 1)
              {
                outlined destroy of (key: String, value: StorableValue)(v73, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_56:
                v55 = *(_QWORD *)(a1
                                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkAttrs);
                v56 = *(_QWORD *)(a2
                                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkAttrs);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v57 = specialized static Array<A>.== infix(_:_:)(v55, v56);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v57 & 1) != 0)
                {
                  v58 = *(_QWORD *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__pkAttrs);
                  v59 = *(_QWORD *)(a2
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__pkAttrs);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v60 = specialized static Array<A>.== infix(_:_:)(v58, v59);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v60 & 1) != 0
                    && (*(_QWORD *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkMatchtype) == *(_QWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkMatchtype)
                     && *(_QWORD *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkMatchtype
                                  + 8) == *(_QWORD *)(a2
                                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkMatchtype
                                                    + 8)
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    && (*(_QWORD *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkUpdAction) == *(_QWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkUpdAction)
                     && *(_QWORD *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkUpdAction
                                  + 8) == *(_QWORD *)(a2
                                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkUpdAction
                                                    + 8)
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    && (*(_QWORD *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkDelAction) == *(_QWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkDelAction)
                     && *(_QWORD *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkDelAction
                                  + 8) == *(_QWORD *)(a2
                                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkDelAction
                                                    + 8)
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
                  {
                    v61 = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldConpfeqop);
                    v62 = *(_QWORD *)(a2
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldConpfeqop);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    v63 = specialized static Array<A>.== infix(_:_:)(v61, v62);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v63 & 1) != 0
                      && *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldPktableOid) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldPktableOid)
                      && *(unsigned __int8 *)(a1
                                            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipValidation) == *(unsigned __int8 *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipValidation))
                    {
                      v64 = *(_BYTE *)(a1
                                     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initiallyValid);
                      swift_release();
                      v65 = *(_BYTE *)(a2
                                     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initiallyValid);
                      swift_release();
                      v26 = v64 ^ v65 ^ 1;
                      return v26 & 1;
                    }
                  }
                }
                goto LABEL_18;
              }
            }
            else
            {
              outlined init with copy of PgQuery_Alias?(v73, v71, &demangling cache variable for type metadata for PgQuery_RangeVar?);
              if (v51(v50, 1, RangeVar) != 1)
              {
                v52 = v68;
                outlined init with take of PgQuery_OidList(v50, v68, type metadata accessor for PgQuery_RangeVar);
                v53 = v71;
                v54 = specialized static PgQuery_RangeVar.== infix(_:_:)(v71, v52);
                outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_RangeVar);
                outlined destroy of PgQuery_Alias(v53, type metadata accessor for PgQuery_RangeVar);
                outlined destroy of (key: String, value: StorableValue)(v73, &demangling cache variable for type metadata for PgQuery_RangeVar?);
                if ((v54 & 1) != 0)
                  goto LABEL_56;
LABEL_18:
                swift_release();
                swift_release();
LABEL_19:
                v26 = 0;
                return v26 & 1;
              }
              outlined destroy of PgQuery_Alias(v71, type metadata accessor for PgQuery_RangeVar);
            }
            v29 = &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?);
            v30 = v73;
LABEL_17:
            outlined destroy of (key: String, value: StorableValue)(v30, v29);
            goto LABEL_18;
          }
        }
        else
        {
          outlined init with copy of PgQuery_Alias?((uint64_t)v21, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
          if (v46(v45, 1, Node) != 1)
          {
            outlined init with take of PgQuery_OidList(v45, (uint64_t)v11, type metadata accessor for PgQuery_Node);
            v47 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v15, (uint64_t)v11, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
            outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
            outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
            outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Node?);
            if ((v47 & 1) == 0)
              goto LABEL_18;
            goto LABEL_49;
          }
          outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
        }
        v29 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
        v30 = (uint64_t)v21;
        goto LABEL_17;
      }
      swift_retain();
      swift_retain();
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node);
    }
    v29 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    v30 = (uint64_t)v23;
    goto LABEL_17;
  }
  return v26 & 1;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Constraint@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_Constraint._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Constraint()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Constraint()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Constraint and conformance PgQuery_Constraint, type metadata accessor for PgQuery_Constraint, (uint64_t)&protocol conformance descriptor for PgQuery_Constraint);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Constraint@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Constraint._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Constraint()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Constraint and conformance PgQuery_Constraint, type metadata accessor for PgQuery_Constraint, (uint64_t)&protocol conformance descriptor for PgQuery_Constraint);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Constraint()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Constraint and conformance PgQuery_Constraint, type metadata accessor for PgQuery_Constraint, (uint64_t)&protocol conformance descriptor for PgQuery_Constraint);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_Constraint(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_Constraint, closure #1 in static PgQuery_Constraint.== infix(_:_:)) & 1;
}

uint64_t PgQuery_DefElem._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_DefElem._StorageClass()
{
  return type metadata accessor for PgQuery_DefElem._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_DefElem._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DefElem._StorageClass);
}

void type metadata completion function for PgQuery_DefElem._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_DefElem.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_DefElem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_DefElem._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    v6 = specialized PgQuery_DefElem._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 2:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_7;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 4:
          lazy protocol witness table accessor for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_DefElem.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t Node;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v17 = (uint64_t)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(int *)(type metadata accessor for PgQuery_DefElem(0) + 20);
  v16 = v0;
  v8 = *(_QWORD **)(v0 + v7);
  v9 = v8[3];
  if ((v9 & 0x2000000000000000) != 0)
    v10 = HIBYTE(v9) & 0xF;
  else
    v10 = v8[2] & 0xFFFFFFFFFFFFLL;
  swift_retain();
  if (v10)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  v11 = v8[5];
  v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0)
    v12 = v8[4] & 0xFFFFFFFFFFFFLL;
  if (v12)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v8+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v13 = v17;
    outlined init with take of PgQuery_OidList((uint64_t)v4, v17, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_Node);
    if (v1)
      return swift_release();
  }
  if (*(_QWORD *)((char *)v8
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defaction))
  {
    v14 = *((_BYTE *)v8
          + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defaction
          + 8);
    v18 = *(_QWORD *)((char *)v8
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defaction);
    v19 = v14;
    lazy protocol witness table accessor for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  if (*(_DWORD *)((char *)v8
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DefElem@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_DefElem._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DefElem()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DefElem()
{
  return PgQuery_DefElem.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DefElem()
{
  return PgQuery_DefElem.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DefElem()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefElem and conformance PgQuery_DefElem, type metadata accessor for PgQuery_DefElem, (uint64_t)&protocol conformance descriptor for PgQuery_DefElem);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DefElem@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DefElem._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DefElem()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefElem and conformance PgQuery_DefElem, type metadata accessor for PgQuery_DefElem, (uint64_t)&protocol conformance descriptor for PgQuery_DefElem);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DefElem()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefElem and conformance PgQuery_DefElem, type metadata accessor for PgQuery_DefElem, (uint64_t)&protocol conformance descriptor for PgQuery_DefElem);
  return Message.hash(into:)();
}

uint64_t PgQuery_RangeTblEntry._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t TableSampleClause;
  uint64_t v3;
  uint64_t Query;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TableFunc;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t Alias;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_DWORD *)(v0 + 28) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0xE000000000000000;
  *(_DWORD *)(v0 + 48) = 0;
  v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablesample;
  TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TableSampleClause - 8) + 56))(v1, 1, 1, TableSampleClause);
  v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery;
  Query = type metadata accessor for PgQuery_Query(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Query - 8) + 56))(v3, 1, 1, Query);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityBarrier) = 0;
  v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinmergedcols) = 0;
  v6 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinaliasvars) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinleftcols) = v6;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinrightcols) = v6;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__functions) = v6;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcordinality) = 0;
  v7 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablefunc;
  TableFunc = type metadata accessor for PgQuery_TableFunc(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TableFunc - 8) + 56))(v7, 1, 1, TableFunc);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists) = v6;
  v9 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename);
  *v9 = 0;
  v9[1] = 0xE000000000000000;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctelevelsup) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selfReference) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes) = v6;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods) = v6;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations) = v6;
  v10 = (_QWORD *)(v0
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname);
  *v10 = 0;
  v10[1] = 0xE000000000000000;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrtuples) = 0;
  v11 = v0
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
  Alias = type metadata accessor for PgQuery_Alias(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Alias - 8) + 56);
  v13(v11, 1, 1, Alias);
  v13(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__eref, 1, 1, Alias);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lateral) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inh) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inFromCl) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__requiredPerms) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__checkAsUser) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectedCols) = v6;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__insertedCols) = v6;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__updatedCols) = v6;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extraUpdatedCols) = v6;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityQuals) = v6;
  return v0;
}

uint64_t PgQuery_RangeTblEntry._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t TableSampleClause;
  uint64_t v5;
  uint64_t Query;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t TableFunc;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t Alias;
  void (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  *(_DWORD *)(v1 + 28) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0xE000000000000000;
  *(_DWORD *)(v1 + 48) = 0;
  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablesample;
  v30 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablesample;
  TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TableSampleClause - 8) + 56))(v3, 1, 1, TableSampleClause);
  v5 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery;
  v28 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery;
  Query = type metadata accessor for PgQuery_Query(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Query - 8) + 56))(v5, 1, 1, Query);
  v26 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityBarrier;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityBarrier) = 0;
  v7 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v27 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinmergedcols;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinmergedcols) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinaliasvars;
  v9 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinaliasvars) = MEMORY[0x1E0DEE9D8];
  v29 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinleftcols;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinleftcols) = v9;
  v31 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinrightcols;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinrightcols) = v9;
  v32 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__functions;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__functions) = v9;
  v35 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcordinality;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcordinality) = 0;
  v10 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablefunc;
  v34 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablefunc;
  TableFunc = type metadata accessor for PgQuery_TableFunc(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TableFunc - 8) + 56))(v10, 1, 1, TableFunc);
  v33 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists) = v9;
  v12 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename);
  *v12 = 0;
  v12[1] = 0xE000000000000000;
  v38 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctelevelsup;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctelevelsup) = 0;
  v37 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selfReference;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selfReference) = 0;
  v36 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes) = v9;
  v39 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods) = v9;
  v40 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations) = v9;
  v13 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname);
  *v13 = 0;
  v13[1] = 0xE000000000000000;
  v49 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrtuples;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrtuples) = 0;
  v14 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
  v48 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
  Alias = type metadata accessor for PgQuery_Alias(0);
  v16 = *(void (**)(void))(*(_QWORD *)(Alias - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v16)(v14, 1, 1, Alias);
  v47 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__eref;
  v16();
  v46 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lateral;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lateral) = 0;
  v45 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inh;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inh) = 0;
  v44 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inFromCl;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inFromCl) = 0;
  v43 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__requiredPerms;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__requiredPerms) = 0;
  v42 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__checkAsUser;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__checkAsUser) = 0;
  v41 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectedCols;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectedCols) = v9;
  v17 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__insertedCols;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__insertedCols) = v9;
  v50 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__updatedCols;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__updatedCols) = v9;
  v51 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extraUpdatedCols;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extraUpdatedCols) = v9;
  v18 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityQuals;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityQuals) = v9;
  v19 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v1 + 24) = v19;
  *(_DWORD *)(v1 + 28) = *(_DWORD *)(a1 + 28);
  v20 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v1 + 40) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + 48) = *(_DWORD *)(a1 + 48);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablesample, v30, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery, v28, &demangling cache variable for type metadata for PgQuery_Query?);
  *(_BYTE *)(v1 + v26) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityBarrier);
  v21 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype
                 + 8);
  *(_QWORD *)v7 = *(_QWORD *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype);
  *(_BYTE *)(v7 + 8) = v21;
  *(_DWORD *)(v1 + v27) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinmergedcols);
  *(_QWORD *)(v1 + v8) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinaliasvars);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v29) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinleftcols);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v31) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinrightcols);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v32) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__functions);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v1 + v35) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcordinality);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablefunc, v34, &demangling cache variable for type metadata for PgQuery_TableFunc?);
  *(_QWORD *)(v1 + v33) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename
                  + 8);
  *v12 = *(_QWORD *)(a1
                   + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename);
  v12[1] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v38) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctelevelsup);
  *(_BYTE *)(v1 + v37) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selfReference);
  *(_QWORD *)(v1 + v36) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v39) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v40) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname
                  + 8);
  *v13 = *(_QWORD *)(a1
                   + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname);
  v13[1] = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v49) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrtuples);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, v48, &demangling cache variable for type metadata for PgQuery_Alias?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__eref, v47, &demangling cache variable for type metadata for PgQuery_Alias?);
  *(_BYTE *)(v1 + v46) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lateral);
  *(_BYTE *)(v1 + v45) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inh);
  *(_BYTE *)(v1 + v44) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inFromCl);
  *(_DWORD *)(v1 + v43) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__requiredPerms);
  *(_DWORD *)(v1 + v42) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__checkAsUser);
  *(_QWORD *)(v1 + v41) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectedCols);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v17) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__insertedCols);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v50) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__updatedCols);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v51) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extraUpdatedCols);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityQuals);
  swift_bridgeObjectRetain();
  swift_release();
  *(_QWORD *)(v1 + v18) = v24;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PgQuery_RangeTblEntry._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablesample, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery, &demangling cache variable for type metadata for PgQuery_Query?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablefunc, &demangling cache variable for type metadata for PgQuery_TableFunc?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, &demangling cache variable for type metadata for PgQuery_Alias?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__eref, &demangling cache variable for type metadata for PgQuery_Alias?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PgQuery_RangeTblEntry._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit((void (*)(void))PgQuery_RangeTblEntry._StorageClass.deinit);
}

uint64_t PgQuery_TableFunc._StorageClass.__deallocating_deinit(void (*a1)(void))
{
  a1();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_RangeTblEntry._StorageClass()
{
  return type metadata accessor for PgQuery_RangeTblEntry._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RangeTblEntry._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTblEntry._StorageClass);
}

void type metadata completion function for PgQuery_RangeTblEntry._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_TableSampleClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_TableSampleClause);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Query?, (void (*)(uint64_t))type metadata accessor for PgQuery_Query);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_TableFunc?, (void (*)(uint64_t))type metadata accessor for PgQuery_TableFunc);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Alias?, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
        if (v3 <= 0x3F)
          swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t type metadata accessor for PgQuery_TableSampleClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TableSampleClause);
}

uint64_t type metadata accessor for PgQuery_Query(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Query);
}

uint64_t type metadata accessor for PgQuery_TableFunc(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TableFunc);
}

uint64_t PgQuery_RangeTblEntry.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RangeTblEntry, (void (*)(_QWORD))type metadata accessor for PgQuery_RangeTblEntry._StorageClass, PgQuery_RangeTblEntry._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RangeTblEntry.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_RangeTblEntry.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_RTEKind and conformance PgQuery_RTEKind();
          goto LABEL_9;
        case 2:
        case 18:
        case 30:
        case 31:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_20;
        case 3:
        case 17:
        case 23:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_20;
        case 4:
        case 9:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_20;
        case 5:
          type metadata accessor for PgQuery_TableSampleClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, type metadata accessor for PgQuery_TableSampleClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableSampleClause);
          goto LABEL_15;
        case 6:
          type metadata accessor for PgQuery_Query(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, type metadata accessor for PgQuery_Query, (uint64_t)&protocol conformance descriptor for PgQuery_Query);
          goto LABEL_15;
        case 7:
        case 14:
        case 19:
        case 27:
        case 28:
        case 29:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_20;
        case 8:
          lazy protocol witness table accessor for type PgQuery_JoinType and conformance PgQuery_JoinType();
LABEL_9:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_20;
        case 10:
        case 11:
        case 12:
        case 13:
        case 16:
        case 20:
        case 21:
        case 22:
        case 36:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_20;
        case 15:
          type metadata accessor for PgQuery_TableFunc(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, type metadata accessor for PgQuery_TableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_TableFunc);
          goto LABEL_15;
        case 24:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_20;
        case 25:
        case 26:
          type metadata accessor for PgQuery_Alias(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
LABEL_15:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_20;
        case 32:
        case 33:
        case 34:
        case 35:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
LABEL_20:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RangeTblEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_RangeTblEntry, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RangeTblEntry.traverse<A>(visitor:));
}

uint64_t PgQuery_Node.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v10;
  uint64_t result;

  a4(0);
  v10 = swift_retain();
  a5(v10, a1, a2, a3);
  result = swift_release();
  if (!v5)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in PgQuery_RangeTblEntry.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t TableSampleClause;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t Alias;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t TableFunc;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t Query;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v51 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v52 = (uint64_t)&v47 - v6;
  Alias = type metadata accessor for PgQuery_Alias(0);
  v49 = *(_QWORD *)(Alias - 8);
  v7 = MEMORY[0x1E0C80A78](Alias);
  v48 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v50 = (uint64_t)&v47 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TableFunc?);
  MEMORY[0x1E0C80A78](v10);
  v56 = (uint64_t)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  TableFunc = type metadata accessor for PgQuery_TableFunc(0);
  v55 = *(_QWORD *)(TableFunc - 8);
  MEMORY[0x1E0C80A78](TableFunc);
  v54 = (uint64_t)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Query?);
  MEMORY[0x1E0C80A78](v13);
  v60 = (uint64_t)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Query = type metadata accessor for PgQuery_Query(0);
  v59 = *(_QWORD *)(Query - 8);
  MEMORY[0x1E0C80A78](Query);
  v58 = (uint64_t)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
  v20 = *(_QWORD *)(TableSampleClause - 8);
  MEMORY[0x1E0C80A78](TableSampleClause);
  v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    v23 = *(_BYTE *)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 16);
    v62 = v23;
    lazy protocol witness table accessor for type PgQuery_RTEKind and conformance PgQuery_RTEKind();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1)
      return result;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v1)
      return result;
  }
  v25 = v1;
  v26 = *(_QWORD *)(a1 + 32);
  v27 = *(_QWORD *)(a1 + 40);
  v47 = a1;
  v28 = HIBYTE(v27) & 0xF;
  if ((v27 & 0x2000000000000000) == 0)
    v28 = v26 & 0xFFFFFFFFFFFFLL;
  if (v28)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v25)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_DWORD *)(v47 + 48))
  {
    result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v25)
      return result;
    v25 = 0;
  }
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablesample, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, TableSampleClause) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
    v29 = v25;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v22, type metadata accessor for PgQuery_TableSampleClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, type metadata accessor for PgQuery_TableSampleClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableSampleClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v29 = v25;
    v30 = type metadata accessor for PgQuery_TableSampleClause;
    v31 = (uint64_t)v22;
    if (v25)
      return outlined destroy of PgQuery_Alias(v31, v30);
    outlined destroy of PgQuery_Alias((uint64_t)v22, type metadata accessor for PgQuery_TableSampleClause);
  }
  v32 = v60;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery, v60, &demangling cache variable for type metadata for PgQuery_Query?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v32, 1, Query) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v32, &demangling cache variable for type metadata for PgQuery_Query?);
  }
  else
  {
    v33 = v32;
    v34 = v58;
    outlined init with take of PgQuery_OidList(v33, v58, type metadata accessor for PgQuery_Query);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, type metadata accessor for PgQuery_Query, (uint64_t)&protocol conformance descriptor for PgQuery_Query);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v30 = type metadata accessor for PgQuery_Query;
    v31 = v34;
    if (v29)
      return outlined destroy of PgQuery_Alias(v31, v30);
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Query);
  }
  if (*(_BYTE *)(v47
                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityBarrier) == 1)
  {
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v29)
      return result;
  }
  v35 = v47;
  if (*(_QWORD *)(v47
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype))
  {
    v36 = *(_BYTE *)(v47
                   + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype
                   + 8);
    v61 = *(_QWORD *)(v47
                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype);
    v62 = v36;
    lazy protocol witness table accessor for type PgQuery_JoinType and conformance PgQuery_JoinType();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v29)
      return result;
  }
  if (*(_DWORD *)(v35
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinmergedcols))
  {
    result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v29)
      return result;
  }
  if (*(_QWORD *)(*(_QWORD *)(v35
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinaliasvars)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v29)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v35
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinleftcols)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v29)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v35
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinrightcols)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v29)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v35
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__functions)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v29)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_BYTE *)(v35
                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcordinality) == 1)
  {
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v29)
      return result;
  }
  v37 = v47;
  v38 = v56;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablefunc, v56, &demangling cache variable for type metadata for PgQuery_TableFunc?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v38, 1, TableFunc) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v38, &demangling cache variable for type metadata for PgQuery_TableFunc?);
    goto LABEL_47;
  }
  v39 = v54;
  outlined init with take of PgQuery_OidList(v38, v54, type metadata accessor for PgQuery_TableFunc);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, type metadata accessor for PgQuery_TableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_TableFunc);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  v30 = type metadata accessor for PgQuery_TableFunc;
  v31 = v39;
  if (v29)
    return outlined destroy of PgQuery_Alias(v31, v30);
  outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_TableFunc);
LABEL_47:
  if (*(_QWORD *)(*(_QWORD *)(v37
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v29)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v40 = *(_QWORD *)(v37
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename
                  + 8);
  v41 = HIBYTE(v40) & 0xF;
  if ((v40 & 0x2000000000000000) == 0)
    v41 = *(_QWORD *)(v37
                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename) & 0xFFFFFFFFFFFFLL;
  if (v41)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v29)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_DWORD *)(v37
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctelevelsup))
  {
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v29)
      return result;
  }
  if (*(_BYTE *)(v37
                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selfReference) == 1)
  {
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v29)
      return result;
  }
  if (*(_QWORD *)(*(_QWORD *)(v47
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v29)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v47
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v29)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v47
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (!v29)
    {
      swift_bridgeObjectRelease();
      goto LABEL_68;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_68:
  v42 = *(_QWORD *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname
                  + 8);
  v43 = HIBYTE(v42) & 0xF;
  if ((v42 & 0x2000000000000000) == 0)
    v43 = *(_QWORD *)(v47
                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname) & 0xFFFFFFFFFFFFLL;
  if (v43)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v29)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(double *)(v47
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrtuples) == 0.0
    || (result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v29))
  {
    v44 = v52;
    outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, v52, &demangling cache variable for type metadata for PgQuery_Alias?);
    v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
    if (v45(v44, 1, Alias) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v52, &demangling cache variable for type metadata for PgQuery_Alias?);
    }
    else
    {
      outlined init with take of PgQuery_OidList(v52, v50, type metadata accessor for PgQuery_Alias);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      if (v29)
        return outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Alias);
      outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Alias);
    }
    v46 = v51;
    outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__eref, v51, &demangling cache variable for type metadata for PgQuery_Alias?);
    if (v45(v46, 1, Alias) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v51, &demangling cache variable for type metadata for PgQuery_Alias?);
    }
    else
    {
      outlined init with take of PgQuery_OidList(v51, v48, type metadata accessor for PgQuery_Alias);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      if (v29)
        return outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Alias);
      outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Alias);
    }
    if (*(_BYTE *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lateral) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v29))
    {
      if (*(_BYTE *)(v47
                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inh) != 1
        || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v29))
      {
        if (*(_BYTE *)(v47
                      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inFromCl) != 1
          || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v29))
        {
          if (!*(_DWORD *)(v47
                          + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__requiredPerms)
            || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v29))
          {
            result = *(unsigned int *)(v47
                                     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__checkAsUser);
            if (!(_DWORD)result
              || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v29))
            {
              if (*(_QWORD *)(*(_QWORD *)(v47
                                         + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectedCols)
                             + 16))
              {
                swift_bridgeObjectRetain();
                dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)();
                if (v29)
                  return swift_bridgeObjectRelease();
                result = swift_bridgeObjectRelease();
              }
              if (*(_QWORD *)(*(_QWORD *)(v47
                                         + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__insertedCols)
                             + 16))
              {
                swift_bridgeObjectRetain();
                dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)();
                if (v29)
                  return swift_bridgeObjectRelease();
                result = swift_bridgeObjectRelease();
              }
              if (*(_QWORD *)(*(_QWORD *)(v47
                                         + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__updatedCols)
                             + 16))
              {
                swift_bridgeObjectRetain();
                dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)();
                if (v29)
                  return swift_bridgeObjectRelease();
                result = swift_bridgeObjectRelease();
              }
              if (*(_QWORD *)(*(_QWORD *)(v47
                                         + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extraUpdatedCols)
                             + 16))
              {
                swift_bridgeObjectRetain();
                dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)();
                if (v29)
                  return swift_bridgeObjectRelease();
                result = swift_bridgeObjectRelease();
              }
              if (*(_QWORD *)(*(_QWORD *)(v47
                                         + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityQuals)
                             + 16))
              {
                type metadata accessor for PgQuery_Node(0);
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
                swift_bridgeObjectRetain();
                dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
                return swift_bridgeObjectRelease();
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in static PgQuery_RangeTblEntry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t TableSampleClause;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  int v45;
  uint64_t v46;
  uint64_t *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  char v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t Alias;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t TableFunc;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t Query;

  Alias = type metadata accessor for PgQuery_Alias(0);
  v119 = *(_QWORD *)(Alias - 8);
  v3 = MEMORY[0x1E0C80A78](Alias);
  v117 = (uint64_t *)((char *)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v3);
  v115 = (uint64_t *)((char *)&v111 - v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v116 = (uint64_t *)((char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v7);
  v114 = (uint64_t *)((char *)&v111 - v9);
  v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?));
  v10 = MEMORY[0x1E0C80A78](v121);
  v118 = (uint64_t)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v120 = (uint64_t)&v111 - v12;
  TableFunc = type metadata accessor for PgQuery_TableFunc(0);
  v125 = *(_QWORD *)(TableFunc - 8);
  MEMORY[0x1E0C80A78](TableFunc);
  v123 = (uint64_t)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TableFunc?);
  MEMORY[0x1E0C80A78](v14);
  v126 = (uint64_t)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TableFunc?, PgQuery_TableFunc?));
  MEMORY[0x1E0C80A78](v124);
  v128 = (uint64_t)&v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Query = type metadata accessor for PgQuery_Query(0);
  v17 = *(_QWORD *)(Query - 8);
  MEMORY[0x1E0C80A78](Query);
  v129 = (uint64_t)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Query?);
  MEMORY[0x1E0C80A78](v19);
  v130 = (uint64_t)&v111 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Query?, PgQuery_Query?));
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v111 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
  v25 = *(_QWORD *)(TableSampleClause - 8);
  MEMORY[0x1E0C80A78](TableSampleClause);
  v27 = (char *)&v111 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)&v111 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TableSampleClause?, PgQuery_TableSampleClause?));
  MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v111 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 24) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(v32 + 16) != v35 || *(_DWORD *)(v32 + 28) != *(_DWORD *)(a2 + 28))
  {
LABEL_12:
    v42 = 0;
    return v42 & 1;
  }
  v36 = *(_QWORD *)(v32 + 32);
  v37 = *(_QWORD *)(v32 + 40);
  v38 = *(_QWORD *)(a2 + 32);
  v39 = *(_QWORD *)(a2 + 40);
  v113 = a2;
  if (v36 == v38 && v37 == v39
    || (v40 = v32, v41 = _stringCompareWithSmolCheck(_:_:expecting:)(), v32 = v40, v42 = 0, (v41 & 1) != 0))
  {
    if (*(_DWORD *)(v32 + 48) == *(_DWORD *)(v113 + 48))
    {
      v111 = v113
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablesample;
      v112 = v32;
      v43 = (uint64_t)&v34[*(int *)(v31 + 48)];
      outlined init with copy of PgQuery_Alias?(v32+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablesample, (uint64_t)v34, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
      outlined init with copy of PgQuery_Alias?(v111, v43, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
      v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
      if (v44((uint64_t)v34, 1, TableSampleClause) == 1)
      {
        v45 = v44(v43, 1, TableSampleClause);
        v46 = v112;
        swift_retain();
        swift_retain();
        if (v45 == 1)
        {
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
LABEL_18:
          v51 = v113;
          v52 = v113
              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery;
          v53 = (uint64_t)&v23[*(int *)(v21 + 48)];
          outlined init with copy of PgQuery_Alias?(v46+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Query?);
          outlined init with copy of PgQuery_Alias?(v52, v53, &demangling cache variable for type metadata for PgQuery_Query?);
          v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
          v55 = Query;
          if (v54((uint64_t)v23, 1, Query) == 1)
          {
            if (v54(v53, 1, v55) == 1)
            {
              outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Query?);
LABEL_28:
              if (*(unsigned __int8 *)(v46
                                      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityBarrier) == *(unsigned __int8 *)(v51 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityBarrier)
                && (specialized == infix<A>(_:_:)(*(_QWORD *)(v46+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype), *(unsigned __int8 *)(v46+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype+ 8), *(_QWORD *)(v51+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype), *(unsigned __int8 *)(v51+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype+ 8)) & 1) != 0&& *(_DWORD *)(v46+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinmergedcols) == *(_DWORD *)(v51 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinmergedcols))
              {
                v59 = *(_QWORD *)(v46
                                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinaliasvars);
                v60 = *(_QWORD *)(v51
                                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinaliasvars);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v61 = specialized static Array<A>.== infix(_:_:)(v59, v60);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v61 & 1) != 0)
                {
                  v62 = *(_QWORD *)(v46
                                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinleftcols);
                  v63 = *(_QWORD *)(v51
                                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinleftcols);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v64 = specialized static Array<A>.== infix(_:_:)(v62, v63);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v64 & 1) != 0)
                  {
                    v65 = *(_QWORD *)(v46
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinrightcols);
                    v66 = *(_QWORD *)(v51
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinrightcols);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    v67 = specialized static Array<A>.== infix(_:_:)(v65, v66);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v67 & 1) != 0)
                    {
                      v68 = *(_QWORD *)(v46
                                      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__functions);
                      v69 = *(_QWORD *)(v51
                                      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__functions);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      v70 = specialized static Array<A>.== infix(_:_:)(v68, v69);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v70 & 1) == 0)
                        goto LABEL_92;
                      if (*(unsigned __int8 *)(v46
                                              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcordinality) == *(unsigned __int8 *)(v51 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcordinality))
                      {
                        v71 = v113
                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablefunc;
                        v72 = v128;
                        v73 = v128 + *(int *)(v124 + 48);
                        outlined init with copy of PgQuery_Alias?(v46+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablefunc, v128, &demangling cache variable for type metadata for PgQuery_TableFunc?);
                        outlined init with copy of PgQuery_Alias?(v71, v73, &demangling cache variable for type metadata for PgQuery_TableFunc?);
                        v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48);
                        if (v74(v72, 1, TableFunc) == 1)
                        {
                          if (v74(v73, 1, TableFunc) == 1)
                          {
                            outlined destroy of (key: String, value: StorableValue)(v128, &demangling cache variable for type metadata for PgQuery_TableFunc?);
                            goto LABEL_44;
                          }
                        }
                        else
                        {
                          outlined init with copy of PgQuery_Alias?(v128, v126, &demangling cache variable for type metadata for PgQuery_TableFunc?);
                          if (v74(v73, 1, TableFunc) != 1)
                          {
                            v77 = v123;
                            outlined init with take of PgQuery_OidList(v73, v123, type metadata accessor for PgQuery_TableFunc);
                            v78 = v126;
                            v79 = specialized static PgQuery_TableFunc.== infix(_:_:)(v126, v77);
                            outlined destroy of PgQuery_Alias(v77, type metadata accessor for PgQuery_TableFunc);
                            outlined destroy of PgQuery_Alias(v78, type metadata accessor for PgQuery_TableFunc);
                            outlined destroy of (key: String, value: StorableValue)(v128, &demangling cache variable for type metadata for PgQuery_TableFunc?);
                            if ((v79 & 1) == 0)
                              goto LABEL_92;
LABEL_44:
                            v80 = *(_QWORD *)(v46
                                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists);
                            v81 = *(_QWORD *)(v113
                                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists);
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            v82 = specialized static Array<A>.== infix(_:_:)(v80, v81);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            if ((v82 & 1) == 0)
                              goto LABEL_92;
                            if (*(_QWORD *)(v46
                                           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename) != *(_QWORD *)(v113 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename)
                              || *(_QWORD *)(v46
                                           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename
                                           + 8) != *(_QWORD *)(v113
                                                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename
                                                             + 8))
                            {
                              v42 = 0;
                              if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                                goto LABEL_26;
                            }
                            if (*(_DWORD *)(v46
                                           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctelevelsup) != *(_DWORD *)(v113 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctelevelsup))
                              goto LABEL_92;
                            if (*(unsigned __int8 *)(v46
                                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selfReference) != *(unsigned __int8 *)(v113 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selfReference))
                              goto LABEL_92;
                            v83 = *(_QWORD *)(v46
                                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes);
                            v84 = *(_QWORD *)(v113
                                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes);
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            v85 = specialized static Array<A>.== infix(_:_:)(v83, v84);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            if ((v85 & 1) == 0)
                              goto LABEL_92;
                            v86 = *(_QWORD *)(v46
                                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods);
                            v87 = *(_QWORD *)(v113
                                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods);
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            v88 = specialized static Array<A>.== infix(_:_:)(v86, v87);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            if ((v88 & 1) == 0)
                              goto LABEL_92;
                            v89 = *(_QWORD *)(v46
                                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations);
                            v90 = *(_QWORD *)(v113
                                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations);
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            v91 = specialized static Array<A>.== infix(_:_:)(v89, v90);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            if ((v91 & 1) == 0)
                              goto LABEL_92;
                            if (*(_QWORD *)(v46
                                           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname) != *(_QWORD *)(v113 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname)
                              || *(_QWORD *)(v46
                                           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname
                                           + 8) != *(_QWORD *)(v113
                                                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname
                                                             + 8))
                            {
                              v42 = 0;
                              if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                                goto LABEL_26;
                            }
                            if (*(double *)(v46
                                           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrtuples) != *(double *)(v113 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrtuples))
                              goto LABEL_92;
                            v92 = v113
                                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
                            v93 = v120;
                            v94 = v120 + *(int *)(v121 + 48);
                            outlined init with copy of PgQuery_Alias?(v46+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, v120, &demangling cache variable for type metadata for PgQuery_Alias?);
                            outlined init with copy of PgQuery_Alias?(v92, v94, &demangling cache variable for type metadata for PgQuery_Alias?);
                            v95 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v119 + 48);
                            if (v95(v93, 1, Alias) == 1)
                            {
                              if (v95(v94, 1, Alias) == 1)
                              {
                                outlined destroy of (key: String, value: StorableValue)(v120, &demangling cache variable for type metadata for PgQuery_Alias?);
                                goto LABEL_60;
                              }
                            }
                            else
                            {
                              outlined init with copy of PgQuery_Alias?(v120, (uint64_t)v114, &demangling cache variable for type metadata for PgQuery_Alias?);
                              if (v95(v94, 1, Alias) != 1)
                              {
                                v101 = v94;
                                v102 = v115;
                                outlined init with take of PgQuery_OidList(v101, (uint64_t)v115, type metadata accessor for PgQuery_Alias);
                                if ((*v114 == *v102 && v114[1] == v102[1]
                                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                  && (specialized static Array<A>.== infix(_:_:)(v114[2], v115[2]) & 1) != 0)
                                {
                                  v104 = v114;
                                  v103 = (uint64_t)v115;
                                  type metadata accessor for UnknownStorage();
                                  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
                                  v105 = dispatch thunk of static Equatable.== infix(_:_:)();
                                  outlined destroy of PgQuery_Alias(v103, type metadata accessor for PgQuery_Alias);
                                  outlined destroy of PgQuery_Alias((uint64_t)v104, type metadata accessor for PgQuery_Alias);
                                  outlined destroy of (key: String, value: StorableValue)(v120, &demangling cache variable for type metadata for PgQuery_Alias?);
                                  if ((v105 & 1) == 0)
                                    goto LABEL_92;
LABEL_60:
                                  v96 = v113
                                      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__eref;
                                  v97 = v118;
                                  v98 = v118 + *(int *)(v121 + 48);
                                  outlined init with copy of PgQuery_Alias?(v46+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__eref, v118, &demangling cache variable for type metadata for PgQuery_Alias?);
                                  outlined init with copy of PgQuery_Alias?(v96, v98, &demangling cache variable for type metadata for PgQuery_Alias?);
                                  if (v95(v97, 1, Alias) == 1)
                                  {
                                    if (v95(v98, 1, Alias) == 1)
                                    {
                                      outlined destroy of (key: String, value: StorableValue)(v118, &demangling cache variable for type metadata for PgQuery_Alias?);
LABEL_63:
                                      if (*(unsigned __int8 *)(v46
                                                              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lateral) == *(unsigned __int8 *)(v113 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lateral)
                                        && *(unsigned __int8 *)(v46
                                                              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inh) == *(unsigned __int8 *)(v113 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inh)
                                        && *(unsigned __int8 *)(v46
                                                              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inFromCl) == *(unsigned __int8 *)(v113 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inFromCl)
                                        && *(_DWORD *)(v46
                                                     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__requiredPerms) == *(_DWORD *)(v113 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__requiredPerms)
                                        && *(_DWORD *)(v46
                                                     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__checkAsUser) == *(_DWORD *)(v113 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__checkAsUser)
                                        && specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(v46+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectedCols), *(_QWORD **)(v113+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectedCols))&& specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(v46+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__insertedCols), *(_QWORD **)(v113+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__insertedCols))&& specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(v46+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__updatedCols), *(_QWORD **)(v113+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__updatedCols))&& specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(v46+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extraUpdatedCols), *(_QWORD **)(v113+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extraUpdatedCols)))
                                      {
                                        v99 = *(_QWORD *)(v46
                                                        + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityQuals);
                                        v100 = *(_QWORD *)(v113
                                                         + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityQuals);
                                        swift_bridgeObjectRetain();
                                        swift_bridgeObjectRetain();
                                        v42 = specialized static Array<A>.== infix(_:_:)(v99, v100);
                                        swift_bridgeObjectRelease();
                                        swift_bridgeObjectRelease();
                                        goto LABEL_26;
                                      }
LABEL_92:
                                      v42 = 0;
                                      goto LABEL_26;
                                    }
                                  }
                                  else
                                  {
                                    outlined init with copy of PgQuery_Alias?(v118, (uint64_t)v116, &demangling cache variable for type metadata for PgQuery_Alias?);
                                    if (v95(v98, 1, Alias) != 1)
                                    {
                                      v106 = v98;
                                      v107 = v117;
                                      outlined init with take of PgQuery_OidList(v106, (uint64_t)v117, type metadata accessor for PgQuery_Alias);
                                      if ((*v116 == *v107 && v116[1] == v107[1]
                                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                        && (specialized static Array<A>.== infix(_:_:)(v116[2], v117[2]) & 1) != 0)
                                      {
                                        v109 = v116;
                                        v108 = (uint64_t)v117;
                                        type metadata accessor for UnknownStorage();
                                        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
                                        v110 = dispatch thunk of static Equatable.== infix(_:_:)();
                                        outlined destroy of PgQuery_Alias(v108, type metadata accessor for PgQuery_Alias);
                                        outlined destroy of PgQuery_Alias((uint64_t)v109, type metadata accessor for PgQuery_Alias);
                                        outlined destroy of (key: String, value: StorableValue)(v118, &demangling cache variable for type metadata for PgQuery_Alias?);
                                        if ((v110 & 1) == 0)
                                          goto LABEL_92;
                                        goto LABEL_63;
                                      }
                                      outlined destroy of PgQuery_Alias((uint64_t)v117, type metadata accessor for PgQuery_Alias);
                                      outlined destroy of PgQuery_Alias((uint64_t)v116, type metadata accessor for PgQuery_Alias);
                                      v75 = &demangling cache variable for type metadata for PgQuery_Alias?;
                                      goto LABEL_94;
                                    }
                                    outlined destroy of PgQuery_Alias((uint64_t)v116, type metadata accessor for PgQuery_Alias);
                                  }
                                  v75 = &demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?);
LABEL_94:
                                  v76 = v118;
                                  goto LABEL_42;
                                }
                                outlined destroy of PgQuery_Alias((uint64_t)v115, type metadata accessor for PgQuery_Alias);
                                outlined destroy of PgQuery_Alias((uint64_t)v114, type metadata accessor for PgQuery_Alias);
                                v75 = &demangling cache variable for type metadata for PgQuery_Alias?;
                                goto LABEL_83;
                              }
                              outlined destroy of PgQuery_Alias((uint64_t)v114, type metadata accessor for PgQuery_Alias);
                            }
                            v75 = &demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?);
LABEL_83:
                            v76 = v120;
                            goto LABEL_42;
                          }
                          outlined destroy of PgQuery_Alias(v126, type metadata accessor for PgQuery_TableFunc);
                        }
                        v75 = &demangling cache variable for type metadata for (PgQuery_TableFunc?, PgQuery_TableFunc?);
                        v76 = v128;
LABEL_42:
                        outlined destroy of (key: String, value: StorableValue)(v76, v75);
                        goto LABEL_92;
                      }
                    }
                  }
                }
              }
LABEL_25:
              v42 = 0;
LABEL_26:
              swift_release();
              swift_release();
              return v42 & 1;
            }
          }
          else
          {
            v56 = v130;
            outlined init with copy of PgQuery_Alias?((uint64_t)v23, v130, &demangling cache variable for type metadata for PgQuery_Query?);
            if (v54(v53, 1, v55) != 1)
            {
              v57 = v129;
              outlined init with take of PgQuery_OidList(v53, v129, type metadata accessor for PgQuery_Query);
              v58 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v56, v57, type metadata accessor for PgQuery_Query, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Query.== infix(_:_:));
              outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_Query);
              outlined destroy of PgQuery_Alias(v56, type metadata accessor for PgQuery_Query);
              outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Query?);
              if ((v58 & 1) == 0)
                goto LABEL_25;
              goto LABEL_28;
            }
            outlined destroy of PgQuery_Alias(v56, type metadata accessor for PgQuery_Query);
          }
          v48 = &demangling cache variable for type metadata for (PgQuery_Query?, PgQuery_Query?);
          v49 = (uint64_t)v23;
LABEL_24:
          outlined destroy of (key: String, value: StorableValue)(v49, v48);
          goto LABEL_25;
        }
      }
      else
      {
        v46 = v112;
        outlined init with copy of PgQuery_Alias?((uint64_t)v34, (uint64_t)v30, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
        if (v44(v43, 1, TableSampleClause) != 1)
        {
          outlined init with take of PgQuery_OidList(v43, (uint64_t)v27, type metadata accessor for PgQuery_TableSampleClause);
          swift_retain();
          swift_retain();
          v50 = specialized static PgQuery_TableSampleClause.== infix(_:_:)((uint64_t)v30, (uint64_t)v27);
          outlined destroy of PgQuery_Alias((uint64_t)v27, type metadata accessor for PgQuery_TableSampleClause);
          outlined destroy of PgQuery_Alias((uint64_t)v30, type metadata accessor for PgQuery_TableSampleClause);
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
          if ((v50 & 1) == 0)
            goto LABEL_25;
          goto LABEL_18;
        }
        swift_retain();
        swift_retain();
        outlined destroy of PgQuery_Alias((uint64_t)v30, type metadata accessor for PgQuery_TableSampleClause);
      }
      v48 = &demangling cache variable for type metadata for (PgQuery_TableSampleClause?, PgQuery_TableSampleClause?);
      v49 = (uint64_t)v34;
      goto LABEL_24;
    }
    goto LABEL_12;
  }
  return v42 & 1;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RangeTblEntry@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RangeTblEntry._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RangeTblEntry()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RangeTblEntry()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblEntry and conformance PgQuery_RangeTblEntry, type metadata accessor for PgQuery_RangeTblEntry, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblEntry);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RangeTblEntry@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RangeTblEntry._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RangeTblEntry()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblEntry and conformance PgQuery_RangeTblEntry, type metadata accessor for PgQuery_RangeTblEntry, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblEntry);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RangeTblEntry()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblEntry and conformance PgQuery_RangeTblEntry, type metadata accessor for PgQuery_RangeTblEntry, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblEntry);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_RangeTblEntry(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_RangeTblEntry, closure #1 in static PgQuery_RangeTblEntry.== infix(_:_:)) & 1;
}

uint64_t PgQuery_RangeTblFunction._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcount;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcount) = 0;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolnames;
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolnames) = MEMORY[0x1E0DEE9D8];
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypes;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypes) = v7;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypmods;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypmods) = v7;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcollations;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcollations) = v7;
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcparams;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcparams) = v7;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v5) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcount);
  *(_QWORD *)(v1 + v6) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolnames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v8) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v9) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypmods);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v10) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcollations);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcparams);
  swift_bridgeObjectRetain();
  swift_release();
  *(_QWORD *)(v1 + v11) = v12;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PgQuery_RangeTblFunction._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_RangeTblFunction._StorageClass()
{
  return type metadata accessor for PgQuery_RangeTblFunction._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RangeTblFunction._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTblFunction._StorageClass);
}

uint64_t PgQuery_RangeTblFunction.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RangeTblFunction, (void (*)(_QWORD))type metadata accessor for PgQuery_RangeTblFunction._StorageClass, PgQuery_RangeTblFunction._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RangeTblFunction.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_RangeTblFunction.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 3:
        case 4:
        case 5:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RangeTblFunction.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(int *)(type metadata accessor for PgQuery_RangeTblFunction(0) + 20);
  v14 = v0;
  v9 = *(_QWORD *)(v0 + v8);
  outlined init with copy of PgQuery_Alias?(v9+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr, (uint64_t)v3, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v3, &demangling cache variable for type metadata for PgQuery_Node?);
    v10 = v15;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v3, (uint64_t)v7, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    v11 = v15;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v10 = v11;
    outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
    if (v11)
      return swift_release();
  }
  if (!*(_DWORD *)(v9
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcount)
    || (dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v10))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v9
                                + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolnames)
                    + 16)
      || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v9
                                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypes)
                      + 16)
        || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
      {
        if (!*(_QWORD *)(*(_QWORD *)(v9
                                    + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypmods)
                        + 16)
          || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
        {
          if (!*(_QWORD *)(*(_QWORD *)(v9
                                      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcollations)
                          + 16)
            || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
          {
            if (!*(_QWORD *)(*(_QWORD *)(v9
                                        + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcparams)
                            + 16)
              || (swift_bridgeObjectRetain(),
                  dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(),
                  swift_bridgeObjectRelease(),
                  !v10))
            {
              swift_release();
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RangeTblFunction@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RangeTblFunction._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RangeTblFunction()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RangeTblFunction()
{
  return PgQuery_RangeTblFunction.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RangeTblFunction()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblFunction and conformance PgQuery_RangeTblFunction, type metadata accessor for PgQuery_RangeTblFunction, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblFunction);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RangeTblFunction@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RangeTblFunction._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RangeTblFunction()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblFunction and conformance PgQuery_RangeTblFunction, type metadata accessor for PgQuery_RangeTblFunction, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblFunction);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RangeTblFunction()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblFunction and conformance PgQuery_RangeTblFunction, type metadata accessor for PgQuery_RangeTblFunction, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblFunction);
  return Message.hash(into:)();
}

uint64_t PgQuery_TableSampleClause._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t Node;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = MEMORY[0x1E0DEE9D8];
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_TableSampleClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v6, 1, 1, Node);
  *(_DWORD *)(v1 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_TableSampleClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_release();
  outlined assign with take of PgQuery_Node?((uint64_t)v5, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  return v1;
}

uint64_t PgQuery_TableSampleClause._StorageClass.__deallocating_deinit()
{
  return PgQuery_DeclareCursorStmt._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_TableSampleClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable);
}

uint64_t ObjC metadata update function for PgQuery_TableSampleClause._StorageClass()
{
  return type metadata accessor for PgQuery_TableSampleClause._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_TableSampleClause._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TableSampleClause._StorageClass);
}

void type metadata completion function for PgQuery_TableSampleClause._StorageClass()
{
  type metadata completion function for PgQuery_PrepareStmt._StorageClass();
}

uint64_t PgQuery_TableSampleClause.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for PgQuery_TableSampleClause(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_TableSampleClause._StorageClass(0);
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v0 + v3) = PgQuery_TableSampleClause._StorageClass.init(copying:)(v4);
    swift_release();
  }
  swift_retain();
  v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while (1)
    {
      if ((v6 & 1) != 0)
        return swift_release();
      if (v5 == 1)
        break;
      if (v5 == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        v8 = v2;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_7;
      }
      if (v5 == 3)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        v8 = v2;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_7;
      }
LABEL_8:
      v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v8 = v2;
    dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
LABEL_7:
    v2 = v8;
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t PgQuery_TableSampleClause.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = v4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v20 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(int *)(type metadata accessor for PgQuery_TableSampleClause(0) + 20);
  v19 = v3;
  v15 = *(_QWORD *)(v3 + v14);
  v16 = *(_DWORD *)(v15 + 16);
  swift_retain();
  if (v16)
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v5)
      return swift_release();
  }
  v21 = a2;
  v22 = a3;
  if (*(_QWORD *)(*(_QWORD *)(v15 + 24) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    v18 = v10;
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    v10 = v18;
    swift_bridgeObjectRelease();
    if (v5)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v15+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_TableSampleClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v10, 1, Node) != 1)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v13, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_Node);
    if (!v5)
      goto LABEL_9;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_9:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_TableSampleClause@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_TableSampleClause._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_TableSampleClause()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_TableSampleClause()
{
  return PgQuery_TableSampleClause.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_TableSampleClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableSampleClause.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_TableSampleClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, type metadata accessor for PgQuery_TableSampleClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableSampleClause);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TableSampleClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TableSampleClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_TableSampleClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, type metadata accessor for PgQuery_TableSampleClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableSampleClause);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TableSampleClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, type metadata accessor for PgQuery_TableSampleClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableSampleClause);
  return Message.hash(into:)();
}

uint64_t PgQuery_WithCheckOption._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_WithCheckOptionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_WithCheckOption._StorageClass()
{
  return type metadata accessor for PgQuery_WithCheckOption._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_WithCheckOption._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_WithCheckOption._StorageClass);
}

void type metadata completion function for PgQuery_WithCheckOption._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_WithCheckOption.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_WithCheckOption(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_WithCheckOption._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_WithCheckOption._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_WCOKind and conformance PgQuery_WCOKind();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 2:
        case 3:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_7;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_7:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_WithCheckOption.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v10 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v22 = (uint64_t)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(type metadata accessor for PgQuery_WithCheckOption(0) + 20);
  v23 = v3;
  v13 = *(_QWORD *)(v3 + v12);
  v14 = *(_QWORD *)(v13 + 16);
  v26 = a3;
  if (v14)
  {
    v15 = *(_BYTE *)(v13 + 24);
    v24 = v14;
    v25 = v15;
    lazy protocol witness table accessor for type PgQuery_WCOKind and conformance PgQuery_WCOKind();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  else
  {
    swift_retain();
  }
  v16 = *(_QWORD *)(v13 + 40);
  v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0)
    v17 = *(_QWORD *)(v13 + 32) & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  v18 = *(_QWORD *)(v13 + 56);
  v19 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0)
    v19 = *(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFLL;
  if (v19)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_WithCheckOptionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, Node) != 1)
  {
    v20 = v22;
    outlined init with take of PgQuery_OidList((uint64_t)v8, v22, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
    if (!v4)
      goto LABEL_16;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_16:
  if (*(_BYTE *)(v13
                + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_WithCheckOptionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cascaded) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_WithCheckOption@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_WithCheckOption._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_WithCheckOption()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_WithCheckOption()
{
  return PgQuery_WithCheckOption.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_WithCheckOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_WithCheckOption.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_WithCheckOption()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithCheckOption and conformance PgQuery_WithCheckOption, type metadata accessor for PgQuery_WithCheckOption, (uint64_t)&protocol conformance descriptor for PgQuery_WithCheckOption);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_WithCheckOption@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_WithCheckOption._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_WithCheckOption()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithCheckOption and conformance PgQuery_WithCheckOption, type metadata accessor for PgQuery_WithCheckOption, (uint64_t)&protocol conformance descriptor for PgQuery_WithCheckOption);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_WithCheckOption()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithCheckOption and conformance PgQuery_WithCheckOption, type metadata accessor for PgQuery_WithCheckOption, (uint64_t)&protocol conformance descriptor for PgQuery_WithCheckOption);
  return Message.hash(into:)();
}

uint64_t PgQuery_SortGroupClause.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 4:
        case 5:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_SortGroupClause.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_DWORD *)v0 || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!*(_DWORD *)(v0 + 4)
      || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
    {
      if (!*(_DWORD *)(v0 + 8)
        || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
      {
        if (*(_BYTE *)(v0 + 12) != 1
          || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          if (*(_BYTE *)(v0 + 13) != 1
            || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for PgQuery_SortGroupClause(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SortGroupClause@<X0>(_QWORD *a1@<X8>)
{
  *(_QWORD *)((char *)a1 + 6) = 0;
  *a1 = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SortGroupClause()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PgQuery_GrantRoleStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PgQuery_GrantRoleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_SortGroupClause()
{
  return PgQuery_SortGroupClause.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_SortGroupClause()
{
  return PgQuery_SortGroupClause.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SortGroupClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortGroupClause and conformance PgQuery_SortGroupClause, type metadata accessor for PgQuery_SortGroupClause, (uint64_t)&protocol conformance descriptor for PgQuery_SortGroupClause);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SortGroupClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SortGroupClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SortGroupClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortGroupClause and conformance PgQuery_SortGroupClause, type metadata accessor for PgQuery_SortGroupClause, (uint64_t)&protocol conformance descriptor for PgQuery_SortGroupClause);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SortGroupClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortGroupClause and conformance PgQuery_SortGroupClause, type metadata accessor for PgQuery_SortGroupClause, (uint64_t)&protocol conformance descriptor for PgQuery_SortGroupClause);
  return Message.hash(into:)();
}

uint64_t PgQuery_GroupingSet.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        lazy protocol witness table accessor for type PgQuery_GroupingSetKind and conformance PgQuery_GroupingSetKind();
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v4 = v3;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

