uint64_t destroy for DatabaseValue(uint64_t a1)
{
  return outlined consume of DatabaseValue(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t closure #2 in scan(stream:metadata:maxBatchSize:selectCore:expressionEvaluator:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *object;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *countAndFlagsBits;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t (*v52)(_QWORD *, uint64_t, id *);
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  id v59;
  Swift::String v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  _BOOL8 v65;
  unint64_t v66;
  char v67;
  Swift::Bool v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, char *);
  void (*v89)(char *, char *, char *);
  uint64_t v90;
  unint64_t v91;
  char *v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _BOOL8 v101;
  Swift::Int v102;
  Swift::Bool v103;
  unint64_t v104;
  char v105;
  unint64_t v106;
  uint64_t v107;
  char **v108;
  uint64_t v109;
  uint64_t v110;
  ValueMetadata *v111;
  uint64_t v112;
  int EnumTagSinglePayload;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BOOL8 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  char v128;
  void *v129;
  uint64_t result;
  char v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  char *v147;
  unsigned int v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  void (**Description)(char *, _QWORD, ValueMetadata *);
  ValueMetadata *v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  ValueMetadata *v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t (*v171)(uint64_t);
  char *v172;
  char *v173;
  char *v174;
  _QWORD *v175;
  char *v176;
  id v177;
  _OWORD v178[2];
  _QWORD v179[4];
  _QWORD v180[5];

  v135 = a7;
  v134 = a6;
  v151 = a5;
  v145 = a4;
  v144 = a3;
  v159 = a1;
  v180[4] = *MEMORY[0x1E0C80C00];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v149 = (uint64_t)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v153 = (uint64_t)&v132 - v14;
  v157 = type metadata accessor for SQLDataType();
  Description = (void (**)(char *, _QWORD, ValueMetadata *))v157[-1].Description;
  MEMORY[0x1E0C80A78](v157);
  v155 = (char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = type metadata accessor for StorableValue(0);
  v166 = *(_QWORD *)(v165 - 8);
  v16 = MEMORY[0x1E0C80A78](v165);
  v163 = (uint64_t)&v132 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (unint64_t)&v132 - v19;
  v21 = MEMORY[0x1E0C80A78](v18);
  v168 = (uint64_t)&v132 - v22;
  MEMORY[0x1E0C80A78](v21);
  v160 = (unint64_t *)((char *)&v132 - v23);
  v24 = (unint64_t)type metadata accessor for SQLExpression();
  object = *(unint64_t **)(v24 - 8);
  v26 = MEMORY[0x1E0C80A78](v24);
  v133 = (char *)&v132 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v132 - v29;
  MEMORY[0x1E0C80A78](v28);
  v161 = (uint64_t)&v132 - v31;
  v167 = type metadata accessor for ResultColumn();
  v32 = (uint64_t (*)(uint64_t))v167[-1].Description;
  v33 = MEMORY[0x1E0C80A78](v167);
  isUniquelyReferenced_nonNull_native = (char *)&v132 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x1E0C80A78](v33);
  v147 = (char *)&v132 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  countAndFlagsBits = (char *)&v132 - v39;
  v41 = MEMORY[0x1E0C80A78](v38);
  v173 = (char *)&v132 - v42;
  v146 = (void *)MEMORY[0x193FECD2C](v41);
  v43 = objc_msgSend(a2, sel_schema);
  v44 = objc_msgSend(v43, sel_columns);

  type metadata accessor for BMSQLColumn(0, &lazy cache variable for type metadata for BMSQLColumn);
  v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v46 = v45;
  v158 = v45;
  if (v45 >> 62)
  {
LABEL_84:
    swift_bridgeObjectRetain();
    v47 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v46 = v158;
  }
  else
  {
    v47 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v150 = v30;
  v169 = object;
  v136 = v10;
  v170 = v20;
  v171 = v32;
  v172 = countAndFlagsBits;
  v174 = isUniquelyReferenced_nonNull_native;
  v162 = v24;
  if (v47)
  {
    v176 = 0;
    v154 = v46 & 0xC000000000000001;
    v143 = 2;
    v142 = 0;
    v141 = 1;
    v140 = 3;
    v139 = 4;
    v138 = 6;
    v24 = 4;
    v148 = 5;
    v137 = 7;
    v175 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    object = v160;
    v152 = (char *)v47;
    while (1)
    {
      if (v154)
        v48 = (uint64_t (*)(uint64_t))MEMORY[0x193FEC81C](v24 - 4, v46);
      else
        v48 = (uint64_t (*)(uint64_t))*(id *)(v46 + 8 * v24);
      v32 = v48;
      countAndFlagsBits = (char *)&demangling cache variable for type metadata for Any?;
      isUniquelyReferenced_nonNull_native = (char *)type metadata accessor for StorableValue;
      v30 = (char *)(v24 - 3);
      if (__OFADD__(v24 - 4, 1))
        goto LABEL_79;
      v49 = objc_msgSend(v48, sel_extractBlock);
      if (!v49)
        __break(1u);
      v50 = v49;
      v51 = v159;
      v179[3] = swift_getObjectType();
      v179[0] = v51;
      v177 = 0;
      v52 = (uint64_t (*)(_QWORD *, uint64_t, id *))v50[2];
      swift_unknownObjectRetain();
      v53 = (id)v52(v50, v51, &v177);
      v10 = v176;
      if (v53)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v178, 0, sizeof(v178));
      }
      outlined init with take of UUID?((uint64_t)v178, (uint64_t)v180, (uint64_t *)&demangling cache variable for type metadata for Any?);
      _Block_release(v50);
      v54 = v177;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v179);
      if (v54)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type SQLError and conformance SQLError();
        v119 = swift_allocError();
        v121 = v120;
        v122 = objc_msgSend(v32, sel_name);
        v123 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v125 = v124;

        *(_QWORD *)v121 = v123;
        *(_QWORD *)(v121 + 8) = v125;
        *(_BYTE *)(v121 + 64) = 0;

        v126 = *(void **)(v144 + 16);
        *(_QWORD *)(v144 + 16) = v119;

        outlined destroy of UUID?((uint64_t)v180, (uint64_t *)&demangling cache variable for type metadata for Any?);
        goto LABEL_73;
      }
      outlined init with copy of Date?((uint64_t)v180, (uint64_t)v179, (uint64_t *)&demangling cache variable for type metadata for Any?);
      v55 = objc_msgSend(v32, sel_dataType);
      v56 = v148;
      switch((unint64_t)v55)
      {
        case 0uLL:
          v57 = (uint64_t *)&v175;
          goto LABEL_22;
        case 1uLL:
          v57 = (uint64_t *)((char *)&v174 + 4);
          goto LABEL_22;
        case 2uLL:
          v57 = (uint64_t *)((char *)&v175 + 4);
          goto LABEL_22;
        case 3uLL:
          v57 = (uint64_t *)&v174;
          goto LABEL_22;
        case 4uLL:
          v57 = (uint64_t *)((char *)&v173 + 4);
          goto LABEL_22;
        case 5uLL:
          goto LABEL_23;
        case 6uLL:
          v57 = (uint64_t *)&v173;
          goto LABEL_22;
        default:
          v57 = (uint64_t *)((char *)&v172 + 4);
LABEL_22:
          v56 = *((unsigned int *)v57 - 64);
LABEL_23:
          v58 = (uint64_t)v155;
          Description[13](v155, v56, v157);
          StorableValue.init(_:dataType:)((uint64_t)v179, v58, object);
          if (v10)
          {

            outlined destroy of UUID?((uint64_t)v180, (uint64_t *)&demangling cache variable for type metadata for Any?);
            swift_bridgeObjectRelease();
LABEL_70:
            swift_bridgeObjectRelease();
            goto LABEL_72;
          }
          v164 = v24;
          outlined init with copy of StorableValue((uint64_t)object, v168, type metadata accessor for StorableValue);
          v24 = (unint64_t)v32;
          v59 = objc_msgSend(v32, sel_name);
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          v60 = String.lowercased()();
          countAndFlagsBits = (char *)v60._countAndFlagsBits;
          object = (unint64_t *)v60._object;
          swift_bridgeObjectRelease();
          v61 = (uint64_t)v175;
          isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
          v179[0] = v61;
          v62 = specialized __RawDictionaryStorage.find<A>(_:)();
          v64 = *(_QWORD *)(v61 + 16);
          v65 = (v63 & 1) == 0;
          v32 = (uint64_t (*)(uint64_t))(v64 + v65);
          if (__OFADD__(v64, v65))
            goto LABEL_80;
          v66 = v62;
          v67 = v63;
          v176 = 0;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
          v68 = _NativeDictionary.ensureUnique(isUnique:capacity:)((Swift::Bool)isUniquelyReferenced_nonNull_native, (Swift::Int)v32);
          v10 = (char *)v167;
          v32 = v171;
          isUniquelyReferenced_nonNull_native = v174;
          if (v68)
          {
            v69 = specialized __RawDictionaryStorage.find<A>(_:)();
            if ((v67 & 1) != (v70 & 1))
            {
LABEL_86:
              result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            v66 = v69;
          }
          v71 = v179[0];
          v175 = (_QWORD *)v179[0];
          if ((v67 & 1) != 0)
          {
            v72 = *(_QWORD *)(v166 + 72) * v66;
            v73 = v179[0];
            v74 = v153;
            outlined init with take of StorableValue(*(_QWORD *)(v179[0] + 56) + v72, v153, type metadata accessor for StorableValue);
            outlined init with take of StorableValue(v168, *(_QWORD *)(v73 + 56) + v72, type metadata accessor for StorableValue);
            __swift_storeEnumTagSinglePayload(v74, 0, 1, v165);
          }
          else
          {
            *(_QWORD *)(v179[0] + 8 * (v66 >> 6) + 64) |= 1 << v66;
            *(Swift::String *)(*(_QWORD *)(v71 + 48) + 16 * v66) = v60;
            v20 = (unint64_t)type metadata accessor for StorableValue;
            outlined init with take of StorableValue(v168, *(_QWORD *)(v71 + 56) + *(_QWORD *)(v166 + 72) * v66, type metadata accessor for StorableValue);
            v75 = v175[2];
            v76 = __OFADD__(v75, 1);
            v77 = v75 + 1;
            if (v76)
              goto LABEL_82;
            v175[2] = v77;
            v74 = v153;
            __swift_storeEnumTagSinglePayload(v153, 1, 1, v165);
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          outlined destroy of UUID?(v74, &demangling cache variable for type metadata for StorableValue?);
          object = v160;
          outlined destroy of StorableValue((uint64_t)v160, type metadata accessor for StorableValue);
          outlined destroy of UUID?((uint64_t)v180, (uint64_t *)&demangling cache variable for type metadata for Any?);
          v24 = v164 + 1;
          v20 = v170;
          countAndFlagsBits = v172;
          v46 = v158;
          if (v30 == v152)
          {
            swift_bridgeObjectRelease();
            v24 = v162;
            v78 = (uint64_t)v175;
            goto LABEL_35;
          }
          break;
      }
    }
  }
  swift_bridgeObjectRelease();
  v176 = 0;
  v78 = MEMORY[0x1E0DEE9E0];
  v10 = (char *)v167;
LABEL_35:
  v175 = (_QWORD *)v78;
  swift_bridgeObjectRetain();
  v79 = SelectCore.select.getter();
  v80 = MEMORY[0x1E0DEE9D8];
  v180[0] = MEMORY[0x1E0DEE9D8];
  v168 = *(_QWORD *)(v79 + 16);
  if (!v168)
    goto LABEL_49;
  v24 = 0;
  v164 = v79;
  do
  {
    if (v24 >= *(_QWORD *)(v79 + 16))
    {
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    v30 = countAndFlagsBits;
    v81 = (*((unsigned __int8 *)v32 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v32 + 80);
    v82 = *((_QWORD *)v32 + 9);
    object = (unint64_t *)*((_QWORD *)v32 + 2);
    v83 = v173;
    ((void (*)(char *, unint64_t, char *))object)(v173, v79 + v81 + v82 * v24, v10);
    ResultColumn.alias.getter();
    v85 = v84;
    swift_bridgeObjectRelease();
    ((void (*)(char *, char *, char *))object)(v30, v83, v10);
    if (!v85)
    {
      v88 = (void (*)(char *, char *))*((_QWORD *)v32 + 1);
      v88(v30, v10);
LABEL_46:
      v88(v173, v10);
      goto LABEL_47;
    }
    v86 = v161;
    ResultColumn.expression.getter(v161);
    v87 = SQLExpression.aggregationFunctions.getter();
    ((void (*)(uint64_t, unint64_t))v169[1])(v86, v162);
    object = *(unint64_t **)(v87 + 16);
    swift_bridgeObjectRelease();
    v88 = (void (*)(char *, char *))*((_QWORD *)v32 + 1);
    v88(v30, v10);
    if (object)
      goto LABEL_46;
    v89 = (void (*)(char *, char *, char *))*((_QWORD *)v32 + 4);
    v89(v147, v173, v10);
    v90 = v180[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v90 = v180[0];
    }
    v91 = *(_QWORD *)(v90 + 16);
    object = (unint64_t *)(v91 + 1);
    if (v91 >= *(_QWORD *)(v90 + 24) >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v90 = v180[0];
    }
    *(_QWORD *)(v90 + 16) = object;
    v89((char *)(v90 + v81 + v91 * v82), v147, v10);
    v180[0] = v90;
    v20 = v170;
    v32 = v171;
LABEL_47:
    ++v24;
    isUniquelyReferenced_nonNull_native = v174;
    countAndFlagsBits = v172;
    v79 = v164;
  }
  while (v168 != v24);
  v80 = v180[0];
  v24 = v162;
LABEL_49:
  swift_bridgeObjectRelease();
  v92 = *(char **)(v80 + 16);
  v93 = v169;
  if (!v92)
  {
    swift_release();
    v95 = v175;
LABEL_63:
    swift_bridgeObjectRelease();
    v112 = (uint64_t)v136;
    SelectCore.where.getter((uint64_t)v136);
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v112, 1, v24);
    v10 = v176;
    if (EnumTagSinglePayload == 1)
    {
      outlined destroy of UUID?(v112, &demangling cache variable for type metadata for SQLExpression?);
    }
    else
    {
      v127 = (uint64_t)v133;
      ((void (*)(void))v93[4])();
      swift_bridgeObjectRetain();
      v128 = SQLExpressionEvaluator.evaluatesToTrue(expression:payload:)(v127, (uint64_t)v95);
      if (v10)
      {
        swift_bridgeObjectRelease();
        ((void (*)(uint64_t, unint64_t))v93[1])(v127, v24);
        goto LABEL_70;
      }
      v131 = v128;
      swift_bridgeObjectRelease();
      if ((v131 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        ((void (*)(uint64_t, unint64_t))v93[1])(v127, v24);
        v118 = 1;
        goto LABEL_74;
      }
      ((void (*)(uint64_t, unint64_t))v93[1])(v127, v24);
    }
    v114 = (uint64_t *)(v134 + 16);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v115 = *(_QWORD *)(*v114 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v115);
    v116 = *v114;
    *(_QWORD *)(v116 + 16) = v115 + 1;
    v117 = v116 + 16 * v115;
    *(_BYTE *)(v117 + 32) = 0;
    *(_QWORD *)(v117 + 40) = v95;
    v118 = *(_QWORD *)(*v114 + 16) < v135;
    goto LABEL_74;
  }
  v94 = (*((unsigned __int8 *)v171 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v171 + 80);
  v164 = v80;
  object = (unint64_t *)(v80 + v94);
  v168 = *((_QWORD *)v171 + 9);
  v172 = (char *)*((_QWORD *)v171 + 2);
  v32 = type metadata accessor for StorableValue;
  v95 = v175;
  while (1)
  {
    v173 = v92;
    ((void (*)(char *, unint64_t *, char *))v172)(isUniquelyReferenced_nonNull_native, object, v10);
    v96 = (uint64_t)v150;
    ResultColumn.expression.getter((uint64_t)v150);
    v10 = v176;
    SQLExpressionEvaluator.execute(expression:payload:)(v96, (uint64_t)v175, (uint64_t *)v20);
    if (v10)
      break;
    v176 = 0;
    v10 = (char *)v24;
    ((void (*)(uint64_t, unint64_t))v93[1])(v96, v24);
    outlined init with copy of StorableValue(v20, v163, type metadata accessor for StorableValue);
    countAndFlagsBits = (char *)ResultColumn.name.getter();
    v30 = v97;
    isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    v180[0] = v95;
    v98 = specialized __RawDictionaryStorage.find<A>(_:)();
    v100 = v95[2];
    v101 = (v99 & 1) == 0;
    v102 = v100 + v101;
    if (__OFADD__(v100, v101))
      goto LABEL_81;
    v20 = v98;
    v24 = v99;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
    v103 = _NativeDictionary.ensureUnique(isUnique:capacity:)((Swift::Bool)isUniquelyReferenced_nonNull_native, v102);
    isUniquelyReferenced_nonNull_native = v174;
    if (v103)
    {
      v104 = specialized __RawDictionaryStorage.find<A>(_:)();
      if ((v24 & 1) != (v105 & 1))
        goto LABEL_86;
      v20 = v104;
    }
    v95 = (_QWORD *)v180[0];
    if ((v24 & 1) != 0)
    {
      v106 = *(_QWORD *)(v166 + 72) * v20;
      v107 = v149;
      outlined init with take of StorableValue(*(_QWORD *)(v180[0] + 56) + v106, v149, type metadata accessor for StorableValue);
      outlined init with take of StorableValue(v163, v95[7] + v106, type metadata accessor for StorableValue);
      __swift_storeEnumTagSinglePayload(v107, 0, 1, v165);
    }
    else
    {
      *(_QWORD *)(v180[0] + 8 * (v20 >> 6) + 64) |= 1 << v20;
      v108 = (char **)(v95[6] + 16 * v20);
      *v108 = countAndFlagsBits;
      v108[1] = v30;
      outlined init with take of StorableValue(v163, v95[7] + *(_QWORD *)(v166 + 72) * v20, type metadata accessor for StorableValue);
      v109 = v95[2];
      v76 = __OFADD__(v109, 1);
      v110 = v109 + 1;
      if (v76)
        goto LABEL_83;
      v95[2] = v110;
      v107 = v149;
      __swift_storeEnumTagSinglePayload(v149, 1, 1, v165);
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of UUID?(v107, &demangling cache variable for type metadata for StorableValue?);
    v20 = v170;
    outlined destroy of StorableValue(v170, type metadata accessor for StorableValue);
    v111 = v167;
    (*((void (**)(char *, ValueMetadata *))v171 + 1))(isUniquelyReferenced_nonNull_native, v167);
    object = (unint64_t *)((char *)object + v168);
    v92 = v173 - 1;
    v24 = (unint64_t)v10;
    v10 = (char *)v111;
    v93 = v169;
    if (v173 == (char *)1)
    {
      swift_release();
      goto LABEL_63;
    }
  }
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, unint64_t))v93[1])(v96, v24);
  (*((void (**)(char *, ValueMetadata *))v171 + 1))(isUniquelyReferenced_nonNull_native, v167);
  swift_bridgeObjectRelease();
  swift_release();
LABEL_72:
  v129 = *(void **)(v144 + 16);
  *(_QWORD *)(v144 + 16) = v10;

LABEL_73:
  v118 = 0;
LABEL_74:
  objc_autoreleasePoolPop(v146);
  return v118;
}

uint64_t *initializeWithCopy for StorableValue(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      v6 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
        goto LABEL_11;
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      goto LABEL_12;
    case 3u:
    case 4u:
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
      goto LABEL_12;
    case 5u:
      v9 = a2[1];
      if (v9 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        v11 = *a2;
        outlined copy of Data._Representation(v11, v9);
        *a1 = v11;
        a1[1] = v9;
      }
      goto LABEL_12;
    case 6u:
      v6 = type metadata accessor for UUID();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
LABEL_11:
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      }
LABEL_12:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._finalize()();
  v0 = OUTLINED_FUNCTION_139_0();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_45()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_45_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return v1 + ((v2 + 32) & ~v2);
}

uint64_t OUTLINED_FUNCTION_45_1()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_45_2()
{
  unint64_t v0;
  uint64_t v1;

  outlined consume of Data?(v1, v0);
  return outlined consume of Data?(v1, v0);
}

void OUTLINED_FUNCTION_45_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;

  outlined init with copy of Date?(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_45_5()
{
  return Optional<A>.hashValue.getter();
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

void outlined init with copy of StorableValue(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_111(a1, a2, a3);
  OUTLINED_FUNCTION_50(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  OUTLINED_FUNCTION_1();
}

void outlined init with take of StorableValue(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_111(a1, a2, a3);
  OUTLINED_FUNCTION_50(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  OUTLINED_FUNCTION_1();
}

void outlined init with take of UUID?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_110(a1, a2, a3);
  OUTLINED_FUNCTION_50(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  OUTLINED_FUNCTION_1();
}

uint64_t OUTLINED_FUNCTION_56_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_56_1()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t OUTLINED_FUNCTION_56_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)v2 = *(_QWORD *)(v1 + *(int *)(a1 + 28));
  *(_BYTE *)(v2 + 8) = 0;
  return type metadata accessor for StorableValue(0);
}

uint64_t OUTLINED_FUNCTION_56_4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 264) + 8))(v0, *(_QWORD *)(v1 - 152));
}

void outlined init with copy of Date?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_110(a1, a2, a3);
  OUTLINED_FUNCTION_50(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  OUTLINED_FUNCTION_1();
}

uint64_t OUTLINED_FUNCTION_83@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_83_0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * ((result - 32) / 16);
  return result;
}

uint64_t OUTLINED_FUNCTION_83_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void OUTLINED_FUNCTION_83_2()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x5420455441455243;
  v0._object = (void *)0xED000020454C4241;
  String.append(_:)(v0);
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t type metadata accessor for SelectCorePhysicalPlan(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with take of (key: String, value: StorableValue)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t OUTLINED_FUNCTION_84()
{
  return type metadata accessor for StorableValue(0);
}

uint64_t OUTLINED_FUNCTION_84_0()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_84_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

void OUTLINED_FUNCTION_84_2()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x2A205443454C4553;
  v0._object = (void *)0xEE00204D4F524620;
  String.append(_:)(v0);
}

void StorableValue.init(_:dataType:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  ValueMetadata *v20;
  _QWORD *Description;
  void (*v22)(uint64_t, uint64_t, ValueMetadata *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  ValueMetadata *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, ValueMetadata *);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  _QWORD *v89;
  ValueMetadata *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _OWORD v95[2];

  v88 = a3;
  v83 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_8();
  v84 = v9;
  v87 = OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_6_1();
  v81 = v11;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_53();
  v85 = v13;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v14);
  v82 = (uint64_t *)((char *)&v81 - v15);
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_66();
  MEMORY[0x1E0C80A78](v17);
  OUTLINED_FUNCTION_61();
  v86 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v19);
  OUTLINED_FUNCTION_117();
  v20 = type metadata accessor for SQLDataType();
  Description = v20[-1].Description;
  MEMORY[0x1E0C80A78](v20);
  OUTLINED_FUNCTION_115();
  v22 = (void (*)(uint64_t, uint64_t, ValueMetadata *))Description[2];
  v91 = a2;
  v22(v4, a2, v20);
  v89 = Description;
  v90 = v20;
  v23 = ((uint64_t (*)(uint64_t, ValueMetadata *))Description[11])(v4, v20);
  if (!(_DWORD)v23)
  {
    OUTLINED_FUNCTION_143(v23, v24, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v25 = v94;
    if (!v94)
    {
      OUTLINED_FUNCTION_2_6();
      OUTLINED_FUNCTION_59(a1);
      OUTLINED_FUNCTION_59((uint64_t)&v93);
      v27 = 0;
LABEL_19:
      v39 = v88;
      *v88 = v27;
      *((_BYTE *)v39 + 8) = v25 == 0;
LABEL_39:
      swift_storeEnumTagMultiPayload();
      return;
    }
    OUTLINED_FUNCTION_104();
    type metadata accessor for BMSQLColumn(0, &lazy cache variable for type metadata for NSNumber);
    if (OUTLINED_FUNCTION_1_7())
    {
      v26 = (void *)v92;
      v27 = (unint64_t)objc_msgSend((id)v92, sel_longLongValue, v81);

LABEL_5:
      OUTLINED_FUNCTION_2_6();
      v28 = OUTLINED_FUNCTION_58_0();
LABEL_6:
      OUTLINED_FUNCTION_48(v28, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_18:
      OUTLINED_FUNCTION_140();
      goto LABEL_19;
    }
    if (OUTLINED_FUNCTION_1_7())
    {
      OUTLINED_FUNCTION_2_6();
      v38 = OUTLINED_FUNCTION_58_0();
      OUTLINED_FUNCTION_48(v38, (uint64_t *)&demangling cache variable for type metadata for Any?);
      v27 = v92;
      goto LABEL_18;
    }
    if (OUTLINED_FUNCTION_1_7())
    {
      v27 = (int)v92;
      goto LABEL_5;
    }
    if (OUTLINED_FUNCTION_1_7())
    {
      v27 = (__int16)v92;
      goto LABEL_5;
    }
    if (OUTLINED_FUNCTION_1_7())
    {
      v27 = (char)v92;
      goto LABEL_5;
    }
    if (OUTLINED_FUNCTION_1_7())
      goto LABEL_58;
    if (OUTLINED_FUNCTION_1_7())
    {
      OUTLINED_FUNCTION_2_6();
      v28 = OUTLINED_FUNCTION_58_0();
      v27 = v92;
      goto LABEL_6;
    }
    if (OUTLINED_FUNCTION_1_7())
    {
      v27 = v92;
      goto LABEL_5;
    }
    if (OUTLINED_FUNCTION_1_7())
    {
      v27 = (unsigned __int16)v92;
      goto LABEL_5;
    }
    if (OUTLINED_FUNCTION_1_7())
    {
      v27 = v92;
      goto LABEL_5;
    }
    if (swift_dynamicCast())
    {
LABEL_58:
      v27 = v92;
      goto LABEL_5;
    }
    goto LABEL_81;
  }
  if ((_DWORD)v23 == 1)
  {
    OUTLINED_FUNCTION_143(v23, v24, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v94)
    {
      OUTLINED_FUNCTION_104();
      type metadata accessor for BMSQLColumn(0, &lazy cache variable for type metadata for NSNumber);
      if (OUTLINED_FUNCTION_1_7())
      {
        v29 = (void *)v92;
        objc_msgSend((id)v92, sel_doubleValue, v81);
        v31 = v30;

        OUTLINED_FUNCTION_58_0();
        v32 = v31;
      }
      else
      {
        if (!OUTLINED_FUNCTION_1_7())
        {
LABEL_81:
          lazy protocol witness table accessor for type SQLError and conformance SQLError();
          OUTLINED_FUNCTION_13_0();
          OUTLINED_FUNCTION_161();
          outlined init with copy of Any((uint64_t)v95, v79);
          OUTLINED_FUNCTION_25();
          OUTLINED_FUNCTION_2_6();
          v80 = OUTLINED_FUNCTION_58_0();
          OUTLINED_FUNCTION_48(v80, (uint64_t *)&demangling cache variable for type metadata for Any?);
          OUTLINED_FUNCTION_140();
          return;
        }
        OUTLINED_FUNCTION_58_0();
        v32 = v92;
      }
      OUTLINED_FUNCTION_140();
      if ((~v32 & 0x7FF0000000000000) != 0)
      {
        v54 = OUTLINED_FUNCTION_2_6();
        OUTLINED_FUNCTION_48(v54, (uint64_t *)&demangling cache variable for type metadata for Any?);
        v48 = 0;
      }
      else
      {
        v49 = OUTLINED_FUNCTION_2_6();
        OUTLINED_FUNCTION_48(v49, (uint64_t *)&demangling cache variable for type metadata for Any?);
        v48 = (v32 & 0xFFFFFFFFFFFFFLL) != 0;
        if ((v32 & 0xFFFFFFFFFFFFFLL) != 0)
          v32 = 0;
      }
    }
    else
    {
      OUTLINED_FUNCTION_59((uint64_t)&v93);
      OUTLINED_FUNCTION_2_6();
      OUTLINED_FUNCTION_59(a1);
      v32 = 0;
      v48 = 1;
    }
    v55 = v88;
    *v88 = v32;
    *((_BYTE *)v55 + 8) = v48;
    goto LABEL_39;
  }
  if ((_DWORD)v23 != 2)
  {
    switch((_DWORD)v23)
    {
      case 3:
        OUTLINED_FUNCTION_142(v23, (uint64_t)v95);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
        if (!swift_dynamicCast())
          goto LABEL_61;
        outlined destroy of UUID?(v5, &demangling cache variable for type metadata for Date?);
        v40 = OUTLINED_FUNCTION_2_6();
        OUTLINED_FUNCTION_31_0(v40, v41, (uint64_t *)&demangling cache variable for type metadata for Any?);
        if (v94)
        {
          outlined init with take of Any(&v93, v95);
          v43 = OUTLINED_FUNCTION_70();
          v44 = (_QWORD *)v86;
          swift_dynamicCast();
          v45 = (uint64_t)v44;
          v46 = 0;
          v47 = v43;
        }
        else
        {
          OUTLINED_FUNCTION_80(v42, (uint64_t *)&demangling cache variable for type metadata for Any?);
          v47 = OUTLINED_FUNCTION_70();
          v44 = (_QWORD *)v86;
          v45 = v86;
          v46 = 1;
        }
        __swift_storeEnumTagSinglePayload(v45, v46, 1, v47);
        break;
      case 4:
        OUTLINED_FUNCTION_28();
        OUTLINED_FUNCTION_112();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Data?);
        if (!OUTLINED_FUNCTION_23())
          goto LABEL_61;
        outlined consume of Data?(v93, *((unint64_t *)&v93 + 1));
        v50 = OUTLINED_FUNCTION_2_6();
        OUTLINED_FUNCTION_31_0(v50, v51, (uint64_t *)&demangling cache variable for type metadata for Any?);
        if (v94)
        {
          OUTLINED_FUNCTION_79();
          OUTLINED_FUNCTION_30();
          v53 = v92;
        }
        else
        {
          OUTLINED_FUNCTION_80(v52, (uint64_t *)&demangling cache variable for type metadata for Any?);
          v53 = xmmword_18DC0C920;
        }
        v44 = v85;
        *v85 = v53;
        break;
      case 5:
        OUTLINED_FUNCTION_28();
        OUTLINED_FUNCTION_112();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
        if (!OUTLINED_FUNCTION_23())
          goto LABEL_61;
        swift_bridgeObjectRelease();
        v56 = OUTLINED_FUNCTION_2_6();
        OUTLINED_FUNCTION_31_0(v56, v57, (uint64_t *)&demangling cache variable for type metadata for Any?);
        if (v94)
        {
          OUTLINED_FUNCTION_79();
          OUTLINED_FUNCTION_30();
          v60 = *((_QWORD *)&v92 + 1);
          v59 = v92;
        }
        else
        {
          OUTLINED_FUNCTION_80(v58, (uint64_t *)&demangling cache variable for type metadata for Any?);
          v59 = 0;
          v60 = 0;
        }
        v44 = v82;
        *v82 = v59;
        v44[1] = v60;
        break;
      case 6:
        OUTLINED_FUNCTION_28();
        OUTLINED_FUNCTION_112();
        v61 = v84;
        if (!swift_dynamicCast())
          goto LABEL_61;
        outlined destroy of UUID?(v61, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v62 = OUTLINED_FUNCTION_2_6();
        OUTLINED_FUNCTION_31_0(v62, v63, (uint64_t *)&demangling cache variable for type metadata for Any?);
        if (v94)
        {
          outlined init with take of Any(&v93, v95);
          v65 = OUTLINED_FUNCTION_71();
          OUTLINED_FUNCTION_128();
          swift_dynamicCast();
          v66 = (uint64_t)v20;
          v67 = 0;
          v68 = v65;
        }
        else
        {
          OUTLINED_FUNCTION_80(v64, (uint64_t *)&demangling cache variable for type metadata for Any?);
          OUTLINED_FUNCTION_71();
          v66 = OUTLINED_FUNCTION_128();
          v67 = 1;
        }
        __swift_storeEnumTagSinglePayload(v66, v67, 1, v68);
        swift_storeEnumTagMultiPayload();
        v77 = (uint64_t)v20;
LABEL_70:
        outlined init with take of StorableValue(v77, (uint64_t)v88, type metadata accessor for StorableValue);
        return;
      case 7:
        if (!*(_QWORD *)(a1 + 24))
        {
          v78 = OUTLINED_FUNCTION_2_6();
          OUTLINED_FUNCTION_48(v78, (uint64_t *)&demangling cache variable for type metadata for Any?);
          goto LABEL_39;
        }
LABEL_61:
        lazy protocol witness table accessor for type SQLError and conformance SQLError();
        OUTLINED_FUNCTION_13_0();
        OUTLINED_FUNCTION_161();
        OUTLINED_FUNCTION_142(v69, v70);
        OUTLINED_FUNCTION_25();
        OUTLINED_FUNCTION_2_6();
        outlined destroy of UUID?(a1, (uint64_t *)&demangling cache variable for type metadata for Any?);
        return;
      default:
        lazy protocol witness table accessor for type SQLError and conformance SQLError();
        OUTLINED_FUNCTION_13_0();
        OUTLINED_FUNCTION_161();
        v71 = v90;
        v72[3] = (uint64_t)v90;
        __swift_allocate_boxed_opaque_existential_0Tm(v72);
        v73 = v91;
        ((void (*)(uint64_t))v22)(v74);
        OUTLINED_FUNCTION_25();
        v75 = (uint64_t (*)(uint64_t, ValueMetadata *))v89[1];
        v76 = v75(v73, v71);
        OUTLINED_FUNCTION_48(v76, (uint64_t *)&demangling cache variable for type metadata for Any?);
        v75(v4, v71);
        return;
    }
    swift_storeEnumTagMultiPayload();
    v77 = (uint64_t)v44;
    goto LABEL_70;
  }
  OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_112();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  if (!OUTLINED_FUNCTION_23())
    goto LABEL_61;
  swift_bridgeObjectRelease();
  v33 = OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_31_0(v33, v34, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v94)
  {
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_30();
    v37 = *((_QWORD *)&v92 + 1);
    v36 = v92;
  }
  else
  {
    OUTLINED_FUNCTION_80(v35, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v36 = 0;
    v37 = 0;
  }
  *v3 = v36;
  v3[1] = v37;
  swift_storeEnumTagMultiPayload();
  outlined init with take of StorableValue((uint64_t)v3, (uint64_t)v88, type metadata accessor for StorableValue);
}

ValueMetadata *type metadata accessor for SQLDataType()
{
  return &type metadata for SQLDataType;
}

uint64_t OUTLINED_FUNCTION_13_0()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_13_2()
{
  return swift_arrayInitWithCopy();
}

uint64_t OUTLINED_FUNCTION_13_3()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_13_5()
{
  unint64_t v0;
  uint64_t v1;

  specialized _ArrayBuffer._getElementSlowPath(_:)(v0, *(_QWORD *)(v1 - 192));
}

void OUTLINED_FUNCTION_13_6(Swift::UInt a1)
{
  Hasher._combine(_:)(a1);
}

void outlined destroy of UUID?(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_75(v2);
  OUTLINED_FUNCTION_1();
}

uint64_t outlined destroy of (key: String, value: StorableValue)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x193FED788]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void OUTLINED_FUNCTION_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xEu);
}

uint64_t OUTLINED_FUNCTION_4_0()
{
  return objc_opt_class();
}

void OUTLINED_FUNCTION_0_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_6_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_4_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_4_4()
{
  return objc_opt_class();
}

uint64_t OUTLINED_FUNCTION_4_6()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_123()
{
  return type metadata accessor for StorableValue(0);
}

void OUTLINED_FUNCTION_4_7(uint64_t a1)
{
  unint64_t v1;

  v1 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_4_8()
{
  _StringGuts.grow(_:)(34);
}

uint64_t OUTLINED_FUNCTION_4_9()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_4_10()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_4_11()
{
  return type metadata accessor for TypeSchema();
}

uint64_t OUTLINED_FUNCTION_4_12()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 408) + 8))(v0, *(_QWORD *)(v1 - 400));
}

void OUTLINED_FUNCTION_4_13(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * a1) = *(_QWORD *)(v3 - 232);
}

uint64_t OUTLINED_FUNCTION_4_14()
{
  return errcode();
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_1_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_2_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_1_5(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_0_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_1_7()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_1_9()
{
  return Hasher.init(_seed:)();
}

void OUTLINED_FUNCTION_1_10()
{
  JUMPOUT(0x193FED7A0);
}

void OUTLINED_FUNCTION_14()
{
  JUMPOUT(0x193FED860);
}

unint64_t OUTLINED_FUNCTION_1_12()
{
  return lazy protocol witness table accessor for type String and conformance String();
}

void OUTLINED_FUNCTION_1_13()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

void OUTLINED_FUNCTION_1_14()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

uint64_t OUTLINED_FUNCTION_1_15()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_0_5()
{
  return errstart(20, 0);
}

uint64_t OUTLINED_FUNCTION_1_16()
{
  return errcode();
}

_DWORD *OUTLINED_FUNCTION_1_17(char *a1, uint64_t a2, uint64_t a3)
{
  return errfinish(a1, 306, a3);
}

uint64_t OUTLINED_FUNCTION_1_18()
{
  _BYTE ***v0;
  unsigned int **v1;

  return scanner_errposition(**v1, v0);
}

uint64_t OUTLINED_FUNCTION_1_19(uint64_t *a1)
{
  return MemoryContextStats(*a1);
}

uint64_t OUTLINED_FUNCTION_49(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_100()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_49_0()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_49_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;

  outlined init with copy of Date?(a1, v1, v2);
}

double OUTLINED_FUNCTION_14_0@<D0>(double a1@<X8>)
{
  return floor(a1);
}

uint64_t OUTLINED_FUNCTION_15(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 88) + 16))(a1 + *(int *)(v1 + 36), v3, v2);
}

void OUTLINED_FUNCTION_15_0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 232) = a1;
  *(_QWORD *)(v2 - 224) = (v1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_7_0()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_15_1()
{
  return swift_release();
}

ValueMetadata *OUTLINED_FUNCTION_33()
{
  return type metadata accessor for SQLDataType();
}

id OUTLINED_FUNCTION_15_2(uint64_t a1)
{
  sqlite3 *v1;

  return BMSQLDatabaseError(a1, v1, 0);
}

void OUTLINED_FUNCTION_15_3(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  outlined init with copy of Date?(a1, *(_QWORD *)(v2 - 320), v1);
}

uint64_t OUTLINED_FUNCTION_15_4()
{
  return type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
}

uint64_t OUTLINED_FUNCTION_21@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_21_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_21_1()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t OUTLINED_FUNCTION_21_2()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_21_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_21_4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

void OUTLINED_FUNCTION_21_5(uint64_t a1, uint64_t a2)
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1);
}

uint64_t OUTLINED_FUNCTION_22()
{
  return swift_arrayInitWithTakeFrontToBack();
}

uint64_t OUTLINED_FUNCTION_24()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_160@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 256) = result;
  return result;
}

ValueMetadata *OUTLINED_FUNCTION_22_2()
{
  return type metadata accessor for SQLExpression();
}

void OUTLINED_FUNCTION_22_3()
{
  Swift::String v0;

  v0._countAndFlagsBits = 2107424;
  v0._object = (void *)0xE300000000000000;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_22_4()
{
  uint64_t v0;
  uint64_t *v1;

  outlined destroy of UUID?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_37(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_37_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_37_2()
{
  return _StringObject.sharedUTF8.getter();
}

void OUTLINED_FUNCTION_37_3(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t static BMPoirotSchematizerShim.searchValue(in:withFieldNumber:typeRawValue:error:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  return static BMPoirotSchematizerShim.searchValue(in:withFieldNumber:typeRawValue:error:)(a1, a2, a3, a4, MEMORY[0x1E0D7F460], a5);
}

uint64_t static BMPoirotSchematizerShim.bmTypeToPoirotType(typeRawValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  Swift::String v7;

  switch(a1)
  {
    case 0:
      v3 = (unsigned int *)MEMORY[0x1E0D7F4B0];
      goto LABEL_17;
    case 1:
      v3 = (unsigned int *)MEMORY[0x1E0D7F498];
      goto LABEL_17;
    case 2:
      v3 = (unsigned int *)MEMORY[0x1E0D7F4A0];
      goto LABEL_17;
    case 3:
      v3 = (unsigned int *)MEMORY[0x1E0D7F4A8];
      goto LABEL_17;
    case 4:
      v3 = (unsigned int *)MEMORY[0x1E0D7F4D0];
      goto LABEL_17;
    case 5:
      v3 = (unsigned int *)MEMORY[0x1E0D7F4D8];
      goto LABEL_17;
    case 6:
      v3 = (unsigned int *)MEMORY[0x1E0D7F4B8];
      goto LABEL_17;
    case 7:
      v3 = (unsigned int *)MEMORY[0x1E0D7F4C0];
      goto LABEL_17;
    case 8:
      v3 = (unsigned int *)MEMORY[0x1E0D7F4E0];
      goto LABEL_17;
    case 9:
      v3 = (unsigned int *)MEMORY[0x1E0D7F4E8];
      goto LABEL_17;
    case 10:
      v3 = (unsigned int *)MEMORY[0x1E0D7F4F0];
      goto LABEL_17;
    case 11:
      v3 = (unsigned int *)MEMORY[0x1E0D7F4F8];
      goto LABEL_17;
    case 12:
      v3 = (unsigned int *)MEMORY[0x1E0D7F488];
      goto LABEL_17;
    case 13:
      v3 = (unsigned int *)MEMORY[0x1E0D7F4C8];
      goto LABEL_17;
    case 14:
      v3 = (unsigned int *)MEMORY[0x1E0D7F490];
LABEL_17:
      v4 = *v3;
      v5 = type metadata accessor for TypeSchema();
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
      break;
    default:
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

uint64_t static BMPoirotSchematizerShim.poirotValueToObjcValue(value:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  char *v11;
  _QWORD v12[2];
  _OWORD v13[2];

  v12[1] = type metadata accessor for SchematizedData();
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  type metadata accessor for EnumValue();
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyValue?);
  v4 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v12 - v7;
  outlined init with copy of AnyValue?(a1, (uint64_t)v12 - v7);
  v9 = type metadata accessor for AnyValue();
  result = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if ((_DWORD)result == 1)
  {
    *a2 = 0u;
    a2[1] = 0u;
  }
  else
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for AnyValue?);
    outlined init with copy of AnyValue?(a1, (uint64_t)v6);
    if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v9) != 1)
    {
      v11 = (char *)sub_18D8158CC + 4 * byte_18DC0D4BF[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memset(v13, 0, sizeof(v13));
    return outlined init with take of Any?((uint64_t)v13, (uint64_t)a2);
  }
  return result;
}

void sub_18D8158CC()
{
  int *v0;
  uint64_t v1;
  int v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 88) = MEMORY[0x1E0DEDBC8];
  *(_DWORD *)(v1 - 112) = v2;
  JUMPOUT(0x18D815878);
}

void sub_18D81594C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 88) = MEMORY[0x1E0DEB070];
  *(_QWORD *)(v1 - 112) = v2;
  JUMPOUT(0x18D815878);
}

void sub_18D815964()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 88) = MEMORY[0x1E0CB0338];
  JUMPOUT(0x18D815874);
}

void sub_18D815978()
{
  char *v0;
  uint64_t v1;
  char v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 88) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(v1 - 112) = v2;
  JUMPOUT(0x18D815878);
}

void sub_18D815990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(v2 + 32))(v1, v0, *(_QWORD *)(v3 - 120));
  *(_QWORD *)(v3 - 112) = 0;
  *(_QWORD *)(v3 - 104) = 0xE000000000000000;
  _StringGuts.grow(_:)(65);
  v4 = *(_QWORD *)(v3 - 104);
  *(_QWORD *)(v3 - 112) = *(_QWORD *)(v3 - 112);
  *(_QWORD *)(v3 - 104) = v4;
  v5._countAndFlagsBits = 0xD000000000000019;
  v5._object = (void *)0x800000018DCC3650;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._object = (void *)0x800000018DCC3670;
  v6._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v6);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined init with copy of AnyValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyValue?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  uint64_t v0;
  void (*v1)(_QWORD);
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  OUTLINED_FUNCTION_61_0();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_11_1();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_46_0();
      if (v7)
      {
        __break(1u);
        goto LABEL_19;
      }
      OUTLINED_FUNCTION_10_3();
    }
  }
  OUTLINED_FUNCTION_95_0();
  if (!v5)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    goto LABEL_14;
  }
  v14 = OUTLINED_FUNCTION_58_1(v9, v10, v11, v12, v13);
  OUTLINED_FUNCTION_93_0();
  v15 = (const void *)OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_96_0(v15);
  if (!v4 || ((OUTLINED_FUNCTION_90_0(), v17) ? (v17 = v4 == -1) : (v17 = 0), v17))
  {
LABEL_19:
    OUTLINED_FUNCTION_0_19();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_88_0(v16);
LABEL_14:
  v18 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_93_0() - 8) + 80);
  v19 = (v18 + 32) & ~v18;
  if ((v2 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v0 + v19, v3);
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_64();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v3, v14 + v19, v0, v1);
  }
  return v14;
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_55_0()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_55_1(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of SQLExpressionEvaluatorError(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_55_2()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 144) = v0;
  return v0(v2, v1);
}

uint64_t OUTLINED_FUNCTION_55_3(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return outlined init with take of (key: String, value: StorableValue)(a1, a2, v2);
}

ValueMetadata *type metadata accessor for AggregationFunction()
{
  return &type metadata for AggregationFunction;
}

uint64_t OUTLINED_FUNCTION_64()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 256));
}

uint64_t OUTLINED_FUNCTION_24_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

void OUTLINED_FUNCTION_3_0()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_17()
{
  void *v0;

  return objc_msgSend(v0, "pid");
}

uint64_t OUTLINED_FUNCTION_17_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  return v2(v1 + *(int *)(v0 + 40), v4, v3);
}

void OUTLINED_FUNCTION_17_1()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_17_3()
{
  return swift_arrayDestroy();
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_37_0();
    goto LABEL_11;
  }
  a5(0);
  OUTLINED_FUNCTION_168();
  v11 = *(_QWORD *)(v10 + 72);
  v12 = a4 + v9 + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy();
    OUTLINED_FUNCTION_64();
    return v14;
  }
  OUTLINED_FUNCTION_0_19();
  OUTLINED_FUNCTION_38_0();
LABEL_11:
  result = OUTLINED_FUNCTION_9_3();
  __break(1u);
  return result;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_50@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_42_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 352) + 8))(*(_QWORD *)(v0 - 232), *(_QWORD *)(v0 - 344));
}

uint64_t OUTLINED_FUNCTION_42_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 136))(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_42_3()
{
  return String.init(stringInterpolation:)();
}

uint64_t OUTLINED_FUNCTION_42_4()
{
  return swift_arrayDestroy();
}

void initializeWithCopy for KeyedFirstMatchingRecordCache()
{
  uint64_t v0;
  int *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  OUTLINED_FUNCTION_81_2();
  v2 = v1;
  v4 = v3;
  v5 = OUTLINED_FUNCTION_59_3();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v5[-1].Description + 2))(v0, v4, v5);
  v6 = v2[6];
  *(_QWORD *)(v0 + v2[5]) = *(_QWORD *)(v4 + v2[5]);
  *(_QWORD *)(v0 + v6) = *(_QWORD *)(v4 + v6);
  v7 = v2[8];
  *(_QWORD *)(v0 + v2[7]) = *(_QWORD *)(v4 + v2[7]);
  v8 = (_QWORD *)(v0 + v7);
  v9 = v4 + v7;
  v10 = *(void **)v9;
  v22 = *(_QWORD *)(v9 + 8);
  *v8 = *(_QWORD *)v9;
  v8[1] = v22;
  v11 = v2[10];
  *(_QWORD *)(v0 + v2[9]) = *(_QWORD *)(v4 + v2[9]);
  *(_QWORD *)(v0 + v11) = *(_QWORD *)(v4 + v11);
  v12 = v2[12];
  *(_QWORD *)(v0 + v2[11]) = *(_QWORD *)(v4 + v2[11]);
  *(_QWORD *)(v0 + v12) = *(_QWORD *)(v4 + v12);
  v13 = v2[14];
  *(_QWORD *)(v0 + v2[13]) = *(_QWORD *)(v4 + v2[13]);
  *(_BYTE *)(v0 + v13) = *(_BYTE *)(v4 + v13);
  v14 = v2[15];
  v15 = (_QWORD *)(v0 + v14);
  v16 = (_QWORD *)(v4 + v14);
  v17 = v16[1];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_48_2();
  v18 = v10;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_84_0();
  OUTLINED_FUNCTION_32_4();
  OUTLINED_FUNCTION_192_0();
  if (v17)
  {
    *v15 = *v16;
    v15[1] = v17;
    v19 = v16[2];
    v20 = v16[3];
    v15[2] = v19;
    v15[3] = v20;
    OUTLINED_FUNCTION_141();
    swift_retain();
  }
  else
  {
    v21 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v21;
  }
  OUTLINED_FUNCTION_40_4();
}

uint64_t OUTLINED_FUNCTION_68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

void OUTLINED_FUNCTION_163()
{
  Hasher._combine(_:)(0);
}

uint64_t OUTLINED_FUNCTION_163_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_145()
{
  return specialized _merge<A>(low:mid:high:buffer:by:)();
}

uint64_t OUTLINED_FUNCTION_101(sqlite3 *a1, const char *a2)
{
  return sqlite3_exec(a1, a2, 0, 0, 0);
}

uint64_t OUTLINED_FUNCTION_145_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(int *)(v0 + 32);
  *(_QWORD *)(v2 + *(int *)(v0 + 28)) = *(_QWORD *)(v1 + *(int *)(v0 + 28));
  *(_BYTE *)(v2 + v3) = *(_BYTE *)(v1 + v3);
  return v2;
}

uint64_t ResultColumn.alias.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for BookmarkCache(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for BookmarkCache);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD);
  char v5;
  char v6;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_9_3();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_103_0();
    if (v5 && (v4(0), OUTLINED_FUNCTION_123_0(), !v6 & v5))
    {
      if (v3 == v2)
      {
        OUTLINED_FUNCTION_1_0();
      }
      else
      {
        OUTLINED_FUNCTION_26_0();
        OUTLINED_FUNCTION_43();
      }
    }
    else
    {
      v4(0);
      OUTLINED_FUNCTION_26_0();
      OUTLINED_FUNCTION_44_0();
    }
  }
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char v5;
  char v6;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_9_3();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_103_0();
    if (v5 && (__swift_instantiateConcreteTypeFromMangledName(v4), OUTLINED_FUNCTION_123_0(), !v6 & v5))
    {
      if (v3 == v2)
      {
        OUTLINED_FUNCTION_1_0();
      }
      else
      {
        OUTLINED_FUNCTION_26_0();
        OUTLINED_FUNCTION_43();
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(v4);
      OUTLINED_FUNCTION_26_0();
      OUTLINED_FUNCTION_44_0();
    }
  }
}

uint64_t type metadata accessor for BMSQLColumn(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_70()
{
  return type metadata accessor for Date();
}

uint64_t OUTLINED_FUNCTION_106()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_70_1()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_70_2(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;

  StorableValue.init(_:dataType:)(a1, v2, a2);
}

uint64_t OUTLINED_FUNCTION_70_3@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for Date.ISO8601FormatStyle();
}

uint64_t OUTLINED_FUNCTION_95@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 - 256);
  *(_QWORD *)v3 = v1;
  *(_BYTE *)(v3 + 8) = v2 & 1;
  return v3;
}

void OUTLINED_FUNCTION_95_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  outlined init with take of StorableValue(a1, v3, a3);
}

uint64_t SelectCore.where.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of PgQuery_Alias?(v1 + 104, a1, &demangling cache variable for type metadata for SQLExpression?);
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

void specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t destroy for ChangeRecord()
{
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> COUNT_STAR.applyMetadata(metadata:)(Swift::OpaquePointer metadata)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_79_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_38_2();
  if (v5)
  {
    if (one-time initialization token for countKey != -1)
    {
      swift_once();
      if (!*(_QWORD *)(v2 + 16))
        goto LABEL_12;
    }
    OUTLINED_FUNCTION_33_1();
    OUTLINED_FUNCTION_105_0();
    v7 = v6;
    OUTLINED_FUNCTION_8_1();
    if ((v7 & 1) == 0)
      goto LABEL_12;
    OUTLINED_FUNCTION_33_1();
    OUTLINED_FUNCTION_53_2();
    OUTLINED_FUNCTION_8_1();
    v8 = OUTLINED_FUNCTION_123();
    v9 = OUTLINED_FUNCTION_86(v3, 1, v8);
    if (v10)
    {
      OUTLINED_FUNCTION_48(v9, &demangling cache variable for type metadata for StorableValue?);
LABEL_12:
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      v14 = OUTLINED_FUNCTION_13_0();
      OUTLINED_FUNCTION_6_6(v14, v15);
      OUTLINED_FUNCTION_141();
      OUTLINED_FUNCTION_125_1();
      goto LABEL_13;
    }
    v13 = OUTLINED_FUNCTION_139_1();
    if ((_DWORD)v13)
    {
      OUTLINED_FUNCTION_121_1(v13, type metadata accessor for StorableValue);
      goto LABEL_12;
    }
    if (*(_BYTE *)(v3 + 8) == 1)
      goto LABEL_12;
    v12 = *(_QWORD *)v3;
    v11 = type metadata accessor for COUNT_STAR(0);
  }
  else
  {
    v11 = type metadata accessor for COUNT_STAR(0);
    v12 = 0;
  }
  *(_QWORD *)(v1 + *(int *)(v11 + 24)) = v12;
LABEL_13:
  OUTLINED_FUNCTION_152_0();
  OUTLINED_FUNCTION_82_0();
}

uint64_t specialized Dictionary.subscript.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(a1 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(), (v5 & 1) != 0))
  {
    v6 = v4;
    v7 = *(_QWORD *)(a1 + 56);
    v8 = OUTLINED_FUNCTION_123();
    outlined init with copy of StorableValue(v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * v6, a2, type metadata accessor for StorableValue);
    v9 = a2;
    v10 = 0;
    v11 = v8;
  }
  else
  {
    v11 = OUTLINED_FUNCTION_123();
    v9 = a2;
    v10 = 1;
  }
  return __swift_storeEnumTagSinglePayload(v9, v10, 1, v11);
}

void specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  ValueMetadata *v5;
  void *Description;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, ValueMetadata *);
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  Swift::String v18;

  OUTLINED_FUNCTION_82_1();
  v4 = v3;
  v5 = type metadata accessor for SQLExpression();
  Description = v5[-1].Description;
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_52_4();
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SQLDataType));
  OUTLINED_FUNCTION_274();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_199_0();
  if (v2)
  {
    OUTLINED_FUNCTION_272();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_341();
    v13 = (void (*)(uint64_t, uint64_t, ValueMetadata *))*((_QWORD *)Description + 2);
    v14 = *((_QWORD *)Description + 9);
    do
    {
      v13(v0, v4, v5);
      v18._countAndFlagsBits = SQLExpression.sql.getter();
      v8 = (char *)v1 + *(int *)(v15 + 48);
      strcpy((char *)&v16, "group_by_key_");
      HIWORD(v16) = -4864;
      OUTLINED_FUNCTION_85_2(v18);
      OUTLINED_FUNCTION_23_0();
      *v1 = v16;
      v9 = v0;
      SQLExpression.returnType.getter(v8);
      OUTLINED_FUNCTION_290(*((uint64_t (**)(uint64_t, uint64_t))Description + 1));
      if ((OUTLINED_FUNCTION_144_1() & 1) == 0)
      {
        OUTLINED_FUNCTION_89_0();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v9 = v17;
      }
      v10 = *(_QWORD *)(v9 + 16);
      if (v10 >= *(_QWORD *)(v9 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v9 = v17;
      }
      *(_QWORD *)(v9 + 16) = v10 + 1;
      OUTLINED_FUNCTION_264();
      outlined init with take of UUID?((uint64_t)v1, v11 + v12 * v10, &demangling cache variable for type metadata for (String, SQLDataType));
      v4 += v14;
      --v2;
    }
    while (v2);
  }
  OUTLINED_FUNCTION_55();
}

void SQLExpression.returnType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 56);
}

uint64_t SQLExpression.sql.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OUTLINED_FUNCTION_87()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_87_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_87_1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)v2 = *(_QWORD *)(v1 + a1);
  *(_BYTE *)(v2 + 8) = 0;
  return type metadata accessor for StorableValue(0);
}

void OUTLINED_FUNCTION_182(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of StorableValue(a1, v1);
}

uint64_t OUTLINED_FUNCTION_75(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_75_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_75_2()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t OUTLINED_FUNCTION_75_3(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  return static KeyedAggregationMetadataCache.tableName(materializedViewName:)(a1, a2, 27, 0xD000000000000019, a5);
}

uint64_t OUTLINED_FUNCTION_183()
{
  return type metadata accessor for COUNT(0);
}

void OUTLINED_FUNCTION_183_0(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 - 256) = v1;
}

uint64_t OUTLINED_FUNCTION_138()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t OUTLINED_FUNCTION_138_1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 - 72) + a1;
}

uint64_t OUTLINED_FUNCTION_32()
{
  return Hasher.init(_seed:)();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  Swift::UInt v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  Swift::Int v43;
  _DWORD v45[4];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_12(v6);
  v50 = type metadata accessor for TimeZone();
  OUTLINED_FUNCTION_3_6(*(_QWORD *)(v50 - 8));
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_12(v8);
  v9 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  OUTLINED_FUNCTION_160(v9, (uint64_t)&v61);
  OUTLINED_FUNCTION_3_6(v10);
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_75_0();
  v12 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
  OUTLINED_FUNCTION_160(v12, (uint64_t)&v60);
  OUTLINED_FUNCTION_3_6(v13);
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_12(v15);
  v16 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
  OUTLINED_FUNCTION_160(v16, (uint64_t)&v59);
  OUTLINED_FUNCTION_3_6(v17);
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_12(v19);
  v20 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  OUTLINED_FUNCTION_160(v20, (uint64_t)&v58);
  OUTLINED_FUNCTION_3_6(v21);
  MEMORY[0x1E0C80A78](v22);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_12(v23);
  v48 = type metadata accessor for Date.ISO8601FormatStyle();
  OUTLINED_FUNCTION_3_6(*(_QWORD *)(v48 - 8));
  MEMORY[0x1E0C80A78](v24);
  OUTLINED_FUNCTION_8();
  v47 = v25;
  v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v26);
  OUTLINED_FUNCTION_8();
  v51 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v28);
  v54 = (char *)v45 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v30);
  OUTLINED_FUNCTION_61();
  v55 = v31;
  v32 = OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_97_0();
  v34 = MEMORY[0x1E0C80A78](v33);
  v36 = (char *)v45 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34);
  v38 = (char *)v45 - v37;
  v46 = v1;
  Hasher.init(_seed:)();
  v49 = a1;
  v39 = *(_QWORD *)(a1 + 16);
  Hasher._combine(_:)(v39);
  if (v39)
  {
    v45[3] = *MEMORY[0x1E0CB05F0];
    v45[2] = *MEMORY[0x1E0CB05E0];
    v45[1] = *MEMORY[0x1E0CB0600];
    v45[0] = *MEMORY[0x1E0CB0628];
    v57 = *(_QWORD *)(v2 + 72);
    v56 = v3;
    v53 = v32;
    v40 = OUTLINED_FUNCTION_139_0();
    outlined init with copy of StorableValue(v40, v41, type metadata accessor for StorableValue);
    outlined init with copy of StorableValue((uint64_t)v38, (uint64_t)v36, type metadata accessor for StorableValue);
    v42 = (char *)&loc_18D816B48 + dword_18D92CF6C[swift_getEnumCaseMultiPayload()];
    __asm { BR              X9 }
  }
  v43 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v49, v43);
}

uint64_t OUTLINED_FUNCTION_0_6()
{
  return NSRequestConcreteImplementation();
}

void OUTLINED_FUNCTION_0_7(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_0_8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_0_9(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0x16u);
}

void OUTLINED_FUNCTION_0_10(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

char *OUTLINED_FUNCTION_0_11()
{
  return dlerror();
}

void OUTLINED_FUNCTION_0_12(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_0_13()
{
  return NSRequestConcreteImplementation();
}

void OUTLINED_FUNCTION_0_14(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_debug_impl(a1, v4, OS_LOG_TYPE_DEBUG, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_0_16(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t OUTLINED_FUNCTION_0_17(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t OUTLINED_FUNCTION_141()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_0_21()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t OUTLINED_FUNCTION_0_22()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_0_23()
{
  return errstart(20, 0);
}

uint64_t OUTLINED_FUNCTION_0_24()
{
  return errstart(20, 0);
}

uint64_t OUTLINED_FUNCTION_0_25(_DWORD *a1)
{
  *a1 = -1;
  return errstart(20, 0);
}

uint64_t OUTLINED_FUNCTION_0_26(int a1)
{
  return errstart(a1, 0);
}

void OUTLINED_FUNCTION_0_27(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1264, a4);
}

uint64_t OUTLINED_FUNCTION_6_6(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *v2;
  v4 = v2[1];
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 64) = 8;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_6_7()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_6_8@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 256) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
}

uint64_t OUTLINED_FUNCTION_6_9()
{
  return errcode();
}

void outlined destroy of StorableValue(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  OUTLINED_FUNCTION_75(v2);
  OUTLINED_FUNCTION_1();
}

uint64_t OUTLINED_FUNCTION_2_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_8_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_8_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v1, v0, v3);
}

uint64_t OUTLINED_FUNCTION_8_3()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_8_4()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_8_5()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_8_6()
{
  return type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
}

uint64_t OUTLINED_FUNCTION_8_7()
{
  return errcode();
}

uint64_t OUTLINED_FUNCTION_10_0()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_86(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

void OUTLINED_FUNCTION_10_1(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_10_2()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_10_4(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 208) = *(_QWORD *)(*(_QWORD *)(a1 - 256) + 72);
}

uint64_t bind(_:to:db:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _DWORD v55[10];
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  char *v78;
  int v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  ValueMetadata *v87;
  char *v88;
  void *Description;
  _QWORD *v90;
  uint64_t v91;
  int v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v64 = a3;
  v86 = a2;
  v97 = *MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for UUID();
  v57 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v57 + 64);
  MEMORY[0x1E0C80A78](v4);
  v60 = (char *)v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v55 - v10;
  v71 = type metadata accessor for Date();
  v66 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71);
  v65 = (char *)v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v14 = MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v55 - v15;
  v87 = type metadata accessor for SQLDataType();
  Description = v87[-1].Description;
  MEMORY[0x1E0C80A78](v87);
  v88 = (char *)v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for StorableValue(0);
  v82 = *(_QWORD *)(v96 - 8);
  v18 = MEMORY[0x1E0C80A78](v96);
  v58 = (char *)v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v59 = (char *)v55 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v67 = (char *)v55 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v63 = (char *)v55 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v72 = (char *)v55 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v70 = (char *)v55 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v78 = (char *)v55 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v80 = (char *)v55 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v94 = (uint64_t)v55 - v35;
  MEMORY[0x1E0C80A78](v34);
  v37 = (char *)v55 - v36;
  v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: StorableValue));
  MEMORY[0x1E0C80A78](v91);
  v81 = (char *)v55 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: StorableValue)?);
  v40 = MEMORY[0x1E0C80A78](v39);
  v90 = (_QWORD *)((char *)v55 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v40);
  v43 = (_QWORD *)((char *)v55 - v42);
  v44 = *(_QWORD *)(a1 + 16);
  v73 = 7;
  v74 = 6;
  v76 = 4;
  v75 = 5;
  v79 = 2;
  v77 = 3;
  v84 = 1;
  v56 = v5;
  v55[9] = v5;
  v92 = 0;
  v83 = a1;
  swift_bridgeObjectRetain();
  v68 = v4;
  v93 = v43;
  v85 = v44;
  v61 = v11;
  v69 = v16;
  v62 = v9;
  if (v44)
  {
    v47 = v91;
    v49 = (uint64_t)&v81[*(int *)(v91 + 48)];
    outlined init with copy of SQLExpressionEvaluatorError(v83 + ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80)), v49, type metadata accessor for StorableValue);
    v48 = (uint64_t)v90;
    v50 = (uint64_t)v90 + *(int *)(v47 + 48);
    *v90 = 0;
    outlined init with take of StorableValue(v49, v50);
    v45 = 0;
    v46 = 1;
    v43 = v93;
  }
  else
  {
    v45 = 1;
    v46 = 0;
    v47 = v91;
    v48 = (uint64_t)v90;
  }
  __swift_storeEnumTagSinglePayload(v48, v45, 1, v47);
  outlined init with take of (offset: Int, element: StorableValue)?(v48, (uint64_t)v43, &demangling cache variable for type metadata for (offset: Int, element: StorableValue)?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v43, 1, v47) != 1)
  {
    v95 = v46;
    v51 = *v43;
    outlined init with take of StorableValue((uint64_t)v43 + *(int *)(v47 + 48), (uint64_t)v37);
    v52 = v51 + 1;
    if (__OFADD__(v51, 1))
    {
      __break(1u);
    }
    else if (v52 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v52 <= 0x7FFFFFFF)
      {
        outlined init with copy of SQLExpressionEvaluatorError((uint64_t)v37, v94, type metadata accessor for StorableValue);
        v53 = (char *)&loc_18D81797C + *((int *)qword_18D92D860 + swift_getEnumCaseMultiPayload());
        __asm { BR              X9 }
      }
LABEL_12:
      __break(1u);
      __break(1u);
      JUMPOUT(0x18D8188ACLL);
    }
    __break(1u);
    goto LABEL_12;
  }
  return swift_bridgeObjectRelease();
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t outlined init with take of StorableValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StorableValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_BYTE *destructiveInjectEnumTag for StorableValue.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

uint64_t getEnumTag for StorableValue.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

void OUTLINED_FUNCTION_2_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void OUTLINED_FUNCTION_2_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_2_6()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 200) + 8))(*(_QWORD *)(v0 - 184), *(_QWORD *)(v0 - 192));
}

void OUTLINED_FUNCTION_2_7()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

void OUTLINED_FUNCTION_2_8(uint64_t a1@<X8>)
{

}

unint64_t OUTLINED_FUNCTION_2_9()
{
  return lazy protocol witness table accessor for type String and conformance String();
}

uint64_t OUTLINED_FUNCTION_2_11()
{
  return errcode();
}

uint64_t OUTLINED_FUNCTION_54()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_54_0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 320) = v0;
}

void OUTLINED_FUNCTION_54_1()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 96);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t OUTLINED_FUNCTION_54_2()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_54_3()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_54_4(uint64_t a1, uint64_t a2)
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 0);
}

uint64_t destroy for StorableValue(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 2:
      v3 = type metadata accessor for Date();
      goto LABEL_5;
    case 3:
    case 4:
      result = swift_bridgeObjectRelease();
      break;
    case 5:
      v5 = a1[1];
      if (v5 >> 60 != 15)
        result = outlined consume of Data._Representation(*a1, v5);
      break;
    case 6:
      v3 = type metadata accessor for UUID();
LABEL_5:
      v4 = v3;
      result = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v3);
      if (!(_DWORD)result)
        result = (*(uint64_t (**)(uint64_t *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    default:
      return result;
  }
  return result;
}

void outlined init with copy of SQLExpressionEvaluatorError(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = a3(0);
  OUTLINED_FUNCTION_24_0(v3);
  OUTLINED_FUNCTION_1();
}

uint64_t type metadata accessor for StorableValue(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for StorableValue);
}

void OUTLINED_FUNCTION_3_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_3_3(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  v3 = *(uint64_t **)(v2 - 104);
  v3[3] = v1;
  v3[4] = a1;
  __swift_allocate_boxed_opaque_existential_0Tm(v3);
}

uint64_t OUTLINED_FUNCTION_3_4()
{
  return BidirectionalCollection<>.joined(separator:)();
}

void OUTLINED_FUNCTION_3_5(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt v10;

  Hasher._combine(_:)(v10);
}

void OUTLINED_FUNCTION_3_6(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

void OUTLINED_FUNCTION_3_7()
{
  unsigned __int8 *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = v0[1];
  *(_QWORD *)(v1 - 136) = v0[2];
  *(_QWORD *)(v1 - 152) = v0[3];
  *(_QWORD *)(v1 - 160) = v0[4];
  *(_QWORD *)(v1 - 168) = v0[5];
  *(_QWORD *)(v1 - 176) = v0[6];
  *(_QWORD *)(v1 - 184) = v0[7];
}

void OUTLINED_FUNCTION_3_8()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_3_9(uint64_t a1)
{
  _BYTE ***v1;

  return scanner_errposition(a1, v1);
}

uint64_t OUTLINED_FUNCTION_3_10(uint64_t (**a1)(void))
{
  return (*a1)();
}

uint64_t OUTLINED_FUNCTION_46_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_46_2()
{
  uint64_t v0;

  return (v0 & 0xFFFFFFFFFFFFFFFLL) + 32;
}

uint64_t OUTLINED_FUNCTION_46_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v3, v1);
}

BOOL OUTLINED_FUNCTION_46_4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_46_5@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 - 256) - 8) + 8))(v1);
}

uint64_t type metadata accessor for MaterializedViewPhysicalPlan(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, type metadata singleton initialization cache for MaterializedViewPhysicalPlan);
}

uint64_t type metadata accessor for KeyedAggregationMetadataCache(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, type metadata singleton initialization cache for KeyedAggregationMetadataCache);
}

uint64_t type metadata accessor for KeyedFirstMatchingRecordCache(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for KeyedFirstMatchingRecordCache);
}

uint64_t destroy for MaterializedViewPhysicalPlan(uint64_t a1, uint64_t a2)
{
  ValueMetadata *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  ValueMetadata *v8;

  v4 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, ValueMetadata *))v4[-1].Description + 1))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  v6 = type metadata accessor for SelectCorePhysicalPlan(0);
  v7 = v5 + *(int *)(v6 + 20);
  v8 = type metadata accessor for SelectCore();
  (*((void (**)(uint64_t, ValueMetadata *))v8[-1].Description + 1))(v7, v8);

  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t destroy for SelectCore(_QWORD *a1)
{
  swift_bridgeObjectRelease();
  if (a1[4])
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(a1 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[16])
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(a1 + 13));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (a1[29])
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(a1 + 26));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void destroy for KeyedFirstMatchingRecordCache(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  ValueMetadata *v4;

  v4 = OUTLINED_FUNCTION_59_3();
  OUTLINED_FUNCTION_75((uint64_t)v4);
  OUTLINED_FUNCTION_194_0();
  OUTLINED_FUNCTION_194_0();
  OUTLINED_FUNCTION_194_0();

  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_194_0();
  OUTLINED_FUNCTION_194_0();
  if (*(_QWORD *)(v2 + *(int *)(a2 + 60) + 8))
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    OUTLINED_FUNCTION_1_6();
  }
}

ValueMetadata *type metadata accessor for MaterializedView()
{
  return &type metadata for MaterializedView;
}

uint64_t destroy for MaterializedView(_QWORD *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[6])
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(a1 + 3));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[18])
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(a1 + 15));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (a1[31])
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(a1 + 28));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t destroy for ResultColumn(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t destroy for SQLExpression(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_137(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return a2(0);
}

uint64_t OUTLINED_FUNCTION_137_1()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_137_2()
{
  return String.hashValue.getter();
}

uint64_t initializeWithCopy for MaterializedViewPhysicalPlan(uint64_t a1, uint64_t a2, int *a3)
{
  ValueMetadata *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ValueMetadata *v14;
  void (*v15)(uint64_t, uint64_t, ValueMetadata *);
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  id v22;

  v6 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v6[-1].Description + 2))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for SelectCorePhysicalPlan(0);
  v11 = v10[5];
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = type metadata accessor for SelectCore();
  v15 = (void (*)(uint64_t, uint64_t, ValueMetadata *))*((_QWORD *)v14[-1].Description + 2);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  v16 = v10[6];
  v17 = *(void **)(v9 + v16);
  *(_QWORD *)(v8 + v16) = v17;
  *(_QWORD *)(v8 + v10[7]) = *(_QWORD *)(v9 + v10[7]);
  *(_QWORD *)(v8 + v10[8]) = *(_QWORD *)(v9 + v10[8]);
  v18 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = v17;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for SelectCore()
{
  return &type metadata for SelectCore;
}

uint64_t type metadata accessor for SelectCorePhysicalPlan(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for SelectCorePhysicalPlan);
}

uint64_t initializeWithCopy for SelectCore(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v6 - 8))(a1 + 8, v5, v6);
    v8 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v8;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    v9 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v9;
    v10 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = v5[3];
    *(_OWORD *)(a1 + 40) = v5[2];
    *(_OWORD *)(a1 + 56) = v11;
    v12 = v5[5];
    *(_OWORD *)(a1 + 72) = v5[4];
    *(_OWORD *)(a1 + 88) = v12;
    v13 = v5[1];
    *v4 = *v5;
    *(_OWORD *)(a1 + 24) = v13;
  }
  v14 = (_OWORD *)(a1 + 104);
  v15 = (_OWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 128);
  if (v16)
  {
    v17 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v16;
    *(_QWORD *)(a1 + 136) = v17;
    (**(void (***)(_OWORD *, _OWORD *))(v16 - 8))(v14, v15);
    v18 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = v18;
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
    v19 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = v19;
    v20 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v21 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v21;
    v22 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v22;
    v23 = *(_OWORD *)(a2 + 120);
    *v14 = *v15;
    *(_OWORD *)(a1 + 120) = v23;
  }
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v24 = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRetain();
  if (v24)
  {
    v25 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = v24;
    *(_QWORD *)(a1 + 240) = v25;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v24 - 8))(a1 + 208, a2 + 208, v24);
    v26 = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = v26;
    *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
    v27 = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 280) = v27;
    v28 = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 296) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v29 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v29;
    v30 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v30;
    v31 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v31;
  }
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined init with copy of SQLExpression(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SQLExpression(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for MaterializedView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = (_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = v7;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v6 - 8))(a1 + 24, v5, v6);
    v8 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v8;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    v9 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v9;
    v10 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = v5[3];
    *(_OWORD *)(a1 + 56) = v5[2];
    *(_OWORD *)(a1 + 72) = v11;
    v12 = v5[5];
    *(_OWORD *)(a1 + 88) = v5[4];
    *(_OWORD *)(a1 + 104) = v12;
    v13 = v5[1];
    *(_OWORD *)(a1 + 24) = *v5;
    *(_OWORD *)(a1 + 40) = v13;
  }
  v14 = (_OWORD *)(a1 + 120);
  v15 = (_OWORD *)(a2 + 120);
  v16 = *(_QWORD *)(a2 + 144);
  if (v16)
  {
    v17 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v16;
    *(_QWORD *)(a1 + 152) = v17;
    (**(void (***)(_OWORD *, _OWORD *))(v16 - 8))(v14, v15);
    v18 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = v18;
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    v19 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = v19;
    v20 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v21 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v21;
    v22 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v22;
    v23 = *(_OWORD *)(a2 + 136);
    *v14 = *v15;
    *(_OWORD *)(a1 + 136) = v23;
  }
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v24 = *(_QWORD *)(a2 + 248);
  swift_bridgeObjectRetain();
  if (v24)
  {
    v25 = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 248) = v24;
    *(_QWORD *)(a1 + 256) = v25;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v24 - 8))(a1 + 224, a2 + 224, v24);
    v26 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = v26;
    *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
    v27 = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 296) = v27;
    v28 = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 312) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v29 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v29;
    v30 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v30;
    v31 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v31;
  }
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for ResultColumn(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  v9 = *(_QWORD *)(a2 + 112);
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 120) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for SQLExpression(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for SQLError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = type metadata accessor for StorableValue(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v24 - v10;
  v12 = v2 + 64;
  v13 = -1 << *(_BYTE *)(v2 + 32);
  v14 = a2 & ~v13;
  if (((*(_QWORD *)(v2 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v15 = ~v13;
    v16 = *(_QWORD *)(a1 + 16);
    v28 = v6;
    v29 = v2;
    v26 = ~v13;
    v27 = v2 + 64;
    v25 = v16;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      if (*(_QWORD *)(v17 + 16) == v16)
      {
        if (!v16 || v17 == a1)
          return v14;
        v18 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
        v19 = v16;
        swift_bridgeObjectRetain();
        v20 = *(_QWORD *)(v6 + 72);
        while (1)
        {
          outlined init with copy of StorableValue(v17 + v18, (uint64_t)v11, type metadata accessor for StorableValue);
          outlined init with copy of StorableValue(a1 + v18, (uint64_t)v9, type metadata accessor for StorableValue);
          static StorableValue.== infix(_:_:)((uint64_t)v11, (uint64_t)v9);
          v22 = v21;
          outlined destroy of StorableValue((uint64_t)v9, type metadata accessor for StorableValue);
          outlined destroy of StorableValue((uint64_t)v11, type metadata accessor for StorableValue);
          if ((v22 & 1) == 0)
            break;
          v18 += v20;
          if (!--v19)
          {
            swift_bridgeObjectRelease();
            return v14;
          }
        }
        swift_bridgeObjectRelease();
        v6 = v28;
        v2 = v29;
        v15 = v26;
        v12 = v27;
        v16 = v25;
      }
      v14 = (v14 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  return v14;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t type metadata accessor for AggregationEvent(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, type metadata singleton initialization cache for AggregationEvent);
}

void specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);

  v5 = *v2;
  *(_QWORD *)(v5 + 16) = a1 + 1;
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_285();
  outlined init with take of StorableValue(a2, v5 + v6 + *(_QWORD *)(v7 + 72) * a1, v8);
  OUTLINED_FUNCTION_1_6();
}

uint64_t destroy for BookmarkCache(uint64_t a1)
{
  ValueMetadata *v2;

  v2 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, ValueMetadata *))v2[-1].Description + 1))(a1, v2);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t destroy for AggregationEvent(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  ValueMetadata *v8;

  type metadata accessor for StorableValue(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      v4 = type metadata accessor for Date();
      goto LABEL_5;
    case 3u:
    case 4u:
      swift_bridgeObjectRelease();
      break;
    case 5u:
      v6 = a1[1];
      if (v6 >> 60 != 15)
        outlined consume of Data._Representation(*a1, v6);
      break;
    case 6u:
      v4 = type metadata accessor for UUID();
LABEL_5:
      v5 = v4;
      if (!__swift_getEnumTagSinglePayload((uint64_t)a1, 1, v4))
        (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    default:
      break;
  }
  v7 = (char *)a1 + *(int *)(a2 + 20);
  v8 = type metadata accessor for SQLDataType();
  return (*((uint64_t (**)(char *, ValueMetadata *))v8[-1].Description + 1))(v7, v8);
}

uint64_t OUTLINED_FUNCTION_157()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_157_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 216) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_157_1()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_151_0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v0;
  v3 = v0[1];
  *(_QWORD *)(v1 - 104) = v2;
  *(_QWORD *)(v1 - 96) = v3;
  return outlined copy of Data?(v2, v3);
}

uint64_t OUTLINED_FUNCTION_141_1()
{
  return swift_storeEnumTagMultiPayload();
}

void OUTLINED_FUNCTION_31()
{
  Hasher._combine(_:)(0);
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

const __CFString *BMDevicePlatformAsKeyString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7)
    return CFSTR("Unknown");
  else
    return off_1E2647EF8[a1 - 1];
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = a2(0);
  v7 = v6;
  if (v5)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, a1+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80)), v6);
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  return __swift_storeEnumTagSinglePayload(a3, v8, 1, v7);
}

uint64_t initializeBufferWithCopyOfBuffer for Binding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void static KeyedAggregationMetadataCache.payloadSchema(aggregationFunctions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *Description;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, ValueMetadata *);
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  void *v106;
  Swift::String v107;
  uint64_t v108;
  uint64_t v109;
  Swift::String v110;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  _QWORD v122[2];
  void (*v123)(uint64_t, uint64_t, ValueMetadata *);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  ValueMetadata *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int64_t v146;
  uint64_t v147;
  char *v148;
  _QWORD *v149;
  uint64_t *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  ValueMetadata *v158;
  char *v159;
  void (*v160)(uint64_t, uint64_t, ValueMetadata *);
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  Swift::String v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD v168[6];
  uint64_t v169;

  OUTLINED_FUNCTION_42();
  a19 = v22;
  a20 = v23;
  v128 = v20;
  v25 = v24;
  v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v26);
  OUTLINED_FUNCTION_6_1();
  v142 = (uint64_t *)v27;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v28);
  v141 = (_QWORD *)((char *)v122 - v29);
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v30);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_120(v31);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
  OUTLINED_FUNCTION_160(v32, (uint64_t)v168);
  v138 = v33;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v34);
  OUTLINED_FUNCTION_8();
  v36 = OUTLINED_FUNCTION_12(v35);
  v37 = type metadata accessor for StorableValue(v36);
  OUTLINED_FUNCTION_160(v37, (uint64_t)&a18);
  v153 = v38;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v39);
  v157 = (uint64_t)v122 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = OUTLINED_FUNCTION_33();
  OUTLINED_FUNCTION_253();
  MEMORY[0x1E0C80A78](v42);
  OUTLINED_FUNCTION_6_1();
  v162 = v43;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v44);
  v46 = (char *)v122 - v45;
  v152 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: String, value: StorableValue));
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v47);
  v151 = (_QWORD *)((char *)v122 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v49);
  OUTLINED_FUNCTION_53();
  v150 = v50;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v51);
  OUTLINED_FUNCTION_53();
  v161 = (uint64_t *)v52;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v53);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_12(v54);
  v127 = type metadata accessor for AggregationFunction();
  Description = v127[-1].Description;
  MEMORY[0x1E0C80A78](v127);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_120(v56);
  v57 = *(_QWORD *)(v25 + 16);
  if (v57)
  {
    v148 = v46;
    v169 = MEMORY[0x1E0DEE9D8];
    v122[0] = v57;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_20_3();
    v125 = Description[9];
    v124 = v25 + v59;
    v122[1] = Description;
    v123 = (void (*)(uint64_t, uint64_t, ValueMetadata *))Description[2];
    v137 = 7;
    v136 = 6;
    v135 = 4;
    v134 = 5;
    v133 = 2;
    v132 = 3;
    v131 = 1;
    v130 = 0;
    v158 = v41;
    v155 = v21;
    while (1)
    {
      v129 = v58;
      v123(v144, v124 + v125 * v58, v127);
      v60 = v128;
      AggregationFunction.newAggregation()();
      if (v60)
        break;
      v61 = v166;
      v62 = v167;
      __swift_project_boxed_opaque_existential_1(&v165, v166);
      v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 40))(v61, v62);
      v128 = 0;
      v64 = v63;
      ++v129;
      v65 = Dictionary.init(dictionaryLiteral:)();
      specialized _NativeDictionary.makeIterator()(v168, v64);
      v154 = v168[0];
      v145 = v168[1];
      v156 = v168[3];
      v66 = (void (*)(uint64_t, uint64_t, ValueMetadata *))v168[4];
      v146 = (unint64_t)(v168[2] + 64) >> 6;
      v126 = v64;
      OUTLINED_FUNCTION_156();
      v67 = v155;
      v163 = v65;
      if (v66)
      {
        OUTLINED_FUNCTION_175_0();
        v160 = v66;
        v69 = v68 | (v156 << 6);
        goto LABEL_29;
      }
      v70 = v156 + 1;
      if (__OFADD__(v156, 1))
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        JUMPOUT(0x18D81A92CLL);
      }
      if (v70 < v146)
      {
        v71 = *(_QWORD *)(v145 + 8 * v70);
        v72 = v156 + 1;
        if (v71)
          goto LABEL_28;
        OUTLINED_FUNCTION_173_0();
        if (v73 != v74)
        {
          OUTLINED_FUNCTION_171_0();
          if (v71)
            goto LABEL_28;
          OUTLINED_FUNCTION_173_0();
          if (v73 != v74)
          {
            OUTLINED_FUNCTION_171_0();
            if (v71)
              goto LABEL_28;
            OUTLINED_FUNCTION_173_0();
            if (v73 != v74)
            {
              OUTLINED_FUNCTION_171_0();
              if (v71)
                goto LABEL_28;
              OUTLINED_FUNCTION_173_0();
              if (v73 != v74)
              {
                OUTLINED_FUNCTION_171_0();
                if (v71)
                  goto LABEL_28;
                OUTLINED_FUNCTION_67();
                if (v73 != v74)
                {
                  v71 = *(_QWORD *)(v145 + 8 * v72);
                  if (!v71)
                  {
                    do
                    {
                      OUTLINED_FUNCTION_67();
                      if (v73 == v74)
                        goto LABEL_30;
                      v71 = *(_QWORD *)(v145 + 8 * v75);
                      v76 = v75 + 1;
                    }
                    while (!v71);
                    v72 = v76 - 1;
                  }
LABEL_28:
                  v160 = (void (*)(uint64_t, uint64_t, ValueMetadata *))((v71 - 1) & v71);
                  v69 = __clz(__rbit64(v71)) + (v72 << 6);
                  v156 = v72;
LABEL_29:
                  v77 = (uint64_t *)(*(_QWORD *)(v154 + 48) + 16 * v69);
                  v78 = *v77;
                  v79 = v77[1];
                  v80 = v152;
                  v81 = v149;
                  OUTLINED_FUNCTION_206_0(*(_QWORD *)(v154 + 56) + *(_QWORD *)(v153 + 72) * v69, (uint64_t)v149 + *(int *)(v152 + 48));
                  *v81 = v78;
                  v81[1] = v79;
                  v82 = v161;
                  outlined init with take of UUID?((uint64_t)v81, (uint64_t)v161, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: StorableValue));
                  v83 = *(int *)(v80 + 48);
                  v84 = v150;
                  v85 = (uint64_t)v150 + v83;
                  v86 = (uint64_t)v82 + v83;
                  v88 = *v82;
                  v87 = v82[1];
                  *v150 = *v82;
                  v84[1] = v87;
                  v159 = (char *)v84 + v83;
                  OUTLINED_FUNCTION_206_0((uint64_t)v82 + v83, v85);
                  v89 = *(int *)(v80 + 48);
                  v90 = v151;
                  v91 = (uint64_t)v151 + v89;
                  *v151 = v88;
                  v90[1] = v87;
                  OUTLINED_FUNCTION_206_0(v86, (uint64_t)v90 + v89);
                  OUTLINED_FUNCTION_206_0(v91, v157);
                  v92 = (char *)&loc_18D81A368 + dword_18D93EC34[swift_getEnumCaseMultiPayload()];
                  __asm { BR              X9 }
                }
              }
            }
          }
        }
      }
LABEL_30:
      swift_release();
      OUTLINED_FUNCTION_16_0();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v165);
      v93 = *(_QWORD *)(v65 + 16);
      if (v93)
      {
        v164 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v94 = specialized Dictionary.startIndex.getter(v65);
        v96 = v95;
        v146 = v65 + 64;
        v154 = v93 - 1;
        while (1)
        {
          v97 = v143;
          v98 = v140;
          v99 = (uint64_t)v140 + *(int *)(v143 + 48);
          v156 = v96;
          specialized Dictionary.subscript.getter(v99, v94);
          *v98 = v100;
          v98[1] = v101;
          v102 = (uint64_t)v141;
          *v141 = v100;
          *(_QWORD *)(v102 + 8) = v101;
          v103 = v102 + *(int *)(v97 + 48);
          v160 = *(void (**)(uint64_t, uint64_t, ValueMetadata *))(v67 + 16);
          v160(v103, v99, v41);
          v104 = v142;
          outlined init with take of UUID?(v102, (uint64_t)v142, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
          OUTLINED_FUNCTION_48_2();
          outlined destroy of UUID?((uint64_t)v98, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
          v105 = *v104;
          v106 = (void *)v104[1];
          v159 = (char *)v104 + *(int *)(v97 + 48);
          v107 = AggregationFunction.name()();
          v108 = v147;
          v109 = v147 + *(int *)(v139 + 64);
          v165 = v107;
          OUTLINED_FUNCTION_291();
          OUTLINED_FUNCTION_4_7(95);
          OUTLINED_FUNCTION_100();
          v110._countAndFlagsBits = v105;
          v110._object = v106;
          String.append(_:)(v110);
          OUTLINED_FUNCTION_8_1();
          OUTLINED_FUNCTION_45();
          object = v165._object;
          countAndFlagsBits = v165._countAndFlagsBits;
          v160(v109, (uint64_t)v159, v158);
          *(_QWORD *)v108 = v105;
          *(_QWORD *)(v108 + 8) = v106;
          *(_OWORD *)(v108 + 16) = __PAIR128__((unint64_t)object, countAndFlagsBits);
          OUTLINED_FUNCTION_192_0();
          outlined destroy of UUID?((uint64_t)v104, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
          v113 = v164;
          if ((OUTLINED_FUNCTION_314() & 1) == 0)
          {
            OUTLINED_FUNCTION_89_0();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v113 = v164;
          }
          v114 = *(_QWORD *)(v113 + 16);
          v115 = v163;
          if (v114 >= *(_QWORD *)(v113 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v113 = v164;
          }
          *(_QWORD *)(v113 + 16) = v114 + 1;
          OUTLINED_FUNCTION_20_3();
          outlined init with take of UUID?(v147, v113 + v116 + *(_QWORD *)(v117 + 72) * v114, &demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
          if (v94 < 0 || v94 >= -(-1 << *(_BYTE *)(v115 + 32)))
            goto LABEL_54;
          if (((*(_QWORD *)(v146 + (((unint64_t)v94 >> 3) & 0xFFFFFFFFFFFFF8)) >> v94) & 1) == 0)
            goto LABEL_55;
          if (*(_DWORD *)(v115 + 36) != (_DWORD)v156)
            goto LABEL_56;
          v118 = _HashTable.occupiedBucket(after:)();
          if (!v154)
            break;
          v94 = v118;
          v96 = *(unsigned int *)(v115 + 36);
          --v154;
          v41 = v158;
          v67 = v155;
        }
        OUTLINED_FUNCTION_45();
      }
      else
      {
        OUTLINED_FUNCTION_45();
        v113 = MEMORY[0x1E0DEE9D8];
      }
      OUTLINED_FUNCTION_113_1();
      v119 = v169;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_89_0();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v119 = v169;
      }
      v120 = v122[0];
      v58 = v129;
      v121 = *(_QWORD *)(v119 + 16);
      if (v121 >= *(_QWORD *)(v119 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v58 = v129;
        v120 = v122[0];
        v119 = v169;
      }
      *(_QWORD *)(v119 + 16) = v121 + 1;
      *(_QWORD *)(v119 + 8 * v121 + 32) = v113;
      v41 = v158;
      if (v58 == v120)
        goto LABEL_52;
    }
    v128 = v60;
    OUTLINED_FUNCTION_113_1();
    swift_release();
  }
LABEL_52:
  OUTLINED_FUNCTION_9();
}

uint64_t initializeWithCopy for AggregationFunction(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  switch(*(_BYTE *)(a2 + 192))
  {
    case 0:
      v4 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      v5 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v5;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v6 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v6;
      v7 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v7;
      *(_BYTE *)(a1 + 192) = 0;
      goto LABEL_12;
    case 1:
      v14 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v14;
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1, a2);
      v15 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v15;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v16 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v16;
      v17 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v17;
      v18 = 1;
      goto LABEL_11;
    case 2:
      v19 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v19;
      (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1, a2);
      v20 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v20;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v21 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v21;
      v22 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v22;
      v23 = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v23)
      {
        v24 = *(_QWORD *)(a2 + 128);
        *(_QWORD *)(a1 + 120) = v23;
        *(_QWORD *)(a1 + 128) = v24;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v23 - 8))(a1 + 96, a2 + 96, v23);
        v25 = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
        *(_QWORD *)(a1 + 144) = v25;
        *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
        v26 = *(_QWORD *)(a2 + 168);
        *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 168) = v26;
        v27 = *(_QWORD *)(a2 + 184);
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
        *(_QWORD *)(a1 + 184) = v27;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v45 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v45;
        v46 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v46;
        v47 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v47;
      }
      *(_BYTE *)(a1 + 192) = 2;
      break;
    case 3:
      v28 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v28;
      (**(void (***)(uint64_t, uint64_t))(v28 - 8))(a1, a2);
      v29 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v29;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v30 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v30;
      v31 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v31;
      v18 = 3;
      goto LABEL_11;
    case 4:
      v32 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v32;
      (**(void (***)(uint64_t, uint64_t))(v32 - 8))(a1, a2);
      v33 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v33;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v34 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v34;
      v35 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v35;
      v18 = 4;
      goto LABEL_11;
    case 5:
      v36 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v36;
      (**(void (***)(uint64_t, uint64_t))(v36 - 8))(a1, a2);
      v37 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v37;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v38 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v38;
      v39 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v39;
      v18 = 5;
      goto LABEL_11;
    case 6:
      v40 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v40;
      (**(void (***)(uint64_t, uint64_t))(v40 - 8))(a1, a2);
      v41 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v41;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v42 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v42;
      v43 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v43;
      v18 = 6;
LABEL_11:
      *(_BYTE *)(a1 + 192) = v18;
LABEL_12:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      v8 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v8;
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      v9 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v9;
      v10 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v10;
      v11 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v11;
      v12 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v12;
      v13 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v13;
      break;
  }
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  return a1;
}

uint64_t destroy for AggregationFunction(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  switch(*(_BYTE *)(result + 192))
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      __swift_destroy_boxed_opaque_existential_1Tm(result);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_3;
    case 2:
      __swift_destroy_boxed_opaque_existential_1Tm(result);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (*(_QWORD *)(v1 + 120))
      {
        __swift_destroy_boxed_opaque_existential_1Tm(v1 + 96);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_3:
        result = swift_bridgeObjectRelease();
      }
      break;
    default:
      return result;
  }
  return result;
}

void KeyedFirstMatchingRecordCache.init(materializedView:database:cacheSize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  sqlite3 *v27;
  sqlite3 *v28;
  ValueMetadata *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  ValueMetadata *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  ValueMetadata *v69;
  void (**v70)(uint64_t, uint64_t, ValueMetadata *);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  ValueMetadata *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  ValueMetadata *v89;
  uint64_t v90;
  ValueMetadata *v91;
  ValueMetadata *v92;
  uint64_t v93;
  void (*v94)(_QWORD, _QWORD);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t MatchingRecordCache;
  ValueMetadata *v100;
  uint64_t v101;
  void (**v102)(uint64_t, uint64_t, ValueMetadata *);
  ValueMetadata *v103;
  void (**v104)(char *, ValueMetadata *);
  uint64_t v105;
  uint64_t v106;
  ValueMetadata *v107;
  ValueMetadata *v108;
  char *v109;
  _QWORD *v110;
  uint64_t v111;
  ValueMetadata *v112;
  void (*v113)(uint64_t, uint64_t, ValueMetadata *);
  BOOL v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t countAndFlagsBits;
  void (**v119)(char *, ValueMetadata *);
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  ValueMetadata *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  void (*v139)(char *, ValueMetadata *);
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int64_t v145;
  uint64_t v146;
  uint64_t v147;
  ValueMetadata *v148;
  uint64_t v149;
  char *v150;
  int64_t v151;
  int64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  Swift::String v166;
  uint64_t object;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  BOOL v171;
  BOOL v172;
  uint64_t v173;
  uint64_t v174;
  Swift::String *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  _QWORD *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  void (*v187)(uint64_t, char *, ValueMetadata *);
  ValueMetadata *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t, ValueMetadata *);
  uint64_t v193;
  uint64_t v194;
  void (*v195)(uint64_t, uint64_t, ValueMetadata *);
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  ValueMetadata *v199;
  uint64_t v200;
  char *v201;
  void (*v202)(uint64_t);
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  void (*v222)(uint64_t);
  char v223;
  _BYTE *v224;
  uint64_t v225;
  void (*v226)(uint64_t, ValueMetadata *);
  uint64_t v227;
  uint64_t v228;
  char v229;
  char v230;
  char v231;
  BOOL v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t (*v235)(uint64_t, uint64_t, uint64_t);
  char **v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  ValueMetadata *v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  id v251;
  uint64_t v252;
  _QWORD *v253;
  ValueMetadata *v254;
  uint64_t v255;
  uint64_t v256;
  void (*v257)(uint64_t);
  uint64_t v258;
  int v259;
  uint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  Swift::String v264;
  ValueMetadata *v265;
  ValueMetadata *v266;
  char **v267;
  ValueMetadata *v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char v277;
  unint64_t v278;
  char v279;
  uint64_t v280;
  _BOOL8 v281;
  Swift::Int v282;
  unint64_t v283;
  char v284;
  unint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  void (*v288)(uint64_t, uint64_t, ValueMetadata *);
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  ValueMetadata *v293;
  uint64_t v294;
  uint64_t v295;
  Swift::String v296;
  void *v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  void *v302;
  Swift::String v303;
  void (*v304)(ValueMetadata *);
  ValueMetadata *v305;
  ValueMetadata *v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t *v311;
  sqlite3 *v312;
  char *v313;
  uint64_t v314;
  ValueMetadata *v315;
  void (*v316)(_QWORD, _QWORD);
  ValueMetadata *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  ValueMetadata *v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  ValueMetadata *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  void *Description;
  char *v339;
  char *v340;
  ValueMetadata *v341;
  _QWORD *v342;
  uint64_t v343;
  ValueMetadata *v344;
  ValueMetadata *v345;
  void (**v346)(uint64_t, uint64_t, ValueMetadata *);
  char *v347;
  int64_t v348;
  void (**v349)(char *, ValueMetadata *);
  unint64_t v350;
  uint64_t v351;
  ValueMetadata *v352;
  ValueMetadata *v353;
  void *v354;
  uint64_t v355;
  uint64_t v356;
  void (*v357)(uint64_t);
  char *v358;
  Swift::String v359;

  OUTLINED_FUNCTION_42();
  a19 = v24;
  a20 = v25;
  v355 = v21;
  v351 = v26;
  v28 = v27;
  v332 = v29;
  v320 = v30;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SQLDataType));
  OUTLINED_FUNCTION_160(v31, (uint64_t)&v350);
  v319 = v32;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v33);
  OUTLINED_FUNCTION_120((uint64_t)&v312 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLDataType?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v35);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_120(v36);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLDataType)?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v37);
  v358 = (char *)&v312 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v39);
  OUTLINED_FUNCTION_61();
  v350 = v40;
  v344 = OUTLINED_FUNCTION_22_2();
  Description = v344[-1].Description;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v41);
  OUTLINED_FUNCTION_6_1();
  v330 = v42;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v43);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_12(v44);
  v45 = type metadata accessor for ResultColumn();
  v46 = v45[-1].Description;
  v341 = v45;
  v342 = v46;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v47);
  v340 = (char *)&v312 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v49);
  OUTLINED_FUNCTION_53();
  v324 = v50;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v51);
  OUTLINED_FUNCTION_53();
  v321 = v52;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v53);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_12(v54);
  v352 = type metadata accessor for SQLDataType();
  v354 = v352[-1].Description;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v55);
  OUTLINED_FUNCTION_6_1();
  v323 = v56;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v57);
  OUTLINED_FUNCTION_53();
  v337 = v58;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v59);
  v326 = (char *)&v312 - v60;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v61);
  OUTLINED_FUNCTION_53();
  v329 = v62;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v63);
  v357 = (void (*)(uint64_t))((char *)&v312 - v64);
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v65);
  OUTLINED_FUNCTION_53();
  v356 = v66;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v67);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_12(v68);
  v69 = type metadata accessor for Schema();
  v70 = (void (**)(uint64_t, uint64_t, ValueMetadata *))v69[-1].Description;
  v345 = v69;
  v346 = v70;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v71);
  OUTLINED_FUNCTION_6_1();
  v343 = v72;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v73);
  OUTLINED_FUNCTION_53();
  v325 = (ValueMetadata *)v74;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v75);
  OUTLINED_FUNCTION_256();
  MEMORY[0x1E0C80A78](v76);
  v78 = (char *)&v312 - v77;
  v353 = type metadata accessor for FromClause();
  v349 = (void (**)(char *, ValueMetadata *))v353[-1].Description;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v79);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_12(v80);
  v81 = type metadata accessor for SelectCore();
  v82 = v81[-1].Description;
  MEMORY[0x1E0C80A78](v81);
  OUTLINED_FUNCTION_18_2();
  v84 = MEMORY[0x1E0C80A78](v83);
  v86 = (char *)&v312 - v85;
  MEMORY[0x1E0C80A78](v84);
  OUTLINED_FUNCTION_293();
  type metadata accessor for SQLExpressionEvaluator();
  OUTLINED_FUNCTION_150();
  v87 = v355;
  v88 = SQLExpressionEvaluator.init(db:)(v28);
  if (v87)
  {
    v89 = OUTLINED_FUNCTION_35();
    OUTLINED_FUNCTION_30_4((uint64_t)v89);
    goto LABEL_3;
  }
  v347 = v78;
  v336 = v22;
  v313 = v86;
  v355 = v23;
  v315 = 0;
  v314 = v88;
  v312 = v28;
  v90 = MEMORY[0x1E0DEE9D8];
  v91 = v352;
  v348 = Dictionary.init(dictionaryLiteral:)();
  v92 = v332;
  MaterializedView.select.getter(v20);
  OUTLINED_FUNCTION_329();
  SelectCore.from.getter(v93);
  v94 = (void (*)(_QWORD, _QWORD))v82[1];
  v317 = v81;
  v316 = v94;
  v94(v20, v81);
  v95 = FromClause.schemas.getter();
  v349[1](v86, v353);
  v96 = v95;
  v359._countAndFlagsBits = v90;
  v97 = (uint64_t)v91;
  v335 = *(_QWORD *)(v95 + 16);
  if (v335)
  {
    v98 = 0;
    LODWORD(v333) = 7;
    MatchingRecordCache = (uint64_t)v354;
    v100 = v345;
    v101 = (uint64_t)v347;
    v334 = v95;
    while (1)
    {
      if (v98 >= *(_QWORD *)(v96 + 16))
      {
        __break(1u);
        goto LABEL_136;
      }
      v102 = v346;
      OUTLINED_FUNCTION_20_3();
      v103 = (ValueMetadata *)v102[9];
      v349 = v104;
      v353 = v103;
      OUTLINED_FUNCTION_224_0(v101, (uint64_t)v104 + v105 + (_QWORD)v103 * v98, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v102[2]);
      v92 = v100;
      v106 = Schema.tableName.getter();
      v108 = v107;
      v109 = v339;
      (*(void (**)(char *, _QWORD, uint64_t))(MatchingRecordCache + 104))(v339, v333, v97);
      OUTLINED_FUNCTION_329();
      static Schema.JSONEach(with:)(v109, v110);
      (*(void (**)(char *, uint64_t))(MatchingRecordCache + 8))(v109, v97);
      v111 = Schema.tableName.getter();
      v100 = v112;
      v113 = v102[1];
      ((void (*)(uint64_t, ValueMetadata *))v113)(v101, v92);
      v114 = v106 == v111 && v108 == v100;
      if (v114)
      {
        OUTLINED_FUNCTION_99();
      }
      else
      {
        OUTLINED_FUNCTION_243();
        v115 = _stringCompareWithSmolCheck(_:_:expecting:)();
        OUTLINED_FUNCTION_64();
        OUTLINED_FUNCTION_24();
        if ((v115 & 1) == 0)
        {
          v101 = (uint64_t)v347;
          v116 = OUTLINED_FUNCTION_229_0((uint64_t)&v357);
          v100 = v345;
          OUTLINED_FUNCTION_223_0(v116, v117);
          countAndFlagsBits = v359._countAndFlagsBits;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_89_0();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v100 = v345;
            countAndFlagsBits = v359._countAndFlagsBits;
          }
          v92 = v353;
          v119 = v349;
          v120 = *(_QWORD *)(countAndFlagsBits + 16);
          if (v120 >= *(_QWORD *)(countAndFlagsBits + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v100 = v345;
            countAndFlagsBits = v359._countAndFlagsBits;
          }
          *(_QWORD *)(countAndFlagsBits + 16) = v120 + 1;
          OUTLINED_FUNCTION_223_0((uint64_t)v119 + countAndFlagsBits + v120 * (_QWORD)v92, (uint64_t)v325);
          v359._countAndFlagsBits = countAndFlagsBits;
          goto LABEL_19;
        }
      }
      v101 = (uint64_t)v347;
      v121 = OUTLINED_FUNCTION_120_1();
      ((void (*)(uint64_t))v113)(v121);
LABEL_19:
      v122 = v351;
      v97 = (uint64_t)v352;
      ++v98;
      v123 = v348;
      MatchingRecordCache = (uint64_t)v354;
      v124 = v343;
      v96 = v334;
      if (v335 == v98)
      {
        v125 = v359._countAndFlagsBits;
        goto LABEL_22;
      }
    }
  }
  v125 = v90;
  v122 = v351;
  v123 = v348;
  MatchingRecordCache = (uint64_t)v354;
  v124 = v343;
LABEL_22:
  swift_bridgeObjectRelease();
  v126 = v344;
  v127 = v355;
  v335 = *(_QWORD *)(v125 + 16);
  if (!v335)
    goto LABEL_61;
  OUTLINED_FUNCTION_285();
  v334 = v128 + v130;
  v333 = v128;
  do
  {
    if (v129 >= *(_QWORD *)(v128 + 16))
      goto LABEL_138;
    v336 = v129 + 1;
    v346[2](v124, v334 + (_QWORD)v346[9] * v129, v345);
    v131 = Schema.columns.getter();
    v353 = 0;
    v132 = *(_QWORD *)(v131 + 64);
    v347 = (char *)(v131 + 64);
    v133 = 1 << *(_BYTE *)(v131 + 32);
    if (v133 < 64)
      v134 = ~(-1 << v133);
    else
      v134 = -1;
    v98 = v134 & v132;
    v348 = (unint64_t)(v133 + 63) >> 6;
    v349 = (void (**)(char *, ValueMetadata *))v131;
    v325 = (ValueMetadata *)(v348 - 1);
    while (1)
    {
      v135 = v358;
      v136 = (uint64_t)&demangling cache variable for type metadata for (key: String, value: SQLDataType);
      if (v98)
      {
        v137 = __clz(__rbit64(v98));
        v98 &= v98 - 1;
        v138 = v137 | ((_QWORD)v353 << 6);
LABEL_31:
        v139 = v349[7];
        v140 = (_QWORD *)((char *)v349[6] + 16 * v138);
        v141 = v140[1];
        *(_QWORD *)v135 = *v140;
        *((_QWORD *)v135 + 1) = v141;
        v142 = (uint64_t)v139 + *(_QWORD *)(MatchingRecordCache + 72) * v138;
        v143 = OUTLINED_FUNCTION_316();
        v144 = v142;
        v135 = v358;
        OUTLINED_FUNCTION_139((uint64_t)&v358[*(int *)(v143 + 48)], v144, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(MatchingRecordCache + 16));
        __swift_storeEnumTagSinglePayload((uint64_t)v135, 0, 1, v143);
        OUTLINED_FUNCTION_156();
        v127 = v355;
        goto LABEL_49;
      }
      v145 = (int64_t)&v353->Kind + 1;
      if (__OFADD__(v353, 1))
      {
        __break(1u);
        goto LABEL_127;
      }
      if (v145 < v348)
      {
        if (*(_QWORD *)&v347[8 * v145])
          goto LABEL_35;
        v150 = (char *)&v353->Kind + 2;
        v353 = (ValueMetadata *)((char *)v353 + 1);
        if (v145 + 1 < v348)
        {
          if (*(_QWORD *)&v347[8 * (_QWORD)v150])
            goto LABEL_35;
          v353 = (ValueMetadata *)(v145 + 1);
          if (v145 + 2 < v348)
          {
            if (*(_QWORD *)&v347[8 * v145 + 16])
              goto LABEL_35;
            v151 = v145 + 3;
            v353 = (ValueMetadata *)(v145 + 2);
            if (v145 + 3 < v348)
            {
              if (*(_QWORD *)&v347[8 * v151])
              {
LABEL_35:
                OUTLINED_FUNCTION_205_0();
                v98 = v147 & v146;
                v138 = v149 + ((_QWORD)v148 << 6);
                v353 = v148;
                goto LABEL_31;
              }
              while (1)
              {
                v152 = v151 + 1;
                if (__OFADD__(v151, 1))
                  goto LABEL_141;
                if (v152 >= v348)
                  break;
                ++v151;
                if (*(_QWORD *)&v347[8 * v152])
                  goto LABEL_35;
              }
              v353 = v325;
            }
          }
        }
      }
      OUTLINED_FUNCTION_316();
      v153 = OUTLINED_FUNCTION_236();
      __swift_storeEnumTagSinglePayload(v153, v154, v155, v156);
      v98 = 0;
LABEL_49:
      v157 = (uint64_t)v135;
      v158 = v350;
      outlined init with take of UUID?(v157, v350, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLDataType)?);
      v159 = OUTLINED_FUNCTION_316();
      v160 = OUTLINED_FUNCTION_188();
      if (__swift_getEnumTagSinglePayload(v160, v161, v159) == 1)
        break;
      v127 = *(_QWORD *)(v158 + 8);
      v162 = v158 + *(int *)(v159 + 48);
      v163 = MatchingRecordCache;
      v164 = *(_QWORD *)(MatchingRecordCache + 32);
      v165 = v123;
      v123 = v356;
      ((void (*)(uint64_t, uint64_t, uint64_t))v164)(v356, v162, v97);
      v166 = String.lowercased()();
      v124 = v166._countAndFlagsBits;
      object = (uint64_t)v166._object;
      OUTLINED_FUNCTION_54();
      OUTLINED_FUNCTION_139((uint64_t)v357, v123, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v163 + 16));
      v168 = OUTLINED_FUNCTION_301();
      v359._countAndFlagsBits = v165;
      OUTLINED_FUNCTION_186_0();
      OUTLINED_FUNCTION_161_0();
      if (v171)
      {
        __break(1u);
        goto LABEL_104;
      }
      v163 = v169;
      v123 = v170;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, SQLDataType>);
      OUTLINED_FUNCTION_249();
      v172 = OUTLINED_FUNCTION_218_0(v168);
      v97 = (uint64_t)v352;
      v127 = v355;
      if (v172)
      {
        OUTLINED_FUNCTION_186_0();
        OUTLINED_FUNCTION_246();
        if (!v114)
          goto LABEL_144;
        v163 = v173;
      }
      v174 = v359._countAndFlagsBits;
      if ((v123 & 1) != 0)
      {
        MatchingRecordCache = (uint64_t)v354;
        OUTLINED_FUNCTION_139(*(_QWORD *)(v359._countAndFlagsBits + 56) + *((_QWORD *)v354 + 9) * v163, (uint64_t)v357, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))v354 + 5));
      }
      else
      {
        OUTLINED_FUNCTION_114_2();
        *v175 = v166;
        v176 = OUTLINED_FUNCTION_219_0(*(_QWORD *)(v174 + 56));
        ((void (*)(uint64_t, void (*)(uint64_t), uint64_t))v164)(v176, v357, v97);
        OUTLINED_FUNCTION_265();
        if (v171)
        {
          __break(1u);
LABEL_112:
          v269 = v355;
          v97 = object;
          if (*(_QWORD *)(v355 + 16))
          {
            v358 = *(char **)(v355 + 16);
            v349 = (void (**)(char *, ValueMetadata *))object;
            v350 = v98;
            v315 = (ValueMetadata *)v163;
            v270 = v322;
            v357 = (void (*)(uint64_t))((char *)v322 + *(int *)(v164 + 48));
            OUTLINED_FUNCTION_20_3();
            v272 = v269 + v271;
            v356 = *(_QWORD *)(v127 + 72);
            OUTLINED_FUNCTION_44_3();
            v273 = v123;
            v274 = v323;
            while (1)
            {
              outlined init with copy of Date?(v272, (uint64_t)v270, &demangling cache variable for type metadata for (String, SQLDataType));
              v275 = *v270;
              v276 = v270[1];
              OUTLINED_FUNCTION_263(v274, (uint64_t)v357);
              v277 = OUTLINED_FUNCTION_332();
              v359._countAndFlagsBits = v273;
              OUTLINED_FUNCTION_299();
              v278 = specialized __RawDictionaryStorage.find<A>(_:)();
              v280 = *(_QWORD *)(v273 + 16);
              v281 = (v279 & 1) == 0;
              v282 = v280 + v281;
              if (__OFADD__(v280, v281))
                goto LABEL_142;
              v283 = v278;
              v284 = v279;
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, SQLDataType>);
              OUTLINED_FUNCTION_249();
              if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v277, v282))
              {
                OUTLINED_FUNCTION_299();
                specialized __RawDictionaryStorage.find<A>(_:)();
                OUTLINED_FUNCTION_246();
                if (!v114)
                  goto LABEL_144;
                v283 = v285;
              }
              v286 = (_QWORD *)v359._countAndFlagsBits;
              if ((v284 & 1) != 0)
              {
                v287 = OUTLINED_FUNCTION_277(*(_QWORD *)(v359._countAndFlagsBits + 56));
                v274 = v323;
                v288(v287, v323, v352);
              }
              else
              {
                *(_QWORD *)(v359._countAndFlagsBits + 8 * (v283 >> 6) + 64) |= 1 << v283;
                v289 = (_QWORD *)(v286[6] + 16 * v283);
                *v289 = v275;
                v289[1] = v276;
                v290 = OUTLINED_FUNCTION_219_0(v286[7]);
                v274 = v323;
                OUTLINED_FUNCTION_263(v290, v323);
                v291 = v286[2];
                v171 = __OFADD__(v291, 1);
                v292 = v291 + 1;
                if (v171)
                  goto LABEL_143;
                v286[2] = v292;
                OUTLINED_FUNCTION_48_2();
              }
              v273 = v359._countAndFlagsBits;
              OUTLINED_FUNCTION_106();
              OUTLINED_FUNCTION_152();
              v272 += v356;
              v114 = v358-- == (char *)1;
              v270 = v322;
              if (v114)
              {
                swift_bridgeObjectRelease();
                v293 = v332;
                v163 = (uint64_t)v315;
                v97 = (uint64_t)v349;
                v98 = v350;
                goto LABEL_129;
              }
            }
          }
          OUTLINED_FUNCTION_44_3();
          swift_bridgeObjectRelease();
          v273 = v123;
          v293 = v332;
LABEL_129:
          MaterializedView.name.getter();
          v359._countAndFlagsBits = static String._createEmpty(withInitialCapacity:)(33);
          v359._object = v297;
          OUTLINED_FUNCTION_83_2();
          v298 = OUTLINED_FUNCTION_13_3();
          v303._countAndFlagsBits = OUTLINED_FUNCTION_75_3(v298, v299, v300, v301, v302);
          String.append(_:)(v303);
          OUTLINED_FUNCTION_54();
          OUTLINED_FUNCTION_164_0();
          _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS14BiomeSQLParser11SQLDataTypeOG_SSsAE_pTg506_sSS14d11SQLParser11fg5OSSs5C197_pIggnozo_SS3key_AC5valuetSSsAD_pIegnrzr_TR04_s12a111Streams30KeyedQueryPlannerMetadataCachePAAE14createTableSQL20materializedViewName6schemaS2S_SDySS0A9SQLParser11cD19OGtKFZS2S_AItKXEfU_Tf3nnnpf_nTf1cn_n(v273);
          if (v163)
          {
            OUTLINED_FUNCTION_106_2();
            OUTLINED_FUNCTION_35();
            OUTLINED_FUNCTION_250();
            v304(v293);
            OUTLINED_FUNCTION_8_1();
            OUTLINED_FUNCTION_325();
            OUTLINED_FUNCTION_64();
            OUTLINED_FUNCTION_45();
            OUTLINED_FUNCTION_20_1();
            goto LABEL_3;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
          lazy protocol witness table accessor for type [String] and conformance [A]();
          OUTLINED_FUNCTION_252();
          OUTLINED_FUNCTION_54();
          OUTLINED_FUNCTION_273();
          OUTLINED_FUNCTION_8_1();
          OUTLINED_FUNCTION_121_2();
          OUTLINED_FUNCTION_64();
          OUTLINED_FUNCTION_45();
          SQLExpressionEvaluator.execute(sql:bindingValues:)(v359, MEMORY[0x1E0DEE9D8]);
          v92 = v305;
          if (v305)
          {
            v306 = OUTLINED_FUNCTION_35();
            OUTLINED_FUNCTION_30_4((uint64_t)v306);
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_325();
            OUTLINED_FUNCTION_64();
            OUTLINED_FUNCTION_96();
            goto LABEL_3;
          }
LABEL_136:
          v315 = v92;
          OUTLINED_FUNCTION_64();
          v258 = v320;
LABEL_106:
          v136 = 0x2A205443454C4553;
          OUTLINED_FUNCTION_106();
          MatchingRecordCache = type metadata accessor for KeyedFirstMatchingRecordCache(0);
          *(_QWORD *)(v258 + *(int *)(MatchingRecordCache + 48)) = v98;
          *(_BYTE *)(v258 + *(int *)(MatchingRecordCache + 56)) = (v353 & 1) == 0;
          swift_retain();
          v124 = OUTLINED_FUNCTION_284();
          LODWORD(v127) = v259;
          specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)();
          v123 = v260;
          OUTLINED_FUNCTION_325();
          if (*(_QWORD *)(v123 + 16))
          {
            v359._countAndFlagsBits = static String._createEmpty(withInitialCapacity:)(28);
            v359._object = v261;
            OUTLINED_FUNCTION_84_2();
            v264._countAndFlagsBits = OUTLINED_FUNCTION_75_3(v124, v127, v262, v263, (void *)(v97 | 0x8000000000000000));
            String.append(_:)(v264);
            OUTLINED_FUNCTION_64();
            OUTLINED_FUNCTION_125_2();
            v265 = v315;
            _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_14BiomeSQLParser11SQLDataTypeOtG_SSsAE_pTg506_sSS14d11SQLParser11fg5OSSs5c186_pIggnozo_SS_ACtSSsAD_pIegnrzr_TR04_s12a146Streams30KeyedQueryPlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm(v123, &demangling cache variable for type metadata for (String, SQLDataType));
            if (v265)
            {
              OUTLINED_FUNCTION_106_2();
              v266 = OUTLINED_FUNCTION_35();
              OUTLINED_FUNCTION_30_4((uint64_t)v266);
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_54();
              OUTLINED_FUNCTION_8_1();
              OUTLINED_FUNCTION_20_1();
              goto LABEL_110;
            }
            v315 = 0;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
            lazy protocol witness table accessor for type [String] and conformance [A]();
            v307 = OUTLINED_FUNCTION_156_1();
            OUTLINED_FUNCTION_64();
            OUTLINED_FUNCTION_227_0(v307);
            OUTLINED_FUNCTION_127();
            OUTLINED_FUNCTION_4_7(41);
LABEL_134:
            v308 = v359._countAndFlagsBits;
            v309 = v359._object;
            v310 = OUTLINED_FUNCTION_150();
            *(_QWORD *)(v310 + 16) = v123;
            OUTLINED_FUNCTION_54();
            v249 = v320;
            v311 = (uint64_t *)(v320 + *(int *)(MatchingRecordCache + 60));
            *v311 = v308;
            v311[1] = (uint64_t)v309;
            v311[2] = (uint64_t)partial apply for closure #2 in static KeyedQueryPlannerMetadataCache.readMetadataSQL(materializedViewName:groupBySchema:);
            v311[3] = v310;
            v122 = v351;
LABEL_102:
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (value: ChangeRecord, event: CacheEvent));
            lazy protocol witness table accessor for type [StorableValue] and conformance <A> [A]();
            OUTLINED_FUNCTION_243();
            v250 = Dictionary.init(dictionaryLiteral:)();
            type metadata accessor for KeyedFirstMatchingRecordCache(0);
            *(_QWORD *)(v249 + *(int *)(MatchingRecordCache + 28)) = v250;
            v251 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DE8]), sel_init);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ChangeRecord?);
            OUTLINED_FUNCTION_243();
            v252 = Dictionary.init(dictionaryLiteral:)();
            v253 = (_QWORD *)(v249 + *(int *)(MatchingRecordCache + 32));
            *v253 = v251;
            v253[1] = v252;
            *(_QWORD *)(v249 + *(int *)(MatchingRecordCache + 36)) = v122;
            v254 = OUTLINED_FUNCTION_35();
            (*((void (**)(uint64_t, ValueMetadata *, ValueMetadata *))v254[-1].Description + 2))(v249, v332, v254);
            v255 = MEMORY[0x1E0DEE9E8];
            *(_QWORD *)(v249 + *(int *)(MatchingRecordCache + 24)) = MEMORY[0x1E0DEE9E8];
            v256 = OUTLINED_FUNCTION_243();
            v257(v256);
            *(_QWORD *)(v249 + *(int *)(MatchingRecordCache + 20)) = v255;
            OUTLINED_FUNCTION_279(*(int *)(MatchingRecordCache + 40));
            OUTLINED_FUNCTION_279(*(int *)(MatchingRecordCache + 44));
            *(_QWORD *)(v249 + *(int *)(MatchingRecordCache + 52)) = v348;
            goto LABEL_3;
          }
LABEL_127:
          OUTLINED_FUNCTION_203_0();
          OUTLINED_FUNCTION_106_2();
          v359._countAndFlagsBits = v136;
          v359._object = (void *)0xEE00204D4F524620;
          v296._countAndFlagsBits = OUTLINED_FUNCTION_75_3(v124, v127, v294, v295, (void *)(v97 | 0x8000000000000000));
          String.append(_:)(v296);
          OUTLINED_FUNCTION_64();
          goto LABEL_134;
        }
        *(_QWORD *)(v174 + 16) = v177;
        OUTLINED_FUNCTION_100();
        MatchingRecordCache = (uint64_t)v354;
      }
      v123 = v359._countAndFlagsBits;
      OUTLINED_FUNCTION_45();
      OUTLINED_FUNCTION_152();
      (*(void (**)(uint64_t, uint64_t))(MatchingRecordCache + 8))(v356, v97);
      v122 = v351;
    }
    swift_release();
    v124 = v343;
    ((void (*)(uint64_t, ValueMetadata *))v346[1])(v343, v345);
    v129 = v336;
    v126 = v344;
    v128 = v333;
  }
  while (v336 != v335);
LABEL_61:
  swift_release();
  v178 = (uint64_t)v313;
  MaterializedView.select.getter((uint64_t)v313);
  v179 = SelectCore.select.getter();
  OUTLINED_FUNCTION_184_0(v178);
  v180 = MEMORY[0x1E0DEE9D8];
  v359._countAndFlagsBits = MEMORY[0x1E0DEE9D8];
  v181 = v321;
  v357 = *(void (**)(uint64_t))(v179 + 16);
  if (v357)
  {
    v348 = v123;
    v182 = 0;
    v183 = v342;
    v184 = (char *)v331;
    while (1)
    {
      if (v182 >= *(_QWORD *)(v179 + 16))
      {
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
LABEL_145:
        swift_release();
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_20_3();
      v185 = v183[9];
      v358 = v186;
      v187 = (void (*)(uint64_t, char *, ValueMetadata *))v183[2];
      v188 = v341;
      v187((uint64_t)v184, &v186[v179 + v185 * v182], v341);
      ResultColumn.alias.getter();
      v190 = v189;
      swift_bridgeObjectRelease();
      v187(v181, v184, v188);
      if (v190)
      {
        ResultColumn.expression.getter(v328);
        v190 = SQLExpression.aggregationFunctions.getter();
        v191 = OUTLINED_FUNCTION_339();
        v192(v191, v344);
        v193 = *(_QWORD *)(v190 + 16);
        OUTLINED_FUNCTION_24();
        OUTLINED_FUNCTION_212_0();
        if (!v193)
        {
          v194 = v179;
          v195 = (void (*)(uint64_t, uint64_t, ValueMetadata *))v342[4];
          v184 = (char *)v331;
          v195(v324, v331, v188);
          v196 = v359._countAndFlagsBits;
          if ((OUTLINED_FUNCTION_301() & 1) == 0)
          {
            OUTLINED_FUNCTION_89_0();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v196 = v359._countAndFlagsBits;
          }
          v197 = *(_QWORD *)(v196 + 16);
          if (v197 >= *(_QWORD *)(v196 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v196 = v359._countAndFlagsBits;
          }
          *(_QWORD *)(v196 + 16) = v197 + 1;
          v195((uint64_t)&v358[v196 + v197 * v185], v324, v341);
          v359._countAndFlagsBits = v196;
          v179 = v194;
          goto LABEL_73;
        }
      }
      else
      {
        OUTLINED_FUNCTION_212_0();
      }
      v184 = (char *)v331;
      ((void (*)(char *, ValueMetadata *))v190)((char *)v331, v188);
LABEL_73:
      ++v182;
      v122 = v351;
      v97 = (uint64_t)v352;
      v183 = v342;
      v126 = v344;
      v127 = v355;
      if (v357 == (void (*)(uint64_t))v182)
      {
        v180 = v359._countAndFlagsBits;
        v123 = v348;
        goto LABEL_76;
      }
    }
  }
  v183 = v342;
LABEL_76:
  OUTLINED_FUNCTION_23_0();
  v198 = *(_QWORD *)(v180 + 16);
  if (!v198)
  {
    swift_release();
LABEL_98:
    MaterializedView.select.getter(v127);
    v239 = SelectCore.groupBy.getter();
    OUTLINED_FUNCTION_184_0(v127);
    if (!v239)
    {
      v348 = v123;
      MatchingRecordCache = type metadata accessor for KeyedFirstMatchingRecordCache(0);
      v249 = v320;
      *(_QWORD *)(v320 + *(int *)(MatchingRecordCache + 48)) = 0;
      OUTLINED_FUNCTION_150_1(MatchingRecordCache);
      goto LABEL_102;
    }
    v359._countAndFlagsBits = v239;
    OUTLINED_FUNCTION_156();
    v240 = v315;
    specialized MutableCollection<>.sort(by:)(&v359._countAndFlagsBits);
    if (v240)
      goto LABEL_145;
    OUTLINED_FUNCTION_64();
    v168 = v359._countAndFlagsBits;
    specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)();
    v355 = v241;
    v242 = OUTLINED_FUNCTION_284();
    v98 = (unint64_t)"to the number of stored keys (";
    OUTLINED_FUNCTION_75_3(v242, v243, v244, v245, (void *)0x800000018DCC3E90);
    OUTLINED_FUNCTION_45();
    OUTLINED_FUNCTION_294();
    LODWORD(v169) = tableExists(sqlExpressionEvaluator:tableName:)(v246, v247, v248);
    v127 = v319;
    v164 = v318;
    v163 = 0;
LABEL_104:
    object = v98;
    v98 = v168;
    LODWORD(v353) = v169;
    OUTLINED_FUNCTION_64();
    v348 = v123;
    if ((v353 & 1) == 0)
      goto LABEL_112;
    v97 = object;
    v315 = (ValueMetadata *)v163;
    v258 = v320;
    goto LABEL_106;
  }
  OUTLINED_FUNCTION_20_3();
  v353 = v199;
  v201 = (char *)v199 + v200;
  v202 = (void (*)(uint64_t))v183[2];
  v356 = v183[9];
  v357 = v202;
  while (2)
  {
    v203 = OUTLINED_FUNCTION_13_3();
    v357(v203);
    v204 = ResultColumn.name.getter();
    v206 = v205;
    v207 = *(_QWORD *)(v123 + 16);
    v358 = (char *)v204;
    if (!v207)
    {
      v212 = v327;
      v214 = OUTLINED_FUNCTION_236();
      __swift_storeEnumTagSinglePayload(v214, v215, v216, v97);
      v209 = v330;
      goto LABEL_84;
    }
    OUTLINED_FUNCTION_100();
    v208 = OUTLINED_FUNCTION_327();
    v209 = v330;
    v210 = v329;
    if ((v211 & 1) != 0)
    {
      v212 = v327;
      OUTLINED_FUNCTION_139(v327, *(_QWORD *)(v123 + 56) + *((_QWORD *)v354 + 9) * v208, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))v354 + 2));
      v213 = 0;
    }
    else
    {
      v213 = 1;
      v212 = v327;
    }
    __swift_storeEnumTagSinglePayload(v212, v213, 1, v97);
    OUTLINED_FUNCTION_45();
    v217 = OUTLINED_FUNCTION_188();
    if (__swift_getEnumTagSinglePayload(v217, v218, v97) == 1)
    {
LABEL_84:
      outlined destroy of UUID?(v212, &demangling cache variable for type metadata for SQLDataType?);
      goto LABEL_87;
    }
    OUTLINED_FUNCTION_139(v210, v212, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))v354 + 4));
    OUTLINED_FUNCTION_329();
    ResultColumn.expression.getter(v219);
    v220 = v339;
    SQLExpression.returnType.getter(v339);
    v221 = OUTLINED_FUNCTION_312();
    v222(v221);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type SQLDataType and conformance SQLDataType, (uint64_t (*)(uint64_t))type metadata accessor for SQLDataType, (uint64_t)&protocol conformance descriptor for SQLDataType);
    v223 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*((void (**)(char *, uint64_t))v354 + 1))(v220, v97);
    if ((v223 & 1) != 0)
    {
      OUTLINED_FUNCTION_210_0();
      v209 = v330;
LABEL_87:
      ResultColumn.expression.getter(v209);
      OUTLINED_FUNCTION_329();
      SQLExpression.returnType.getter(v224);
      v225 = OUTLINED_FUNCTION_339();
      v226(v225, v126);
      v227 = OUTLINED_FUNCTION_229_0((uint64_t)&a16);
      OUTLINED_FUNCTION_263(v227, v228);
      v229 = OUTLINED_FUNCTION_307();
      v359._countAndFlagsBits = v123;
      OUTLINED_FUNCTION_327();
      OUTLINED_FUNCTION_161_0();
      if (v171)
        goto LABEL_139;
      v231 = v230;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, SQLDataType>);
      OUTLINED_FUNCTION_249();
      v232 = OUTLINED_FUNCTION_218_0(v229);
      v126 = v344;
      if (v232)
      {
        specialized __RawDictionaryStorage.find<A>(_:)();
        OUTLINED_FUNCTION_246();
        if (!v114)
          goto LABEL_144;
      }
      v233 = v359._countAndFlagsBits;
      if ((v231 & 1) != 0)
      {
        v234 = OUTLINED_FUNCTION_277(*(_QWORD *)(v359._countAndFlagsBits + 56));
        v97 = (uint64_t)v352;
        OUTLINED_FUNCTION_139(v234, v337, v235);
      }
      else
      {
        OUTLINED_FUNCTION_114_2();
        *v236 = v358;
        v236[1] = v206;
        v237 = OUTLINED_FUNCTION_219_0(*(_QWORD *)(v233 + 56));
        OUTLINED_FUNCTION_263(v237, v337);
        OUTLINED_FUNCTION_265();
        if (v171)
          goto LABEL_140;
        *(_QWORD *)(v233 + 16) = v238;
        OUTLINED_FUNCTION_100();
        v97 = (uint64_t)v352;
      }
      v123 = v359._countAndFlagsBits;
      OUTLINED_FUNCTION_45();
      OUTLINED_FUNCTION_152();
      ((void (*)(char *, ValueMetadata *))v342[1])(v340, v341);
      v201 += v356;
      if (!--v198)
      {
        swift_release();
        v122 = v351;
        v127 = v355;
        goto LABEL_98;
      }
      continue;
    }
    break;
  }
  swift_release();
  type metadata accessor for MetadataSQLError(0);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
  OUTLINED_FUNCTION_13_0();
  *v267 = v358;
  v267[1] = v206;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  OUTLINED_FUNCTION_20_1();
  v268 = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_30_4((uint64_t)v268);
  OUTLINED_FUNCTION_210_0();
  ((void (*)(char *, ValueMetadata *))v342[1])(v340, v341);
LABEL_110:
  swift_bridgeObjectRelease();
LABEL_3:
  OUTLINED_FUNCTION_9();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

void OUTLINED_FUNCTION_7_1(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_7_3()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_7_4()
{
  return type metadata accessor for TimeZone();
}

uint64_t OUTLINED_FUNCTION_7_5()
{
  return errcode();
}

uint64_t OUTLINED_FUNCTION_47(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_47_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for OSSignpostID();
}

uint64_t OUTLINED_FUNCTION_47_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_47_3()
{
  return static StorableValue.DataValueCodingKeys.== infix(_:_:)();
}

BOOL OUTLINED_FUNCTION_47_4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_47_5(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

void OUTLINED_FUNCTION_9_1(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 232) = a1;
  *(_QWORD *)(v2 - 224) = (v1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_9_2(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_9_3()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_9_4()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_9_5()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_9_6()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 104) = 0;
  *(_QWORD *)(v0 - 96) = 0xE000000000000000;
}

uint64_t OUTLINED_FUNCTION_9_7()
{
  uint64_t v0;

  return exprLocation(v0);
}

uint64_t OUTLINED_FUNCTION_5_0()
{
  return String.lowercased()()._countAndFlagsBits;
}

void OUTLINED_FUNCTION_5_1(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_5_2()
{
  uint64_t v0;

  return v0;
}

unint64_t OUTLINED_FUNCTION_5_4()
{
  uint64_t v0;
  uint64_t v1;

  return *(_QWORD *)(v1 - 192)
       + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 232) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 232) + 80))
       + *(_QWORD *)(*(_QWORD *)(v1 - 232) + 72) * v0;
}

uint64_t OUTLINED_FUNCTION_5_5()
{
  return Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
}

uint64_t OUTLINED_FUNCTION_5_6()
{
  return errcode();
}

uint64_t OUTLINED_FUNCTION_231_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_244(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_149()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_149_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_192(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v1, v3);
}

uint64_t OUTLINED_FUNCTION_192_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_32_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_32_1(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

ValueMetadata *OUTLINED_FUNCTION_32_3()
{
  return type metadata accessor for SQLDataType();
}

uint64_t OUTLINED_FUNCTION_32_4()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_102@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_102_0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void OUTLINED_FUNCTION_102_1(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of StorableValue(v2, a2);
}

uint64_t OUTLINED_FUNCTION_102_2()
{
  return swift_storeEnumTagMultiPayload();
}

unint64_t OUTLINED_FUNCTION_103()
{
  return specialized __RawDictionaryStorage.find<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_103_1()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 416) + 8))(v0, *(_QWORD *)(v1 - 408));
}

ValueMetadata *type metadata accessor for Schema()
{
  return &type metadata for Schema;
}

uint64_t MaterializedView.select.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of SelectCore(v1 + 16, a1);
}

uint64_t outlined init with copy of SelectCore(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SelectCore(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_219()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_219_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1 + *(_QWORD *)(*(_QWORD *)(v2 - 144) + 72) * v1;
}

void OUTLINED_FUNCTION_77()
{
  uint64_t v0;

  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v0, 0);
}

uint64_t OUTLINED_FUNCTION_77_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_77_1()
{
  return Date.ISO8601Format(_:)();
}

void closure #2 in static KeyedQueryPlannerMetadataCache.updateMetadataSQL(materializedViewName:groupBySchema:payloadSchema:)()
{
  uint64_t v0;
  ValueMetadata *v1;
  void (**Description)(uint64_t, uint64_t, ValueMetadata *);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  void (*v8)(uint64_t, uint64_t, ValueMetadata *);
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;

  OUTLINED_FUNCTION_42();
  v1 = type metadata accessor for SQLRawDataType();
  Description = (void (**)(uint64_t, uint64_t, ValueMetadata *))v1[-1].Description;
  MEMORY[0x1E0C80A78](v1);
  OUTLINED_FUNCTION_18_2();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v13 - v4;
  SQLDataType.columnType()();
  if (!v6)
  {
    Description[13](v0, 1, v1);
    v7 = specialized == infix<A>(_:_:)((uint64_t)v5, v0, (uint64_t (*)(uint64_t))type metadata accessor for SQLRawDataType, &lazy protocol witness table cache variable for type SQLRawDataType and conformance SQLRawDataType, (uint64_t)&protocol conformance descriptor for SQLRawDataType);
    v8 = Description[1];
    ((void (*)(uint64_t, ValueMetadata *))v8)(v0, v1);
    ((void (*)(char *, ValueMetadata *))v8)(v5, v1);
    v13 = 0;
    v14 = 0xE000000000000000;
    if ((v7 & 1) != 0)
    {
      _StringGuts.grow(_:)(57);
      v9._countAndFlagsBits = 0x222873626128;
      v9._object = (void *)0xE600000000000000;
      String.append(_:)(v9);
      OUTLINED_FUNCTION_189_0();
      OUTLINED_FUNCTION_71_1();
    }
    else
    {
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      v13 = 8744;
      v14 = 0xE200000000000000;
      OUTLINED_FUNCTION_189_0();
      v10 = 0x524F203F203D2022;
      v11 = 0xEB00000000222820;
    }
    String.append(_:)(*(Swift::String *)&v10);
    OUTLINED_FUNCTION_189_0();
    OUTLINED_FUNCTION_71_1();
    v12._countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v12);
  }
  OUTLINED_FUNCTION_9();
}

uint64_t OUTLINED_FUNCTION_73()
{
  uint64_t v0;

  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_BYTE *)(v0 + 64) = 3;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_73_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_73_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_73_2()
{
  return String.hashValue.getter();
}

void OUTLINED_FUNCTION_73_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  outlined init with copy of Date?(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_69(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_69_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_69_1(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_69_2()
{
  return Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
}

uint64_t OUTLINED_FUNCTION_69_3@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
}

void OUTLINED_FUNCTION_172(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 + a1) = 1;
}

uint64_t OUTLINED_FUNCTION_14_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_174()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 144) = v0;
  return v0(v2, v1);
}

uint64_t OUTLINED_FUNCTION_111(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

uint64_t OUTLINED_FUNCTION_165@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF)
    LODWORD(a1) = -1;
  return (a1 + 1);
}

uint64_t OUTLINED_FUNCTION_238()
{
  uint64_t v0;

  return v0;
}

uint64_t destroy for SQLExpressionInteger()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_110(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return __swift_instantiateConcreteTypeFromMangledName(a3);
}

void OUTLINED_FUNCTION_110_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)((*(_QWORD *)(v2 + 64) + 7 + v1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v2 + 64) + 7 + v0) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t SQLExpressionEvaluator.init(db:)(sqlite3 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  sqlite3_stmt *v13[2];

  v2 = v1;
  v13[1] = *(sqlite3_stmt **)MEMORY[0x1E0C80C00];
  *(_QWORD *)(v2 + 24) = a1;
  *(_BYTE *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 32) = Dictionary.init(dictionaryLiteral:)();
  v13[0] = 0;
  v6 = OUTLINED_FUNCTION_12_4(a1, "SELECT NOT ((?) IS NULL OR CAST((?) as NUMERIC) == 0 OR CAST((?) as NUMERIC) == 0.0)", v4, v5, v13);
  if ((_DWORD)v6 || !v13[0])
  {
    v7 = OUTLINED_FUNCTION_15_2(v6);
    swift_getErrorValue();
    OUTLINED_FUNCTION_53_1();

    OUTLINED_FUNCTION_1_12();
    OUTLINED_FUNCTION_49_1();
    v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v10 = v9;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
    OUTLINED_FUNCTION_13_0();
    *(_QWORD *)v11 = 0xD000000000000054;
    *(_QWORD *)(v11 + 8) = 0x800000018DCC3370;
    *(_QWORD *)(v11 + 16) = v8;
    *(_QWORD *)(v11 + 24) = v10;
    *(_BYTE *)(v11 + 32) = 2;
    OUTLINED_FUNCTION_35_1();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_34_1();
  }
  else
  {
    *(sqlite3_stmt **)(v2 + 40) = v13[0];
  }
  return v2;
}

uint64_t static KeyedAggregationMetadataCache.tableName(materializedViewName:)(uint64_t a1, int a2, Swift::Int a3, uint64_t a4, void *a5)
{
  Swift::String v8;

  _StringGuts.grow(_:)(a3);
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_24();
  v8._countAndFlagsBits = a4;
  v8._object = a5;
  String.append(_:)(v8);
  return a1;
}

void OUTLINED_FUNCTION_117_0()
{
  uint64_t v0;

  ++*(_QWORD *)(v0 + 16);
}

uint64_t SelectCore.groupBy.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t lazy protocol witness table accessor for type [StorableValue] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [StorableValue] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [StorableValue] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [StorableValue]);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type StorableValue and conformance StorableValue, type metadata accessor for StorableValue, (uint64_t)&protocol conformance descriptor for StorableValue);
    v3 = v2;
    result = MEMORY[0x193FED7A0](MEMORY[0x1E0DEAF18], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [StorableValue] and conformance <A> [A]);
  }
  return result;
}

uint64_t Schema.tableName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  return v2(v1 + *(int *)(v0 + 40), v3, v4);
}

uint64_t OUTLINED_FUNCTION_78_0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 4;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_78_1()
{
  return Optional<A>.hashValue.getter();
}

_QWORD *initializeBufferWithCopyOfBuffer for Schema(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void OUTLINED_FUNCTION_115_0()
{
  void *v0;

}

uint64_t Schema.columns.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_223_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t OUTLINED_FUNCTION_214(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 144))(a1, v1);
}

uint64_t OUTLINED_FUNCTION_214_0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 176);
}

uint64_t OUTLINED_FUNCTION_72(uint64_t a1)
{
  uint64_t v1;

  return a1 + *(int *)(v1 + 20);
}

uint64_t OUTLINED_FUNCTION_72_0()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t OUTLINED_FUNCTION_72_1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return specialized Dictionary.subscript.getter(v1, a1);
}

uint64_t OUTLINED_FUNCTION_72_2()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v1[1];
  *(_QWORD *)(v2 - 192) = *v1;
  *(_QWORD *)(v2 - 184) = v3;
  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_99()
{
  return swift_bridgeObjectRelease_n();
}

void OUTLINED_FUNCTION_99_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 280) = (v0 - 1) & v0;
  *(_QWORD *)(v2 - 288) = v1;
}

void OUTLINED_FUNCTION_226(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 160) = (char *)&a9 - v9;
}

uint64_t OUTLINED_FUNCTION_65()
{
  return Int.hashValue.getter();
}

uint64_t OUTLINED_FUNCTION_107()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_107_0()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_107_1()
{
  return swift_storeEnumTagMultiPayload();
}

void OUTLINED_FUNCTION_107_2()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 104) = 0;
  *(_QWORD *)(v0 - 96) = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
}

uint64_t tableExists(sqlExpressionEvaluator:tableName:)(uint64_t a1, uint64_t a2, void *a3)
{
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  unint64_t v9;
  char v10;
  uint64_t v11;

  _StringGuts.grow(_:)(63);
  v5._object = (void *)0x800000018DCC4000;
  v5._countAndFlagsBits = 0xD00000000000003CLL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = a2;
  v6._object = a3;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 39;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v9 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v8, MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();
  if (!v11)
  {
    if (v9)
    {
      swift_bridgeObjectRelease();
      v10 = 1;
    }
    else
    {
      v10 = 0;
    }
  }
  return v10 & 1;
}

void OUTLINED_FUNCTION_111_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of StorableValue(a1, a2, v2);
}

__n128 *OUTLINED_FUNCTION_217(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

unint64_t static Schema.JSONEach(with:)@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t inited;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t result;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v3 = *a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, SQLDataType)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18DC0CE20;
  *(_QWORD *)(inited + 32) = 0x65756C6176;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  *(_BYTE *)(inited + 48) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SQLDataType>);
  v5 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v6 = *(_QWORD *)(inited + 32);
  v7 = *(_QWORD *)(inited + 40);
  v8 = *(_BYTE *)(inited + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  result = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v10 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v5[(result >> 6) + 8] |= 1 << result;
    v11 = (_QWORD *)(v5[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_BYTE *)(v5[7] + result) = v8;
    v12 = v5[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (!v13)
    {
      v5[2] = v14;
      swift_release();
      result = swift_bridgeObjectRelease();
      *a2 = 0x6361655F6E6F736ALL;
      a2[1] = 0xE900000000000068;
      a2[2] = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t SelectCore.from.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of FromClause(v1, a1);
}

uint64_t destroy for FromClause(uint64_t a1)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 32))
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with copy of FromClause(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for FromClause(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for FromClause(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v6 - 8))(a1 + 8, v5, v6);
    v8 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v8;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    v9 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v9;
    v10 = *(_QWORD *)(a2 + 88);
    v11 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = v10;
    *(_QWORD *)(a1 + 96) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v12 = v5[3];
    *(_OWORD *)(a1 + 40) = v5[2];
    *(_OWORD *)(a1 + 56) = v12;
    v13 = v5[5];
    *(_OWORD *)(a1 + 72) = v5[4];
    *(_OWORD *)(a1 + 88) = v13;
    v14 = v5[1];
    *v4 = *v5;
    *(_OWORD *)(a1 + 24) = v14;
  }
  return a1;
}

uint64_t FromClause.schemas.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_180()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 168);
}

ValueMetadata *type metadata accessor for FromClause()
{
  return &type metadata for FromClause;
}

uint64_t specialized _NativeDictionary.makeIterator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  char v10;
  ValueMetadata *v11;

  if (a2 < 0 || (OUTLINED_FUNCTION_22_0(), v6 ^ v7 | v5))
  {
    __break(1u);
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_13_1();
  if ((v10 & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(v9 + 36) == v8)
  {
    OUTLINED_FUNCTION_12_2();
    v11 = type metadata accessor for SQLDataType();
    (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v11[-1].Description + 2))(v2, v3 + *((_QWORD *)v11[-1].Description + 9) * a2, v11);
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_1_8();
    return;
  }
LABEL_8:
  __break(1u);
}

uint64_t storeEnumTagSinglePayload for SQLDataType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_18D81D6A4 + 4 * byte_18DC2D279[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_18D81D6D8 + 4 * byte_18DC2D274[v4]))();
}

uint64_t sub_18D81D6D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18D81D6E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18D81D6E8);
  return result;
}

uint64_t sub_18D81D6F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18D81D6FCLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_18D81D700(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18D81D708(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for AggregationFunction.AggregationType.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t MAX.aggregationMetadata()()
{
  return MAX.aggregationMetadata()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t *boxed_opaque_existential_0;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v29;
  uint64_t v30;
  void (**Description)(char *, _QWORD, ValueMetadata *);
  char *v32;
  ValueMetadata *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  OUTLINED_FUNCTION_42();
  v38 = v2;
  v39 = v3;
  v37 = v1;
  v5 = v4;
  v33 = OUTLINED_FUNCTION_33();
  Description = (void (**)(char *, _QWORD, ValueMetadata *))v33[-1].Description;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v6);
  v32 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v29 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, StorableValue)>);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
  v13 = *(unsigned __int8 *)(*(_QWORD *)(v30 - 8) + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_18DC0CE20;
  v16 = (_QWORD *)(v15 + v14);
  v17 = *(int *)(v5 + 48);
  v18 = (_QWORD *)(v0 + *(int *)(v5 + 44));
  v19 = v18[1];
  *v16 = *v18;
  v16[1] = v19;
  v34 = v0;
  OUTLINED_FUNCTION_60_1((uint64_t)v12, v0 + v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
  v20 = OUTLINED_FUNCTION_167_0();
  OUTLINED_FUNCTION_86(v20, v21, v8);
  if (v22)
  {
    v23 = *(void (**)(char *, uint64_t))(v10 + 8);
    OUTLINED_FUNCTION_21_0();
    v23(v12, v9);
    v35 = 0u;
    v36 = 0u;
  }
  else
  {
    *((_QWORD *)&v36 + 1) = v8;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v35);
    (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(boxed_opaque_existential_0, v12, v8);
    OUTLINED_FUNCTION_21_0();
  }
  v25 = v37;
  v26 = (uint64_t)v32;
  v27 = (_QWORD *)((char *)v16 + *(int *)(v30 + 48));
  Description[2](v32, v34 + *(int *)(v5 + 40), v33);
  StorableValue.init(_:dataType:)((uint64_t)&v35, v26, v27);
  if (v25)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v15 + 16) = 0;
    swift_setDeallocating();
    return specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  else
  {
    OUTLINED_FUNCTION_123();
    return Dictionary.init(dictionaryLiteral:)();
  }
}

BMSQLColumn *BMEventTimestampSQLColumn()
{
  return -[BMSQLColumn initWithName:dataType:requestOnly:extractBlock:]([BMSQLColumn alloc], "initWithName:dataType:requestOnly:extractBlock:", CFSTR("eventTimestamp"), 3, 0, &__block_literal_global_10);
}

BMSQLColumn *BMEventClassNameSQLColumn()
{
  return -[BMSQLColumn initWithName:dataType:requestOnly:extractBlock:]([BMSQLColumn alloc], "initWithName:dataType:requestOnly:extractBlock:", CFSTR("_eventClassName"), 2, 1, &__block_literal_global_20_0);
}

BMSQLColumn *BMEventBodyDataSQLColumn()
{
  return -[BMSQLColumn initWithName:dataType:requestOnly:extractBlock:]([BMSQLColumn alloc], "initWithName:dataType:requestOnly:extractBlock:", CFSTR("_eventBodyData"), 4, 1, &__block_literal_global_17);
}

void IncrementalViewManager.update(database:materializedViewPlan:databaseName:)(sqlite3 *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  ValueMetadata *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  ValueMetadata *v49;
  ValueMetadata *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, _QWORD);
  void (*v72)(uint64_t);
  _QWORD *rawValue;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  Swift::String v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, _QWORD);
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  uint8_t *v87;
  uint64_t v88;
  unint64_t v89;
  os_signpost_id_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  sqlite3 *v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char v101;
  unint64_t v102;
  unsigned __int8 *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v146;
  BOOL v147;
  uint64_t v148;
  sqlite3 *v149;
  uint64_t v150;
  uint64_t v151;
  NSObject *v152;
  uint64_t v153;
  const char *v154;
  uint8_t *v155;
  os_signpost_id_t v156;
  void (*v157)();
  uint64_t (*v158)(uint64_t, _QWORD);
  uint64_t v159;
  id v160;
  void *v161;
  void *v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v194;
  uint64_t v195;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v204;
  uint64_t v205;
  uint64_t v207;
  void (*v208)(uint64_t, uint64_t);
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  Swift::OpaquePointer v228[2];
  uint64_t v229;
  uint64_t v230;
  uint64_t v231[5];
  Swift::String v232;
  Swift::String v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;

  v6 = OUTLINED_FUNCTION_125_0();
  OUTLINED_FUNCTION_160(v6, (uint64_t)&v222);
  OUTLINED_FUNCTION_3_6(v7);
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_8();
  v191 = v9;
  v222 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: String, value: StorableValue));
  OUTLINED_FUNCTION_3_6(*(_QWORD *)(v222 - 8));
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_6_1();
  v202 = v11;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_53();
  v221 = v13;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_61();
  v16 = OUTLINED_FUNCTION_12(v15);
  v17 = type metadata accessor for StorableValue(v16);
  OUTLINED_FUNCTION_160(v17, (uint64_t)&v230);
  v223 = v18;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v19);
  OUTLINED_FUNCTION_8();
  v21 = OUTLINED_FUNCTION_12(v20);
  v22 = type metadata accessor for MaterializedViewPhysicalPlan(v21);
  OUTLINED_FUNCTION_160(v22, (uint64_t)v231);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v23);
  OUTLINED_FUNCTION_6_1();
  v195 = v24;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v25);
  OUTLINED_FUNCTION_61();
  v27 = OUTLINED_FUNCTION_47_0(v26);
  OUTLINED_FUNCTION_160(v27, (uint64_t)&v229);
  OUTLINED_FUNCTION_3_6(v28);
  MEMORY[0x1E0C80A78](v29);
  OUTLINED_FUNCTION_6_1();
  v205 = v30;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v31);
  OUTLINED_FUNCTION_53();
  v199 = v32;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v33);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_12(v34);
  v35 = type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_160((uint64_t)v35, (uint64_t)&v237);
  OUTLINED_FUNCTION_3_6(v36);
  MEMORY[0x1E0C80A78](v37);
  OUTLINED_FUNCTION_114();
  v40 = v39 - v38;
  v41 = type metadata accessor for ResultColumn();
  OUTLINED_FUNCTION_160((uint64_t)v41, (uint64_t)&v236);
  OUTLINED_FUNCTION_3_6(v42);
  MEMORY[0x1E0C80A78](v43);
  OUTLINED_FUNCTION_114();
  v46 = v45 - v44;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SQLDataType));
  v48 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  OUTLINED_FUNCTION_76_0();
  v49 = type metadata accessor for Schema();
  MEMORY[0x1E0C80A78](v49);
  OUTLINED_FUNCTION_75_0();
  v50 = type metadata accessor for MaterializedView();
  MEMORY[0x1E0C80A78](v50);
  OUTLINED_FUNCTION_114();
  v53 = v52 - v51;
  (*(void (**)(uint64_t, uint64_t))(v54 + 16))(v52 - v51, a2);
  type metadata accessor for QueryPlannerMetadata(0);
  v55 = OUTLINED_FUNCTION_49_0();
  QueryPlannerMetadata.init(materializedView:database:cacheSize:)(v53, (uint64_t)a1, 1024, v55, v56, v57, v58, v59, v172, v174, v175, v177, v178, v179, v181, v183, v184, v185, v187,
    v190);
  if (v212)
    goto LABEL_83;
  v213 = v47;
  v188 = v4;
  v194 = v60;
  OUTLINED_FUNCTION_142_0();
  v186 = MaterializedView.name.getter();
  v182 = v61;
  v180 = MaterializedView.name.getter();
  v176 = v62;
  type metadata accessor for SelectCorePhysicalPlan(0);
  v63 = SelectCore.select.getter();
  v64 = *(_QWORD *)(v63 + 16);
  if (v64)
  {
    OUTLINED_FUNCTION_91_0(MEMORY[0x1E0DEE9D8]);
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_57_0();
    v66 = v63 + v65;
    v210 = *(_QWORD *)(v67 + 72);
    v208 = *(void (**)(uint64_t, uint64_t))(v67 + 16);
    v68 = v213;
    do
    {
      v208(v46, v66);
      v69 = (char *)v5 + *(int *)(v68 + 48);
      *v5 = ResultColumn.name.getter();
      v5[1] = v70;
      ResultColumn.expression.getter(v40);
      SQLExpression.returnType.getter(v69);
      OUTLINED_FUNCTION_79_0();
      OUTLINED_FUNCTION_118_0(v40, v71);
      OUTLINED_FUNCTION_79_0();
      v72(v46);
      rawValue = v228[0]._rawValue;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_56_0();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        rawValue = v228[0]._rawValue;
      }
      v74 = rawValue[2];
      v48 = v74 + 1;
      v68 = v213;
      if (v74 >= rawValue[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v68 = v213;
        rawValue = v228[0]._rawValue;
      }
      rawValue[2] = v48;
      OUTLINED_FUNCTION_57_0();
      outlined init with take of UUID?((uint64_t)v5, (uint64_t)rawValue + v75 + *(_QWORD *)(v76 + 72) * v74, &demangling cache variable for type metadata for (String, SQLDataType));
      v66 += v210;
      --v64;
    }
    while (v64);
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_142_0();
  }
  else
  {
    swift_bridgeObjectRelease();
    rawValue = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if (rawValue[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SQLDataType>);
    v77 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v77 = (void *)MEMORY[0x1E0DEE9E0];
  }
  v228[0]._rawValue = v77;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)((uint64_t)rawValue, 1, v228);
  v78._countAndFlagsBits = v180;
  v78._object = v176;
  Schema.init(tableName:columns:)(v78, v228[0]);
  v79 = Schema.columns.getter();
  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_118_0(v188, v80);
  v81 = (uint64_t *)(v48 + *(int *)(v201 + 28));
  v82 = *v81;
  v83 = v81[1];
  swift_bridgeObjectRetain();
  DBViewWriter.init(database:tableName:schema:createTableSQL:)(a1, v186, v182, v79, v82, v83, v231);
  v84 = v207;
  v173 = *MEMORY[0x1E0DF2190];
  v85 = v198;
  while (1)
  {
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
    outlined init with copy of StorableValue(v48, v84, type metadata accessor for MaterializedViewPhysicalPlan);
    OUTLINED_FUNCTION_50_0();
    v86 = OSSignposter.logHandle.getter();
    LODWORD(v218) = static os_signpost_type_t.begin.getter();
    if ((OUTLINED_FUNCTION_21_1() & 1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(v200 + 16))(v199, v85);
      v87 = (uint8_t *)OUTLINED_FUNCTION_7_0();
      v228[0]._rawValue = (void *)OUTLINED_FUNCTION_7_0();
      *(_DWORD *)v87 = 136446466;
      OUTLINED_FUNCTION_87_0();
      v226 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, (uint64_t *)v228);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_52_0();
      v88 = OUTLINED_FUNCTION_98_0(2082);
      v226 = OUTLINED_FUNCTION_143_0(v88, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_24();
      outlined destroy of StorableValue(v84, type metadata accessor for MaterializedViewPhysicalPlan);
      v90 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_18D810000, v86, (os_signpost_type_t)v218, v90, "IncrementalViewUpdateBatch", "database:%{public}s view:%{public}s", v87, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_14();
    }
    OUTLINED_FUNCTION_99();

    OUTLINED_FUNCTION_128_0();
    (*(void (**)(uint64_t, uint64_t))(v200 + 16))(v199, v85);
    OUTLINED_FUNCTION_124_0();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_113();
    v91 = SelectCorePhysicalPlan.update(metadata:)(v194);
    v189 = v92;
    if (one-time initialization token for compute != -1)
      swift_once();
    v93 = type metadata accessor for Logger();
    v94 = (sqlite3 *)__swift_project_value_buffer(v93, (uint64_t)static Logging.compute);
    v84 = v195;
    outlined init with copy of StorableValue(v48, v195, type metadata accessor for MaterializedViewPhysicalPlan);
    OUTLINED_FUNCTION_87_0();
    v95 = Logger.logObject.getter();
    v96 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v95, v96))
    {
      v97 = (uint8_t *)OUTLINED_FUNCTION_7_0();
      v228[0]._rawValue = (void *)OUTLINED_FUNCTION_7_0();
      *(_DWORD *)v97 = 134218242;
      v226 = *(_QWORD *)(v91 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_41_0();
      v98 = OUTLINED_FUNCTION_98_0(2080);
      v226 = OUTLINED_FUNCTION_143_0(v98, v99);
      OUTLINED_FUNCTION_116_0();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_24();
      outlined destroy of StorableValue(v195, type metadata accessor for MaterializedViewPhysicalPlan);
      _os_log_impl(&dword_18D810000, v95, v96, "persisting %ld changes for materialized view %s", v97, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_14();
    }
    OUTLINED_FUNCTION_41_0();
    OUTLINED_FUNCTION_128_0();

    v100 = v222;
    OUTLINED_FUNCTION_137_0();
    v204 = *(_QWORD *)(v91 + 16);
    if (v204)
      break;
    OUTLINED_FUNCTION_41_0();
LABEL_73:
    QueryPlannerMetadata.storeMetadata()();
    if (v151)
    {
      swift_release();
      OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_79_0();
      v159 = v198;
LABEL_82:
      OUTLINED_FUNCTION_118_0(v159, v158);
      outlined release of DBViewWriter((uint64_t)v231);
      goto LABEL_83;
    }
    v152 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    v153 = v48;
    v48 = static os_signpost_type_t.end.getter();
    if ((OUTLINED_FUNCTION_21_1() & 1) != 0)
    {
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      v154 = "[Error] Interval already ended";
      if (OUTLINED_FUNCTION_30_0(v191, *(uint64_t (**)(uint64_t, uint64_t))(v192 + 88)) != v173)
      {
        OUTLINED_FUNCTION_30_0(v191, *(uint64_t (**)(uint64_t, uint64_t))(v192 + 8));
        v154 = "";
      }
      v155 = (uint8_t *)OUTLINED_FUNCTION_7_0();
      *(_WORD *)v155 = 0;
      v156 = OSSignpostID.rawValue.getter();
      OUTLINED_FUNCTION_51_0(&dword_18D810000, v152, (os_signpost_type_t)v48, v156, "IncrementalViewUpdateBatch", v154, v155);
      OUTLINED_FUNCTION_14();
    }

    v157 = *(void (**)())(v200 + 8);
    ((void (*)(uint64_t))v157)(v153);
    v85 = v198;
    v157();
    swift_release();
    OUTLINED_FUNCTION_142_0();
    if ((v189 & 1) != 0)
    {
      outlined release of DBViewWriter((uint64_t)v231);
      OUTLINED_FUNCTION_15_1();
LABEL_83:
      OUTLINED_FUNCTION_9();
      return;
    }
  }
  v211 = v231[4];
  v209 = v91 + 32;
  OUTLINED_FUNCTION_87_0();
  v101 = 0;
  v102 = 0;
  while (2)
  {
    v214 = v101;
    while (1)
    {
      if (v102 >= *(_QWORD *)(v91 + 16))
      {
        __break(1u);
LABEL_87:
        v160 = BMSQLDatabaseError(v48, v94, 0);
        swift_getErrorValue();
        v161 = (void *)Error.localizedDescription.getter();
        v163 = v162;

        v228[0]._rawValue = v161;
        v228[1]._rawValue = v163;
        OUTLINED_FUNCTION_0_18();
        v226 = v164;
        v227 = v165;
        OUTLINED_FUNCTION_1_11();
        v224 = v166;
        v225 = v167;
        lazy protocol witness table accessor for type String and conformance String();
        v168 = OUTLINED_FUNCTION_62_1();
        v170 = v169;
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
        OUTLINED_FUNCTION_13_0();
        *(_QWORD *)v171 = v91;
        *(_QWORD *)(v171 + 8) = v218;
        *(_QWORD *)(v171 + 16) = v168;
        *(_QWORD *)(v171 + 24) = v170;
        *(_BYTE *)(v171 + 32) = 1;
        swift_bridgeObjectRetain();
        swift_willThrow();
        OUTLINED_FUNCTION_20_1();
        OUTLINED_FUNCTION_15_1();
        OUTLINED_FUNCTION_116_0();
        OUTLINED_FUNCTION_41_0();
        OUTLINED_FUNCTION_19_1();
        goto LABEL_81;
      }
      v103 = (unsigned __int8 *)(v209 + 16 * v102);
      v104 = *v103;
      v105 = *((_QWORD *)v103 + 1);
      swift_bridgeObjectRetain();
      v106 = recordAsSQL #1 (schema:changeRecord:) in DBViewWriter.sendDatabaseUpdate(changeRecords:)(v211, v104, v105);
      v107 = v106;
      v216 = v102 + 1;
      if ((v104 & 1) != 0)
        break;
      v91 = *(_QWORD *)(v106 + 16);
      if (v91)
      {
        v108 = v106;
        OUTLINED_FUNCTION_91_0(MEMORY[0x1E0DEE9D8]);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        OUTLINED_FUNCTION_54_0();
        v48 = v108 + v109;
        v218 = *(_QWORD *)(v110 + 72);
        v111 = v228[0]._rawValue;
        v84 = v217;
        do
        {
          outlined init with copy of Date?(v48, v220, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: StorableValue));
          v112 = *(int *)(v100 + 48);
          v113 = v221 + v112;
          outlined init with copy of StorableValue(v220 + v112, v221 + v112, type metadata accessor for StorableValue);
          outlined init with take of StorableValue(v113, v84, type metadata accessor for StorableValue);
          outlined destroy of UUID?(v220, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: StorableValue));
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_56_0();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v84 = v217;
            v111 = v228[0]._rawValue;
          }
          v115 = v111[2];
          v114 = v111[3];
          if (v115 >= v114 >> 1)
          {
            OUTLINED_FUNCTION_86_0(v114);
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v84 = v217;
            v111 = v228[0]._rawValue;
          }
          v111[2] = v115 + 1;
          OUTLINED_FUNCTION_57_0();
          OUTLINED_FUNCTION_111_0(v84, (uint64_t)v111 + v116 + *(_QWORD *)(v117 + 72) * v115);
          v48 += v218;
          --v91;
          v100 = v222;
        }
        while (v91);
        OUTLINED_FUNCTION_16_0();
        OUTLINED_FUNCTION_137_0();
      }
      else
      {
        swift_bridgeObjectRelease();
        v111 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      v94 = (sqlite3 *)v231[1];
      SQLExpressionEvaluator.execute(sql:bindingValues:)(v232, (Swift::OpaquePointer)v111);
      OUTLINED_FUNCTION_116_0();
      if (v118)
        goto LABEL_80;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_19_1();
      OUTLINED_FUNCTION_64();
      v102 = v216;
      if (v216 == v204)
        goto LABEL_71;
    }
    if ((v214 & 1) == 0)
    {
      v94 = (sqlite3 *)v231[0];
      v91 = v234;
      v218 = v235;
      v119 = v106;
      v120 = String.utf8CString.getter();
      v48 = OUTLINED_FUNCTION_101(v94, (const char *)(v120 + 32));
      v84 = v207;
      v100 = v222;
      swift_release();
      v107 = v119;
      if ((_DWORD)v48)
        goto LABEL_87;
    }
    v121 = *(_QWORD *)(v107 + 16);
    if (v121)
    {
      v122 = v107;
      OUTLINED_FUNCTION_91_0(MEMORY[0x1E0DEE9D8]);
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      OUTLINED_FUNCTION_54_0();
      v91 = v122 + v123;
      v197 = *(_QWORD *)(v124 + 72);
      v125 = v228[0]._rawValue;
      do
      {
        v215 = v121;
        v219 = v125;
        outlined init with copy of Date?(v91, v220, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: StorableValue));
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<StorableValue>);
        v126 = *(_QWORD *)(v223 + 72);
        v127 = (*(unsigned __int8 *)(v223 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v223 + 80);
        v128 = swift_allocObject();
        *(_OWORD *)(v128 + 16) = xmmword_18DC0CE10;
        v129 = v128 + v127;
        v84 = v222;
        v130 = *(int *)(v222 + 48);
        v131 = v221 + v130;
        v132 = v220 + v130;
        outlined init with copy of StorableValue(v220 + v130, v221 + v130, type metadata accessor for StorableValue);
        OUTLINED_FUNCTION_111_0(v131, v129);
        v133 = v129 + v126;
        v134 = v202 + *(int *)(v84 + 48);
        outlined init with copy of StorableValue(v132, v134, type metadata accessor for StorableValue);
        OUTLINED_FUNCTION_111_0(v134, v133);
        v125 = v219;
        outlined destroy of UUID?(v220, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: StorableValue));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_56_0();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v125 = v228[0]._rawValue;
        }
        v136 = v125[2];
        v135 = v125[3];
        if (v136 >= v135 >> 1)
        {
          OUTLINED_FUNCTION_86_0(v135);
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v125 = v228[0]._rawValue;
        }
        v125[2] = v136 + 1;
        v125[v136 + 4] = v128;
        v91 += v197;
        v121 = v215 - 1;
      }
      while (v215 != 1);
      OUTLINED_FUNCTION_16_0();
      v100 = v222;
      OUTLINED_FUNCTION_63_0();
    }
    else
    {
      swift_bridgeObjectRelease();
      v125 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v218 = v125[2];
    if (!v218)
    {
      v137 = MEMORY[0x1E0DEE9D8];
LABEL_69:
      OUTLINED_FUNCTION_24();
      SQLExpressionEvaluator.execute(sql:bindingValues:)(v233, (Swift::OpaquePointer)v137);
      v48 = v205;
      OUTLINED_FUNCTION_116_0();
      v102 = v216;
      if (!v150)
      {
        v94 = v149;
        OUTLINED_FUNCTION_64();
        OUTLINED_FUNCTION_19_1();
        OUTLINED_FUNCTION_24();
        v101 = 1;
        if (v216 != v204)
          continue;
LABEL_71:
        OUTLINED_FUNCTION_99();
        goto LABEL_73;
      }
LABEL_80:
      OUTLINED_FUNCTION_20_1();
      OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_41_0();
      OUTLINED_FUNCTION_19_1();
LABEL_81:
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_41_0();
      v158 = *(uint64_t (**)(uint64_t, _QWORD))(v200 + 8);
      v159 = v198;
      goto LABEL_82;
    }
    break;
  }
  OUTLINED_FUNCTION_141();
  v91 = 0;
  v137 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v84 = (uint64_t)v125;
    v138 = v125[v91 + 4];
    v139 = *(_QWORD *)(v138 + 16);
    v140 = *(_QWORD *)(v137 + 16);
    if (__OFADD__(v140, v139))
      break;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!swift_isUniquelyReferenced_nonNull_native() || v140 + v139 > *(_QWORD *)(v137 + 24) >> 1)
      v137 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (*(_QWORD *)(v138 + 16))
    {
      v141 = *(_QWORD *)(v137 + 16);
      if ((*(_QWORD *)(v137 + 24) >> 1) - v141 < v139)
        goto LABEL_90;
      v142 = (*(unsigned __int8 *)(v223 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v223 + 80);
      v143 = *(_QWORD *)(v223 + 72);
      v144 = v137 + v142 + v143 * v141;
      if (v138 + v142 < v144 + v143 * v139 && v144 < v138 + v142 + v143 * v139)
        goto LABEL_92;
      swift_arrayInitWithCopy();
      if (v139)
      {
        v146 = *(_QWORD *)(v137 + 16);
        v147 = __OFADD__(v146, v139);
        v148 = v146 + v139;
        if (v147)
          goto LABEL_91;
        *(_QWORD *)(v137 + 16) = v148;
      }
    }
    else if (v139)
    {
      goto LABEL_89;
    }
    ++v91;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v218 == v91)
    {
      OUTLINED_FUNCTION_24();
      v100 = v222;
      OUTLINED_FUNCTION_63_0();
      goto LABEL_69;
    }
  }
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  OUTLINED_FUNCTION_0_19();
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  swift_release();
  __break(1u);
}

uint64_t OUTLINED_FUNCTION_53_1()
{
  return Error.localizedDescription.getter();
}

uint64_t OUTLINED_FUNCTION_53_2()
{
  uint64_t v0;
  uint64_t v1;

  return specialized Dictionary.subscript.getter(v0, v1);
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  const void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_61_0();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_11_1();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_46_0();
      if (v5)
        goto LABEL_19;
      OUTLINED_FUNCTION_10_3();
    }
  }
  OUTLINED_FUNCTION_95_0();
  if (v3)
  {
    OUTLINED_FUNCTION_58_1(v7, v8, v9, v10, v11);
    OUTLINED_FUNCTION_93_0();
    v12 = (const void *)OUTLINED_FUNCTION_8_3();
    OUTLINED_FUNCTION_96_0(v12);
    if (v2)
    {
      OUTLINED_FUNCTION_90_0();
      v14 = v14 && v2 == -1;
      if (!v14)
      {
        OUTLINED_FUNCTION_88_0(v13);
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_19:
    __break(1u);
    return;
  }
LABEL_13:
  v15 = OUTLINED_FUNCTION_93_0();
  v16 = OUTLINED_FUNCTION_45_0(v15);
  if ((v1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v16, v17);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v16, v17);
  }
  OUTLINED_FUNCTION_100_0();
  OUTLINED_FUNCTION_70_0();
}

{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_61_0();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_11_1();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_46_0();
      if (v6)
        goto LABEL_19;
      OUTLINED_FUNCTION_10_3();
    }
  }
  OUTLINED_FUNCTION_95_0();
  if (v4)
  {
    OUTLINED_FUNCTION_58_1(v8, v9, v10, v11, v12);
    __swift_instantiateConcreteTypeFromMangledName(v1);
    v13 = (const void *)OUTLINED_FUNCTION_8_3();
    OUTLINED_FUNCTION_96_0(v13);
    if (v3)
    {
      OUTLINED_FUNCTION_90_0();
      v15 = v15 && v3 == -1;
      if (!v15)
      {
        OUTLINED_FUNCTION_88_0(v14);
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_19:
    __break(1u);
    return;
  }
LABEL_13:
  v16 = __swift_instantiateConcreteTypeFromMangledName(v1);
  v17 = OUTLINED_FUNCTION_45_0(v16);
  if ((v2 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v17, v18);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v17, v18);
  }
  OUTLINED_FUNCTION_100_0();
  OUTLINED_FUNCTION_70_0();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  char *v14;

  OUTLINED_FUNCTION_61_0();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_11_1();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_46_0();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_10_3();
    }
  }
  else
  {
    v7 = v3;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    OUTLINED_FUNCTION_58_1(v2, v3, v4, v5, v6);
    v12 = (const void *)OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_96_0(v12);
    OUTLINED_FUNCTION_110_0();
    *(_QWORD *)(v11 + 16) = v10;
    *(_QWORD *)(v11 + 24) = v13;
  }
  else
  {
    v11 = MEMORY[0x1E0DEE9D8];
  }
  v14 = (char *)(v0 + 32);
  if ((v1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v10, (char *)(v11 + 32));
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((uint64_t)v14, v10);
  }
  OUTLINED_FUNCTION_100_0();
  OUTLINED_FUNCTION_1_8();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

ValueMetadata *type metadata accessor for ResultColumn()
{
  return &type metadata for ResultColumn;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  void (*v3)(_QWORD);
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_37_0();
  }
  else
  {
    OUTLINED_FUNCTION_85_0();
    v3(0);
    OUTLINED_FUNCTION_71_0();
    if (!v6 & v5)
      v7 = v4 > v2;
    else
      v7 = 0;
    if (!v7)
    {
      OUTLINED_FUNCTION_55_0();
      return OUTLINED_FUNCTION_13_2();
    }
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_38_0();
  }
  result = OUTLINED_FUNCTION_9_3();
  __break(1u);
  return result;
}

{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_37_0();
  }
  else
  {
    OUTLINED_FUNCTION_85_0();
    __swift_instantiateConcreteTypeFromMangledName(v3);
    OUTLINED_FUNCTION_71_0();
    if (!v6 & v5)
      v7 = v4 > v2;
    else
      v7 = 0;
    if (!v7)
    {
      OUTLINED_FUNCTION_55_0();
      return OUTLINED_FUNCTION_13_2();
    }
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_38_0();
  }
  result = OUTLINED_FUNCTION_9_3();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_37_0();
  }
  else
  {
    OUTLINED_FUNCTION_85_0();
    if (v4 + 8 * v3 <= v2 || v2 + 8 * v3 <= v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(v5);
      OUTLINED_FUNCTION_55_0();
      return OUTLINED_FUNCTION_13_2();
    }
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_38_0();
  }
  result = OUTLINED_FUNCTION_9_3();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_16_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_16_1(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return outlined init with take of (key: String, value: StorableValue)(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_16_2()
{
  return String.init(stringInterpolation:)();
}

uint64_t OUTLINED_FUNCTION_16_3(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_26(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  *v4 = result;
  v4[1] = a2;
  v5 = v3 + *(int *)(v2 + 48);
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_26_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_26_1()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t OUTLINED_FUNCTION_26_2()
{
  return Dictionary.init(dictionaryLiteral:)();
}

void OUTLINED_FUNCTION_26_3()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void SQLExpressionEvaluator.execute(expression:payload:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  ValueMetadata *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  ValueMetadata *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void (*v17)(_QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(uint64_t, ValueMetadata *);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  ValueMetadata *v40;
  void (**v41)(uint64_t, ValueMetadata *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void (*v53)(uint64_t, ValueMetadata *);
  uint64_t v54;
  uint64_t v55;
  Swift::String v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  int EnumTagSinglePayload;
  uint64_t v63;
  unint64_t v64;
  void (**v65)(uint64_t, ValueMetadata *);
  uint64_t v66;
  Swift::String v67;
  void (*v68)(uint64_t, ValueMetadata *);
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  void (*v72)(uint64_t, ValueMetadata *);
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  ValueMetadata *v77;
  _QWORD *v78;
  void (*v79)(_QWORD);
  uint64_t v80;
  void (*v81)(_QWORD);
  uint64_t v82;
  uint64_t v83;
  ValueMetadata *v84;
  uint64_t v85;
  uint64_t (*v86)(_QWORD);
  uint64_t v87;
  void (*v88)(uint64_t, ValueMetadata *);
  uint64_t v89;
  Swift::String v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  _BYTE *v104;
  ValueMetadata *v105;
  char v106;
  void (*v107)(_QWORD);
  uint64_t v108;
  uint64_t v109;
  char v110;
  void (*v111)(_QWORD, _QWORD);
  void (*v112)(_QWORD);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(_QWORD);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  Swift::String v123;
  Swift::String v124;
  uint64_t v125;
  uint64_t v126;
  ValueMetadata *v127;
  uint64_t v128;
  _BYTE *v129;
  _BYTE *v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t *v133;
  _QWORD *Description;
  _QWORD *v135;
  ValueMetadata *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(uint64_t, ValueMetadata *);
  void (**v141)(uint64_t, ValueMetadata *);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(_QWORD);
  uint64_t v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unsigned __int8 v152;
  uint64_t v153;
  Swift::String v154;
  Swift::String v155;

  v143 = a2;
  v133 = a3;
  v4 = type metadata accessor for SQLExpression();
  Description = v4[-1].Description;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_6_1();
  v128 = v6;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_61();
  v132 = v8;
  v9 = OUTLINED_FUNCTION_31_1();
  v135 = v9[-1].Description;
  v136 = v9;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_6_1();
  v129 = v11;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v12);
  v131 = (char *)&v126 - v13;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_61();
  v130 = v15;
  v16 = OUTLINED_FUNCTION_123();
  v17 = *(void (**)(_QWORD))(v16 - 8);
  v144 = v16;
  v145 = v17;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_6_1();
  v147 = (char *)v19;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v20);
  v146 = (uint64_t)&v126 - v21;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)&v126 - v23;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v25);
  OUTLINED_FUNCTION_61();
  v137 = v26;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for StorableValue?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v27);
  OUTLINED_FUNCTION_22_1();
  v30 = v28 - v29;
  v32 = MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v126 - v33;
  MEMORY[0x1E0C80A78](v32);
  OUTLINED_FUNCTION_61();
  v140 = v35;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Binding?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v36);
  OUTLINED_FUNCTION_114();
  v39 = v38 - v37;
  v40 = type metadata accessor for Binding();
  v41 = (void (**)(uint64_t, ValueMetadata *))v40[-1].Description;
  MEMORY[0x1E0C80A78](v40);
  OUTLINED_FUNCTION_6_1();
  v142 = v42;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v43);
  OUTLINED_FUNCTION_61();
  v138 = a1;
  v139 = v44;
  v46 = SQLExpression.expressionString.getter() == 63 && v45 == 0xE100000000000000;
  v141 = v41;
  if (v46)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    v48 = SQLExpression.bindings.getter();
    specialized Collection.first.getter(v48, (uint64_t (*)(_QWORD))type metadata accessor for Binding, v39);
    OUTLINED_FUNCTION_24();
    if (__swift_getEnumTagSinglePayload(v39, 1, (uint64_t)v40) == 1)
    {
      outlined destroy of UUID?(v39, (uint64_t *)&demangling cache variable for type metadata for Binding?);
      goto LABEL_10;
    }
    v127 = v4;
    v66 = v139;
    ((void (*)(uint64_t, uint64_t, ValueMetadata *))v41[4])(v139, v39, v40);
    Binding.name.getter();
    v67 = String.lowercased()();
    OUTLINED_FUNCTION_54();
    OUTLINED_FUNCTION_156();
    v68 = v140;
    specialized Dictionary.subscript.getter(v143, (uint64_t)v140);
    OUTLINED_FUNCTION_64();
    outlined init with copy of UUID?((uint64_t)v68, (uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for StorableValue?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v144) == 1)
    {
      outlined destroy of UUID?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for StorableValue?);
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      OUTLINED_FUNCTION_13_0();
      *(Swift::String *)v69 = v67;
      *(_BYTE *)(v69 + 64) = 2;
      OUTLINED_FUNCTION_35_1();
      v70 = OUTLINED_FUNCTION_107();
      outlined destroy of UUID?(v70, v71);
      v72 = v41[1];
      v73 = v66;
LABEL_44:
      v72(v73, v40);
      goto LABEL_45;
    }
    OUTLINED_FUNCTION_64();
    v74 = v137;
    outlined init with take of StorableValue((uint64_t)v34, v137);
    v75 = v130;
    StorableValue.dataType.getter();
    v76 = v131;
    SQLExpression.returnType.getter(v131);
    LODWORD(v146) = OUTLINED_FUNCTION_68_1();
    v78 = v135;
    v77 = v136;
    v79 = (void (*)(_QWORD))v135[1];
    ((void (*)(_BYTE *, ValueMetadata *))v79)(v76, v136);
    v80 = OUTLINED_FUNCTION_13_3();
    v145 = v79;
    v79(v80);
    v147 = v24;
    outlined init with copy of SQLExpressionEvaluatorError(v74, (uint64_t)v24, type metadata accessor for StorableValue);
    v81 = (void (*)(_QWORD))Description[2];
    v82 = v132;
    v83 = OUTLINED_FUNCTION_70_1();
    v84 = v127;
    v81(v83);
    if ((v146 & 1) != 0)
    {
      v85 = OUTLINED_FUNCTION_70_1();
      v87 = v86(v85);
      OUTLINED_FUNCTION_58_2(v87, type metadata accessor for StorableValue);
      v88 = v140;
LABEL_28:
      outlined destroy of UUID?((uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for StorableValue?);
      v141[1](v139, v40);
      outlined init with take of StorableValue(v137, (uint64_t)v133);
LABEL_45:
      OUTLINED_FUNCTION_9();
      return;
    }
    v105 = v84;
    StorableValue.dataType.getter();
    v146 = v78[13];
    ((void (*)(_BYTE *, uint64_t, ValueMetadata *))v146)(v76, 2, v77);
    v106 = OUTLINED_FUNCTION_68_1();
    v107 = v145;
    ((void (*)(_BYTE *, ValueMetadata *))v145)(v76, v77);
    v108 = OUTLINED_FUNCTION_13_3();
    v107(v108);
    ((void (*)(uint64_t, uint64_t, ValueMetadata *))v81)(v128, v82, v105);
    v109 = (uint64_t)v77;
    if ((v106 & 1) != 0)
    {
      SQLExpression.returnType.getter(v75);
      ((void (*)(_BYTE *, uint64_t, ValueMetadata *))v146)(v76, 5, v77);
      v110 = specialized == infix<A>(_:_:)((uint64_t)v75, (uint64_t)v76);
      v111 = (void (*)(_QWORD, _QWORD))v145;
      ((void (*)(_BYTE *, uint64_t))v145)(v76, v109);
      v111(v75, v109);
      v112 = (void (*)(_QWORD))Description[1];
      v113 = OUTLINED_FUNCTION_46_1();
      v112(v113);
      v114 = OUTLINED_FUNCTION_70_1();
      v115 = ((uint64_t (*)(uint64_t))v112)(v114);
      OUTLINED_FUNCTION_58_2(v115, type metadata accessor for StorableValue);
      v88 = v140;
      if ((v110 & 1) != 0)
        goto LABEL_28;
    }
    else
    {
      v116 = (void (*)(_QWORD))Description[1];
      v117 = OUTLINED_FUNCTION_46_1();
      v116(v117);
      v118 = OUTLINED_FUNCTION_70_1();
      v119 = ((uint64_t (*)(uint64_t))v116)(v118);
      OUTLINED_FUNCTION_58_2(v119, type metadata accessor for StorableValue);
      v88 = v140;
    }
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    v120 = OUTLINED_FUNCTION_13_0();
    v121[3] = v109;
    OUTLINED_FUNCTION_57_1(v120, v121);
    v122 = v137;
    StorableValue.dataType.getter();
    OUTLINED_FUNCTION_48_0();
    swift_willThrow();
    outlined destroy of StorableValue(v122, type metadata accessor for StorableValue);
    outlined destroy of UUID?((uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for StorableValue?);
    v72 = v141[1];
    v73 = v139;
    goto LABEL_44;
  }
  v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  OUTLINED_FUNCTION_24();
  if ((v47 & 1) != 0)
    goto LABEL_8;
LABEL_10:
  v49 = SQLExpression.bindings.getter();
  v50 = *(_QWORD *)(v49 + 16);
  if (v50)
  {
    v51 = (*((unsigned __int8 *)v41 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v41 + 80);
    v137 = v49;
    v52 = v49 + v51;
    v53 = v41[2];
    v139 = (uint64_t)v41[9];
    v140 = v53;
    v54 = MEMORY[0x1E0DEE9D8];
    v55 = v142;
    while (1)
    {
      ((void (*)(uint64_t, unint64_t, ValueMetadata *))v140)(v55, v52, v40);
      Binding.name.getter();
      v56 = String.lowercased()();
      OUTLINED_FUNCTION_24();
      v57 = v143;
      if (!*(_QWORD *)(v143 + 16))
        break;
      swift_bridgeObjectRetain();
      v58 = specialized __RawDictionaryStorage.find<A>(_:)();
      if ((v59 & 1) != 0)
      {
        outlined init with copy of SQLExpressionEvaluatorError(*(_QWORD *)(v57 + 56) + *((_QWORD *)v145 + 9) * v58, v30, type metadata accessor for StorableValue);
        v60 = 0;
      }
      else
      {
        v60 = 1;
      }
      v61 = v144;
      __swift_storeEnumTagSinglePayload(v30, v60, 1, v144);
      swift_bridgeObjectRelease();
      EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v30, 1, v61);
      v55 = v142;
      if (EnumTagSinglePayload == 1)
        goto LABEL_30;
      swift_bridgeObjectRelease();
      v63 = v146;
      outlined init with take of StorableValue(v30, v146);
      outlined init with copy of SQLExpressionEvaluatorError(v63, (uint64_t)v147, type metadata accessor for StorableValue);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v54 = OUTLINED_FUNCTION_62_2();
      v64 = *(_QWORD *)(v54 + 16);
      v65 = v141;
      if (v64 >= *(_QWORD *)(v54 + 24) >> 1)
        v54 = OUTLINED_FUNCTION_62_2();
      *(_QWORD *)(v54 + 16) = v64 + 1;
      outlined init with take of StorableValue((uint64_t)v147, v54+ ((*((unsigned __int8 *)v145 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v145 + 80))+ *((_QWORD *)v145 + 9) * v64);
      outlined destroy of StorableValue(v146, type metadata accessor for StorableValue);
      v65[1](v55, v40);
      v52 += v139;
      if (!--v50)
      {
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
    }
    __swift_storeEnumTagSinglePayload(v30, 1, 1, v144);
LABEL_30:
    OUTLINED_FUNCTION_23_0();
    swift_bridgeObjectRelease();
    outlined destroy of UUID?(v30, (uint64_t *)&demangling cache variable for type metadata for StorableValue?);
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    OUTLINED_FUNCTION_13_0();
    *(Swift::String *)v89 = v56;
    *(_BYTE *)(v89 + 64) = 2;
    OUTLINED_FUNCTION_35_1();
    v141[1](v55, v40);
    goto LABEL_45;
  }
  swift_bridgeObjectRelease();
  v54 = MEMORY[0x1E0DEE9D8];
LABEL_31:
  v148 = 0x205443454C4553;
  v149 = 0xE700000000000000;
  v154._countAndFlagsBits = SQLExpression.expressionString.getter();
  OUTLINED_FUNCTION_52_1(v154);
  OUTLINED_FUNCTION_64();
  swift_bridgeObjectRetain();
  v90._countAndFlagsBits = OUTLINED_FUNCTION_107();
  v91 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v90, (Swift::OpaquePointer)v54);
  if (v92)
  {
    OUTLINED_FUNCTION_54();
    swift_bridgeObjectRelease_n();
    goto LABEL_45;
  }
  v93 = v91;
  OUTLINED_FUNCTION_23_0();
  if (v93 && *(_QWORD *)(v93 + 16) == 1)
  {
    OUTLINED_FUNCTION_54();
    v94 = specialized Dictionary.startIndex.getter(v93);
    if ((v96 & 1) == 0)
    {
      if (*(_DWORD *)(v93 + 36) == v95)
      {
        if (v94 != 1 << *(_BYTE *)(v93 + 32))
        {
          v97 = OUTLINED_FUNCTION_59_0();
          specialized Dictionary.subscript.getter(v97, v98, v99, v100);
          v101 = v150;
          v102 = v151;
          v103 = v152;
          swift_bridgeObjectRetain();
          outlined copy of DatabaseValue(v101, v102, v103);
          OUTLINED_FUNCTION_24();
          OUTLINED_FUNCTION_44_1();
          OUTLINED_FUNCTION_24();
          OUTLINED_FUNCTION_23_0();
          OUTLINED_FUNCTION_64();
          v104 = v129;
          SQLExpression.returnType.getter(v129);
          static StorableValue.fromDatabaseValue(_:dataType:)(v101, v102, v103, (uint64_t)v104, v133);
          ((void (*)(_BYTE *, ValueMetadata *))v135[1])(v104, v136);
          OUTLINED_FUNCTION_44_1();
          goto LABEL_45;
        }
        goto LABEL_48;
      }
      __break(1u);
    }
    __break(1u);
LABEL_48:
    OUTLINED_FUNCTION_64();
    __break(1u);
  }
  v148 = 0;
  v149 = 0xE000000000000000;
  _StringGuts.grow(_:)(62);
  OUTLINED_FUNCTION_5_1(0xD000000000000025, (uint64_t)"Unexpected number of columns in from ");
  v123._countAndFlagsBits = OUTLINED_FUNCTION_107();
  String.append(_:)(v123);
  OUTLINED_FUNCTION_71_1();
  v124._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v124);
  if (v93)
  {
    v125 = *(_QWORD *)(v93 + 16);
    OUTLINED_FUNCTION_64();
  }
  else
  {
    v125 = 0;
  }
  v153 = v125;
  v155._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  OUTLINED_FUNCTION_52_1(v155);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_9_4();
  __break(1u);
}

uint64_t OUTLINED_FUNCTION_25()
{
  uint64_t v0;

  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_BYTE *)(v0 + 64) = 3;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_12@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return 0;
}

void OUTLINED_FUNCTION_25_1()
{
  uint64_t v0;

  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v0, 0);
}

uint64_t OUTLINED_FUNCTION_11(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1 + *(int *)(v1 + 36), v2, v3);
}

uint64_t OUTLINED_FUNCTION_11_2()
{
  uint64_t v0;
  char v1;
  unint64_t v2;

  return outlined consume of DatabaseValue(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_11_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 384) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_127()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_18_0()
{
  return swift_unknownObjectRelease();
}

void OUTLINED_FUNCTION_18_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_18_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_18_4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

ValueMetadata *type metadata accessor for SQLExpression()
{
  return &type metadata for SQLExpression;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for Binding()
{
  return &type metadata for Binding;
}

uint64_t OUTLINED_FUNCTION_19@<X0>(uint64_t (*a1)(_QWORD, _QWORD)@<X8>)
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 - 72), *(_QWORD *)(v1 - 128));
}

uint64_t OUTLINED_FUNCTION_19_0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 280) = result;
  *(_QWORD *)(v2 - 272) = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_19_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_19_2()
{
  return Dictionary.init(dictionaryLiteral:)();
}

void OUTLINED_FUNCTION_19_3()
{
  uint64_t v0;

  specialized ContiguousArray.reserveCapacity(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_19_5(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void StorableValue.dataType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;

  type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v0);
  OUTLINED_FUNCTION_114();
  v1 = OUTLINED_FUNCTION_157();
  outlined init with copy of StorableValue(v1, v2, v3);
  v4 = (char *)sub_18D81FF84 + 4 * byte_18DC0BC60[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_18D81FF84()
{
  uint64_t v0;
  void (*v1)(uint64_t, _QWORD);

  type metadata accessor for SQLDataType();
  v0 = OUTLINED_FUNCTION_167();
  v1(v0, 0);
  OUTLINED_FUNCTION_1_6();
}

uint64_t *OUTLINED_FUNCTION_63_1(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(a2 + 56) = *(_QWORD *)(v2 - 72);
  return __swift_allocate_boxed_opaque_existential_0(a1);
}

uint64_t OUTLINED_FUNCTION_63_4@<X0>(uint64_t a1@<X8>)
{
  int v1;

  *(_DWORD *)(a1 - 256) = v1;
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t OUTLINED_FUNCTION_85()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 88) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_85_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)(v5 - 112) = 0u;
  *(_OWORD *)(v5 - 96) = 0u;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v1 + *(int *)(a1 + 24), v2);
}

void OUTLINED_FUNCTION_85_2(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t SQLExpression.expressionString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Binding.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

Swift::OpaquePointer_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLExpressionEvaluator.execute(sql:bindingValues:)(Swift::String sql, Swift::OpaquePointer bindingValues)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t *v6;
  char v7;
  char v8;
  sqlite3 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  Swift::Bool v18;
  sqlite3_stmt *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  sqlite3_stmt *v26[2];
  Swift::OpaquePointer_optional result;

  object = sql._object;
  countAndFlagsBits = sql._countAndFlagsBits;
  v26[1] = *(sqlite3_stmt **)MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)(v2 + 32);
  if (!*(_QWORD *)(*(_QWORD *)(v2 + 32) + 16)
    || (swift_bridgeObjectRetain(),
        OUTLINED_FUNCTION_13_3(),
        specialized __RawDictionaryStorage.find<A>(_:)(),
        v8 = v7,
        OUTLINED_FUNCTION_24(),
        (v8 & 1) == 0))
  {
    v9 = *(sqlite3 **)(v2 + 24);
    v26[0] = 0;
    OUTLINED_FUNCTION_13_3();
    v10 = String.utf8CString.getter();
    v13 = OUTLINED_FUNCTION_12_4(v9, (const char *)(v10 + 32), v11, v12, v26);
    swift_release();
    if ((_DWORD)v13 || (v19 = v26[0]) == 0)
    {
      v14 = OUTLINED_FUNCTION_15_2(v13);
      swift_getErrorValue();
      OUTLINED_FUNCTION_53_1();
      OUTLINED_FUNCTION_66_1();
      OUTLINED_FUNCTION_1_12();
      OUTLINED_FUNCTION_6_5();
      v15 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      OUTLINED_FUNCTION_51_1();
      lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
      OUTLINED_FUNCTION_13_0();
      *(_QWORD *)v16 = countAndFlagsBits;
      *(_QWORD *)(v16 + 8) = object;
      *(_QWORD *)(v16 + 16) = v15;
      *(Swift::OpaquePointer *)(v16 + 24) = bindingValues;
      *(_BYTE *)(v16 + 32) = 2;
      OUTLINED_FUNCTION_156();
      v17 = (void *)swift_willThrow();
      goto LABEL_10;
    }
    OUTLINED_FUNCTION_156();
    specialized Dictionary._Variant.setValue(_:forKey:)((uint64_t)v19, countAndFlagsBits, (uint64_t)object);
    OUTLINED_FUNCTION_64();
  }
  v20 = *v6;
  OUTLINED_FUNCTION_156();
  v21 = OUTLINED_FUNCTION_13_3();
  specialized Dictionary.subscript.getter(v21, v22, v20);
  v24 = v23;
  OUTLINED_FUNCTION_64();
  if (v24)
  {
    v17 = (void *)SQLExpressionEvaluator.execute(stmt:bindingValues:)(v24, (uint64_t)bindingValues._rawValue);
  }
  else
  {
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = OUTLINED_FUNCTION_13_3();
    String.append(_:)(v25);
    v17 = (void *)OUTLINED_FUNCTION_9_4();
    __break(1u);
  }
LABEL_10:
  result.value._rawValue = v17;
  result.is_nil = v18;
  return result;
}

uint64_t OUTLINED_FUNCTION_33_0()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_33_1()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_33_2(uint64_t a1)
{
  unint64_t v1;

  v1 = 0xE200000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_33_3()
{
  uint64_t v0;

  return v0;
}

void static StorableValue.fromDatabaseValue(_:dataType:)(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  void (*v20)(_BYTE *, uint64_t, ValueMetadata *);
  void (*v21)(uint64_t *, uint64_t, ValueMetadata *);
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  int v24;
  ValueMetadata *v25;
  int v26;
  char v27;
  uint64_t *v28;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  unint64_t v44;
  char v45;
  ValueMetadata *v46;
  uint64_t *boxed_opaque_existential_0;
  ValueMetadata *v48;
  uint64_t *v49;
  uint64_t v50;
  ValueMetadata *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  _BYTE v57[48];
  unint64_t v58;
  void (*v59)(uint64_t *, uint64_t, ValueMetadata *);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t *v64;
  ValueMetadata *v65;

  v64 = a5;
  v63 = a3;
  v9 = a3;
  v10 = type metadata accessor for UUID();
  v61 = *(_QWORD *)(v10 - 8);
  v62 = v10;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_8();
  v60 = v12;
  v65 = OUTLINED_FUNCTION_31_1();
  OUTLINED_FUNCTION_25_0();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_22_1();
  v16 = (_BYTE *)(v14 - v15);
  MEMORY[0x1E0C80A78](v17);
  v19 = &v57[-v18];
  v20 = *(void (**)(_BYTE *, uint64_t, ValueMetadata *))(v5 + 16);
  if (v9 == 4 && !(a2 | a1))
  {
    v21 = *(void (**)(uint64_t *, uint64_t, ValueMetadata *))(v5 + 16);
    v20(&v57[-v18], a4, v65);
    v22 = OUTLINED_FUNCTION_13_3();
    v24 = v23(v22);
    if (!v24 || v24 == 1)
    {
      OUTLINED_FUNCTION_54_1();
LABEL_8:
      OUTLINED_FUNCTION_123();
      OUTLINED_FUNCTION_30_1();
LABEL_47:
      swift_storeEnumTagMultiPayload();
      goto LABEL_48;
    }
    if (v24 == 2)
    {
LABEL_18:
      OUTLINED_FUNCTION_123();
      v32 = v64;
      *v64 = 0;
      v32[1] = 0;
      goto LABEL_47;
    }
    if (v24 != 3)
    {
      if (v24 == 4)
      {
        *(_OWORD *)v64 = xmmword_18DC0C920;
        OUTLINED_FUNCTION_123();
        goto LABEL_47;
      }
      if (v24 != 5)
      {
        if (v24 == 6)
        {
          __swift_storeEnumTagSinglePayload((uint64_t)v64, 1, 1, v62);
          OUTLINED_FUNCTION_123();
          OUTLINED_FUNCTION_30_1();
        }
        else
        {
          if (v24 != 7)
          {
            lazy protocol witness table accessor for type SQLError and conformance SQLError();
            v50 = OUTLINED_FUNCTION_13_0();
            v51 = v65;
            v52[3] = (uint64_t)v65;
            v53 = OUTLINED_FUNCTION_57_1(v50, v52);
            v21(v53, a4, v51);
            OUTLINED_FUNCTION_48_0();
            swift_willThrow();
            (*(void (**)(_BYTE *, ValueMetadata *))(v5 + 8))(v19, v51);
            goto LABEL_48;
          }
          OUTLINED_FUNCTION_123();
        }
        goto LABEL_47;
      }
      goto LABEL_18;
    }
    v34 = type metadata accessor for Date();
    v35 = v64;
    v36 = 1;
LABEL_24:
    __swift_storeEnumTagSinglePayload((uint64_t)v35, v36, 1, v34);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_30_1();
    goto LABEL_47;
  }
  v25 = v65;
  v59 = *(void (**)(uint64_t *, uint64_t, ValueMetadata *))(v5 + 16);
  v20(v16, a4, v65);
  v26 = (*(uint64_t (**)(_BYTE *, ValueMetadata *))(v5 + 88))(v16, v25);
  if (!v26)
  {
    v27 = v63;
    if (!(_BYTE)v63)
    {
      v28 = v64;
      *v64 = a1;
      *((_BYTE *)v28 + 8) = 0;
      goto LABEL_8;
    }
    goto LABEL_39;
  }
  v29 = v26;
  switch(v26)
  {
    case 1:
      v27 = v63;
      if (v63 == 1)
      {
        v30 = v64;
        *v64 = a1;
        *((_BYTE *)v30 + 8) = 0;
        goto LABEL_8;
      }
      goto LABEL_39;
    case 2:
      v27 = v63;
      if (v63 == 2)
      {
LABEL_16:
        v31 = v64;
        *v64 = a1;
        v31[1] = a2;
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_30_1();
        swift_storeEnumTagMultiPayload();
        swift_bridgeObjectRetain();
        goto LABEL_48;
      }
LABEL_39:
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      OUTLINED_FUNCTION_13_0();
      v39 = v38;
      *(_QWORD *)(v38 + 24) = &type metadata for DatabaseValue;
      *(_QWORD *)v38 = a1;
      *(_QWORD *)(v38 + 8) = a2;
      *(_BYTE *)(v38 + 16) = v27;
      v40 = OUTLINED_FUNCTION_63_1((uint64_t *)(v38 + 32), v38);
      OUTLINED_FUNCTION_42_1((uint64_t)v40);
      *(_BYTE *)(v39 + 64) = 3;
      outlined copy of DatabaseValue(a1, a2, v27);
LABEL_40:
      swift_willThrow();
      goto LABEL_48;
    case 3:
      v27 = v63;
      if (v63 == 1)
      {
        v33 = v64;
        Date.init(timeIntervalSince1970:)();
        v34 = type metadata accessor for Date();
        v35 = v33;
        v36 = 0;
        goto LABEL_24;
      }
      goto LABEL_39;
    case 4:
      v27 = v63;
      if (v63 == 3)
      {
        v37 = v64;
        *v64 = a1;
        v37[1] = a2;
        OUTLINED_FUNCTION_123();
        swift_storeEnumTagMultiPayload();
        OUTLINED_FUNCTION_60_0();
        goto LABEL_48;
      }
      goto LABEL_39;
    case 5:
      v27 = v63;
      if (v63 == 2)
        goto LABEL_16;
      goto LABEL_39;
    case 6:
      v27 = v63;
      if (v63 == 3)
      {
        OUTLINED_FUNCTION_60_0();
        if (Data.count.getter() == 16)
        {
          v65 = (ValueMetadata *)a1;
          __asm { BR              X10 }
        }
        lazy protocol witness table accessor for type SQLError and conformance SQLError();
        OUTLINED_FUNCTION_13_0();
        v55 = v54;
        *(_QWORD *)(v54 + 24) = &type metadata for DatabaseValue;
        *(_QWORD *)v54 = a1;
        *(_QWORD *)(v54 + 8) = a2;
        *(_BYTE *)(v54 + 16) = 3;
        v56 = OUTLINED_FUNCTION_63_1((uint64_t *)(v54 + 32), v54);
        OUTLINED_FUNCTION_42_1((uint64_t)v56);
        *(_BYTE *)(v55 + 64) = 3;
        goto LABEL_40;
      }
      goto LABEL_39;
  }
  v58 = a2;
  lazy protocol witness table accessor for type SQLError and conformance SQLError();
  OUTLINED_FUNCTION_13_0();
  v42 = v41;
  v43 = (_OWORD *)(v41 + 32);
  if (v29 == 7)
  {
    *(_QWORD *)(v41 + 24) = &type metadata for DatabaseValue;
    v44 = v58;
    *(_QWORD *)v41 = a1;
    *(_QWORD *)(v41 + 8) = v44;
    v45 = v63;
    *(_BYTE *)(v41 + 16) = v63;
    v46 = v65;
    *(_QWORD *)(v41 + 56) = v65;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v41 + 32));
    v59(boxed_opaque_existential_0, a4, v46);
    *(_BYTE *)(v42 + 64) = 3;
    outlined copy of DatabaseValue(a1, v44, v45);
    swift_willThrow();
  }
  else
  {
    v48 = v65;
    *(_QWORD *)(v41 + 24) = v65;
    v49 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)v41);
    v59(v49, a4, v48);
    *v43 = 0u;
    v43[1] = 0u;
    *(_BYTE *)(v42 + 64) = 3;
    swift_willThrow();
    (*(void (**)(_BYTE *, ValueMetadata *))(v5 + 8))(v16, v48);
  }
LABEL_48:
  OUTLINED_FUNCTION_9();
}

uint64_t OUTLINED_FUNCTION_44(uint64_t a1)
{
  uint64_t v1;

  return a1 + *(int *)(v1 + 36);
}

uint64_t OUTLINED_FUNCTION_44_0()
{
  return swift_arrayInitWithTakeFrontToBack();
}

uint64_t OUTLINED_FUNCTION_44_1()
{
  uint64_t v0;
  unint64_t v1;
  char v2;

  return outlined consume of DatabaseValue(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_44_2()
{
  unint64_t v0;
  uint64_t v1;

  outlined consume of Data?(v1, v0);
  return outlined consume of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_44_3()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_20()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void OUTLINED_FUNCTION_20_0(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_20_1()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_20_2()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_39(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 88) + 16))(a1 + *(int *)(v1 + 36), v3, v2);
}

void OUTLINED_FUNCTION_39_1(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  outlined init with copy of Date?(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_39_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_23()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_23_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_23_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_23_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 216) = (char *)&a9 - v9;
  return type metadata accessor for StorableValue(0);
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 16))
    specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_1();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v10;

  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_107_0();
  a4(a1, a2, a3);
  *v4 = v10;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_38()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)(v1 + *(int *)(v0 + 44));
  *v2 = 7235949;
  v2[1] = 0xE300000000000000;
  return 0;
}

void OUTLINED_FUNCTION_38_4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  uint64_t result;
  char v19;
  _QWORD *v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)();
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, OpaquePointer>);
  result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15);
  if ((result & 1) == 0)
    goto LABEL_5;
  result = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v16 = result;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    *(_QWORD *)(v20[7] + 8 * v16) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;

  v5 = v4;
  v10 = *v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)();
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  OUTLINED_FUNCTION_139_0();
  v18 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = *(_QWORD *)(v20 + 56);
    v22 = v21 + *(_QWORD *)(*(_QWORD *)(OUTLINED_FUNCTION_123() - 8) + 72) * v16;
    return outlined assign with take of StorableValue(a1, v22);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)();
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, DatabaseWithAccess>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = v20[7];
    result = swift_release();
    *(_QWORD *)(v21 + 8 * v16) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

void outlined init with copy of UUID?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_110(a1, a2, a3);
  OUTLINED_FUNCTION_24_0(v3);
  OUTLINED_FUNCTION_1();
}

uint64_t SQLExpression.bindings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_156()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_34_0()
{
  return OSSignposter.logHandle.getter();
}

uint64_t OUTLINED_FUNCTION_34_1()
{
  return swift_deallocPartialClassInstance();
}

void OUTLINED_FUNCTION_34_2(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;

  *(double *)(v2 + a1) = a2;
}

uint64_t OUTLINED_FUNCTION_34_3@<X0>(uint64_t a1@<X8>)
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)(a1 + 16));
}

uint64_t OUTLINED_FUNCTION_34_4()
{
  return TimeZone.init(secondsFromGMT:)();
}

uint64_t OUTLINED_FUNCTION_30()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_30_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_30_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_30_2()
{
  return swift_unknownObjectRelease();
}

void OUTLINED_FUNCTION_30_3()
{
  Hasher._combine(_:)(1u);
}

uint64_t OUTLINED_FUNCTION_30_4(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(*(_QWORD *)(v1 - 320), a1);
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for SQLDataType, (unint64_t *)&lazy protocol witness table cache variable for type SQLDataType and conformance SQLDataType, (uint64_t)&protocol conformance descriptor for SQLDataType);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for SQLRawDataType, &lazy protocol witness table cache variable for type SQLRawDataType and conformance SQLRawDataType, (uint64_t)&protocol conformance descriptor for SQLRawDataType);
}

uint64_t storeEnumTagSinglePayload for Binding(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Binding(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t type metadata accessor for QueryPlannerMetadata(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for QueryPlannerMetadata);
}

uint64_t recordAsSQL #1 (schema:changeRecord:) in DBViewWriter.sendDatabaseUpdate(changeRecords:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  ValueMetadata *v25;
  void (**Description)(char *, char *, ValueMetadata *);
  void (*v27)(char *, char *, ValueMetadata *);
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  v5 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  OUTLINED_FUNCTION_6_1();
  v35 = v6;
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (_QWORD *)((char *)v33 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a3 + 16) == v11)
  {
    MEMORY[0x1E0C80A78](v8);
    LOBYTE(v33[-4]) = v12;
    v33[-3] = a3;
    v33[-2] = a1;
    return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS3key_14BiomeSQLParser11SQLDataTypeO5valuetG_SSAF_0E7Streams13StorableValueOAJtsAE_pTg506_sSS14e11SQLParser11gh15OSS0A7Streams13kl3Os5C51_pIggnorzo_SS3key_AC5valuetSSAH_AfItsAG_pIegnrzr_TRSSAISSANsAE_pIggnorzo_Tf1cn_n(a1, (uint64_t (*)(char *, _QWORD, _QWORD, char *))partial apply for closure #2 in recordAsSQL #1 (schema:changeRecord:) in DBViewWriter.sendDatabaseUpdate(changeRecords:), (uint64_t)&v33[-6]);
  }
  else
  {
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    v14 = OUTLINED_FUNCTION_13_0();
    v16 = v15;
    v17 = MEMORY[0x1E0DEE9D8];
    if (v11)
    {
      v33[0] = v15;
      v33[1] = v14;
      v33[2] = a3;
      v37 = MEMORY[0x1E0DEE9D8];
      OUTLINED_FUNCTION_25_1();
      v18 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      v34 = *(_QWORD *)(v5 + 72);
      do
      {
        outlined init with copy of Date?(v18, (uint64_t)v10, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        v19 = v35;
        v20 = *(int *)(v36 + 48);
        v21 = (char *)v35 + v20;
        v22 = (char *)v10 + v20;
        v24 = *v10;
        v23 = v10[1];
        *v35 = *v10;
        v19[1] = v23;
        v25 = type metadata accessor for SQLDataType();
        Description = (void (**)(char *, char *, ValueMetadata *))v25[-1].Description;
        Description[2](v21, v22, v25);
        v27 = Description[1];
        swift_bridgeObjectRetain();
        ((void (*)(char *, ValueMetadata *))v27)(v21, v25);
        outlined destroy of (key: String, value: SQLDataType)((uint64_t)v10, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        v17 = v37;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1);
          v17 = v37;
        }
        v29 = *(_QWORD *)(v17 + 16);
        v28 = *(_QWORD *)(v17 + 24);
        if (v29 >= v28 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
          v17 = v37;
        }
        *(_QWORD *)(v17 + 16) = v29 + 1;
        v30 = v17 + 16 * v29;
        *(_QWORD *)(v30 + 32) = v24;
        *(_QWORD *)(v30 + 40) = v23;
        v18 += v34;
        --v11;
      }
      while (v11);
      v16 = v33[0];
    }
    v31 = OUTLINED_FUNCTION_48_2();
    v32 = specialized _copyCollectionToContiguousArray<A>(_:)(v31);
    OUTLINED_FUNCTION_106();
    *(_QWORD *)v16 = v17;
    *(_QWORD *)(v16 + 8) = v32;
    *(_BYTE *)(v16 + 64) = 7;
    return swift_willThrow();
  }
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  ValueMetadata *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, ValueMetadata *);
  ValueMetadata *v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  char v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  void (*v37)(char *, unint64_t, ValueMetadata *);
  char *v38;
  char *v39;
  void (*v40)(char *, ValueMetadata *);
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t result;
  _QWORD v47[2];
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  _QWORD *Description;
  _QWORD *v56;

  v4 = v3;
  v56 = a3;
  v7 = type metadata accessor for SQLDataType();
  Description = v7[-1].Description;
  v8 = MEMORY[0x1E0C80A78](v7);
  v49 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v48 = (char *)v47 - v11;
  MEMORY[0x1E0C80A78](v10);
  v54 = (char *)v47 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SQLDataType));
  v14 = MEMORY[0x1E0C80A78](v13);
  v17 = (_QWORD *)((char *)v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(_QWORD *)(a1 + 16);
  if (!v18)
    return swift_bridgeObjectRelease();
  v47[0] = a1;
  v47[1] = v4;
  v52 = (char *)v17 + *(int *)(v14 + 48);
  v19 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v50 = *(_QWORD *)(v15 + 72);
  swift_bridgeObjectRetain();
  v51 = v17;
  while (1)
  {
    v53 = v18;
    outlined init with copy of Date?(v19, (uint64_t)v17, &demangling cache variable for type metadata for (String, SQLDataType));
    v21 = *v17;
    v20 = v17[1];
    v22 = (void (*)(char *, char *, ValueMetadata *))Description[4];
    v23 = v7;
    v22(v54, v52, v7);
    v24 = *v56;
    v26 = specialized __RawDictionaryStorage.find<A>(_:)();
    v27 = *(_QWORD *)(v24 + 16);
    v28 = (v25 & 1) == 0;
    if (__OFADD__(v27, v28))
      break;
    v29 = v25;
    if (*(_QWORD *)(v24 + 24) >= v27 + v28)
    {
      if ((a2 & 1) != 0)
      {
        v30 = v56;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, SQLDataType>);
        v30 = v56;
        _NativeDictionary.copy()();
      }
    }
    else
    {
      v30 = v56;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
      v31 = specialized __RawDictionaryStorage.find<A>(_:)();
      if ((v29 & 1) != (v32 & 1))
        goto LABEL_20;
      v26 = v31;
    }
    v33 = (_QWORD *)*v30;
    if ((v29 & 1) != 0)
    {
      v34 = v33[7];
      v35 = Description;
      v36 = Description[9] * v26;
      v37 = (void (*)(char *, unint64_t, ValueMetadata *))Description[2];
      v38 = v49;
      v7 = v23;
      v37(v49, v34 + v36, v23);
      v39 = v48;
      v37(v48, (unint64_t)v38, v7);
      v40 = (void (*)(char *, ValueMetadata *))v35[1];
      v40(v38, v7);
      v40(v54, v7);
      swift_bridgeObjectRelease();
      ((void (*)(unint64_t, char *, ValueMetadata *))v35[5])(*(_QWORD *)(*v30 + 56) + v36, v39, v7);
    }
    else
    {
      v33[(v26 >> 6) + 8] |= 1 << v26;
      v41 = (_QWORD *)(v33[6] + 16 * v26);
      *v41 = v21;
      v41[1] = v20;
      v42 = v33[7] + Description[9] * v26;
      v7 = v23;
      v22((char *)v42, v54, v23);
      v43 = v33[2];
      v44 = __OFADD__(v43, 1);
      v45 = v43 + 1;
      if (v44)
        goto LABEL_19;
      v33[2] = v45;
    }
    v17 = v51;
    v19 += v50;
    a2 = 1;
    v18 = v53 - 1;
    if (v53 == 1)
      return swift_bridgeObjectRelease_n();
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

BiomeSQLParser::Schema __swiftcall Schema.init(tableName:columns:)(Swift::String tableName, Swift::OpaquePointer columns)
{
  uint64_t v2;
  BiomeSQLParser::Schema result;

  *(Swift::String *)v2 = tableName;
  *(Swift::OpaquePointer *)(v2 + 16) = columns;
  result.tableName = tableName;
  result.columns = columns;
  return result;
}

uint64_t outlined release of DBViewWriter(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

void outlined destroy of (key: String, value: SQLDataType)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  OUTLINED_FUNCTION_1();
}

uint64_t OUTLINED_FUNCTION_12_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_12_2()
{
  return 0;
}

void OUTLINED_FUNCTION_12_3()
{
  uint64_t v0;

}

uint64_t OUTLINED_FUNCTION_12_4(sqlite3 *a1, const char *a2, uint64_t a3, uint64_t a4, sqlite3_stmt **a5)
{
  return sqlite3_prepare_v3(a1, a2, -1, 1u, a5, 0);
}

uint64_t OUTLINED_FUNCTION_12_5()
{
  return Optional<A>.hashValue.getter();
}

void OUTLINED_FUNCTION_12_6(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 248) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
    return a2(v3 > 1);
  return result;
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(_QWORD, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v2;
  if ((result & 1) == 0)
    return a1(0, *(_QWORD *)(v2 + 16) + 1, 1);
  return result;
}

uint64_t static String._createEmpty(withInitialCapacity:)(Swift::Int a1)
{
  if (a1 < 16)
    return 0;
  _StringGuts.grow(_:)(a1);
  return 0;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = result + 1;
  v5 = v4 + 16 * result;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = a3;
  return result;
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(_QWORD, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(_QWORD, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if ((result & 1) == 0)
    return (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v1 + 16) + 1, 1);
  return result;
}

void OUTLINED_FUNCTION_14_2(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 240) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_14_3()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 192) + 88))(v0, *(_QWORD *)(v1 - 184));
}

uint64_t OUTLINED_FUNCTION_14_4()
{
  return swift_bridgeObjectRelease();
}

unint64_t OUTLINED_FUNCTION_14_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = v0;
  *(_QWORD *)(v2 - 96) = v1;
  return lazy protocol witness table accessor for type String and conformance String();
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  a3(0);
  lazy protocol witness table accessor for type UUID and conformance UUID(a4, a3, a5);
  OUTLINED_FUNCTION_308();
  OUTLINED_FUNCTION_308();
  if (v13 == v11 && v14 == v12)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_24();
  return v9 & 1;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SQLRawDataType()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_18D821B50 + 4 * byte_18DC2D266[*v0]))();
}

void sub_18D821B50(_QWORD *a1@<X8>)
{
  *a1 = 1279346002;
  a1[1] = 0xE400000000000000;
}

void sub_18D821B64(_QWORD *a1@<X8>)
{
  *a1 = 1415071060;
  a1[1] = 0xE400000000000000;
}

void sub_18D821B78(_QWORD *a1@<X8>)
{
  *a1 = 1112493122;
  a1[1] = 0xE400000000000000;
}

void sub_18D821B8C(_QWORD *a1@<X8>)
{
  *a1 = 1280070990;
  a1[1] = 0xE400000000000000;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SQLDataType()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_18D821BD0 + 4 * byte_18DC2D24A[*v0]))();
}

void sub_18D821BD0(_QWORD *a1@<X8>)
{
  *a1 = 0x656C62756F64;
  a1[1] = 0xE600000000000000;
}

void sub_18D821BE8(_QWORD *a1@<X8>)
{
  *a1 = 0x676E69727473;
  a1[1] = 0xE600000000000000;
}

void sub_18D821C00(_QWORD *a1@<X8>)
{
  *a1 = 1702125924;
  a1[1] = 0xE400000000000000;
}

void sub_18D821C14(_QWORD *a1@<X8>)
{
  *a1 = 1635017060;
  a1[1] = 0xE400000000000000;
}

void sub_18D821C28(_QWORD *a1@<X8>)
{
  *a1 = 1852797802;
  a1[1] = 0xE400000000000000;
}

void sub_18D821C3C(_QWORD *a1@<X8>)
{
  *a1 = 1684632949;
  a1[1] = 0xE400000000000000;
}

void sub_18D821C50(_QWORD *a1@<X8>)
{
  *a1 = 1819047278;
  a1[1] = 0xE400000000000000;
}

void OUTLINED_FUNCTION_229()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v0 + 8);
  *(_QWORD *)(v1 - 104) = *(_QWORD *)v0;
  *(_BYTE *)(v1 - 96) = v2;
}

uint64_t OUTLINED_FUNCTION_229_0@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 - 256);
}

void lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(MEMORY[0x193FED7A0](a3, v5), a1);
  }
  OUTLINED_FUNCTION_1();
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<String>, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ChangeRecord>, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = v4;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, char *), void (*a7)(uint64_t, uint64_t, char *))
{
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  char *v18;
  uint64_t v19;

  v10 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_11_1();
    if (v12 != v13)
    {
      OUTLINED_FUNCTION_46_0();
      if (v12)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_10_3();
    }
  }
  else
  {
    v11 = a2;
  }
  v14 = *(_QWORD *)(a4 + 16);
  if (v11 <= v14)
    v15 = *(_QWORD *)(a4 + 16);
  else
    v15 = v11;
  if (v15)
  {
    OUTLINED_FUNCTION_58_1(a1, a2, a3, a4, a5);
    v16 = (char *)OUTLINED_FUNCTION_40_0();
    v17 = _swift_stdlib_malloc_size(v16);
    OUTLINED_FUNCTION_83_0(v17);
  }
  else
  {
    v16 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v18 = v16 + 32;
  v19 = a4 + 32;
  if ((v10 & 1) != 0)
  {
    a6(v19, v14, v18);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    a7(v19, v14, v18);
  }
  OUTLINED_FUNCTION_100_0();
  OUTLINED_FUNCTION_1_8();
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_37_0();
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
      return swift_arrayInitWithCopy();
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_38_0();
  }
  result = OUTLINED_FUNCTION_9_3();
  __break(1u);
  return result;
}

{
  uint64_t result;

  if ((a2 & 0x8000000000000000) == 0 && (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3))
    return swift_arrayInitWithCopy();
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  BOOL v3;
  uint64_t result;

  if (a2 < 0 || (a3 + 40 * a2 > a1 ? (v3 = a1 + 40 * a2 > a3) : (v3 = 0), v3))
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Aggregation);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_61_1(uint64_t a1)
{
  unint64_t v1;

  return outlined consume of DatabaseValue(a1, v1, 3);
}

ValueMetadata *OUTLINED_FUNCTION_35()
{
  return type metadata accessor for MaterializedView();
}

BiomeSQLParser::SQLRawDataType __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLDataType.columnType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  ValueMetadata *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v9;
  uint64_t v10;
  ValueMetadata *v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;

  v2 = v0;
  v3 = type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_25_0();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_114();
  v7 = v6 - v5;
  OUTLINED_FUNCTION_47_1(v6 - v5);
  v8 = (*(uint64_t (**)(uint64_t, ValueMetadata *))(v1 + 88))(v7, v3);
  switch(v8)
  {
    case 0:
      goto LABEL_2;
    case 1:
      goto LABEL_7;
    case 2:
LABEL_5:
      v9 = &enum case for SQLRawDataType.TEXT(_:);
      goto LABEL_8;
    case 3:
LABEL_7:
      v9 = &enum case for SQLRawDataType.REAL(_:);
      goto LABEL_8;
    case 4:
      goto LABEL_12;
    case 5:
      goto LABEL_5;
    case 6:
LABEL_12:
      v9 = &enum case for SQLRawDataType.BLOB(_:);
      goto LABEL_8;
    case 7:
LABEL_2:
      v9 = &enum case for SQLRawDataType.INTEGER(_:);
LABEL_8:
      v10 = *v9;
      v11 = type metadata accessor for SQLRawDataType();
      return (*((unsigned __int8 (**)(uint64_t, uint64_t, ValueMetadata *))v11[-1].Description + 13))(v2, v10, v11);
  }
  lazy protocol witness table accessor for type SQLError and conformance SQLError();
  v13 = OUTLINED_FUNCTION_13_0();
  v15 = v14;
  v14[3] = (uint64_t)v3;
  v16 = OUTLINED_FUNCTION_57_1(v13, v14);
  OUTLINED_FUNCTION_47_1((uint64_t)v16);
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  *((_BYTE *)v15 + 64) = 3;
  swift_willThrow();
  return (*(unsigned __int8 (**)(uint64_t, ValueMetadata *))(v1 + 8))(v7, v3);
}

uint64_t OUTLINED_FUNCTION_43()
{
  return swift_arrayInitWithTakeBackToFront();
}

uint64_t OUTLINED_FUNCTION_29()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_29_0()
{
  return _StringGuts._slowWithCString<A>(_:)();
}

void OUTLINED_FUNCTION_29_1()
{
  specialized static Array._allocateUninitialized(_:)(0);
}

void OUTLINED_FUNCTION_29_2()
{
  uint64_t v0;
  unint64_t v1;

  *(_QWORD *)(v0 + 8 * (v1 >> 6) + 64) |= 1 << v1;
}

ValueMetadata *type metadata accessor for SQLRawDataType()
{
  return &type metadata for SQLRawDataType;
}

uint64_t OUTLINED_FUNCTION_35_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_35_1()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_35_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  v5 = (v4 + 16 + v1) & ~v4;
  v6 = (v4 + 16 + v2) & ~v4;
  __swift_getEnumTagSinglePayload(v5, 1, v3);
  return __swift_getEnumTagSinglePayload(v6, 1, v3);
}

uint64_t OUTLINED_FUNCTION_35_3()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_35_4()
{
  return type metadata accessor for Logger();
}

uint64_t specialized ContiguousArray.init()()
{
  return MEMORY[0x1E0DEE9D8];
}

void specialized ContiguousArray.reserveCapacity(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v5;

  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if ((_DWORD)isUniquelyReferenced_nonNull_native && a1 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    OUTLINED_FUNCTION_1_6();
  }
  else
  {
    if (*(_QWORD *)(v3 + 16) <= a1)
      v5 = a1;
    else
      v5 = *(_QWORD *)(v3 + 16);
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v5, 0);
  }
}

uint64_t static StorableValue.DataValueCodingKeys.== infix(_:_:)()
{
  return 1;
}

void specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  *(_QWORD *)(*v2 + 16) = a1 + 1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
  OUTLINED_FUNCTION_16_1(a2, v5+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * a1);
  OUTLINED_FUNCTION_1_6();
}

uint64_t SQLRawDataType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18D82228C + 4 * byte_18DC2D252[*v0]))(0x52454745544E49, 0xE700000000000000);
}

uint64_t sub_18D82228C()
{
  return 1279346002;
}

uint64_t sub_18D82229C()
{
  return 1415071060;
}

uint64_t sub_18D8222AC()
{
  return 1112493122;
}

uint64_t sub_18D8222BC()
{
  return 1280070990;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x193FED7A0](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t partial apply for closure #2 in recordAsSQL #1 (schema:changeRecord:) in DBViewWriter.sendDatabaseUpdate(changeRecords:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #2 in recordAsSQL #1 (schema:changeRecord:) in DBViewWriter.sendDatabaseUpdate(changeRecords:)(a1, a2, a3, a4, *(unsigned __int8 *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32));
}

uint64_t closure #2 in recordAsSQL #1 (schema:changeRecord:) in DBViewWriter.sendDatabaseUpdate(changeRecords:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  ValueMetadata *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  ValueMetadata *v23;
  char v24;
  void (**v25)(char *, _QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  ValueMetadata *v39;
  void (**v40)(char *, _QWORD);
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  void (**Description)(char *, _QWORD);
  ValueMetadata *v61;
  uint64_t v62;

  v57 = a7;
  v53 = a1;
  v54 = a4;
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  v9 = *(_QWORD *)(v59 - 8);
  v10 = MEMORY[0x1E0C80A78](v59);
  v58 = (uint64_t *)((char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v52 - v12;
  v14 = type metadata accessor for SQLDataType();
  Description = (void (**)(char *, _QWORD))v14[-1].Description;
  v61 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for StorableValue(0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a6 + 16) && (v20 = specialized __RawDictionaryStorage.find<A>(_:)(), (v21 & 1) != 0))
  {
    specialized Dictionary.subscript.getter((uint64_t)v19, v20, *(unsigned int *)(a6 + 36), 0, a6);
    swift_bridgeObjectRelease();
    StorableValue.dataType.getter();
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type SQLDataType and conformance SQLDataType, (uint64_t (*)(uint64_t))type metadata accessor for SQLDataType, (uint64_t)&protocol conformance descriptor for SQLDataType);
    v22 = v54;
    v23 = v61;
    v24 = dispatch thunk of static Equatable.== infix(_:_:)();
    v25 = Description;
    ((void (**)(char *, ValueMetadata *))Description)[1](v16, v23);
    if ((v24 & 1) != 0)
    {
      outlined init with take of StorableValue((uint64_t)v19, v53);
      swift_bridgeObjectRetain();
      return a2;
    }
    else
    {
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      swift_allocError();
      v47 = v46;
      v48 = v22;
      v49 = v46 + 4;
      v46[3] = v17;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v46);
      outlined init with copy of StorableValue((uint64_t)v19, (uint64_t)boxed_opaque_existential_0);
      v47[7] = (uint64_t)v23;
      v51 = __swift_allocate_boxed_opaque_existential_0(v49);
      ((void (*)(uint64_t *, uint64_t, ValueMetadata *))v25[2])(v51, v48, v23);
      *((_BYTE *)v47 + 64) = 3;
      swift_willThrow();
      return outlined destroy of StorableValue((uint64_t)v19);
    }
  }
  else
  {
    v55 = a6;
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    v27 = swift_allocError();
    v29 = v28;
    v30 = v57;
    v31 = *(_QWORD *)(v57 + 16);
    v32 = MEMORY[0x1E0DEE9D8];
    if (v31)
    {
      v54 = v28;
      v56 = v27;
      v62 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
      v33 = v30 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      v57 = *(_QWORD *)(v9 + 72);
      do
      {
        outlined init with copy of Date?(v33, (uint64_t)v13, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        v34 = v58;
        v35 = *(int *)(v59 + 48);
        v36 = (char *)v58 + v35;
        v37 = *(_QWORD *)v13;
        v38 = *((_QWORD *)v13 + 1);
        *v58 = *(_QWORD *)v13;
        v34[1] = v38;
        v40 = Description;
        v39 = v61;
        ((void (*)(char *, char *, ValueMetadata *))Description[2])(v36, &v13[v35], v61);
        swift_bridgeObjectRetain();
        ((void (**)(char *, ValueMetadata *))v40)[1](v36, v39);
        outlined destroy of (key: String, value: SQLDataType)((uint64_t)v13, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        v32 = v62;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v32 + 16) + 1, 1);
          v32 = v62;
        }
        v42 = *(_QWORD *)(v32 + 16);
        v41 = *(_QWORD *)(v32 + 24);
        if (v42 >= v41 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
          v32 = v62;
        }
        *(_QWORD *)(v32 + 16) = v42 + 1;
        v43 = v32 + 16 * v42;
        *(_QWORD *)(v43 + 32) = v37;
        *(_QWORD *)(v43 + 40) = v38;
        v33 += v57;
        --v31;
      }
      while (v31);
      v29 = v54;
    }
    v44 = swift_bridgeObjectRetain();
    v45 = specialized _copyCollectionToContiguousArray<A>(_:)(v44);
    swift_bridgeObjectRelease();
    *(_QWORD *)v29 = v32;
    *(_QWORD *)(v29 + 8) = v45;
    *(_BYTE *)(v29 + 64) = 7;
    return swift_willThrow();
  }
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_18D822840(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_18D8228D4 + 4 * byte_18DC2B980[a2]))(0x656C62756F64);
}

uint64_t sub_18D8228D4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656C62756F64 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  if ((a4 & 1) != 0)
    goto LABEL_10;
  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_13_1();
    if ((v10 & 1) != 0)
    {
      if (*(_DWORD *)(v9 + 36) == v8)
      {
        v11 = OUTLINED_FUNCTION_12_2();
        v12 = type metadata accessor for StorableValue(v11);
        outlined init with copy of StorableValue(v6 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * a2, v5);
        OUTLINED_FUNCTION_21_0();
        OUTLINED_FUNCTION_1_8();
        return;
      }
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
}

uint64_t outlined init with copy of StorableValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StorableValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SQLDataType(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  BOOL v8;
  uint64_t v9;
  _QWORD v10[5];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    goto LABEL_9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: SQLDataType)>);
  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType))
                 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  v7 = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    v8 = v7 - v5 == 0x8000000000000000 && v4 == -1;
    if (!v8)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(v7 - v5) / v4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
      OUTLINED_FUNCTION_20_3();
      specialized Sequence._copySequenceContents(initializing:)(v10, (uint64_t)v6 + v9, v1, a1);
      OUTLINED_FUNCTION_340();
      OUTLINED_FUNCTION_141();
      OUTLINED_FUNCTION_240();
      if (!v8)
        __break(1u);
LABEL_9:
      OUTLINED_FUNCTION_126_1();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

{
  uint64_t v1;
  _QWORD *v2;
  size_t v3;
  char v4;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v2 = (_QWORD *)swift_allocObject();
    v3 = _swift_stdlib_malloc_size(v2);
    v2[2] = v1;
    v2[3] = 2 * ((uint64_t)(v3 - 32) / 16);
    specialized Sequence._copySequenceContents(initializing:)();
    OUTLINED_FUNCTION_340();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_240();
    if (!v4)
      __break(1u);
  }
  OUTLINED_FUNCTION_126_1();
}

uint64_t OUTLINED_FUNCTION_188()
{
  uint64_t v0;

  return v0;
}

BOOL OUTLINED_FUNCTION_208_0@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  ValueMetadata *v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  v41 = *(_QWORD *)(v8 - 8);
  v42 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v34 - v13;
  v43 = a4;
  v17 = *(_QWORD *)(a4 + 64);
  v16 = a4 + 64;
  v15 = v17;
  v39 = v16;
  v18 = -1 << *(_BYTE *)(v16 - 32);
  if (-v18 < 64)
    v19 = ~(-1 << -(char)v18);
  else
    v19 = -1;
  v20 = v19 & v15;
  if (!a2)
  {
    v21 = 0;
    a3 = 0;
LABEL_39:
    v33 = v39;
    *a1 = v43;
    a1[1] = v33;
    a1[2] = ~v18;
    a1[3] = v21;
    a1[4] = v20;
    return a3;
  }
  if (!a3)
  {
    v21 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v36 = -1 << *(_BYTE *)(v16 - 32);
  v37 = a1;
  v21 = 0;
  v22 = 0;
  v38 = (unint64_t)(63 - v18) >> 6;
  v35 = v38 - 1;
  v40 = a3;
  if (!v20)
    goto LABEL_9;
LABEL_8:
  v23 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  v24 = v23 | (v21 << 6);
  while (1)
  {
    ++v22;
    v28 = *(_QWORD *)(v43 + 56);
    v29 = (uint64_t *)(*(_QWORD *)(v43 + 48) + 16 * v24);
    v30 = *v29;
    v31 = v29[1];
    v32 = type metadata accessor for SQLDataType();
    (*((void (**)(char *, unint64_t, ValueMetadata *))v32[-1].Description + 2))(&v11[*(int *)(v42 + 48)], v28 + *((_QWORD *)v32[-1].Description + 9) * v24, v32);
    *(_QWORD *)v11 = v30;
    *((_QWORD *)v11 + 1) = v31;
    outlined init with take of UUID?((uint64_t)v11, (uint64_t)v14, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
    outlined init with take of UUID?((uint64_t)v14, a2, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
    a3 = v40;
    if (v22 == v40)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    a2 += *(_QWORD *)(v41 + 72);
    result = swift_bridgeObjectRetain();
    if (v20)
      goto LABEL_8;
LABEL_9:
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v25 >= v38)
      goto LABEL_33;
    v26 = *(_QWORD *)(v39 + 8 * v25);
    if (!v26)
    {
      v21 += 2;
      if (v25 + 1 >= v38)
      {
        v20 = 0;
        v21 = v25;
      }
      else
      {
        v26 = *(_QWORD *)(v39 + 8 * v21);
        if (v26)
          goto LABEL_14;
        v27 = v25 + 2;
        if (v25 + 2 >= v38)
          goto LABEL_33;
        v26 = *(_QWORD *)(v39 + 8 * v27);
        if (v26)
        {
LABEL_17:
          v25 = v27;
          goto LABEL_18;
        }
        v21 = v25 + 3;
        if (v25 + 3 < v38)
        {
          v26 = *(_QWORD *)(v39 + 8 * v21);
          if (v26)
          {
LABEL_14:
            v25 = v21;
            goto LABEL_18;
          }
          v27 = v25 + 4;
          if (v25 + 4 >= v38)
          {
LABEL_33:
            v20 = 0;
            goto LABEL_37;
          }
          v26 = *(_QWORD *)(v39 + 8 * v27);
          if (!v26)
          {
            while (1)
            {
              v25 = v27 + 1;
              if (__OFADD__(v27, 1))
                goto LABEL_42;
              if (v25 >= v38)
              {
                v20 = 0;
                v21 = v35;
                goto LABEL_37;
              }
              v26 = *(_QWORD *)(v39 + 8 * v25);
              ++v27;
              if (v26)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v20 = 0;
        v21 = v25 + 2;
      }
LABEL_37:
      a3 = v22;
LABEL_38:
      v18 = v36;
      a1 = v37;
      goto LABEL_39;
    }
LABEL_18:
    v20 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v25 << 6);
    v21 = v25;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

char *OUTLINED_FUNCTION_134_0(char *a1, int64_t a2)
{
  char *v2;

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

void OUTLINED_FUNCTION_134_2()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  outlined destroy of StorableValue(v0, v1);
}

void specialized _ArrayBuffer._getElementSlowPath(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_262();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(_QWORD *)(a2 + 16) <= a1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  swift_unknownObjectRetain_n();
  if (swift_dynamicCast())
  {
    outlined destroy of UUID?(v2, &demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
    OUTLINED_FUNCTION_1_6();
    return;
  }
LABEL_7:
  _StringGuts.grow(_:)(82);
  OUTLINED_FUNCTION_5_1(0xD000000000000043, (uint64_t)"Down-casted Array element failed to match the target type\nExpected ");
  OUTLINED_FUNCTION_71_1();
  OUTLINED_FUNCTION_222_0(36, v6);
  v7._countAndFlagsBits = 0x756F662074756220;
  v7._object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v7);
  swift_getObjectType();
  swift_unknownObjectRelease();
  v8._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v8);
  OUTLINED_FUNCTION_64();
  _assertionFailure(_:_:flags:)();
  __break(1u);
}

void sub_18D823D8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_18D8244AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void sub_18D824960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D8250F8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18D826EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void specialized Sequence._copySequenceContents(initializing:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;

  OUTLINED_FUNCTION_81_2();
  v3 = v2;
  v5 = v4;
  v6 = v2 + 64;
  v7 = -1 << *(_BYTE *)(v2 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 64);
  if (!v0)
  {
    v12 = 0;
LABEL_36:
    *v5 = v3;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    OUTLINED_FUNCTION_40_4();
    return;
  }
  v10 = v1;
  if (!v1)
  {
    v12 = 0;
    goto LABEL_36;
  }
  if (v1 < 0)
  {
LABEL_38:
    __break(1u);
  }
  else
  {
    v11 = v0;
    v12 = 0;
    v13 = 0;
    v14 = (unint64_t)(63 - v7) >> 6;
    if (!v9)
      goto LABEL_9;
LABEL_8:
    v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v16 = v15 | (v12 << 6);
    while (1)
    {
      ++v13;
      v22 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v23 = v22[1];
      *v11 = *v22;
      v11[1] = v23;
      if (v13 == v10)
      {
        swift_bridgeObjectRetain();
        goto LABEL_36;
      }
      v11 += 2;
      swift_bridgeObjectRetain();
      if (v9)
        goto LABEL_8;
LABEL_9:
      v17 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
        goto LABEL_38;
      }
      if (v17 >= v14)
        goto LABEL_32;
      if (!*(_QWORD *)(v6 + 8 * v17))
      {
        v12 += 2;
        if (v17 + 1 >= v14)
        {
          v9 = 0;
          v12 = v17;
          goto LABEL_36;
        }
        if (!*(_QWORD *)(v6 + 8 * v12))
        {
          if (v17 + 2 >= v14)
            goto LABEL_32;
          if (!*(_QWORD *)(v6 + 8 * (v17 + 2)))
          {
            v12 = v17 + 3;
            if (v17 + 3 >= v14)
            {
              v9 = 0;
              v12 = v17 + 2;
              goto LABEL_36;
            }
            if (!*(_QWORD *)(v6 + 8 * v12))
            {
              v24 = v17 + 4;
              if (v17 + 4 >= v14)
              {
LABEL_32:
                v9 = 0;
                goto LABEL_36;
              }
              if (!*(_QWORD *)(v6 + 8 * v24))
                break;
            }
          }
        }
      }
LABEL_17:
      OUTLINED_FUNCTION_205_0();
      v9 = v19 & v18;
      v16 = v21 + (v20 << 6);
      v12 = v20;
    }
    while (1)
    {
      v25 = v24 + 1;
      if (__OFADD__(v24, 1))
        break;
      if (v25 >= v14)
      {
        v9 = 0;
        v12 = v14 - 1;
        goto LABEL_36;
      }
      ++v24;
      if (*(_QWORD *)(v6 + 8 * v25))
        goto LABEL_17;
    }
  }
  __break(1u);
}

void static KeyedFirstMatchingRecordCache.metadataFromRow(_:groupBySchema:payloadSchema:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  ValueMetadata *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (**v44)(uint64_t, uint64_t, uint64_t);
  ValueMetadata *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t (**v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  char v102;
  BOOL v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  char v117;
  unint64_t v118;
  char v119;
  uint64_t v120;
  _BOOL8 v121;
  Swift::Int v122;
  unint64_t v123;
  char v124;
  Swift::Bool v125;
  unint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD v140[2];
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t (**Description)(uint64_t, uint64_t, uint64_t);
  ValueMetadata *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;

  OUTLINED_FUNCTION_42();
  v163 = v2;
  v164 = v3;
  v161 = v0;
  v144 = v4;
  v6 = v5;
  v8 = v7;
  v9 = OUTLINED_FUNCTION_33();
  Description = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v9[-1].Description;
  v160 = v9;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_118();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLDataType)?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v11);
  v158 = (char *)v140 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_61();
  v142 = (_QWORD *)v14;
  v15 = OUTLINED_FUNCTION_196();
  v153 = *(_QWORD *)(v15 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_6_1();
  v151 = v17;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_53();
  v152 = v19;
  OUTLINED_FUNCTION_7();
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)v140 - v22;
  MEMORY[0x1E0C80A78](v21);
  OUTLINED_FUNCTION_61();
  v157 = v24;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
  OUTLINED_FUNCTION_247();
  MEMORY[0x1E0C80A78](v25);
  OUTLINED_FUNCTION_331();
  v150 = v26;
  OUTLINED_FUNCTION_7();
  v28 = MEMORY[0x1E0C80A78](v27);
  v30 = (_QWORD *)((char *)v140 - v29);
  v31 = MEMORY[0x1E0C80A78](v28);
  v33 = *(_QWORD *)(v6 + 16);
  v141 = v1;
  v156 = v8;
  if (v33)
  {
    v140[0] = v15;
    v148 = (_QWORD *)((char *)v140 - v32);
    v149 = v31;
    v147 = (uint64_t)v140 + *(int *)(v31 + 48) - v32;
    OUTLINED_FUNCTION_20_3();
    v35 = v6 + v34;
    v143 = *(_QWORD *)(v36 + 72);
    v145 = v8 + 64;
    v140[1] = v6;
    OUTLINED_FUNCTION_156();
    v37 = MEMORY[0x1E0DEE9D8];
    v146 = v30;
    do
    {
      v154 = v35;
      v155 = v33;
      v38 = (uint64_t)v23;
      v39 = v148;
      outlined init with copy of Date?(v35, (uint64_t)v148, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      v40 = v149;
      v41 = (uint64_t)v30 + *(int *)(v149 + 48);
      v42 = *v39;
      v43 = v39[1];
      *v30 = *v39;
      v30[1] = v43;
      v44 = Description;
      v45 = v160;
      OUTLINED_FUNCTION_139(v41, v147, Description[4]);
      v46 = v150;
      v47 = (uint64_t)v150 + *(int *)(v40 + 48);
      *v150 = v42;
      v46[1] = v43;
      OUTLINED_FUNCTION_139(v47, v41, v44[2]);
      OUTLINED_FUNCTION_192_0();
      v48 = v47;
      v8 = v156;
      ((void (*)(uint64_t, ValueMetadata *))v44[1])(v48, v45);
      if (!*(_QWORD *)(v8 + 16) || (v49 = specialized __RawDictionaryStorage.find<A>(_:)(), (v50 & 1) == 0))
      {
        OUTLINED_FUNCTION_106();
        OUTLINED_FUNCTION_16_0();
        OUTLINED_FUNCTION_167_1();
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
        OUTLINED_FUNCTION_13_0();
        *v70 = v42;
        v70[1] = v43;
        OUTLINED_FUNCTION_283();
        swift_willThrow();
        outlined destroy of UUID?((uint64_t)v146, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        return;
      }
      v51 = v49;
      v52 = *(_DWORD *)(v8 + 36);
      OUTLINED_FUNCTION_23_0();
      if (v51 < 0 || v51 >= 1 << *(_BYTE *)(v8 + 32))
      {
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      if (((*(_QWORD *)(v145 + (((unint64_t)v51 >> 3) & 0xFFFFFFFFFFFFF8)) >> v51) & 1) == 0)
        goto LABEL_65;
      if (v52 != *(_DWORD *)(v8 + 36))
        goto LABEL_66;
      v53 = OUTLINED_FUNCTION_232_0();
      outlined copy of DatabaseValue(v53, v54, v55);
      v56 = v157;
      v57 = OUTLINED_FUNCTION_232_0();
      OUTLINED_FUNCTION_204_0(v57, v58, v59, v41, v60);
      v161 = v35;
      v61 = OUTLINED_FUNCTION_232_0();
      if (v35)
      {
        outlined consume of DatabaseValue(v61, v62, v63);
        OUTLINED_FUNCTION_106();
        OUTLINED_FUNCTION_16_0();
        outlined destroy of UUID?((uint64_t)v146, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        return;
      }
      outlined consume of DatabaseValue(v61, v62, v63);
      v64 = v56;
      v23 = (char *)v38;
      outlined init with copy of StorableValue(v64, v38, type metadata accessor for StorableValue);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_89_0();
        v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v30 = v146;
      v65 = v155;
      v67 = *(_QWORD *)(v37 + 16);
      v66 = *(_QWORD *)(v37 + 24);
      if (v67 >= v66 >> 1)
      {
        OUTLINED_FUNCTION_147_1(v66);
        v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(_QWORD *)(v37 + 16) = v67 + 1;
      OUTLINED_FUNCTION_20_3();
      outlined init with take of StorableValue((uint64_t)v23, v37 + v68 + *(_QWORD *)(v69 + 72) * v67, type metadata accessor for StorableValue);
      outlined destroy of StorableValue(v157, type metadata accessor for StorableValue);
      outlined destroy of UUID?((uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      v35 = v154 + v143;
      v33 = v65 - 1;
    }
    while (v33);
    v148 = (uint64_t *)v37;
    OUTLINED_FUNCTION_16_0();
    v1 = v141;
  }
  else
  {
    v148 = (uint64_t *)MEMORY[0x1E0DEE9D8];
  }
  v71 = Dictionary.init(dictionaryLiteral:)();
  v72 = *(_QWORD *)(v144 + 64);
  v149 = v144 + 64;
  v73 = 1 << *(_BYTE *)(v144 + 32);
  v74 = -1;
  if (v73 < 64)
    v74 = ~(-1 << v73);
  v75 = v74 & v72;
  v154 = v8 + 64;
  v150 = (_QWORD *)((unint64_t)(v73 + 63) >> 6);
  v147 = (uint64_t)v150 - 1;
  swift_bridgeObjectRetain();
  v76 = 0;
  v77 = &demangling cache variable for type metadata for (key: String, value: SQLDataType);
  v78 = v158;
  if (!v75)
    goto LABEL_24;
LABEL_22:
  OUTLINED_FUNCTION_175_0();
  v157 = v75;
  v80 = v79 | (v76 << 6);
  while (2)
  {
    v81 = *(_QWORD *)(v144 + 56);
    v82 = (_QWORD *)(*(_QWORD *)(v144 + 48) + 16 * v80);
    v83 = v82[1];
    *v78 = *v82;
    v78[1] = v83;
    v84 = Description;
    v85 = v81 + (_QWORD)Description[9] * v80;
    v86 = OUTLINED_FUNCTION_334();
    v87 = v84[2];
    v78 = v158;
    v87((uint64_t)&v158[*(int *)(v86 + 48)], v85, (uint64_t)v160);
    __swift_storeEnumTagSinglePayload((uint64_t)v78, 0, 1, v86);
    OUTLINED_FUNCTION_156();
    while (1)
    {
      v94 = v142;
      outlined init with take of UUID?((uint64_t)v78, (uint64_t)v142, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLDataType)?);
      v95 = OUTLINED_FUNCTION_334();
      if (__swift_getEnumTagSinglePayload((uint64_t)v94, 1, v95) == 1)
      {
        OUTLINED_FUNCTION_324();
        return;
      }
      v96 = v94;
      v98 = *v94;
      v97 = v94[1];
      Description[4](v1, (uint64_t)v96 + *(int *)(v95 + 48), (uint64_t)v160);
      if (!*(_QWORD *)(v8 + 16) || (v99 = OUTLINED_FUNCTION_305(), (v100 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_8_1();
        type metadata accessor for MetadataSQLError(0);
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
        OUTLINED_FUNCTION_13_0();
        *v139 = v98;
        v139[1] = v97;
        OUTLINED_FUNCTION_283();
        swift_willThrow();
        OUTLINED_FUNCTION_269();
        OUTLINED_FUNCTION_324();
        return;
      }
      if ((v99 & 0x8000000000000000) != 0)
        goto LABEL_67;
      OUTLINED_FUNCTION_110_2();
      if (v102 == v103)
        goto LABEL_67;
      if (((*(_QWORD *)(v154 + ((v101 >> 3) & 0xFFFFFFFFFFFFF8)) >> v101) & 1) == 0)
        goto LABEL_68;
      v155 = v76;
      v104 = v77;
      v105 = OUTLINED_FUNCTION_231_0();
      outlined copy of DatabaseValue(v105, v106, v107);
      v108 = v1;
      v109 = v152;
      v110 = OUTLINED_FUNCTION_231_0();
      OUTLINED_FUNCTION_204_0(v110, v111, v112, v108, v113);
      v161 = v75;
      v114 = OUTLINED_FUNCTION_231_0();
      if (v75)
      {
        outlined consume of DatabaseValue(v114, v115, v116);
        OUTLINED_FUNCTION_54();
        ((void (*)(uint64_t, ValueMetadata *))Description[1])(v108, v160);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_8_1();
        OUTLINED_FUNCTION_324();
        return;
      }
      outlined consume of DatabaseValue(v114, v115, v116);
      outlined init with copy of StorableValue(v109, v151, type metadata accessor for StorableValue);
      v117 = OUTLINED_FUNCTION_307();
      v162 = v71;
      v118 = OUTLINED_FUNCTION_327();
      v120 = *(_QWORD *)(v71 + 16);
      v121 = (v119 & 1) == 0;
      v122 = v120 + v121;
      if (__OFADD__(v120, v121))
        goto LABEL_69;
      v123 = v118;
      v124 = v119;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
      v125 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v117, v122);
      v1 = v141;
      v77 = v104;
      v76 = v155;
      if (v125)
      {
        v126 = OUTLINED_FUNCTION_305();
        if ((v124 & 1) != (v127 & 1))
          goto LABEL_73;
        v123 = v126;
      }
      v71 = v162;
      if ((v124 & 1) != 0)
      {
        v128 = OUTLINED_FUNCTION_267();
        outlined assign with take of StorableValue(v128, v129);
        v130 = v152;
      }
      else
      {
        OUTLINED_FUNCTION_306(v162 + 8 * (v123 >> 6));
        v132 = (_QWORD *)(v131 + 16 * v123);
        *v132 = v98;
        v132[1] = v97;
        v133 = OUTLINED_FUNCTION_267();
        outlined init with take of StorableValue(v133, v134, type metadata accessor for StorableValue);
        v135 = *(_QWORD *)(v71 + 16);
        v103 = __OFADD__(v135, 1);
        v136 = v135 + 1;
        v130 = v152;
        if (v103)
          goto LABEL_70;
        *(_QWORD *)(v71 + 16) = v136;
        OUTLINED_FUNCTION_21_0();
      }
      OUTLINED_FUNCTION_54();
      OUTLINED_FUNCTION_152();
      outlined destroy of StorableValue(v130, type metadata accessor for StorableValue);
      OUTLINED_FUNCTION_269();
      v8 = v156;
      v75 = v157;
      v78 = v158;
      if (v157)
        goto LABEL_22;
LABEL_24:
      v88 = v76 + 1;
      if (__OFADD__(v76, 1))
        goto LABEL_71;
      if (v88 < (uint64_t)v150)
      {
        if (*(_QWORD *)(v149 + 8 * v88))
          goto LABEL_27;
        v76 += 2;
        if (v88 + 1 >= (uint64_t)v150)
        {
          v76 = v88;
          goto LABEL_32;
        }
        if (*(_QWORD *)(v149 + 8 * v76))
          goto LABEL_27;
        if (v88 + 2 < (uint64_t)v150)
          break;
      }
LABEL_32:
      v93 = OUTLINED_FUNCTION_334();
      __swift_storeEnumTagSinglePayload((uint64_t)v78, 1, 1, v93);
      v157 = 0;
    }
    if (*(_QWORD *)(v149 + 8 * (v88 + 2)))
      goto LABEL_27;
    v137 = v88 + 3;
    if (v88 + 3 >= (uint64_t)v150)
    {
      v76 = v88 + 2;
      goto LABEL_32;
    }
    if (*(_QWORD *)(v149 + 8 * v137))
    {
LABEL_27:
      OUTLINED_FUNCTION_205_0();
      v157 = v90 & v89;
      v80 = v92 + (v91 << 6);
      v76 = v91;
      continue;
    }
    break;
  }
  while (1)
  {
    v138 = v137 + 1;
    if (__OFADD__(v137, 1))
      break;
    if (v138 >= (uint64_t)v150)
    {
      v76 = v147;
      goto LABEL_32;
    }
    ++v137;
    if (*(_QWORD *)(v149 + 8 * v138))
      goto LABEL_27;
  }
LABEL_72:
  __break(1u);
LABEL_73:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t SQLExpressionEvaluator.execute(stmt:bindingValues:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t isUniquelyReferenced_nonNull_native;
  Swift::Int v5;
  sqlite3_stmt *v6;
  sqlite3 *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t countAndFlagsBits;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  sqlite3_stmt *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  unint64_t v32;
  char v33;
  Swift::Bool v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  Swift::Int v47;
  id v48;
  uint64_t v49;
  Swift::Int v50;
  Swift::Int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t result;
  uint64_t v61;
  id v62;
  uint64_t v63;
  Swift::Int v64;
  Swift::Int v65;
  unint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  sqlite3_stmt *v71;
  uint64_t v72;
  uint64_t v73;
  sqlite3 *v74;
  id v75;
  uint64_t v76;
  Swift::Int v77;
  Swift::Int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  sqlite3_stmt *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  Swift::Int v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  sqlite3 *v98;
  unsigned int v99;
  sqlite3_stmt *pStmt;
  char v101;
  sqlite3_stmt *v102;
  Swift::Int v103;
  Swift::Int v104;

  v6 = (sqlite3_stmt *)a1;
  v7 = *(sqlite3 **)(v2 + 24);
  bind(_:to:db:)(a2, a1, (uint64_t)v7);
  if (v3)
  {
    v8 = sqlite3_reset(v6);
    if (!(_DWORD)v8)
      return v5;
    v9 = BMSQLDatabaseError(v8, v7, 0);
    swift_getErrorValue();
    v10 = Error.localizedDescription.getter();
    v5 = v11;

    v103 = v10;
    v104 = v5;
    lazy protocol witness table accessor for type String and conformance String();
    countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    isUniquelyReferenced_nonNull_native = v13;
    swift_bridgeObjectRelease();
    if (one-time initialization token for SQL != -1)
LABEL_56:
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logging.SQL);
    swift_bridgeObjectRetain();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v5 = swift_slowAlloc();
      v17 = v6;
      v18 = swift_slowAlloc();
      v103 = v18;
      *(_DWORD *)v5 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, isUniquelyReferenced_nonNull_native, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_18D810000, v15, v16, "SQLExpressionEvaluator: Failed to reset statement with error: %s", (uint8_t *)v5, 0xCu);
      swift_arrayDestroy();
      v19 = v18;
      v6 = v17;
      MEMORY[0x193FED860](v19, -1, -1);
      MEMORY[0x193FED860](v5, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (sqlite3_sql(v6))
    {
LABEL_29:
      String.init(cString:)();
      specialized Dictionary._Variant.removeValue(forKey:)();
      swift_bridgeObjectRelease();
      sqlite3_finalize(v6);
      return v5;
    }
    goto LABEL_60;
  }
  v20 = sqlite3_step(v6);
  if ((_DWORD)v20 == 101)
  {
    v61 = sqlite3_reset(v6);
    if (!(_DWORD)v61)
      return 0;
    v62 = BMSQLDatabaseError(v61, v7, 0);
    swift_getErrorValue();
    v63 = Error.localizedDescription.getter();
    v65 = v64;

    v103 = v63;
    v104 = v65;
    lazy protocol witness table accessor for type String and conformance String();
    countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    isUniquelyReferenced_nonNull_native = v66;
    swift_bridgeObjectRelease();
    if (one-time initialization token for SQL == -1)
    {
LABEL_33:
      v67 = type metadata accessor for Logger();
      __swift_project_value_buffer(v67, (uint64_t)static Logging.SQL);
      swift_bridgeObjectRetain();
      v68 = Logger.logObject.getter();
      v69 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v68, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc();
        v71 = v6;
        v72 = swift_slowAlloc();
        v103 = v72;
        *(_DWORD *)v70 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, isUniquelyReferenced_nonNull_native, &v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_18D810000, v68, v69, "SQLExpressionEvaluator: Failed to reset statement with error: %s", v70, 0xCu);
        swift_arrayDestroy();
        v73 = v72;
        v6 = v71;
        MEMORY[0x193FED860](v73, -1, -1);
        MEMORY[0x193FED860](v70, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      if (!sqlite3_sql(v6))
        goto LABEL_62;
      String.init(cString:)();
      specialized Dictionary._Variant.removeValue(forKey:)();
      swift_bridgeObjectRelease();
      sqlite3_finalize(v6);
      return 0;
    }
LABEL_58:
    swift_once();
    goto LABEL_33;
  }
  if ((_DWORD)v20 != 100)
  {
    v74 = v7;
    v75 = BMSQLDatabaseError(v20, v7, 0);
    swift_getErrorValue();
    v76 = Error.localizedDescription.getter();
    v78 = v77;

    v103 = v76;
    v104 = v78;
    lazy protocol witness table accessor for type String and conformance String();
    v79 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v81 = v80;
    swift_bridgeObjectRelease();
    if (sqlite3_sql(v6))
    {
      v82 = v6;
      v5 = String.init(cString:)();
      v84 = v83;
      lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
      swift_allocError();
      *(_QWORD *)v85 = v5;
      *(_QWORD *)(v85 + 8) = v84;
      *(_QWORD *)(v85 + 16) = v79;
      *(_QWORD *)(v85 + 24) = v81;
      *(_BYTE *)(v85 + 32) = 1;
      swift_willThrow();
      v86 = sqlite3_reset(v82);
      if (!(_DWORD)v86)
        return v5;
      v6 = v82;
      v87 = BMSQLDatabaseError(v86, v74, 0);
      swift_getErrorValue();
      v88 = Error.localizedDescription.getter();
      v5 = v89;

      v103 = v88;
      v104 = v5;
      v90 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v92 = v91;
      swift_bridgeObjectRelease();
      if (one-time initialization token for SQL != -1)
        swift_once();
      v93 = type metadata accessor for Logger();
      __swift_project_value_buffer(v93, (uint64_t)static Logging.SQL);
      swift_bridgeObjectRetain();
      v94 = Logger.logObject.getter();
      v95 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v94, v95))
      {
        v5 = swift_slowAlloc();
        v96 = swift_slowAlloc();
        v103 = v96;
        *(_DWORD *)v5 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v92, &v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_18D810000, v94, v95, "SQLExpressionEvaluator: Failed to reset statement with error: %s", (uint8_t *)v5, 0xCu);
        swift_arrayDestroy();
        v97 = v96;
        v6 = v82;
        MEMORY[0x193FED860](v97, -1, -1);
        MEMORY[0x193FED860](v5, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      if (sqlite3_sql(v6))
        goto LABEL_29;
      goto LABEL_63;
    }
    goto LABEL_61;
  }
  v98 = v7;
  countAndFlagsBits = sqlite3_column_count(v6);
  v21 = Dictionary.init(dictionaryLiteral:)();
  if ((countAndFlagsBits & 0x80000000) != 0)
  {
    __break(1u);
    goto LABEL_58;
  }
  v5 = v21;
  pStmt = v6;
  if ((_DWORD)countAndFlagsBits)
  {
    v22 = 0;
    v99 = countAndFlagsBits;
    while (1)
    {
      if ((_DWORD)countAndFlagsBits == v22)
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      if (!sqlite3_column_name(v6, v22))
        break;
      String.init(cString:)();
      v23 = String.lowercased()();
      countAndFlagsBits = v23._countAndFlagsBits;
      swift_bridgeObjectRelease();
      v24 = DatabaseValue.init(stmt:index:)(v6, v22);
      v26 = v25;
      v102 = (sqlite3_stmt *)v24;
      v101 = v27;
      outlined copy of DatabaseValue(v24, v25, v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v103 = v5;
      v28 = specialized __RawDictionaryStorage.find<A>(_:)();
      v30 = *(_QWORD *)(v5 + 16);
      v31 = (v29 & 1) == 0;
      v5 = v30 + v31;
      if (__OFADD__(v30, v31))
        goto LABEL_54;
      v32 = v28;
      v33 = v29;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, DatabaseValue>);
      v34 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v5);
      isUniquelyReferenced_nonNull_native = (unint64_t)v23._object;
      if (v34)
      {
        v35 = specialized __RawDictionaryStorage.find<A>(_:)();
        if ((v33 & 1) != (v36 & 1))
          goto LABEL_65;
        v32 = v35;
      }
      v5 = v103;
      if ((v33 & 1) != 0)
      {
        v37 = *(_QWORD *)(v103 + 56) + 24 * v32;
        v38 = *(_QWORD *)v37;
        v39 = *(_QWORD *)(v37 + 8);
        v40 = *(_BYTE *)(v37 + 16);
        v6 = v102;
        *(_QWORD *)v37 = v102;
        *(_QWORD *)(v37 + 8) = v26;
        v41 = v101;
        *(_BYTE *)(v37 + 16) = v101;
      }
      else
      {
        *(_QWORD *)(v103 + 8 * (v32 >> 6) + 64) |= 1 << v32;
        *(Swift::String *)(*(_QWORD *)(v5 + 48) + 16 * v32) = v23;
        v42 = *(_QWORD *)(v5 + 56) + 24 * v32;
        v6 = v102;
        *(_QWORD *)v42 = v102;
        *(_QWORD *)(v42 + 8) = v26;
        v41 = v101;
        *(_BYTE *)(v42 + 16) = v101;
        v43 = *(_QWORD *)(v5 + 16);
        v44 = __OFADD__(v43, 1);
        v45 = v43 + 1;
        if (v44)
          goto LABEL_55;
        *(_QWORD *)(v5 + 16) = v45;
        swift_bridgeObjectRetain();
        v38 = 0;
        v39 = 0;
        v40 = -1;
      }
      ++v22;
      swift_bridgeObjectRelease();
      outlined consume of DatabaseValue((uint64_t)v6, v26, v41);
      outlined consume of DatabaseValue?(v38, v39, v40);
      swift_bridgeObjectRelease();
      countAndFlagsBits = v99;
      v6 = pStmt;
      if (v99 == v22)
        goto LABEL_22;
    }
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
LABEL_22:
  v46 = sqlite3_reset(v6);
  if (!(_DWORD)v46)
    return v5;
  v47 = v5;
  v48 = BMSQLDatabaseError(v46, v98, 0);
  swift_getErrorValue();
  v49 = Error.localizedDescription.getter();
  v51 = v50;

  v103 = v49;
  v104 = v51;
  lazy protocol witness table accessor for type String and conformance String();
  v52 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v54 = v53;
  swift_bridgeObjectRelease();
  if (one-time initialization token for SQL != -1)
    swift_once();
  v55 = type metadata accessor for Logger();
  __swift_project_value_buffer(v55, (uint64_t)static Logging.SQL);
  swift_bridgeObjectRetain();
  v56 = Logger.logObject.getter();
  v57 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v56, v57))
  {
    v58 = (uint8_t *)swift_slowAlloc();
    v59 = swift_slowAlloc();
    v103 = v59;
    *(_DWORD *)v58 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, &v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_18D810000, v56, v57, "SQLExpressionEvaluator: Failed to reset statement with error: %s", v58, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x193FED860](v59, -1, -1);
    MEMORY[0x193FED860](v58, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v5 = v47;
  if (sqlite3_sql(pStmt))
  {
    String.init(cString:)();
    specialized Dictionary._Variant.removeValue(forKey:)();
    swift_bridgeObjectRelease();
    sqlite3_finalize(pStmt);
    return v5;
  }
LABEL_64:
  __break(1u);
LABEL_65:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of DatabaseValue(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 3)
    return outlined consume of Data._Representation(result, a2);
  if (a3 == 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined copy of DatabaseValue(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 3)
    return outlined copy of Data._Representation(result, a2);
  if (a3 == 2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t DatabaseValue.init(stmt:index:)(sqlite3_stmt *a1, int a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  Swift::String v8;

  v4 = sqlite3_column_type(a1, a2) - 1;
  result = 0;
  switch(v4)
  {
    case 0:
      result = sqlite3_column_int64(a1, a2);
      break;
    case 1:
      result = sqlite3_column_double(a1, a2);
      break;
    case 2:
      if (!sqlite3_column_text(a1, a2))
      {
        __break(1u);
        goto LABEL_10;
      }
      result = String.init(cString:)();
      break;
    case 3:
      result = (uint64_t)sqlite3_column_blob(a1, a2);
      if (result)
      {
        v6 = result;
        v7 = sqlite3_column_bytes(a1, a2);
        result = MEMORY[0x193FEC114](v6, v7);
      }
      break;
    case 4:
      return result;
    default:
LABEL_10:
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

uint64_t outlined consume of DatabaseValue?(uint64_t result, unint64_t a2, char a3)
{
  if (a3 != -1)
    return outlined consume of DatabaseValue(result, a2, a3);
  return result;
}

uint64_t OUTLINED_FUNCTION_100_0()
{
  return swift_release();
}

void OUTLINED_FUNCTION_100_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 280) = (v1 - 1) & v1;
  *(_QWORD *)(v2 - 288) = v0;
}

uint64_t OUTLINED_FUNCTION_135()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

void OUTLINED_FUNCTION_135_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD, uint64_t, char *, uint64_t), void (*a7)(uint64_t, uint64_t, char *))
{
  uint64_t v7;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v7, a5, a6, a7);
}

uint64_t OUTLINED_FUNCTION_135_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_135_2()
{
  return swift_arrayInitWithTakeFrontToBack();
}

double OUTLINED_FUNCTION_200(double a1)
{
  uint64_t v1;
  uint64_t v2;

  return a1 + *(double *)(v1 + *(int *)(*(_QWORD *)(v2 - 128) + 28));
}

uint64_t OUTLINED_FUNCTION_150()
{
  return swift_allocObject();
}

double OUTLINED_FUNCTION_150_1(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v2;
  double result;

  *(_BYTE *)(v1 + *(int *)(a1 + 56)) = 1;
  v2 = (_OWORD *)(v1 + *(int *)(a1 + 60));
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_96()
{
  return swift_release();
}

void OUTLINED_FUNCTION_211(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  SQLExpressionEvaluator.execute(expression:payload:)(a1, *(_QWORD *)(v2 - 160), a2);
}

uint64_t OUTLINED_FUNCTION_211_0()
{
  return swift_bridgeObjectRelease();
}

double OUTLINED_FUNCTION_206()
{
  uint64_t v0;

  return *(double *)(v0 - 88);
}

void OUTLINED_FUNCTION_206_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of StorableValue(a1, a2, v2);
}

void OUTLINED_FUNCTION_221(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + *(int *)(v2 + 32)) = a1 == 1;
}

void OUTLINED_FUNCTION_203()
{
  void *v0;
  size_t v1;

  bzero(v0, v1);
}

void OUTLINED_FUNCTION_203_0()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 104) = 0;
  *(_QWORD *)(v0 - 96) = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
}

void static KeyedAggregationMetadataCache.metadataFromRow(_:groupBySchema:payloadSchema:)()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  ValueMetadata *v46;
  uint64_t (**Description)(uint64_t, uint64_t, uint64_t);
  _QWORD *v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  ValueMetadata *v93;
  void *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  char v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  unint64_t v117;
  char v118;
  BOOL v119;
  unint64_t v120;
  char v121;
  unint64_t v122;
  char v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t (*v183)(uint64_t, uint64_t);
  uint64_t v184;

  OUTLINED_FUNCTION_42();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v8);
  v163 = (uint64_t)&v157 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
  v10 = *(_QWORD *)(v167 - 8);
  MEMORY[0x1E0C80A78](v167);
  v159 = (uint64_t *)((char *)&v157 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_53();
  v164 = v13;
  OUTLINED_FUNCTION_7();
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v157 - v16);
  MEMORY[0x1E0C80A78](v15);
  v166 = (uint64_t *)((char *)&v157 - v18);
  v165 = OUTLINED_FUNCTION_196();
  v178 = *(_QWORD *)(v165 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v19);
  OUTLINED_FUNCTION_6_1();
  v175 = v20;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v21);
  OUTLINED_FUNCTION_53();
  v176 = v22;
  OUTLINED_FUNCTION_7();
  v24 = MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v157 - v25;
  MEMORY[0x1E0C80A78](v24);
  OUTLINED_FUNCTION_61();
  v181 = v27;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
  OUTLINED_FUNCTION_247();
  MEMORY[0x1E0C80A78](v28);
  OUTLINED_FUNCTION_331();
  v173 = v29;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v30);
  v174 = (uint64_t *)((char *)&v157 - v31);
  OUTLINED_FUNCTION_7();
  v33 = MEMORY[0x1E0C80A78](v32);
  v35 = *(_QWORD *)(v5 + 16);
  v177 = v17;
  v179 = v7;
  v162 = v3;
  v161 = v10;
  if (v35)
  {
    v183 = v1;
    v171 = (uint64_t *)((char *)&v157 - v34);
    v172 = v33;
    v170 = (uint64_t)&v157 + *(int *)(v33 + 48) - v34;
    OUTLINED_FUNCTION_20_3();
    v37 = v5 + v36;
    v168 = *(_QWORD *)(v38 + 72);
    v169 = v7 + 64;
    v160 = v5;
    OUTLINED_FUNCTION_21_0();
    v39 = MEMORY[0x1E0DEE9D8];
    v40 = v174;
    while (1)
    {
      v182 = v39;
      v180 = v35;
      v41 = v171;
      outlined init with copy of Date?(v37, (uint64_t)v171, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      v42 = v172;
      v43 = (uint64_t)v40 + *(int *)(v172 + 48);
      v45 = *v41;
      v44 = v41[1];
      *v40 = v45;
      v40[1] = v44;
      v46 = OUTLINED_FUNCTION_33();
      Description = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v46[-1].Description;
      OUTLINED_FUNCTION_224_0(v43, v170, Description[4]);
      v48 = v173;
      v49 = (uint64_t)v173 + *(int *)(v42 + 48);
      *v173 = v45;
      v48[1] = v44;
      OUTLINED_FUNCTION_224_0(v49, v43, Description[2]);
      v50 = Description[1];
      OUTLINED_FUNCTION_44_3();
      ((void (*)(uint64_t, ValueMetadata *))v50)(v49, v46);
      v51 = v179;
      if (!*(_QWORD *)(v179 + 16) || (v52 = specialized __RawDictionaryStorage.find<A>(_:)(), (v53 & 1) == 0))
      {
        OUTLINED_FUNCTION_211_0();
        OUTLINED_FUNCTION_16_0();
        type metadata accessor for MetadataSQLError(0);
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
        OUTLINED_FUNCTION_13_0();
        *v72 = v45;
        v72[1] = v44;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
LABEL_19:
        v73 = (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType);
        v74 = v174;
        goto LABEL_50;
      }
      v54 = v52;
      v55 = *(_DWORD *)(v51 + 36);
      OUTLINED_FUNCTION_8_1();
      if (v54 < 0 || v54 >= 1 << *(_BYTE *)(v51 + 32))
        break;
      if (((*(_QWORD *)(v169 + (((unint64_t)v54 >> 3) & 0xFFFFFFFFFFFFF8)) >> v54) & 1) == 0)
        goto LABEL_53;
      if (v55 != *(_DWORD *)(v51 + 36))
        goto LABEL_54;
      v56 = OUTLINED_FUNCTION_238();
      outlined copy of DatabaseValue(v56, v57, v58);
      v59 = OUTLINED_FUNCTION_238();
      OUTLINED_FUNCTION_204_0(v59, v60, v61, v43, v62);
      v63 = OUTLINED_FUNCTION_238();
      if (v50)
      {
        outlined consume of DatabaseValue(v63, v64, v65);
        OUTLINED_FUNCTION_211_0();
        OUTLINED_FUNCTION_16_0();
        goto LABEL_19;
      }
      outlined consume of DatabaseValue(v63, v64, v65);
      v66 = OUTLINED_FUNCTION_312();
      outlined init with copy of StorableValue(v66, v67, type metadata accessor for StorableValue);
      v39 = v182;
      if ((OUTLINED_FUNCTION_332() & 1) == 0)
      {
        OUTLINED_FUNCTION_89_0();
        v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v69 = *(_QWORD *)(v39 + 16);
      v68 = *(_QWORD *)(v39 + 24);
      v183 = 0;
      if (v69 >= v68 >> 1)
      {
        OUTLINED_FUNCTION_147_1(v68);
        v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(_QWORD *)(v39 + 16) = v69 + 1;
      OUTLINED_FUNCTION_20_3();
      OUTLINED_FUNCTION_111_0((uint64_t)v26, v39 + v70 + *(_QWORD *)(v71 + 72) * v69);
      outlined destroy of StorableValue(v181, type metadata accessor for StorableValue);
      v40 = v174;
      outlined destroy of UUID?((uint64_t)v174, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      v37 += v168;
      v35 = v180 - 1;
      if (v180 == 1)
      {
        OUTLINED_FUNCTION_16_0();
        v1 = v183;
        v17 = v177;
        v3 = v162;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    v39 = MEMORY[0x1E0DEE9D8];
LABEL_20:
    v75 = *(_QWORD *)(v3 + 16);
    if (v75)
    {
      OUTLINED_FUNCTION_48_2();
      v76 = v3 + 32;
      v77 = 0;
      v78 = MEMORY[0x1E0DEE9D8];
      v79 = MEMORY[0x1E0DEE9D8];
      v182 = v39;
      v160 = v75;
      v158 = v3 + 32;
      while (1)
      {
        v170 = v77;
        v80 = *(_QWORD *)(v76 + 8 * v77);
        v81 = v76;
        swift_bridgeObjectRetain();
        v181 = Dictionary.init(dictionaryLiteral:)();
        if (*(_QWORD *)(v80 + 16))
          break;
        OUTLINED_FUNCTION_106();
LABEL_38:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v136 = OUTLINED_FUNCTION_89_0();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v136, v137, v138, v79);
          v79 = v139;
        }
        v134 = *(_QWORD *)(v79 + 16);
        v133 = *(_QWORD *)(v79 + 24);
        v135 = v170;
        v78 = MEMORY[0x1E0DEE9D8];
        if (v134 >= v133 >> 1)
        {
          v140 = OUTLINED_FUNCTION_147_1(v133);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v140, v141, v142, v79);
          v76 = v81;
          v78 = MEMORY[0x1E0DEE9D8];
          v135 = v170;
          v79 = v143;
        }
        else
        {
          v76 = v81;
        }
        v77 = v135 + 1;
        *(_QWORD *)(v79 + 16) = v134 + 1;
        *(_QWORD *)(v79 + 8 * v134 + 32) = v181;
        v17 = v177;
        if (v77 == v75)
        {
          OUTLINED_FUNCTION_106();
          goto LABEL_51;
        }
      }
      v169 = v79;
      v183 = v1;
      v172 = (uint64_t)v166 + *(int *)(v167 + 64);
      OUTLINED_FUNCTION_20_3();
      v168 = v80;
      v84 = v80 + v83;
      v171 = *(uint64_t **)(v85 + 72);
      while (1)
      {
        v180 = v82;
        v174 = (_QWORD *)v84;
        v86 = v166;
        outlined init with copy of Date?(v84, (uint64_t)v166, (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
        v87 = v167;
        v88 = (uint64_t)v17 + *(int *)(v167 + 64);
        v89 = *v86;
        v90 = v86[1];
        v92 = v86[2];
        v91 = v86[3];
        *v17 = *v86;
        v17[1] = v90;
        v17[2] = v92;
        v17[3] = v91;
        v93 = OUTLINED_FUNCTION_33();
        v94 = v93[-1].Description;
        (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v94 + 4))(v88, v172, v93);
        v95 = *(int *)(v87 + 64);
        v96 = v164;
        *v164 = v89;
        v96[1] = v90;
        v96[2] = v92;
        v96[3] = v91;
        OUTLINED_FUNCTION_244((uint64_t)v96 + v95, v88);
        v97 = v179;
        if (!*(_QWORD *)(v179 + 16))
          goto LABEL_48;
        OUTLINED_FUNCTION_32_4();
        v98 = specialized __RawDictionaryStorage.find<A>(_:)();
        v99 = v181;
        if ((v100 & 1) == 0)
        {
          OUTLINED_FUNCTION_298();
LABEL_48:
          OUTLINED_FUNCTION_127();
          OUTLINED_FUNCTION_211_0();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_16_0();
          OUTLINED_FUNCTION_8_1();
          v183 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)v94 + 1);
          OUTLINED_FUNCTION_335(v183);
          v182 = OUTLINED_FUNCTION_167_1();
          lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
          OUTLINED_FUNCTION_13_0();
          v145 = v144;
          v146 = v159;
          v147 = (uint64_t)v159 + *(int *)(v167 + 64);
          v148 = v177;
          v150 = *v177;
          v149 = v177[1];
          *v159 = *v177;
          v146[1] = v149;
          v151 = v148[3];
          v146[2] = v148[2];
          v146[3] = v151;
          v152 = OUTLINED_FUNCTION_312();
          OUTLINED_FUNCTION_244(v152, v153);
          *v145 = v150;
          v145[1] = v149;
          swift_storeEnumTagMultiPayload();
          OUTLINED_FUNCTION_44_3();
          swift_willThrow();
          v183(v147, (uint64_t)v93);
          v73 = (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType);
          v74 = v148;
          goto LABEL_50;
        }
        v101 = *(_QWORD *)(v97 + 56) + 24 * v98;
        v102 = *(_QWORD **)v101;
        v103 = *(_QWORD *)(v101 + 8);
        v104 = *(_BYTE *)(v101 + 16);
        v105 = OUTLINED_FUNCTION_239();
        outlined copy of DatabaseValue(v105, v106, v107);
        OUTLINED_FUNCTION_127();
        OUTLINED_FUNCTION_335(*((uint64_t (**)(uint64_t, uint64_t))v94 + 1));
        v108 = v176;
        v109 = OUTLINED_FUNCTION_239();
        OUTLINED_FUNCTION_204_0(v109, v110, v111, v88, v112);
        if (v78)
          break;
        v173 = v102;
        v183 = 0;
        outlined init with copy of StorableValue(v108, v175, type metadata accessor for StorableValue);
        v114 = *v177;
        v113 = v177[1];
        v115 = v99;
        v116 = OUTLINED_FUNCTION_307();
        v184 = v115;
        OUTLINED_FUNCTION_336();
        OUTLINED_FUNCTION_161_0();
        if (v119)
          goto LABEL_55;
        v120 = v117;
        v121 = v118;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
        if (OUTLINED_FUNCTION_218_0(v116))
        {
          v122 = OUTLINED_FUNCTION_336();
          if ((v121 & 1) != (v123 & 1))
            goto LABEL_57;
          v120 = v122;
        }
        v181 = v115;
        if ((v121 & 1) != 0)
        {
          v124 = *(_QWORD *)(v178 + 72) * v120;
          v125 = v163;
          OUTLINED_FUNCTION_111_0(*(_QWORD *)(v184 + 56) + v124, v163);
          OUTLINED_FUNCTION_111_0(v175, *(_QWORD *)(v184 + 56) + v124);
          __swift_storeEnumTagSinglePayload(v125, 0, 1, v165);
        }
        else
        {
          OUTLINED_FUNCTION_306(v115 + 8 * (v120 >> 6));
          v127 = (_QWORD *)(v126 + 16 * v120);
          *v127 = v114;
          v127[1] = v113;
          OUTLINED_FUNCTION_111_0(v175, *(_QWORD *)(v115 + 56) + *(_QWORD *)(v178 + 72) * v120);
          v128 = *(_QWORD *)(v115 + 16);
          v119 = __OFADD__(v128, 1);
          v129 = v128 + 1;
          if (v119)
            goto LABEL_56;
          *(_QWORD *)(v115 + 16) = v129;
          v125 = v163;
          v130 = OUTLINED_FUNCTION_236();
          __swift_storeEnumTagSinglePayload(v130, v131, v132, v165);
          OUTLINED_FUNCTION_156();
        }
        OUTLINED_FUNCTION_152();
        outlined consume of DatabaseValue((uint64_t)v173, v103, v104);
        outlined destroy of UUID?(v125, &demangling cache variable for type metadata for StorableValue?);
        outlined destroy of StorableValue(v176, type metadata accessor for StorableValue);
        v17 = v177;
        outlined destroy of UUID?((uint64_t)v177, (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
        v84 = (uint64_t)v171 + (_QWORD)v174;
        v82 = v180 - 1;
        if (v180 == 1)
        {
          OUTLINED_FUNCTION_298();
          v1 = v183;
          v79 = v169;
          v75 = v160;
          v81 = v158;
          goto LABEL_38;
        }
      }
      v154 = OUTLINED_FUNCTION_239();
      outlined consume of DatabaseValue(v154, v155, v156);
      OUTLINED_FUNCTION_211_0();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_16_0();
      OUTLINED_FUNCTION_8_1();
      OUTLINED_FUNCTION_298();
      v73 = (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType);
      v74 = v177;
LABEL_50:
      outlined destroy of UUID?((uint64_t)v74, v73);
    }
LABEL_51:
    OUTLINED_FUNCTION_9();
  }
}

void OUTLINED_FUNCTION_92(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 168) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_92_0()
{
  return checkForErrorAndConsumeState(state:)();
}

void OUTLINED_FUNCTION_92_1(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with copy of Date?(a1, a2, v2);
}

ValueMetadata *OUTLINED_FUNCTION_125()
{
  return type metadata accessor for MaterializedView();
}

uint64_t OUTLINED_FUNCTION_125_0()
{
  return type metadata accessor for OSSignpostError();
}

uint64_t OUTLINED_FUNCTION_125_1()
{
  return swift_willThrow();
}

void OUTLINED_FUNCTION_125_2()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x2820455245485720;
  v0._object = (void *)0xE90000000000000ALL;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_132()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_132_1(uint64_t a1)
{
  unint64_t v1;

  return outlined consume of Data?(a1, v1);
}

void specialized _arrayForceCast<A, B>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_82_1();
  v4 = v3;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SQLDataType));
  v5 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_52_4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
  OUTLINED_FUNCTION_274();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_199_0();
  if (v2)
  {
    OUTLINED_FUNCTION_272();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_341();
    v7 = *(_QWORD *)(v5 + 72);
    v8 = v13;
    do
    {
      outlined init with copy of Date?(v4, v0, &demangling cache variable for type metadata for (String, SQLDataType));
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_89_0();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v8 = v13;
      }
      v9 = *(_QWORD *)(v8 + 16);
      if (v9 >= *(_QWORD *)(v8 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v8 = v13;
      }
      *(_QWORD *)(v8 + 16) = v9 + 1;
      OUTLINED_FUNCTION_264();
      outlined init with take of UUID?(v1, v10 + v11 * v9, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      v4 += v7;
      --v2;
    }
    while (v2);
  }
  OUTLINED_FUNCTION_55();
}

uint64_t OUTLINED_FUNCTION_171@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v2, v3, v1);
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_11_1();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_46_0();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_10_3();
    }
  }
  else
  {
    v6 = a2;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (v6 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = v6;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : StorableValue]>);
    v11 = (char *)OUTLINED_FUNCTION_40_0();
    _swift_stdlib_malloc_size(v11);
    OUTLINED_FUNCTION_110_0();
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = v12;
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  if ((a1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v9, v13);
    *(_QWORD *)(a4 + 16) = 0;
    OUTLINED_FUNCTION_64();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (unint64_t)v13, a4);
  }
  OUTLINED_FUNCTION_1_6();
}

{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_11_1();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_46_0();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_10_3();
    }
  }
  else
  {
    v6 = a2;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (v6 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = v6;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Aggregation>);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  if ((a1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v9, v13);
    *(_QWORD *)(a4 + 16) = 0;
    OUTLINED_FUNCTION_64();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (unint64_t)v13, a4);
  }
  OUTLINED_FUNCTION_1_8();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : StorableValue]);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Aggregation);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_153(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 296) = result;
  return result;
}

void OUTLINED_FUNCTION_153_0(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  outlined init with copy of StorableValue(a1, *(_QWORD *)(a3 - 256), a2);
}

uint64_t OUTLINED_FUNCTION_139@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_139_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_139_1()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_139_2()
{
  uint64_t v0;

  return v0;
}

void sub_18D82AC80(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18D82AFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18D82B238(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void specialized static Array._adoptStorage(_:count:)(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 2 * a2;
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_1();
}

void specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_8_5();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
      *(_QWORD *)(OUTLINED_FUNCTION_75_2() + 16) = a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
    OUTLINED_FUNCTION_33_3();
    OUTLINED_FUNCTION_0_0();
  }
}

{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_8_5();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      OUTLINED_FUNCTION_123();
      *(_QWORD *)(OUTLINED_FUNCTION_75_2() + 16) = a1;
    }
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_33_3();
    OUTLINED_FUNCTION_0_0();
  }
}

{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_8_5();
    __break(1u);
  }
  else
  {
    if (a1)
      *(_QWORD *)(static Array._allocateBufferUninitialized(minimumCapacity:)() + 16) = a1;
    OUTLINED_FUNCTION_0_0();
  }
}

void OUTLINED_FUNCTION_59(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of UUID?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_59_0()
{
  uint64_t v0;

  return v0 + 16;
}

uint64_t OUTLINED_FUNCTION_59_2()
{
  return swift_getEnumCaseMultiPayload();
}

ValueMetadata *OUTLINED_FUNCTION_59_3()
{
  return type metadata accessor for MaterializedView();
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t result;
  char v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t k;
  uint64_t v95;
  char v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  int64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  int64_t v135;
  unint64_t v136;
  unint64_t i;
  int64_t v138;
  unint64_t v139;
  int64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t j;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  BOOL v174;
  _QWORD *v175;
  uint64_t v176;
  Swift::UInt v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  char v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD v199[7];
  uint64_t *v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  int v208;
  int v209;
  int v210;
  uint64_t v211;
  int v212;
  int v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char v231[8];
  char v232[8];
  char v233[8];
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;

  v216 = a2;
  v204 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_6_1();
  v224 = v4;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_61();
  v226 = v7;
  v8 = type metadata accessor for TimeZone();
  OUTLINED_FUNCTION_160(v8, (uint64_t)&v236);
  OUTLINED_FUNCTION_3_6(v9);
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_12(v13);
  v14 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  OUTLINED_FUNCTION_160(v14, (uint64_t)&v235);
  OUTLINED_FUNCTION_3_6(v15);
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_13();
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)v199 - v19;
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_61();
  v22 = v21;
  v23 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
  OUTLINED_FUNCTION_160(v23, (uint64_t)&v234);
  OUTLINED_FUNCTION_3_6(v24);
  MEMORY[0x1E0C80A78](v25);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v26);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v27);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_12(v28);
  v29 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
  OUTLINED_FUNCTION_160(v29, (uint64_t)v233);
  OUTLINED_FUNCTION_3_6(v30);
  MEMORY[0x1E0C80A78](v31);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v32);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v33);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_12(v34);
  v35 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  OUTLINED_FUNCTION_160(v35, (uint64_t)v232);
  OUTLINED_FUNCTION_3_6(v36);
  MEMORY[0x1E0C80A78](v37);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v38);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v39);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_12(v40);
  v41 = type metadata accessor for Date.ISO8601FormatStyle();
  OUTLINED_FUNCTION_160(v41, (uint64_t)v231);
  OUTLINED_FUNCTION_3_6(v42);
  MEMORY[0x1E0C80A78](v43);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v44);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v45);
  OUTLINED_FUNCTION_61();
  v211 = v46;
  v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_160(v47, (uint64_t)&v237);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v48);
  OUTLINED_FUNCTION_114();
  v221 = v50 - v49;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v51);
  OUTLINED_FUNCTION_6_1();
  v227 = v52;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v53);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v54);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v55);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v56);
  OUTLINED_FUNCTION_53();
  v225 = v57;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v58);
  OUTLINED_FUNCTION_61();
  v223 = v59;
  v230 = OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_3_6(*(_QWORD *)(v230 - 8));
  v61 = MEMORY[0x1E0C80A78](v60);
  v63 = (char *)v199 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = MEMORY[0x1E0C80A78](v61);
  v66 = (char *)v199 - v65;
  MEMORY[0x1E0C80A78](v64);
  OUTLINED_FUNCTION_53();
  v228 = v67;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v68);
  OUTLINED_FUNCTION_53();
  v229 = v69;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v70);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  v72 = MEMORY[0x1E0C80A78](v71);
  v74 = (char *)v199 - v73;
  v75 = MEMORY[0x1E0C80A78](v72);
  v77 = (char *)v199 - v76;
  result = MEMORY[0x1E0C80A78](v75);
  v81 = (char *)v199 - v80;
  v200 = v2;
  v82 = *(_QWORD *)(*v2 + 16);
  v83 = *(_QWORD *)(*v2 + 24);
  v214 = (_QWORD *)*v2;
  if (v83 > v82 && (v79 & 1) != 0)
  {
    v84 = v204;
    goto LABEL_4;
  }
  v199[1] = v20;
  if ((v79 & 1) == 0)
  {
    v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<[StorableValue]>);
    v123 = v214;
    if (v83 > v82)
    {
      v124 = static _SetStorage.copy(original:)();
      v84 = v204;
      if (!v123[2])
        goto LABEL_112;
      OUTLINED_FUNCTION_76_1();
      v126 = v123 + 7;
      v128 = (unint64_t)(v127 + 63) >> 6;
      if ((_QWORD *)v124 != v123 || v125 >= &v123[v128 + 7])
        memmove(v125, v123 + 7, 8 * v128);
      v130 = 0;
      *(_QWORD *)(v124 + 16) = v123[2];
      OUTLINED_FUNCTION_76_1();
      v132 = v123[7];
      v133 = -1;
      if (v131 < 64)
        v133 = ~(-1 << v131);
      v134 = v133 & v132;
      v135 = (unint64_t)(v131 + 63) >> 6;
      if ((v133 & v132) == 0)
        goto LABEL_55;
LABEL_54:
      v136 = __clz(__rbit64(v134));
      v134 &= v134 - 1;
      for (i = v136 | (v130 << 6); ; i = __clz(__rbit64(v139)) + (v130 << 6))
      {
        *(_QWORD *)(*(_QWORD *)(v124 + 48) + 8 * i) = *(_QWORD *)(v123[6] + 8 * i);
        swift_bridgeObjectRetain();
        if (v134)
          goto LABEL_54;
LABEL_55:
        v138 = v130 + 1;
        if (__OFADD__(v130, 1))
          goto LABEL_140;
        if (v138 >= v135)
          goto LABEL_112;
        v139 = v126[v138];
        ++v130;
        if (!v139)
        {
          v130 = v138 + 1;
          if (v138 + 1 >= v135)
            goto LABEL_112;
          v139 = v126[v130];
          if (!v139)
          {
            v130 = v138 + 2;
            if (v138 + 2 >= v135)
              goto LABEL_112;
            v139 = v126[v130];
            if (!v139)
            {
              v130 = v138 + 3;
              if (v138 + 3 >= v135)
                goto LABEL_112;
              v139 = v126[v130];
              if (!v139)
              {
                v140 = v138 + 4;
                if (v140 >= v135)
                  goto LABEL_112;
                v139 = v126[v140];
                if (!v139)
                {
                  while (1)
                  {
                    v130 = v140 + 1;
                    if (__OFADD__(v140, 1))
                      goto LABEL_144;
                    if (v130 >= v135)
                      break;
                    v139 = v126[v130];
                    ++v140;
                    if (v139)
                      goto LABEL_70;
                  }
LABEL_112:
                  result = swift_release();
                  *v200 = v124;
LABEL_4:
                  v85 = v216;
                  goto LABEL_134;
                }
                v130 = v140;
              }
            }
          }
        }
LABEL_70:
        v134 = (v139 - 1) & v139;
      }
    }
    v199[0] = v74;
    v141 = v122;
    v89 = static _SetStorage.resize(original:capacity:move:)();
    v142 = v204;
    if (!v123[2])
      goto LABEL_117;
    OUTLINED_FUNCTION_76_1();
    OUTLINED_FUNCTION_21_4();
    v202 = v143;
    v213 = *MEMORY[0x1E0CB05F0];
    v212 = *MEMORY[0x1E0CB05E0];
    LODWORD(v211) = *MEMORY[0x1E0CB0600];
    v207 = *MEMORY[0x1E0CB0628];
    v206 = v89 + 56;
    swift_retain();
    OUTLINED_FUNCTION_74_1();
    v216 = v89;
    if (!v141)
      goto LABEL_76;
    while (1)
    {
      OUTLINED_FUNCTION_68_2();
      v223 = v141;
      v218 = v145;
      for (j = v146 | (v145 << 6); ; j = v157 + (v156 << 6))
      {
        v158 = *(_QWORD *)(v123[6] + 8 * j);
        OUTLINED_FUNCTION_32();
        OUTLINED_FUNCTION_13_6(*(_QWORD *)(v158 + 16));
        v159 = *(_QWORD *)(v158 + 16);
        v220 = v158;
        if (v159)
        {
          OUTLINED_FUNCTION_63_3();
          v162 = v158 + (v161 & ~v160);
          swift_bridgeObjectRetain();
          v226 = *(_QWORD *)(v142 + 72);
          outlined init with copy of StorableValue(v162, (uint64_t)v66);
          outlined init with copy of StorableValue((uint64_t)v66, (uint64_t)v63);
          v163 = (char *)&loc_18D82E17C + dword_18D93D2EC[OUTLINED_FUNCTION_59_2()];
          __asm { BR              X9 }
        }
        swift_bridgeObjectRetain();
        Hasher._finalize()();
        OUTLINED_FUNCTION_27_3();
        v142 = v204;
        if (((v166 << v165) & ~*(_QWORD *)(v206 + 8 * v164)) != 0)
        {
          OUTLINED_FUNCTION_62();
          v123 = v214;
          v141 = v223;
          v169 = v220;
        }
        else
        {
          OUTLINED_FUNCTION_61_3();
          v123 = v214;
          v141 = v223;
          do
          {
            if (++v171 == v172 && (v170 & 1) != 0)
              goto LABEL_138;
            v174 = v171 == v172;
            if (v171 == v172)
              v171 = 0;
            v170 |= v174;
          }
          while (*(_QWORD *)(v173 + 8 * v171) == -1);
          OUTLINED_FUNCTION_58();
        }
        *(_QWORD *)(v168 + ((v167 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v167;
        *(_QWORD *)(*(_QWORD *)(v89 + 48) + 8 * v167) = v169;
        ++*(_QWORD *)(v89 + 16);
        v144 = v218;
        if (v141)
          break;
LABEL_76:
        if (__OFADD__(v144, 1))
          goto LABEL_141;
        OUTLINED_FUNCTION_67();
        if (v96 == v97)
          goto LABEL_114;
        if (!*(_QWORD *)(v201 + 8 * v148))
        {
          OUTLINED_FUNCTION_19_4();
          if (v96 == v97)
            goto LABEL_114;
          OUTLINED_FUNCTION_28_3();
          if (!v149)
          {
            OUTLINED_FUNCTION_19_4();
            if (v96 == v97)
              goto LABEL_114;
            OUTLINED_FUNCTION_28_3();
            if (!v150)
            {
              OUTLINED_FUNCTION_19_4();
              if (v96 == v97)
                goto LABEL_114;
              OUTLINED_FUNCTION_28_3();
              if (!v151)
              {
                OUTLINED_FUNCTION_67();
                if (v96 == v97)
                  goto LABEL_114;
                if (!*(_QWORD *)(v201 + 8 * v152))
                {
                  while (1)
                  {
                    if (__OFADD__(v152, 1))
                      goto LABEL_145;
                    OUTLINED_FUNCTION_19_4();
                    if (v96 == v97)
                      break;
                    OUTLINED_FUNCTION_28_3();
                    v152 = v153 + 1;
                    if (v154)
                      goto LABEL_96;
                  }
LABEL_114:
                  swift_release_n();
                  goto LABEL_118;
                }
              }
            }
          }
        }
LABEL_96:
        OUTLINED_FUNCTION_64_2();
        v223 = v155;
        v218 = v156;
      }
    }
  }
  v199[0] = v74;
  v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<[StorableValue]>);
  v87 = v214;
  v88 = v86;
  v89 = static _SetStorage.resize(original:capacity:move:)();
  if (!v87[2])
  {
    swift_release();
    v142 = v204;
    goto LABEL_118;
  }
  OUTLINED_FUNCTION_21_4();
  v201 = v90;
  v210 = *MEMORY[0x1E0CB05F0];
  v209 = *MEMORY[0x1E0CB05E0];
  v208 = *MEMORY[0x1E0CB0600];
  v207 = *MEMORY[0x1E0CB0628];
  v205 = v89 + 56;
  swift_retain();
  v91 = 0;
  v206 = v22;
  v216 = v89;
  if (!v88)
    goto LABEL_9;
LABEL_8:
  OUTLINED_FUNCTION_68_2();
  v219 = v88;
  v215 = v92;
  for (k = v93 | (v92 << 6); ; k = v106 + (v105 << 6))
  {
    v107 = *(_QWORD *)(v214[6] + 8 * k);
    OUTLINED_FUNCTION_32();
    OUTLINED_FUNCTION_13_6(*(_QWORD *)(v107 + 16));
    v224 = v107;
    v89 = *(_QWORD *)(v107 + 16);
    if (v89)
    {
      OUTLINED_FUNCTION_41_3();
      v227 = *(_QWORD *)(v108 + 72);
      outlined init with copy of StorableValue(v224 + v109, (uint64_t)v81);
      outlined init with copy of StorableValue((uint64_t)v81, (uint64_t)v77);
      v110 = (char *)&loc_18D82D9A4 + dword_18D93D30C[OUTLINED_FUNCTION_59_2()];
      __asm { BR              X9 }
    }
    Hasher._finalize()();
    OUTLINED_FUNCTION_27_3();
    if (((v113 << v112) & ~*(_QWORD *)(v205 + 8 * v111)) != 0)
    {
      OUTLINED_FUNCTION_62();
      v116 = 1;
      v88 = v219;
    }
    else
    {
      OUTLINED_FUNCTION_61_3();
      v88 = v219;
      do
      {
        if (++v118 == v119 && (v117 & 1) != 0)
          goto LABEL_137;
        v121 = v118 == v119;
        if (v118 == v119)
          v118 = 0;
        v117 |= v121;
      }
      while (*(_QWORD *)(v120 + 8 * v118) == -1);
      OUTLINED_FUNCTION_58();
    }
    *(_QWORD *)(v115 + ((v114 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= v116 << v114;
    *(_QWORD *)(MEMORY[0x30] + 8 * v114) = v224;
    ++MEMORY[0x10];
    v91 = v215;
    if (v88)
      goto LABEL_8;
LABEL_9:
    if (__OFADD__(v91, 1))
    {
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
      JUMPOUT(0x18D82EC38);
    }
    OUTLINED_FUNCTION_67();
    if (v96 == v97)
      goto LABEL_110;
    if (!v202[v95])
    {
      OUTLINED_FUNCTION_19_4();
      if (v96 == v97)
        goto LABEL_110;
      OUTLINED_FUNCTION_23_2();
      if (!v98)
      {
        OUTLINED_FUNCTION_19_4();
        if (v96 == v97)
          goto LABEL_110;
        OUTLINED_FUNCTION_23_2();
        if (!v99)
        {
          OUTLINED_FUNCTION_19_4();
          if (v96 == v97)
            goto LABEL_110;
          OUTLINED_FUNCTION_23_2();
          if (!v100)
            break;
        }
      }
    }
LABEL_29:
    OUTLINED_FUNCTION_64_2();
    v219 = v104;
    v215 = v105;
  }
  OUTLINED_FUNCTION_67();
  if (v96 != v97)
  {
    if (!v202[v101])
    {
      while (!__OFADD__(v101, 1))
      {
        OUTLINED_FUNCTION_19_4();
        if (v96 == v97)
          goto LABEL_110;
        OUTLINED_FUNCTION_23_2();
        v101 = v102 + 1;
        if (v103)
          goto LABEL_29;
      }
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
      JUMPOUT(0x18D82EC50);
    }
    goto LABEL_29;
  }
LABEL_110:
  v175 = v214;
  swift_release();
  OUTLINED_FUNCTION_76_1();
  v142 = v204;
  if (v176 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v176 + 63) >> 6, v202);
  else
    *v202 = -1 << v176;
  v175[2] = 0;
LABEL_117:
  swift_release();
LABEL_118:
  *v200 = v89;
  OUTLINED_FUNCTION_32();
  v177 = *(_QWORD *)(v142 + 16);
  Hasher._combine(_:)(v177);
  v178 = *(_QWORD *)(v142 + 16);
  v179 = v203;
  v216 = v89;
  v180 = v199[0];
  if (v178)
  {
    OUTLINED_FUNCTION_41_3();
    LODWORD(v225) = *MEMORY[0x1E0CB05F0];
    LODWORD(v224) = *MEMORY[0x1E0CB05E0];
    LODWORD(v223) = *MEMORY[0x1E0CB0600];
    v222 = *MEMORY[0x1E0CB0628];
    v227 = *(_QWORD *)(v182 + 72);
    outlined init with copy of StorableValue(v204 + v181, v180);
    outlined init with copy of StorableValue(v180, v217);
    v183 = (char *)&loc_18D82E724 + dword_18D93D32C[OUTLINED_FUNCTION_59_2()];
    __asm { BR              X9 }
  }
  result = Hasher._finalize()();
  v184 = -1 << *(_BYTE *)(v89 + 32);
  v85 = result & ~v184;
  v185 = v89 + 56;
  if (((*(_QWORD *)(v89 + 56 + ((v85 >> 3) & 0xFFFFFFFFFFFFF8)) >> v85) & 1) == 0)
  {
    v84 = v204;
    goto LABEL_134;
  }
  v186 = ~v184;
  v84 = v204;
  v230 = v89 + 56;
  v227 = ~v184;
  v187 = v228;
  while (2)
  {
    v188 = *(_QWORD *)(*(_QWORD *)(v89 + 48) + 8 * v85);
    if (*(_QWORD *)(v188 + 16) != v177)
      goto LABEL_131;
    if (!v177 || v188 == v84)
    {
LABEL_146:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_147;
    }
    OUTLINED_FUNCTION_63_3();
    v191 = v190 & ~v189;
    swift_bridgeObjectRetain();
    v192 = 0;
    v193 = *(_QWORD *)(v179 + 72);
    while (1)
    {
      v179 = v229;
      outlined init with copy of StorableValue(v188 + v191, v229);
      if (v192 >= *(_QWORD *)(v84 + 16))
      {
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_147:
        JUMPOUT(0x18D82EC10);
      }
      outlined init with copy of StorableValue(v84 + v191, v187);
      static StorableValue.== infix(_:_:)(v179, v187);
      v195 = v194;
      outlined destroy of StorableValue(v187);
      outlined destroy of StorableValue(v179);
      if ((v195 & 1) == 0)
        break;
      ++v192;
      v191 += v193;
      if (v177 == v192)
      {
        OUTLINED_FUNCTION_24();
        goto LABEL_146;
      }
    }
    result = OUTLINED_FUNCTION_24();
    v89 = v216;
    v185 = v230;
    v186 = v227;
LABEL_131:
    v85 = (v85 + 1) & v186;
    if (((*(_QWORD *)(v185 + ((v85 >> 3) & 0xFFFFFFFFFFFFF8)) >> v85) & 1) != 0)
      continue;
    break;
  }
LABEL_134:
  v196 = *v200;
  *(_QWORD *)(v196 + 8 * (v85 >> 6) + 56) |= 1 << v85;
  *(_QWORD *)(*(_QWORD *)(v196 + 48) + 8 * v85) = v84;
  v197 = *(_QWORD *)(v196 + 16);
  v97 = __OFADD__(v197, 1);
  v198 = v197 + 1;
  if (v97)
    goto LABEL_142;
  *(_QWORD *)(v196 + 16) = v198;
  return result;
}

uint64_t SelectCorePhysicalPlan.update(metadata:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  ValueMetadata *v15;
  void (**v16)(_QWORD, ValueMetadata *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  _QWORD *v35;
  void (*v36)(char *, uint64_t, ValueMetadata *);
  ValueMetadata *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  id v46;
  char *v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  ValueMetadata *v55;
  void *v56;
  uint64_t v57;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (**v70)(_QWORD, ValueMetadata *);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t i;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  void *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  ValueMetadata *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  uint64_t v118;
  _BOOL8 v119;
  Swift::Int v120;
  unint64_t v121;
  char v122;
  unint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  char v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  char v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t result;
  uint64_t v157[2];
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  ValueMetadata *v170;
  void (*v171)(uint64_t, unint64_t, ValueMetadata *);
  id v172;
  uint64_t v173;
  uint64_t *v174;
  ValueMetadata *v175;
  uint64_t v176;
  ValueMetadata *v177;
  void (**v178)(_QWORD, ValueMetadata *);
  void *Description;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD v187[2];
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  _QWORD *v192;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_6_1();
  v168 = v4;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_61();
  v182 = v6;
  OUTLINED_FUNCTION_87();
  v175 = type metadata accessor for SQLExpression();
  Description = v175[-1].Description;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_90(v8, v157[0]);
  v184 = OUTLINED_FUNCTION_123();
  v173 = *(_QWORD *)(v184 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_6_1();
  v167 = v10;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v11);
  v185 = (uint64_t)v157 - v12;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_61();
  v174 = v14;
  OUTLINED_FUNCTION_87();
  v15 = type metadata accessor for ResultColumn();
  v16 = (void (**)(_QWORD, ValueMetadata *))v15[-1].Description;
  v177 = v15;
  v178 = v16;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v17);
  OUTLINED_FUNCTION_14_2(v18, v157[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v19);
  OUTLINED_FUNCTION_8();
  v160 = (uint64_t *)v20;
  OUTLINED_FUNCTION_87();
  v170 = type metadata accessor for SelectCore();
  v21 = v170[-1].Description;
  v22 = v21[8];
  v23 = MEMORY[0x1E0C80A78](v170);
  v24 = (char *)v157 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = MEMORY[0x193FECD2C](v23);
  v25 = (int *)type metadata accessor for SelectCorePhysicalPlan(0);
  v26 = v25[5];
  v27 = *(void **)(v1 + v25[6]);
  v28 = v25[8];
  v158 = v25[7];
  v180 = *(_QWORD *)(v1 + v158);
  v29 = v1 + v26;
  v162 = v1;
  v159 = v28;
  v171 = *(void (**)(uint64_t, unint64_t, ValueMetadata *))(v1 + v28);
  v30 = OUTLINED_FUNCTION_150();
  *(_QWORD *)(OUTLINED_FUNCTION_153(v30) + 16) = MEMORY[0x1E0DEE9D8];
  v31 = OUTLINED_FUNCTION_150();
  *(_QWORD *)(v31 + 16) = 0;
  v172 = objc_msgSend(v27, sel_publisher);
  v32 = a1 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_bookmark;
  v165 = *(_QWORD *)(v32 + *(int *)(type metadata accessor for BookmarkCache(0) + 20));
  v33 = (_QWORD *)OUTLINED_FUNCTION_150();
  v33[2] = v27;
  v33[3] = v31;
  v33[4] = a1;
  v191 = partial apply for closure #1 in scan(stream:metadata:maxBatchSize:selectCore:expressionEvaluator:);
  v192 = v33;
  v188 = MEMORY[0x1E0C809B0];
  v189 = 1107296256;
  v166 = (char *)OUTLINED_FUNCTION_148((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion, @guaranteed BMBookmark) -> ());
  swift_unknownObjectRetain();
  v34 = v27;
  swift_retain();
  v183 = a1;
  swift_retain();
  swift_release();
  v35 = v21;
  v164 = (uint64_t)v21;
  v36 = (void (*)(char *, uint64_t, ValueMetadata *))v21[2];
  v161 = v29;
  v37 = v170;
  v36(v24, v29, v170);
  v38 = (*((unsigned __int8 *)v35 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v35 + 80);
  v39 = (v22 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  v40 = (v39 + 15) & 0xFFFFFFFFFFFFFFF8;
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 16) = v34;
  *(_QWORD *)(v41 + 24) = v31;
  (*(void (**)(unint64_t, char *, ValueMetadata *))(v164 + 32))(v41 + v38, v24, v37);
  *(_QWORD *)(v41 + v39) = v171;
  v42 = v169;
  *(_QWORD *)(v41 + v40) = v169;
  *(_QWORD *)(v41 + ((v40 + 15) & 0xFFFFFFFFFFFFFFF8)) = v180;
  v191 = partial apply for closure #2 in scan(stream:metadata:maxBatchSize:selectCore:expressionEvaluator:);
  v192 = (_QWORD *)v41;
  v188 = MEMORY[0x1E0C809B0];
  v189 = 1107296256;
  v43 = OUTLINED_FUNCTION_148((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Swift.AnyObject) -> (@unowned Bool));
  v44 = v34;
  swift_retain();
  swift_retain();
  v45 = v42;
  swift_retain();
  swift_release();
  v46 = v172;
  v47 = v166;
  v48 = objc_msgSend(v172, sel_drivableSinkWithBookmark_completion_shouldContinue_, v165, v166, v43);
  _Block_release(v43);
  _Block_release(v47);

  swift_unknownObjectRelease();
  v49 = *(void **)(v31 + 16);
  if (v49)
  {
    v50 = v49;
    swift_willThrow();
    OUTLINED_FUNCTION_96();
    swift_release();
    goto LABEL_76;
  }
  v51 = v186;
  v52 = *(uint64_t **)(v45 + 16);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_96();
  swift_release();
  v157[1] = v52[2];
  v53 = v161;
  v54 = SelectCore.groupBy.getter();
  if (!v54)
  {
    v69 = v162;
    v70 = v178;
    isUniquelyReferenced_nonNull_native = v181;
    v66 = MEMORY[0x1E0DEE9D8];
LABEL_43:
    v99 = SelectCore.select.getter();
    v100 = v52[2];
    if (!v100)
    {
      OUTLINED_FUNCTION_106();
      OUTLINED_FUNCTION_24();
      v45 = MEMORY[0x1E0DEE9D8];
LABEL_76:
      OUTLINED_FUNCTION_129();
      return v45;
    }
    v170 = *(ValueMetadata **)(v69 + v159);
    v188 = v66;
    v101 = v99;
    v159 = v100;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v100, 0);
    v164 = v101;
    v161 = *(_QWORD *)(v101 + 16);
    v102 = 0;
    v166 = (char *)v52;
    v160 = v52 + 4;
    while (1)
    {
      v103 = (unsigned __int8 *)&v160[2 * v102];
      LODWORD(v165) = *v103;
      v104 = (void *)*((_QWORD *)v103 + 1);
      swift_bridgeObjectRetain_n();
      v183 = Dictionary.init(dictionaryLiteral:)();
      v105 = v161;
      if (v161)
        break;
LABEL_69:
      OUTLINED_FUNCTION_24();
      OUTLINED_FUNCTION_106();
      v45 = v188;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_98(0, *(_QWORD *)(v45 + 16) + 1);
        v45 = v188;
      }
      v151 = v159;
      v152 = v165;
      v154 = *(_QWORD *)(v45 + 16);
      v153 = *(_QWORD *)(v45 + 24);
      if (v154 >= v153 >> 1)
      {
        OUTLINED_FUNCTION_98(v153 > 1, v154 + 1);
        v151 = v159;
        v45 = v188;
      }
      ++v102;
      *(_QWORD *)(v45 + 16) = v154 + 1;
      v155 = v45 + 16 * v154;
      *(_BYTE *)(v155 + 32) = v152;
      *(_QWORD *)(v155 + 40) = v183;
      isUniquelyReferenced_nonNull_native = v181;
      if (v102 == v151)
      {
        OUTLINED_FUNCTION_16_0();
        OUTLINED_FUNCTION_16_0();
        goto LABEL_76;
      }
    }
    v157[0] = v102;
    v186 = v51;
    v106 = v164 + ((*((unsigned __int8 *)v70 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v70 + 80));
    swift_bridgeObjectRetain();
    v169 = (uint64_t)v70[9];
    v171 = (void (*)(uint64_t, unint64_t, ValueMetadata *))v70[2];
    v107 = v105;
    v172 = v104;
    v108 = v104;
    v110 = v176;
    v109 = v177;
    while (1)
    {
      v171(v110, v106, v109);
      v111 = ResultColumn.name.getter();
      v113 = v112;
      ResultColumn.expression.getter(isUniquelyReferenced_nonNull_native);
      v114 = v174;
      v115 = v186;
      SQLExpressionEvaluator.execute(expression:payload:)(isUniquelyReferenced_nonNull_native, (uint64_t)v172, v174);
      v186 = v115;
      if (v115)
      {
        OUTLINED_FUNCTION_45();
        OUTLINED_FUNCTION_126();
        v178[1](v176, v177);
        OUTLINED_FUNCTION_16_0();
        OUTLINED_FUNCTION_106();
        swift_bridgeObjectRelease();
        v45 = v164;
        OUTLINED_FUNCTION_24();
        OUTLINED_FUNCTION_16_0();
        OUTLINED_FUNCTION_24();
        swift_release();
        goto LABEL_76;
      }
      OUTLINED_FUNCTION_126();
      outlined init with take of StorableValue((uint64_t)v114, v185, type metadata accessor for StorableValue);
      OUTLINED_FUNCTION_100();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v187[0] = v108;
      v116 = OUTLINED_FUNCTION_103();
      v118 = v108[2];
      v119 = (v117 & 1) == 0;
      v120 = v118 + v119;
      if (__OFADD__(v118, v119))
      {
        __break(1u);
        goto LABEL_79;
      }
      v121 = v116;
      v122 = v117;
      v180 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v120))
      {
        v123 = specialized __RawDictionaryStorage.find<A>(_:)();
        if ((v122 & 1) != (v124 & 1))
          goto LABEL_94;
        v121 = v123;
      }
      v108 = (_QWORD *)v187[0];
      if ((v122 & 1) != 0)
      {
        v125 = OUTLINED_FUNCTION_88();
        outlined assign with take of StorableValue(v125, v126);
        v127 = v182;
      }
      else
      {
        *(_QWORD *)(v187[0] + 8 * (v121 >> 6) + 64) |= 1 << v121;
        v128 = (uint64_t *)(v108[6] + 16 * v121);
        *v128 = v111;
        v128[1] = v113;
        v129 = OUTLINED_FUNCTION_88();
        outlined init with take of StorableValue(v129, v130, type metadata accessor for StorableValue);
        v131 = v108[2];
        v132 = __OFADD__(v131, 1);
        v133 = v131 + 1;
        v127 = v182;
        if (v132)
          goto LABEL_91;
        v108[2] = v133;
        OUTLINED_FUNCTION_100();
      }
      OUTLINED_FUNCTION_45();
      OUTLINED_FUNCTION_152();
      v110 = v176;
      if (!v108[2])
        break;
      OUTLINED_FUNCTION_100();
      v134 = OUTLINED_FUNCTION_103();
      if ((v135 & 1) != 0)
      {
        v127 = v182;
        outlined init with copy of StorableValue(v108[7] + isUniquelyReferenced_nonNull_native * v134, v182, type metadata accessor for StorableValue);
        v136 = 0;
      }
      else
      {
        v136 = 1;
        v127 = v182;
      }
      v137 = v184;
      __swift_storeEnumTagSinglePayload(v127, v136, 1, v184);
      OUTLINED_FUNCTION_45();
      if (__swift_getEnumTagSinglePayload(v127, 1, v137) == 1)
        goto LABEL_62;
      v147 = v127;
      v148 = v167;
      outlined init with take of StorableValue(v147, v167, type metadata accessor for StorableValue);
      v149 = v183;
      v150 = swift_isUniquelyReferenced_nonNull_native();
      v187[0] = v149;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v148, v111, v113, v150);
      v183 = v187[0];
      OUTLINED_FUNCTION_45();
      OUTLINED_FUNCTION_152();
      OUTLINED_FUNCTION_162();
LABEL_67:
      v109 = v177;
      v178[1](v110, v177);
      v106 += v169;
      if (!--v107)
      {
        OUTLINED_FUNCTION_16_0();
        v51 = v186;
        v70 = v178;
        v102 = v157[0];
        goto LABEL_69;
      }
    }
    __swift_storeEnumTagSinglePayload(v127, 1, 1, v184);
LABEL_62:
    outlined destroy of UUID?(v127, &demangling cache variable for type metadata for StorableValue?);
    v138 = v183;
    swift_bridgeObjectRetain();
    v139 = specialized __RawDictionaryStorage.find<A>(_:)();
    v141 = v140;
    swift_bridgeObjectRelease();
    if ((v141 & 1) != 0)
    {
      v142 = swift_isUniquelyReferenced_nonNull_native();
      v187[0] = v138;
      _NativeDictionary.ensureUnique(isUnique:capacity:)(v142, *(_QWORD *)(v138 + 24));
      v143 = v187[0];
      swift_bridgeObjectRelease();
      v144 = v168;
      outlined init with take of StorableValue(*(_QWORD *)(v143 + 56) + isUniquelyReferenced_nonNull_native * v139, v168, type metadata accessor for StorableValue);
      v183 = v143;
      v145 = v184;
      _NativeDictionary._delete(at:)();
      OUTLINED_FUNCTION_152();
      OUTLINED_FUNCTION_162();
    }
    else
    {
      v144 = v168;
      OUTLINED_FUNCTION_162();
      v145 = v184;
    }
    __swift_storeEnumTagSinglePayload(v144, v146, 1, v145);
    outlined destroy of UUID?(v144, &demangling cache variable for type metadata for StorableValue?);
    OUTLINED_FUNCTION_45();
    goto LABEL_67;
  }
  v55 = (ValueMetadata *)v54;
  v166 = (char *)v52;
  selectAndHavingAggregateFunctions(selectCore:)(v53);
  v172 = v56;
  v171 = (void (*)(uint64_t, unint64_t, ValueMetadata *))SelectCore.select.getter();
  SelectCore.having.getter((uint64_t)v160);
  v57 = *(_QWORD *)(v162 + v159);
  v188 = (uint64_t)v55;
  v170 = v55;
  OUTLINED_FUNCTION_156();
  specialized MutableCollection<>.sort(by:)((uint64_t)&v188, (uint64_t (*)(_QWORD))type metadata accessor for SQLExpression, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
  isUniquelyReferenced_nonNull_native = v181;
  if (v51)
    goto LABEL_95;
  v51 = 0;
  v59 = v188;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : StorableValue]);
  lazy protocol witness table accessor for type [StorableValue] and conformance <A> [A]();
  v60 = OUTLINED_FUNCTION_81();
  v61 = OUTLINED_FUNCTION_81();
  v188 = MEMORY[0x1E0DEE9E8];
  v189 = v60;
  v190 = v61;
  v62 = v166;
  v63 = *((_QWORD *)v166 + 2);
  if (v63)
  {
    OUTLINED_FUNCTION_100();
    v64 = v62 + 40;
    v65 = (uint64_t)v160;
    v66 = MEMORY[0x1E0DEE9D8];
    do
    {
      v67 = *v64;
      LOBYTE(v187[0]) = *((_BYTE *)v64 - 8);
      v187[1] = v67;
      swift_bridgeObjectRetain();
      closure #2 in group(changes:by:metadata:aggregationFunctions:resultColumns:having:expressionEvaluator:)(&v188, (unsigned __int8 *)v187, v59, v57, v183, (uint64_t)v172, v65, v171);
      OUTLINED_FUNCTION_54();
      v64 += 2;
      --v63;
    }
    while (v63);
    OUTLINED_FUNCTION_96();
    OUTLINED_FUNCTION_45();
    v68 = v189;
    v164 = v188;
    v169 = v190;
    isUniquelyReferenced_nonNull_native = v181;
  }
  else
  {
    OUTLINED_FUNCTION_153(v61);
    OUTLINED_FUNCTION_96();
    v164 = MEMORY[0x1E0DEE9E8];
    v68 = v60;
    v66 = MEMORY[0x1E0DEE9D8];
  }
  v71 = *(_QWORD *)(v68 + 16);
  v165 = v68;
  if (!v71)
  {
    v157[0] = MEMORY[0x1E0DEE9D8];
    goto LABEL_27;
  }
  v186 = 0;
  v188 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_77();
  v72 = v165;
  v73 = v188;
  v74 = specialized Dictionary.startIndex.getter(v165);
  if ((v76 & 1) != 0)
    goto LABEL_92;
  v77 = v74;
  v78 = v72 + 64;
  v79 = v71 - 1;
  if (v74 < 0)
    goto LABEL_79;
  do
  {
    if (v77 >= 1 << *(_BYTE *)(v72 + 32))
      break;
    if ((*(_QWORD *)(v78 + 8 * ((unint64_t)v77 >> 6)) & (1 << v77)) == 0)
      goto LABEL_80;
    if (*(_DWORD *)(v72 + 36) != (_DWORD)v75)
      goto LABEL_81;
    v183 = v75;
    v180 = v79;
    v188 = v73;
    v81 = *(_QWORD *)(v73 + 16);
    v80 = *(_QWORD *)(v73 + 24);
    OUTLINED_FUNCTION_156();
    if (v81 >= v80 >> 1)
    {
      OUTLINED_FUNCTION_98(v80 > 1, v81 + 1);
      v72 = v165;
      v73 = v188;
    }
    *(_QWORD *)(v73 + 16) = v81 + 1;
    v82 = v73 + 16 * v81;
    *(_BYTE *)(v82 + 32) = 1;
    OUTLINED_FUNCTION_97(v82);
    if (v77 >= v83)
      goto LABEL_82;
    if ((*(_QWORD *)(v78 + 8 * ((unint64_t)v77 >> 6)) & (1 << v77)) == 0)
      goto LABEL_83;
    if (*(_DWORD *)(v72 + 36) != (_DWORD)v183)
      goto LABEL_84;
    v84 = _HashTable.occupiedBucket(after:)();
    if (!v180)
    {
      v157[0] = v73;
      OUTLINED_FUNCTION_24();
      v51 = v186;
      isUniquelyReferenced_nonNull_native = v181;
      v66 = MEMORY[0x1E0DEE9D8];
LABEL_27:
      v85 = *(_QWORD *)(v169 + 16);
      if (v85)
      {
        v186 = v51;
        v188 = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_77();
        v86 = v169;
        v87 = v188;
        v88 = specialized Dictionary.startIndex.getter(v169);
        if ((v90 & 1) != 0)
          goto LABEL_93;
        v91 = v88;
        v92 = v86 + 64;
        for (i = v85 - 1; ; i = v180 - 1)
        {
          if (v91 < 0 || v91 >= 1 << *(_BYTE *)(v86 + 32))
            goto LABEL_85;
          isUniquelyReferenced_nonNull_native = 1 << v91;
          if ((*(_QWORD *)(v92 + 8 * ((unint64_t)v91 >> 6)) & (1 << v91)) == 0)
            goto LABEL_86;
          if (*(_DWORD *)(v86 + 36) != (_DWORD)v89)
            goto LABEL_87;
          v183 = v89;
          v180 = i;
          v188 = v87;
          v95 = *(_QWORD *)(v87 + 16);
          v94 = *(_QWORD *)(v87 + 24);
          OUTLINED_FUNCTION_156();
          if (v95 >= v94 >> 1)
          {
            OUTLINED_FUNCTION_98(v94 > 1, v95 + 1);
            v86 = v169;
            v87 = v188;
          }
          *(_QWORD *)(v87 + 16) = v95 + 1;
          v96 = v87 + 16 * v95;
          *(_BYTE *)(v96 + 32) = 0;
          OUTLINED_FUNCTION_97(v96);
          if (v91 >= v97)
            goto LABEL_88;
          if ((*(_QWORD *)(v92 + 8 * ((unint64_t)v91 >> 6)) & isUniquelyReferenced_nonNull_native) == 0)
            goto LABEL_89;
          if (*(_DWORD *)(v86 + 36) != (_DWORD)v183)
            goto LABEL_90;
          v98 = _HashTable.occupiedBucket(after:)();
          if (!v180)
            break;
          v91 = v98;
          v89 = *(unsigned int *)(v86 + 36);
        }
        OUTLINED_FUNCTION_24();
        v51 = v186;
        OUTLINED_FUNCTION_162();
        v66 = MEMORY[0x1E0DEE9D8];
      }
      v188 = v157[0];
      specialized Array.append<A>(contentsOf:)();
      OUTLINED_FUNCTION_16_0();
      OUTLINED_FUNCTION_16_0();
      OUTLINED_FUNCTION_106();
      OUTLINED_FUNCTION_16_0();
      OUTLINED_FUNCTION_16_0();
      v52 = (uint64_t *)v188;
      OUTLINED_FUNCTION_16_0();
      OUTLINED_FUNCTION_16_0();
      outlined destroy of UUID?((uint64_t)v160, &demangling cache variable for type metadata for SQLExpression?);
      v69 = v162;
      v70 = v178;
      goto LABEL_43;
    }
    v77 = v84;
    v75 = *(unsigned int *)(v72 + 36);
    v79 = v180 - 1;
  }
  while ((v84 & 0x8000000000000000) == 0);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_95:
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t ResultColumn.name.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t countAndFlagsBits;
  _BYTE v4[80];

  v1 = *(_QWORD *)(v0 + 104);
  outlined init with copy of ResultColumn(v0, (uint64_t)v4);
  if (!v1)
    swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined destroy of ResultColumn((uint64_t)v4);
  countAndFlagsBits = String.lowercased()()._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t outlined destroy of ResultColumn(uint64_t a1)
{
  destroy for ResultColumn(a1);
  return a1;
}

uint64_t outlined init with copy of ResultColumn(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ResultColumn(a2, a1);
  return a2;
}

uint64_t SelectCore.select.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_82()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 72) + 8))(v1, v0);
}

void specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v8 = OUTLINED_FUNCTION_80_0(a1, a2, a3, a4, a5);
  v10 = (_QWORD *)(v9 + 16 * v8);
  *v10 = v11;
  v10[1] = v12;
  v14 = *(_QWORD *)(v13 + 56);
  v15 = OUTLINED_FUNCTION_123();
  outlined init with take of StorableValue(a4, v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * a1, type metadata accessor for StorableValue);
  v16 = *(_QWORD *)(a5 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    *(_QWORD *)(a5 + 16) = v18;
}

void OUTLINED_FUNCTION_27()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)(v1 + *(int *)(v0 + 44));
  *v2 = 7235949;
  v2[1] = 0xE300000000000000;
  v3 = v1 + *(int *)(v0 + 48);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
}

void OUTLINED_FUNCTION_27_0(void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;

  _os_signpost_emit_with_name_impl(a1, v5, a3, a4, a5, v6, v7, 2u);
}

uint64_t OUTLINED_FUNCTION_27_1()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = v1;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_27_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v2, a1);
}

uint64_t outlined assign with take of StorableValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StorableValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void *assignWithTake for StorableValue(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    outlined destroy of StorableValue((uint64_t)a1, type metadata accessor for StorableValue);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 6)
    {
      v9 = type metadata accessor for UUID();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v9))
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v9);
      }
      goto LABEL_12;
    }
    if (EnumCaseMultiPayload == 2)
    {
      v7 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
      {
        v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
      }
LABEL_12:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t OUTLINED_FUNCTION_71()
{
  return type metadata accessor for UUID();
}

uint64_t OUTLINED_FUNCTION_71_2@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v3, v2);
}

unint64_t OUTLINED_FUNCTION_71_3()
{
  return lazy protocol witness table accessor for type Data and conformance Data();
}

void OUTLINED_FUNCTION_71_4()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  outlined init with copy of StorableValue(v0, v2, v1);
}

void OUTLINED_FUNCTION_91(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 216) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_91_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  return 0;
}

void OUTLINED_FUNCTION_91_1()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 88) = 0;
}

void OUTLINED_FUNCTION_28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  outlined init with copy of Date?(v1, v2 - 120, v0);
}

unint64_t OUTLINED_FUNCTION_28_0()
{
  uint64_t v0;

  return specialized __RawDictionaryStorage.find<A>(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_28_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t OUTLINED_FUNCTION_28_2(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = a1;
  return v1 - 120;
}

void OUTLINED_FUNCTION_76(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  a2[3] = v2;
  __swift_allocate_boxed_opaque_existential_0Tm(a2);
}

uint64_t OUTLINED_FUNCTION_76_0()
{
  return 0;
}

void OUTLINED_FUNCTION_76_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  outlined init with copy of StorableValue(v1, v0, v2);
}

void selectAndHavingAggregateFunctions(selectCore:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *Description;
  uint64_t v6;
  ValueMetadata *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, ValueMetadata *);
  uint64_t v18;
  ValueMetadata *v19;
  uint64_t v20;
  ValueMetadata *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, ValueMetadata *);
  char v40;
  uint64_t (**v41)(uint64_t, uint64_t);
  uint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void (*v51)(uint64_t, uint64_t, ValueMetadata *);
  uint64_t (**v52)(uint64_t, uint64_t);
  ValueMetadata *v53;
  uint64_t v54;
  uint64_t v55;

  v53 = type metadata accessor for ResultColumn();
  Description = v53[-1].Description;
  MEMORY[0x1E0C80A78](v53);
  OUTLINED_FUNCTION_41();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_116();
  v7 = type metadata accessor for SQLExpression();
  v52 = (uint64_t (**)(uint64_t, uint64_t))v7[-1].Description;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_63();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v45 - v10;
  v12 = SelectCore.select.getter();
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v46 = v11;
    v47 = v1;
    v14 = *((unsigned __int8 *)Description + 80);
    v45 = v12;
    v15 = v12 + ((v14 + 32) & ~v14);
    v16 = Description[9];
    v48 = a1;
    v49 = v16;
    v17 = (void (*)(uint64_t, uint64_t, ValueMetadata *))Description[2];
    v50 = Description;
    v51 = v17;
    v18 = MEMORY[0x1E0DEE9D8];
    v19 = v53;
    while (1)
    {
      v51(v2, v15, v19);
      ResultColumn.expression.getter(v3);
      v20 = SQLExpression.aggregationFunctions.getter();
      v21 = v7;
      OUTLINED_FUNCTION_105(v3, v52[1]);
      v22 = *(_QWORD *)(v20 + 16);
      v23 = *(_QWORD *)(v18 + 16);
      if (__OFADD__(v23, v22))
        break;
      if (!swift_isUniquelyReferenced_nonNull_native() || v23 + v22 > *(_QWORD *)(v18 + 24) >> 1)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (*(_QWORD *)(v20 + 16))
      {
        v24 = *(_QWORD *)(v18 + 16);
        v25 = (*(_QWORD *)(v18 + 24) >> 1) - v24;
        type metadata accessor for AggregationFunction();
        if (v25 < v22)
          goto LABEL_27;
        OUTLINED_FUNCTION_168();
        v28 = *(_QWORD *)(v27 + 72);
        v29 = v18 + v26 + v28 * v24;
        v30 = v20 + v26;
        v31 = v28 * v22;
        v32 = v29 + v31;
        v33 = v30 + v31;
        if (v30 < v32 && v29 < v33)
          goto LABEL_29;
        swift_arrayInitWithCopy();
        if (v22)
        {
          v35 = *(_QWORD *)(v18 + 16);
          v36 = __OFADD__(v35, v22);
          v37 = v35 + v22;
          if (v36)
            goto LABEL_28;
          *(_QWORD *)(v18 + 16) = v37;
        }
      }
      else if (v22)
      {
        goto LABEL_26;
      }
      OUTLINED_FUNCTION_24();
      v38 = OUTLINED_FUNCTION_57();
      v19 = v53;
      v39(v38, v53);
      v15 += v49;
      --v13;
      v7 = v21;
      if (!v13)
      {
        swift_bridgeObjectRelease();
        v1 = v47;
        v11 = v46;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x1E0DEE9D8];
LABEL_21:
    v55 = v18;
    SelectCore.having.getter(v1);
    OUTLINED_FUNCTION_86(v1, 1, (uint64_t)v7);
    if (v40)
    {
      outlined destroy of UUID?(v1, &demangling cache variable for type metadata for SQLExpression?);
    }
    else
    {
      v41 = v52;
      v42 = OUTLINED_FUNCTION_107();
      v43(v42);
      v44 = SQLExpression.aggregationFunctions.getter();
      specialized Array.append<A>(contentsOf:)(v44);
      OUTLINED_FUNCTION_105((uint64_t)v11, v41[1]);
      v18 = v55;
    }
    v54 = v18;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)((uint64_t)&v54, (uint64_t (*)(_QWORD))type metadata accessor for AggregationFunction, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_55();
  }
}

uint64_t ResultColumn.expression.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of SQLExpression(v1, a1);
}

uint64_t getEnumTagSinglePayload for SQLExpression(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t SQLExpression.aggregationFunctions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SelectCore.having.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of PgQuery_Alias?(v1 + 208, a1, &demangling cache variable for type metadata for SQLExpression?);
}

uint64_t outlined init with copy of PgQuery_Alias?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_64_0()
{
  _NativeDictionary.copy()();
}

uint64_t OUTLINED_FUNCTION_64_1()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_64_3()
{
  return TimeZone.init(secondsFromGMT:)();
}

uint64_t OUTLINED_FUNCTION_52()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_52_0()
{
  return swift_bridgeObjectRelease_n();
}

void OUTLINED_FUNCTION_52_1(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_52_2@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_52_3()
{
  uint64_t v0;

  return v0;
}

void *__swift_memcpy312_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x138uLL);
}

uint64_t outlined destroy of StorableValue(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for StorableValue(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void specialized Array.append<A>(contentsOf:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_138_0();
  if (v6)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = OUTLINED_FUNCTION_81_0();
  if (!(_DWORD)v7 || v5 > *(_QWORD *)(v2 + 24) >> 1)
  {
    if (v4 <= v5)
      v10 = v5;
    else
      v10 = v4;
    OUTLINED_FUNCTION_135_0(v7, v10, v8, v9, &demangling cache variable for type metadata for _ContiguousArrayStorage<ChangeRecord>, (void (*)(_QWORD, uint64_t, char *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
    v2 = v11;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_14;
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_133_0();
  if (v12 != v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v13 = OUTLINED_FUNCTION_131_0();
  specialized UnsafeMutablePointer.initialize(from:count:)(v13, v14, v15);
  if (!v3)
  {
LABEL_14:
    OUTLINED_FUNCTION_64();
    *v1 = v2;
    OUTLINED_FUNCTION_1_8();
    return;
  }
  v16 = *(_QWORD *)(v2 + 16);
  v6 = __OFADD__(v16, v3);
  v17 = v16 + v3;
  if (!v6)
  {
    *(_QWORD *)(v2 + 16) = v17;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_138_0();
  if (v6)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = OUTLINED_FUNCTION_81_0();
  if (!(_DWORD)v7 || v5 > *(_QWORD *)(v2 + 24) >> 1)
  {
    if (v4 <= v5)
      v10 = v5;
    else
      v10 = v4;
    OUTLINED_FUNCTION_135_0(v7, v10, v8, v9, &demangling cache variable for type metadata for _ContiguousArrayStorage<String>, (void (*)(_QWORD, uint64_t, char *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
    v2 = v11;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_14;
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_133_0();
  if (v12 != v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v13 = OUTLINED_FUNCTION_131_0();
  specialized UnsafeMutablePointer.initialize(from:count:)(v13, v14, v15);
  if (!v3)
  {
LABEL_14:
    OUTLINED_FUNCTION_64();
    *v1 = v2;
    OUTLINED_FUNCTION_1_8();
    return;
  }
  v16 = *(_QWORD *)(v2 + 16);
  v6 = __OFADD__(v16, v3);
  v17 = v16 + v3;
  if (!v6)
  {
    *(_QWORD *)(v2 + 16) = v17;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

uint64_t storeEnumTagSinglePayload for SQLExpression(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> IncrementalViewManager.updateSync(viewName:databaseName:streamIdentifier:)(Swift::String viewName, Swift::String databaseName, Swift::String streamIdentifier)
{
  IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)(viewName, databaseName, streamIdentifier);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)(Swift::String viewName, Swift::String databaseName, Swift::String streamIdentifier)
{
  IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)(viewName._countAndFlagsBits, (unint64_t)viewName._object, databaseName._countAndFlagsBits, (unint64_t)databaseName._object, streamIdentifier._countAndFlagsBits, (unint64_t)streamIdentifier._object, "IncrementalViewUpdate", (uint64_t)partial apply for closure #1 in IncrementalViewManager.update(viewName:databaseName:streamIdentifier:));
}

uint64_t partial apply for closure #1 in IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)()
{
  return partial apply for closure #1 in IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in IncrementalViewManager.update(viewName:databaseName:streamIdentifier:));
}

uint64_t partial apply for closure #1 in IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

void IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, const char *a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  NSObject *v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_signpost_id_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t (**v54)(uint64_t, uint64_t);
  uint64_t v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  NSObject *v67;
  uint64_t v68;
  os_signpost_type_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  const char *v73;
  const char *v74;
  uint64_t v75;
  uint8_t *v76;
  os_signpost_type_t v77;
  os_signpost_id_t v78;
  uint8_t *v79;
  os_signpost_type_t v80;
  os_signpost_id_t v81;
  uint64_t v82;
  const char *v83;
  uint8_t *v84;
  os_signpost_id_t v85;
  _QWORD v86[2];
  void (*v87)(char *, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t (**v94)(uint64_t, uint64_t);
  uint64_t (**v95)(uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t (**v102)(uint64_t, uint64_t);
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v97 = a8;
  v106 = a1;
  v107 = a7;
  v101 = a5;
  v14 = OUTLINED_FUNCTION_125_0();
  v98 = *(_QWORD *)(v14 - 8);
  v99 = v14;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v15);
  OUTLINED_FUNCTION_6_1();
  v91 = v16;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v17);
  v92 = (char *)v86 - v18;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v19);
  OUTLINED_FUNCTION_53();
  v90 = v20;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v21);
  OUTLINED_FUNCTION_61();
  v23 = OUTLINED_FUNCTION_47_0(v22);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v95 = (uint64_t (**)(uint64_t, uint64_t))((char *)v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v26);
  v102 = (uint64_t (**)(uint64_t, uint64_t))((char *)v86 - v27);
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v28);
  v94 = (uint64_t (**)(uint64_t, uint64_t))((char *)v86 - v29);
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v30);
  OUTLINED_FUNCTION_53();
  v93 = v31;
  OUTLINED_FUNCTION_7();
  v33 = MEMORY[0x1E0C80A78](v32);
  v35 = (char *)v86 - v34;
  MEMORY[0x1E0C80A78](v33);
  OUTLINED_FUNCTION_122_0();
  OUTLINED_FUNCTION_121_0();
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_50_0();
  v105 = v8;
  v36 = OSSignposter.logHandle.getter();
  v37 = static os_signpost_type_t.begin.getter();
  v38 = OUTLINED_FUNCTION_120_0(v37);
  v108 = v24;
  v103 = a4;
  v104 = a3;
  if ((v38 & 1) != 0)
  {
    v87 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
    v87(v35, v109, v23);
    v39 = OUTLINED_FUNCTION_7_0();
    v40 = OUTLINED_FUNCTION_7_0();
    v88 = v23;
    v86[1] = v40;
    v110 = v40;
    *(_DWORD *)v39 = 136446722;
    swift_bridgeObjectRetain();
    v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, a6, &v110);
    OUTLINED_FUNCTION_32_1(v41);
    OUTLINED_FUNCTION_52_0();
    *(_WORD *)(v39 + 12) = 2082;
    swift_bridgeObjectRetain();
    v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v110);
    OUTLINED_FUNCTION_68_0(v42);
    OUTLINED_FUNCTION_52_0();
    *(_WORD *)(v39 + 22) = 2082;
    swift_bridgeObjectRetain();
    v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, a2, &v110);
    OUTLINED_FUNCTION_68_0(v43);
    OUTLINED_FUNCTION_52_0();
    v44 = OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_136_0(&dword_18D810000, v36, (os_signpost_type_t)v100, v44, v107, "stream:%{public}s database:%{public}s view:%{public}s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_14();
  }
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_99();

  v45 = v106;
  v46 = v107;
  OUTLINED_FUNCTION_65_1((uint64_t)v35, *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v24 + 16));
  OUTLINED_FUNCTION_124_0();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_113();
  if (!static DaemonLibrary.root)
  {
    lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError();
    v58 = OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_78_0(v58, v59);
    v53 = OUTLINED_FUNCTION_34_0();
    v54 = v102;
    OUTLINED_FUNCTION_67_1();
    static os_signpost_type_t.end.getter();
    if ((OUTLINED_FUNCTION_21_1() & 1) != 0)
    {
      v60 = v46;
      v106 = v58;
      OUTLINED_FUNCTION_84_0();
      v61 = (uint64_t)v92;
      checkForErrorAndConsumeState(state:)();
      OUTLINED_FUNCTION_66_0();
      v62 = v98;
      v56 = v60;
      if (OUTLINED_FUNCTION_30_0(v61, *(uint64_t (**)(uint64_t, uint64_t))(v98 + 88)) == *MEMORY[0x1E0DF2190])
      {
        v57 = "[Error] Interval already ended";
      }
      else
      {
        OUTLINED_FUNCTION_30_0(v61, *(uint64_t (**)(uint64_t, uint64_t))(v62 + 8));
        v57 = "";
      }
LABEL_20:
      v76 = (uint8_t *)OUTLINED_FUNCTION_7_0();
      *(_WORD *)v76 = 0;
      OSSignpostID.rawValue.getter();
      OUTLINED_FUNCTION_114_0();
      OUTLINED_FUNCTION_51_0(&dword_18D810000, v53, v77, v78, v56, v57, v76);
      OUTLINED_FUNCTION_14();
    }
    goto LABEL_23;
  }
  v47 = v45;
  v49 = v103;
  v48 = v104;
  if (!(*((uint64_t (**)(uint64_t, unint64_t))off_1EE082870 + 2))(v104, v103))
  {
    lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError();
    OUTLINED_FUNCTION_13_0();
    *(_QWORD *)v63 = v48;
    *(_QWORD *)(v63 + 8) = v49;
    *(_BYTE *)(v63 + 16) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    v53 = OUTLINED_FUNCTION_34_0();
    v54 = v94;
    OUTLINED_FUNCTION_67_1();
    static os_signpost_type_t.end.getter();
    if ((OUTLINED_FUNCTION_21_1() & 1) != 0)
    {
      OUTLINED_FUNCTION_84_0();
      v64 = v90;
      checkForErrorAndConsumeState(state:)();
      OUTLINED_FUNCTION_66_0();
      v65 = v98;
      if (OUTLINED_FUNCTION_30_0(v64, *(uint64_t (**)(uint64_t, uint64_t))(v98 + 88)) == *MEMORY[0x1E0DF2190])
      {
        v66 = "[Error] Interval already ended";
      }
      else
      {
        OUTLINED_FUNCTION_30_0(v64, *(uint64_t (**)(uint64_t, uint64_t))(v65 + 8));
        v66 = "";
      }
      v79 = (uint8_t *)OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_119_0(v79);
      OUTLINED_FUNCTION_114_0();
      OUTLINED_FUNCTION_51_0(&dword_18D810000, v53, v80, v81, v107, v66, v79);
      OUTLINED_FUNCTION_14();
    }
LABEL_23:

    v82 = (uint64_t)v54;
    goto LABEL_24;
  }
  OUTLINED_FUNCTION_129_0();
  MEMORY[0x1E0C80A78](v50);
  v86[-8] = v47;
  v86[-7] = a2;
  v86[-6] = v48;
  v86[-5] = v49;
  v86[-4] = v96;
  v86[-3] = v51;
  v86[-2] = v52;
  OUTLINED_FUNCTION_127_1(*(uint64_t (**)(void))(v52 + 32));
  if (v9)
  {
    v53 = OUTLINED_FUNCTION_34_0();
    v54 = v95;
    OUTLINED_FUNCTION_67_1();
    static os_signpost_type_t.end.getter();
    if ((OUTLINED_FUNCTION_21_1() & 1) != 0)
    {
      v106 = v9;
      OUTLINED_FUNCTION_84_0();
      v55 = v91;
      OUTLINED_FUNCTION_92_0();
      OUTLINED_FUNCTION_66_0();
      if (OUTLINED_FUNCTION_14_3() == *MEMORY[0x1E0DF2190])
      {
        v56 = v107;
        v57 = "[Error] Interval already ended";
      }
      else
      {
        v75 = v55;
        v56 = v107;
        OUTLINED_FUNCTION_30_0(v75, v54[1]);
        v57 = "";
      }
      goto LABEL_20;
    }
    goto LABEL_23;
  }
  v67 = OUTLINED_FUNCTION_34_0();
  v68 = v93;
  OSSignpostIntervalState.signpostID.getter();
  v69 = static os_signpost_type_t.end.getter();
  if ((OUTLINED_FUNCTION_21_1() & 1) != 0)
  {
    OUTLINED_FUNCTION_84_0();
    v70 = v89;
    checkForErrorAndConsumeState(state:)();
    OUTLINED_FUNCTION_66_0();
    v71 = v98;
    v72 = OUTLINED_FUNCTION_30_0(v70, *(uint64_t (**)(uint64_t, uint64_t))(v98 + 88));
    v73 = v107;
    if (v72 == *MEMORY[0x1E0DF2190])
    {
      v74 = "[Error] Interval already ended";
    }
    else
    {
      OUTLINED_FUNCTION_30_0(v70, *(uint64_t (**)(uint64_t, uint64_t))(v71 + 8));
      v74 = "";
    }
    v83 = v73;
    v84 = (uint8_t *)OUTLINED_FUNCTION_7_0();
    *(_WORD *)v84 = 0;
    v85 = OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_51_0(&dword_18D810000, v67, v69, v85, v83, v74, v84);
    OUTLINED_FUNCTION_14();
  }

  v82 = v68;
LABEL_24:
  OUTLINED_FUNCTION_102_0(v82);
  OUTLINED_FUNCTION_66_0();
  OUTLINED_FUNCTION_102_0(v109);
  OUTLINED_FUNCTION_9();
}

void closure #1 in IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  sqlite3 *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  sqlite3 *v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _QWORD v105[2];
  uint64_t v106;
  uint64_t v107;

  v93 = a7;
  v92 = a6;
  v100 = a5;
  v102 = a1;
  v97 = type metadata accessor for MaterializedViewPhysicalPlan(0);
  v95 = *(_QWORD *)(v97 - 8);
  v10 = MEMORY[0x1E0C80A78](v97);
  v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v87 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v96 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v87 - v18;
  if (one-time initialization token for compute != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  v21 = __swift_project_value_buffer(v20, (uint64_t)static Logging.compute);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v89 = v21;
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.info.getter();
  v24 = os_log_type_enabled(v22, v23);
  v99 = v19;
  v98 = v14;
  v90 = a4;
  v101 = a2;
  v91 = a3;
  if (v24)
  {
    v25 = swift_slowAlloc();
    v88 = swift_slowAlloc();
    v106 = v88;
    *(_DWORD *)v25 = 136315394;
    swift_bridgeObjectRetain();
    v105[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, a2, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v25 + 12) = 2080;
    swift_bridgeObjectRetain();
    v105[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v106);
    v19 = v99;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_18D810000, v22, v23, "IncrementalViewManager: updating materialized view for %s in %s", (uint8_t *)v25, 0x16u);
    v26 = v88;
    swift_arrayDestroy();
    MEMORY[0x193FED860](v26, -1, -1);
    MEMORY[0x193FED860](v25, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  v27 = *(_QWORD *)(v100 + 16);
  v28 = *(_QWORD *)(v27 + 16);
  if (v28)
  {
    v29 = v27 + ((*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80));
    v30 = *(_QWORD *)(v95 + 72);
    swift_bridgeObjectRetain_n();
    while (1)
    {
      outlined init with copy of StorableValue(v29, (uint64_t)v12, type metadata accessor for MaterializedViewPhysicalPlan);
      MaterializedView.name.getter();
      v31 = String.lowercased()();
      swift_bridgeObjectRelease();
      v32 = String.lowercased()();
      if (v31._countAndFlagsBits == v32._countAndFlagsBits && v31._object == v32._object)
        break;
      v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v34 & 1) != 0)
        goto LABEL_18;
      outlined destroy of StorableValue((uint64_t)v12, type metadata accessor for MaterializedViewPhysicalPlan);
      v29 += v30;
      if (!--v28)
      {
        swift_bridgeObjectRelease();
        v35 = 1;
        v19 = v99;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_18:
    v36 = (uint64_t)v98;
    v37 = v97;
    v38 = (uint64_t)v96;
    swift_bridgeObjectRelease();
    v19 = v99;
    outlined init with take of StorableValue((uint64_t)v12, (uint64_t)v99, type metadata accessor for MaterializedViewPhysicalPlan);
    v35 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    v35 = 1;
LABEL_16:
    v36 = (uint64_t)v98;
    v37 = v97;
    v38 = (uint64_t)v96;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v19, v35, 1, v37);
  swift_bridgeObjectRelease();
  outlined init with copy of Date?((uint64_t)v19, v38, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  if (__swift_getEnumTagSinglePayload(v38, 1, v37) != 1)
  {
    outlined init with take of StorableValue(v38, v36, type metadata accessor for MaterializedViewPhysicalPlan);
    v41 = v94;
    v42 = IncrementalViewManager.cachedDatabaseWithAccess(for:)(v92, v93);
    if (!v41)
    {
      v43 = v42;
      v44 = *(sqlite3 **)(v42 + 16);
      v45 = sqlite3_exec(v44, "begin", 0, 0, 0);
      if ((_DWORD)v45)
      {
        v46 = BMSQLDatabaseError(v45, v44, 0);
        swift_getErrorValue();
        v47 = Error.localizedDescription.getter();
        v49 = v48;

        v106 = v47;
        v107 = v49;
        strcpy((char *)v105, "BMSQLDatabase");
        HIWORD(v105[1]) = -4864;
        v103 = 0x62617461444C5153;
        v104 = 0xEB00000000657361;
        lazy protocol witness table accessor for type String and conformance String();
        v50 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v52 = v51;
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
        swift_allocError();
        *(_OWORD *)v53 = xmmword_18DC0CE30;
        *(_QWORD *)(v53 + 16) = v50;
        *(_QWORD *)(v53 + 24) = v52;
        *(_BYTE *)(v53 + 32) = 1;
      }
      else
      {
        v55 = v90;
        IncrementalViewManager.update(database:materializedViewPlan:databaseName:)(v44, v36, v91, v90);
        v56 = sqlite3_exec(v44, "commit", 0, 0, 0);
        if (!(_DWORD)v56)
        {
          v76 = v101;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_retain_n();
          v77 = Logger.logObject.getter();
          v78 = static os_log_type_t.info.getter();
          v79 = v78;
          if (os_log_type_enabled(v77, v78))
          {
            v80 = swift_slowAlloc();
            LODWORD(v100) = v79;
            v81 = v80;
            v97 = swift_slowAlloc();
            v106 = v97;
            *(_DWORD *)v81 = 136315650;
            swift_bridgeObjectRetain();
            v105[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v76, &v106);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v81 + 12) = 2080;
            swift_bridgeObjectRetain();
            v105[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v55, &v106);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v81 + 22) = 2080;
            v82 = objc_msgSend(*(id *)(v43 + 24), sel_description);
            v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v85 = v84;

            v105[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v85, &v106);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_18D810000, v77, (os_log_type_t)v100, "IncrementalViewManager: updated materialized view for %s in %s. Access assertion: %s", (uint8_t *)v81, 0x20u);
            v86 = v97;
            swift_arrayDestroy();
            MEMORY[0x193FED860](v86, -1, -1);
            MEMORY[0x193FED860](v81, -1, -1);
            swift_release();

            outlined destroy of StorableValue((uint64_t)v98, type metadata accessor for MaterializedViewPhysicalPlan);
            v54 = (uint64_t)v99;
            goto LABEL_27;
          }
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_release_n();

          goto LABEL_25;
        }
        v57 = BMSQLDatabaseError(v56, v44, 0);
        swift_getErrorValue();
        v58 = Error.localizedDescription.getter();
        v60 = v59;

        v106 = v58;
        v107 = v60;
        strcpy((char *)v105, "BMSQLDatabase");
        HIWORD(v105[1]) = -4864;
        v103 = 0x62617461444C5153;
        v104 = 0xEB00000000657361;
        lazy protocol witness table accessor for type String and conformance String();
        v61 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v63 = v62;
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
        v64 = (void *)swift_allocError();
        *(_OWORD *)v65 = xmmword_18DC0CE40;
        *(_QWORD *)(v65 + 16) = v61;
        *(_QWORD *)(v65 + 24) = v63;
        *(_BYTE *)(v65 + 32) = 1;
        swift_willThrow();
        v66 = *(sqlite3 **)(v43 + 16);
        v67 = sqlite3_exec(v66, "rollback", 0, 0, 0);
        if ((_DWORD)v67)
        {
          v68 = BMSQLDatabaseError(v67, v66, 0);
          swift_getErrorValue();
          v69 = Error.localizedDescription.getter();
          v71 = v70;

          v106 = v69;
          v107 = v71;
          strcpy((char *)v105, "BMSQLDatabase");
          HIWORD(v105[1]) = -4864;
          v103 = 0x62617461444C5153;
          v104 = 0xEB00000000657361;
          lazy protocol witness table accessor for type String and conformance String();
          v72 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          v74 = v73;
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
          swift_allocError();
          *(_OWORD *)v75 = xmmword_18DC0CE50;
          *(_QWORD *)(v75 + 16) = v72;
          *(_QWORD *)(v75 + 24) = v74;
          *(_BYTE *)(v75 + 32) = 1;
          swift_willThrow();

          swift_release();
          outlined destroy of StorableValue(v36, type metadata accessor for MaterializedViewPhysicalPlan);
          goto LABEL_26;
        }
      }
      swift_willThrow();
      swift_release();
    }
LABEL_25:
    outlined destroy of StorableValue(v36, type metadata accessor for MaterializedViewPhysicalPlan);
    goto LABEL_26;
  }
  outlined destroy of UUID?(v38, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError();
  swift_allocError();
  v39 = v101;
  *(_QWORD *)v40 = v102;
  *(_QWORD *)(v40 + 8) = v39;
  *(_BYTE *)(v40 + 16) = 3;
  swift_bridgeObjectRetain();
  swift_willThrow();
LABEL_26:
  v54 = (uint64_t)v19;
LABEL_27:
  outlined destroy of UUID?(v54, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
}

uint64_t MaterializedView.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t getEnumTagSinglePayload for MaterializedView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 328))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for MaterializedViewPhysicalPlan()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for MaterializedViewPhysicalPlan()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t IncrementalViewManager.cachedDatabaseWithAccess(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  id v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void (*v50)(char *, uint8_t *);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  sqlite3 *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint8_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD v115[2];
  sqlite3 *ppDb;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;

  v3 = v2;
  v119 = *MEMORY[0x1E0C80C00];
  v107 = type metadata accessor for URL.DirectoryHint();
  v106 = *(_QWORD *)(v107 - 8);
  MEMORY[0x1E0C80A78](v107);
  v105 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v7);
  v104 = (uint64_t)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = (uint8_t *)type metadata accessor for URL();
  v9 = *((_QWORD *)v108 - 1);
  v10 = MEMORY[0x1E0C80A78](v108);
  v12 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v90 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v90 - v16;
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + 8);
  v109 = *(_QWORD *)(a2 + 8);
  v110 = a1;
  v111 = v18;
  v19 = ((uint64_t (*)(uint64_t))v18)(a1);
  v21 = v20;
  v22 = v3 + OBJC_IVAR____TtC12BiomeStreams22IncrementalViewManager_cachedDatabaseWithAccesses;
  v23 = specialized Dictionary.subscript.getter(v19, v20, *(_QWORD *)(v3 + OBJC_IVAR____TtC12BiomeStreams22IncrementalViewManager_cachedDatabaseWithAccesses));
  if (v23)
  {
    v24 = v23;
LABEL_3:
    swift_bridgeObjectRelease();
    return v24;
  }
  v99 = v12;
  v100 = v9;
  v101 = v15;
  v94 = v22;
  v95 = v19;
  v96 = v3;
  v102 = v17;
  v103 = v21;
  type metadata accessor for BMStreamBase(0, (unint64_t *)&lazy cache variable for type metadata for BMResourceSpecifier);
  v26 = v109;
  v25 = v110;
  v27 = v111;
  v28 = v111(v110, v109);
  v30 = BMResourceSpecifier.__allocating_init(type:name:)(3, v28, v29);
  v24 = (uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D01CC0]), sel_initWithUseCase_, *MEMORY[0x1E0D01C90]);
  v117 = 0;
  v31 = objc_msgSend((id)v24, sel_requestAccessToResource_mode_error_, v30, 3, &v117);
  if (!v31)
  {
    v64 = (id)v117;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_bridgeObjectRelease();

    return v24;
  }
  v32 = v31;
  v33 = v27;
  v97 = v30;
  v34 = (id)v117;
  v35 = objc_msgSend(v32, sel_path);
  v98 = (id)v24;
  if (v35)
  {
    v36 = v35;
    v91 = v32;
    v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v92 = v37;

    v38 = v27(v25, v26);
    v117 = 0x336574696C71732ELL;
    v118 = 0xE800000000000000;
    v115[0] = v38;
    v115[1] = v39;
    swift_bridgeObjectRetain();
    v115[0] = String.init<A>(_:)();
    v115[1] = v40;
    String.append<A>(contentsOf:)();
    swift_bridgeObjectRelease();
    v41 = v115[1];
    v111 = (uint64_t (*)(uint64_t, uint64_t))v115[0];
    v42 = v108;
    __swift_storeEnumTagSinglePayload(v104, 1, 1, (uint64_t)v108);
    v43 = *MEMORY[0x1E0CAFD78];
    v44 = v106;
    v45 = *(void (**)(char *, uint64_t, uint64_t))(v106 + 104);
    v46 = v105;
    v47 = v107;
    v45(v105, v43, v107);
    v48 = v99;
    URL.init(filePath:directoryHint:relativeTo:)();
    v117 = (uint64_t)v111;
    v118 = v41;
    v45(v46, v43, v47);
    lazy protocol witness table accessor for type String and conformance String();
    v49 = v101;
    URL.appending<A>(component:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v47);
    v50 = *(void (**)(char *, uint8_t *))(v100 + 8);
    v50(v48, v42);
    swift_bridgeObjectRelease();
    v51 = v102;
    URL.standardizedFileURL.getter();
    v50(v49, v42);
    ppDb = 0;
    URL.path(percentEncoded:)(0);
    v52 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v53 = sqlite3_open_v2((const char *)(v52 + 32), &ppDb, 2, 0);
    swift_release();
    v54 = ppDb;
    if ((_DWORD)v53 || !ppDb)
    {
      v76 = BMSQLDatabaseError(v53, ppDb, 0);
      swift_getErrorValue();
      v77 = Error.localizedDescription.getter();
      v24 = v78;

      v117 = v77;
      v118 = v24;
      strcpy((char *)v115, "BMSQLDatabase");
      HIWORD(v115[1]) = -4864;
      v113 = 0x62617461444C5153;
      v114 = 0xEB00000000657361;
      v79 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v81 = v80;
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
      swift_allocError();
      *(_QWORD *)v82 = v79;
      *(_QWORD *)(v82 + 8) = v81;
      *(_QWORD *)(v82 + 16) = 0;
      *(_QWORD *)(v82 + 24) = 0;
      *(_BYTE *)(v82 + 32) = 0;
      swift_willThrow();
      swift_unknownObjectRelease();

      v50(v51, v108);
      swift_bridgeObjectRelease();
      return v24;
    }
    v55 = sqlite3_exec(ppDb, "PRAGMA journal_mode=WAL", 0, 0, 0);
    if ((_DWORD)v55)
    {
      v56 = BMSQLDatabaseError(v55, v54, 0);
      swift_getErrorValue();
      v57 = Error.localizedDescription.getter();
      v59 = v58;

      v117 = v57;
      v118 = v59;
      strcpy((char *)v115, "BMSQLDatabase");
      HIWORD(v115[1]) = -4864;
      v113 = 0x62617461444C5153;
      v114 = 0xEB00000000657361;
      v24 = 1;
      v60 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v62 = v61;
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
      swift_allocError();
      *(_QWORD *)v63 = 0xD000000000000017;
      *(_QWORD *)(v63 + 8) = 0x800000018DCC2EA0;
      *(_QWORD *)(v63 + 16) = v60;
      *(_QWORD *)(v63 + 24) = v62;
      *(_BYTE *)(v63 + 32) = 1;
      swift_willThrow();
      v50(v51, v108);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      return v24;
    }

    v50(v51, v108);
    type metadata accessor for DatabaseWithAccess();
    v24 = swift_allocObject();
    v88 = v91;
    *(_QWORD *)(v24 + 16) = v54;
    *(_QWORD *)(v24 + 24) = v88;
    if ((*(_BYTE *)(v96 + OBJC_IVAR____TtC12BiomeStreams22IncrementalViewManager_useCache) & 1) != 0)
    {
      v89 = swift_retain();
      specialized Dictionary._Variant.setValue(_:forKey:)(v89, v95, v103, (void (*)(uint64_t, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
    }
    goto LABEL_3;
  }
  if (one-time initialization token for compute != -1)
    swift_once();
  v65 = type metadata accessor for Logger();
  __swift_project_value_buffer(v65, (uint64_t)static Logging.compute);
  swift_unknownObjectRetain_n();
  v66 = Logger.logObject.getter();
  v67 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v66, v67))
  {
    v68 = (uint8_t *)swift_slowAlloc();
    v112 = swift_slowAlloc();
    v117 = v112;
    v108 = v68;
    *(_DWORD *)v68 = 136315138;
    v107 = (uint64_t)(v68 + 4);
    v69 = objc_msgSend(v32, sel_description);
    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v72 = v71;

    v115[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v72, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    v33 = v111;
    swift_bridgeObjectRelease();
    v73 = v67;
    v74 = v108;
    _os_log_impl(&dword_18D810000, v66, v73, "IncrementalViewManager: Access assertion: %s has a nil path", v108, 0xCu);
    v75 = v112;
    swift_arrayDestroy();
    MEMORY[0x193FED860](v75, -1, -1);
    MEMORY[0x193FED860](v74, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  v24 = (uint64_t)v97;
  v83 = v33(v25, v26);
  v85 = v84;
  lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError();
  swift_allocError();
  *(_QWORD *)v86 = v83;
  *(_QWORD *)(v86 + 8) = v85;
  *(_BYTE *)(v86 + 16) = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return v24;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  if (*(_QWORD *)(a3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(), (v3 & 1) != 0))
    return swift_retain();
  else
    return 0;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  Swift::Int v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v2 = String.UTF8View._foreignCount()();
    if (v2)
      goto LABEL_6;
    return MEMORY[0x1E0DEE9D8];
  }
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
LABEL_6:
  v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = v3;
    v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2)
      goto LABEL_14;
    return (uint64_t)v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t SQLExpressionEvaluator.__deallocating_deinit()
{
  SQLExpressionEvaluator.deinit();
  return swift_deallocClassInstance();
}

uint64_t SQLExpressionEvaluator.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  sqlite3 *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v26[2];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 32);
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    sqlite3_finalize(*(sqlite3_stmt **)(*(_QWORD *)(v2 + 56) + 8 * i));
    if (v6)
      goto LABEL_4;
LABEL_5:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v11 >= v7)
      break;
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (v12)
      goto LABEL_18;
    v8 = v11 + 1;
    if (v11 + 1 >= v7)
      break;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    if (v12)
      goto LABEL_18;
    v8 = v11 + 2;
    if (v11 + 2 >= v7)
      break;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    if (v12)
      goto LABEL_18;
    v13 = v11 + 3;
    if (v13 >= v7)
      break;
    v12 = *(_QWORD *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        v8 = v13 + 1;
        if (__OFADD__(v13, 1))
          break;
        if (v8 >= v7)
          goto LABEL_21;
        v12 = *(_QWORD *)(v3 + 8 * v8);
        ++v13;
        if (v12)
          goto LABEL_18;
      }
LABEL_29:
      __break(1u);
LABEL_30:
      swift_once();
      goto LABEL_24;
    }
    v8 = v13;
LABEL_18:
    v6 = (v12 - 1) & v12;
  }
LABEL_21:
  swift_release();
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 40));
  if (*(_BYTE *)(v1 + 16) != 1)
    goto LABEL_27;
  v14 = *(sqlite3 **)(v1 + 24);
  v15 = sqlite3_close_v2(v14);
  if (!(_DWORD)v15)
    goto LABEL_27;
  v16 = BMSQLDatabaseError(v15, v14, 0);
  swift_getErrorValue();
  v17 = Error.localizedDescription.getter();
  v19 = v18;

  v26[0] = v17;
  v26[1] = v19;
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_6_5();
  v7 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v3 = v20;
  swift_bridgeObjectRelease();
  if (one-time initialization token for SQL != -1)
    goto LABEL_30;
LABEL_24:
  v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logging.SQL);
  swift_bridgeObjectRetain();
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    v26[0] = swift_slowAlloc();
    *(_DWORD *)v24 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v3, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_18D810000, v22, v23, "SQLExpressionEvaluator: Failed to close database connection with error: %s", v24, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_14();
  }

  swift_bridgeObjectRelease_n();
LABEL_27:
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t destroy for COUNT_STAR(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  ValueMetadata *v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for SQLDataType();
  return (*((uint64_t (**)(uint64_t, ValueMetadata *))v5[-1].Description + 1))(v4, v5);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Swift.AnyObject) -> (@unowned Bool)(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  LOBYTE(v1) = v1(v2);
  swift_release();
  swift_unknownObjectRelease();
  return v1 & 1;
}

uint64_t partial apply for closure #2 in scan(stream:metadata:maxBatchSize:selectCore:expressionEvaluator:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  OUTLINED_FUNCTION_124();
  OUTLINED_FUNCTION_168();
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #2 in scan(stream:metadata:maxBatchSize:selectCore:expressionEvaluator:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t QueryPlannerMetadata.__deallocating_deinit()
{
  QueryPlannerMetadata.deinit();
  return swift_deallocClassInstance();
}

void QueryPlannerMetadata.deinit()
{
  uint64_t v0;
  ValueMetadata *v1;

  v1 = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_75((uint64_t)v1);
  outlined destroy of StorableValue(v0 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_bookmark, type metadata accessor for BookmarkCache);
  outlined destroy of StorableValue(v0 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_keyedAggregationMetadata, type metadata accessor for KeyedAggregationMetadataCache);
  outlined destroy of StorableValue(v0 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_keyedFirstMatchingRecord, type metadata accessor for KeyedFirstMatchingRecordCache);
  OUTLINED_FUNCTION_1();
}

uint64_t protocol witness for Aggregation.aggregationMetadata() in conformance COUNT_STAR()
{
  return COUNT_STAR.aggregationMetadata()();
}

uint64_t COUNT_STAR.aggregationMetadata()()
{
  __n128 *v0;
  uint64_t v1;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, StorableValue)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
  v0 = (__n128 *)OUTLINED_FUNCTION_9_5();
  OUTLINED_FUNCTION_217(v0, (__n128)xmmword_18DC0CE20);
  if (one-time initialization token for countKey != -1)
    swift_once();
  v1 = OUTLINED_FUNCTION_58_3(&static COUNT_STAR.countKey);
  v2 = type metadata accessor for COUNT_STAR(v1);
  OUTLINED_FUNCTION_87_1(*(int *)(v2 + 24));
  OUTLINED_FUNCTION_141_1();
  OUTLINED_FUNCTION_104_0();
  return OUTLINED_FUNCTION_19_2();
}

uint64_t OUTLINED_FUNCTION_155()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

void OUTLINED_FUNCTION_155_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  outlined init with take of StorableValue(*(_QWORD *)(v3 - 112), *(_QWORD *)(v3 - 168), a3);
}

void COUNT_STAR.processEvent(changeRecord:expressionEvaluator:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for AggregationEvent(0);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_159_0();
  COUNT_STAR.getCurrentAggregationEvent()();
  if (!v1)
  {
    v4 = *(int *)(type metadata accessor for COUNT_STAR(0) + 24);
    v5 = *(_QWORD *)(v0 + v4);
    v6 = __OFADD__(v5, 1);
    v7 = v5 + 1;
    if (v6)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + v4) = v7;
      COUNT_STAR.getCurrentAggregationEvent()();
      OUTLINED_FUNCTION_95_1(v2, v8, type metadata accessor for AggregationEvent);
    }
  }
}

void COUNT_STAR.getCurrentAggregationEvent()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  OUTLINED_FUNCTION_32_3();
  OUTLINED_FUNCTION_124_1();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v7);
  v8 = OUTLINED_FUNCTION_77_0();
  v9 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for COUNT_STAR(v8) + 24));
  v12[3] = MEMORY[0x1E0DEDC60];
  v12[0] = v9;
  OUTLINED_FUNCTION_69_1((uint64_t)v6);
  OUTLINED_FUNCTION_70_2((uint64_t)v12, v3);
  if (!v2)
  {
    v10 = type metadata accessor for AggregationEvent(0);
    OUTLINED_FUNCTION_69_1(v0 + *(int *)(v10 + 20));
    OUTLINED_FUNCTION_95_1((uint64_t)v3, v11, type metadata accessor for StorableValue);
  }
  OUTLINED_FUNCTION_152_0();
  OUTLINED_FUNCTION_81_1();
}

void OUTLINED_FUNCTION_48(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of UUID?(v2, a2);
}

double OUTLINED_FUNCTION_48_0()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_BYTE *)(v0 + 64) = 3;
  return result;
}

uint64_t OUTLINED_FUNCTION_48_1()
{
  uint64_t v0;
  unint64_t v1;

  outlined consume of Data?(v0, v1);
  return outlined consume of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_48_2()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_146(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with copy of Date?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_146_0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_146_1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(a1 + 63) >> 6, *(_QWORD **)(v1 - 512));
}

void AggregationFunction.newAggregation()()
{
  uint64_t v0;
  uint64_t *v1;
  ValueMetadata *v2;
  void *Description;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata *v10;
  uint64_t (**v11)(uint64_t, ValueMetadata *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  ValueMetadata *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String *v24;
  Swift::String v25;
  uint64_t v26;
  int v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  ValueMetadata *v32;
  ValueMetadata *v33;
  uint64_t v34;
  _UNKNOWN **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t *v42;
  Swift::String *v43;
  Swift::String *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  ValueMetadata *v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, ValueMetadata *);
  uint64_t v61;
  uint64_t v62;
  int v63;
  ValueMetadata *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, ValueMetadata *);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  _UNKNOWN **v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  ValueMetadata *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  Swift::String *v95;
  Swift::String *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  ValueMetadata *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  ValueMetadata *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  ValueMetadata *v131;
  uint64_t v132;
  uint64_t v133;
  int *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t (**v137)(uint64_t, uint64_t);
  uint64_t v138;
  uint64_t v139;
  Swift::String *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  Swift::String *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  int *countAndFlagsBits;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  ValueMetadata *v159;
  uint64_t v160;

  OUTLINED_FUNCTION_42();
  v157 = v0;
  v158 = v1;
  v2 = type metadata accessor for SQLExpression();
  Description = v2[-1].Description;
  v159 = v2;
  v160 = (uint64_t)Description;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_6_1();
  countAndFlagsBits = (int *)v5;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v6);
  v156 = (uint64_t)&v149 - v7;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_61();
  v152 = v9;
  OUTLINED_FUNCTION_87();
  v10 = type metadata accessor for AggregationFunction.AggregationType();
  v11 = (uint64_t (**)(uint64_t, ValueMetadata *))v10[-1].Description;
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_114();
  v14 = v13 - v12;
  v15 = type metadata accessor for SQLDataType();
  v16 = (uint64_t)v15[-1].Description;
  MEMORY[0x1E0C80A78](v15);
  OUTLINED_FUNCTION_6_1();
  v153 = v17;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_53();
  v155 = v19;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v20);
  v151 = (char *)&v149 - v21;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v22);
  v24 = (Swift::String *)((char *)&v149 - v23);
  AggregationFunction.name()();
  v25 = String.lowercased()();
  swift_bridgeObjectRelease();
  AggregationFunction.returnType.getter(v24);
  AggregationFunction.aggregationType.getter(v14);
  v26 = v14;
  v27 = v11[11](v14, v10);
  if (v27)
  {
    v32 = v159;
    v150 = v24;
    v33 = v15;
    switch(v27)
    {
      case 1:
        OUTLINED_FUNCTION_12_1();
        v34 = type metadata accessor for COUNT(0);
        v35 = &protocol witness table for COUNT;
LABEL_5:
        OUTLINED_FUNCTION_3_3((uint64_t)v35);
        v37 = OUTLINED_FUNCTION_72(v36);
        OUTLINED_FUNCTION_83(v37, v38, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v160 + 32));
        OUTLINED_FUNCTION_32_0(v26 + *(int *)(v34 + 24), (uint64_t)v150, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 32));
        v31 = *(int *)(v34 + 28);
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_12_1();
        v39 = v14
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (expression: SQLExpression, separator: SQLExpression?))
                     + 48);
        v40 = v26;
        v41 = (int *)type metadata accessor for GROUP_CONCAT(0);
        v42 = v158;
        v158[3] = (uint64_t)v41;
        v42[4] = (uint64_t)&protocol witness table for GROUP_CONCAT;
        __swift_allocate_boxed_opaque_existential_0Tm(v42);
        v44 = v43;
        OUTLINED_FUNCTION_83((uint64_t)v43 + v41[5], v40, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v160 + 32));
        outlined init with take of UUID?(v39, (uint64_t)v44 + v41[6], &demangling cache variable for type metadata for SQLExpression?);
        OUTLINED_FUNCTION_32_0((uint64_t)v44 + v41[7], (uint64_t)v150, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 32));
        v45 = (uint64_t *)((char *)&v44->_countAndFlagsBits + v41[8]);
        *v45 = 0;
        v45[1] = 0;
        *v44 = v25;
        goto LABEL_8;
      case 3:
        OUTLINED_FUNCTION_12_1();
        v46 = v160;
        v47 = v156;
        OUTLINED_FUNCTION_83(v156, v26, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v160 + 32));
        v48 = *(_QWORD *)(v16 + 16);
        v49 = v155;
        v50 = v150;
        OUTLINED_FUNCTION_49(v155, (uint64_t)v150);
        v51 = (*(uint64_t (**)(uint64_t, ValueMetadata *))(v16 + 88))(v49, v33);
        v149 = v16;
        if (!v51)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MAX<Int64>);
          OUTLINED_FUNCTION_141_0();
          OUTLINED_FUNCTION_3_3((uint64_t)&protocol witness table for MAX<A>);
          v53 = OUTLINED_FUNCTION_44(v52);
          OUTLINED_FUNCTION_139(v53, v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 16));
          ((void (*)(char *, Swift::String *, ValueMetadata *))v48)((char *)v50 + *(int *)(v47 + 40), v50, v33);
          v54 = OUTLINED_FUNCTION_5_0();
          OUTLINED_FUNCTION_26(v54, v55);
          *v50 = v25;
          OUTLINED_FUNCTION_21(v16, *(uint64_t (**)(uint64_t, uint64_t))(v46 + 8));
          (*(void (**)(Swift::String *, ValueMetadata *))(v149 + 8))(v50, v33);
          goto LABEL_8;
        }
        v72 = v46;
        switch(v51)
        {
          case 1:
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MAX<Double>);
            OUTLINED_FUNCTION_141_0();
            OUTLINED_FUNCTION_3_3((uint64_t)&protocol witness table for MAX<A>);
            OUTLINED_FUNCTION_11(v73);
            OUTLINED_FUNCTION_17_0();
            v74 = OUTLINED_FUNCTION_5_0();
            OUTLINED_FUNCTION_26(v74, v75);
LABEL_26:
            *v50 = v25;
            (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v16, v25._countAndFlagsBits);
LABEL_27:
            v71 = OUTLINED_FUNCTION_57();
LABEL_28:
            v86 = v33;
LABEL_37:
            v70(v71, v86);
            goto LABEL_8;
          case 2:
            goto LABEL_25;
          case 3:
            v92 = v47;
            v93 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MAX<Date>);
            OUTLINED_FUNCTION_3_3((uint64_t)&protocol witness table for MAX<A>);
            v94 = (uint64_t)v50;
            v96 = v95;
            OUTLINED_FUNCTION_139((uint64_t)v95 + *(int *)(v93 + 36), v92, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 16));
            OUTLINED_FUNCTION_49((uint64_t)v96 + *(int *)(v93 + 40), v94);
            *(_QWORD *)v48 = OUTLINED_FUNCTION_5_0();
            *(_QWORD *)(v48 + 8) = v97;
            v98 = OUTLINED_FUNCTION_70();
            OUTLINED_FUNCTION_37(v98);
            *v96 = v25;
            OUTLINED_FUNCTION_21(v92, *(uint64_t (**)(uint64_t, uint64_t))(v46 + 8));
            v70 = *(void (**)(uint64_t, ValueMetadata *))(v149 + 8);
            v71 = v94;
            goto LABEL_28;
          case 4:
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MAX<Data>);
            OUTLINED_FUNCTION_141_0();
            OUTLINED_FUNCTION_3_3((uint64_t)&protocol witness table for MAX<A>);
            OUTLINED_FUNCTION_11(v106);
            OUTLINED_FUNCTION_17_0();
            *(_QWORD *)v48 = OUTLINED_FUNCTION_5_0();
            *(_QWORD *)(v48 + 8) = v107;
            *(Swift::String *)((char *)v50 + *(int *)(v47 + 48)) = (Swift::String)xmmword_18DC0C920;
            goto LABEL_26;
          case 5:
LABEL_25:
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MAX<String>);
            OUTLINED_FUNCTION_141_0();
            OUTLINED_FUNCTION_3_3((uint64_t)&protocol witness table for MAX<A>);
            OUTLINED_FUNCTION_11(v83);
            OUTLINED_FUNCTION_17_0();
            *(_QWORD *)v48 = OUTLINED_FUNCTION_5_0();
            *(_QWORD *)(v48 + 8) = v84;
            v85 = (uint64_t *)((char *)&v50->_countAndFlagsBits + *(int *)(v47 + 48));
            *v85 = 0;
            v85[1] = 0;
            goto LABEL_26;
        }
        countAndFlagsBits = (int *)v25._countAndFlagsBits;
        v116 = (uint64_t)v50;
        if (v51 == 6)
        {
          v117 = v47;
          v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MAX<UUID>);
          OUTLINED_FUNCTION_3_3((uint64_t)&protocol witness table for MAX<A>);
          v120 = OUTLINED_FUNCTION_44(v119);
          v121 = v117;
          v122 = v159;
          (*(void (**)(uint64_t, uint64_t, ValueMetadata *))(v72 + 16))(v120, v121, v159);
          ((void (*)(char *, Swift::String *, ValueMetadata *))v48)((char *)v50 + *(int *)(v118 + 40), v50, v33);
          *(_QWORD *)v48 = OUTLINED_FUNCTION_5_0();
          *(_QWORD *)(v48 + 8) = v123;
          v124 = OUTLINED_FUNCTION_71();
          OUTLINED_FUNCTION_37(v124);
          v50->_countAndFlagsBits = (uint64_t)countAndFlagsBits;
          v50->_object = v25._object;
          (*(void (**)(uint64_t, ValueMetadata *))(v72 + 8))(v156, v122);
          (*(void (**)(Swift::String *, ValueMetadata *))(v16 + 8))(v50, v33);
          goto LABEL_8;
        }
        v127 = v158;
        if (v51 == 7)
        {
          v127[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MAX<Int64>);
          v127[4] = (uint64_t)&protocol witness table for MAX<A>;
          __swift_allocate_boxed_opaque_existential_0Tm(v127);
          v129 = OUTLINED_FUNCTION_44(v128);
          v130 = v156;
          v131 = v159;
          OUTLINED_FUNCTION_83(v129, v156, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 16));
          OUTLINED_FUNCTION_17_0();
          v132 = OUTLINED_FUNCTION_5_0();
          OUTLINED_FUNCTION_26(v132, v133);
          *v127 = (uint64_t)countAndFlagsBits;
          v127[1] = (uint64_t)v25._object;
          (*(void (**)(uint64_t, ValueMetadata *))(v46 + 8))(v130, v131);
          goto LABEL_27;
        }
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type SQLError and conformance SQLError();
        v142 = OUTLINED_FUNCTION_13_0();
        OUTLINED_FUNCTION_76(v142, v143);
        OUTLINED_FUNCTION_49(v144, v116);
        OUTLINED_FUNCTION_73();
        (*(void (**)(uint64_t, ValueMetadata *))(v46 + 8))(v156, v159);
        OUTLINED_FUNCTION_154(v116);
        v145 = v155;
LABEL_62:
        OUTLINED_FUNCTION_154(v145);
        goto LABEL_8;
    }
    if (v27 != 4)
    {
      if (v27 == 5)
      {
        OUTLINED_FUNCTION_12_1();
        v76 = v152;
        v160 = *(_QWORD *)(v160 + 32);
        ((void (*)(uint64_t, uint64_t, ValueMetadata *))v160)(v152, v14, v32);
        v77 = v16;
        v78 = (uint64_t)v151;
        (*(void (**)(char *, _QWORD, ValueMetadata *))(v16 + 104))(v151, 0, v33);
        v79 = (uint64_t)v150;
        v26 = specialized == infix<A>(_:_:)((uint64_t)v150, v78);
        OUTLINED_FUNCTION_62_0(v78, *(uint64_t (**)(uint64_t, uint64_t))(v77 + 8));
        if ((v26 & 1) != 0)
        {
          v80 = (int *)type metadata accessor for SUM_INT(0);
          v81 = &protocol witness table for SUM_INT;
        }
        else
        {
          v80 = (int *)type metadata accessor for SUM_NON_INT(0);
          v81 = &protocol witness table for SUM_NON_INT;
        }
        OUTLINED_FUNCTION_3_3((uint64_t)v81);
        v88 = OUTLINED_FUNCTION_72(v87);
        ((void (*)(uint64_t, uint64_t, ValueMetadata *))v160)(v88, v76, v32);
        OUTLINED_FUNCTION_32_0(v26 + v80[6], v79, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 32));
        *(_QWORD *)(v26 + v80[7]) = 0;
        *(_BYTE *)(v26 + v80[8]) = 0;
        goto LABEL_7;
      }
      if (v27 != 6)
      {
        if (v27 != 7)
        {
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type SQLError and conformance SQLError();
          v108 = v10;
          v109 = OUTLINED_FUNCTION_13_0();
          v111 = v110;
          OUTLINED_FUNCTION_76(v109, v110);
          v112 = (uint64_t)v150;
          OUTLINED_FUNCTION_32_0(v113, (uint64_t)v150, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16));
          *((_OWORD *)v111 + 2) = 0u;
          *((_OWORD *)v111 + 3) = 0u;
          *((_BYTE *)v111 + 64) = 3;
          swift_willThrow();
          OUTLINED_FUNCTION_62_0(v112, *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));
          v11[1](v14, v108);
          goto LABEL_8;
        }
        v99 = type metadata accessor for COUNT_STAR(0);
        OUTLINED_FUNCTION_3_3((uint64_t)&protocol witness table for COUNT_STAR);
        v101 = OUTLINED_FUNCTION_72(v100);
        OUTLINED_FUNCTION_32_0(v101, (uint64_t)v150, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 32));
        v31 = *(int *)(v99 + 24);
        goto LABEL_6;
      }
      OUTLINED_FUNCTION_12_1();
      v34 = type metadata accessor for TOTAL(0);
      v35 = &protocol witness table for TOTAL;
      goto LABEL_5;
    }
    OUTLINED_FUNCTION_12_1();
    v56 = v160;
    v57 = countAndFlagsBits;
    v58 = v32;
    OUTLINED_FUNCTION_83((uint64_t)countAndFlagsBits, v26, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v160 + 32));
    v59 = v16;
    v60 = *(void (**)(uint64_t, uint64_t, ValueMetadata *))(v16 + 16);
    v61 = v153;
    v62 = (uint64_t)v150;
    OUTLINED_FUNCTION_47(v153);
    v63 = (*(uint64_t (**)(uint64_t, ValueMetadata *))(v59 + 88))(v61, v33);
    v149 = v59;
    switch(v63)
    {
      case 0:
        v64 = v33;
        v65 = v62;
        v66 = (uint64_t)v57;
        v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MIN<Int64>);
        OUTLINED_FUNCTION_3_3((uint64_t)&protocol witness table for MIN<A>);
        v69 = OUTLINED_FUNCTION_44(v68);
        OUTLINED_FUNCTION_139(v69, v66, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 16));
        v60(v59 + *(int *)(v67 + 40), v65, v64);
        OUTLINED_FUNCTION_27();
        *(Swift::String *)v59 = v25;
        OUTLINED_FUNCTION_21(v66, *(uint64_t (**)(uint64_t, uint64_t))(v56 + 8));
        v70 = *(void (**)(uint64_t, ValueMetadata *))(v149 + 8);
        v71 = v65;
LABEL_36:
        v86 = v64;
        goto LABEL_37;
      case 1:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MIN<Double>);
        v64 = v33;
        OUTLINED_FUNCTION_56();
        OUTLINED_FUNCTION_3_3((uint64_t)&protocol witness table for MIN<A>);
        OUTLINED_FUNCTION_15(v82);
        OUTLINED_FUNCTION_78();
        OUTLINED_FUNCTION_27();
LABEL_35:
        OUTLINED_FUNCTION_60();
        v71 = OUTLINED_FUNCTION_57();
        goto LABEL_36;
      case 2:
LABEL_34:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MIN<String>);
        v64 = v33;
        OUTLINED_FUNCTION_56();
        OUTLINED_FUNCTION_3_3((uint64_t)&protocol witness table for MIN<A>);
        OUTLINED_FUNCTION_15(v89);
        OUTLINED_FUNCTION_78();
        v90 = (_QWORD *)(v59 + v57[11]);
        *v90 = 7235949;
        v90[1] = 0xE300000000000000;
        v91 = (_QWORD *)(v59 + v57[12]);
        *v91 = 0;
        v91[1] = 0;
        goto LABEL_35;
      case 3:
        v102 = v57;
        v103 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MIN<Date>);
        OUTLINED_FUNCTION_3_3((uint64_t)&protocol witness table for MIN<A>);
        OUTLINED_FUNCTION_39(v104);
        OUTLINED_FUNCTION_47(v59 + *(int *)(v103 + 40));
        OUTLINED_FUNCTION_38();
        v105 = type metadata accessor for Date();
        break;
      case 4:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MIN<Data>);
        OUTLINED_FUNCTION_56();
        OUTLINED_FUNCTION_3_3((uint64_t)&protocol witness table for MIN<A>);
        OUTLINED_FUNCTION_15(v114);
        v60(v59 + v57[10], (uint64_t)v58, v33);
        v115 = (_QWORD *)(v59 + v57[11]);
        *v115 = 7235949;
        v115[1] = 0xE300000000000000;
        *(_OWORD *)(v59 + v57[12]) = xmmword_18DC0C920;
        OUTLINED_FUNCTION_60();
        v71 = OUTLINED_FUNCTION_57();
        v86 = v33;
        goto LABEL_37;
      case 5:
        goto LABEL_34;
      case 6:
        v102 = v57;
        v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MIN<UUID>);
        OUTLINED_FUNCTION_3_3((uint64_t)&protocol witness table for MIN<A>);
        OUTLINED_FUNCTION_39(v126);
        OUTLINED_FUNCTION_47(v59 + *(int *)(v125 + 40));
        OUTLINED_FUNCTION_38();
        v105 = type metadata accessor for UUID();
        break;
      case 7:
        v134 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MAX<Int64>);
        OUTLINED_FUNCTION_3_3((uint64_t)&protocol witness table for MAX<A>);
        v136 = OUTLINED_FUNCTION_44(v135);
        v137 = (uint64_t (**)(uint64_t, uint64_t))v160;
        v138 = v62;
        v139 = (uint64_t)countAndFlagsBits;
        OUTLINED_FUNCTION_32_0(v136, (uint64_t)countAndFlagsBits, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v160 + 16));
        v60(v59 + v134[10], v138, v33);
        v140 = (Swift::String *)(v59 + v134[11]);
        *v140 = String.lowercased()();
        v141 = v59 + v134[12];
        *(_QWORD *)v141 = 0;
        *(_BYTE *)(v141 + 8) = 1;
        *(Swift::String *)v59 = v25;
        OUTLINED_FUNCTION_62_0(v139, v137[1]);
        v71 = OUTLINED_FUNCTION_57();
        v86 = v33;
        goto LABEL_37;
      default:
        OUTLINED_FUNCTION_54();
        lazy protocol witness table accessor for type SQLError and conformance SQLError();
        v146 = OUTLINED_FUNCTION_13_0();
        OUTLINED_FUNCTION_76(v146, v147);
        OUTLINED_FUNCTION_47(v148);
        OUTLINED_FUNCTION_73();
        OUTLINED_FUNCTION_21((uint64_t)countAndFlagsBits, *(uint64_t (**)(uint64_t, uint64_t))(v160 + 8));
        OUTLINED_FUNCTION_154(v62);
        v145 = v61;
        goto LABEL_62;
    }
    OUTLINED_FUNCTION_37(v105);
    *(Swift::String *)v59 = v25;
    ((void (*)(int *, ValueMetadata *))v58->Description)(v102, v159);
    v70 = *(void (**)(uint64_t, ValueMetadata *))(v149 + 8);
    v71 = v62;
    goto LABEL_28;
  }
  OUTLINED_FUNCTION_12_1();
  v28 = (int *)type metadata accessor for AVG(0);
  OUTLINED_FUNCTION_3_3((uint64_t)&protocol witness table for AVG);
  v30 = OUTLINED_FUNCTION_72(v29);
  (*(void (**)(uint64_t))(v160 + 32))(v30);
  (*(void (**)(uint64_t, Swift::String *, ValueMetadata *))(v16 + 32))(v26 + v28[6], v24, v15);
  *(_QWORD *)(v26 + v28[7]) = 0;
  v31 = v28[8];
LABEL_6:
  *(_QWORD *)(v26 + v31) = 0;
LABEL_7:
  *(Swift::String *)v26 = v25;
LABEL_8:
  OUTLINED_FUNCTION_9();
}

uint64_t OUTLINED_FUNCTION_50_0()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_50_1()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_50_2@<X0>(uint64_t a1@<X8>)
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)(a1 + 16));
}

void OUTLINED_FUNCTION_50_3()
{
  uint64_t v0;

}

uint64_t type metadata accessor for COUNT_STAR(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, type metadata singleton initialization cache for COUNT_STAR);
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)()
{
  char **v0;
  uint64_t (*v1)(void);
  char *v2;
  uint64_t (*v3)(_QWORD);
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  Swift::Int v30;
  char *v31;
  char *v32;
  Swift::Int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v44;
  Swift::Int v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  int v54;
  Swift::Int v55;
  uint64_t v56;
  uint64_t v57;
  Swift::Int v58;
  Swift::Int v59;
  uint64_t v60;
  uint64_t (*v61)(void);
  char *v62;
  char *v63;
  uint64_t v64;
  char *v66;
  Swift::Int v67;
  Swift::Int v68;
  uint64_t v69;
  Swift::Int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(void);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v83;
  char *v84;
  char *v85;
  void (*v86)(char *, char *, uint64_t);
  char *v87;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  char v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  unint64_t v141;
  uint64_t (*v142)(void);
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  Swift::Int v149;
  char *v150;
  uint64_t (*v151)(void);
  uint64_t v152;
  uint64_t v153;
  Swift::Int v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t (*v162)(_QWORD);
  uint64_t v163;
  char *v164;
  char *v165;
  Swift::Int v166;
  char *v167;
  void (*v168)(uint64_t, char *, uint64_t);
  char *v169;
  uint64_t (*v170)(void);
  char *v171;
  Swift::Int v172;
  Swift::Int v173;
  char **v174;
  uint64_t v175;

  OUTLINED_FUNCTION_42();
  v161 = v4;
  v162 = v3;
  v170 = v5;
  v6 = v1;
  v163 = OUTLINED_FUNCTION_137(v7, v3);
  v175 = *(_QWORD *)(v163 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_6_1();
  v155 = v9;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v10);
  v171 = (char *)&v148 - v11;
  OUTLINED_FUNCTION_7();
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v148 - v14;
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_63();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_53();
  v159 = v17;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_53();
  v158 = v19;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v20);
  v153 = (uint64_t)&v148 - v21;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v22);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_120(v23);
  v174 = v0;
  v24 = (Swift::Int)v0[1];
  v25 = _minimumMergeRunLength(_:)(v24);
  if (v25 >= v24)
  {
    if (v24 < 0)
      goto LABEL_155;
    if (v24)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)();
LABEL_133:
    OUTLINED_FUNCTION_9();
    return;
  }
  OUTLINED_FUNCTION_153(v25);
  v165 = v15;
  if (v24 < -1)
    goto LABEL_163;
  v26 = (char *)MEMORY[0x1E0DEE9D8];
  v27 = MEMORY[0x1E0DEE9D8];
  if (v24 > 1)
  {
    v27 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v27 + 16) = v24 / 2;
  }
  v28 = *(unsigned __int8 *)(v175 + 80);
  v148 = v27;
  v160 = v27 + ((v28 + 32) & ~v28);
  if (v24 < 1)
  {
    v91 = *((_QWORD *)v26 + 2);
LABEL_121:
    if (v91 >= 2)
    {
      v140 = *v174;
      do
      {
        v141 = v91 - 2;
        if (v91 < 2)
          goto LABEL_149;
        if (!v140)
          goto LABEL_162;
        v142 = v6;
        v143 = v26;
        v144 = *(_QWORD *)&v26[16 * v141 + 32];
        v145 = *(_QWORD *)&v26[16 * v91 + 24];
        OUTLINED_FUNCTION_145();
        if (v142)
          break;
        if (v145 < v144)
          goto LABEL_150;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v143 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v26);
        if (v141 >= *((_QWORD *)v143 + 2))
          goto LABEL_151;
        v146 = &v143[16 * v141 + 32];
        *(_QWORD *)v146 = v144;
        *((_QWORD *)v146 + 1) = v145;
        v147 = *((_QWORD *)v143 + 2);
        if (v91 > v147)
          goto LABEL_152;
        v26 = v143;
        memmove(&v143[16 * v91 + 16], &v143[16 * v91 + 32], 16 * (v147 - v91));
        *((_QWORD *)v143 + 2) = v147 - 1;
        v91 = v147 - 1;
        v6 = 0;
      }
      while (v147 > 2);
    }
LABEL_132:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v148 + 16) = 0;
    swift_bridgeObjectRelease();
    goto LABEL_133;
  }
  v29 = 0;
  v150 = v2;
  while (1)
  {
    v30 = (Swift::Int)v29;
    v31 = v29 + 1;
    v156 = v29;
    v157 = v26;
    if ((uint64_t)(v29 + 1) >= v24)
    {
      v44 = (Swift::Int)(v29 + 1);
    }
    else
    {
      v172 = v24;
      v151 = v6;
      v32 = *v174;
      v33 = *(_QWORD *)(v175 + 72);
      v34 = *(char **)(v175 + 16);
      v35 = OUTLINED_FUNCTION_128();
      v36 = v163;
      ((void (*)(uint64_t))v34)(v35);
      v164 = v32;
      v173 = v33;
      v169 = v34;
      v37 = ((uint64_t (*)(uint64_t, char *, uint64_t))v34)(v153, &v32[v33 * v30], v36);
      v38 = v170;
      v39 = ((uint64_t (*)(uint64_t))v170)(v37);
      v41 = v40;
      if (v39 == v38() && v41 == v42)
        LODWORD(v168) = 0;
      else
        LODWORD(v168) = OUTLINED_FUNCTION_20();
      v6 = v151;
      OUTLINED_FUNCTION_64();
      OUTLINED_FUNCTION_24();
      OUTLINED_FUNCTION_108_0(v153);
      OUTLINED_FUNCTION_108_0(v152);
      v30 = (Swift::Int)v156;
      v44 = (Swift::Int)(v156 + 2);
      v24 = v172;
      if ((uint64_t)(v156 + 2) < v172)
      {
        v2 = v164;
        v166 = v173 * v44;
        v167 = (char *)(v173 * (_QWORD)v31);
        while (1)
        {
          v45 = v44;
          v46 = v163;
          v47 = v169;
          ((void (*)(uint64_t, char *, uint64_t))v169)(v158, &v2[v166], v163);
          v48 = ((uint64_t (*)(uint64_t, char *, uint64_t))v47)(v159, &v167[(_QWORD)v2], v46);
          v6 = v170;
          v49 = ((uint64_t (*)(uint64_t))v170)(v48);
          v51 = v50;
          v53 = v49 == v6() && v51 == v52;
          v54 = v53 ? 0 : OUTLINED_FUNCTION_20();
          OUTLINED_FUNCTION_64();
          OUTLINED_FUNCTION_24();
          OUTLINED_FUNCTION_108_0(v159);
          OUTLINED_FUNCTION_108_0(v158);
          v26 = v157;
          if (((v168 ^ v54) & 1) != 0)
            break;
          v44 = v45 + 1;
          v24 = v172;
          v2 += v173;
          if (v45 + 1 >= v172)
          {
            v44 = v172;
            OUTLINED_FUNCTION_151();
            v30 = (Swift::Int)v156;
            goto LABEL_27;
          }
        }
        OUTLINED_FUNCTION_151();
        v44 = v45;
        v30 = (Swift::Int)v156;
        v24 = v172;
      }
LABEL_27:
      if ((v168 & 1) != 0)
      {
        if (v44 < v30)
          goto LABEL_156;
        if (v30 < v44)
        {
          v55 = v30;
          v56 = 0;
          v57 = v173 * (v44 - 1);
          v58 = v44 * v173;
          v59 = v55;
          v60 = v55 * v173;
          v169 = (char *)v44;
          do
          {
            if (v59 != v44 + v56 - 1)
            {
              v61 = v6;
              v62 = v164;
              if (!v164)
                goto LABEL_161;
              v63 = &v164[v60];
              v167 = &v164[v57];
              v64 = v163;
              v168 = *(void (**)(uint64_t, char *, uint64_t))(v175 + 32);
              v168((uint64_t)v155, &v164[v60], v163);
              if (v60 < v57 || v63 >= &v62[v58])
              {
                v66 = v167;
                OUTLINED_FUNCTION_22();
              }
              else
              {
                v66 = v167;
                if (v60 != v57)
                  OUTLINED_FUNCTION_36();
              }
              v168((uint64_t)v66, v155, v64);
              v26 = v157;
              v6 = v61;
              v44 = (Swift::Int)v169;
            }
            ++v59;
            --v56;
            v57 -= v173;
            v58 -= v173;
            v60 += v173;
          }
          while (v59 < v44 + v56);
          v2 = v150;
          v30 = (Swift::Int)v156;
          v24 = v172;
        }
      }
    }
    if (v44 < v24)
    {
      if (__OFSUB__(v44, v30))
        goto LABEL_154;
      if (v44 - v30 < v149)
        break;
    }
LABEL_67:
    if (v44 < v30)
      goto LABEL_153;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v169 = (char *)v44;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v26 = OUTLINED_FUNCTION_134_0(0, *((_QWORD *)v26 + 2) + 1);
    v90 = *((_QWORD *)v26 + 2);
    v89 = *((_QWORD *)v26 + 3);
    v91 = v90 + 1;
    if (v90 >= v89 >> 1)
      v26 = OUTLINED_FUNCTION_134_0((char *)(v89 > 1), v90 + 1);
    *((_QWORD *)v26 + 2) = v91;
    v92 = v26 + 32;
    v93 = &v26[16 * v90 + 32];
    v94 = v169;
    *(_QWORD *)v93 = v30;
    *((_QWORD *)v93 + 1) = v94;
    if (v90)
    {
      while (1)
      {
        v95 = v91 - 1;
        if (v91 >= 4)
        {
          v100 = &v92[16 * v91];
          v101 = *((_QWORD *)v100 - 8);
          v102 = *((_QWORD *)v100 - 7);
          v106 = __OFSUB__(v102, v101);
          v103 = v102 - v101;
          if (v106)
            goto LABEL_138;
          v105 = *((_QWORD *)v100 - 6);
          v104 = *((_QWORD *)v100 - 5);
          v106 = __OFSUB__(v104, v105);
          v98 = v104 - v105;
          v99 = v106;
          if (v106)
            goto LABEL_139;
          v107 = v91 - 2;
          v108 = &v92[16 * v91 - 32];
          v110 = *(_QWORD *)v108;
          v109 = *((_QWORD *)v108 + 1);
          v106 = __OFSUB__(v109, v110);
          v111 = v109 - v110;
          if (v106)
            goto LABEL_141;
          v106 = __OFADD__(v98, v111);
          v112 = v98 + v111;
          if (v106)
            goto LABEL_144;
          if (v112 >= v103)
          {
            v130 = &v92[16 * v95];
            v132 = *(_QWORD *)v130;
            v131 = *((_QWORD *)v130 + 1);
            v106 = __OFSUB__(v131, v132);
            v133 = v131 - v132;
            if (v106)
              goto LABEL_148;
            v123 = v98 < v133;
            goto LABEL_104;
          }
        }
        else
        {
          if (v91 != 3)
          {
            v124 = *((_QWORD *)v26 + 4);
            v125 = *((_QWORD *)v26 + 5);
            v106 = __OFSUB__(v125, v124);
            v117 = v125 - v124;
            v118 = v106;
            goto LABEL_98;
          }
          v97 = *((_QWORD *)v26 + 4);
          v96 = *((_QWORD *)v26 + 5);
          v106 = __OFSUB__(v96, v97);
          v98 = v96 - v97;
          v99 = v106;
        }
        if ((v99 & 1) != 0)
          goto LABEL_140;
        v107 = v91 - 2;
        v113 = &v92[16 * v91 - 32];
        v115 = *(_QWORD *)v113;
        v114 = *((_QWORD *)v113 + 1);
        v116 = __OFSUB__(v114, v115);
        v117 = v114 - v115;
        v118 = v116;
        if (v116)
          goto LABEL_143;
        v119 = &v92[16 * v95];
        v121 = *(_QWORD *)v119;
        v120 = *((_QWORD *)v119 + 1);
        v106 = __OFSUB__(v120, v121);
        v122 = v120 - v121;
        if (v106)
          goto LABEL_146;
        if (__OFADD__(v117, v122))
          goto LABEL_147;
        if (v117 + v122 >= v98)
        {
          v123 = v98 < v122;
LABEL_104:
          if (v123)
            v95 = v107;
          goto LABEL_106;
        }
LABEL_98:
        if ((v118 & 1) != 0)
          goto LABEL_142;
        v126 = &v92[16 * v95];
        v128 = *(_QWORD *)v126;
        v127 = *((_QWORD *)v126 + 1);
        v106 = __OFSUB__(v127, v128);
        v129 = v127 - v128;
        if (v106)
          goto LABEL_145;
        if (v129 < v117)
          goto LABEL_115;
LABEL_106:
        v134 = v95 - 1;
        if (v95 - 1 >= v91)
        {
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
          goto LABEL_158;
        }
        if (!*v174)
          goto LABEL_160;
        v135 = &v92[16 * v134];
        v136 = *(_QWORD *)v135;
        v137 = &v92[16 * v95];
        v138 = *((_QWORD *)v137 + 1);
        OUTLINED_FUNCTION_145();
        if (v6)
          goto LABEL_132;
        if (v138 < v136)
          goto LABEL_135;
        if (v95 > *((_QWORD *)v26 + 2))
          goto LABEL_136;
        *(_QWORD *)v135 = v136;
        *(_QWORD *)&v92[16 * v134 + 8] = v138;
        v139 = *((_QWORD *)v26 + 2);
        if (v95 >= v139)
          goto LABEL_137;
        v91 = v139 - 1;
        memmove(&v92[16 * v95], v137 + 16, 16 * (v139 - 1 - v95));
        *((_QWORD *)v26 + 2) = v139 - 1;
        if (v139 <= 2)
          goto LABEL_115;
      }
    }
    v91 = 1;
LABEL_115:
    v24 = (Swift::Int)v174[1];
    v29 = v169;
    v2 = v150;
    if ((uint64_t)v169 >= v24)
      goto LABEL_121;
  }
  if (__OFADD__(v30, v149))
    goto LABEL_157;
  if (v30 + v149 >= v24)
    v67 = v24;
  else
    v67 = v30 + v149;
  if (v67 >= v30)
  {
    if (v44 != v67)
    {
      v151 = v6;
      v68 = *(_QWORD *)(v175 + 72);
      v164 = *(char **)(v175 + 16);
      v69 = v68 * (v44 - 1);
      v166 = v68;
      v70 = v44 * v68;
      v71 = v163;
      v154 = v67;
      do
      {
        v72 = 0;
        v168 = (void (*)(uint64_t, char *, uint64_t))v69;
        v169 = (char *)v44;
        v167 = (char *)v70;
        while (1)
        {
          v73 = *v174;
          v172 = v70 + v72;
          v173 = v30;
          v74 = (uint64_t (*)(char *, char *, uint64_t))v164;
          ((void (*)(char *, char *, uint64_t))v164)(v2, &v73[v70 + v72], v71);
          v75 = v74(v165, &v73[v69 + v72], v71);
          v76 = v71;
          v77 = v170;
          v78 = ((uint64_t (*)(uint64_t))v170)(v75);
          v80 = v79;
          if (v78 == v77() && v80 == v81)
            break;
          v83 = OUTLINED_FUNCTION_20();
          OUTLINED_FUNCTION_64();
          OUTLINED_FUNCTION_24();
          OUTLINED_FUNCTION_82();
          OUTLINED_FUNCTION_135();
          v71 = v76;
          if ((v83 & 1) == 0)
            goto LABEL_64;
          v84 = *v174;
          v70 = (Swift::Int)v167;
          v69 = (uint64_t)v168;
          if (!*v174)
            goto LABEL_159;
          v85 = (char *)v168 + (_QWORD)v84 + v72;
          v86 = *(void (**)(char *, char *, uint64_t))(v175 + 32);
          v86(v171, &v167[(_QWORD)v84 + v72], v71);
          OUTLINED_FUNCTION_22();
          v86(v85, v171, v71);
          v72 -= v166;
          v30 = v173 + 1;
          v87 = v169;
          if (v169 == (char *)(v173 + 1))
            goto LABEL_65;
        }
        OUTLINED_FUNCTION_99();
        OUTLINED_FUNCTION_82();
        OUTLINED_FUNCTION_135();
        v71 = v76;
LABEL_64:
        v69 = (uint64_t)v168;
        v87 = v169;
        v70 = (Swift::Int)v167;
LABEL_65:
        v44 = (Swift::Int)(v87 + 1);
        v69 += v166;
        v70 += v166;
        v30 = (Swift::Int)v156;
      }
      while (v44 != v154);
      v44 = v154;
      v6 = v151;
      v26 = v157;
    }
    goto LABEL_67;
  }
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  Swift::Int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  ValueMetadata *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v55;
  Swift::Int v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v66;
  char *v67;
  void (*v68)(char *, uint64_t, ValueMetadata *);
  ValueMetadata *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  char v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  int64_t v119;
  char v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  char v127;
  uint64_t v128;
  int v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  Swift::Int v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  void (*v146)(char *, uint64_t, ValueMetadata *);
  ValueMetadata *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  _QWORD *Description;

  OUTLINED_FUNCTION_42();
  v2 = v0;
  v4 = v3;
  v5 = OUTLINED_FUNCTION_22_2();
  Description = v5[-1].Description;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_6_1();
  v138 = v7;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v8);
  v149 = (char *)&v130 - v9;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_256();
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v130 - v13;
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_53();
  v141 = v15;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v16);
  v140 = (uint64_t)&v130 - v17;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_53();
  v136 = v19;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v20);
  v135 = (uint64_t)&v130 - v21;
  v152 = v4;
  v22 = v4[1];
  v23 = _minimumMergeRunLength(_:)(v22);
  if (v23 >= v22)
  {
    if (v22 < 0)
      goto LABEL_156;
    if (v22)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)();
LABEL_134:
    OUTLINED_FUNCTION_9();
    return;
  }
  v133 = v23;
  v130 = v14;
  v144 = v1;
  LOBYTE(v24) = 2;
  if (v22 < -1)
    goto LABEL_164;
  v25 = v22;
  v26 = (char *)MEMORY[0x1E0DEE9D8];
  if (v22 > 1)
    *(_QWORD *)(static Array._allocateBufferUninitialized(minimumCapacity:)() + 16) = v22 / 2;
  OUTLINED_FUNCTION_20_3();
  v132 = v27;
  v142 = v27 + v28;
  if (v22 < 1)
  {
    v73 = *((_QWORD *)v26 + 2);
LABEL_122:
    if (v73 >= 2)
    {
      LOBYTE(v24) = (_BYTE)v152;
      v121 = *v152;
      do
      {
        v122 = v73 - 2;
        if (v73 < 2)
          goto LABEL_150;
        if (!v121)
          goto LABEL_163;
        v123 = *(_QWORD *)&v26[16 * v122 + 32];
        v124 = *(_QWORD *)&v26[16 * v73 + 24];
        OUTLINED_FUNCTION_282();
        if (v0)
          break;
        if (v124 < v123)
          goto LABEL_151;
        if ((OUTLINED_FUNCTION_314() & 1) == 0)
          v26 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v26);
        v24 = *((_QWORD *)v26 + 2);
        if (v122 >= v24)
          goto LABEL_152;
        v24 = (uint64_t)(v26 + 32);
        v125 = &v26[16 * v122 + 32];
        *(_QWORD *)v125 = v123;
        *((_QWORD *)v125 + 1) = v124;
        v126 = *((_QWORD *)v26 + 2);
        if (v73 > v126)
          goto LABEL_153;
        memmove((void *)(v24 + 16 * (v73 - 1)), (const void *)(v24 + 16 * v73), 16 * (v126 - v73));
        *((_QWORD *)v26 + 2) = v126 - 1;
        v73 = v126 - 1;
      }
      while (v126 > 2);
    }
LABEL_133:
    OUTLINED_FUNCTION_23_0();
    *(_QWORD *)(v132 + 16) = 0;
    swift_bridgeObjectRelease();
    goto LABEL_134;
  }
  v147 = v5;
  v24 = 0;
  while (1)
  {
    v29 = v24;
    v30 = v24 + 1;
    v139 = v24;
    if (v24 + 1 >= v25)
    {
      v38 = v24 + 1;
      v39 = v147;
    }
    else
    {
      v150 = v25;
      v31 = (char *)*v152;
      v32 = Description[9];
      OUTLINED_FUNCTION_244(v135, *v152 + v32 * v30);
      v143 = v31;
      v151 = v32;
      OUTLINED_FUNCTION_244(v136, (uint64_t)&v31[v32 * v29]);
      v33 = SQLExpression.sql.getter();
      v35 = v34;
      if (v33 == SQLExpression.sql.getter() && v35 == v36)
        LODWORD(v146) = 0;
      else
        LODWORD(v146) = OUTLINED_FUNCTION_29();
      OUTLINED_FUNCTION_127();
      OUTLINED_FUNCTION_24();
      v39 = v147;
      OUTLINED_FUNCTION_230(v136);
      OUTLINED_FUNCTION_230(v135);
      v38 = v29 + 2;
      if (v29 + 2 < v150)
      {
        v134 = v26;
        v131 = v2;
        v148 = v151 * v30;
        v26 = v143;
        v2 = v151 * v38;
        while (1)
        {
          v40 = v38;
          OUTLINED_FUNCTION_223_0(v140, (uint64_t)&v26[v2]);
          OUTLINED_FUNCTION_223_0(v141, (uint64_t)&v26[v148]);
          v41 = SQLExpression.sql.getter();
          v43 = v42;
          v45 = v41 == SQLExpression.sql.getter() && v43 == v44;
          v46 = v45 ? 0 : OUTLINED_FUNCTION_29();
          OUTLINED_FUNCTION_45();
          OUTLINED_FUNCTION_24();
          v39 = v147;
          OUTLINED_FUNCTION_230(v141);
          OUTLINED_FUNCTION_230(v140);
          if (((v146 ^ v46) & 1) != 0)
            break;
          v38 = v40 + 1;
          v26 += v151;
          if (v40 + 1 >= v150)
          {
            v25 = v150;
            v38 = v150;
            OUTLINED_FUNCTION_225_0();
            v29 = v139;
            goto LABEL_28;
          }
        }
        OUTLINED_FUNCTION_225_0();
        v38 = v40;
        v29 = v139;
      }
      v25 = v150;
LABEL_28:
      LOBYTE(v24) = (_BYTE)v146;
      if ((v146 & 1) != 0)
      {
        if (v38 < v29)
          goto LABEL_157;
        if (v29 < v38)
        {
          v134 = v26;
          v47 = 0;
          v48 = v151 * (v38 - 1);
          v49 = v38 * v151;
          v50 = v29 * v151;
          v148 = v38;
          do
          {
            v24 = v38 + v47 - 1;
            if (v29 != v24)
            {
              v51 = v143;
              if (!v143)
                goto LABEL_162;
              v52 = &v143[v50];
              v53 = (char *)Description[4];
              v39 = v147;
              v145 = &v143[v48];
              v146 = (void (*)(char *, uint64_t, ValueMetadata *))v53;
              ((void (*)(uint64_t, char *, ValueMetadata *))v53)(v138, &v143[v50], v147);
              if (v50 < v48 || v52 >= &v51[v49])
              {
                v55 = v145;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                v55 = v145;
                if (v50 != v48)
                  swift_arrayInitWithTakeBackToFront();
              }
              v146(v55, v138, v39);
              v38 = v148;
            }
            ++v29;
            LOBYTE(v24) = v38 + --v47;
            v48 -= v151;
            v49 -= v151;
            v50 += v151;
          }
          while (v29 < v38 + v47);
          v26 = v134;
          v29 = v139;
          v25 = v150;
        }
      }
    }
    if (v38 < v25)
    {
      v24 = v38 - v29;
      if (__OFSUB__(v38, v29))
        goto LABEL_155;
      if (v24 < v133)
        break;
    }
LABEL_68:
    if (v38 < v29)
      goto LABEL_154;
    if ((OUTLINED_FUNCTION_314() & 1) == 0)
    {
      v118 = (char *)OUTLINED_FUNCTION_89_0();
      v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v118, v119, v120, v26);
    }
    v72 = *((_QWORD *)v26 + 2);
    v71 = *((_QWORD *)v26 + 3);
    v73 = v72 + 1;
    v148 = v38;
    if (v72 >= v71 >> 1)
      v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v71 > 1), v72 + 1, 1, v26);
    *((_QWORD *)v26 + 2) = v73;
    v74 = v26 + 32;
    v75 = &v26[16 * v72 + 32];
    v76 = v148;
    *(_QWORD *)v75 = v29;
    *((_QWORD *)v75 + 1) = v76;
    if (v72)
    {
      while (1)
      {
        v77 = v73 - 1;
        if (v73 >= 4)
        {
          v24 = (uint64_t)&v74[16 * v73];
          v81 = *(_QWORD *)(v24 - 64);
          v82 = *(_QWORD *)(v24 - 56);
          v86 = __OFSUB__(v82, v81);
          v83 = v82 - v81;
          if (v86)
            goto LABEL_139;
          v85 = *(_QWORD *)(v24 - 48);
          v84 = *(_QWORD *)(v24 - 40);
          v86 = __OFSUB__(v84, v85);
          v24 = v84 - v85;
          v80 = v86;
          if (v86)
            goto LABEL_140;
          v87 = v73 - 2;
          v88 = &v74[16 * v73 - 32];
          v90 = *(_QWORD *)v88;
          v89 = *((_QWORD *)v88 + 1);
          v86 = __OFSUB__(v89, v90);
          v91 = v89 - v90;
          if (v86)
            goto LABEL_142;
          v86 = __OFADD__(v24, v91);
          v92 = v24 + v91;
          if (v86)
            goto LABEL_145;
          if (v92 >= v83)
          {
            v108 = &v74[16 * v77];
            v110 = *(_QWORD *)v108;
            v109 = *((_QWORD *)v108 + 1);
            v86 = __OFSUB__(v109, v110);
            v111 = v109 - v110;
            if (v86)
              goto LABEL_149;
            v103 = v24 < v111;
            goto LABEL_105;
          }
        }
        else
        {
          if (v73 != 3)
          {
            v24 = *((_QWORD *)v26 + 4);
            v104 = *((_QWORD *)v26 + 5);
            v86 = __OFSUB__(v104, v24);
            v97 = v104 - v24;
            v98 = v86;
            goto LABEL_99;
          }
          v79 = *((_QWORD *)v26 + 4);
          v78 = *((_QWORD *)v26 + 5);
          v86 = __OFSUB__(v78, v79);
          v24 = v78 - v79;
          v80 = v86;
        }
        if ((v80 & 1) != 0)
          goto LABEL_141;
        v87 = v73 - 2;
        v93 = &v74[16 * v73 - 32];
        v95 = *(_QWORD *)v93;
        v94 = *((_QWORD *)v93 + 1);
        v96 = __OFSUB__(v94, v95);
        v97 = v94 - v95;
        v98 = v96;
        if (v96)
          goto LABEL_144;
        v99 = &v74[16 * v77];
        v101 = *(_QWORD *)v99;
        v100 = *((_QWORD *)v99 + 1);
        v86 = __OFSUB__(v100, v101);
        v102 = v100 - v101;
        if (v86)
          goto LABEL_147;
        if (__OFADD__(v97, v102))
          goto LABEL_148;
        if (v97 + v102 >= v24)
        {
          v103 = v24 < v102;
LABEL_105:
          if (v103)
            v77 = v87;
          goto LABEL_107;
        }
LABEL_99:
        if ((v98 & 1) != 0)
          goto LABEL_143;
        v105 = &v74[16 * v77];
        v107 = *(_QWORD *)v105;
        v106 = *((_QWORD *)v105 + 1);
        v86 = __OFSUB__(v106, v107);
        v24 = v106 - v107;
        if (v86)
          goto LABEL_146;
        if (v24 < v97)
          goto LABEL_116;
LABEL_107:
        v112 = v77 - 1;
        if (v77 - 1 >= v73)
        {
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
          goto LABEL_159;
        }
        v24 = *v152;
        if (!*v152)
          goto LABEL_161;
        v113 = &v74[16 * v112];
        v114 = *(_QWORD *)v113;
        v115 = &v74[16 * v77];
        v116 = *((_QWORD *)v115 + 1);
        OUTLINED_FUNCTION_282();
        v2 = v0;
        if (v0)
          goto LABEL_133;
        if (v116 < v114)
          goto LABEL_136;
        v24 = *((_QWORD *)v26 + 2);
        if (v77 > v24)
          goto LABEL_137;
        *(_QWORD *)v113 = v114;
        v24 = (uint64_t)&v74[16 * v112];
        *(_QWORD *)(v24 + 8) = v116;
        v117 = *((_QWORD *)v26 + 2);
        if (v77 >= v117)
          goto LABEL_138;
        v73 = v117 - 1;
        memmove(&v74[16 * v77], v115 + 16, 16 * (v117 - 1 - v77));
        *((_QWORD *)v26 + 2) = v117 - 1;
        if (v117 <= 2)
          goto LABEL_116;
      }
    }
    v73 = 1;
LABEL_116:
    v25 = v152[1];
    v24 = v148;
    if (v148 >= v25)
      goto LABEL_122;
  }
  v24 = v29 + v133;
  if (__OFADD__(v29, v133))
    goto LABEL_158;
  if (v24 >= v25)
    v56 = v25;
  else
    v56 = v29 + v133;
  if (v56 >= v29)
  {
    if (v38 != v56)
    {
      v134 = v26;
      v131 = v2;
      v57 = (char *)Description[9];
      v143 = (char *)Description[2];
      v58 = (_QWORD)v57 * (v38 - 1);
      v145 = v57;
      v151 = v38 * (_QWORD)v57;
      v26 = v130;
      v137 = v56;
      do
      {
        v2 = 0;
        v148 = v38;
        v146 = (void (*)(char *, uint64_t, ValueMetadata *))v58;
        while (1)
        {
          v150 = v29;
          v59 = *v152;
          v60 = v143;
          ((void (*)(char *, uint64_t, ValueMetadata *))v143)(v26, v151 + v2 + *v152, v39);
          ((void (*)(uint64_t, uint64_t, ValueMetadata *))v60)(v144, v58 + v2 + v59, v39);
          v61 = SQLExpression.sql.getter();
          v63 = v62;
          if (v61 == SQLExpression.sql.getter() && v63 == v64)
            break;
          v66 = OUTLINED_FUNCTION_29();
          OUTLINED_FUNCTION_64();
          OUTLINED_FUNCTION_24();
          OUTLINED_FUNCTION_201_0();
          OUTLINED_FUNCTION_304();
          if ((v66 & 1) == 0)
            goto LABEL_65;
          v24 = *v152;
          v58 = (uint64_t)v146;
          if (!*v152)
            goto LABEL_160;
          v67 = (char *)v146 + v24 + v2;
          v68 = (void (*)(char *, uint64_t, ValueMetadata *))Description[4];
          v69 = v147;
          v68(v149, v24 + v151 + v2, v147);
          swift_arrayInitWithTakeFrontToBack();
          v68(v67, (uint64_t)v149, v69);
          v2 -= (uint64_t)v145;
          v29 = v150 + 1;
          v70 = v148;
          v39 = v69;
          if (v148 == v150 + 1)
            goto LABEL_66;
        }
        OUTLINED_FUNCTION_99();
        OUTLINED_FUNCTION_201_0();
        OUTLINED_FUNCTION_304();
LABEL_65:
        v70 = v148;
        v58 = (uint64_t)v146;
LABEL_66:
        v38 = v70 + 1;
        v58 += (uint64_t)v145;
        v151 += (uint64_t)v145;
        v29 = v139;
      }
      while (v38 != v137);
      v38 = v137;
      OUTLINED_FUNCTION_225_0();
    }
    goto LABEL_68;
  }
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  v129 = 0;
  v128 = 936;
  v127 = v24;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void OUTLINED_FUNCTION_31_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  outlined init with take of UUID?(v3, v4 - 152, a3);
}

uint64_t OUTLINED_FUNCTION_67_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

ValueMetadata *OUTLINED_FUNCTION_31_1()
{
  return type metadata accessor for SQLDataType();
}

uint64_t OUTLINED_FUNCTION_31_2()
{
  return swift_release();
}

void OUTLINED_FUNCTION_31_3(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v3 - 256) = v2;
  if (a1 < 64)
    v5 = ~(-1 << a1);
  else
    v5 = -1;
  *(_QWORD *)(v4 - 280) = v5 & v1;
}

_OWORD *OUTLINED_FUNCTION_79()
{
  uint64_t v0;

  return outlined init with take of Any((_OWORD *)(v0 - 152), (_OWORD *)(v0 - 120));
}

uint64_t OUTLINED_FUNCTION_79_2(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  return static KeyedAggregationMetadataCache.tableName(materializedViewName:)(a1, a2, 36, 0xD000000000000022, a5);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)()
{
  uint64_t (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t (*)(void), uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t (*)(void), uint64_t, uint64_t);
  uint64_t (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  OUTLINED_FUNCTION_42();
  v37 = v1;
  v43 = v2;
  v4 = v3;
  v6 = v5;
  v35 = v7;
  v9 = v8(0);
  v44 = *(_QWORD **)(v9 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_6_1();
  v41 = v11;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_159();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v33 - v14;
  v40 = v4;
  v34 = v6;
  if (v4 != v6)
  {
    v16 = v44[9];
    v36 = (uint64_t (*)(uint64_t (*)(void), uint64_t, uint64_t))v44[2];
    v17 = v16 * (v40 - 1);
    v38 = v16;
    v46 = v16 * v40;
    while (2)
    {
      v18 = 0;
      v45 = v35;
      v39 = v17;
      while (1)
      {
        v19 = *v43;
        v42 = v46 + v18;
        v20 = v36;
        v36((uint64_t (*)(void))v15, v46 + v18 + v19, v9);
        v21 = v20(v0, v17 + v18 + v19, v9);
        v17 = v9;
        v9 = (uint64_t)v0;
        v0 = v37;
        v22 = ((uint64_t (*)(uint64_t))v37)(v21);
        v23 = v15;
        v15 = v24;
        if (v22 == v0() && v15 == v25)
          break;
        v27 = OUTLINED_FUNCTION_29();
        OUTLINED_FUNCTION_45();
        OUTLINED_FUNCTION_24();
        v28 = (void (*)(uint64_t, uint64_t))v44[1];
        v28(v9, v17);
        v28((uint64_t)v23, v17);
        OUTLINED_FUNCTION_144();
        if ((v27 & 1) != 0)
        {
          v29 = *v43;
          if (!*v43)
          {
            __break(1u);
            return;
          }
          v30 = v29 + v17 + v18;
          v31 = (void (*)(uint64_t, uint64_t, uint64_t))v44[4];
          v31(v41, v29 + v46 + v18, v9);
          swift_arrayInitWithTakeFrontToBack();
          v31(v30, v41, v9);
          v18 -= v38;
          if (v40 != ++v45)
            continue;
        }
        goto LABEL_13;
      }
      OUTLINED_FUNCTION_99();
      v32 = (void (*)(uint64_t, uint64_t))v44[1];
      v32(v9, v17);
      v32((uint64_t)v23, v17);
      OUTLINED_FUNCTION_144();
LABEL_13:
      v17 += v38;
      v46 += v38;
      if (++v40 != v34)
        continue;
      break;
    }
  }
  OUTLINED_FUNCTION_9();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ValueMetadata *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, ValueMetadata *);
  uint64_t v32;
  ValueMetadata *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  _QWORD *Description;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_42();
  v37 = v0;
  v2 = v1;
  v4 = v3;
  v30 = v5;
  v33 = OUTLINED_FUNCTION_22_2();
  Description = v33[-1].Description;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v6);
  v35 = (uint64_t)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_7();
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v28 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v28 - v12;
  v34 = v2;
  v29 = v4;
  if (v2 != v4)
  {
    v14 = Description[9];
    v31 = (void (*)(char *, uint64_t, ValueMetadata *))Description[2];
    v32 = v14;
    v40 = v14 * (v34 - 1);
    v39 = v14 * v34;
    while (2)
    {
      v15 = 0;
      v16 = v30;
      v17 = v33;
      while (1)
      {
        v18 = *v37;
        v36 = v39 + v15;
        v31(v13, v39 + v15 + v18, v17);
        OUTLINED_FUNCTION_276((uint64_t)v11, v40 + v15 + v18);
        v19 = SQLExpression.sql.getter();
        v20 = v11;
        v22 = v21;
        if (v19 == SQLExpression.sql.getter() && v22 == v23)
          break;
        v25 = OUTLINED_FUNCTION_29();
        OUTLINED_FUNCTION_45();
        OUTLINED_FUNCTION_24();
        OUTLINED_FUNCTION_197();
        OUTLINED_FUNCTION_310();
        v11 = v20;
        if ((v25 & 1) != 0)
        {
          v26 = *v37;
          if (!*v37)
          {
            __break(1u);
            return;
          }
          v27 = v26 + v40 + v15;
          v17 = v33;
          OUTLINED_FUNCTION_276(v35, v26 + v39 + v15);
          swift_arrayInitWithTakeFrontToBack();
          OUTLINED_FUNCTION_276(v27, v35);
          v15 -= v32;
          ++v16;
          v11 = v20;
          if (v34 != v16)
            continue;
        }
        goto LABEL_13;
      }
      OUTLINED_FUNCTION_99();
      OUTLINED_FUNCTION_197();
      OUTLINED_FUNCTION_310();
      v11 = v20;
LABEL_13:
      v40 += v32;
      v39 += v32;
      if (++v34 != v29)
        continue;
      break;
    }
  }
  OUTLINED_FUNCTION_9();
}

BOOL OUTLINED_FUNCTION_86_0@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void OUTLINED_FUNCTION_86_1(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  StorableValue.init(_:dataType:)(a1, a2, a3);
}

void OUTLINED_FUNCTION_86_2()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v0 + 8);
  *(_QWORD *)(v1 - 192) = *(_QWORD *)v0;
  *(_BYTE *)(v1 - 184) = v2;
}

uint64_t OUTLINED_FUNCTION_62_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_62_1()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_62_2()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_62_3@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = (_QWORD *)(v5 + v4);
  v7 = a1[1];
  *v6 = *a1;
  v6[1] = v7;
  v8 = v5 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)v8 = *(unsigned __int8 *)(v1 + *(int *)(v3 + 32));
  *(_BYTE *)(v8 + 8) = 0;
  return swift_storeEnumTagMultiPayload();
}

Swift::String __swiftcall AggregationFunction.name()()
{
  uint64_t v0;
  Swift::String result;
  _BYTE v2[200];

  outlined init with copy of AggregationFunction.AggregationType(v0, (uint64_t)v2);
  __asm { BR              X10 }
  return result;
}

uint64_t sub_18D835728()
{
  _OWORD *v0;
  __int128 v1;
  Swift::String v2;
  __int128 v3;
  Swift::String v4;
  Swift::String v5;
  _OWORD v7[23];

  v1 = v0[3];
  v7[2] = v0[2];
  v7[3] = v1;
  v2 = (Swift::String)v0[5];
  v7[4] = v0[4];
  v7[5] = v2;
  v3 = v0[1];
  v7[0] = *v0;
  v7[1] = v3;
  v4 = v2;
  swift_bridgeObjectRetain();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  outlined destroy of SQLExpression((uint64_t)v7);
  return 677869153;
}

uint64_t outlined init with copy of AggregationFunction.AggregationType(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AggregationFunction.AggregationType(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for AggregationFunction.AggregationType(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  v4 = *(unsigned __int8 *)(a2 + 192);
  if (v4 >= 7)
    v4 = *(_DWORD *)a2 + 7;
  switch(v4)
  {
    case 0u:
      v5 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v5;
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
      v6 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v6;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v7 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v7;
      v8 = *(_QWORD *)(a2 + 80);
      v9 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v8;
      *(_QWORD *)(a1 + 88) = v9;
      *(_BYTE *)(a1 + 192) = 0;
      goto LABEL_14;
    case 1u:
      v16 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v16;
      (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1, a2);
      v17 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v17;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v18 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v18;
      v19 = *(_QWORD *)(a2 + 80);
      v20 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v19;
      *(_QWORD *)(a1 + 88) = v20;
      v21 = 1;
      goto LABEL_13;
    case 2u:
      v22 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v22;
      (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a1, a2);
      v23 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v23;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v24 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v24;
      v25 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v25;
      v26 = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v26)
      {
        v27 = *(_QWORD *)(a2 + 128);
        *(_QWORD *)(a1 + 120) = v26;
        *(_QWORD *)(a1 + 128) = v27;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))(a1 + 96, a2 + 96, v26);
        v28 = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
        *(_QWORD *)(a1 + 144) = v28;
        *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
        v29 = *(_QWORD *)(a2 + 168);
        *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 168) = v29;
        v30 = *(_QWORD *)(a2 + 176);
        v31 = *(_QWORD *)(a2 + 184);
        *(_QWORD *)(a1 + 176) = v30;
        *(_QWORD *)(a1 + 184) = v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v53 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v53;
        v54 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v54;
        v55 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v55;
      }
      *(_BYTE *)(a1 + 192) = 2;
      return a1;
    case 3u:
      v32 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v32;
      (**(void (***)(uint64_t, uint64_t))(v32 - 8))(a1, a2);
      v33 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v33;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v34 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v34;
      v35 = *(_QWORD *)(a2 + 80);
      v36 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v35;
      *(_QWORD *)(a1 + 88) = v36;
      v21 = 3;
      goto LABEL_13;
    case 4u:
      v37 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v37;
      (**(void (***)(uint64_t, uint64_t))(v37 - 8))(a1, a2);
      v38 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v38;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v39 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v39;
      v40 = *(_QWORD *)(a2 + 80);
      v41 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v40;
      *(_QWORD *)(a1 + 88) = v41;
      v21 = 4;
      goto LABEL_13;
    case 5u:
      v42 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v42;
      (**(void (***)(uint64_t, uint64_t))(v42 - 8))(a1, a2);
      v43 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v43;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v44 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v44;
      v45 = *(_QWORD *)(a2 + 80);
      v46 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v45;
      *(_QWORD *)(a1 + 88) = v46;
      v21 = 5;
      goto LABEL_13;
    case 6u:
      v47 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v47;
      (**(void (***)(uint64_t, uint64_t))(v47 - 8))(a1, a2);
      v48 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v48;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v49 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v49;
      v50 = *(_QWORD *)(a2 + 80);
      v51 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v50;
      *(_QWORD *)(a1 + 88) = v51;
      v21 = 6;
LABEL_13:
      *(_BYTE *)(a1 + 192) = v21;
LABEL_14:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      v10 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v10;
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      v11 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v11;
      v12 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v12;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v13;
      v14 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v14;
      v15 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v15;
      break;
  }
  return a1;
}

ValueMetadata *type metadata accessor for AggregationFunction.AggregationType()
{
  return &type metadata for AggregationFunction.AggregationType;
}

uint64_t AggregationFunction.aggregationType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AggregationFunction.AggregationType(v1, a1);
}

uint64_t getEnumTag for AggregationFunction.AggregationType(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 192);
  if (result >= 7)
    return (*(_DWORD *)a1 + 7);
  return result;
}

void __swift_allocate_boxed_opaque_existential_0Tm(uint64_t *a1)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
    *a1 = swift_allocBox();
  OUTLINED_FUNCTION_1();
}

void AggregationFunction.returnType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 193);
}

void specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_22_2();
  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v2 = v3;
  }
  OUTLINED_FUNCTION_285();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)();
  *a1 = v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6[2];

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType))
                 - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t OUTLINED_FUNCTION_166()
{
  return swift_bridgeObjectRelease();
}

uint64_t outlined destroy of SQLExpression(uint64_t a1)
{
  destroy for SQLExpression(a1);
  return a1;
}

uint64_t OUTLINED_FUNCTION_74()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_74_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v0, v1, v2);
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    result = a2(v3 > 1);
    *(_QWORD *)v2 = result;
  }
  return result;
}

void static KeyedFirstMatchingRecordCache.columnNames(groupBySchema:payloadSchema:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  ValueMetadata *v19;
  void (**Description)(char *, char *, ValueMetadata *);
  void (*v21)(char *, char *, ValueMetadata *);
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _BOOL8 v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char *v33;

  OUTLINED_FUNCTION_82_1();
  v2 = v1;
  v4 = v3;
  v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
  OUTLINED_FUNCTION_254();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_6_1();
  v31 = v6;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v7);
  v9 = (_QWORD *)((char *)v29 - v8);
  v10 = *(_QWORD *)(v4 + 16);
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  if (v10)
  {
    v29[1] = v2;
    v33 = (char *)MEMORY[0x1E0DEE9D8];
    OUTLINED_FUNCTION_54_4(0, v10);
    OUTLINED_FUNCTION_20_3();
    v13 = v4 + v12;
    v30 = *(_QWORD *)(v0 + 72);
    do
    {
      outlined init with copy of Date?(v13, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      v14 = v31;
      v15 = *(int *)(v32 + 48);
      v11 = (char *)v31 + v15;
      v16 = (char *)v9 + v15;
      v17 = *v9;
      v18 = v9[1];
      *v31 = *v9;
      v14[1] = v18;
      v19 = OUTLINED_FUNCTION_33();
      Description = (void (**)(char *, char *, ValueMetadata *))v19[-1].Description;
      Description[2](v11, v16, v19);
      v21 = Description[1];
      OUTLINED_FUNCTION_32_4();
      ((void (*)(char *, ValueMetadata *))v21)(v11, v19);
      v22 = OUTLINED_FUNCTION_13_3();
      outlined destroy of UUID?(v22, v23);
      if ((OUTLINED_FUNCTION_144_1() & 1) == 0)
      {
        OUTLINED_FUNCTION_21_5(0, *((_QWORD *)v11 + 2) + 1);
        v11 = v33;
      }
      v25 = *((_QWORD *)v11 + 2);
      v24 = *((_QWORD *)v11 + 3);
      if (v25 >= v24 >> 1)
      {
        v27 = OUTLINED_FUNCTION_208_0(v24);
        OUTLINED_FUNCTION_21_5(v27, v25 + 1);
        v11 = v33;
      }
      *((_QWORD *)v11 + 2) = v25 + 1;
      v26 = &v11[16 * v25];
      *((_QWORD *)v26 + 4) = v17;
      *((_QWORD *)v26 + 5) = v18;
      v13 += v30;
      --v10;
    }
    while (v10);
  }
  v28 = OUTLINED_FUNCTION_100();
  specialized _copyCollectionToContiguousArray<A>(_:)(v28);
  OUTLINED_FUNCTION_45();
  v33 = v11;
  specialized Array.append<A>(contentsOf:)();
  OUTLINED_FUNCTION_55();
}

void static KeyedAggregationMetadataCache.columnNames(groupBySchema:payloadSchema:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  ValueMetadata *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  _BOOL8 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  ValueMetadata *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _BOOL8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;

  OUTLINED_FUNCTION_82_1();
  v2 = v1;
  v4 = v3;
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
  v57 = *(_QWORD *)(v64 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v5);
  v63 = (char **)((char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char **)((char *)&v55 - v8);
  v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
  OUTLINED_FUNCTION_254();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_6_1();
  v61 = v11;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v12);
  v14 = (uint64_t *)((char *)&v55 - v13);
  v15 = *(_QWORD *)(v4 + 16);
  v56 = v2;
  if (v15)
  {
    v66 = (char *)MEMORY[0x1E0DEE9D8];
    OUTLINED_FUNCTION_54_4(0, v15);
    OUTLINED_FUNCTION_20_3();
    v17 = v4 + v16;
    v60 = *(_QWORD *)(v0 + 72);
    do
    {
      outlined init with copy of Date?(v17, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      v18 = v61;
      v19 = (char *)v61 + *(int *)(v62 + 48);
      v20 = v14[1];
      v65 = *v14;
      *v61 = v65;
      v18[1] = v20;
      v21 = OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_129_2((uint64_t)v21);
      v0 = *(_QWORD *)(v0 + 8);
      OUTLINED_FUNCTION_87_0();
      OUTLINED_FUNCTION_302();
      outlined destroy of UUID?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      if ((OUTLINED_FUNCTION_144_1() & 1) == 0)
      {
        OUTLINED_FUNCTION_21_5(0, *((_QWORD *)v19 + 2) + 1);
        v19 = v66;
      }
      v23 = *((_QWORD *)v19 + 2);
      v22 = *((_QWORD *)v19 + 3);
      if (v23 >= v22 >> 1)
      {
        v25 = OUTLINED_FUNCTION_208_0(v22);
        OUTLINED_FUNCTION_21_5(v25, v23 + 1);
        v19 = v66;
      }
      *((_QWORD *)v19 + 2) = v23 + 1;
      v24 = &v19[16 * v23];
      *((_QWORD *)v24 + 4) = v65;
      *((_QWORD *)v24 + 5) = v20;
      v17 += v60;
      --v15;
    }
    while (v15);
    v55 = v19;
    v2 = v56;
  }
  else
  {
    v55 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v26 = MEMORY[0x1E0DEE9D8];
  v59 = *(_QWORD **)(v2 + 16);
  if (v59)
  {
    v58 = v2 + 32;
    OUTLINED_FUNCTION_141();
    v27 = 0;
    v28 = v26;
    while (1)
    {
      v29 = *(_QWORD *)(v58 + 8 * (_QWORD)v27);
      v30 = *(_QWORD *)(v29 + 16);
      if (v30)
      {
        v61 = v27;
        v62 = v28;
        v66 = (char *)v26;
        OUTLINED_FUNCTION_156();
        OUTLINED_FUNCTION_54_4(0, v30);
        OUTLINED_FUNCTION_20_3();
        v60 = v29;
        v32 = v29 + v31;
        v65 = *(_QWORD *)(v33 + 72);
        do
        {
          outlined init with copy of Date?(v32, (uint64_t)v9, &demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
          v34 = v63;
          v35 = (char *)v63 + *(int *)(v64 + 64);
          v36 = v9[1];
          *v63 = *v9;
          v34[1] = v36;
          v38 = v9[2];
          v37 = v9[3];
          v34[2] = v38;
          v34[3] = v37;
          v39 = OUTLINED_FUNCTION_33();
          OUTLINED_FUNCTION_129_2((uint64_t)v39);
          v0 = *(_QWORD *)(v0 + 8);
          OUTLINED_FUNCTION_100();
          OUTLINED_FUNCTION_302();
          outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
          if ((OUTLINED_FUNCTION_144_1() & 1) == 0)
          {
            OUTLINED_FUNCTION_21_5(0, *((_QWORD *)v35 + 2) + 1);
            v35 = v66;
          }
          v41 = *((_QWORD *)v35 + 2);
          v40 = *((_QWORD *)v35 + 3);
          if (v41 >= v40 >> 1)
          {
            v43 = OUTLINED_FUNCTION_208_0(v40);
            OUTLINED_FUNCTION_21_5(v43, v41 + 1);
            v35 = v66;
          }
          *((_QWORD *)v35 + 2) = v41 + 1;
          v42 = &v35[16 * v41];
          *((_QWORD *)v42 + 4) = v38;
          *((_QWORD *)v42 + 5) = v37;
          v32 += v65;
          --v30;
        }
        while (v30);
        swift_bridgeObjectRelease();
        v26 = MEMORY[0x1E0DEE9D8];
        v27 = v61;
        v28 = v62;
      }
      else
      {
        v35 = (char *)v26;
      }
      v44 = *((_QWORD *)v35 + 2);
      v0 = *(_QWORD *)(v28 + 16);
      v45 = v0 + v44;
      if (__OFADD__(v0, v44))
        break;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || v45 > *(_QWORD *)(v28 + 24) >> 1)
      {
        if (v0 <= v45)
          v47 = v0 + v44;
        else
          v47 = v0;
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v47, 1, v28);
        v28 = v48;
      }
      if (*((_QWORD *)v35 + 2))
      {
        v49 = *(_QWORD *)(v28 + 16);
        if ((*(_QWORD *)(v28 + 24) >> 1) - v49 < v44)
          goto LABEL_44;
        v50 = v28 + 16 * v49 + 32;
        if ((unint64_t)(v35 + 32) < v50 + 16 * v44 && v50 < (unint64_t)&v35[16 * v44 + 32])
          goto LABEL_46;
        swift_arrayInitWithCopy();
        if (v44)
        {
          v52 = *(_QWORD *)(v28 + 16);
          v53 = __OFADD__(v52, v44);
          v54 = v52 + v44;
          if (v53)
            goto LABEL_45;
          *(_QWORD *)(v28 + 16) = v54;
        }
      }
      else if (v44)
      {
        goto LABEL_43;
      }
      v27 = (_QWORD *)((char *)v27 + 1);
      OUTLINED_FUNCTION_24();
      if (v27 == v59)
      {
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_41:
    v66 = v55;
    specialized Array.append<A>(contentsOf:)();
    OUTLINED_FUNCTION_55();
  }
}

uint64_t OUTLINED_FUNCTION_111_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

void OUTLINED_FUNCTION_111_2(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with take of UUID?(a1, a2, v2);
}

uint64_t partial apply for closure #2 in static KeyedQueryPlannerMetadataCache.readMetadataSQL(materializedViewName:groupBySchema:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in static KeyedQueryPlannerMetadataCache.readMetadataSQL(materializedViewName:groupBySchema:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t SQLExpressionEvaluator.evaluatesToTrue(expression:payload:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  ValueMetadata *v8;
  void (**v9)(uint64_t, _QWORD, ValueMetadata *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  void (**v34)(uint64_t, _QWORD, ValueMetadata *);
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  void (**Description)(_QWORD, uint64_t, ValueMetadata *);
  uint64_t v54;
  ValueMetadata *v55;
  uint64_t v56;
  ValueMetadata *v57;
  void (**v58)(uint64_t, _QWORD, ValueMetadata *);
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;

  v55 = type metadata accessor for SQLExpression();
  Description = (void (**)(_QWORD, uint64_t, ValueMetadata *))v55[-1].Description;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_8();
  v54 = v7;
  v8 = OUTLINED_FUNCTION_31_1();
  v9 = (void (**)(uint64_t, _QWORD, ValueMetadata *))v8[-1].Description;
  v57 = v8;
  v58 = v9;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_8();
  v56 = v11;
  v12 = OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_25_0();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_22_1();
  v16 = v14 - v15;
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (uint64_t *)((char *)&v49 - v19);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v49 - v21;
  v23 = v59;
  SQLExpressionEvaluator.execute(expression:payload:)(a1, a2, (uint64_t *)((char *)&v49 - v21));
  if (!v23)
  {
    v51 = v12;
    v52 = (uint64_t *)v16;
    v59 = v20;
    v50 = a1;
    v25 = *(uint64_t **)(v2 + 40);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<StorableValue>);
    v26 = *(_QWORD *)(v3 + 72);
    v27 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_18DC0D020;
    v29 = v28 + v27;
    OUTLINED_FUNCTION_55_1((uint64_t)v22, v29);
    OUTLINED_FUNCTION_55_1((uint64_t)v22, v29 + v26);
    OUTLINED_FUNCTION_55_1((uint64_t)v22, v29 + 2 * v26);
    v30 = SQLExpressionEvaluator.execute(stmt:bindingValues:)((uint64_t)v25, v28);
    swift_setDeallocating();
    v31 = (uint64_t *)v28;
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    if (v30 && *(_QWORD *)(v30 + 16) == 1)
    {
      v32 = specialized Dictionary.startIndex.getter(v30);
      v34 = v58;
      v25 = v59;
      if ((v35 & 1) != 0)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      if (*(_DWORD *)(v30 + 36) == v33)
      {
        if (v32 != 1 << *(_BYTE *)(v30 + 32))
        {
          v36 = OUTLINED_FUNCTION_59_0();
          specialized Dictionary.subscript.getter(v36, v37, v38, v39);
          v40 = v62;
          v41 = v63;
          v42 = v64;
          swift_bridgeObjectRetain();
          outlined copy of DatabaseValue(v40, v41, v42);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_11_2();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_23_0();
          v30 = v56;
          v34[13](v56, 0, v57);
          static StorableValue.fromDatabaseValue(_:dataType:)(v40, v41, v42, v30, v25);
          OUTLINED_FUNCTION_37_1();
          OUTLINED_FUNCTION_11_2();
          v31 = v52;
          outlined init with copy of SQLExpressionEvaluatorError((uint64_t)v25, (uint64_t)v52, type metadata accessor for StorableValue);
          if (!swift_getEnumCaseMultiPayload())
          {
            outlined destroy of StorableValue((uint64_t)v25, type metadata accessor for StorableValue);
            outlined destroy of StorableValue((uint64_t)v22, type metadata accessor for StorableValue);
            v24 = (*v31 > 0) & ~*((_BYTE *)v31 + 8);
            return v24 & 1;
          }
LABEL_16:
          outlined destroy of StorableValue((uint64_t)v31, type metadata accessor for StorableValue);
          Description[2](v54, v50, v55);
          v60 = 0;
          v61 = 0xE000000000000000;
          _StringGuts.grow(_:)(61);
          OUTLINED_FUNCTION_5_1(0xD000000000000029, (uint64_t)"Unexpected result from truthy evaluation ");
          v44 = MEMORY[0x1E0DED588];
          OUTLINED_FUNCTION_56_1();
          OUTLINED_FUNCTION_71_1();
          v45._countAndFlagsBits = 0xD000000000000010;
          String.append(_:)(v45);
          OUTLINED_FUNCTION_56_1();
          while (1)
          {
            OUTLINED_FUNCTION_9_4();
            __break(1u);
LABEL_18:
            v46._countAndFlagsBits = String.init(cString:)();
            String.append(_:)(v46);
            OUTLINED_FUNCTION_64();
            OUTLINED_FUNCTION_5_1(v44 + 5, (uint64_t)", expected 1 but got ");
            if (v30)
            {
              v47 = *(_QWORD *)(v30 + 16);
              OUTLINED_FUNCTION_23_0();
            }
            else
            {
              v47 = 0;
            }
            v65 = v47;
            v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v48);
            OUTLINED_FUNCTION_64();
          }
        }
LABEL_15:
        OUTLINED_FUNCTION_23_0();
        __break(1u);
        goto LABEL_16;
      }
      __break(1u);
    }
    v44 = 0xD000000000000010;
    v60 = 0;
    v61 = 0xE000000000000000;
    v31 = &v60;
    _StringGuts.grow(_:)(62);
    OUTLINED_FUNCTION_5_1(0xD000000000000025, (uint64_t)"Unexpected number of columns in from ");
    if (sqlite3_sql((sqlite3_stmt *)v25))
      goto LABEL_18;
    __break(1u);
    goto LABEL_14;
  }
  return v24 & 1;
}

uint64_t OUTLINED_FUNCTION_36()
{
  return swift_arrayInitWithTakeBackToFront();
}

uint64_t OUTLINED_FUNCTION_36_0()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_36_1(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of StorableValue(*(_QWORD *)(v2 - 376), a2);
}

uint64_t OUTLINED_FUNCTION_36_2()
{
  return static os_log_type_t.error.getter();
}

void QueryPlannerMetadata.init(materializedView:database:cacheSize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  sqlite3 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  ValueMetadata *v34;
  uint64_t Description;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  Swift::String v60;
  void *v61;
  uint64_t v62;
  Swift::String v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  void *v75;
  uint64_t v76;
  int v77;
  id v78;
  Class isa;
  Class v80;
  id v81;
  id v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  ValueMetadata *v90;
  sqlite3 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  ValueMetadata *v96;
  void (*v97)(void);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  id v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  char *v116;
  void (*v117)(void);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  sqlite3 *v131;
  ValueMetadata *v132;
  uint64_t v133;
  Swift::String v134;
  _QWORD v135[2];
  unsigned __int8 v136;
  uint64_t v137;

  OUTLINED_FUNCTION_42();
  a19 = v24;
  a20 = v25;
  v129 = v22;
  v123 = v26;
  v131 = v27;
  v29 = v28;
  v137 = *MEMORY[0x1E0C80C00];
  v124 = *v21;
  type metadata accessor for KeyedFirstMatchingRecordCache(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v30);
  OUTLINED_FUNCTION_12_6(v31, v113);
  type metadata accessor for KeyedAggregationMetadataCache(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v32);
  v122 = (uint64_t)&v113 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = OUTLINED_FUNCTION_35();
  Description = (uint64_t)v34[-1].Description;
  MEMORY[0x1E0C80A78](v34);
  v119 = (uint64_t)&v113 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v37);
  OUTLINED_FUNCTION_53();
  v121 = v38;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v39);
  v40 = OUTLINED_FUNCTION_293();
  v41 = (int *)type metadata accessor for BookmarkCache(v40);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v42);
  OUTLINED_FUNCTION_256();
  MEMORY[0x1E0C80A78](v43);
  v45 = (char *)&v113 - v44;
  v46 = *(void (**)(void))(Description + 16);
  v125 = (uint64_t)v21 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_materializedView;
  v126 = v21;
  v46();
  v127 = v29;
  v128 = v20;
  v132 = v34;
  ((void (*)(uint64_t, uint64_t, ValueMetadata *))v46)(v20, v29, v34);
  v130 = v41[5];
  *(_QWORD *)(v23 + v130) = 0;
  type metadata accessor for SQLExpressionEvaluator();
  OUTLINED_FUNCTION_150();
  v47 = v129;
  v48 = SQLExpressionEvaluator.init(db:)(v131);
  if (v47)
  {
    (*(void (**)(uint64_t, ValueMetadata *))(Description + 8))(v128, v132);
LABEL_8:
    swift_unknownObjectRelease();
    OUTLINED_FUNCTION_149_1(v127);
    OUTLINED_FUNCTION_149_1(v125);
    swift_deallocPartialClassInstance();
LABEL_9:
    OUTLINED_FUNCTION_9();
    return;
  }
  v49 = (void *)v48;
  v116 = v45;
  v117 = v46;
  v129 = v23;
  v118 = Description;
  v50 = v128;
  v51 = MaterializedView.name.getter();
  static BookmarkCache.tableName(materializedViewName:)();
  v52 = v51;
  v54 = v53;
  OUTLINED_FUNCTION_24();
  v55 = MaterializedView.name.getter();
  v56 = v49;
  v57 = static BookmarkCache.createBookmarkTableSQL(materializedViewName:)(v55);
  v59 = v58;
  OUTLINED_FUNCTION_24();
  v60._countAndFlagsBits = v57;
  v61 = v56;
  v60._object = v59;
  SQLExpressionEvaluator.execute(sql:bindingValues:)(v60, MEMORY[0x1E0DEE9D8]);
  if (v62)
  {
    OUTLINED_FUNCTION_56_4();
    OUTLINED_FUNCTION_157_1();
    OUTLINED_FUNCTION_106();
LABEL_7:
    OUTLINED_FUNCTION_54();
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_54();
  OUTLINED_FUNCTION_24();
  v134._countAndFlagsBits = 0;
  v134._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v134._countAndFlagsBits = 0xD00000000000001FLL;
  v134._object = (void *)0x800000018DCC3FE0;
  v63._countAndFlagsBits = v52;
  v63._object = v54;
  String.append(_:)(v63);
  OUTLINED_FUNCTION_106();
  v64 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v134, MEMORY[0x1E0DEE9D8]);
  if (v65)
  {
    OUTLINED_FUNCTION_56_4();
    OUTLINED_FUNCTION_157_1();
    goto LABEL_7;
  }
  v66 = v64;
  OUTLINED_FUNCTION_54();
  if (!v66)
  {
    v85 = v129;
    goto LABEL_20;
  }
  if (*(_QWORD *)(v66 + 16) != 1)
  {
    OUTLINED_FUNCTION_24();
    OUTLINED_FUNCTION_167_1();
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_102_2();
    OUTLINED_FUNCTION_216_0();
    OUTLINED_FUNCTION_157_1();
    goto LABEL_22;
  }
  v67 = specialized Dictionary.startIndex.getter(v66);
  v69 = v68;
  v71 = v70;
  v72 = specialized Dictionary.endIndex.getter(v66);
  if (((v71 | v74) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((_DWORD)v69 != v73)
      __break(1u);
    v114 = v56;
    if (v67 != v72)
    {
      specialized Dictionary.subscript.getter((uint64_t)v135, v67, v69, 0);
      v76 = v135[0];
      v75 = (void *)v135[1];
      v77 = v136;
      OUTLINED_FUNCTION_291();
      outlined copy of DatabaseValue(v76, (unint64_t)v75, v77);
      OUTLINED_FUNCTION_106();
      v115 = v76;
      outlined consume of DatabaseValue(v76, (unint64_t)v75, v77);
      OUTLINED_FUNCTION_106();
      OUTLINED_FUNCTION_24();
      if (v77 == 3)
      {
        v114 = (id)objc_opt_self();
        v78 = objc_msgSend((id)objc_opt_self(), sel_bm_allowedClassesForSecureCodingBMBookmark);
        OUTLINED_FUNCTION_294();
        static Set._unconditionallyBridgeFromObjectiveC(_:)();

        OUTLINED_FUNCTION_294();
        isa = Set._bridgeToObjectiveC()().super.isa;
        OUTLINED_FUNCTION_24();
        OUTLINED_FUNCTION_229_0((uint64_t)&a15);
        v80 = Data._bridgeToObjectiveC()().super.isa;
        v134._countAndFlagsBits = 0;
        v81 = objc_msgSend(v114, sel_unarchivedObjectOfClasses_fromData_error_, isa, v80, &v134);

        if (v81)
        {
          v114 = v75;
          v82 = (id)v134._countAndFlagsBits;
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BMBookmark);
          v83 = swift_dynamicCast();
          v84 = v129;
          v61 = v56;
          if ((v83 & 1) != 0)
          {
            OUTLINED_FUNCTION_187_0();
            v66 = v133;
            v85 = v84;
            swift_unknownObjectRelease();
LABEL_20:
            v86 = v118;
            v87 = (uint64_t)v116;
            v88 = v85;
            *(_QWORD *)(v85 + v130) = v66;
            v89 = v85;
            v90 = v132;
            (*(void (**)(uint64_t, uint64_t, ValueMetadata *))(v86 + 32))(v89, v50, v132);
            *(_BYTE *)(v88 + v41[6]) = 0;
            v91 = v131;
            *(_QWORD *)(v88 + v41[7]) = v131;
            *(_QWORD *)(v88 + v41[8]) = v61;
            v92 = OUTLINED_FUNCTION_299();
            outlined init with take of StorableValue(v92, v93, type metadata accessor for BookmarkCache);
            v94 = v126;
            outlined init with take of StorableValue(v87, (uint64_t)v126 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_bookmark, type metadata accessor for BookmarkCache);
            v95 = v127;
            v96 = v90;
            v97 = v117;
            ((void (*)(uint64_t, uint64_t, ValueMetadata *))v117)(v121, v127, v96);
            v98 = v122;
            v99 = v123;
            KeyedAggregationMetadataCache.init(materializedView:database:cacheSize:)();
            v100 = v118;
            outlined init with take of StorableValue(v98, (uint64_t)v94 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_keyedAggregationMetadata, type metadata accessor for KeyedAggregationMetadataCache);
            v101 = v119;
            ((void (*)(uint64_t, uint64_t, ValueMetadata *))v97)(v119, v95, v132);
            v102 = v120;
            KeyedFirstMatchingRecordCache.init(materializedView:database:cacheSize:)(v101, (uint64_t)v91, v99, v103, v104, v105, v106, v107, v113, (uint64_t)v114, v115, (uint64_t)v116, (uint64_t)v117, v118, v119, v120, v121, v122, v123,
              v124);
            (*(void (**)(uint64_t, ValueMetadata *))(v100 + 8))(v95, v132);
            outlined init with take of StorableValue(v102, (uint64_t)v94 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_keyedFirstMatchingRecord, type metadata accessor for KeyedFirstMatchingRecordCache);
            goto LABEL_9;
          }
          OUTLINED_FUNCTION_167_1();
          lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
          OUTLINED_FUNCTION_13_0();
          OUTLINED_FUNCTION_102_2();
          OUTLINED_FUNCTION_216_0();
          OUTLINED_FUNCTION_157_1();
          OUTLINED_FUNCTION_187_0();
LABEL_22:
          (*(void (**)(uint64_t, ValueMetadata *))(v118 + 8))(v50, v132);
          goto LABEL_8;
        }
        v110 = (id)v134._countAndFlagsBits;
        _convertNSErrorToError(_:)();

        OUTLINED_FUNCTION_216_0();
        swift_release();
        v111 = OUTLINED_FUNCTION_229_0((uint64_t)&a15);
        outlined consume of DatabaseValue(v111, v112, 3);
      }
      else
      {
        v108 = OUTLINED_FUNCTION_229_0((uint64_t)&a15);
        outlined consume of DatabaseValue(v108, v109, v77);
        OUTLINED_FUNCTION_167_1();
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
        OUTLINED_FUNCTION_13_0();
        OUTLINED_FUNCTION_102_2();
        OUTLINED_FUNCTION_216_0();
        OUTLINED_FUNCTION_20_1();
      }
      OUTLINED_FUNCTION_56_4();
      goto LABEL_8;
    }
  }
  OUTLINED_FUNCTION_24();
  __break(1u);
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t type metadata accessor for SQLExpressionEvaluator()
{
  return objc_opt_self();
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;

  if ((a4 & 1) != 0)
    goto LABEL_10;
  if (a2 < 0 || (OUTLINED_FUNCTION_22_0(), v9 ^ v10 | v8))
  {
    __break(1u);
  }
  else if (((*(_QWORD *)(v7 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> v5) & 1) != 0)
  {
    if (*(_DWORD *)(v7 + 36) == v6)
    {
      v11 = *(_QWORD *)(v7 + 56) + 24 * v5;
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v4 = *(_QWORD *)v11;
      *(_QWORD *)(v4 + 8) = v13;
      v14 = *(_BYTE *)(v11 + 16);
      *(_BYTE *)(v4 + 16) = v14;
      swift_bridgeObjectRetain();
      outlined copy of DatabaseValue(v12, v13, v14);
      OUTLINED_FUNCTION_1_8();
      return;
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> static BookmarkCache.tableName(materializedViewName:)()
{
  Swift::String v0;

  OUTLINED_FUNCTION_291();
  v0._countAndFlagsBits = 0x72616D6B6F6F625FLL;
  v0._object = (void *)0xE90000000000006BLL;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_118_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 256));
}

void OUTLINED_FUNCTION_118_1()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 264) = v0;
}

void KeyedAggregationMetadataCache.init(materializedView:database:cacheSize:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  sqlite3 *v5;
  sqlite3 *v6;
  uint64_t v7;
  uint64_t v8;
  ValueMetadata *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  ValueMetadata *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, ValueMetadata *);
  ValueMetadata *v37;
  uint64_t v38;
  uint64_t countAndFlagsBits;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  _QWORD *v57;
  ValueMetadata *v58;
  uint64_t (**v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  Swift::String v82;
  uint64_t v83;
  uint64_t PlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm;
  ValueMetadata *v85;
  ValueMetadata *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, char *, ValueMetadata *);
  uint64_t v106;
  _QWORD *v107;
  void (*v108)(void);
  uint64_t v109;
  ValueMetadata *v110;
  _QWORD *v111;
  char *v112;
  uint64_t v113;
  char v114;
  unint64_t v115;
  char v116;
  uint64_t v117;
  _BOOL8 v118;
  Swift::Int v119;
  unint64_t v120;
  char v121;
  Swift::Bool v122;
  unint64_t v123;
  char v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  Swift::String v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t, ValueMetadata *);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v143;
  char v144;
  uint64_t v145;
  _BOOL8 v146;
  Swift::Int v147;
  unint64_t v148;
  char v149;
  Swift::Bool v150;
  unint64_t v151;
  char v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  Swift::String v161;
  uint64_t v162;
  ValueMetadata *v163;
  uint64_t v164;
  ValueMetadata *v165;
  uint64_t v166;
  Swift::String v167;
  uint64_t v168;
  Swift::String *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  sqlite3 *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t *v195;
  uint64_t v196;
  void *Description;
  ValueMetadata *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  Swift::String v203;
  Swift::String v204;
  char *v205;
  uint64_t v206;

  OUTLINED_FUNCTION_42();
  v202 = (char *)v0;
  v185 = v4;
  v6 = v5;
  v189 = v7;
  v186 = v8;
  v9 = OUTLINED_FUNCTION_33();
  Description = v9[-1].Description;
  v198 = v9;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_6_1();
  v188 = v11;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_61();
  v205 = v13;
  v196 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
  v184 = *(_QWORD *)(v196 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_6_1();
  v193 = v15;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_53();
  v192 = v17;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v18);
  v194 = (uint64_t *)((char *)&v170 - v19);
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v20);
  OUTLINED_FUNCTION_61();
  v195 = v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SQLDataType));
  OUTLINED_FUNCTION_274();
  MEMORY[0x1E0C80A78](v23);
  OUTLINED_FUNCTION_118();
  v24 = type metadata accessor for SelectCore();
  OUTLINED_FUNCTION_253();
  v26 = MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v170 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v170 - v29;
  type metadata accessor for SQLExpressionEvaluator();
  OUTLINED_FUNCTION_150();
  v31 = (uint64_t)v202;
  v32 = SQLExpressionEvaluator.init(db:)(v6);
  if (v31)
  {
    OUTLINED_FUNCTION_35();
    OUTLINED_FUNCTION_250();
    v33(v189);
LABEL_9:
    OUTLINED_FUNCTION_9();
    return;
  }
  v202 = v28;
  v179 = v22;
  v180 = v2;
  v182 = v3;
  v187 = 0;
  v183 = v32;
  v181 = v6;
  v34 = v189;
  MaterializedView.select.getter((uint64_t)v30);
  v35 = SelectCore.groupBy.getter();
  v36 = *(void (**)(char *, ValueMetadata *))(v1 + 8);
  v36(v30, v24);
  if (!v35)
  {
    v50 = MEMORY[0x1E0DEE9D8];
    v51 = (int *)type metadata accessor for KeyedAggregationMetadataCache(0);
    v52 = v186;
    *(_QWORD *)(v186 + v51[12]) = 0;
    *(_QWORD *)(v52 + v51[13]) = v50;
    OUTLINED_FUNCTION_150_1((uint64_t)v51);
    goto LABEL_8;
  }
  v37 = v24;
  v204._countAndFlagsBits = v35;
  OUTLINED_FUNCTION_141();
  v38 = v187;
  specialized MutableCollection<>.sort(by:)(&v204._countAndFlagsBits);
  if (v38)
    goto LABEL_58;
  OUTLINED_FUNCTION_24();
  countAndFlagsBits = v204._countAndFlagsBits;
  v40 = (uint64_t)v202;
  MaterializedView.select.getter((uint64_t)v202);
  selectAndHavingAggregateFunctions(selectCore:)(v40);
  v42 = v41;
  v36((char *)v40, v37);
  static KeyedAggregationMetadataCache.payloadSchema(aggregationFunctions:)(v42, v43, v44, v45, v46, v47, v48, v49, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180,
    (uint64_t)v181);
  v173 = v61;
  OUTLINED_FUNCTION_64();
  specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)();
  v63 = v62;
  v64 = OUTLINED_FUNCTION_297();
  v68 = OUTLINED_FUNCTION_79_2(v64, v65, v66, v67, (void *)0x800000018DCC3EB0);
  v70 = v69;
  OUTLINED_FUNCTION_24();
  v71 = tableExists(sqlExpressionEvaluator:tableName:)(v183, v68, v70);
  v187 = 0;
  v72 = v71;
  v172 = v63;
  v171 = countAndFlagsBits;
  OUTLINED_FUNCTION_64();
  v174 = (uint64_t)"_keyedFirstMatchingRecord";
  if ((v72 & 1) != 0)
  {
    v73 = v171;
LABEL_12:
    OUTLINED_FUNCTION_16_0();
    v51 = (int *)type metadata accessor for KeyedAggregationMetadataCache(0);
    v74 = v186;
    *(_QWORD *)(v186 + v51[12]) = v73;
    *(_QWORD *)(v74 + v51[13]) = v173;
    *(_BYTE *)(v74 + v51[14]) = (v72 & 1) == 0;
    swift_retain();
    v75 = OUTLINED_FUNCTION_297();
    v77 = v76;
    specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)();
    v79 = v78;
    swift_release();
    if (*(_QWORD *)(v79 + 16))
    {
      v203._countAndFlagsBits = 0;
      v203._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(28);
      v204 = v203;
      OUTLINED_FUNCTION_84_2();
      v82._countAndFlagsBits = OUTLINED_FUNCTION_79_2(v75, v77, v80, v81, (void *)(v174 | 0x8000000000000000));
      String.append(_:)(v82);
      OUTLINED_FUNCTION_8_1();
      OUTLINED_FUNCTION_125_2();
      v83 = v187;
      PlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_14BiomeSQLParser11SQLDataTypeOtG_SSsAE_pTg506_sSS14d11SQLParser11fg5OSSs5c186_pIggnozo_SS_ACtSSsAD_pIegnrzr_TR04_s12a146Streams30KeyedQueryPlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm(v79, &demangling cache variable for type metadata for (String, SQLDataType));
      if (v83)
      {
        OUTLINED_FUNCTION_106_2();
        v85 = OUTLINED_FUNCTION_35();
        OUTLINED_FUNCTION_19_5((uint64_t)v85);
        OUTLINED_FUNCTION_20_1();
        OUTLINED_FUNCTION_54();
        OUTLINED_FUNCTION_106();
        swift_bridgeObjectRelease();
LABEL_6:
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
      v187 = 0;
      v203._countAndFlagsBits = PlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v166 = OUTLINED_FUNCTION_156_1();
      OUTLINED_FUNCTION_8_1();
      OUTLINED_FUNCTION_227_0(v166);
      OUTLINED_FUNCTION_127();
      OUTLINED_FUNCTION_4_7(41);
    }
    else
    {
      OUTLINED_FUNCTION_203_0();
      OUTLINED_FUNCTION_106_2();
      strcpy((char *)&v204, "SELECT * FROM ");
      HIBYTE(v204._object) = -18;
      v131._countAndFlagsBits = OUTLINED_FUNCTION_79_2(v75, v77, v129, v130, (void *)(v174 | 0x8000000000000000));
      String.append(_:)(v131);
      OUTLINED_FUNCTION_8_1();
    }
    v167 = v204;
    v168 = OUTLINED_FUNCTION_150();
    *(_QWORD *)(v168 + 16) = v79;
    OUTLINED_FUNCTION_54();
    v52 = v186;
    v169 = (Swift::String *)(v186 + v51[15]);
    *v169 = v167;
    v169[1]._countAndFlagsBits = (uint64_t)closure #2 in static KeyedQueryPlannerMetadataCache.readMetadataSQL(materializedViewName:groupBySchema:)partial apply;
    v169[1]._object = (void *)v168;
LABEL_8:
    v53 = v185;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (value: [[String : StorableValue]], event: CacheEvent));
    lazy protocol witness table accessor for type [StorableValue] and conformance <A> [A]();
    v54 = Dictionary.init(dictionaryLiteral:)();
    type metadata accessor for KeyedAggregationMetadataCache(0);
    *(_QWORD *)(v52 + v51[7]) = v54;
    v55 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DE8]), sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : StorableValue]]?);
    v56 = Dictionary.init(dictionaryLiteral:)();
    v57 = (_QWORD *)(v52 + v51[8]);
    *v57 = v55;
    v57[1] = v56;
    *(_QWORD *)(v52 + v51[9]) = v53;
    v58 = OUTLINED_FUNCTION_35();
    v59 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v58[-1].Description;
    OUTLINED_FUNCTION_224_0(v52, v34, v59[2]);
    v60 = MEMORY[0x1E0DEE9E8];
    *(_QWORD *)(v52 + v51[6]) = MEMORY[0x1E0DEE9E8];
    ((void (*)(uint64_t, ValueMetadata *))v59[1])(v34, v58);
    *(_QWORD *)(v52 + v51[5]) = v60;
    OUTLINED_FUNCTION_279(v51[10]);
    OUTLINED_FUNCTION_279(v51[11]);
    goto LABEL_9;
  }
  HIDWORD(v170) = v72;
  v86 = v198;
  v87 = Dictionary.init(dictionaryLiteral:)();
  v88 = v187;
  v176 = *(_QWORD *)(v173 + 16);
  if (!v176)
  {
    v92 = Description;
    v93 = v188;
LABEL_33:
    if (*(_QWORD *)(v172 + 16))
    {
      v132 = v182;
      v201 = (uint64_t)v182 + *(int *)(v179 + 48);
      OUTLINED_FUNCTION_20_3();
      v136 = v134 + v135;
      v200 = *(_QWORD *)(v137 + 72);
      v138 = v93;
      while (1)
      {
        v206 = v133;
        v202 = (char *)v136;
        outlined init with copy of Date?(v136, (uint64_t)v132, &demangling cache variable for type metadata for (String, SQLDataType));
        v139 = *v132;
        v140 = v132[1];
        v141 = (void (*)(uint64_t, uint64_t, ValueMetadata *))*((_QWORD *)v92 + 4);
        v141(v138, v201, v198);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v204._countAndFlagsBits = v87;
        v143 = specialized __RawDictionaryStorage.find<A>(_:)();
        v145 = *(_QWORD *)(v87 + 16);
        v146 = (v144 & 1) == 0;
        v147 = v145 + v146;
        if (__OFADD__(v145, v146))
          goto LABEL_55;
        v148 = v143;
        v149 = v144;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, SQLDataType>);
        OUTLINED_FUNCTION_249();
        v150 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v147);
        v138 = v188;
        if (v150)
        {
          v151 = specialized __RawDictionaryStorage.find<A>(_:)();
          if ((v149 & 1) != (v152 & 1))
            goto LABEL_57;
          v148 = v151;
        }
        v153 = v204._countAndFlagsBits;
        if ((v149 & 1) != 0)
        {
          v92 = Description;
          (*((void (**)(unint64_t, uint64_t, ValueMetadata *))Description + 5))(*(_QWORD *)(v204._countAndFlagsBits + 56) + *((_QWORD *)Description + 9) * v148, v138, v198);
          v34 = v189;
          v88 = v187;
        }
        else
        {
          OUTLINED_FUNCTION_29_2();
          *v154 = v139;
          v154[1] = v140;
          v141(*(_QWORD *)(v153 + 56) + *((_QWORD *)Description + 9) * v148, v138, v198);
          OUTLINED_FUNCTION_265();
          if (v128)
            goto LABEL_56;
          *(_QWORD *)(v153 + 16) = v155;
          OUTLINED_FUNCTION_100();
          v34 = v189;
          v88 = v187;
          v92 = Description;
        }
        v87 = v204._countAndFlagsBits;
        OUTLINED_FUNCTION_45();
        OUTLINED_FUNCTION_152();
        v136 = (uint64_t)&v202[v200];
        v133 = v206 - 1;
        v132 = v182;
        if (v206 == 1)
        {
          OUTLINED_FUNCTION_16_0();
          goto LABEL_46;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_46:
    OUTLINED_FUNCTION_297();
    v203._countAndFlagsBits = 0;
    v203._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(33);
    v204 = v203;
    OUTLINED_FUNCTION_83_2();
    v156 = OUTLINED_FUNCTION_13_3();
    v161._countAndFlagsBits = OUTLINED_FUNCTION_79_2(v156, v157, v158, v159, v160);
    String.append(_:)(v161);
    OUTLINED_FUNCTION_54();
    OUTLINED_FUNCTION_164_0();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS14BiomeSQLParser11SQLDataTypeOG_SSsAE_pTg506_sSS14d11SQLParser11fg5OSSs5C197_pIggnozo_SS3key_AC5valuetSSsAD_pIegnrzr_TR04_s12a111Streams30KeyedQueryPlannerMetadataCachePAAE14createTableSQL20materializedViewName6schemaS2S_SDySS0A9SQLParser11cD19OGtKFZS2S_AItKXEfU_Tf3nnnpf_nTf1cn_n(v87);
    if (v88)
    {
      OUTLINED_FUNCTION_106_2();
      v163 = OUTLINED_FUNCTION_35();
      OUTLINED_FUNCTION_19_5((uint64_t)v163);
      OUTLINED_FUNCTION_16_0();
      OUTLINED_FUNCTION_20_1();
      OUTLINED_FUNCTION_20_1();
      OUTLINED_FUNCTION_64();
      goto LABEL_6;
    }
    v203._countAndFlagsBits = v162;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    OUTLINED_FUNCTION_252();
    OUTLINED_FUNCTION_54();
    OUTLINED_FUNCTION_273();
    OUTLINED_FUNCTION_8_1();
    OUTLINED_FUNCTION_121_2();
    OUTLINED_FUNCTION_64();
    OUTLINED_FUNCTION_127();
    v115 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v204, MEMORY[0x1E0DEE9D8]);
    v187 = v164;
    if (v164)
    {
      v165 = OUTLINED_FUNCTION_35();
      OUTLINED_FUNCTION_19_5((uint64_t)v165);
      OUTLINED_FUNCTION_16_0();
      OUTLINED_FUNCTION_20_1();
      OUTLINED_FUNCTION_96();
      OUTLINED_FUNCTION_64();
      goto LABEL_9;
    }
LABEL_53:
    v172 = v115;
    OUTLINED_FUNCTION_64();
    v73 = v171;
    LOBYTE(v72) = BYTE4(v170);
    goto LABEL_12;
  }
  v89 = v87;
  v175 = v173 + 32;
  swift_bridgeObjectRetain();
  v90 = 0;
  v91 = v196;
  v92 = Description;
  v93 = v188;
  v94 = v184;
  v95 = v194;
  while (!*(_QWORD *)(*(_QWORD *)(v175 + 8 * v90) + 16))
  {
LABEL_29:
    if (++v90 == v176)
    {
      OUTLINED_FUNCTION_16_0();
      v87 = v89;
      v34 = v189;
      goto LABEL_33;
    }
  }
  v202 = *(char **)(*(_QWORD *)(v175 + 8 * v90) + 16);
  v178 = v90;
  v96 = v195;
  v191 = (char *)v195 + *(int *)(v91 + 64);
  OUTLINED_FUNCTION_20_3();
  v99 = v97 + v98;
  v177 = v97;
  swift_bridgeObjectRetain_n();
  v190 = *(_QWORD *)(v94 + 72);
  while (1)
  {
    v200 = v99;
    v201 = v89;
    outlined init with copy of Date?(v99, (uint64_t)v96, &demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
    v100 = v196;
    v101 = (char *)v95 + *(int *)(v196 + 64);
    v102 = *v96;
    v34 = v96[1];
    v103 = v96[2];
    v104 = v96[3];
    *v95 = v102;
    v95[1] = v34;
    v95[2] = v103;
    v95[3] = v104;
    v105 = (void (*)(char *, char *, ValueMetadata *))*((_QWORD *)v92 + 4);
    v105(v101, v191, v86);
    v106 = *(int *)(v100 + 64);
    v107 = v192;
    *v192 = v102;
    v107[1] = v34;
    v107[2] = v103;
    v107[3] = v104;
    v108 = (void (*)(void))*((_QWORD *)v92 + 2);
    v199 = (char *)v107 + v106;
    v108();
    v109 = *(int *)(v100 + 64);
    v110 = v86;
    v111 = v193;
    v112 = (char *)v193 + v109;
    *v193 = v102;
    v111[1] = v34;
    v111[2] = v103;
    v111[3] = v104;
    ((void (*)(char *, char *, ValueMetadata *))v108)((char *)v111 + v109, v101, v110);
    v105((char *)v205, v112, v110);
    OUTLINED_FUNCTION_100();
    v113 = v201;
    v114 = OUTLINED_FUNCTION_301();
    v204._countAndFlagsBits = v113;
    v115 = specialized __RawDictionaryStorage.find<A>(_:)();
    v117 = *(_QWORD *)(v113 + 16);
    v118 = (v116 & 1) == 0;
    v119 = v117 + v118;
    if (__OFADD__(v117, v118))
    {
      __break(1u);
      goto LABEL_53;
    }
    v120 = v115;
    v121 = v116;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, SQLDataType>);
    OUTLINED_FUNCTION_249();
    v122 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v114, v119);
    v92 = Description;
    v86 = v198;
    if (v122)
    {
      v123 = OUTLINED_FUNCTION_186_0();
      if ((v121 & 1) != (v124 & 1))
        goto LABEL_57;
      v120 = v123;
    }
    v125 = v204._countAndFlagsBits;
    if ((v121 & 1) == 0)
      break;
    (*((void (**)(unint64_t, uint64_t, ValueMetadata *))v92 + 5))(*(_QWORD *)(v204._countAndFlagsBits + 56) + *((_QWORD *)v92 + 9) * v120, (char *)v205, v86);
LABEL_27:
    v89 = v204._countAndFlagsBits;
    OUTLINED_FUNCTION_45();
    OUTLINED_FUNCTION_152();
    v95 = v194;
    outlined destroy of UUID?((uint64_t)v194, &demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
    (*((void (**)(char *, ValueMetadata *))v92 + 1))(v199, v86);
    v99 = v200 + v190;
    --v202;
    v96 = v195;
    if (!v202)
    {
      OUTLINED_FUNCTION_99();
      v88 = v187;
      v93 = v188;
      v91 = v196;
      v94 = v184;
      v90 = v178;
      goto LABEL_29;
    }
  }
  OUTLINED_FUNCTION_29_2();
  *v126 = v103;
  v126[1] = v104;
  v105((char *)(*(_QWORD *)(v125 + 56) + *((_QWORD *)v92 + 9) * v120), (char *)v205, v86);
  OUTLINED_FUNCTION_265();
  if (!v128)
  {
    *(_QWORD *)(v125 + 16) = v127;
    OUTLINED_FUNCTION_100();
    goto LABEL_27;
  }
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_58:
  swift_release();
  __break(1u);
}

uint64_t specialized Dictionary.endIndex.getter(uint64_t a1)
{
  return 1 << *(_BYTE *)(a1 + 32);
}

uint64_t static BookmarkCache.createBookmarkTableSQL(materializedViewName:)(uint64_t a1)
{
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(97);
  OUTLINED_FUNCTION_71_1();
  OUTLINED_FUNCTION_222_0(27, v2);
  v3._countAndFlagsBits = a1;
  static BookmarkCache.tableName(materializedViewName:)();
  String.append(_:)(v3);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_71_1();
  String.append(_:)(v4);
  return 0;
}

void *__swift_memcpy328_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x148uLL);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BookmarkCache.flush()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  id v23;
  unint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = type metadata accessor for BookmarkCache(0);
  v2 = *(_QWORD *)(v0 + *(int *)(v1 + 20));
  if (v2 && *(_BYTE *)(v0 + *(int *)(v1 + 24)) == 1)
  {
    v3 = (void *)objc_opt_self();
    v23 = 0;
    swift_unknownObjectRetain();
    v4 = objc_msgSend(v3, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v2, 1, &v23);
    v5 = v23;
    if (v4)
    {
      v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v22 = v7;

      MaterializedView.name.getter();
      static BookmarkCache.tableName(materializedViewName:)();
      OUTLINED_FUNCTION_127();
      v23 = 0;
      v24 = 0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v8._countAndFlagsBits = 0x204543414C504552;
      v8._object = (void *)0xED0000204F544E49;
      String.append(_:)(v8);
      v9._countAndFlagsBits = OUTLINED_FUNCTION_312();
      String.append(_:)(v9);
      OUTLINED_FUNCTION_41_0();
      OUTLINED_FUNCTION_71_1();
      v10._countAndFlagsBits = 0xD000000000000029;
      String.append(_:)(v10);
      v11 = (uint64_t)v23;
      v12 = (void *)v24;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<StorableValue>);
      v13 = *(_QWORD *)(type metadata accessor for StorableValue(0) - 8);
      v14 = *(_QWORD *)(v13 + 72);
      v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_18DC0CE10;
      v17 = v16 + v15;
      *(_QWORD *)v17 = 1;
      *(_BYTE *)(v17 + 8) = 0;
      swift_storeEnumTagMultiPayload();
      v18 = (uint64_t *)(v17 + v14);
      *v18 = v6;
      v18[1] = v22;
      OUTLINED_FUNCTION_283();
      outlined copy of Data._Representation(v6, v22);
      v19._countAndFlagsBits = v11;
      v19._object = v12;
      SQLExpressionEvaluator.execute(sql:bindingValues:)(v19, (Swift::OpaquePointer)v16);
      if (!v20)
        swift_bridgeObjectRelease();
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      OUTLINED_FUNCTION_127();
      outlined consume of Data._Representation(v6, v22);
    }
    else
    {
      v21 = v5;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    swift_unknownObjectRelease();
  }
}

void OUTLINED_FUNCTION_51(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of UUID?(a1, v1);
}

void OUTLINED_FUNCTION_51_0(void *a1, NSObject *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6, uint8_t *a7)
{
  _os_signpost_emit_with_name_impl(a1, a2, a3, a4, a5, a6, a7, 2u);
}

uint64_t OUTLINED_FUNCTION_51_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in static KeyedQueryPlannerMetadataCache.readMetadataSQL(materializedViewName:groupBySchema:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t result;
  _QWORD v27[3];
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v32 = type metadata accessor for StorableValue(0);
  MEMORY[0x1E0C80A78](v32);
  v33 = (uint64_t)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  if (v7 == v8)
  {
    if (v7)
    {
      v27[1] = a1;
      v27[2] = v2;
      v9 = *(unsigned __int8 *)(v5 + 80);
      v10 = (v9 + 32) & ~v9;
      v11 = a1 + v10;
      v12 = *(_QWORD *)(v5 + 72);
      v28 = 2 * v12;
      v30 = v9 | 7;
      v31 = v10 + 2 * v12;
      swift_bridgeObjectRetain();
      a1 = MEMORY[0x1E0DEE9D8];
      v29 = xmmword_18DC0CE10;
      do
      {
        v34 = v7;
        v13 = v33;
        outlined init with copy of StorableValue(v11, v33, type metadata accessor for StorableValue);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<StorableValue>);
        v14 = swift_allocObject();
        *(_OWORD *)(v14 + 16) = v29;
        v15 = v14 + v10;
        outlined init with copy of StorableValue(v13, v14 + v10, type metadata accessor for StorableValue);
        outlined init with take of StorableValue(v13, v15 + v12, type metadata accessor for StorableValue);
        v16 = *(_QWORD *)(a1 + 16);
        if (__OFADD__(v16, 2))
        {
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
        }
        if (!swift_isUniquelyReferenced_nonNull_native()
          || (v17 = *(_QWORD *)(a1 + 24) >> 1, v17 < v16 + 2))
        {
          a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v17 = *(_QWORD *)(a1 + 24) >> 1;
        }
        v18 = v34;
        v19 = *(_QWORD *)(a1 + 16);
        if (v17 - v19 < 2)
          goto LABEL_21;
        v20 = a1 + v10 + v19 * v12;
        if (v15 < v20 + v28 && v20 < v15 + v28)
        {
          result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        swift_arrayInitWithCopy();
        v22 = *(_QWORD *)(a1 + 16);
        v23 = __OFADD__(v22, 2);
        v24 = v22 + 2;
        if (v23)
          goto LABEL_22;
        *(_QWORD *)(a1 + 16) = v24;
        swift_bridgeObjectRelease();
        v11 += v12;
        v7 = v18 - 1;
      }
      while (v7);
      swift_bridgeObjectRelease();
    }
    else
    {
      return MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    type metadata accessor for MetadataSQLError(0);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
    swift_allocError();
    *v25 = v7;
    v25[1] = v8;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  return a1;
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_17_3();
  OUTLINED_FUNCTION_52_3();
  return swift_deallocClassInstance();
}

{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
  OUTLINED_FUNCTION_17_3();
  OUTLINED_FUNCTION_52_3();
  return swift_deallocClassInstance();
}

{
  swift_arrayDestroy();
  OUTLINED_FUNCTION_52_3();
  return swift_deallocClassInstance();
}

uint64_t OUTLINED_FUNCTION_60()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *(_QWORD *)(v5 - 72);
  *v0 = v3;
  v0[1] = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v4, v2);
}

uint64_t OUTLINED_FUNCTION_60_0()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_60_1@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_60_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_60_3()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_41_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_41_1()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_41_2()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t OUTLINED_FUNCTION_41_4@<X0>(uint64_t (*a1)(_QWORD, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(*(_QWORD *)(v1 - 256), v2, v3);
}

uint64_t OUTLINED_FUNCTION_81()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t OUTLINED_FUNCTION_81_0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void OUTLINED_FUNCTION_144_0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  SQLExpressionEvaluator.execute(expression:payload:)(a1, *(_QWORD *)(v2 - 128), a2);
}

uint64_t OUTLINED_FUNCTION_144_1()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void OUTLINED_FUNCTION_120(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<String>, (void (*)(_QWORD, uint64_t, char *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ChangeRecord>, (void (*)(_QWORD, uint64_t, char *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

uint64_t OUTLINED_FUNCTION_58_0()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1Tm(v0 - 120);
}

uint64_t OUTLINED_FUNCTION_58_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return __swift_instantiateConcreteTypeFromMangledName(a5);
}

void OUTLINED_FUNCTION_58_2(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of StorableValue(*(_QWORD *)(v2 - 136), a2);
}

uint64_t OUTLINED_FUNCTION_58_3@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v1 + v2);
  v4 = a1[1];
  *v3 = *a1;
  v3[1] = v4;
  return 0;
}

uint64_t OUTLINED_FUNCTION_57()
{
  uint64_t v0;

  return v0;
}

uint64_t *OUTLINED_FUNCTION_57_1(uint64_t a1, uint64_t *a2)
{
  return __swift_allocate_boxed_opaque_existential_0(a2);
}

uint64_t OUTLINED_FUNCTION_57_2()
{
  return _swift_stdlib_strtod_clocale();
}

void OUTLINED_FUNCTION_57_3(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_213(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v1, v3);
}

void specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t isUniquelyReferenced_nonNull_native;

  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native)
    *v1 = a1(isUniquelyReferenced_nonNull_native, *(_QWORD *)(v3 + 16) + 1, 1, v3);
  OUTLINED_FUNCTION_1_6();
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD, uint64_t, char *, uint64_t), void (*a7)(uint64_t, uint64_t, char *))
{
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  char *v18;

  v10 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_11_1();
    if (v12 != v13)
    {
      OUTLINED_FUNCTION_46_0();
      if (v12)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_10_3();
    }
  }
  else
  {
    v11 = a2;
  }
  v14 = *(_QWORD *)(a4 + 16);
  if (v11 <= v14)
    v15 = *(_QWORD *)(a4 + 16);
  else
    v15 = v11;
  if (v15)
  {
    OUTLINED_FUNCTION_58_1(a1, a2, a3, a4, a5);
    v16 = (char *)OUTLINED_FUNCTION_40_0();
    v17 = _swift_stdlib_malloc_size(v16);
    OUTLINED_FUNCTION_83_0(v17);
  }
  else
  {
    v16 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v18 = v16 + 32;
  if ((v10 & 1) != 0)
  {
    a7(a4 + 32, v14, v18);
    *(_QWORD *)(a4 + 16) = 0;
    OUTLINED_FUNCTION_64();
  }
  else
  {
    a6(0, v14, v18, a4);
  }
  OUTLINED_FUNCTION_1_8();
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

{
  if (__dst != __src || &__src[16 * a2] <= __dst)
    return (char *)memmove(__dst, __src, 16 * a2);
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_19();
    __src = (char *)OUTLINED_FUNCTION_9_3();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

void thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion, @guaranteed BMBookmark) -> ()(uint64_t a1, void *a2, uint64_t a3)
{
  void (*v5)(id, uint64_t);
  id v6;

  v5 = *(void (**)(id, uint64_t))(a1 + 32);
  swift_retain();
  v6 = a2;
  swift_unknownObjectRetain();
  v5(v6, a3);
  swift_release();
  swift_unknownObjectRelease();

}

void partial apply for closure #1 in scan(stream:metadata:maxBatchSize:selectCore:expressionEvaluator:)(void *a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in scan(stream:metadata:maxBatchSize:selectCore:expressionEvaluator:)(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

void closure #1 in scan(stream:metadata:maxBatchSize:selectCore:expressionEvaluator:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = objc_msgSend(a1, sel_error);
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(a3, sel_identifier);
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v13;

    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    v15 = swift_allocError();
    *(_QWORD *)v16 = v12;
    *(_QWORD *)(v16 + 8) = v14;
    *(_QWORD *)(v16 + 16) = v10;
    *(_BYTE *)(v16 + 64) = 10;
    v17 = *(void **)(a4 + 16);
    *(_QWORD *)(a4 + 16) = v15;

  }
  else
  {
    v18 = a5 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_bookmark;
    v19 = type metadata accessor for BookmarkCache(0);
    v20 = *(int *)(v19 + 20);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)(v18 + v20) = a2;
    *(_BYTE *)(v18 + *(int *)(v19 + 24)) = 1;
  }
}

id get_DKIntentMetadataKeyClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DKIntentMetadataKeyClass_softClass;
  v7 = get_DKIntentMetadataKeyClass_softClass;
  if (!get_DKIntentMetadataKeyClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DKIntentMetadataKeyClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_DKIntentMetadataKeyClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D83A55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D83AE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CoreDuetContextLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!CoreDuetContextLibraryCore_frameworkLibrary_0)
  {
    v1 = xmmword_1E2648750;
    v2 = 0;
    CoreDuetContextLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!CoreDuetContextLibraryCore_frameworkLibrary_0)
    CoreDuetContextLibrary_cold_1(&v0);
}

void CoreDuetContextLibrary_0()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!CoreDuetContextLibraryCore_frameworkLibrary_1)
  {
    v1 = xmmword_1E2648AF0;
    v2 = 0;
    CoreDuetContextLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  if (!CoreDuetContextLibraryCore_frameworkLibrary_1)
    CoreDuetContextLibrary_cold_1_0(&v0);
}

void sub_18D83B974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

id upperCaseInitialCharacter(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t i;
  unsigned __int16 v5;
  unsigned __int16 v7;

  v1 = a1;
  v2 = objc_msgSend(v1, "length");
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", v2);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v5 = objc_msgSend(v1, "characterAtIndex:", i);
      if ((unsigned __int16)(v5 - 97) < 0x1Au && i == 0)
        v7 = v5 - 32;
      else
        v7 = v5;
      objc_msgSend(v3, "appendFormat:", CFSTR("%C"), v7);
    }
  }

  return v3;
}

id get_DKDiscoverabilitySignalsMetadataKeyClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DKDiscoverabilitySignalsMetadataKeyClass_softClass;
  v7 = get_DKDiscoverabilitySignalsMetadataKeyClass_softClass;
  if (!get_DKDiscoverabilitySignalsMetadataKeyClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DKDiscoverabilitySignalsMetadataKeyClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_DKDiscoverabilitySignalsMetadataKeyClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D83BCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CoreDuetLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!CoreDuetLibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E2647EC8;
    v2 = 0;
    CoreDuetLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CoreDuetLibraryCore_frameworkLibrary)
    CoreDuetLibrary_cold_1(&v0);
}

void CoreDuetLibrary_0()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!CoreDuetLibraryCore_frameworkLibrary_2)
  {
    v1 = xmmword_1E2648738;
    v2 = 0;
    CoreDuetLibraryCore_frameworkLibrary_2 = _sl_dlopen();
  }
  if (!CoreDuetLibraryCore_frameworkLibrary_2)
    CoreDuetLibrary_cold_1_0(&v0);
}

void CoreDuetLibrary_1()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!CoreDuetLibraryCore_frameworkLibrary_5)
  {
    v1 = xmmword_1E2648930;
    v2 = 0;
    CoreDuetLibraryCore_frameworkLibrary_5 = _sl_dlopen();
  }
  if (!CoreDuetLibraryCore_frameworkLibrary_5)
    CoreDuetLibrary_cold_1_1(&v0);
}

void CoreDuetLibrary_2()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!CoreDuetLibraryCore_frameworkLibrary_6)
  {
    v1 = xmmword_1E2648AC0;
    v2 = 0;
    CoreDuetLibraryCore_frameworkLibrary_6 = _sl_dlopen();
  }
  if (!CoreDuetLibraryCore_frameworkLibrary_6)
    CoreDuetLibrary_cold_1_2(&v0);
}

void CoreDuetLibrary_3()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!CoreDuetLibraryCore_frameworkLibrary_8)
  {
    v1 = xmmword_1E2649248;
    v2 = 0;
    CoreDuetLibraryCore_frameworkLibrary_8 = _sl_dlopen();
  }
  if (!CoreDuetLibraryCore_frameworkLibrary_8)
    CoreDuetLibrary_cold_1_3(&v0);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v5 = *(_QWORD *)(result + 16);
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  result = OUTLINED_FUNCTION_81_0();
  if (!(_DWORD)result || v7 + v5 > *(_QWORD *)(v6 + 24) >> 1)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v6 = result;
  }
  if (!*(_QWORD *)(v3 + 16))
  {
    if (!v5)
      goto LABEL_11;
    goto LABEL_13;
  }
  v9 = (*(_QWORD *)(v6 + 24) >> 1) - *(_QWORD *)(v6 + 16);
  result = a3(0);
  if (v9 < v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_168();
  result = specialized UnsafeMutablePointer.initialize(from:count:)(v3 + v10, v5);
  if (!v5)
  {
LABEL_11:
    result = OUTLINED_FUNCTION_64();
    *v4 = v6;
    return result;
  }
  v11 = *(_QWORD *)(v6 + 16);
  v12 = __OFADD__(v11, v5);
  v13 = v11 + v5;
  if (!v12)
  {
    *(_QWORD *)(v6 + 16) = v13;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.KeyWrapper.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104));
  return swift_deallocClassInstance();
}

uint64_t initializeBufferWithCopyOfBuffer for ChangeRecord(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

void destroy for MIN()
{
  uint64_t v0;
  uint64_t v1;
  void (**Description)(_QWORD);
  void (*v3)(_QWORD);
  ValueMetadata *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);

  OUTLINED_FUNCTION_166();
  Description = (void (**)(_QWORD))OUTLINED_FUNCTION_22_2()[-1].Description;
  OUTLINED_FUNCTION_232();
  Description[1](v1);
  v3 = Description[8];
  v4 = OUTLINED_FUNCTION_33();
  (*((void (**)(unint64_t, ValueMetadata *))v4[-1].Description + 1))(((unint64_t)v3 + *((unsigned __int8 *)v4[-1].Description + 80) + v1) & ~(unint64_t)*((unsigned __int8 *)v4[-1].Description + 80), v4);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v0 + 16);
  OUTLINED_FUNCTION_232();
  v6 = OUTLINED_FUNCTION_188();
  if (__swift_getEnumTagSinglePayload(v6, v7, v5))
  {
    OUTLINED_FUNCTION_1_6();
  }
  else
  {
    v8 = OUTLINED_FUNCTION_163_0();
    OUTLINED_FUNCTION_135_1(v8, v9, v10);
  }
}

uint64_t OUTLINED_FUNCTION_156_0()
{
  return type metadata accessor for AggregationEvent(0);
}

uint64_t OUTLINED_FUNCTION_156_1()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t getEnumTagSinglePayload for ChangeRecord(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t specialized KeyedQueryPlannerMetadataCache.getValue(forKey:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  Swift::OpaquePointer v22;
  Swift::String v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *sql;

  v3 = v2;
  v4 = v1;
  v6 = (int *)type metadata accessor for KeyedAggregationMetadataCache(0);
  v7 = *(_QWORD *)(v1 + v6[12]);
  if (!v7)
    return 0;
  v8 = v6;
  v9 = (uint64_t *)(v1 + v6[15]);
  if (!v9[1])
    return 0;
  sql = (void *)v9[1];
  v10 = *v9;
  v11 = (uint64_t (*)(uint64_t))v9[2];
  v12 = *(unsigned __int8 *)(v1 + v6[14]);
  v13 = *(_QWORD *)(v1 + v6[7]);
  swift_bridgeObjectRetain();
  if (v12 == 1)
  {
    swift_bridgeObjectRetain();
    outlined copy of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v10, (uint64_t)sql);
    v14 = specialized Dictionary.subscript.getter(a1, v13);
    swift_bridgeObjectRelease();
    outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v10, (uint64_t)sql);
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = v3;
    outlined copy of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v10, (uint64_t)sql);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = v11;
    v14 = specialized Dictionary.subscript.getter(a1, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14)
      goto LABEL_10;
    v16 = v4 + v8[8];
    v18 = *(void **)v16;
    v17 = *(_QWORD *)(v16 + 8);
    swift_bridgeObjectRetain();
    v19 = v18;
    swift_bridgeObjectRetain();
    v14 = specialized OrderedDictionary.subscript.getter(a1, (uint64_t)v19, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (v14 != 1)
    {
LABEL_10:
      swift_bridgeObjectRelease();
      outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v10, (uint64_t)sql);
    }
    else
    {
      swift_retain();
      swift_retain();
      v20 = v15(a1);
      v14 = v28;
      if (v28)
      {
        swift_bridgeObjectRelease();
        outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v10, (uint64_t)sql);
        swift_release();
        swift_release();
      }
      else
      {
        v22._rawValue = (void *)v20;
        swift_release();
        v23._countAndFlagsBits = v10;
        v23._object = sql;
        v24 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v23, v22);
        if (v25)
        {
          swift_bridgeObjectRelease();
          outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v10, (uint64_t)sql);
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          v26 = v24;
          swift_release();
          swift_bridgeObjectRelease();
          if (v26)
          {
            specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)(v7);
            swift_bridgeObjectRelease();
            specialized _arrayForceCast<A, B>(_:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            static KeyedAggregationMetadataCache.metadataFromRow(_:groupBySchema:payloadSchema:)();
            v14 = v27;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            v14 = 0;
          }
          specialized KeyedQueryPlannerMetadataCache.updateCache(_:forKey:)(v14, a1);
          outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v10, (uint64_t)sql);
        }
      }
    }
  }
  return v14;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *MatchingRecordCache;
  uint64_t v7;
  int *v8;
  uint64_t *v9;
  void *v10;
  uint64_t (*v11)(uint64_t);
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::OpaquePointer v31;
  Swift::String v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;

  v3 = v2;
  v4 = v1;
  MatchingRecordCache = (int *)type metadata accessor for KeyedFirstMatchingRecordCache(0);
  v7 = *(_QWORD *)(v1 + MatchingRecordCache[12]);
  if (!v7)
    return 0;
  v8 = MatchingRecordCache;
  v9 = (uint64_t *)(v1 + MatchingRecordCache[15]);
  v10 = (void *)v9[1];
  if (!v10)
    return 0;
  v42 = *v9;
  v11 = (uint64_t (*)(uint64_t))v9[2];
  v12 = *(unsigned __int8 *)(v1 + MatchingRecordCache[14]);
  v13 = *(_QWORD *)(v1 + MatchingRecordCache[7]);
  swift_bridgeObjectRetain();
  if (v12 == 1)
  {
    swift_bridgeObjectRetain();
    outlined copy of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v42, (uint64_t)v10);
    v14 = specialized Dictionary.subscript.getter(a1, v13);
    v16 = v15;
    swift_bridgeObjectRelease();
    outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v42, (uint64_t)v10);
    swift_bridgeObjectRelease();
    if (v16)
      return v14 & 1;
    else
      return 0;
  }
  v40 = v3;
  outlined copy of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v42, (uint64_t)v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = specialized Dictionary.subscript.getter(a1, v13);
  v41 = v11;
  v20 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v20)
  {
    swift_bridgeObjectRelease();
    v17 = v18 & 1;
    v21 = v42;
    v22 = (uint64_t)v10;
LABEL_14:
    outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v21, v22);
    return v17;
  }
  v23 = v4 + v8[8];
  v25 = *(void **)v23;
  v24 = *(_QWORD *)(v23 + 8);
  swift_bridgeObjectRetain();
  v26 = v25;
  swift_bridgeObjectRetain();
  v17 = specialized OrderedDictionary.subscript.getter(a1, (uint64_t)v26, v24);
  v28 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (v28 != 1)
  {
    swift_bridgeObjectRelease();
    v21 = v42;
    v22 = (uint64_t)v10;
    goto LABEL_14;
  }
  v17 = *(_QWORD *)(v4 + v8[11]);
  swift_retain();
  swift_retain();
  v29 = v41(a1);
  if (v40)
  {
    swift_bridgeObjectRelease();
    outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v42, (uint64_t)v10);
    swift_release();
    swift_release();
  }
  else
  {
    v31._rawValue = (void *)v29;
    swift_release();
    v32._countAndFlagsBits = v42;
    v32._object = v10;
    v33 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v32, v31);
    if (v34)
    {
      swift_bridgeObjectRelease();
      outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v42, (uint64_t)v10);
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      v35 = v33;
      swift_release();
      swift_bridgeObjectRelease();
      if (v35)
      {
        specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)(v7);
        swift_bridgeObjectRelease();
        specialized _arrayForceCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        static KeyedFirstMatchingRecordCache.metadataFromRow(_:groupBySchema:payloadSchema:)();
        v37 = v36;
        v39 = v38;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v17 = v37 & 1;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v17 = 0;
        v39 = 0;
      }
      specialized KeyedQueryPlannerMetadataCache.updateCache(_:forKey:)(v17, v39, a1);
      outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v42, (uint64_t)v10);
    }
  }
  return v17;
}

uint64_t outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

void specialized KeyedQueryPlannerMetadataCache.updateCache(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v2;
  v6 = type metadata accessor for KeyedAggregationMetadataCache(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v2 + *(int *)(v7 + 32);
  specialized OrderedDictionary.updateValue(_:forKey:)(a1, a2);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 16);
  outlined init with copy of StorableValue(v3, (uint64_t)v9, type metadata accessor for KeyedAggregationMetadataCache);
  v12 = *(_QWORD *)&v9[*(int *)(v6 + 36)];
  outlined destroy of StorableValue((uint64_t)v9, type metadata accessor for KeyedAggregationMetadataCache);
  if (v12 < v11)
    specialized OrderedDictionary.removeFirst()();
}

uint64_t specialized OrderedDictionary.updateValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(a2), (v4 & 1) == 0))
  {
    v5 = *(void **)v2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for OrderedDictionary<[StorableValue], [[String : StorableValue]]?>.KeyWrapper);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = a2;
    swift_bridgeObjectRetain();
    objc_msgSend(v5, sel_addObject_, v6);
    swift_release();
  }
  v7 = swift_bridgeObjectRetain();
  v8 = specialized Dictionary._Variant.updateValue(_:forKey:)(v7, a2);
  return outlined consume of [[String : StorableValue]]??(v8);
}

uint64_t specialized Dictionary._Variant.updateValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v9;

  v3 = v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v2;
  *v2 = 0x8000000000000000;
  v7 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_13;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_9;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], [[String : StorableValue]]?>);
    _NativeDictionary.copy()();
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_13:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = v16;
LABEL_9:
  v18 = *v4;
  if ((v14 & 1) != 0)
  {
    v19 = v18[7];
    result = *(_QWORD *)(v19 + 8 * v10);
    *(_QWORD *)(v19 + 8 * v10) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v18);
    swift_bridgeObjectRetain();
    return 1;
  }
  return result;
}

uint64_t outlined consume of [[String : StorableValue]]??(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t specialized OrderedDictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  if (*(_QWORD *)(a3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v3 & 1) != 0))
    return swift_bridgeObjectRetain();
  else
    return 1;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

uint64_t specialized KeyedQueryPlannerMetadataCache.setValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::OpaquePointer v30;
  Swift::String v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *sql;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  int *v39;
  uint64_t v40;

  v5 = (int *)type metadata accessor for KeyedAggregationMetadataCache(0);
  v6 = *(_QWORD *)(v2 + v5[12]);
  if (!v6 || (v7 = (uint64_t *)(v2 + v5[15]), (v8 = v7[1]) == 0))
  {
    v14 = 0;
    goto LABEL_13;
  }
  v40 = v3;
  v9 = *v7;
  v10 = (uint64_t (*)(uint64_t))v7[2];
  v11 = *(unsigned __int8 *)(v2 + v5[14]);
  v39 = v5;
  v12 = *(_QWORD *)(v2 + v5[7]);
  swift_bridgeObjectRetain();
  v38 = v12;
  if (v11 == 1)
  {
    swift_bridgeObjectRetain();
    outlined copy of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v9, v8);
    v13 = specialized Dictionary.subscript.getter(a2, v12);
    swift_bridgeObjectRelease();
    outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v9, v8);
    swift_bridgeObjectRelease();
    if (!v13)
    {
      v14 = 0;
LABEL_13:
      v19 = swift_bridgeObjectRetain();
      specialized KeyedQueryPlannerMetadataCache.updateCache(_:forKey:)(v19, a2);
      swift_bridgeObjectRelease();
      v20 = swift_bridgeObjectRetain();
      specialized Dictionary._Variant.updateValue(_:forKey:)(v20, v14, a2);
      return swift_bridgeObjectRelease();
    }
    goto LABEL_9;
  }
  outlined copy of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v9, v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v37 = v10;
  v15 = specialized Dictionary.subscript.getter(a2, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15)
  {
    swift_bridgeObjectRelease();
    outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v9, v8);
    goto LABEL_9;
  }
  sql = (void *)v8;
  v22 = v2 + v39[8];
  v24 = *(void **)v22;
  v23 = *(_QWORD *)(v22 + 8);
  swift_bridgeObjectRetain();
  v25 = v24;
  swift_bridgeObjectRetain();
  v26 = specialized OrderedDictionary.subscript.getter(a2, (uint64_t)v25, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (v26 != 1)
  {
    swift_bridgeObjectRelease();
    v28 = v9;
    v29 = v26;
    goto LABEL_18;
  }
  swift_retain();
  swift_retain();
  v27 = v37(a2);
  if (v40)
  {
    swift_bridgeObjectRelease();
    outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v9, (uint64_t)sql);
    swift_release();
    return swift_release();
  }
  v30._rawValue = (void *)v27;
  swift_release();
  v28 = v9;
  v31._countAndFlagsBits = v9;
  v31._object = sql;
  v32 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v31, v30);
  if (!v33)
  {
    v34 = v32;
    swift_release();
    swift_bridgeObjectRelease();
    if (v34)
    {
      specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)(v6);
      swift_bridgeObjectRelease();
      specialized _arrayForceCast<A, B>(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      static KeyedAggregationMetadataCache.metadataFromRow(_:groupBySchema:payloadSchema:)();
      v29 = v35;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v29 = 0;
    }
    specialized KeyedQueryPlannerMetadataCache.updateCache(_:forKey:)(v29, a2);
LABEL_18:
    outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v28, (uint64_t)sql);
    if (!v29)
    {
LABEL_11:
      v14 = 0;
      goto LABEL_13;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = specialized Dictionary.subscript.getter(a2, v38);
    v18 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v16 || (swift_bridgeObjectRelease(), (v18 & 1) != 0))
    {
      v14 = 1;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v9, (uint64_t)sql);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)(a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v2 & 1) != 0))
    return swift_bridgeObjectRetain();
  else
    return 0;
}

{
  unint64_t v3;
  char v4;
  uint64_t v5;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v3);
  OUTLINED_FUNCTION_141();
  return v5;
}

uint64_t outlined copy of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t specialized Dictionary._Variant.updateValue(_:forKey:)(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v11;

  v4 = v3;
  v7 = a2 & 1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *v3;
  *v3 = 0x8000000000000000;
  v9 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(a1, v7, a3, isUniquelyReferenced_nonNull_native);
  *v4 = v11;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_13;
  }
  v16 = v11;
  v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_9;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], (value: [[String : StorableValue]], event: CacheEvent)>);
    _NativeDictionary.copy()();
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_13:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v12 = v18;
LABEL_9:
  v20 = a2 & 1;
  v21 = *v5;
  if ((v16 & 1) != 0)
  {
    v22 = v21[7] + 16 * v12;
    result = *(_QWORD *)v22;
    *(_QWORD *)v22 = a1;
    *(_BYTE *)(v22 + 8) = v20;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, v20, v21);
    swift_bridgeObjectRetain();
    return 0;
  }
  return result;
}

void specialized KeyedQueryPlannerMetadataCache.updateCache(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t MatchingRecordCache;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = v3;
  MatchingRecordCache = type metadata accessor for KeyedFirstMatchingRecordCache(0);
  v9 = MEMORY[0x1E0C80A78](MatchingRecordCache);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v3 + *(int *)(v9 + 32);
  specialized OrderedDictionary.updateValue(_:forKey:)(a1, a2, a3);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 16);
  outlined init with copy of StorableValue(v4, (uint64_t)v11, type metadata accessor for KeyedFirstMatchingRecordCache);
  v14 = *(_QWORD *)&v11[*(int *)(MatchingRecordCache + 36)];
  outlined destroy of StorableValue((uint64_t)v11, type metadata accessor for KeyedFirstMatchingRecordCache);
  if (v14 < v13)
    specialized OrderedDictionary.removeFirst()();
}

uint64_t specialized OrderedDictionary.updateValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!*(_QWORD *)(*(_QWORD *)(v3 + 8) + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(a3), (v7 & 1) == 0))
  {
    v8 = *(void **)v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrderedDictionary<[StorableValue], ChangeRecord?>.KeyWrapper);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = a3;
    swift_bridgeObjectRetain();
    objc_msgSend(v8, sel_addObject_, v9);
    swift_release();
  }
  swift_bridgeObjectRetain();
  v10 = specialized Dictionary._Variant.updateValue(_:forKey:)(a1, a2, a3);
  return outlined consume of ChangeRecord??(v10, v11);
}

uint64_t specialized Dictionary._Variant.updateValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v11;

  v4 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *v3;
  *v3 = 0x8000000000000000;
  v9 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *v4 = v11;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t result;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_13;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_9;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], ChangeRecord?>);
    _NativeDictionary.copy()();
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_13:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v12 = v18;
LABEL_9:
  v20 = *v5;
  if ((v16 & 1) != 0)
  {
    v21 = (uint64_t *)(*(_QWORD *)(v20 + 56) + 16 * v12);
    result = *v21;
    *v21 = a1;
    v21[1] = a2;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v20);
    swift_bridgeObjectRetain();
    return 0;
  }
  return result;
}

uint64_t outlined consume of ChangeRecord??(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  char *v59;
  char v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69[3];
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[6];
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  OUTLINED_FUNCTION_81_2();
  v100 = v4;
  v101 = v5;
  OUTLINED_FUNCTION_115_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v6);
  v7 = OUTLINED_FUNCTION_7_4();
  v83 = *(_QWORD *)(v7 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_8();
  v10 = OUTLINED_FUNCTION_69_3(v9);
  OUTLINED_FUNCTION_160(v10, (uint64_t)&v99);
  v87 = v11;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v12);
  v13 = OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_160(v13, (uint64_t)&v98);
  v86 = v14;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v15);
  v17 = OUTLINED_FUNCTION_6_8(v16, v69[0]);
  OUTLINED_FUNCTION_160(v17, (uint64_t)&v97);
  v85 = v18;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v19);
  v20 = OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_160(v20, (uint64_t)&v96);
  v84 = v21;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v22);
  OUTLINED_FUNCTION_8();
  v24 = OUTLINED_FUNCTION_70_3(v23);
  OUTLINED_FUNCTION_160(v24, (uint64_t)&v95);
  v82 = v25;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v26);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_120(v27);
  v92[2] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v28);
  OUTLINED_FUNCTION_12_6(v29, v69[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v30);
  v92[4] = (char *)v69 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_7();
  v33 = MEMORY[0x1E0C80A78](v32);
  v94 = OUTLINED_FUNCTION_23_3(v33, v34, v35, v36, v37, v38, v39, v40, v69[0]);
  v69[2] = *(_QWORD *)(v94 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v41);
  OUTLINED_FUNCTION_36_3();
  MEMORY[0x1E0C80A78](v42);
  OUTLINED_FUNCTION_18_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<[StorableValue], (value: [[String : StorableValue]], event: CacheEvent)>);
  OUTLINED_FUNCTION_63_4((uint64_t)&v93);
  OUTLINED_FUNCTION_169();
  if (!v43)
    goto LABEL_41;
  OUTLINED_FUNCTION_183_0((uint64_t)&v91);
  OUTLINED_FUNCTION_31_3(v44);
  v71 = v45 >> 6;
  v78 = *MEMORY[0x1E0CB05F0];
  v77 = *MEMORY[0x1E0CB05E0];
  v76 = *MEMORY[0x1E0CB0600];
  v75 = *MEMORY[0x1E0CB0628];
  OUTLINED_FUNCTION_131_2(v3 + 64);
  v46 = &demangling cache variable for type metadata for String?;
  OUTLINED_FUNCTION_118_1();
  v81 = v1;
  v80 = v7;
  v79 = v2;
  v73 = v0;
  v72 = v3;
  while (1)
  {
    if (v90)
    {
      OUTLINED_FUNCTION_100_1();
      goto LABEL_23;
    }
    if (__OFADD__(v47, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    OUTLINED_FUNCTION_67();
    if (v49 == v50)
      goto LABEL_36;
    if (!v70[v48])
    {
      OUTLINED_FUNCTION_19_4();
      if (v49 == v50)
        goto LABEL_36;
      OUTLINED_FUNCTION_179();
      if (!v51)
      {
        OUTLINED_FUNCTION_19_4();
        if (v49 == v50)
          goto LABEL_36;
        OUTLINED_FUNCTION_179();
        if (!v52)
          break;
      }
    }
LABEL_22:
    OUTLINED_FUNCTION_99_0();
LABEL_23:
    OUTLINED_FUNCTION_311();
    v57 = (uint64_t *)(v56 + 16 * v55);
    v58 = *v57;
    v88 = *((unsigned __int8 *)v57 + 8);
    if ((v74 & 1) == 0)
    {
      OUTLINED_FUNCTION_141();
      OUTLINED_FUNCTION_21_0();
    }
    v89 = v58;
    OUTLINED_FUNCTION_32();
    OUTLINED_FUNCTION_13_6(v46[2]);
    OUTLINED_FUNCTION_303();
    v46 = v1;
    if (v3)
    {
      OUTLINED_FUNCTION_10_4((uint64_t)v92);
      OUTLINED_FUNCTION_76_2();
      OUTLINED_FUNCTION_71_4();
      v59 = (char *)&loc_18D83EF9C + *((int *)qword_18D9405F0 + OUTLINED_FUNCTION_140_0());
      __asm { BR              X9 }
    }
    Hasher._finalize()();
    v3 = v72;
    OUTLINED_FUNCTION_174_0();
    OUTLINED_FUNCTION_91_2();
    if (v60)
    {
      OUTLINED_FUNCTION_61_3();
      v0 = v73;
      do
      {
        OUTLINED_FUNCTION_257();
        if (v60 && (v62 & 1) != 0)
        {
          __break(1u);
          JUMPOUT(0x18D83F310);
        }
        OUTLINED_FUNCTION_170_0();
      }
      while (v60);
      OUTLINED_FUNCTION_58();
    }
    else
    {
      OUTLINED_FUNCTION_62();
      v0 = v73;
    }
    OUTLINED_FUNCTION_4_13(v61);
    v65 = v64 + 16 * v63;
    *(_QWORD *)v65 = v89;
    *(_BYTE *)(v65 + 8) = v88;
    OUTLINED_FUNCTION_117_0();
  }
  OUTLINED_FUNCTION_67();
  if (v49 != v50)
  {
    if (!v70[v53])
    {
      while (!__OFADD__(v53, 1))
      {
        OUTLINED_FUNCTION_19_4();
        if (v49 == v50)
          goto LABEL_36;
        OUTLINED_FUNCTION_213_0();
        if (v54)
          goto LABEL_22;
      }
LABEL_44:
      __break(1u);
      JUMPOUT(0x18D83F324);
    }
    goto LABEL_22;
  }
LABEL_36:
  OUTLINED_FUNCTION_96();
  if ((v74 & 1) != 0)
  {
    OUTLINED_FUNCTION_90_1();
    if (v49 != v50)
    {
      *v70 = -1 << v66;
    }
    else
    {
      v67 = OUTLINED_FUNCTION_207();
      specialized UnsafeMutablePointer.assign(repeating:count:)(v67, v68, v70);
    }
    *(_QWORD *)(v0 + 16) = 0;
  }
LABEL_41:
  OUTLINED_FUNCTION_96();
  OUTLINED_FUNCTION_287();
  OUTLINED_FUNCTION_13_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54[7];
  char v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  _QWORD v74[6];
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  OUTLINED_FUNCTION_81_2();
  v77 = v3;
  v78 = v4;
  OUTLINED_FUNCTION_115_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v5);
  v62 = *(_QWORD *)(OUTLINED_FUNCTION_7_4() - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v6);
  v70 = OUTLINED_FUNCTION_69_3((uint64_t)v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v69 = *(_QWORD *)(v70 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v8);
  v68 = OUTLINED_FUNCTION_15_4();
  v67 = *(_QWORD *)(v68 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v9);
  v66 = OUTLINED_FUNCTION_6_8(v10, v54[0]);
  v65 = *(_QWORD *)(v66 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v11);
  v64 = OUTLINED_FUNCTION_8_6();
  v63 = *(_QWORD *)(v64 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v12);
  v61 = OUTLINED_FUNCTION_70_3((uint64_t)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v60 = *(_QWORD *)(v61 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_120((uint64_t)v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v74[3] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_12_6(v17, v54[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v18);
  v74[5] = (char *)v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_7();
  v21 = MEMORY[0x1E0C80A78](v20);
  v76 = OUTLINED_FUNCTION_23_3(v21, v22, v23, v24, v25, v26, v27, v28, v54[0]);
  v54[1] = *(_QWORD *)(v76 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v29);
  OUTLINED_FUNCTION_36_3();
  MEMORY[0x1E0C80A78](v30);
  OUTLINED_FUNCTION_18_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<[StorableValue], ChangeRecord?>);
  OUTLINED_FUNCTION_63_4((uint64_t)&v75);
  OUTLINED_FUNCTION_169();
  if (!v31)
    goto LABEL_45;
  v54[0] = v1;
  v32 = 1 << *(_BYTE *)(v0 + 32);
  v33 = *(_QWORD *)(v0 + 64);
  v54[2] = v0 + 64;
  if (v32 < 64)
    v34 = ~(-1 << v32);
  else
    v34 = -1;
  v72 = v34 & v33;
  v54[3] = (unint64_t)(v32 + 63) >> 6;
  v59 = *MEMORY[0x1E0CB05F0];
  v58 = *MEMORY[0x1E0CB05E0];
  v57 = *MEMORY[0x1E0CB0600];
  v56 = *MEMORY[0x1E0CB0628];
  OUTLINED_FUNCTION_131_2(v2 + 64);
  v35 = &demangling cache variable for type metadata for String?;
  OUTLINED_FUNCTION_118_1();
  OUTLINED_FUNCTION_88_1();
  while (1)
  {
    if (v72)
    {
      v37 = v35;
      v72 &= v72 - 1;
      v71 = v36;
      goto LABEL_27;
    }
    if (__OFADD__(v36, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    OUTLINED_FUNCTION_67();
    if (v38 == v39)
      goto LABEL_40;
    OUTLINED_FUNCTION_159_1();
    v42 = v41;
    if (!v40)
    {
      OUTLINED_FUNCTION_19_4();
      if (v38 == v39)
        goto LABEL_40;
      OUTLINED_FUNCTION_179();
      if (!v40)
      {
        OUTLINED_FUNCTION_19_4();
        if (v38 == v39)
          goto LABEL_40;
        OUTLINED_FUNCTION_179();
        if (!v40)
          break;
      }
    }
LABEL_26:
    v37 = v35;
    v72 = (v40 - 1) & v40;
    v71 = v42;
LABEL_27:
    OUTLINED_FUNCTION_311();
    v73 = *(_OWORD *)(v45 + 16 * v44);
    if ((v55 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_21_0();
    }
    OUTLINED_FUNCTION_32();
    OUTLINED_FUNCTION_13_6(v35[2]);
    OUTLINED_FUNCTION_303();
    v35 = v37;
    if (v2)
    {
      OUTLINED_FUNCTION_10_4((uint64_t)v74);
      OUTLINED_FUNCTION_76_2();
      OUTLINED_FUNCTION_71_4();
      v46 = (char *)&loc_18D83F790 + *((int *)qword_18D9405B0 + OUTLINED_FUNCTION_140_0());
      __asm { BR              X9 }
    }
    Hasher._finalize()();
    OUTLINED_FUNCTION_55_4();
    if (v47)
    {
      OUTLINED_FUNCTION_178_0();
      do
      {
        OUTLINED_FUNCTION_257();
        if (v47 && (v49 & 1) != 0)
        {
          __break(1u);
          JUMPOUT(0x18D83FAB0);
        }
        OUTLINED_FUNCTION_170_0();
      }
      while (v47);
      OUTLINED_FUNCTION_58();
    }
    else
    {
      OUTLINED_FUNCTION_202_0();
    }
    OUTLINED_FUNCTION_4_13(v48);
    *(_OWORD *)(v51 + 16 * v50) = v73;
    ++MEMORY[0x10];
    v36 = v71;
  }
  OUTLINED_FUNCTION_67();
  if (v38 != v39)
  {
    OUTLINED_FUNCTION_159_1();
    if (!v40)
    {
      while (!__OFADD__(v43, 1))
      {
        OUTLINED_FUNCTION_19_4();
        if (v38 == v39)
          goto LABEL_40;
        OUTLINED_FUNCTION_213_0();
        if (v40)
          goto LABEL_26;
      }
LABEL_48:
      __break(1u);
      JUMPOUT(0x18D83FAC4);
    }
    v42 = v43;
    goto LABEL_26;
  }
LABEL_40:
  OUTLINED_FUNCTION_96();
  OUTLINED_FUNCTION_328();
  if ((v52 & 1) != 0)
  {
    OUTLINED_FUNCTION_90_1();
    if (v38 != v39)
      OUTLINED_FUNCTION_215_0(v53);
    else
      OUTLINED_FUNCTION_146_1(v53);
    *(_QWORD *)(v0 + 16) = 0;
  }
LABEL_45:
  OUTLINED_FUNCTION_96();
  OUTLINED_FUNCTION_287();
  OUTLINED_FUNCTION_13_7();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[2];
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[6];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  OUTLINED_FUNCTION_81_2();
  v90 = v4;
  v91 = v5;
  OUTLINED_FUNCTION_115_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v6);
  v7 = OUTLINED_FUNCTION_7_4();
  v75 = *(_QWORD *)(v7 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v8);
  v10 = OUTLINED_FUNCTION_69_3((uint64_t)v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_160(v10, (uint64_t)&v89);
  v82 = v11;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v12);
  v81 = OUTLINED_FUNCTION_15_4();
  v80 = *(_QWORD *)(v81 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v13);
  v79 = OUTLINED_FUNCTION_6_8(v14, v61[0]);
  v78 = *(_QWORD *)(v79 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v15);
  v77 = OUTLINED_FUNCTION_8_6();
  v76 = *(_QWORD *)(v77 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_8();
  v18 = OUTLINED_FUNCTION_70_3(v17);
  OUTLINED_FUNCTION_160(v18, (uint64_t)&v88);
  v74 = v19;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v20);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_120(v21);
  v86[1] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v22);
  OUTLINED_FUNCTION_12_6(v23, v61[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v24);
  v86[3] = (char *)v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_7();
  v27 = MEMORY[0x1E0C80A78](v26);
  v87 = OUTLINED_FUNCTION_23_3(v27, v28, v29, v30, v31, v32, v33, v34, v61[0]);
  v61[1] = *(_QWORD *)(v87 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v35);
  OUTLINED_FUNCTION_36_3();
  MEMORY[0x1E0C80A78](v36);
  OUTLINED_FUNCTION_18_5();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<[StorableValue], [[String : StorableValue]]?>);
  OUTLINED_FUNCTION_63_4((uint64_t)&v87 + 4);
  OUTLINED_FUNCTION_169();
  if (!v37)
    goto LABEL_41;
  OUTLINED_FUNCTION_183_0((uint64_t)&v85);
  OUTLINED_FUNCTION_31_3(v38);
  v63 = v39 >> 6;
  v70 = *MEMORY[0x1E0CB05F0];
  v69 = *MEMORY[0x1E0CB05E0];
  v68 = *MEMORY[0x1E0CB0600];
  v67 = *MEMORY[0x1E0CB0628];
  OUTLINED_FUNCTION_131_2(v3 + 64);
  v40 = &demangling cache variable for type metadata for String?;
  OUTLINED_FUNCTION_118_1();
  v73 = v1;
  v72 = v7;
  v71 = v2;
  v65 = v0;
  v64 = v3;
  while (1)
  {
    if (v84)
    {
      OUTLINED_FUNCTION_100_1();
      goto LABEL_23;
    }
    if (__OFADD__(v41, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    OUTLINED_FUNCTION_67();
    if (v43 == v44)
      goto LABEL_36;
    if (!v62[v42])
    {
      OUTLINED_FUNCTION_19_4();
      if (v43 == v44)
        goto LABEL_36;
      OUTLINED_FUNCTION_179();
      if (!v45)
      {
        OUTLINED_FUNCTION_19_4();
        if (v43 == v44)
          goto LABEL_36;
        OUTLINED_FUNCTION_179();
        if (!v46)
          break;
      }
    }
LABEL_22:
    OUTLINED_FUNCTION_99_0();
LABEL_23:
    OUTLINED_FUNCTION_311();
    v51 = *(_QWORD *)(v50 + 8 * v49);
    if ((v66 & 1) == 0)
    {
      OUTLINED_FUNCTION_141();
      OUTLINED_FUNCTION_21_0();
    }
    v83 = v51;
    OUTLINED_FUNCTION_32();
    OUTLINED_FUNCTION_13_6(v40[2]);
    OUTLINED_FUNCTION_303();
    v40 = v1;
    if (v3)
    {
      OUTLINED_FUNCTION_10_4((uint64_t)v86);
      OUTLINED_FUNCTION_76_2();
      OUTLINED_FUNCTION_71_4();
      v52 = (char *)&loc_18D83FF7C + *((int *)qword_18D940610 + OUTLINED_FUNCTION_140_0());
      __asm { BR              X9 }
    }
    Hasher._finalize()();
    v3 = v64;
    OUTLINED_FUNCTION_174_0();
    OUTLINED_FUNCTION_91_2();
    if (v53)
    {
      OUTLINED_FUNCTION_61_3();
      v0 = v65;
      do
      {
        OUTLINED_FUNCTION_257();
        if (v53 && (v55 & 1) != 0)
        {
          __break(1u);
          JUMPOUT(0x18D8402E0);
        }
        OUTLINED_FUNCTION_170_0();
      }
      while (v53);
      OUTLINED_FUNCTION_58();
    }
    else
    {
      OUTLINED_FUNCTION_62();
      v0 = v65;
    }
    OUTLINED_FUNCTION_4_13(v54);
    *(_QWORD *)(v57 + 8 * v56) = v83;
    OUTLINED_FUNCTION_117_0();
  }
  OUTLINED_FUNCTION_67();
  if (v43 != v44)
  {
    if (!v62[v47])
    {
      while (!__OFADD__(v47, 1))
      {
        OUTLINED_FUNCTION_19_4();
        if (v43 == v44)
          goto LABEL_36;
        OUTLINED_FUNCTION_213_0();
        if (v48)
          goto LABEL_22;
      }
LABEL_44:
      __break(1u);
      JUMPOUT(0x18D8402F4);
    }
    goto LABEL_22;
  }
LABEL_36:
  OUTLINED_FUNCTION_96();
  if ((v66 & 1) != 0)
  {
    OUTLINED_FUNCTION_90_1();
    if (v43 != v44)
    {
      *v62 = -1 << v58;
    }
    else
    {
      v59 = OUTLINED_FUNCTION_207();
      specialized UnsafeMutablePointer.assign(repeating:count:)(v59, v60, v62);
    }
    *(_QWORD *)(v0 + 16) = 0;
  }
LABEL_41:
  OUTLINED_FUNCTION_96();
  OUTLINED_FUNCTION_287();
  OUTLINED_FUNCTION_13_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  char *v48;
  char v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57[7];
  char v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[6];
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  OUTLINED_FUNCTION_81_2();
  v82 = v4;
  v83 = v5;
  OUTLINED_FUNCTION_115_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v6);
  v65 = *(_QWORD *)(OUTLINED_FUNCTION_7_4() - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v7);
  v73 = OUTLINED_FUNCTION_69_3((uint64_t)v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = *(_QWORD *)(v73 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v9);
  v71 = OUTLINED_FUNCTION_15_4();
  v70 = *(_QWORD *)(v71 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v10);
  v69 = OUTLINED_FUNCTION_6_8(v11, v57[0]);
  v68 = *(_QWORD *)(v69 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v12);
  v67 = OUTLINED_FUNCTION_8_6();
  v66 = *(_QWORD *)(v67 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v13);
  v64 = OUTLINED_FUNCTION_70_3((uint64_t)v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v63 = *(_QWORD *)(v64 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v15);
  OUTLINED_FUNCTION_120((uint64_t)v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v79[3] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v17);
  OUTLINED_FUNCTION_12_6(v18, v57[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v19);
  v79[5] = (char *)v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_7();
  v22 = MEMORY[0x1E0C80A78](v21);
  v81 = OUTLINED_FUNCTION_23_3(v22, v23, v24, v25, v26, v27, v28, v29, v57[0]);
  v57[1] = *(_QWORD *)(v81 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v30);
  OUTLINED_FUNCTION_36_3();
  MEMORY[0x1E0C80A78](v31);
  OUTLINED_FUNCTION_18_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<[StorableValue], (value: ChangeRecord, event: CacheEvent)>);
  OUTLINED_FUNCTION_63_4((uint64_t)&v80);
  OUTLINED_FUNCTION_169();
  if (!v32)
    goto LABEL_42;
  v57[0] = v1;
  OUTLINED_FUNCTION_31_3(1 << *(_BYTE *)(v0 + 32));
  v57[3] = v33 >> 6;
  v62 = *MEMORY[0x1E0CB05F0];
  v61 = *MEMORY[0x1E0CB05E0];
  v60 = *MEMORY[0x1E0CB0600];
  v59 = *MEMORY[0x1E0CB0628];
  OUTLINED_FUNCTION_131_2(v2 + 64);
  v34 = &demangling cache variable for type metadata for String?;
  v79[0] = v3;
  OUTLINED_FUNCTION_88_1();
  while (1)
  {
    if (v78)
    {
      v36 = v34;
      v78 &= v78 - 1;
      v77 = v35;
      goto LABEL_24;
    }
    if (__OFADD__(v35, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    OUTLINED_FUNCTION_67();
    if (v37 == v38)
      goto LABEL_37;
    OUTLINED_FUNCTION_159_1();
    v41 = v40;
    if (!v39)
    {
      OUTLINED_FUNCTION_251();
      if (v37 == v38)
        goto LABEL_37;
      OUTLINED_FUNCTION_248();
      if (!v39)
      {
        OUTLINED_FUNCTION_251();
        if (v37 == v38)
          goto LABEL_37;
        OUTLINED_FUNCTION_248();
        if (!v39)
          break;
      }
    }
LABEL_23:
    v36 = v34;
    v78 = (v39 - 1) & v39;
    v77 = v41;
LABEL_24:
    OUTLINED_FUNCTION_311();
    v47 = (unsigned __int8 *)(v45 + v44 * v46);
    v76 = *v47;
    v0 = *((_QWORD *)v47 + 1);
    v74 = v47[16];
    if ((v58 & 1) == 0)
    {
      OUTLINED_FUNCTION_141();
      OUTLINED_FUNCTION_21_0();
    }
    v75 = v0;
    OUTLINED_FUNCTION_32();
    OUTLINED_FUNCTION_13_6(v34[2]);
    OUTLINED_FUNCTION_303();
    v34 = v36;
    if (v2)
    {
      OUTLINED_FUNCTION_10_4((uint64_t)v79);
      OUTLINED_FUNCTION_76_2();
      OUTLINED_FUNCTION_71_4();
      v48 = (char *)&loc_18D850B64 + *((int *)qword_18D9405D0 + OUTLINED_FUNCTION_140_0());
      __asm { BR              X9 }
    }
    Hasher._finalize()();
    OUTLINED_FUNCTION_55_4();
    if (v49)
    {
      OUTLINED_FUNCTION_178_0();
      do
      {
        OUTLINED_FUNCTION_257();
        if (v49 && (v51 & 1) != 0)
        {
          __break(1u);
          JUMPOUT(0x18D850E94);
        }
        OUTLINED_FUNCTION_170_0();
      }
      while (v49);
      OUTLINED_FUNCTION_58();
    }
    else
    {
      OUTLINED_FUNCTION_202_0();
    }
    OUTLINED_FUNCTION_4_13(v50);
    v54 = v53 + 24 * v52;
    *(_BYTE *)v54 = v76;
    *(_QWORD *)(v54 + 8) = v75;
    *(_BYTE *)(v54 + 16) = v74;
    OUTLINED_FUNCTION_117_0();
  }
  OUTLINED_FUNCTION_67();
  if (v37 != v38)
  {
    OUTLINED_FUNCTION_159_1();
    if (!v39)
    {
      while (!__OFADD__(v42, 1))
      {
        OUTLINED_FUNCTION_251();
        if (v37 == v38)
          goto LABEL_37;
        OUTLINED_FUNCTION_248();
        v42 = v43 + 1;
        if (v39)
          goto LABEL_23;
      }
LABEL_45:
      __break(1u);
      JUMPOUT(0x18D850EA8);
    }
    v41 = v42;
    goto LABEL_23;
  }
LABEL_37:
  OUTLINED_FUNCTION_96();
  OUTLINED_FUNCTION_328();
  if ((v55 & 1) != 0)
  {
    OUTLINED_FUNCTION_90_1();
    if (v37 != v38)
      OUTLINED_FUNCTION_215_0(v56);
    else
      OUTLINED_FUNCTION_146_1(v56);
    *(_QWORD *)(v0 + 16) = 0;
  }
LABEL_42:
  OUTLINED_FUNCTION_96();
  OUTLINED_FUNCTION_287();
  OUTLINED_FUNCTION_13_7();
}

{
  _QWORD *v0;
  char v1;
  _QWORD *Description;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int64_t v37;
  _QWORD *v38;
  char v39;
  uint64_t v40;
  ValueMetadata *v41;

  OUTLINED_FUNCTION_82_1();
  OUTLINED_FUNCTION_115_1();
  v41 = OUTLINED_FUNCTION_33();
  Description = v41[-1].Description;
  MEMORY[0x1E0C80A78](v41);
  OUTLINED_FUNCTION_8();
  v40 = v3;
  v4 = *v0;
  v39 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SQLDataType>);
  v5 = static _DictionaryStorage.resize(original:capacity:move:)();
  v6 = (_QWORD *)v5;
  if (*(_QWORD *)(v4 + 16))
  {
    v36 = v0;
    v7 = 1 << *(_BYTE *)(v4 + 32);
    v38 = (_QWORD *)(v4 + 64);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v4 + 64);
    v37 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 64;
    OUTLINED_FUNCTION_84_0();
    v11 = 0;
    if (!v9)
      goto LABEL_7;
    while (2)
    {
      OUTLINED_FUNCTION_175_0();
      v13 = v12 | (v11 << 6);
LABEL_19:
      v17 = *(_QWORD *)(v4 + 56);
      v18 = v4;
      v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
      v21 = *v19;
      v20 = v19[1];
      v22 = Description[9];
      v23 = v17 + v22 * v13;
      if ((v39 & 1) != 0)
      {
        ((void (*)(uint64_t, uint64_t, ValueMetadata *))Description[4])(v40, v23, v41);
      }
      else
      {
        ((void (*)(uint64_t, uint64_t, ValueMetadata *))Description[2])(v40, v23, v41);
        OUTLINED_FUNCTION_192_0();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._finalize()();
      OUTLINED_FUNCTION_174_0();
      if (((v26 << v25) & ~*(_QWORD *)(v10 + 8 * v24)) != 0)
      {
        OUTLINED_FUNCTION_62();
        goto LABEL_32;
      }
      OUTLINED_FUNCTION_61_3();
      do
      {
        OUTLINED_FUNCTION_257();
        if (v31 && (v28 & 1) != 0)
        {
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        if (v29 == v30)
          v29 = 0;
      }
      while (*(_QWORD *)(v10 + 8 * v29) == -1);
      OUTLINED_FUNCTION_58();
LABEL_32:
      *(_QWORD *)(v10 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      v32 = (_QWORD *)(v6[6] + 16 * v27);
      *v32 = v21;
      v32[1] = v20;
      ((void (*)(unint64_t, uint64_t, ValueMetadata *))Description[4])(v6[7] + v22 * v27, v40, v41);
      ++v6[2];
      v4 = v18;
      if (v9)
        continue;
      break;
    }
LABEL_7:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_41;
    if (v14 < v37)
    {
      v15 = v38[v14];
      ++v11;
      if (v15)
        goto LABEL_18;
      v11 = v14 + 1;
      if (v14 + 1 < v37)
      {
        v15 = v38[v11];
        if (v15)
          goto LABEL_18;
        v16 = v14 + 2;
        if (v16 < v37)
        {
          v15 = v38[v16];
          if (v15)
          {
            v11 = v16;
LABEL_18:
            v9 = (v15 - 1) & v15;
            v13 = __clz(__rbit64(v15)) + (v11 << 6);
            goto LABEL_19;
          }
          while (1)
          {
            v11 = v16 + 1;
            if (__OFADD__(v16, 1))
              break;
            if (v11 >= v37)
              goto LABEL_34;
            v15 = v38[v11];
            ++v16;
            if (v15)
              goto LABEL_18;
          }
LABEL_42:
          __break(1u);
          JUMPOUT(0x18D9405B0);
        }
      }
    }
LABEL_34:
    swift_release();
    v0 = v36;
    if ((v39 & 1) != 0)
    {
      v33 = 1 << *(_BYTE *)(v4 + 32);
      if (v33 >= 64)
      {
        v34 = OUTLINED_FUNCTION_207();
        specialized UnsafeMutablePointer.assign(repeating:count:)(v34, v35, v38);
      }
      else
      {
        *v38 = -1 << v33;
      }
      *(_QWORD *)(v4 + 16) = 0;
    }
  }
  swift_release();
  *v0 = v6;
  OUTLINED_FUNCTION_55();
}

uint64_t OUTLINED_FUNCTION_88()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 168);
}

void OUTLINED_FUNCTION_88_0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * (a1 / v3);
}

void OUTLINED_FUNCTION_88_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 432) = v1;
  *(_QWORD *)(v5 - 440) = v2;
  *(_QWORD *)(v5 - 448) = v3;
  *(_QWORD *)(v5 - 480) = v0;
  *(_QWORD *)(v5 - 488) = v4;
}

void OUTLINED_FUNCTION_90(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 200) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_89(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 192) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_89_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_40_0()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_40_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 104) = a3;
  *(_QWORD *)(v4 - 96) = v3 & 0xFFFFFFFFFFFFFFLL;
}

void OUTLINED_FUNCTION_40_2()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_40_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v0, v1, v3);
}

uint64_t OUTLINED_FUNCTION_109()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  return swift_retain();
}

void OUTLINED_FUNCTION_116_1(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  outlined init with copy of StorableValue(a1, *(_QWORD *)(a3 - 256), a2);
}

void OUTLINED_FUNCTION_143(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  outlined init with copy of Date?(v3, v4 - 152, a3);
}

uint64_t OUTLINED_FUNCTION_143_0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 216));
}

uint64_t OUTLINED_FUNCTION_143_1()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = a5[7] + 16 * result;
  *(_QWORD *)v5 = a3;
  *(_BYTE *)(v5 + 8) = a4 & 1;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  result = OUTLINED_FUNCTION_80_0(a1, a2, a3, a4, a5);
  *(_QWORD *)(v8 + 8 * result) = v7;
  v9 = (_QWORD *)(*(_QWORD *)(v6 + 56) + 16 * result);
  *v9 = v10;
  v9[1] = v11;
  v12 = *(_QWORD *)(v6 + 16);
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    *(_QWORD *)(v6 + 16) = v14;
  return result;
}

void OUTLINED_FUNCTION_242()
{
  Swift::UInt v0;

  Hasher._combine(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_210_0()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD, uint64_t);
  uint64_t v2;

  return v1(*(_QWORD *)(v2 - 344), v0);
}

void OUTLINED_FUNCTION_114_2()
{
  uint64_t v0;
  unint64_t v1;

  *(_QWORD *)(v0 + 8 * (v1 >> 6) + 64) |= 1 << v1;
}

void OUTLINED_FUNCTION_190(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of StorableValue(v2, a2);
}

_QWORD *initializeWithCopy for COUNT_STAR(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  ValueMetadata *v10;
  void (*v11)(char *, char *, ValueMetadata *);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SQLDataType();
  v11 = (void (*)(char *, char *, ValueMetadata *))*((_QWORD *)v10[-1].Description + 2);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t outlined init with take of Aggregation(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Aggregation>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

__n128 __swift_memcpy194_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

void protocol witness for Aggregation.applyMetadata(metadata:) in conformance COUNT_STAR(Swift::OpaquePointer a1)
{
  COUNT_STAR.applyMetadata(metadata:)(a1);
}

uint64_t BMPBAppLaunchEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 48;
          goto LABEL_47;
        case 2u:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 84) |= 4u;
          while (2)
          {
            v24 = *v3;
            v25 = *(_QWORD *)(a2 + v24);
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
              *(_QWORD *)(a2 + v24) = v26;
              v23 |= (unint64_t)(v27 & 0x7F) << v21;
              if (v27 < 0)
              {
                v21 += 7;
                v15 = v22++ >= 9;
                if (v15)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_51;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v23) = 0;
LABEL_51:
          *(_DWORD *)(a1 + 56) = v23;
          continue;
        case 3u:
          v28 = 0;
          v29 = 0;
          v30 = 0;
          *(_BYTE *)(a1 + 84) |= 8u;
          break;
        case 4u:
          *(_BYTE *)(a1 + 84) |= 1u;
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v37 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v37 = 0;
          }
          v41 = 8;
          goto LABEL_60;
        case 5u:
          *(_BYTE *)(a1 + 84) |= 2u;
          v38 = *v3;
          v39 = *(_QWORD *)(a2 + v38);
          if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v37 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v39);
            *(_QWORD *)(a2 + v38) = v39 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v37 = 0;
          }
          v41 = 16;
LABEL_60:
          *(_QWORD *)(a1 + v41) = v37;
          continue;
        case 6u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
          goto LABEL_47;
        case 7u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 64;
          goto LABEL_47;
        case 8u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 40;
          goto LABEL_47;
        case 9u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 72;
          goto LABEL_47;
        case 0xAu:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 32;
LABEL_47:
          v40 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v31 = *v3;
        v32 = *(_QWORD *)(a2 + v31);
        v33 = v32 + 1;
        if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v4))
          break;
        v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
        *(_QWORD *)(a2 + v31) = v33;
        v30 |= (unint64_t)(v34 & 0x7F) << v28;
        if ((v34 & 0x80) == 0)
          goto LABEL_53;
        v28 += 7;
        v15 = v29++ >= 9;
        if (v15)
        {
          v30 = 0;
          goto LABEL_55;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
      if (*(_BYTE *)(a2 + *v5))
        v30 = 0;
LABEL_55:
      *(_BYTE *)(a1 + 80) = v30 != 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> QueryPlannerMetadata.storeMetadata()()
{
  uint64_t v0;

  BookmarkCache.flush()();
  if (!v0)
  {
    specialized KeyedQueryPlannerMetadataCache.flush()();
    specialized KeyedQueryPlannerMetadataCache.flush()();
  }
}

void specialized KeyedQueryPlannerMetadataCache.flush()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  int64_t v108;
  _QWORD *rawValue;
  unint64_t v110;
  unint64_t i;
  int64_t v112;
  unint64_t v113;
  int64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  int isUniquelyReferenced_nonNull_native;
  char v120;
  unint64_t v121;
  uint64_t v122;
  _BOOL8 v123;
  uint64_t v124;
  char v125;
  unint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  _QWORD *v132;
  int v133;
  char v134;
  uint64_t v135;
  _BOOL8 v136;
  uint64_t v137;
  char v138;
  unint64_t v139;
  char v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (**v145)(char *, uint64_t, ValueMetadata *);
  char *v146;
  ValueMetadata *v147;
  uint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  Swift::String v156;
  Swift::String v157;
  Swift::String v158;
  uint64_t v159;
  uint64_t v160;
  void **v161;
  uint64_t v162;
  void *v163;
  Swift::String v164;
  Swift::String v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (**v174)(char *, uint64_t, ValueMetadata *);
  char *v175;
  ValueMetadata *v176;
  uint64_t v177;
  int64_t v178;
  int64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  Swift::String v183;
  Swift::String v184;
  uint64_t v185;
  void **v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  Swift::String v190;
  Swift::String v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  Swift::String v199;
  Swift::String v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void **v204;
  uint64_t v205;
  void *v206;
  Swift::String v207;
  Swift::String v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  void *v219;
  Swift::String v220;
  Swift::String v221;
  uint64_t v222;
  uint64_t PlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm;
  uint64_t v224;
  void *v225;
  void *v226;
  Swift::String v227;
  Swift::String v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void (**v234)(char *, uint64_t, ValueMetadata *);
  char *v235;
  ValueMetadata *v236;
  uint64_t v237;
  void (*v238)(void);
  void (*v239)(void);
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  void *v244;
  uint64_t v245;
  void *v246;
  void *v247;
  Swift::String v248;
  Swift::String v249;
  Swift::String v250;
  Swift::String v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  Swift::String *v256;
  uint64_t v257;
  Swift::String v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  void *v268;
  void *v269;
  Swift::String v270;
  Swift::String v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  void *v279;
  void *v280;
  Swift::String v281;
  Swift::String v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  int64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t k;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t m;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  _QWORD *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  _QWORD *v325;
  char *v326;
  ValueMetadata *v327;
  void (*v328)(char *, char *, ValueMetadata *);
  _QWORD *v329;
  char *v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  char v335;
  unint64_t v336;
  char v337;
  uint64_t v338;
  _BOOL8 v339;
  Swift::Int v340;
  unint64_t v341;
  char v342;
  unint64_t v343;
  char v344;
  int64_t v345;
  unint64_t v346;
  uint64_t v347;
  _QWORD *v348;
  _QWORD *v349;
  uint64_t v350;
  uint64_t v351;
  void (*v352)(void);
  uint64_t v353;
  uint64_t v354;
  int64_t *v355;
  uint64_t v356;
  uint64_t v357;
  BOOL v358;
  int64_t *v359;
  int64_t *v360;
  int64_t *v361;
  unint64_t v362;
  uint64_t v363;
  int64_t *v364;
  uint64_t v365;
  int64_t *v366;
  uint64_t v367;
  int64_t v368;
  int64_t v369;
  int64_t *v370;
  int64_t v371;
  uint64_t v372;
  ValueMetadata *v373;
  void *v374;
  int64_t *v375;
  uint64_t v376;
  int64_t *v377;
  void (*v378)(void);
  unint64_t v379;
  char v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  void (*v384)(void);
  uint64_t v385;
  _QWORD *v386;
  char v387;
  uint64_t v388;
  unint64_t v389;
  char v390;
  uint64_t v391;
  _BOOL8 v392;
  Swift::Int v393;
  unint64_t v394;
  char v395;
  Swift::Bool v396;
  unint64_t v397;
  char v398;
  int64_t v399;
  unint64_t v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  void (*v406)(void);
  void *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  char v415;
  unint64_t v416;
  int64_t v417;
  uint64_t *v418;
  uint64_t v419;
  int v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  char v426;
  Swift::String v427;
  uint64_t v428;
  void (*v429)(uint64_t, ValueMetadata *);
  int64_t *v430;
  int64_t *v431;
  int64_t *v432;
  char *v433;
  int64_t v434;
  uint64_t v435;
  uint64_t v436;
  void *v437;
  void *v438;
  Swift::String v439;
  void *v440;
  uint64_t v441;
  int64_t v442;
  _QWORD *v443;
  _QWORD *v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  int64_t v448;
  uint64_t v449;
  unint64_t j;
  int64_t v451;
  unint64_t v452;
  int64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  int64_t v460;
  uint64_t v461;
  int64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t *v469;
  uint64_t v470;
  int64_t *v471;
  uint64_t v472;
  int64_t v473;
  uint64_t v474;
  uint64_t v475;
  char *v476;
  int64_t *v477;
  char *v478;
  ValueMetadata *v479;
  void (*v480)(char *, char *, ValueMetadata *);
  int64_t *v481;
  char *v482;
  int64_t *v483;
  uint64_t v484;
  char v485;
  unint64_t v486;
  char v487;
  uint64_t v488;
  _BOOL8 v489;
  Swift::Int v490;
  unint64_t v491;
  char v492;
  unint64_t v493;
  char v494;
  uint64_t v495;
  int64_t *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  BOOL v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  uint64_t v515;
  int64_t *v516;
  uint64_t v517;
  uint64_t v518;
  int64_t *v519;
  char *v520;
  int64_t v521;
  int64_t v522;
  int64_t v523;
  int64_t v524;
  ValueMetadata *v525;
  void (**v526)(char *, uint64_t, ValueMetadata *);
  int64_t *v527;
  char *v528;
  char *v529;
  void (**v530)(char *, uint64_t, ValueMetadata *);
  void (*v531)(char *, uint64_t, ValueMetadata *);
  uint64_t v532;
  unint64_t v533;
  int64_t v534;
  _QWORD *v535;
  char v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  void (*v540)(void);
  uint64_t v541;
  char v542;
  int64_t v543;
  unint64_t v544;
  char v545;
  uint64_t v546;
  _BOOL8 v547;
  Swift::Int v548;
  unint64_t v549;
  char v550;
  Swift::Bool v551;
  unint64_t v552;
  char v553;
  unint64_t v554;
  uint64_t v555;
  int64_t *v556;
  uint64_t v557;
  uint64_t v558;
  void *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  unint64_t v566;
  char v567;
  unint64_t v568;
  uint64_t *v569;
  uint64_t v570;
  int v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  char v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  unint64_t v603;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  Swift::String v609;
  uint64_t v610;
  void (*v611)(char *, uint64_t, ValueMetadata *);
  int64_t *v612;
  int64_t *v613;
  int64_t *v614;
  char *v615;
  int64_t v616;
  _QWORD *v617;
  uint64_t v618;
  uint64_t v619;
  void *v620;
  void *v621;
  Swift::String v622;
  Swift::String v623;
  uint64_t v624;
  void *v625;
  void *v626;
  void *v627;
  Swift::OpaquePointer v628;
  Swift::String v629;
  unint64_t v630;
  uint64_t v631;
  uint64_t v632;
  _QWORD *v633;
  uint64_t v634;
  _QWORD *v635;
  uint64_t v636;
  uint64_t *v637;
  uint64_t v638;
  uint64_t *v639;
  uint64_t v640;
  int64_t v641;
  _QWORD *v642;
  uint64_t v643;
  uint64_t *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  int64_t v648;
  uint64_t v649;
  void *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  char *v654;
  Swift::String *v655;
  uint64_t v656;
  _QWORD *v657;
  int *v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  char *v662;
  uint64_t v663;
  char *v664;
  uint64_t v665;
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  int64_t *v669;
  uint64_t v670;
  uint64_t v671;
  void (**Description)(char *, uint64_t, ValueMetadata *);
  ValueMetadata *v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  char *v679;
  _QWORD *v680;
  uint64_t v681;
  uint64_t v682;
  int64_t *v683;
  int64_t *v684;
  uint64_t v685;
  int64_t v686;
  char *v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  char *v692;
  uint64_t v693;
  int64_t *v694;
  uint64_t v695;
  int64_t *v696;
  uint64_t v697;
  _QWORD *v698;
  uint64_t *v699;
  char *v700;
  char *v701;
  uint64_t v702;
  uint64_t v703;
  int64_t *v704;
  _QWORD *v705;
  char *v706;
  uint64_t v707;
  int64_t *v708;
  uint64_t v709;
  uint64_t v710;
  char *v711;
  uint64_t v712;
  int64_t *v713;
  uint64_t v714;
  char *v715;
  int64_t *v716;
  char *v717;
  uint64_t v718;
  uint64_t v719;
  int64_t *v720;
  _QWORD *v721;
  uint64_t v722;
  uint64_t v723;
  int64_t *v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  void (*v729)(void);
  int64_t v730;
  uint64_t v731;
  unint64_t v732;
  Swift::OpaquePointer v733;
  unint64_t v734;
  uint64_t v735;

  v1 = v0;
  v714 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
  v671 = *(_QWORD *)(v714 - 8);
  v2 = MEMORY[0x1E0C80A78](v714);
  v683 = (uint64_t *)((char *)&v640 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = MEMORY[0x1E0C80A78](v2);
  v704 = (uint64_t *)((char *)&v640 - v5);
  v6 = MEMORY[0x1E0C80A78](v4);
  v684 = (uint64_t *)((char *)&v640 - v7);
  v8 = MEMORY[0x1E0C80A78](v6);
  v669 = (uint64_t *)((char *)&v640 - v9);
  v10 = MEMORY[0x1E0C80A78](v8);
  v694 = (uint64_t *)((char *)&v640 - v11);
  v12 = MEMORY[0x1E0C80A78](v10);
  v720 = (uint64_t *)((char *)&v640 - v13);
  MEMORY[0x1E0C80A78](v12);
  v696 = (uint64_t *)((char *)&v640 - v14);
  v15 = (void (*)(void))type metadata accessor for StorableValue(0);
  v728 = *((_QWORD *)v15 - 1);
  v729 = v15;
  v16 = MEMORY[0x1E0C80A78](v15);
  v703 = (uint64_t)&v640 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v702 = (uint64_t)&v640 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v722 = (uint64_t)&v640 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v674 = (uint64_t)&v640 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v676 = (uint64_t)&v640 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v675 = (uint64_t)&v640 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v719 = (uint64_t)&v640 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v718 = (uint64_t)&v640 - v31;
  MEMORY[0x1E0C80A78](v30);
  v725 = (uint64_t)&v640 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  v34 = MEMORY[0x1E0C80A78](v33);
  v682 = (uint64_t)&v640 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&v640 - v37;
  v39 = MEMORY[0x1E0C80A78](v36);
  v697 = (uint64_t)&v640 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v693 = (uint64_t)&v640 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v695 = (uint64_t)&v640 - v44;
  MEMORY[0x1E0C80A78](v43);
  v712 = (uint64_t)&v640 - v45;
  v727 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: (columnName: String, dataType: SQLDataType)));
  MEMORY[0x1E0C80A78](v727);
  v706 = (char *)&v640 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v723 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
  v707 = *(_QWORD *)(v723 - 8);
  v47 = MEMORY[0x1E0C80A78](v723);
  v49 = (Swift::String *)((char *)&v640 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  v50 = MEMORY[0x1E0C80A78](v47);
  v52 = (char *)&v640 - v51;
  v53 = MEMORY[0x1E0C80A78](v50);
  v698 = (uint64_t *)((char *)&v640 - v54);
  v55 = MEMORY[0x1E0C80A78](v53);
  v721 = (uint64_t *)((char *)&v640 - v56);
  v57 = MEMORY[0x1E0C80A78](v55);
  v700 = (char *)&v640 - v58;
  v59 = MEMORY[0x1E0C80A78](v57);
  v681 = (uint64_t)&v640 - v60;
  v61 = MEMORY[0x1E0C80A78](v59);
  v713 = (uint64_t *)((char *)&v640 - v62);
  v63 = MEMORY[0x1E0C80A78](v61);
  v724 = (uint64_t *)((char *)&v640 - v64);
  v65 = MEMORY[0x1E0C80A78](v63);
  v717 = (char *)&v640 - v66;
  MEMORY[0x1E0C80A78](v65);
  v692 = (char *)&v640 - v67;
  v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: (columnName: String, dataType: SQLDataType))?);
  v69 = MEMORY[0x1E0C80A78](v68);
  v701 = (char *)&v640 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = MEMORY[0x1E0C80A78](v69);
  v699 = (uint64_t *)((char *)&v640 - v72);
  v73 = MEMORY[0x1E0C80A78](v71);
  v716 = (uint64_t *)((char *)&v640 - v74);
  MEMORY[0x1E0C80A78](v73);
  v715 = (char *)&v640 - v75;
  v673 = type metadata accessor for MaterializedView();
  Description = (void (**)(char *, uint64_t, ValueMetadata *))v673[-1].Description;
  v76 = MEMORY[0x1E0C80A78](v673);
  v662 = (char *)&v640 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = MEMORY[0x1E0C80A78](v76);
  v664 = (char *)&v640 - v79;
  MEMORY[0x1E0C80A78](v78);
  v711 = (char *)&v640 - v80;
  v81 = (int *)type metadata accessor for KeyedAggregationMetadataCache(0);
  v82 = MEMORY[0x1E0C80A78](v81);
  v661 = (uint64_t)&v640 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = MEMORY[0x1E0C80A78](v82);
  v660 = (uint64_t)&v640 - v85;
  v86 = MEMORY[0x1E0C80A78](v84);
  v665 = (uint64_t)&v640 - v87;
  v88 = MEMORY[0x1E0C80A78](v86);
  v663 = (uint64_t)&v640 - v89;
  v90 = MEMORY[0x1E0C80A78](v88);
  v670 = (uint64_t)&v640 - v91;
  v92 = MEMORY[0x1E0C80A78](v90);
  v710 = (uint64_t)&v640 - v93;
  v94 = MEMORY[0x1E0C80A78](v92);
  v96 = (char *)&v640 - v95;
  MEMORY[0x1E0C80A78](v94);
  v98 = (char *)&v640 - v97;
  outlined init with copy of StorableValue(v1, (uint64_t)&v640 - v97, type metadata accessor for KeyedAggregationMetadataCache);
  v99 = *(_QWORD *)&v98[v81[12]];
  swift_bridgeObjectRetain();
  outlined destroy of StorableValue((uint64_t)v98, type metadata accessor for KeyedAggregationMetadataCache);
  if (!v99)
    return;
  v100 = (_QWORD *)(v1 + v81[7]);
  if (!*(_QWORD *)(*v100 + 16))
  {
    swift_bridgeObjectRelease();
    return;
  }
  v654 = v52;
  v655 = v49;
  v101 = v100;
  specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)();
  v666 = v102;
  swift_bridgeObjectRelease();
  v667 = v1;
  outlined init with copy of StorableValue(v1, (uint64_t)v96, type metadata accessor for KeyedAggregationMetadataCache);
  v658 = v81;
  v677 = *(_QWORD *)&v96[v81[13]];
  swift_bridgeObjectRetain();
  outlined destroy of StorableValue((uint64_t)v96, type metadata accessor for KeyedAggregationMetadataCache);
  v657 = v101;
  v103 = *v101;
  v104 = *(_QWORD *)(v103 + 64);
  v726 = v103 + 64;
  v105 = 1 << *(_BYTE *)(v103 + 32);
  v106 = -1;
  if (v105 < 64)
    v106 = ~(-1 << v105);
  v107 = v106 & v104;
  v730 = (unint64_t)(v105 + 63) >> 6;
  swift_bridgeObjectRetain();
  v108 = 0;
  rawValue = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v680 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v679 = v38;
  if (!v107)
    goto LABEL_7;
LABEL_6:
  v110 = __clz(__rbit64(v107));
  v107 &= v107 - 1;
  for (i = v110 | (v108 << 6); ; i = __clz(__rbit64(v113)) + (v108 << 6))
  {
    v115 = *(_QWORD *)(*(_QWORD *)(v103 + 48) + 8 * i);
    v116 = *(_QWORD *)(v103 + 56) + 16 * i;
    v117 = *(_QWORD *)v116;
    v118 = *(_BYTE *)(v116 + 8);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    if ((v118 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v733._rawValue = rawValue;
      v121 = specialized __RawDictionaryStorage.find<A>(_:)(v115);
      v122 = rawValue[2];
      v123 = (v120 & 1) == 0;
      v124 = v122 + v123;
      if (__OFADD__(v122, v123))
      {
        __break(1u);
LABEL_300:
        v634 = v124;
        swift_bridgeObjectRelease();
        type metadata accessor for MetadataSQLError(0);
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
        swift_allocError();
        *v635 = v653;
        v635[1] = v634;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        goto LABEL_285;
      }
      v125 = v120;
      if (rawValue[3] >= v124)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], [[String : StorableValue]]>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v124, isUniquelyReferenced_nonNull_native);
        v126 = specialized __RawDictionaryStorage.find<A>(_:)(v115);
        if ((v125 & 1) != (v127 & 1))
          goto LABEL_349;
        v121 = v126;
      }
      rawValue = v733._rawValue;
      if ((v125 & 1) != 0)
      {
        v128 = *((_QWORD *)v733._rawValue + 7);
LABEL_32:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v128 + 8 * v121) = v117;
        goto LABEL_36;
      }
      *((_QWORD *)v733._rawValue + (v121 >> 6) + 8) |= 1 << v121;
      *(_QWORD *)(rawValue[6] + 8 * v121) = v115;
      *(_QWORD *)(rawValue[7] + 8 * v121) = v117;
      v129 = rawValue[2];
      v130 = __OFADD__(v129, 1);
      v131 = v129 + 1;
      if (v130)
      {
        __break(1u);
LABEL_303:
        __break(1u);
        goto LABEL_304;
      }
      rawValue[2] = v131;
      goto LABEL_35;
    }
    v705 = rawValue;
    v132 = v680;
    v133 = swift_isUniquelyReferenced_nonNull_native();
    v733._rawValue = v132;
    v121 = specialized __RawDictionaryStorage.find<A>(_:)(v115);
    v135 = v132[2];
    v136 = (v134 & 1) == 0;
    v137 = v135 + v136;
    if (__OFADD__(v135, v136))
      goto LABEL_325;
    v138 = v134;
    if (v132[3] >= v137)
    {
      rawValue = v705;
      if ((v133 & 1) != 0)
        goto LABEL_44;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], [[String : StorableValue]]>);
      _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v137, v133);
      v139 = specialized __RawDictionaryStorage.find<A>(_:)(v115);
      if ((v138 & 1) != (v140 & 1))
        goto LABEL_349;
      v121 = v139;
    }
    rawValue = v705;
LABEL_44:
    v141 = v733._rawValue;
    v680 = v733._rawValue;
    if ((v138 & 1) != 0)
    {
      v128 = *((_QWORD *)v733._rawValue + 7);
      goto LABEL_32;
    }
    *((_QWORD *)v733._rawValue + (v121 >> 6) + 8) |= 1 << v121;
    *(_QWORD *)(v141[6] + 8 * v121) = v115;
    *(_QWORD *)(v141[7] + 8 * v121) = v117;
    v142 = v141[2];
    v130 = __OFADD__(v142, 1);
    v143 = v142 + 1;
    if (v130)
      goto LABEL_331;
    v141[2] = v143;
LABEL_35:
    swift_bridgeObjectRetain();
LABEL_36:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v107)
      goto LABEL_6;
LABEL_7:
    v112 = v108 + 1;
    if (__OFADD__(v108, 1))
      goto LABEL_303;
    if (v112 >= v730)
      break;
    v113 = *(_QWORD *)(v726 + 8 * v112);
    ++v108;
    if (!v113)
    {
      v108 = v112 + 1;
      if (v112 + 1 >= v730)
        break;
      v113 = *(_QWORD *)(v726 + 8 * v108);
      if (!v113)
      {
        v108 = v112 + 2;
        if (v112 + 2 >= v730)
          break;
        v113 = *(_QWORD *)(v726 + 8 * v108);
        if (!v113)
        {
          v108 = v112 + 3;
          if (v112 + 3 >= v730)
            break;
          v113 = *(_QWORD *)(v726 + 8 * v108);
          if (!v113)
          {
            v114 = v112 + 4;
            if (v114 >= v730)
              break;
            v113 = *(_QWORD *)(v726 + 8 * v114);
            if (!v113)
            {
              while (1)
              {
                v108 = v114 + 1;
                if (__OFADD__(v114, 1))
                  break;
                if (v108 >= v730)
                  goto LABEL_49;
                v113 = *(_QWORD *)(v726 + 8 * v108);
                ++v114;
                if (v113)
                  goto LABEL_22;
              }
LABEL_322:
              __break(1u);
LABEL_323:
              __break(1u);
LABEL_324:
              __break(1u);
LABEL_325:
              __break(1u);
LABEL_326:
              __break(1u);
LABEL_327:
              __break(1u);
LABEL_328:
              __break(1u);
LABEL_329:
              __break(1u);
LABEL_330:
              __break(1u);
LABEL_331:
              __break(1u);
LABEL_332:
              __break(1u);
LABEL_333:
              __break(1u);
LABEL_334:
              __break(1u);
LABEL_335:
              __break(1u);
LABEL_336:
              __break(1u);
LABEL_337:
              __break(1u);
              goto LABEL_338;
            }
            v108 = v114;
          }
        }
      }
    }
LABEL_22:
    v107 = (v113 - 1) & v113;
  }
LABEL_49:
  swift_release();
  if (!rawValue[2])
    goto LABEL_58;
  v705 = rawValue;
  v144 = v710;
  outlined init with copy of StorableValue(v667, v710, type metadata accessor for KeyedAggregationMetadataCache);
  v145 = Description;
  v146 = v711;
  v147 = v673;
  Description[2](v711, v144, v673);
  outlined destroy of StorableValue(v144, type metadata accessor for KeyedAggregationMetadataCache);
  v148 = MaterializedView.name.getter();
  v150 = v149;
  ((void (*)(char *, ValueMetadata *))v145[1])(v146, v147);
  specialized _arrayForceCast<A, B>(_:)();
  v152 = v151;
  static KeyedAggregationMetadataCache.columnNames(groupBySchema:payloadSchema:)();
  v154 = v153;
  v691 = v152;
  v653 = *(_QWORD *)(v152 + 16);
  v668 = v153;
  if (v653)
  {
    v733._rawValue = (void *)static String._createEmpty(withInitialCapacity:)(37);
    v734 = v155;
    v156._countAndFlagsBits = 0x20455441445055;
    v156._object = (void *)0xE700000000000000;
    String.append(_:)(v156);
    v157._countAndFlagsBits = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v148, v150, 36, 0xD000000000000022, (void *)0x800000018DCC3EB0);
    String.append(_:)(v157);
    swift_bridgeObjectRelease();
    v158._countAndFlagsBits = 0x2020200A5445530ALL;
    v158._object = (void *)0xE900000000000020;
    String.append(_:)(v158);
    v159 = specialized Array.count.getter(v154);
    if (v159)
    {
      v160 = v159;
      v735 = specialized ContiguousArray.init()();
      specialized ContiguousArray.reserveCapacity(_:)(v160);
      if (v160 < 0)
        goto LABEL_339;
      v161 = (void **)(v154 + 40);
      do
      {
        v162 = (uint64_t)*(v161 - 1);
        v163 = *v161;
        swift_bridgeObjectRetain();
        static String._createEmpty(withInitialCapacity:)(8);
        swift_bridgeObjectRelease();
        v731 = 34;
        v732 = 0xE100000000000000;
        v164._countAndFlagsBits = v162;
        v164._object = v163;
        String.append(_:)(v164);
        v165._countAndFlagsBits = 0x3F203D2022;
        v165._object = (void *)0xE500000000000000;
        String.append(_:)(v165);
        v166 = String.init(stringInterpolation:)();
        v168 = v167;
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v169 = *(_QWORD *)(v735 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v169);
        v170 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v169, v166, v168);
        destructiveProjectEnumData for StorableValue(v170, v171);
        v161 += 2;
        --v160;
      }
      while (v160);
      v172 = v735;
    }
    else
    {
      specialized static Array._allocateUninitialized(_:)(0);
      v172 = v216;
    }
    v731 = v172;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v217 = BidirectionalCollection<>.joined(separator:)();
    v219 = v218;
    swift_bridgeObjectRelease();
    v220._countAndFlagsBits = v217;
    v220._object = v219;
    String.append(_:)(v220);
    swift_bridgeObjectRelease();
    v221._countAndFlagsBits = 0x282045524548570ALL;
    v221._object = (void *)0xED0000202020200ALL;
    String.append(_:)(v221);
    v222 = v678;
    PlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_14BiomeSQLParser11SQLDataTypeOtG_SSsAE_pTg506_sSS14d11SQLParser11fg5OSSs5c186_pIggnozo_SS_ACtSSsAD_pIegnrzr_TR04_s12a146Streams30KeyedQueryPlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm(v691, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
    v678 = v222;
    if (v222)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_298:
      swift_bridgeObjectRelease();
      return;
    }
    v731 = PlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm;
    v224 = BidirectionalCollection<>.joined(separator:)();
    v226 = v225;
    swift_bridgeObjectRelease();
    v227._countAndFlagsBits = v224;
    v227._object = v226;
    String.append(_:)(v227);
    swift_bridgeObjectRelease();
    v228._countAndFlagsBits = 10506;
    v228._object = (void *)0xE200000000000000;
    String.append(_:)(v228);
    v643 = String.init(stringInterpolation:)();
    v650 = v229;
    v202 = v727;
  }
  else
  {
    static String._createEmpty(withInitialCapacity:)(20);
    swift_bridgeObjectRelease();
    v733._rawValue = (void *)0x20455441445055;
    v734 = 0xE700000000000000;
    v199._countAndFlagsBits = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v148, v150, 36, 0xD000000000000022, (void *)0x800000018DCC3EB0);
    String.append(_:)(v199);
    swift_bridgeObjectRelease();
    v200._countAndFlagsBits = 0x2020200A5445530ALL;
    v200._object = (void *)0xE900000000000020;
    String.append(_:)(v200);
    v201 = specialized Array.count.getter(v154);
    v202 = v727;
    if (v201)
    {
      v203 = v201;
      v735 = specialized ContiguousArray.init()();
      specialized ContiguousArray.reserveCapacity(_:)(v203);
      if (v203 < 0)
        goto LABEL_343;
      v204 = (void **)(v668 + 40);
      do
      {
        v205 = (uint64_t)*(v204 - 1);
        v206 = *v204;
        swift_bridgeObjectRetain();
        static String._createEmpty(withInitialCapacity:)(8);
        swift_bridgeObjectRelease();
        v731 = 34;
        v732 = 0xE100000000000000;
        v207._countAndFlagsBits = v205;
        v207._object = v206;
        String.append(_:)(v207);
        v208._countAndFlagsBits = 0x3F203D2022;
        v208._object = (void *)0xE500000000000000;
        String.append(_:)(v208);
        v209 = String.init(stringInterpolation:)();
        v211 = v210;
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v212 = *(_QWORD *)(v735 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v212);
        v213 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v212, v209, v211);
        destructiveProjectEnumData for StorableValue(v213, v214);
        v204 += 2;
        --v203;
      }
      while (v203);
      v215 = v735;
      v202 = v727;
    }
    else
    {
      specialized static Array._allocateUninitialized(_:)(0);
      v215 = v435;
    }
    v731 = v215;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v436 = BidirectionalCollection<>.joined(separator:)();
    v438 = v437;
    swift_bridgeObjectRelease();
    v439._countAndFlagsBits = v436;
    v439._object = v438;
    String.append(_:)(v439);
    swift_bridgeObjectRelease();
    v643 = String.init(stringInterpolation:)();
    v650 = v440;
  }
  v441 = v677;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v442 = 0;
  v443 = v705;
  v444 = v705 + 8;
  v445 = 1 << *((_BYTE *)v705 + 32);
  v446 = -1;
  if (v445 < 64)
    v446 = ~(-1 << v445);
  v447 = v446 & v705[8];
  v448 = (unint64_t)(v445 + 63) >> 6;
  v656 = v441 + 32;
  v644 = (uint64_t *)(v668 + 56);
  v449 = (uint64_t)v717;
  v642 = v705 + 8;
  v641 = v448;
  if (v447)
    goto LABEL_178;
LABEL_179:
  v130 = __OFADD__(v442, 1);
  v451 = v442 + 1;
  if (v130)
    goto LABEL_340;
  if (v451 >= v448)
    goto LABEL_304;
  v452 = v444[v451];
  if (v452)
  {
LABEL_191:
    v647 = (v452 - 1) & v452;
    v648 = v451;
    for (j = __clz(__rbit64(v452)) + (v451 << 6); ; j = __clz(__rbit64(v447)) | (v442 << 6))
    {
      v454 = *(_QWORD *)(v443[6] + 8 * j);
      v455 = *(_QWORD *)(v443[7] + 8 * j);
      v456 = v670;
      outlined init with copy of StorableValue(v667, v670, type metadata accessor for KeyedAggregationMetadataCache);
      v457 = *(_QWORD *)(v456 + v658[11]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v652 = v457;
      swift_retain();
      outlined destroy of StorableValue(v456, type metadata accessor for KeyedAggregationMetadataCache);
      v659 = v455;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      specialized static Array._allocateUninitialized(_:)(0);
      v458 = Dictionary.init(dictionaryLiteral:)();
      v708 = (int64_t *)v454;
      v124 = specialized Array.count.getter(v454);
      if (v124 != v653)
        goto LABEL_300;
      v459 = specialized Array.count.getter(v691);
      swift_bridgeObjectRetain();
      v460 = 0;
      v726 = v459;
      while (1)
      {
        if (v460 == v459)
        {
          v461 = 1;
          v462 = v459;
          v463 = (uint64_t)v716;
        }
        else
        {
          v464 = v691;
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v460, 1, v691);
          outlined init with copy of Date?(v464+ ((*(unsigned __int8 *)(v707 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v707 + 80))+ *(_QWORD *)(v707 + 72) * v460, v449, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
          v462 = v460 + 1;
          if (__OFADD__(v460, 1))
            goto LABEL_311;
          v465 = v449;
          v466 = (uint64_t)v692;
          outlined init with take of UUID?(v465, (uint64_t)v692, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
          v467 = (uint64_t)&v706[*(int *)(v202 + 48)];
          outlined init with take of UUID?(v466, v467, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
          v463 = (uint64_t)v716;
          v468 = (uint64_t)v716 + *(int *)(v202 + 48);
          *v716 = v460;
          outlined init with take of UUID?(v467, v468, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
          v461 = 0;
        }
        __swift_storeEnumTagSinglePayload(v463, v461, 1, v202);
        v469 = (uint64_t *)v715;
        outlined init with take of UUID?(v463, (uint64_t)v715, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: (columnName: String, dataType: SQLDataType))?);
        if (__swift_getEnumTagSinglePayload((uint64_t)v469, 1, v202) == 1)
          break;
        v730 = v462;
        v470 = *v469;
        v471 = (uint64_t *)((char *)v469 + *(int *)(v202 + 48));
        v473 = *v471;
        v472 = v471[1];
        v474 = v723;
        v475 = *(int *)(v723 + 48);
        v476 = (char *)v471 + v475;
        v477 = v713;
        v478 = (char *)v713 + v475;
        *v713 = v473;
        v477[1] = v472;
        v479 = type metadata accessor for SQLDataType();
        v480 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v479[-1].Description + 4);
        v480(v478, v476, v479);
        v481 = v724;
        v482 = (char *)v724 + *(int *)(v474 + 48);
        *v724 = v473;
        v481[1] = v472;
        v480(v482, v478, v479);
        v483 = v708;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v470, 1, v708);
        v484 = *(_QWORD *)(v728 + 72);
        outlined init with copy of StorableValue((uint64_t)v483+ ((*(unsigned __int8 *)(v728 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v728 + 80))+ v484 * v470, v725, type metadata accessor for StorableValue);
        swift_bridgeObjectRetain();
        v485 = swift_isUniquelyReferenced_nonNull_native();
        v733._rawValue = (void *)v458;
        v486 = specialized __RawDictionaryStorage.find<A>(_:)();
        v488 = *(_QWORD *)(v458 + 16);
        v489 = (v487 & 1) == 0;
        v490 = v488 + v489;
        if (__OFADD__(v488, v489))
        {
          __break(1u);
LABEL_307:
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_73:
          swift_bridgeObjectRelease();
          if (specialized Array.count.getter(v666) >= 1)
          {
            v230 = v667;
            v231 = v660;
            outlined init with copy of StorableValue(v667, v660, type metadata accessor for KeyedAggregationMetadataCache);
            v232 = *(_QWORD *)(v231 + v658[11]);
            swift_retain();
            outlined destroy of StorableValue(v231, type metadata accessor for KeyedAggregationMetadataCache);
            v233 = v661;
            outlined init with copy of StorableValue(v230, v661, type metadata accessor for KeyedAggregationMetadataCache);
            v234 = Description;
            v235 = v662;
            v236 = v673;
            Description[2](v662, v233, v673);
            outlined destroy of StorableValue(v233, type metadata accessor for KeyedAggregationMetadataCache);
            v237 = MaterializedView.name.getter();
            v239 = v238;
            ((void (*)(char *, ValueMetadata *))v234[1])(v235, v236);
            specialized _arrayForceCast<A, B>(_:)();
            v241 = v240;
            swift_bridgeObjectRelease();
            v729 = v239;
            v242 = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v237, (int)v239, 36, 0xD000000000000022, (void *)0x800000018DCC3EB0);
            v244 = v243;
            v245 = MEMORY[0x193FEC5C4]();
            v247 = v246;
            static String._createEmpty(withInitialCapacity:)(49);
            swift_bridgeObjectRelease();
            v733._rawValue = (void *)0xD000000000000022;
            v734 = 0x800000018DCC3EE0;
            v248._countAndFlagsBits = v245;
            v248._object = v247;
            String.append(_:)(v248);
            swift_bridgeObjectRelease();
            v249._countAndFlagsBits = 542002976;
            v249._object = (void *)0xE400000000000000;
            String.append(_:)(v249);
            v250._countAndFlagsBits = v242;
            v250._object = v244;
            String.append(_:)(v250);
            swift_bridgeObjectRelease();
            v251._countAndFlagsBits = 2107424;
            v251._object = (void *)0xE300000000000000;
            String.append(_:)(v251);
            v252 = specialized Array.count.getter(v241);
            if (v252)
            {
              v253 = v252;
              v728 = v232;
              v735 = specialized ContiguousArray.init()();
              specialized ContiguousArray.reserveCapacity(_:)(v253);
              if (v253 < 0)
                goto LABEL_346;
              v254 = *(unsigned __int8 *)(v707 + 80);
              v727 = v241;
              v255 = v241 + ((v254 + 32) & ~v254);
              v730 = *(_QWORD *)(v707 + 72);
              v256 = v655;
              v257 = (uint64_t)v654;
              do
              {
                outlined init with copy of Date?(v255, v257, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
                outlined init with take of UUID?(v257, (uint64_t)v256, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
                static String._createEmpty(withInitialCapacity:)(4);
                swift_bridgeObjectRelease();
                v731 = 34;
                v732 = 0xE100000000000000;
                String.append(_:)(*v256);
                v258._countAndFlagsBits = 34;
                v258._object = (void *)0xE100000000000000;
                String.append(_:)(v258);
                v259 = String.init(stringInterpolation:)();
                v261 = v260;
                outlined destroy of UUID?((uint64_t)v256, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                v262 = *(_QWORD *)(v735 + 16);
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v262);
                v263 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v262, v259, v261);
                destructiveProjectEnumData for StorableValue(v263, v264);
                v255 += v730;
                --v253;
              }
              while (v253);
              v265 = v735;
            }
            else
            {
              specialized static Array._allocateUninitialized(_:)(0);
              v265 = v618;
            }
            v731 = v265;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
            lazy protocol witness table accessor for type [String] and conformance [A]();
            v619 = BidirectionalCollection<>.joined(separator:)();
            v621 = v620;
            swift_bridgeObjectRelease();
            v622._countAndFlagsBits = v619;
            v622._object = v621;
            String.append(_:)(v622);
            swift_bridgeObjectRelease();
            v623._countAndFlagsBits = 10528;
            v623._object = (void *)0xE200000000000000;
            String.append(_:)(v623);
            v624 = String.init(stringInterpolation:)();
            v626 = v625;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            specialized static Array._allocateUninitialized(_:)(0);
            v628._rawValue = v627;
            v629._countAndFlagsBits = v624;
            v629._object = v626;
            v630 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v629, v628);
            if (v631)
            {
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_298;
            }
            v666 = v630;
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          v632 = v658[14];
          if (*(_BYTE *)(v667 + v632) == 1)
          {
            if (*(_QWORD *)(*v657 + 16))
              *(_BYTE *)(v667 + v632) = 0;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[StorableValue] : (value: [[String : StorableValue]], event: CacheEvent)]._Variant);
          Dictionary._Variant.removeAll(keepingCapacity:)(1);
          goto LABEL_298;
        }
        v491 = v486;
        v492 = v487;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v485, v490))
        {
          v493 = specialized __RawDictionaryStorage.find<A>(_:)();
          if ((v492 & 1) != (v494 & 1))
            goto LABEL_350;
          v491 = v493;
        }
        v458 = (uint64_t)v733._rawValue;
        if ((v492 & 1) != 0)
        {
          v495 = v712;
          outlined init with take of StorableValue(*((_QWORD *)v733._rawValue + 7) + v484 * v491, v712, type metadata accessor for StorableValue);
          outlined init with take of StorableValue(v725, *(_QWORD *)(v458 + 56) + v484 * v491, type metadata accessor for StorableValue);
          __swift_storeEnumTagSinglePayload(v495, 0, 1, (uint64_t)v729);
        }
        else
        {
          *((_QWORD *)v733._rawValue + (v491 >> 6) + 8) |= 1 << v491;
          v496 = (int64_t *)(*(_QWORD *)(v458 + 48) + 16 * v491);
          *v496 = v473;
          v496[1] = v472;
          outlined init with take of StorableValue(v725, *(_QWORD *)(v458 + 56) + v484 * v491, type metadata accessor for StorableValue);
          v497 = *(_QWORD *)(v458 + 16);
          v130 = __OFADD__(v497, 1);
          v498 = v497 + 1;
          if (v130)
            goto LABEL_312;
          *(_QWORD *)(v458 + 16) = v498;
          v495 = v712;
          __swift_storeEnumTagSinglePayload(v712, 1, 1, (uint64_t)v729);
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        outlined destroy of UUID?(v495, &demangling cache variable for type metadata for StorableValue?);
        swift_bridgeObjectRelease();
        outlined destroy of UUID?((uint64_t)v724, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        v459 = v726;
        v202 = v727;
        v449 = (uint64_t)v717;
        v460 = v730;
      }
      swift_bridgeObjectRelease();
      v499 = v659;
      v500 = specialized Array.count.getter(v659);
      v501 = v677;
      v502 = specialized Array.count.getter(v677);
      if (v500 != v502)
        break;
      v503 = specialized Array.count.getter(v501);
      if (!v503)
        goto LABEL_238;
      v504 = v503;
      v505 = v499 + 32;
      swift_bridgeObjectRetain();
      v506 = 0;
      v507 = v501;
      v646 = v504;
      v645 = v499 + 32;
      do
      {
        v508 = v504;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v506, 1, v507);
        v509 = *(_QWORD *)(v656 + 8 * v506);
        v510 = v506 + 1;
        v511 = __OFADD__(v506, 1);
        swift_bridgeObjectRetain();
        if (v511)
          goto LABEL_332;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v506, 1, v659);
        v512 = *(_QWORD *)(v505 + 8 * v506);
        swift_bridgeObjectRetain();
        v689 = specialized Array.count.getter(v509);
        if (v689)
        {
          v690 = v512;
          v649 = v510;
          v513 = 0;
          v688 = (uint64_t)v696 + *(int *)(v714 + 64);
          v514 = (*(unsigned __int8 *)(v671 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v671 + 80);
          v651 = v509;
          v515 = v509 + v514;
          v685 = *(_QWORD *)(v671 + 72);
          while (1)
          {
            v516 = v696;
            outlined init with copy of Date?(v515, (uint64_t)v696, &demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
            v517 = v690;
            if (__OFADD__(v513, 1))
              break;
            v726 = v458;
            v709 = v515;
            v710 = v513;
            v711 = (char *)(v513 + 1);
            v518 = v714;
            v519 = v720;
            v520 = (char *)v720 + *(int *)(v714 + 64);
            v522 = *v516;
            v521 = v516[1];
            v524 = v516[2];
            v523 = v516[3];
            *v720 = v522;
            v519[1] = v521;
            v519[2] = v524;
            v519[3] = v523;
            v525 = type metadata accessor for SQLDataType();
            v526 = (void (**)(char *, uint64_t, ValueMetadata *))v525[-1].Description;
            v526[4](v520, v688, v525);
            v527 = v694;
            v528 = (char *)v694 + *(int *)(v518 + 64);
            *v694 = v522;
            v527[1] = v521;
            v730 = v524;
            v527[2] = v524;
            v527[3] = v523;
            v529 = v528;
            v530 = v526;
            v531 = v526[2];
            v687 = v520;
            v531(v528, (uint64_t)v520, v525);
            v532 = *(_QWORD *)(v517 + 16);
            v686 = v522;
            if (v532)
            {
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              v533 = specialized __RawDictionaryStorage.find<A>(_:)();
              v534 = v523;
              v535 = (_QWORD *)v726;
              v537 = v695;
              if ((v536 & 1) != 0)
              {
                outlined init with copy of StorableValue(*(_QWORD *)(v517 + 56) + *(_QWORD *)(v728 + 72) * v533, v695, type metadata accessor for StorableValue);
                v538 = v537;
                v539 = 0;
              }
              else
              {
                v538 = v695;
                v539 = 1;
              }
              v540 = v729;
              __swift_storeEnumTagSinglePayload(v538, v539, 1, (uint64_t)v729);
              swift_bridgeObjectRelease();
            }
            else
            {
              v537 = v695;
              v540 = v729;
              __swift_storeEnumTagSinglePayload(v695, 1, 1, (uint64_t)v729);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v534 = v523;
              v535 = (_QWORD *)v726;
            }
            if (__swift_getEnumTagSinglePayload(v537, 1, (uint64_t)v540) == 1)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined destroy of UUID?(v537, &demangling cache variable for type metadata for StorableValue?);
              v729 = (void (*)(void))v530[1];
              ((void (*)(char *, ValueMetadata *))v729)(v529, v525);
              type metadata accessor for MetadataSQLError(0);
              lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
              swift_allocError();
              v611 = v531;
              v613 = v612;
              v614 = v669;
              v615 = (char *)v669 + *(int *)(v714 + 64);
              v616 = v686;
              *v669 = v686;
              v614[1] = v521;
              v614[2] = v730;
              v614[3] = v534;
              v611(v615, (uint64_t)v687, v525);
              swift_bridgeObjectRelease();
              *v613 = v616;
              v613[1] = v521;
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
              ((void (*)(char *, ValueMetadata *))v729)(v615, v525);
              outlined destroy of UUID?((uint64_t)v720, &demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
              goto LABEL_285;
            }
            swift_bridgeObjectRelease();
            v541 = v718;
            outlined init with take of StorableValue(v537, v718, type metadata accessor for StorableValue);
            ((void (*)(char *, ValueMetadata *))v530[1])(v529, v525);
            outlined init with copy of StorableValue(v541, v719, type metadata accessor for StorableValue);
            v542 = swift_isUniquelyReferenced_nonNull_native();
            v733._rawValue = v535;
            v543 = v730;
            v544 = specialized __RawDictionaryStorage.find<A>(_:)();
            v546 = v535[2];
            v547 = (v545 & 1) == 0;
            v548 = v546 + v547;
            if (__OFADD__(v546, v547))
              goto LABEL_310;
            v549 = v544;
            v550 = v545;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
            v551 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v542, v548);
            v202 = v727;
            if (v551)
            {
              v552 = specialized __RawDictionaryStorage.find<A>(_:)();
              if ((v550 & 1) != (v553 & 1))
                goto LABEL_350;
              v549 = v552;
            }
            v458 = (uint64_t)v733._rawValue;
            if ((v550 & 1) != 0)
            {
              v554 = *(_QWORD *)(v728 + 72) * v549;
              v555 = v693;
              outlined init with take of StorableValue(*((_QWORD *)v733._rawValue + 7) + v554, v693, type metadata accessor for StorableValue);
              outlined init with take of StorableValue(v719, *(_QWORD *)(v458 + 56) + v554, type metadata accessor for StorableValue);
              __swift_storeEnumTagSinglePayload(v555, 0, 1, (uint64_t)v729);
            }
            else
            {
              *((_QWORD *)v733._rawValue + (v549 >> 6) + 8) |= 1 << v549;
              v556 = (int64_t *)(*(_QWORD *)(v458 + 48) + 16 * v549);
              *v556 = v543;
              v556[1] = v534;
              outlined init with take of StorableValue(v719, *(_QWORD *)(v458 + 56) + *(_QWORD *)(v728 + 72) * v549, type metadata accessor for StorableValue);
              v557 = *(_QWORD *)(v458 + 16);
              v130 = __OFADD__(v557, 1);
              v558 = v557 + 1;
              v555 = v693;
              if (v130)
              {
                __break(1u);
LABEL_321:
                __break(1u);
                goto LABEL_322;
              }
              *(_QWORD *)(v458 + 16) = v558;
              __swift_storeEnumTagSinglePayload(v555, 1, 1, (uint64_t)v729);
              swift_bridgeObjectRetain();
            }
            swift_bridgeObjectRelease();
            outlined destroy of UUID?(v555, &demangling cache variable for type metadata for StorableValue?);
            outlined destroy of StorableValue(v718, type metadata accessor for StorableValue);
            swift_bridgeObjectRelease();
            outlined destroy of UUID?((uint64_t)v720, &demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
            v515 = v709 + v685;
            v513 = v710 + 1;
            if (v711 == (char *)v689)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v504 = v646;
              v505 = v645;
              v510 = v649;
              goto LABEL_236;
            }
          }
LABEL_309:
          __break(1u);
LABEL_310:
          __break(1u);
LABEL_311:
          __break(1u);
LABEL_312:
          __break(1u);
LABEL_313:
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
LABEL_319:
          swift_release();
          goto LABEL_298;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v504 = v508;
LABEL_236:
        v506 = v510;
        v507 = v677;
      }
      while (v510 != v504);
      swift_bridgeObjectRelease();
LABEL_238:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      specialized static Array._allocateUninitialized(_:)(0);
      v733._rawValue = v559;
      v560 = v668;
      v561 = specialized Array.count.getter(v668);
      if (!v561)
      {
        swift_bridgeObjectRelease();
        v578 = (uint64_t)v708;
        goto LABEL_253;
      }
      v562 = v561;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v560);
      v564 = *(_QWORD *)(v560 + 32);
      v563 = *(_QWORD *)(v560 + 40);
      v565 = *(_QWORD *)(v458 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v565 || (v566 = specialized __RawDictionaryStorage.find<A>(_:)(), (v567 & 1) == 0))
      {
LABEL_296:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for MetadataSQLError(0);
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
        swift_allocError();
        *v633 = v564;
        v633[1] = v563;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_297;
      }
      v568 = v566;
      v569 = v644;
      v570 = 1;
      while (1)
      {
        v571 = *(_DWORD *)(v458 + 36);
        swift_bridgeObjectRelease();
        if ((v568 & 0x8000000000000000) != 0 || (uint64_t)v568 >= 1 << *(_BYTE *)(v458 + 32))
          goto LABEL_327;
        if (((*(_QWORD *)(v458 + 64 + ((v568 >> 3) & 0xFFFFFFFFFFFFF8)) >> v568) & 1) == 0)
          goto LABEL_328;
        if (v571 != *(_DWORD *)(v458 + 36))
          goto LABEL_329;
        v572 = v674;
        outlined init with copy of StorableValue(*(_QWORD *)(v458 + 56) + *(_QWORD *)(v728 + 72) * v568, v674, type metadata accessor for StorableValue);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
        v573 = *((_QWORD *)v733._rawValue + 2);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v573, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v573, v572);
        destructiveProjectEnumData for StorableValue(v574, v575);
        if (v562 == v570)
          break;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v570, 1, v668);
        if (__OFADD__(v570, 1))
          goto LABEL_330;
        v564 = *(v569 - 1);
        v563 = *v569;
        v576 = *(_QWORD *)(v458 + 16);
        swift_bridgeObjectRetain();
        if (v576)
        {
          v568 = specialized __RawDictionaryStorage.find<A>(_:)();
          ++v570;
          v569 += 2;
          if ((v577 & 1) != 0)
            continue;
        }
        goto LABEL_296;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v202 = v727;
      v578 = (uint64_t)v708;
LABEL_253:
      specialized static Array._allocateUninitialized(_:)(0);
      v580 = v579;
      v731 = v579;
      v581 = specialized Array.count.getter(v578);
      if (v581)
      {
        v582 = v581;
        if (v581 < 1)
          goto LABEL_345;
        v583 = *(unsigned __int8 *)(v728 + 80);
        v584 = (v583 + 32) & ~v583;
        v585 = (uint64_t)v708 + v584;
        v586 = *(_QWORD *)(v728 + 72);
        v730 = v584 + 2 * v586;
        v726 = v583 | 7;
        swift_bridgeObjectRetain();
        do
        {
          v587 = v675;
          outlined init with copy of StorableValue(v585, v675, type metadata accessor for StorableValue);
          v588 = v676;
          outlined init with take of StorableValue(v587, v676, type metadata accessor for StorableValue);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<StorableValue>);
          v589 = swift_allocObject();
          specialized static Array._adoptStorage(_:count:)(v589, 2);
          v591 = v590;
          v593 = v592;
          outlined init with copy of StorableValue(v588, v592, type metadata accessor for StorableValue);
          outlined init with take of StorableValue(v588, v593 + v586, type metadata accessor for StorableValue);
          v595 = destructiveProjectEnumData for StorableValue(v591, v594);
          v596 = specialized Array.count.getter(v595);
          v597 = v731;
          v598 = specialized Array.count.getter(v731);
          v599 = v598 + v596;
          if (__OFADD__(v598, v596))
            goto LABEL_323;
          if (!swift_isUniquelyReferenced_nonNull_native()
            || (v600 = *(_QWORD *)(v597 + 24) >> 1, v600 < v599))
          {
            v597 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v731 = v597;
            v600 = *(_QWORD *)(v597 + 24) >> 1;
          }
          v601 = *(_QWORD *)(v597 + 16);
          v602 = v600 - v601;
          if (specialized Array.count.getter(v595))
          {
            if (v602 < v596)
              goto LABEL_326;
            if (v596 < 0)
              goto LABEL_351;
            v603 = v597 + v584 + v601 * v586;
            if (v595 + v584 < v603 + v596 * v586 && v603 < v595 + v584 + v596 * v586)
              goto LABEL_351;
            swift_arrayInitWithCopy();
            v202 = v727;
            if (v596)
            {
              v605 = *(_QWORD *)(v597 + 16);
              v130 = __OFADD__(v605, v596);
              v606 = v605 + v596;
              if (v130)
                goto LABEL_333;
              *(_QWORD *)(v597 + 16) = v606;
            }
          }
          else
          {
            v202 = v727;
            if (v596 > 0)
              goto LABEL_324;
            v596 = 0;
          }
          v607 = swift_bridgeObjectRelease();
          if (v596 != v602)
            destructiveProjectEnumData for StorableValue(v607, v608);
          v585 += v586;
          --v582;
        }
        while (v582);
        swift_bridgeObjectRelease();
        v580 = v731;
      }
      specialized Array.append<A>(contentsOf:)(v580);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v609._countAndFlagsBits = v643;
      v609._object = v650;
      SQLExpressionEvaluator.execute(sql:bindingValues:)(v609, v733);
      v678 = v610;
      v449 = (uint64_t)v717;
      if (v610)
        goto LABEL_313;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v443 = v705;
      v444 = v642;
      v448 = v641;
      v442 = v648;
      v447 = v647;
      if (!v647)
        goto LABEL_179;
LABEL_178:
      v647 = (v447 - 1) & v447;
      v648 = v442;
    }
    v636 = v502;
    swift_bridgeObjectRelease();
    type metadata accessor for MetadataSQLError(0);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
    swift_allocError();
    *v637 = v636;
    v637[1] = v500;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
LABEL_285:
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_297:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_298;
  }
  v453 = v451 + 1;
  if (v451 + 1 < v448)
  {
    v452 = v444[v453];
    if (v452)
      goto LABEL_190;
    v453 = v451 + 2;
    if (v451 + 2 < v448)
    {
      v452 = v444[v453];
      if (v452)
        goto LABEL_190;
      v453 = v451 + 3;
      if (v451 + 3 < v448)
      {
        v452 = v444[v453];
        if (v452)
          goto LABEL_190;
        v453 = v451 + 4;
        if (v451 + 4 < v448)
        {
          v452 = v444[v453];
          if (v452)
          {
LABEL_190:
            v451 = v453;
            goto LABEL_191;
          }
          while (1)
          {
            v451 = v453 + 1;
            if (__OFADD__(v453, 1))
              goto LABEL_347;
            if (v451 >= v448)
              break;
            v452 = v444[v451];
            ++v453;
            if (v452)
              goto LABEL_191;
          }
        }
      }
    }
  }
LABEL_304:
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_58:
  swift_bridgeObjectRelease();
  if (!v680[2])
    goto LABEL_73;
  v173 = v663;
  outlined init with copy of StorableValue(v667, v663, type metadata accessor for KeyedAggregationMetadataCache);
  v174 = Description;
  v175 = v664;
  v176 = v673;
  Description[2](v664, v173, v673);
  outlined destroy of StorableValue(v173, type metadata accessor for KeyedAggregationMetadataCache);
  v177 = MaterializedView.name.getter();
  v179 = v178;
  ((void (*)(char *, ValueMetadata *))v174[1])(v175, v176);
  specialized _arrayForceCast<A, B>(_:)();
  v717 = v180;
  static KeyedAggregationMetadataCache.columnNames(groupBySchema:payloadSchema:)();
  v182 = v181;
  static String._createEmpty(withInitialCapacity:)(41);
  swift_bridgeObjectRelease();
  v733._rawValue = (void *)0xD000000000000010;
  v734 = 0x800000018DCC3F10;
  v183._countAndFlagsBits = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v177, v179, 36, 0xD000000000000022, (void *)0x800000018DCC3EB0);
  String.append(_:)(v183);
  swift_bridgeObjectRelease();
  v184._countAndFlagsBits = 10272;
  v184._object = (void *)0xE200000000000000;
  String.append(_:)(v184);
  v185 = specialized Array.count.getter(v182);
  v710 = v182;
  if (v185)
  {
    v730 = v179;
    v735 = specialized ContiguousArray.init()();
    specialized ContiguousArray.reserveCapacity(_:)(v185);
    if (v185 < 0)
      goto LABEL_341;
    v186 = (void **)(v182 + 40);
    v187 = v185;
    do
    {
      v188 = (uint64_t)*(v186 - 1);
      v189 = *v186;
      swift_bridgeObjectRetain();
      static String._createEmpty(withInitialCapacity:)(4);
      swift_bridgeObjectRelease();
      v731 = 34;
      v732 = 0xE100000000000000;
      v190._countAndFlagsBits = v188;
      v190._object = v189;
      String.append(_:)(v190);
      v191._countAndFlagsBits = 34;
      v191._object = (void *)0xE100000000000000;
      String.append(_:)(v191);
      v192 = String.init(stringInterpolation:)();
      v194 = v193;
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v195 = *(_QWORD *)(v735 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v195);
      v196 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v195, v192, v194);
      destructiveProjectEnumData for StorableValue(v196, v197);
      v186 += 2;
      --v187;
    }
    while (v187);
    v198 = v735;
  }
  else
  {
    specialized static Array._allocateUninitialized(_:)(0);
    v198 = v266;
  }
  v731 = v198;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v267 = BidirectionalCollection<>.joined(separator:)();
  v269 = v268;
  swift_bridgeObjectRelease();
  v270._countAndFlagsBits = v267;
  v270._object = v269;
  String.append(_:)(v270);
  swift_bridgeObjectRelease();
  v271._countAndFlagsBits = 0x4156202020200A29;
  v271._object = (void *)0xEF2028205345554CLL;
  String.append(_:)(v271);
  if (v185)
  {
    v731 = specialized ContiguousArray.init()();
    specialized ContiguousArray.reserveCapacity(_:)(v185);
    v272 = v701;
    if (v185 < 0)
      goto LABEL_342;
    do
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v273 = *(_QWORD *)(v731 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v273);
      v274 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v273, 63, 0xE100000000000000);
      destructiveProjectEnumData for StorableValue(v274, v275);
      --v185;
    }
    while (v185);
    v276 = v731;
  }
  else
  {
    specialized static Array._allocateUninitialized(_:)(0);
    v276 = v277;
    v272 = v701;
  }
  v731 = v276;
  v278 = BidirectionalCollection<>.joined(separator:)();
  v280 = v279;
  swift_bridgeObjectRelease();
  v281._countAndFlagsBits = v278;
  v281._object = v280;
  String.append(_:)(v281);
  swift_bridgeObjectRelease();
  v282._countAndFlagsBits = 10528;
  v282._object = (void *)0xE200000000000000;
  String.append(_:)(v282);
  v688 = String.init(stringInterpolation:)();
  v692 = v283;
  v284 = v677;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v285 = 0;
  v286 = (char *)(v680 + 8);
  v287 = 1 << *((_BYTE *)v680 + 32);
  v288 = -1;
  if (v287 < 64)
    v288 = ~(-1 << v287);
  v289 = v288 & v680[8];
  v290 = (unint64_t)(v287 + 63) >> 6;
  v705 = (_QWORD *)(v284 + 32);
  v689 = v710 + 56;
  v291 = v727;
  v292 = (uint64_t)v700;
  v687 = (char *)(v680 + 8);
  v686 = v290;
  if (!v289)
    goto LABEL_89;
LABEL_88:
  v690 = (v289 - 1) & v289;
  v691 = v285;
  for (k = __clz(__rbit64(v289)) | (v285 << 6); ; k = __clz(__rbit64(v295)) + (v294 << 6))
  {
    v297 = *(_QWORD *)(v680[6] + 8 * k);
    v298 = *(_QWORD *)(v680[7] + 8 * k);
    v299 = v665;
    outlined init with copy of StorableValue(v667, v665, type metadata accessor for KeyedAggregationMetadataCache);
    v300 = *(_QWORD *)(v299 + v658[11]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v693 = v300;
    swift_retain();
    outlined destroy of StorableValue(v299, type metadata accessor for KeyedAggregationMetadataCache);
    v709 = v298;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized static Array._allocateUninitialized(_:)(0);
    v730 = Dictionary.init(dictionaryLiteral:)();
    v718 = v297;
    v301 = specialized Array.count.getter(v297);
    v302 = v717;
    v303 = specialized Array.count.getter(v717);
    if (v301 != v303)
    {
LABEL_305:
      v638 = v303;
      swift_bridgeObjectRelease();
      type metadata accessor for MetadataSQLError(0);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
      swift_allocError();
      *v639 = v638;
      v639[1] = v301;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
LABEL_172:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_298;
    }
    v725 = specialized Array.count.getter(v302);
    swift_bridgeObjectRetain();
    v304 = 0;
    for (m = (uint64_t)v272; ; m = (uint64_t)v701)
    {
      if (v304 == v725)
      {
        v306 = 1;
        v307 = v725;
      }
      else
      {
        v308 = v717;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v304, 1, v717);
        outlined init with copy of Date?((uint64_t)&v308[((*(unsigned __int8 *)(v707 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v707 + 80))+ *(_QWORD *)(v707 + 72) * v304], v292, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        v309 = v304 + 1;
        if (__OFADD__(v304, 1))
        {
LABEL_316:
          __break(1u);
LABEL_317:
          __break(1u);
LABEL_318:
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          goto LABEL_319;
        }
        v310 = (_QWORD *)m;
        v311 = v681;
        outlined init with take of UUID?(v292, v681, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        v312 = v292;
        v313 = v304;
        v314 = (uint64_t)&v706[*(int *)(v291 + 48)];
        v315 = v311;
        m = (uint64_t)v310;
        outlined init with take of UUID?(v315, v314, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        v316 = (uint64_t)v310 + *(int *)(v291 + 48);
        *v310 = v313;
        v292 = v312;
        outlined init with take of UUID?(v314, v316, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        v306 = 0;
        v307 = v309;
      }
      __swift_storeEnumTagSinglePayload(m, v306, 1, v291);
      v317 = v699;
      outlined init with take of UUID?(m, (uint64_t)v699, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: (columnName: String, dataType: SQLDataType))?);
      if (__swift_getEnumTagSinglePayload((uint64_t)v317, 1, v291) == 1)
        break;
      v726 = v307;
      v318 = *v317;
      v319 = (uint64_t *)((char *)v317 + *(int *)(v291 + 48));
      v321 = *v319;
      v320 = v319[1];
      v322 = v723;
      v323 = *(int *)(v723 + 48);
      v324 = (char *)v319 + v323;
      v325 = v698;
      v326 = (char *)v698 + v323;
      *v698 = v321;
      v325[1] = v320;
      v327 = type metadata accessor for SQLDataType();
      v328 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v327[-1].Description + 4);
      v328(v326, v324, v327);
      v329 = v721;
      v330 = (char *)v721 + *(int *)(v322 + 48);
      *v721 = v321;
      v329[1] = v320;
      v328(v330, v326, v327);
      v331 = v718;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v318, 1, v718);
      v332 = v331 + ((*(unsigned __int8 *)(v728 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v728 + 80));
      v333 = *(_QWORD *)(v728 + 72);
      outlined init with copy of StorableValue(v332 + v333 * v318, v722, type metadata accessor for StorableValue);
      swift_bridgeObjectRetain();
      v334 = (_QWORD *)v730;
      v335 = swift_isUniquelyReferenced_nonNull_native();
      v733._rawValue = v334;
      v336 = specialized __RawDictionaryStorage.find<A>(_:)();
      v338 = v334[2];
      v339 = (v337 & 1) == 0;
      v340 = v338 + v339;
      if (__OFADD__(v338, v339))
      {
        __break(1u);
        goto LABEL_309;
      }
      v341 = v336;
      v342 = v337;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v335, v340))
      {
        v343 = specialized __RawDictionaryStorage.find<A>(_:)();
        if ((v342 & 1) != (v344 & 1))
          goto LABEL_350;
        v341 = v343;
      }
      v730 = (int64_t)v733._rawValue;
      if ((v342 & 1) != 0)
      {
        v345 = v730;
        v346 = v333 * v341;
        v347 = v697;
        outlined init with take of StorableValue(*(_QWORD *)(v730 + 56) + v346, v697, type metadata accessor for StorableValue);
        outlined init with take of StorableValue(v722, *(_QWORD *)(v345 + 56) + v346, type metadata accessor for StorableValue);
        __swift_storeEnumTagSinglePayload(v347, 0, 1, (uint64_t)v729);
      }
      else
      {
        v348 = (_QWORD *)v730;
        *(_QWORD *)(v730 + 8 * (v341 >> 6) + 64) |= 1 << v341;
        v349 = (_QWORD *)(v348[6] + 16 * v341);
        *v349 = v321;
        v349[1] = v320;
        outlined init with take of StorableValue(v722, v348[7] + v333 * v341, type metadata accessor for StorableValue);
        v350 = v348[2];
        v130 = __OFADD__(v350, 1);
        v351 = v350 + 1;
        if (v130)
          goto LABEL_317;
        v352 = v729;
        *(_QWORD *)(v730 + 16) = v351;
        v347 = v697;
        __swift_storeEnumTagSinglePayload(v697, 1, 1, (uint64_t)v352);
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v347, &demangling cache variable for type metadata for StorableValue?);
      swift_bridgeObjectRelease();
      outlined destroy of UUID?((uint64_t)v721, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      v304 = v726;
      v291 = v727;
      v292 = (uint64_t)v700;
    }
    swift_bridgeObjectRelease();
    v301 = specialized Array.count.getter(v709);
    v353 = v677;
    v303 = specialized Array.count.getter(v677);
    if (v301 != v303)
      goto LABEL_305;
    v694 = (int64_t *)specialized Array.count.getter(v353);
    if (v694)
      break;
    v272 = v701;
LABEL_149:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized static Array._allocateUninitialized(_:)(0);
    v733._rawValue = v407;
    v408 = v710;
    v409 = specialized Array.count.getter(v710);
    if (v409)
    {
      v410 = v409;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v408);
      v412 = *(_QWORD *)(v408 + 32);
      v411 = *(_QWORD *)(v408 + 40);
      v413 = *(_QWORD *)(v730 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v413 || (v414 = specialized __RawDictionaryStorage.find<A>(_:)(), (v415 & 1) == 0))
      {
LABEL_287:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for MetadataSQLError(0);
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
        swift_allocError();
        *v617 = v412;
        v617[1] = v411;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        goto LABEL_298;
      }
      v416 = v414;
      v417 = v730 + 64;
      v418 = (uint64_t *)v689;
      v419 = 1;
      while (1)
      {
        v420 = *(_DWORD *)(v730 + 36);
        swift_bridgeObjectRelease();
        if ((v416 & 0x8000000000000000) != 0 || (uint64_t)v416 >= 1 << *(_BYTE *)(v730 + 32))
          goto LABEL_334;
        if (((*(_QWORD *)(v417 + ((v416 >> 3) & 0xFFFFFFFFFFFFF8)) >> v416) & 1) == 0)
          goto LABEL_335;
        if (v420 != *(_DWORD *)(v730 + 36))
          goto LABEL_336;
        v421 = v674;
        outlined init with copy of StorableValue(*(_QWORD *)(v730 + 56) + *(_QWORD *)(v728 + 72) * v416, v674, type metadata accessor for StorableValue);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
        v422 = *((_QWORD *)v733._rawValue + 2);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v422, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v422, v421);
        destructiveProjectEnumData for StorableValue(v423, v424);
        if (v410 == v419)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v291 = v727;
          v292 = (uint64_t)v700;
          v272 = v701;
          goto LABEL_164;
        }
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v419, 1, v710);
        if (__OFADD__(v419, 1))
          goto LABEL_337;
        v412 = *(v418 - 1);
        v411 = *v418;
        v425 = *(_QWORD *)(v730 + 16);
        swift_bridgeObjectRetain();
        if (v425)
        {
          v416 = specialized __RawDictionaryStorage.find<A>(_:)();
          ++v419;
          v418 += 2;
          if ((v426 & 1) != 0)
            continue;
        }
        goto LABEL_287;
      }
    }
    swift_bridgeObjectRelease();
LABEL_164:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v427._countAndFlagsBits = v688;
    v427._object = v692;
    SQLExpressionEvaluator.execute(sql:bindingValues:)(v427, v733);
    v678 = v428;
    if (v428)
      goto LABEL_318;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v286 = v687;
    v290 = v686;
    v285 = v691;
    v289 = v690;
    if (v690)
      goto LABEL_88;
LABEL_89:
    v130 = __OFADD__(v285, 1);
    v294 = v285 + 1;
    if (v130)
      goto LABEL_344;
    if (v294 >= v290)
      goto LABEL_307;
    v295 = *(_QWORD *)&v286[8 * v294];
    if (!v295)
    {
      v296 = v294 + 1;
      if (v294 + 1 >= v290)
        goto LABEL_307;
      v295 = *(_QWORD *)&v286[8 * v296];
      if (!v295)
      {
        v296 = v294 + 2;
        if (v294 + 2 >= v290)
          goto LABEL_307;
        v295 = *(_QWORD *)&v286[8 * v296];
        if (!v295)
        {
          v296 = v294 + 3;
          if (v294 + 3 >= v290)
            goto LABEL_307;
          v295 = *(_QWORD *)&v286[8 * v296];
          if (!v295)
          {
            v296 = v294 + 4;
            if (v294 + 4 >= v290)
              goto LABEL_307;
            v295 = *(_QWORD *)&v286[8 * v296];
            if (!v295)
            {
              while (1)
              {
                v294 = v296 + 1;
                if (__OFADD__(v296, 1))
                  goto LABEL_348;
                if (v294 >= v290)
                  goto LABEL_307;
                v295 = *(_QWORD *)&v286[8 * v294];
                ++v296;
                if (v295)
                  goto LABEL_101;
              }
            }
          }
        }
      }
      v294 = v296;
    }
LABEL_101:
    v690 = (v295 - 1) & v295;
    v691 = v294;
  }
  v354 = v709;
  v696 = (int64_t *)(v709 + 32);
  swift_bridgeObjectRetain();
  v355 = 0;
  v356 = v353;
  v272 = v701;
  while (1)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v355, 1, v356);
    v357 = v705[(_QWORD)v355];
    v708 = (int64_t *)((char *)v355 + 1);
    v358 = __OFADD__(v355, 1);
    swift_bridgeObjectRetain();
    if (v358)
      break;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v355, 1, v354);
    v359 = (int64_t *)v696[(_QWORD)v355];
    swift_bridgeObjectRetain();
    v716 = (int64_t *)specialized Array.count.getter(v357);
    if (v716)
    {
      v360 = 0;
      v361 = v684;
      v715 = (char *)v684 + *(int *)(v714 + 64);
      v362 = (*(unsigned __int8 *)(v671 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v671 + 80);
      v695 = v357;
      v363 = v357 + v362;
      v711 = *(char **)(v671 + 72);
      v364 = v359;
      v713 = v359;
      while (1)
      {
        outlined init with copy of Date?(v363, (uint64_t)v361, &demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
        if (__OFADD__(v360, 1))
          break;
        v719 = v363;
        v720 = v360;
        v724 = (int64_t *)((char *)v360 + 1);
        v365 = v714;
        v366 = v704;
        v367 = (uint64_t)v704 + *(int *)(v714 + 64);
        v368 = *v361;
        v369 = v361[1];
        v370 = v364;
        v372 = v361[2];
        v371 = v361[3];
        *v704 = *v361;
        v366[1] = v369;
        v366[2] = v372;
        v366[3] = v371;
        v373 = type metadata accessor for SQLDataType();
        v374 = v373[-1].Description;
        (*((void (**)(uint64_t, char *, ValueMetadata *))v374 + 4))(v367, v715, v373);
        v375 = v683;
        v376 = (uint64_t)v683 + *(int *)(v365 + 64);
        *v683 = v368;
        v375[1] = v369;
        v725 = v376;
        v726 = v372;
        v375[2] = v372;
        v375[3] = v371;
        v377 = v370;
        v378 = (void (*)(void))*((_QWORD *)v374 + 2);
        v712 = v367;
        v378();
        if (v377[2])
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          v379 = specialized __RawDictionaryStorage.find<A>(_:)();
          v381 = (uint64_t)v679;
          if ((v380 & 1) != 0)
          {
            outlined init with copy of StorableValue(v377[7] + *(_QWORD *)(v728 + 72) * v379, (uint64_t)v679, type metadata accessor for StorableValue);
            v382 = v381;
            v383 = 0;
          }
          else
          {
            v382 = (uint64_t)v679;
            v383 = 1;
          }
          v384 = v729;
          __swift_storeEnumTagSinglePayload(v382, v383, 1, (uint64_t)v729);
          swift_bridgeObjectRelease();
        }
        else
        {
          v381 = (uint64_t)v679;
          v384 = v729;
          __swift_storeEnumTagSinglePayload((uint64_t)v679, 1, 1, (uint64_t)v729);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        if (__swift_getEnumTagSinglePayload(v381, 1, (uint64_t)v384) == 1)
        {
          swift_bridgeObjectRelease();
          v730 = v368;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of UUID?(v381, &demangling cache variable for type metadata for StorableValue?);
          v729 = v378;
          v429 = (void (*)(_QWORD, _QWORD))*((_QWORD *)v374 + 1);
          v429(v725, v373);
          type metadata accessor for MetadataSQLError(0);
          lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
          swift_allocError();
          v431 = v430;
          v432 = v669;
          v433 = (char *)v669 + *(int *)(v714 + 64);
          v434 = v730;
          *v669 = v730;
          v432[1] = v369;
          v432[2] = v726;
          v432[3] = v371;
          ((void (*)(char *, uint64_t, ValueMetadata *))v729)(v433, v712, v373);
          swift_bridgeObjectRelease();
          *v431 = v434;
          v431[1] = v369;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          v429(v433, v373);
          outlined destroy of UUID?((uint64_t)v704, &demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
          goto LABEL_172;
        }
        swift_bridgeObjectRelease();
        v385 = v702;
        outlined init with take of StorableValue(v381, v702, type metadata accessor for StorableValue);
        (*((void (**)(uint64_t, ValueMetadata *))v374 + 1))(v725, v373);
        outlined init with copy of StorableValue(v385, v703, type metadata accessor for StorableValue);
        v386 = (_QWORD *)v730;
        v387 = swift_isUniquelyReferenced_nonNull_native();
        v733._rawValue = v386;
        v388 = v726;
        v389 = specialized __RawDictionaryStorage.find<A>(_:)();
        v391 = v386[2];
        v392 = (v390 & 1) == 0;
        v393 = v391 + v392;
        if (__OFADD__(v391, v392))
          goto LABEL_315;
        v394 = v389;
        v395 = v390;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
        v396 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v387, v393);
        v364 = v713;
        if (v396)
        {
          v397 = specialized __RawDictionaryStorage.find<A>(_:)();
          if ((v395 & 1) != (v398 & 1))
            goto LABEL_350;
          v394 = v397;
        }
        v730 = (int64_t)v733._rawValue;
        if ((v395 & 1) != 0)
        {
          v399 = v730;
          v400 = *(_QWORD *)(v728 + 72) * v394;
          v401 = v682;
          outlined init with take of StorableValue(*(_QWORD *)(v730 + 56) + v400, v682, type metadata accessor for StorableValue);
          outlined init with take of StorableValue(v703, *(_QWORD *)(v399 + 56) + v400, type metadata accessor for StorableValue);
          __swift_storeEnumTagSinglePayload(v401, 0, 1, (uint64_t)v729);
        }
        else
        {
          v402 = (_QWORD *)v730;
          *(_QWORD *)(v730 + 8 * (v394 >> 6) + 64) |= 1 << v394;
          v403 = (uint64_t *)(v402[6] + 16 * v394);
          *v403 = v388;
          v403[1] = v371;
          outlined init with take of StorableValue(v703, v402[7] + *(_QWORD *)(v728 + 72) * v394, type metadata accessor for StorableValue);
          v404 = v402[2];
          v130 = __OFADD__(v404, 1);
          v405 = v404 + 1;
          v401 = v682;
          if (v130)
            goto LABEL_321;
          v406 = v729;
          *(_QWORD *)(v730 + 16) = v405;
          __swift_storeEnumTagSinglePayload(v401, 1, 1, (uint64_t)v406);
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        outlined destroy of UUID?(v401, &demangling cache variable for type metadata for StorableValue?);
        outlined destroy of StorableValue(v702, type metadata accessor for StorableValue);
        swift_bridgeObjectRelease();
        outlined destroy of UUID?((uint64_t)v704, &demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
        v363 = (uint64_t)&v711[v719];
        v360 = (int64_t *)((char *)v720 + 1);
        v361 = v684;
        v291 = v727;
        if (v724 == v716)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v292 = (uint64_t)v700;
          v272 = v701;
          v354 = v709;
          goto LABEL_146;
        }
      }
      __break(1u);
LABEL_315:
      __break(1u);
      goto LABEL_316;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_146:
    v355 = v708;
    v356 = v677;
    if (v708 == v694)
    {
      swift_bridgeObjectRelease();
      goto LABEL_149;
    }
  }
LABEL_338:
  __break(1u);
LABEL_339:
  __break(1u);
LABEL_340:
  __break(1u);
LABEL_341:
  __break(1u);
LABEL_342:
  __break(1u);
LABEL_343:
  __break(1u);
LABEL_344:
  __break(1u);
LABEL_345:
  __break(1u);
LABEL_346:
  __break(1u);
LABEL_347:
  __break(1u);
LABEL_348:
  __break(1u);
LABEL_349:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
LABEL_350:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_351:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *MatchingRecordCache;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int64_t v102;
  _QWORD *rawValue;
  unint64_t v104;
  unint64_t i;
  int64_t v106;
  unint64_t v107;
  int64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  char v113;
  int isUniquelyReferenced_nonNull_native;
  char v115;
  unint64_t v116;
  uint64_t v117;
  _BOOL8 v118;
  uint64_t v119;
  char v120;
  unint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  _QWORD *v129;
  int v130;
  char v131;
  uint64_t v132;
  _BOOL8 v133;
  uint64_t v134;
  char v135;
  unint64_t v136;
  char v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (**v143)(char *, uint64_t, ValueMetadata *);
  uint64_t v144;
  ValueMetadata *v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  Swift::String v155;
  Swift::String v156;
  Swift::String v157;
  uint64_t v158;
  uint64_t v159;
  void **v160;
  uint64_t v161;
  void *v162;
  Swift::String v163;
  Swift::String v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (**v173)(char *, uint64_t, ValueMetadata *);
  char *v174;
  ValueMetadata *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  Swift::String v182;
  Swift::String v183;
  uint64_t v184;
  void **v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  Swift::String v189;
  Swift::String v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  Swift::String v198;
  Swift::String v199;
  uint64_t v200;
  uint64_t v201;
  void **v202;
  uint64_t v203;
  void *v204;
  Swift::String v205;
  Swift::String v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  void *v217;
  Swift::String v218;
  Swift::String v219;
  uint64_t v220;
  uint64_t PlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm;
  uint64_t v222;
  void *v223;
  void *v224;
  Swift::String v225;
  Swift::String v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  int64_t v230;
  uint64_t v231;
  void (**v232)(char *, uint64_t, ValueMetadata *);
  char *v233;
  ValueMetadata *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  void *v242;
  uint64_t v243;
  void *v244;
  void *v245;
  Swift::String v246;
  Swift::String v247;
  Swift::String v248;
  Swift::String v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  Swift::String *v254;
  uint64_t v255;
  Swift::String v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  void *v266;
  void *v267;
  Swift::String v268;
  Swift::String v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  void *v279;
  Swift::String v280;
  Swift::String v281;
  char *v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  int64_t v289;
  unint64_t j;
  int64_t v291;
  unint64_t v292;
  int64_t v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int64_t k;
  uint64_t v303;
  int64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  uint64_t *v319;
  char *v320;
  ValueMetadata *v321;
  void (*v322)(char *, char *, ValueMetadata *);
  uint64_t *v323;
  char *v324;
  uint64_t v325;
  uint64_t v326;
  _QWORD *v327;
  char v328;
  unint64_t v329;
  char v330;
  uint64_t v331;
  _BOOL8 v332;
  Swift::Int v333;
  unint64_t v334;
  char v335;
  Swift::Bool v336;
  uint64_t v337;
  unint64_t v338;
  char v339;
  unint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  _QWORD *v353;
  uint64_t v354;
  uint64_t v355;
  ValueMetadata *v356;
  _QWORD *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  uint64_t *v368;
  uint64_t v369;
  unint64_t v370;
  char v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  _QWORD *v375;
  char v376;
  unint64_t v377;
  char v378;
  uint64_t v379;
  _BOOL8 v380;
  Swift::Int v381;
  unint64_t v382;
  char v383;
  unint64_t v384;
  char v385;
  unint64_t v386;
  uint64_t v387;
  _QWORD *v388;
  ValueMetadata *v389;
  uint64_t v390;
  void *v391;
  uint64_t *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t v396;
  char v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  int64_t v403;
  int v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  char v410;
  Swift::String v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  void *v415;
  void *v416;
  Swift::String v417;
  void *v418;
  uint64_t v419;
  int64_t v420;
  _QWORD *v421;
  _QWORD *v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  int64_t v426;
  uint64_t v427;
  unint64_t v428;
  int64_t v429;
  unint64_t v430;
  int64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t *v449;
  uint64_t v450;
  uint64_t v451;
  _QWORD *v452;
  uint64_t v453;
  uint64_t v454;
  char *v455;
  uint64_t *v456;
  char *v457;
  ValueMetadata *v458;
  void (*v459)(char *, char *, ValueMetadata *);
  uint64_t *v460;
  char *v461;
  int64_t v462;
  uint64_t v463;
  char v464;
  unint64_t v465;
  char v466;
  uint64_t v467;
  _BOOL8 v468;
  Swift::Int v469;
  unint64_t v470;
  char v471;
  Swift::Bool v472;
  unint64_t v473;
  char v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  _QWORD *v481;
  unint64_t v482;
  uint64_t v483;
  _QWORD *v484;
  uint64_t v485;
  ValueMetadata *v486;
  _QWORD *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  int64_t v491;
  unint64_t v492;
  uint64_t v493;
  uint64_t *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  char *v498;
  uint64_t v499;
  unint64_t v500;
  char v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  _QWORD *v506;
  char v507;
  unint64_t v508;
  char v509;
  uint64_t v510;
  _BOOL8 v511;
  Swift::Int v512;
  unint64_t v513;
  char v514;
  Swift::Bool v515;
  uint64_t v516;
  unint64_t v517;
  char v518;
  unint64_t v519;
  _QWORD *v520;
  ValueMetadata *v521;
  uint64_t v522;
  uint64_t v523;
  void *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  unint64_t v531;
  char v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t *v535;
  uint64_t v536;
  int v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  char v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  Swift::String v574;
  uint64_t v575;
  uint64_t *v576;
  ValueMetadata *v577;
  uint64_t *v578;
  ValueMetadata *v579;
  _QWORD *v580;
  uint64_t v581;
  uint64_t v582;
  void *v583;
  void *v584;
  Swift::String v585;
  Swift::String v586;
  uint64_t v587;
  void *v588;
  void *v589;
  void *v590;
  Swift::OpaquePointer v591;
  Swift::String v592;
  unint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t *v596;
  uint64_t v597;
  uint64_t *v598;
  uint64_t v599;
  _QWORD *v600;
  uint64_t v601;
  uint64_t *v602;
  uint64_t v603;
  _QWORD *v604;
  int64_t v605;
  int64_t v606;
  _QWORD *v607;
  uint64_t v608;
  uint64_t *v609;
  uint64_t v610;
  int64_t v611;
  void *v612;
  uint64_t v613;
  char *v614;
  Swift::String *v615;
  uint64_t *v616;
  uint64_t v617;
  int *v618;
  int64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  char *v623;
  uint64_t v624;
  char *v625;
  uint64_t v626;
  uint64_t v627;
  unint64_t v628;
  uint64_t v629;
  void (**Description)(char *, uint64_t, ValueMetadata *);
  ValueMetadata *v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  _QWORD *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t *v640;
  uint64_t v641;
  _QWORD *v642;
  _QWORD *v643;
  char *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t *v647;
  uint64_t v648;
  uint64_t v649;
  unint64_t v650;
  _QWORD *v651;
  char *v652;
  uint64_t v653;
  uint64_t *v654;
  unint64_t v655;
  char *v656;
  uint64_t *v657;
  uint64_t *v658;
  int64_t *v659;
  char *v660;
  char *v661;
  uint64_t v662;
  char *v663;
  char *v664;
  uint64_t *v665;
  char *v666;
  uint64_t *v667;
  char *v668;
  uint64_t v669;
  uint64_t *v670;
  uint64_t v671;
  uint64_t *v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  int64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  unint64_t v681;
  Swift::OpaquePointer v682;
  unint64_t v683;
  uint64_t v684;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLDataType)?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v643 = (int64_t *)((char *)&v605 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = MEMORY[0x1E0C80A78](v3);
  v640 = (int64_t *)((char *)&v605 - v6);
  v7 = MEMORY[0x1E0C80A78](v5);
  v663 = (char *)&v605 - v8;
  MEMORY[0x1E0C80A78](v7);
  v647 = (int64_t *)((char *)&v605 - v9);
  v678 = type metadata accessor for StorableValue(0);
  v676 = *(_QWORD *)(v678 - 8);
  v10 = MEMORY[0x1E0C80A78](v678);
  v649 = (uint64_t)&v605 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v648 = (uint64_t)&v605 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v669 = (uint64_t)&v605 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v632 = (uint64_t)&v605 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v634 = (uint64_t)&v605 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v633 = (uint64_t)&v605 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v655 = (unint64_t)&v605 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v654 = (int64_t *)((char *)&v605 - v25);
  MEMORY[0x1E0C80A78](v24);
  v673 = (uint64_t)&v605 - v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  v28 = MEMORY[0x1E0C80A78](v27);
  v637 = (uint64_t)&v605 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v638 = (uint64_t)&v605 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v656 = (char *)&v605 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v644 = (char *)&v605 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v646 = (uint64_t)&v605 - v37;
  MEMORY[0x1E0C80A78](v36);
  v664 = (char *)&v605 - v38;
  v674 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: (columnName: String, dataType: SQLDataType)));
  MEMORY[0x1E0C80A78](v674);
  v661 = (char *)&v605 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v671 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
  v662 = *(_QWORD *)(v671 - 8);
  v40 = MEMORY[0x1E0C80A78](v671);
  v42 = (Swift::String *)((char *)&v605 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  v43 = MEMORY[0x1E0C80A78](v40);
  v45 = (char *)&v605 - v44;
  v46 = MEMORY[0x1E0C80A78](v43);
  v657 = (int64_t *)((char *)&v605 - v47);
  v48 = MEMORY[0x1E0C80A78](v46);
  v670 = (int64_t *)((char *)&v605 - v49);
  v50 = MEMORY[0x1E0C80A78](v48);
  v660 = (char *)&v605 - v51;
  v52 = MEMORY[0x1E0C80A78](v50);
  v645 = (uint64_t)&v605 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v665 = (int64_t *)((char *)&v605 - v55);
  v56 = MEMORY[0x1E0C80A78](v54);
  v672 = (int64_t *)((char *)&v605 - v57);
  v58 = MEMORY[0x1E0C80A78](v56);
  v668 = (char *)&v605 - v59;
  MEMORY[0x1E0C80A78](v58);
  v651 = (int64_t *)((char *)&v605 - v60);
  v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: (columnName: String, dataType: SQLDataType))?);
  v62 = MEMORY[0x1E0C80A78](v61);
  v659 = (int64_t *)((char *)&v605 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0));
  v64 = MEMORY[0x1E0C80A78](v62);
  v658 = (int64_t *)((char *)&v605 - v65);
  v66 = MEMORY[0x1E0C80A78](v64);
  v667 = (int64_t *)((char *)&v605 - v67);
  MEMORY[0x1E0C80A78](v66);
  v666 = (char *)&v605 - v68;
  v631 = type metadata accessor for MaterializedView();
  Description = (void (**)(char *, uint64_t, ValueMetadata *))v631[-1].Description;
  v69 = MEMORY[0x1E0C80A78](v631);
  v623 = (char *)&v605 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = MEMORY[0x1E0C80A78](v69);
  v625 = (char *)&v605 - v72;
  MEMORY[0x1E0C80A78](v71);
  v652 = (char *)&v605 - v73;
  MatchingRecordCache = (int *)type metadata accessor for KeyedFirstMatchingRecordCache(0);
  v75 = MEMORY[0x1E0C80A78](MatchingRecordCache);
  v622 = (uint64_t)&v605 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = MEMORY[0x1E0C80A78](v75);
  v621 = (uint64_t)&v605 - v78;
  v79 = MEMORY[0x1E0C80A78](v77);
  v626 = (uint64_t)&v605 - v80;
  v81 = MEMORY[0x1E0C80A78](v79);
  v624 = (uint64_t)&v605 - v82;
  v83 = MEMORY[0x1E0C80A78](v81);
  v629 = (uint64_t)&v605 - v84;
  v85 = MEMORY[0x1E0C80A78](v83);
  v650 = (unint64_t)&v605 - v86;
  v87 = MEMORY[0x1E0C80A78](v85);
  v89 = (char *)&v605 - v88;
  MEMORY[0x1E0C80A78](v87);
  v91 = (char *)&v605 - v90;
  outlined init with copy of StorableValue(v1, (uint64_t)&v605 - v90, type metadata accessor for KeyedFirstMatchingRecordCache);
  v92 = *(_QWORD *)&v91[MatchingRecordCache[12]];
  swift_bridgeObjectRetain();
  outlined destroy of StorableValue((uint64_t)v91, type metadata accessor for KeyedFirstMatchingRecordCache);
  if (!v92)
    return;
  v93 = v1 + MatchingRecordCache[7];
  if (!*(_QWORD *)(*(_QWORD *)v93 + 16))
  {
    swift_bridgeObjectRelease();
    return;
  }
  v614 = v45;
  v615 = v42;
  v94 = v1;
  v95 = (uint64_t *)v93;
  specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)();
  v628 = v96;
  swift_bridgeObjectRelease();
  v627 = v94;
  outlined init with copy of StorableValue(v94, (uint64_t)v89, type metadata accessor for KeyedFirstMatchingRecordCache);
  v618 = MatchingRecordCache;
  v653 = *(_QWORD *)&v89[MatchingRecordCache[13]];
  swift_bridgeObjectRetain();
  outlined destroy of StorableValue((uint64_t)v89, type metadata accessor for KeyedFirstMatchingRecordCache);
  v616 = v95;
  v97 = *v95;
  v98 = *(_QWORD *)(*v95 + 64);
  v675 = *v95 + 64;
  v99 = 1 << *(_BYTE *)(v97 + 32);
  v100 = -1;
  if (v99 < 64)
    v100 = ~(-1 << v99);
  v101 = v100 & v98;
  v677 = (unint64_t)(v99 + 63) >> 6;
  v679 = v97;
  swift_bridgeObjectRetain();
  v102 = 0;
  rawValue = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v642 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  if (!v101)
    goto LABEL_7;
LABEL_6:
  v104 = __clz(__rbit64(v101));
  v101 &= v101 - 1;
  for (i = v104 | (v102 << 6); ; i = __clz(__rbit64(v107)) + (v102 << 6))
  {
    v109 = *(_QWORD *)(*(_QWORD *)(v679 + 48) + 8 * i);
    v110 = *(_QWORD *)(v679 + 56) + 24 * i;
    v111 = *(_BYTE *)v110;
    v112 = *(_QWORD *)(v110 + 8);
    v113 = *(_BYTE *)(v110 + 16);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    if ((v113 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v682._rawValue = rawValue;
      v116 = specialized __RawDictionaryStorage.find<A>(_:)(v109);
      v117 = rawValue[2];
      v118 = (v115 & 1) == 0;
      v119 = v117 + v118;
      if (__OFADD__(v117, v118))
      {
        __break(1u);
LABEL_329:
        v597 = v119;
        swift_bridgeObjectRelease();
        type metadata accessor for MetadataSQLError(0);
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
        swift_allocError();
        *v598 = v613;
        v598[1] = v597;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        goto LABEL_311;
      }
      v120 = v115;
      if (rawValue[3] >= v119)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], ChangeRecord>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v119, isUniquelyReferenced_nonNull_native);
        v121 = specialized __RawDictionaryStorage.find<A>(_:)(v109);
        if ((v120 & 1) != (v122 & 1))
          goto LABEL_375;
        v116 = v121;
      }
      rawValue = v682._rawValue;
      if ((v120 & 1) != 0)
      {
        v123 = *((_QWORD *)v682._rawValue + 7);
LABEL_32:
        v124 = v123 + 16 * v116;
        swift_bridgeObjectRelease();
        *(_BYTE *)v124 = v111;
        *(_QWORD *)(v124 + 8) = v112;
        goto LABEL_36;
      }
      *((_QWORD *)v682._rawValue + (v116 >> 6) + 8) |= 1 << v116;
      *(_QWORD *)(rawValue[6] + 8 * v116) = v109;
      v125 = rawValue[7] + 16 * v116;
      *(_BYTE *)v125 = v111;
      *(_QWORD *)(v125 + 8) = v112;
      v126 = rawValue[2];
      v127 = __OFADD__(v126, 1);
      v128 = v126 + 1;
      if (v127)
      {
        __break(1u);
LABEL_332:
        __break(1u);
LABEL_333:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_58;
      }
      rawValue[2] = v128;
      goto LABEL_35;
    }
    v635 = rawValue;
    v129 = v642;
    v130 = swift_isUniquelyReferenced_nonNull_native();
    v682._rawValue = v129;
    v116 = specialized __RawDictionaryStorage.find<A>(_:)(v109);
    v132 = v129[2];
    v133 = (v131 & 1) == 0;
    v134 = v132 + v133;
    if (__OFADD__(v132, v133))
      goto LABEL_348;
    v135 = v131;
    if (v129[3] >= v134)
    {
      rawValue = v635;
      if ((v130 & 1) != 0)
        goto LABEL_44;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], ChangeRecord>);
      _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v134, v130);
      v136 = specialized __RawDictionaryStorage.find<A>(_:)(v109);
      if ((v135 & 1) != (v137 & 1))
        goto LABEL_375;
      v116 = v136;
    }
    rawValue = v635;
LABEL_44:
    v138 = v682._rawValue;
    v642 = v682._rawValue;
    if ((v135 & 1) != 0)
    {
      v123 = *((_QWORD *)v682._rawValue + 7);
      goto LABEL_32;
    }
    *((_QWORD *)v682._rawValue + (v116 >> 6) + 8) |= 1 << v116;
    *(_QWORD *)(v138[6] + 8 * v116) = v109;
    v139 = v138[7] + 16 * v116;
    *(_BYTE *)v139 = v111;
    *(_QWORD *)(v139 + 8) = v112;
    v140 = v138[2];
    v127 = __OFADD__(v140, 1);
    v141 = v140 + 1;
    if (v127)
      goto LABEL_357;
    v138[2] = v141;
LABEL_35:
    swift_bridgeObjectRetain();
LABEL_36:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v101)
      goto LABEL_6;
LABEL_7:
    v106 = v102 + 1;
    if (__OFADD__(v102, 1))
      goto LABEL_332;
    if (v106 >= v677)
      break;
    v107 = *(_QWORD *)(v675 + 8 * v106);
    ++v102;
    if (!v107)
    {
      v102 = v106 + 1;
      if (v106 + 1 >= v677)
        break;
      v107 = *(_QWORD *)(v675 + 8 * v102);
      if (!v107)
      {
        v102 = v106 + 2;
        if (v106 + 2 >= v677)
          break;
        v107 = *(_QWORD *)(v675 + 8 * v102);
        if (!v107)
        {
          v102 = v106 + 3;
          if (v106 + 3 >= v677)
            break;
          v107 = *(_QWORD *)(v675 + 8 * v102);
          if (!v107)
          {
            v108 = v106 + 4;
            if (v108 >= v677)
              break;
            v107 = *(_QWORD *)(v675 + 8 * v108);
            if (v107)
            {
              v102 = v108;
              goto LABEL_22;
            }
            while (1)
            {
              v102 = v108 + 1;
              if (__OFADD__(v108, 1))
                break;
              if (v102 >= v677)
                goto LABEL_49;
              v107 = *(_QWORD *)(v675 + 8 * v102);
              ++v108;
              if (v107)
                goto LABEL_22;
            }
LABEL_346:
            __break(1u);
LABEL_347:
            __break(1u);
LABEL_348:
            __break(1u);
LABEL_349:
            __break(1u);
LABEL_350:
            __break(1u);
LABEL_351:
            __break(1u);
LABEL_352:
            __break(1u);
            goto LABEL_353;
          }
        }
      }
    }
LABEL_22:
    v101 = (v107 - 1) & v107;
  }
LABEL_49:
  swift_release();
  if (!rawValue[2])
  {
LABEL_58:
    swift_bridgeObjectRelease();
    if (!v642[2])
      goto LABEL_73;
    v172 = v624;
    outlined init with copy of StorableValue(v627, v624, type metadata accessor for KeyedFirstMatchingRecordCache);
    v173 = Description;
    v174 = v625;
    v175 = v631;
    Description[2](v625, v172, v631);
    outlined destroy of StorableValue(v172, type metadata accessor for KeyedFirstMatchingRecordCache);
    v176 = MaterializedView.name.getter();
    v178 = v177;
    ((void (*)(char *, ValueMetadata *))v173[1])(v174, v175);
    specialized _arrayForceCast<A, B>(_:)();
    v673 = v179;
    static KeyedFirstMatchingRecordCache.columnNames(groupBySchema:payloadSchema:)();
    v181 = v180;
    static String._createEmpty(withInitialCapacity:)(41);
    swift_bridgeObjectRelease();
    v682._rawValue = (void *)0xD000000000000010;
    v683 = 0x800000018DCC3F10;
    v182._countAndFlagsBits = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v176, v178, 27, 0xD000000000000019, (void *)0x800000018DCC3E90);
    String.append(_:)(v182);
    swift_bridgeObjectRelease();
    v183._countAndFlagsBits = 10272;
    v183._object = (void *)0xE200000000000000;
    String.append(_:)(v183);
    v184 = specialized Array.count.getter(v181);
    v667 = (uint64_t *)v181;
    if (v184)
    {
      v679 = v178;
      v684 = specialized ContiguousArray.init()();
      specialized ContiguousArray.reserveCapacity(_:)(v184);
      if (v184 < 0)
      {
LABEL_365:
        __break(1u);
        goto LABEL_366;
      }
      v185 = (void **)(v181 + 40);
      v186 = v184;
      do
      {
        v187 = (uint64_t)*(v185 - 1);
        v188 = *v185;
        swift_bridgeObjectRetain();
        static String._createEmpty(withInitialCapacity:)(4);
        swift_bridgeObjectRelease();
        v680 = 34;
        v681 = 0xE100000000000000;
        v189._countAndFlagsBits = v187;
        v189._object = v188;
        String.append(_:)(v189);
        v190._countAndFlagsBits = 34;
        v190._object = (void *)0xE100000000000000;
        String.append(_:)(v190);
        v191 = String.init(stringInterpolation:)();
        v193 = v192;
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v194 = *(_QWORD *)(v684 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v194);
        v195 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v194, v191, v193);
        destructiveProjectEnumData for StorableValue(v195, v196);
        v185 += 2;
        --v186;
      }
      while (v186);
      v197 = v684;
    }
    else
    {
      specialized static Array._allocateUninitialized(_:)(0);
      v197 = v264;
    }
    v680 = v197;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v265 = BidirectionalCollection<>.joined(separator:)();
    v267 = v266;
    swift_bridgeObjectRelease();
    v268._countAndFlagsBits = v265;
    v268._object = v267;
    String.append(_:)(v268);
    swift_bridgeObjectRelease();
    v269._countAndFlagsBits = 0x4156202020200A29;
    v269._object = (void *)0xEF2028205345554CLL;
    String.append(_:)(v269);
    if (v184)
    {
      v680 = specialized ContiguousArray.init()();
      specialized ContiguousArray.reserveCapacity(_:)(v184);
      v270 = (uint64_t)v660;
      if (v184 < 0)
      {
LABEL_366:
        __break(1u);
        goto LABEL_367;
      }
      v271 = v674;
      do
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v272 = *(_QWORD *)(v680 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v272);
        v273 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v272, 63, 0xE100000000000000);
        destructiveProjectEnumData for StorableValue(v273, v274);
        --v184;
      }
      while (v184);
      v275 = v680;
    }
    else
    {
      specialized static Array._allocateUninitialized(_:)(0);
      v275 = v276;
      v271 = v674;
      v270 = (uint64_t)v660;
    }
    v680 = v275;
    v277 = BidirectionalCollection<>.joined(separator:)();
    v279 = v278;
    swift_bridgeObjectRelease();
    v280._countAndFlagsBits = v277;
    v280._object = v279;
    String.append(_:)(v280);
    swift_bridgeObjectRelease();
    v281._countAndFlagsBits = 10528;
    v281._object = (void *)0xE200000000000000;
    String.append(_:)(v281);
    v652 = (char *)String.init(stringInterpolation:)();
    v664 = v282;
    v283 = v653;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v284 = 0;
    v285 = (uint64_t)(v642 + 8);
    v286 = 1 << *((_BYTE *)v642 + 32);
    if (v286 < 64)
      v287 = ~(-1 << v286);
    else
      v287 = -1;
    v288 = v287 & v642[8];
    v289 = (unint64_t)(v286 + 63) >> 6;
    v666 = (char *)(v283 + 64);
    v654 = v667 + 7;
    v651 = v642 + 8;
    v650 = v289;
    if (v288)
      goto LABEL_90;
LABEL_91:
    v127 = __OFADD__(v284, 1);
    v291 = (int64_t)(v284 + 1);
    if (v127)
    {
LABEL_368:
      __break(1u);
      goto LABEL_369;
    }
    if (v291 >= v289)
      goto LABEL_337;
    v292 = *(_QWORD *)(v285 + 8 * v291);
    if (!v292)
    {
      v293 = v291 + 1;
      if (v291 + 1 >= v289)
        goto LABEL_337;
      v292 = *(_QWORD *)(v285 + 8 * v293);
      if (v292)
        goto LABEL_102;
      v293 = v291 + 2;
      if (v291 + 2 >= v289)
        goto LABEL_337;
      v292 = *(_QWORD *)(v285 + 8 * v293);
      if (v292)
        goto LABEL_102;
      v293 = v291 + 3;
      if (v291 + 3 >= v289)
        goto LABEL_337;
      v292 = *(_QWORD *)(v285 + 8 * v293);
      if (v292)
        goto LABEL_102;
      v293 = v291 + 4;
      if (v291 + 4 >= v289)
        goto LABEL_337;
      v292 = *(_QWORD *)(v285 + 8 * v293);
      if (v292)
      {
LABEL_102:
        v291 = v293;
      }
      else
      {
        do
        {
          v291 = v293 + 1;
          if (__OFADD__(v293, 1))
            goto LABEL_374;
          if (v291 >= v289)
            goto LABEL_337;
          v292 = *(_QWORD *)(v285 + 8 * v291);
          ++v293;
        }
        while (!v292);
      }
    }
    v655 = (v292 - 1) & v292;
    v663 = (char *)v291;
    for (j = __clz(__rbit64(v292)) + (v291 << 6); ; j = __clz(__rbit64(v288)) | ((_QWORD)v284 << 6))
    {
      v294 = *(_QWORD *)(v642[6] + 8 * j);
      v295 = *(uint64_t **)(v642[7] + 16 * j + 8);
      v296 = v626;
      outlined init with copy of StorableValue(v627, v626, type metadata accessor for KeyedFirstMatchingRecordCache);
      v297 = *(uint64_t **)(v296 + v618[11]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v665 = v297;
      swift_retain();
      outlined destroy of StorableValue(v296, type metadata accessor for KeyedFirstMatchingRecordCache);
      v672 = v295;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      specialized static Array._allocateUninitialized(_:)(0);
      v679 = Dictionary.init(dictionaryLiteral:)();
      v675 = v294;
      v298 = specialized Array.count.getter(v294);
      v299 = v673;
      v300 = specialized Array.count.getter(v673);
      if (v298 != v300)
      {
        v601 = v300;
        swift_bridgeObjectRelease();
        type metadata accessor for MetadataSQLError(0);
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
        swift_allocError();
        *v602 = v601;
        v602[1] = v298;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        goto LABEL_315;
      }
      v301 = specialized Array.count.getter(v299);
      swift_bridgeObjectRetain();
      for (k = 0; ; k = v677)
      {
        if (k == v301)
        {
          v303 = 1;
          v304 = v301;
          v305 = (uint64_t)v659;
        }
        else
        {
          v306 = v673;
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(k, 1, v673);
          outlined init with copy of Date?(v306+ ((*(unsigned __int8 *)(v662 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v662 + 80))+ *(_QWORD *)(v662 + 72) * k, v270, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
          v304 = k + 1;
          if (__OFADD__(k, 1))
          {
            __break(1u);
LABEL_343:
            __break(1u);
LABEL_344:
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_326;
          }
          v307 = v645;
          outlined init with take of UUID?(v270, v645, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
          v308 = (uint64_t)&v661[*(int *)(v271 + 48)];
          outlined init with take of UUID?(v307, v308, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
          v305 = (uint64_t)v659;
          v309 = (uint64_t)v659 + *(int *)(v271 + 48);
          *v659 = k;
          outlined init with take of UUID?(v308, v309, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
          v303 = 0;
        }
        __swift_storeEnumTagSinglePayload(v305, v303, 1, v271);
        v310 = v305;
        v311 = v658;
        outlined init with take of UUID?(v310, (uint64_t)v658, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: (columnName: String, dataType: SQLDataType))?);
        if (__swift_getEnumTagSinglePayload((uint64_t)v311, 1, v271) == 1)
          break;
        v677 = v304;
        v312 = *v311;
        v313 = (uint64_t *)((char *)v311 + *(int *)(v271 + 48));
        v315 = *v313;
        v314 = v313[1];
        v316 = v671;
        v317 = *(int *)(v671 + 48);
        v318 = (char *)v313 + v317;
        v319 = v657;
        v320 = (char *)v657 + v317;
        *v657 = v315;
        v319[1] = v314;
        v321 = type metadata accessor for SQLDataType();
        v322 = (void (*)(char *, char *, ValueMetadata *))*((_QWORD *)v321[-1].Description + 4);
        v322(v320, v318, v321);
        v323 = v670;
        v324 = (char *)v670 + *(int *)(v316 + 48);
        *v670 = v315;
        v323[1] = v314;
        v322(v324, v320, v321);
        v325 = v675;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v312, 1, v675);
        v326 = *(_QWORD *)(v676 + 72);
        outlined init with copy of StorableValue(v325+ ((*(unsigned __int8 *)(v676 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v676 + 80))+ v326 * v312, v669, type metadata accessor for StorableValue);
        swift_bridgeObjectRetain();
        v327 = (_QWORD *)v679;
        v328 = swift_isUniquelyReferenced_nonNull_native();
        v682._rawValue = v327;
        v329 = specialized __RawDictionaryStorage.find<A>(_:)();
        v331 = v327[2];
        v332 = (v330 & 1) == 0;
        v333 = v331 + v332;
        if (__OFADD__(v331, v332))
        {
          __break(1u);
          goto LABEL_327;
        }
        v334 = v329;
        v335 = v330;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
        v336 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v328, v333);
        v337 = (uint64_t)v656;
        if (v336)
        {
          v338 = specialized __RawDictionaryStorage.find<A>(_:)();
          if ((v335 & 1) != (v339 & 1))
            goto LABEL_376;
          v334 = v338;
        }
        v679 = (uint64_t)v682._rawValue;
        if ((v335 & 1) != 0)
        {
          v340 = v326 * v334;
          v341 = *((_QWORD *)v682._rawValue + 7) + v326 * v334;
          v342 = v682._rawValue;
          outlined init with take of StorableValue(v341, v337, type metadata accessor for StorableValue);
          outlined init with take of StorableValue(v669, v342[7] + v340, type metadata accessor for StorableValue);
          __swift_storeEnumTagSinglePayload(v337, 0, 1, v678);
        }
        else
        {
          specialized _NativeDictionary._insert(at:key:value:)(v334, v315, v314, v669, (uint64_t)v682._rawValue);
          __swift_storeEnumTagSinglePayload(v337, 1, 1, v678);
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        outlined destroy of UUID?(v337, &demangling cache variable for type metadata for StorableValue?);
        swift_bridgeObjectRelease();
        outlined destroy of UUID?((uint64_t)v670, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        v271 = v674;
        v270 = (uint64_t)v660;
      }
      swift_bridgeObjectRelease();
      v343 = v672;
      v344 = v653;
      if (v672[2] != *(_QWORD *)(v653 + 16))
      {
        swift_bridgeObjectRelease();
        type metadata accessor for MetadataSQLError(0);
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
        swift_allocError();
        v603 = v343[2];
        *v604 = *(_QWORD *)(v344 + 16);
        v604[1] = v603;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        goto LABEL_315;
      }
      v345 = 1 << *(_BYTE *)(v653 + 32);
      if (v345 < 64)
        v346 = ~(-1 << v345);
      else
        v346 = -1;
      v347 = v346 & *(_QWORD *)(v653 + 64);
      v668 = (char *)((unint64_t)(v345 + 63) >> 6);
      v647 = (uint64_t *)(v668 - 1);
      swift_bridgeObjectRetain();
      v348 = 0;
      if (v347)
      {
LABEL_124:
        v349 = __clz(__rbit64(v347));
        v350 = (v347 - 1) & v347;
        v351 = v349 | (v348 << 6);
LABEL_125:
        v352 = *(_QWORD *)(v653 + 56);
        v353 = (_QWORD *)(*(_QWORD *)(v653 + 48) + 16 * v351);
        v354 = v353[1];
        v355 = (uint64_t)v643;
        *v643 = *v353;
        *(_QWORD *)(v355 + 8) = v354;
        v356 = type metadata accessor for SQLDataType();
        v357 = v356[-1].Description;
        v358 = v352 + v357[9] * v351;
        v359 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
        ((void (*)(uint64_t, uint64_t, ValueMetadata *))v357[2])(v355 + *(int *)(v359 + 48), v358, v356);
        __swift_storeEnumTagSinglePayload(v355, 0, 1, v359);
        swift_bridgeObjectRetain();
        goto LABEL_132;
      }
      while (2)
      {
        v360 = v348 + 1;
        if (__OFADD__(v348, 1))
          goto LABEL_351;
        if (v360 >= (uint64_t)v668)
        {
          v355 = (uint64_t)v643;
        }
        else
        {
          v361 = *(_QWORD *)&v666[8 * v360];
          v355 = (uint64_t)v643;
          if (v361)
            goto LABEL_129;
          v348 += 2;
          if (v360 + 1 >= (uint64_t)v668)
          {
            v348 = v360;
          }
          else
          {
            v361 = *(_QWORD *)&v666[8 * v348];
            if (v361)
            {
              ++v360;
LABEL_129:
              v350 = (v361 - 1) & v361;
              v351 = __clz(__rbit64(v361)) + (v360 << 6);
              v348 = v360;
              goto LABEL_125;
            }
            if (v360 + 2 < (uint64_t)v668)
            {
              v361 = *(_QWORD *)&v666[8 * v360 + 16];
              if (v361)
              {
                v360 += 2;
                goto LABEL_129;
              }
              v390 = v360 + 3;
              if (v360 + 3 >= (uint64_t)v668)
              {
                v348 = v360 + 2;
              }
              else
              {
                v361 = *(_QWORD *)&v666[8 * v390];
                if (v361)
                {
                  v360 += 3;
                  goto LABEL_129;
                }
                while (1)
                {
                  v360 = v390 + 1;
                  if (__OFADD__(v390, 1))
                    goto LABEL_372;
                  if (v360 >= (uint64_t)v668)
                    break;
                  v361 = *(_QWORD *)&v666[8 * v360];
                  ++v390;
                  if (v361)
                    goto LABEL_129;
                }
                v348 = (uint64_t)v647;
              }
            }
          }
        }
        v362 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
        __swift_storeEnumTagSinglePayload(v355, 1, 1, v362);
        v350 = 0;
LABEL_132:
        v363 = v640;
        outlined init with take of UUID?(v355, (uint64_t)v640, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLDataType)?);
        v364 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
        if (__swift_getEnumTagSinglePayload((uint64_t)v363, 1, v364) != 1)
        {
          v677 = v350;
          v366 = *v363;
          v365 = v363[1];
          v367 = (char *)v363 + *(int *)(v364 + 48);
          v368 = v672;
          v369 = v638;
          if (v672[2])
          {
            swift_bridgeObjectRetain();
            v370 = specialized __RawDictionaryStorage.find<A>(_:)();
            if ((v371 & 1) != 0)
            {
              outlined init with copy of StorableValue(v368[7] + *(_QWORD *)(v676 + 72) * v370, v369, type metadata accessor for StorableValue);
              v372 = 0;
            }
            else
            {
              v372 = 1;
            }
            v373 = v678;
            __swift_storeEnumTagSinglePayload(v369, v372, 1, v678);
            swift_bridgeObjectRelease();
            if (__swift_getEnumTagSinglePayload(v369, 1, v373) == 1)
              goto LABEL_314;
            v374 = v648;
            outlined init with take of StorableValue(v369, v648, type metadata accessor for StorableValue);
            outlined init with copy of StorableValue(v374, v649, type metadata accessor for StorableValue);
            v375 = (_QWORD *)v679;
            v376 = swift_isUniquelyReferenced_nonNull_native();
            v682._rawValue = v375;
            v377 = specialized __RawDictionaryStorage.find<A>(_:)();
            v379 = v375[2];
            v380 = (v378 & 1) == 0;
            v381 = v379 + v380;
            if (__OFADD__(v379, v380))
            {
              __break(1u);
              goto LABEL_346;
            }
            v382 = v377;
            v383 = v378;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
            if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v376, v381))
            {
              v384 = specialized __RawDictionaryStorage.find<A>(_:)();
              if ((v383 & 1) != (v385 & 1))
                goto LABEL_376;
              v382 = v384;
            }
            v679 = (uint64_t)v682._rawValue;
            if ((v383 & 1) != 0)
            {
              v386 = *(_QWORD *)(v676 + 72) * v382;
              v387 = v637;
              v388 = v682._rawValue;
              outlined init with take of StorableValue(*((_QWORD *)v682._rawValue + 7) + v386, v637, type metadata accessor for StorableValue);
              outlined init with take of StorableValue(v649, v388[7] + v386, type metadata accessor for StorableValue);
              __swift_storeEnumTagSinglePayload(v387, 0, 1, v678);
            }
            else
            {
              specialized _NativeDictionary._insert(at:key:value:)(v382, v366, v365, v649, (uint64_t)v682._rawValue);
              v387 = v637;
              __swift_storeEnumTagSinglePayload(v637, 1, 1, v678);
              swift_bridgeObjectRetain();
            }
            swift_bridgeObjectRelease();
            outlined destroy of UUID?(v387, &demangling cache variable for type metadata for StorableValue?);
            outlined destroy of StorableValue(v648, type metadata accessor for StorableValue);
            swift_bridgeObjectRelease();
            v389 = type metadata accessor for SQLDataType();
            (*((void (**)(char *, ValueMetadata *))v389[-1].Description + 1))(v367, v389);
            v347 = v677;
            if (v677)
              goto LABEL_124;
            continue;
          }
          __swift_storeEnumTagSinglePayload(v638, 1, 1, v678);
LABEL_314:
          swift_bridgeObjectRelease();
          outlined destroy of UUID?(v369, &demangling cache variable for type metadata for StorableValue?);
          type metadata accessor for MetadataSQLError(0);
          lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
          swift_allocError();
          *v578 = v366;
          v578[1] = v365;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          swift_release();
          v579 = type metadata accessor for SQLDataType();
          (*((void (**)(char *, ValueMetadata *))v579[-1].Description + 1))(v367, v579);
LABEL_315:
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_326;
        }
        break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      specialized static Array._allocateUninitialized(_:)(0);
      v682._rawValue = v391;
      v392 = v667;
      v393 = specialized Array.count.getter(v667);
      if (!v393)
        goto LABEL_177;
      v677 = v393;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v392);
      v301 = v392[4];
      v314 = v392[5];
      v394 = v679;
      v395 = *(_QWORD *)(v679 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v395 || (v396 = specialized __RawDictionaryStorage.find<A>(_:)(), (v397 & 1) == 0))
      {
LABEL_327:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for MetadataSQLError(0);
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
        swift_allocError();
        *v596 = v301;
        v596[1] = v314;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        goto LABEL_326;
      }
      v398 = v396;
      v399 = v394 + 64;
      v400 = v654;
      v401 = 1;
      v402 = v394;
      v403 = v677;
LABEL_167:
      v404 = *(_DWORD *)(v402 + 36);
      swift_bridgeObjectRelease();
      if ((v398 & 0x8000000000000000) != 0 || (uint64_t)v398 >= 1 << *(_BYTE *)(v679 + 32))
        goto LABEL_359;
      if (((*(_QWORD *)(v399 + ((v398 >> 3) & 0xFFFFFFFFFFFFF8)) >> v398) & 1) == 0)
        break;
      if (v404 != *(_DWORD *)(v679 + 36))
        goto LABEL_361;
      v405 = v632;
      outlined init with copy of StorableValue(*(_QWORD *)(v679 + 56) + *(_QWORD *)(v676 + 72) * v398, v632, type metadata accessor for StorableValue);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      v406 = *((_QWORD *)v682._rawValue + 2);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v406, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v406, v405);
      destructiveProjectEnumData for StorableValue(v407, v408);
      if (v403 != v401)
      {
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v401, 1, v667);
        if (__OFADD__(v401, 1))
          goto LABEL_362;
        v301 = *(v400 - 1);
        v314 = *v400;
        v402 = v679;
        v409 = *(_QWORD *)(v679 + 16);
        swift_bridgeObjectRetain();
        if (!v409)
          goto LABEL_327;
        v398 = specialized __RawDictionaryStorage.find<A>(_:)();
        ++v401;
        v400 += 2;
        if ((v410 & 1) == 0)
          goto LABEL_327;
        goto LABEL_167;
      }
      swift_bridgeObjectRelease();
LABEL_177:
      swift_bridgeObjectRelease();
      v271 = v674;
      v270 = (uint64_t)v660;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v411._countAndFlagsBits = (uint64_t)v652;
      v411._object = v664;
      SQLExpressionEvaluator.execute(sql:bindingValues:)(v411, v682);
      v641 = v412;
      if (v412)
        goto LABEL_344;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v285 = (uint64_t)v651;
      v289 = v650;
      v284 = v663;
      v288 = v655;
      if (!v655)
        goto LABEL_91;
LABEL_90:
      v655 = (v288 - 1) & v288;
      v663 = v284;
    }
LABEL_360:
    __break(1u);
LABEL_361:
    __break(1u);
LABEL_362:
    __break(1u);
LABEL_363:
    __break(1u);
LABEL_364:
    __break(1u);
    goto LABEL_365;
  }
  v635 = rawValue;
  v142 = v650;
  outlined init with copy of StorableValue(v627, v650, type metadata accessor for KeyedFirstMatchingRecordCache);
  v143 = Description;
  v144 = (uint64_t)v652;
  v145 = v631;
  Description[2](v652, v142, v631);
  outlined destroy of StorableValue(v142, type metadata accessor for KeyedFirstMatchingRecordCache);
  v146 = MaterializedView.name.getter();
  v148 = v147;
  ((void (*)(uint64_t, ValueMetadata *))v143[1])(v144, v145);
  specialized _arrayForceCast<A, B>(_:)();
  v150 = v149;
  static KeyedFirstMatchingRecordCache.columnNames(groupBySchema:payloadSchema:)();
  v152 = v151;
  v652 = (char *)v150;
  v613 = specialized Array.count.getter(v150);
  v153 = v674;
  v620 = v152;
  if (v613 <= 0)
  {
    static String._createEmpty(withInitialCapacity:)(20);
    swift_bridgeObjectRelease();
    v682._rawValue = (void *)0x20455441445055;
    v683 = 0xE700000000000000;
    v198._countAndFlagsBits = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v146, v148, 27, 0xD000000000000019, (void *)0x800000018DCC3E90);
    String.append(_:)(v198);
    swift_bridgeObjectRelease();
    v199._countAndFlagsBits = 0x2020200A5445530ALL;
    v199._object = (void *)0xE900000000000020;
    String.append(_:)(v199);
    v200 = specialized Array.count.getter(v152);
    if (v200)
    {
      v201 = v200;
      v684 = specialized ContiguousArray.init()();
      specialized ContiguousArray.reserveCapacity(_:)(v201);
      if (v201 < 0)
      {
LABEL_367:
        __break(1u);
        goto LABEL_368;
      }
      v202 = (void **)(v152 + 40);
      do
      {
        v203 = (uint64_t)*(v202 - 1);
        v204 = *v202;
        swift_bridgeObjectRetain();
        static String._createEmpty(withInitialCapacity:)(8);
        swift_bridgeObjectRelease();
        v680 = 34;
        v681 = 0xE100000000000000;
        v205._countAndFlagsBits = v203;
        v205._object = v204;
        String.append(_:)(v205);
        v206._countAndFlagsBits = 0x3F203D2022;
        v206._object = (void *)0xE500000000000000;
        String.append(_:)(v206);
        v207 = String.init(stringInterpolation:)();
        v209 = v208;
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v210 = *(_QWORD *)(v684 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v210);
        v211 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v210, v207, v209);
        destructiveProjectEnumData for StorableValue(v211, v212);
        v202 += 2;
        --v201;
      }
      while (v201);
      v213 = v684;
      v153 = v674;
    }
    else
    {
      specialized static Array._allocateUninitialized(_:)(0);
      v213 = v413;
    }
    v680 = v213;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v414 = BidirectionalCollection<>.joined(separator:)();
    v416 = v415;
    swift_bridgeObjectRelease();
    v417._countAndFlagsBits = v414;
    v417._object = v416;
    String.append(_:)(v417);
    swift_bridgeObjectRelease();
    v608 = String.init(stringInterpolation:)();
    v612 = v418;
    goto LABEL_186;
  }
  v682._rawValue = (void *)static String._createEmpty(withInitialCapacity:)(37);
  v683 = v154;
  v155._countAndFlagsBits = 0x20455441445055;
  v155._object = (void *)0xE700000000000000;
  String.append(_:)(v155);
  v156._countAndFlagsBits = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v146, v148, 27, 0xD000000000000019, (void *)0x800000018DCC3E90);
  String.append(_:)(v156);
  swift_bridgeObjectRelease();
  v157._countAndFlagsBits = 0x2020200A5445530ALL;
  v157._object = (void *)0xE900000000000020;
  String.append(_:)(v157);
  v158 = specialized Array.count.getter(v152);
  if (!v158)
  {
    specialized static Array._allocateUninitialized(_:)(0);
    v171 = v214;
    goto LABEL_70;
  }
  v159 = v158;
  v684 = specialized ContiguousArray.init()();
  specialized ContiguousArray.reserveCapacity(_:)(v159);
  if (v159 < 0)
    goto LABEL_363;
  v160 = (void **)(v152 + 40);
  do
  {
    v161 = (uint64_t)*(v160 - 1);
    v162 = *v160;
    swift_bridgeObjectRetain();
    static String._createEmpty(withInitialCapacity:)(8);
    swift_bridgeObjectRelease();
    v680 = 34;
    v681 = 0xE100000000000000;
    v163._countAndFlagsBits = v161;
    v163._object = v162;
    String.append(_:)(v163);
    v164._countAndFlagsBits = 0x3F203D2022;
    v164._object = (void *)0xE500000000000000;
    String.append(_:)(v164);
    v165 = String.init(stringInterpolation:)();
    v167 = v166;
    swift_bridgeObjectRelease();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    v168 = *(_QWORD *)(v684 + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v168);
    v169 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v168, v165, v167);
    destructiveProjectEnumData for StorableValue(v169, v170);
    v160 += 2;
    --v159;
  }
  while (v159);
  v171 = v684;
LABEL_70:
  v680 = v171;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v215 = BidirectionalCollection<>.joined(separator:)();
  v217 = v216;
  swift_bridgeObjectRelease();
  v218._countAndFlagsBits = v215;
  v218._object = v217;
  String.append(_:)(v218);
  swift_bridgeObjectRelease();
  v219._countAndFlagsBits = 0x282045524548570ALL;
  v219._object = (void *)0xED0000202020200ALL;
  String.append(_:)(v219);
  v220 = v641;
  PlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_14BiomeSQLParser11SQLDataTypeOtG_SSsAE_pTg506_sSS14d11SQLParser11fg5OSSs5c186_pIggnozo_SS_ACtSSsAD_pIegnrzr_TR04_s12a146Streams30KeyedQueryPlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm((uint64_t)v652, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
  v641 = v220;
  if (v220)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_326;
  }
  v680 = PlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm;
  v222 = BidirectionalCollection<>.joined(separator:)();
  v224 = v223;
  swift_bridgeObjectRelease();
  v225._countAndFlagsBits = v222;
  v225._object = v224;
  String.append(_:)(v225);
  swift_bridgeObjectRelease();
  v226._countAndFlagsBits = 10506;
  v226._object = (void *)0xE200000000000000;
  String.append(_:)(v226);
  v608 = String.init(stringInterpolation:)();
  v612 = v227;
  v153 = v674;
LABEL_186:
  v419 = v653;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v420 = 0;
  v421 = v635;
  v422 = v635 + 8;
  v423 = 1 << *((_BYTE *)v635 + 32);
  if (v423 < 64)
    v424 = ~(-1 << v423);
  else
    v424 = -1;
  v425 = v424 & v635[8];
  v426 = (unint64_t)(v423 + 63) >> 6;
  v617 = v419 + 64;
  v609 = (uint64_t *)(v620 + 56);
  v427 = (uint64_t)v668;
  v607 = v635 + 8;
  v606 = v426;
  while (2)
  {
    if (!v425)
    {
      v127 = __OFADD__(v420, 1);
      v429 = v420 + 1;
      if (v127)
        goto LABEL_364;
      if (v429 >= v426)
        goto LABEL_333;
      v430 = v422[v429];
      if (v430)
        goto LABEL_204;
      v431 = v429 + 1;
      if (v429 + 1 >= v426)
        goto LABEL_333;
      v430 = v422[v431];
      if (v430)
        goto LABEL_203;
      v431 = v429 + 2;
      if (v429 + 2 >= v426)
        goto LABEL_333;
      v430 = v422[v431];
      if (v430)
        goto LABEL_203;
      v431 = v429 + 3;
      if (v429 + 3 >= v426)
        goto LABEL_333;
      v430 = v422[v431];
      if (v430)
        goto LABEL_203;
      v431 = v429 + 4;
      if (v429 + 4 >= v426)
        goto LABEL_333;
      v430 = v422[v431];
      if (v430)
      {
LABEL_203:
        v429 = v431;
LABEL_204:
        v610 = (v430 - 1) & v430;
        v611 = v429;
        v428 = __clz(__rbit64(v430)) + (v429 << 6);
        goto LABEL_205;
      }
      while (1)
      {
        v429 = v431 + 1;
        if (__OFADD__(v431, 1))
          goto LABEL_373;
        if (v429 >= v426)
          goto LABEL_333;
        v430 = v422[v429];
        ++v431;
        if (v430)
          goto LABEL_204;
      }
    }
    v610 = (v425 - 1) & v425;
    v611 = v420;
    v428 = __clz(__rbit64(v425)) | (v420 << 6);
LABEL_205:
    v432 = *(_QWORD *)(v421[6] + 8 * v428);
    v433 = *(_QWORD *)(v421[7] + 16 * v428 + 8);
    v434 = v629;
    outlined init with copy of StorableValue(v627, v629, type metadata accessor for KeyedFirstMatchingRecordCache);
    v435 = *(_QWORD *)(v434 + v618[11]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v636 = v435;
    swift_retain();
    outlined destroy of StorableValue(v434, type metadata accessor for KeyedFirstMatchingRecordCache);
    v639 = v433;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized static Array._allocateUninitialized(_:)(0);
    v436 = Dictionary.init(dictionaryLiteral:)();
    v677 = v432;
    v119 = specialized Array.count.getter(v432);
    if (v119 != v613)
      goto LABEL_329;
    v437 = specialized Array.count.getter(v652);
    swift_bridgeObjectRetain();
    v438 = 0;
    v675 = v437;
    while (1)
    {
      if (v438 == v437)
      {
        v439 = 1;
        v440 = v437;
        v441 = (uint64_t)v667;
      }
      else
      {
        v442 = (uint64_t)v652;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v438, 1, v652);
        outlined init with copy of Date?(v442+ ((*(unsigned __int8 *)(v662 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v662 + 80))+ *(_QWORD *)(v662 + 72) * v438, v427, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        if (__OFADD__(v438, 1))
        {
          __break(1u);
LABEL_341:
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_326;
        }
        v443 = v427;
        v444 = (uint64_t)v651;
        outlined init with take of UUID?(v443, (uint64_t)v651, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        v445 = (uint64_t)&v661[*(int *)(v153 + 48)];
        outlined init with take of UUID?(v444, v445, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        v441 = (uint64_t)v667;
        v446 = (uint64_t)v667 + *(int *)(v153 + 48);
        *v667 = v438;
        outlined init with take of UUID?(v445, v446, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        v439 = 0;
        v440 = v438 + 1;
      }
      v447 = (uint64_t *)v666;
      __swift_storeEnumTagSinglePayload(v441, v439, 1, v153);
      outlined init with take of UUID?(v441, (uint64_t)v447, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: (columnName: String, dataType: SQLDataType))?);
      if (__swift_getEnumTagSinglePayload((uint64_t)v447, 1, v153) == 1)
        break;
      v679 = v440;
      v448 = *v447;
      v449 = (uint64_t *)((char *)v447 + *(int *)(v153 + 48));
      v450 = *v449;
      v451 = v449[1];
      v452 = (_QWORD *)v436;
      v453 = v671;
      v454 = *(int *)(v671 + 48);
      v455 = (char *)v449 + v454;
      v456 = v665;
      v457 = (char *)v665 + v454;
      *v665 = v450;
      v456[1] = v451;
      v458 = type metadata accessor for SQLDataType();
      v459 = (void (*)(char *, char *, ValueMetadata *))*((_QWORD *)v458[-1].Description + 4);
      v459(v457, v455, v458);
      v460 = v672;
      v461 = (char *)v672 + *(int *)(v453 + 48);
      *v672 = v450;
      v460[1] = v451;
      v459(v461, v457, v458);
      v462 = v677;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v448, 1, v677);
      v463 = *(_QWORD *)(v676 + 72);
      outlined init with copy of StorableValue(v462+ ((*(unsigned __int8 *)(v676 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v676 + 80))+ v463 * v448, v673, type metadata accessor for StorableValue);
      swift_bridgeObjectRetain();
      v464 = swift_isUniquelyReferenced_nonNull_native();
      v682._rawValue = v452;
      v465 = specialized __RawDictionaryStorage.find<A>(_:)();
      v467 = v452[2];
      v468 = (v466 & 1) == 0;
      v469 = v467 + v468;
      if (__OFADD__(v467, v468))
      {
        __break(1u);
LABEL_337:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_73:
        swift_bridgeObjectRelease();
        if (specialized Array.count.getter(v628) < 1)
          goto LABEL_322;
        v228 = v627;
        v229 = v621;
        outlined init with copy of StorableValue(v627, v621, type metadata accessor for KeyedFirstMatchingRecordCache);
        v230 = *(_QWORD *)(v229 + v618[11]);
        swift_retain();
        outlined destroy of StorableValue(v229, type metadata accessor for KeyedFirstMatchingRecordCache);
        v231 = v622;
        outlined init with copy of StorableValue(v228, v622, type metadata accessor for KeyedFirstMatchingRecordCache);
        v232 = Description;
        v233 = v623;
        v234 = v631;
        Description[2](v623, v231, v631);
        outlined destroy of StorableValue(v231, type metadata accessor for KeyedFirstMatchingRecordCache);
        v235 = MaterializedView.name.getter();
        v237 = v236;
        ((void (*)(char *, ValueMetadata *))v232[1])(v233, v234);
        specialized _arrayForceCast<A, B>(_:)();
        v239 = v238;
        swift_bridgeObjectRelease();
        v678 = v237;
        v240 = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v235, v237, 27, 0xD000000000000019, (void *)0x800000018DCC3E90);
        v242 = v241;
        v243 = MEMORY[0x193FEC5C4]();
        v245 = v244;
        static String._createEmpty(withInitialCapacity:)(49);
        swift_bridgeObjectRelease();
        v682._rawValue = (void *)0xD000000000000022;
        v683 = 0x800000018DCC3EE0;
        v246._countAndFlagsBits = v243;
        v246._object = v245;
        String.append(_:)(v246);
        swift_bridgeObjectRelease();
        v247._countAndFlagsBits = 542002976;
        v247._object = (void *)0xE400000000000000;
        String.append(_:)(v247);
        v248._countAndFlagsBits = v240;
        v248._object = v242;
        String.append(_:)(v248);
        swift_bridgeObjectRelease();
        v249._countAndFlagsBits = 2107424;
        v249._object = (void *)0xE300000000000000;
        String.append(_:)(v249);
        v250 = specialized Array.count.getter(v239);
        if (!v250)
        {
          specialized static Array._allocateUninitialized(_:)(0);
          v263 = v581;
          goto LABEL_319;
        }
        v251 = v250;
        v677 = v230;
        v684 = specialized ContiguousArray.init()();
        specialized ContiguousArray.reserveCapacity(_:)(v251);
        if ((v251 & 0x8000000000000000) == 0)
        {
          v252 = *(unsigned __int8 *)(v662 + 80);
          v676 = v239;
          v253 = v239 + ((v252 + 32) & ~v252);
          v679 = *(_QWORD *)(v662 + 72);
          v254 = v615;
          v255 = (uint64_t)v614;
          do
          {
            outlined init with copy of Date?(v253, v255, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
            outlined init with take of UUID?(v255, (uint64_t)v254, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
            static String._createEmpty(withInitialCapacity:)(4);
            swift_bridgeObjectRelease();
            v680 = 34;
            v681 = 0xE100000000000000;
            String.append(_:)(*v254);
            v256._countAndFlagsBits = 34;
            v256._object = (void *)0xE100000000000000;
            String.append(_:)(v256);
            v257 = String.init(stringInterpolation:)();
            v259 = v258;
            outlined destroy of UUID?((uint64_t)v254, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            v260 = *(_QWORD *)(v684 + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v260);
            v261 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v260, v257, v259);
            destructiveProjectEnumData for StorableValue(v261, v262);
            v253 += v679;
            --v251;
          }
          while (v251);
          v263 = v684;
LABEL_319:
          v680 = v263;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
          lazy protocol witness table accessor for type [String] and conformance [A]();
          v582 = BidirectionalCollection<>.joined(separator:)();
          v584 = v583;
          swift_bridgeObjectRelease();
          v585._countAndFlagsBits = v582;
          v585._object = v584;
          String.append(_:)(v585);
          swift_bridgeObjectRelease();
          v586._countAndFlagsBits = 10528;
          v586._object = (void *)0xE200000000000000;
          String.append(_:)(v586);
          v587 = String.init(stringInterpolation:)();
          v589 = v588;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          specialized static Array._allocateUninitialized(_:)(0);
          v591._rawValue = v590;
          v592._countAndFlagsBits = v587;
          v592._object = v589;
          v593 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v592, v591);
          if (v594)
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_326;
          }
          v628 = v593;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_322:
          swift_bridgeObjectRelease();
          v595 = v618[14];
          if (*(_BYTE *)(v627 + v595) == 1 && *(_QWORD *)(*v616 + 16))
            *(_BYTE *)(v627 + v595) = 0;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[StorableValue] : (value: ChangeRecord, event: CacheEvent)]._Variant);
          Dictionary._Variant.removeAll(keepingCapacity:)(1);
          goto LABEL_326;
        }
LABEL_369:
        __break(1u);
LABEL_370:
        __break(1u);
LABEL_371:
        __break(1u);
LABEL_372:
        __break(1u);
LABEL_373:
        __break(1u);
LABEL_374:
        __break(1u);
LABEL_375:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
LABEL_376:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
LABEL_377:
        _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      v470 = v465;
      v471 = v466;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
      v472 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v464, v469);
      v427 = (uint64_t)v668;
      if (v472)
      {
        v473 = specialized __RawDictionaryStorage.find<A>(_:)();
        if ((v471 & 1) != (v474 & 1))
          goto LABEL_376;
        v470 = v473;
      }
      v436 = (uint64_t)v682._rawValue;
      if ((v471 & 1) != 0)
      {
        v475 = (uint64_t)v664;
        outlined init with take of StorableValue(*((_QWORD *)v682._rawValue + 7) + v463 * v470, (uint64_t)v664, type metadata accessor for StorableValue);
        outlined init with take of StorableValue(v673, *(_QWORD *)(v436 + 56) + v463 * v470, type metadata accessor for StorableValue);
        __swift_storeEnumTagSinglePayload(v475, 0, 1, v678);
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v470, v450, v451, v673, (uint64_t)v682._rawValue);
        v475 = (uint64_t)v664;
        __swift_storeEnumTagSinglePayload((uint64_t)v664, 1, 1, v678);
        swift_bridgeObjectRetain();
      }
      v437 = v675;
      v438 = v679;
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v475, &demangling cache variable for type metadata for StorableValue?);
      swift_bridgeObjectRelease();
      outlined destroy of UUID?((uint64_t)v672, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      v153 = v674;
    }
    swift_bridgeObjectRelease();
    v476 = v653;
    if (*(_QWORD *)(v639 + 16) != *(_QWORD *)(v653 + 16))
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MetadataSQLError(0);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
      swift_allocError();
      v599 = *(_QWORD *)(v639 + 16);
      *v600 = *(_QWORD *)(v476 + 16);
      v600[1] = v599;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      goto LABEL_311;
    }
    v679 = v436;
    v477 = 1 << *(_BYTE *)(v653 + 32);
    if (v477 < 64)
      v478 = ~(-1 << v477);
    else
      v478 = -1;
    v479 = v478 & *(_QWORD *)(v653 + 64);
    v619 = (unint64_t)(v477 + 63) >> 6;
    v605 = v619 - 1;
    swift_bridgeObjectRetain();
    v480 = 0;
    v481 = v663;
    if (v479)
    {
LABEL_225:
      v650 = (v479 - 1) & v479;
      v675 = v480;
      v482 = __clz(__rbit64(v479)) | (v480 << 6);
LABEL_226:
      v483 = *(_QWORD *)(v653 + 56);
      v484 = (_QWORD *)(*(_QWORD *)(v653 + 48) + 16 * v482);
      v485 = v484[1];
      *v481 = *v484;
      v481[1] = v485;
      v486 = type metadata accessor for SQLDataType();
      v487 = v486[-1].Description;
      v488 = v483 + v487[9] * v482;
      v489 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
      v481 = v663;
      ((void (*)(char *, uint64_t, ValueMetadata *))v487[2])(&v663[*(int *)(v489 + 48)], v488, v486);
      __swift_storeEnumTagSinglePayload((uint64_t)v481, 0, 1, v489);
      swift_bridgeObjectRetain();
      v490 = v679;
      goto LABEL_233;
    }
    while (2)
    {
      v491 = v480 + 1;
      v490 = v679;
      if (__OFADD__(v480, 1))
        goto LABEL_347;
      if (v491 >= v619)
      {
        v675 = v480;
      }
      else
      {
        v492 = *(_QWORD *)(v617 + 8 * v491);
        if (v492)
          goto LABEL_230;
        v522 = v480 + 2;
        if (v491 + 1 >= v619)
        {
LABEL_263:
          v675 = v491;
        }
        else
        {
          v492 = *(_QWORD *)(v617 + 8 * v522);
          if (v492)
            goto LABEL_250;
          if (v491 + 2 >= v619)
          {
            v675 = v522;
          }
          else
          {
            v492 = *(_QWORD *)(v617 + 8 * (v491 + 2));
            if (v492)
            {
              v491 += 2;
LABEL_230:
              v650 = (v492 - 1) & v492;
              v482 = __clz(__rbit64(v492)) + (v491 << 6);
              v675 = v491;
              goto LABEL_226;
            }
            v522 = v491 + 3;
            if (v491 + 3 < v619)
            {
              v492 = *(_QWORD *)(v617 + 8 * v522);
              if (!v492)
              {
                while (1)
                {
                  v491 = v522 + 1;
                  if (__OFADD__(v522, 1))
                    goto LABEL_371;
                  if (v491 >= v619)
                  {
                    v491 = v605;
                    goto LABEL_263;
                  }
                  v492 = *(_QWORD *)(v617 + 8 * v491);
                  ++v522;
                  if (v492)
                    goto LABEL_230;
                }
              }
LABEL_250:
              v491 = v522;
              goto LABEL_230;
            }
            v675 = v491 + 2;
          }
        }
      }
      v493 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
      __swift_storeEnumTagSinglePayload((uint64_t)v481, 1, 1, v493);
      v650 = 0;
LABEL_233:
      v494 = v647;
      outlined init with take of UUID?((uint64_t)v481, (uint64_t)v647, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLDataType)?);
      v495 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
      if (__swift_getEnumTagSinglePayload((uint64_t)v494, 1, v495) != 1)
      {
        v497 = *v494;
        v496 = v494[1];
        v498 = (char *)v494 + *(int *)(v495 + 48);
        v499 = v639;
        if (*(_QWORD *)(v639 + 16))
        {
          swift_bridgeObjectRetain();
          v500 = specialized __RawDictionaryStorage.find<A>(_:)();
          if ((v501 & 1) != 0)
          {
            v502 = v646;
            outlined init with copy of StorableValue(*(_QWORD *)(v499 + 56) + *(_QWORD *)(v676 + 72) * v500, v646, type metadata accessor for StorableValue);
            v503 = 0;
          }
          else
          {
            v503 = 1;
            v502 = v646;
          }
          v504 = v678;
          __swift_storeEnumTagSinglePayload(v502, v503, 1, v678);
          swift_bridgeObjectRelease();
          if (__swift_getEnumTagSinglePayload(v502, 1, v504) == 1)
            goto LABEL_310;
          v505 = (uint64_t)v654;
          outlined init with take of StorableValue(v502, (uint64_t)v654, type metadata accessor for StorableValue);
          outlined init with copy of StorableValue(v505, v655, type metadata accessor for StorableValue);
          v506 = (_QWORD *)v679;
          v507 = swift_isUniquelyReferenced_nonNull_native();
          v682._rawValue = v506;
          v508 = specialized __RawDictionaryStorage.find<A>(_:)();
          v510 = v506[2];
          v511 = (v509 & 1) == 0;
          v512 = v510 + v511;
          if (__OFADD__(v510, v511))
            goto LABEL_343;
          v513 = v508;
          v514 = v509;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
          v515 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v507, v512);
          v153 = v674;
          v516 = (uint64_t)v644;
          if (v515)
          {
            v517 = specialized __RawDictionaryStorage.find<A>(_:)();
            if ((v514 & 1) != (v518 & 1))
              goto LABEL_376;
            v513 = v517;
          }
          v679 = (uint64_t)v682._rawValue;
          if ((v514 & 1) != 0)
          {
            v519 = *(_QWORD *)(v676 + 72) * v513;
            v520 = v682._rawValue;
            outlined init with take of StorableValue(*((_QWORD *)v682._rawValue + 7) + v519, v516, type metadata accessor for StorableValue);
            outlined init with take of StorableValue(v655, v520[7] + v519, type metadata accessor for StorableValue);
            __swift_storeEnumTagSinglePayload(v516, 0, 1, v678);
          }
          else
          {
            specialized _NativeDictionary._insert(at:key:value:)(v513, v497, v496, v655, (uint64_t)v682._rawValue);
            __swift_storeEnumTagSinglePayload(v516, 1, 1, v678);
            swift_bridgeObjectRetain();
          }
          v481 = v663;
          swift_bridgeObjectRelease();
          outlined destroy of UUID?(v516, &demangling cache variable for type metadata for StorableValue?);
          outlined destroy of StorableValue((uint64_t)v654, type metadata accessor for StorableValue);
          swift_bridgeObjectRelease();
          v521 = type metadata accessor for SQLDataType();
          (*((void (**)(char *, ValueMetadata *))v521[-1].Description + 1))(v498, v521);
          v480 = v675;
          v479 = v650;
          if (v650)
            goto LABEL_225;
          continue;
        }
        v502 = v646;
        __swift_storeEnumTagSinglePayload(v646, 1, 1, v678);
LABEL_310:
        swift_bridgeObjectRelease();
        outlined destroy of UUID?(v502, &demangling cache variable for type metadata for StorableValue?);
        type metadata accessor for MetadataSQLError(0);
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
        swift_allocError();
        *v576 = v497;
        v576[1] = v496;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        swift_release();
        v577 = type metadata accessor for SQLDataType();
        (*((void (**)(char *, ValueMetadata *))v577[-1].Description + 1))(v498, v577);
LABEL_311:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_312;
      }
      break;
    }
    v523 = v677;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    specialized static Array._allocateUninitialized(_:)(0);
    v682._rawValue = v524;
    v525 = v620;
    v526 = specialized Array.count.getter(v620);
    if (!v526)
    {
      swift_bridgeObjectRelease();
LABEL_279:
      specialized static Array._allocateUninitialized(_:)(0);
      v545 = v544;
      v680 = v544;
      v546 = specialized Array.count.getter(v523);
      if (!v546)
      {
LABEL_303:
        specialized Array.append<A>(contentsOf:)(v545);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        v574._countAndFlagsBits = v608;
        v574._object = v612;
        SQLExpressionEvaluator.execute(sql:bindingValues:)(v574, v682);
        v641 = v575;
        if (v575)
          goto LABEL_341;
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v421 = v635;
        v427 = (uint64_t)v668;
        v422 = v607;
        v426 = v606;
        v420 = v611;
        v425 = v610;
        continue;
      }
      v547 = v546;
      if (v546 < 1)
        goto LABEL_370;
      v548 = *(unsigned __int8 *)(v676 + 80);
      v549 = (v548 + 32) & ~v548;
      v550 = v523 + v549;
      v551 = *(_QWORD *)(v676 + 72);
      v679 = v549 + 2 * v551;
      v675 = v548 | 7;
      swift_bridgeObjectRetain();
      while (1)
      {
        v552 = v633;
        outlined init with copy of StorableValue(v550, v633, type metadata accessor for StorableValue);
        v553 = v634;
        outlined init with take of StorableValue(v552, v634, type metadata accessor for StorableValue);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<StorableValue>);
        v554 = swift_allocObject();
        specialized static Array._adoptStorage(_:count:)(v554, 2);
        v556 = v555;
        v558 = v557;
        outlined init with copy of StorableValue(v553, v557, type metadata accessor for StorableValue);
        outlined init with take of StorableValue(v553, v558 + v551, type metadata accessor for StorableValue);
        v560 = destructiveProjectEnumData for StorableValue(v556, v559);
        v561 = specialized Array.count.getter(v560);
        v562 = v680;
        v563 = specialized Array.count.getter(v680);
        v564 = v563 + v561;
        if (__OFADD__(v563, v561))
          goto LABEL_349;
        if (!swift_isUniquelyReferenced_nonNull_native()
          || (v565 = *(_QWORD *)(v562 + 24) >> 1, v565 < v564))
        {
          v562 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v680 = v562;
          v565 = *(_QWORD *)(v562 + 24) >> 1;
        }
        v566 = *(_QWORD *)(v562 + 16);
        v567 = v565 - v566;
        if (specialized Array.count.getter(v560))
        {
          if (v567 < v561)
            goto LABEL_352;
          if (v561 < 0)
            goto LABEL_377;
          v568 = v562 + v549 + v566 * v551;
          if (v560 + v549 < v568 + v561 * v551 && v568 < v560 + v549 + v561 * v551)
            goto LABEL_377;
          swift_arrayInitWithCopy();
          if (v561)
          {
            v570 = *(_QWORD *)(v562 + 16);
            v127 = __OFADD__(v570, v561);
            v571 = v570 + v561;
            if (v127)
              goto LABEL_358;
            *(_QWORD *)(v562 + 16) = v571;
          }
        }
        else
        {
          if (v561 > 0)
            goto LABEL_350;
          v561 = 0;
        }
        v572 = swift_bridgeObjectRelease();
        if (v561 != v567)
          destructiveProjectEnumData for StorableValue(v572, v573);
        v550 += v551;
        if (!--v547)
        {
          swift_bridgeObjectRelease();
          v545 = v680;
          v153 = v674;
          goto LABEL_303;
        }
      }
    }
    break;
  }
  v527 = v526;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v525);
  v529 = *(_QWORD *)(v525 + 32);
  v528 = *(_QWORD *)(v525 + 40);
  v530 = *(_QWORD *)(v490 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v530)
  {
    v531 = specialized __RawDictionaryStorage.find<A>(_:)();
    if ((v532 & 1) != 0)
    {
      v533 = v531;
      v534 = v490 + 64;
      v535 = v609;
      v536 = 1;
      while (1)
      {
        v537 = *(_DWORD *)(v490 + 36);
        swift_bridgeObjectRelease();
        if ((v533 & 0x8000000000000000) != 0 || (uint64_t)v533 >= 1 << *(_BYTE *)(v490 + 32))
          break;
        if (((*(_QWORD *)(v534 + ((v533 >> 3) & 0xFFFFFFFFFFFFF8)) >> v533) & 1) == 0)
          goto LABEL_354;
        if (v537 != *(_DWORD *)(v490 + 36))
          goto LABEL_355;
        v538 = v632;
        outlined init with copy of StorableValue(*(_QWORD *)(v490 + 56) + *(_QWORD *)(v676 + 72) * v533, v632, type metadata accessor for StorableValue);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
        v539 = *((_QWORD *)v682._rawValue + 2);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v539, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v539, v538);
        destructiveProjectEnumData for StorableValue(v540, v541);
        if (v527 == v536)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v153 = v674;
          v523 = v677;
          goto LABEL_279;
        }
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v536, 1, v620);
        if (__OFADD__(v536, 1))
          goto LABEL_356;
        v529 = *(v535 - 1);
        v528 = *v535;
        v490 = v679;
        v542 = *(_QWORD *)(v679 + 16);
        swift_bridgeObjectRetain();
        if (v542)
        {
          v533 = specialized __RawDictionaryStorage.find<A>(_:)();
          ++v536;
          v535 += 2;
          if ((v543 & 1) != 0)
            continue;
        }
        goto LABEL_316;
      }
LABEL_353:
      __break(1u);
LABEL_354:
      __break(1u);
LABEL_355:
      __break(1u);
LABEL_356:
      __break(1u);
LABEL_357:
      __break(1u);
LABEL_358:
      __break(1u);
LABEL_359:
      __break(1u);
      goto LABEL_360;
    }
  }
LABEL_316:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for MetadataSQLError(0);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, type metadata accessor for MetadataSQLError, (uint64_t)&protocol conformance descriptor for MetadataSQLError);
  swift_allocError();
  *v580 = v529;
  v580[1] = v528;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
LABEL_312:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_326:
  swift_bridgeObjectRelease();
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  void *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  Swift::Int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  int64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TimeZone?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TimeZone();
  v78 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v77 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  v86 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
  v84 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v92 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
  v82 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  v80 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81);
  v79 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for Date.ISO8601FormatStyle();
  v75 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76);
  v74 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v94);
  v93 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v19 = MEMORY[0x1E0C80A78](v18);
  v96 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v97 = (char *)&v59 - v21;
  v99 = type metadata accessor for StorableValue(0);
  v60 = *(_QWORD *)(v99 - 8);
  v22 = MEMORY[0x1E0C80A78](v99);
  v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v59 - v25;
  v27 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<[StorableValue], [[String : StorableValue]]>);
  v66 = a2;
  v28 = static _DictionaryStorage.resize(original:capacity:move:)();
  v29 = v27;
  v30 = (_QWORD *)v28;
  if (!*(_QWORD *)(v29 + 16))
    goto LABEL_41;
  v59 = v3;
  v31 = 1 << *(_BYTE *)(v29 + 32);
  v32 = *(_QWORD *)(v29 + 64);
  v61 = (_QWORD *)(v29 + 64);
  if (v31 < 64)
    v33 = ~(-1 << v31);
  else
    v33 = -1;
  v90 = v33 & v32;
  v62 = (unint64_t)(v31 + 63) >> 6;
  v70 = *MEMORY[0x1E0CB05F0];
  v69 = *MEMORY[0x1E0CB05E0];
  v68 = *MEMORY[0x1E0CB0600];
  v67 = *MEMORY[0x1E0CB0628];
  v63 = v28 + 64;
  swift_retain();
  v34 = 0;
  v35 = &demangling cache variable for type metadata for String?;
  v91 = v14;
  v73 = v7;
  v72 = v8;
  v71 = v11;
  v65 = v29;
  v64 = v30;
  while (1)
  {
    if (v90)
    {
      v36 = v35;
      v37 = __clz(__rbit64(v90));
      v90 &= v90 - 1;
      v89 = v34;
      v38 = v37 | (v34 << 6);
      goto LABEL_22;
    }
    v39 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v39 >= v62)
      goto LABEL_36;
    v40 = v61[v39];
    v41 = v34 + 1;
    if (!v40)
    {
      v41 = v34 + 2;
      if (v34 + 2 >= v62)
        goto LABEL_36;
      v40 = v61[v41];
      if (!v40)
      {
        v41 = v34 + 3;
        if (v34 + 3 >= v62)
          goto LABEL_36;
        v40 = v61[v41];
        if (!v40)
          break;
      }
    }
LABEL_21:
    v36 = v35;
    v90 = (v40 - 1) & v40;
    v89 = v41;
    v38 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_22:
    v43 = *(_QWORD *)(*(_QWORD *)(v29 + 48) + 8 * v38);
    v44 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v38);
    if ((v66 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v88 = v44;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(*(_QWORD *)(v43 + 16));
    v95 = v43;
    v45 = *(_QWORD *)(v43 + 16);
    v35 = v36;
    if (v45)
    {
      v46 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
      v98 = *(_QWORD *)(v60 + 72);
      outlined init with copy of StorableValue(v95 + v46, (uint64_t)v26, type metadata accessor for StorableValue);
      outlined init with copy of StorableValue((uint64_t)v26, (uint64_t)v24, type metadata accessor for StorableValue);
      v47 = (char *)&loc_18D84921C + *((int *)qword_18D940650 + swift_getEnumCaseMultiPayload());
      __asm { BR              X9 }
    }
    v48 = Hasher._finalize()();
    v30 = v64;
    v49 = -1 << *((_BYTE *)v64 + 32);
    v50 = v48 & ~v49;
    v51 = v50 >> 6;
    if (((-1 << v50) & ~*(_QWORD *)(v63 + 8 * (v50 >> 6))) != 0)
    {
      v52 = __clz(__rbit64((-1 << v50) & ~*(_QWORD *)(v63 + 8 * (v50 >> 6)))) | v50 & 0x7FFFFFFFFFFFFFC0;
      v29 = v65;
    }
    else
    {
      v53 = 0;
      v54 = (unint64_t)(63 - v49) >> 6;
      v29 = v65;
      do
      {
        if (++v51 == v54 && (v53 & 1) != 0)
        {
          __break(1u);
          JUMPOUT(0x18D8497D4);
        }
        v55 = v51 == v54;
        if (v51 == v54)
          v51 = 0;
        v53 |= v55;
        v56 = *(_QWORD *)(v63 + 8 * v51);
      }
      while (v56 == -1);
      v52 = __clz(__rbit64(~v56)) + (v51 << 6);
    }
    *(_QWORD *)(v63 + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v52;
    *(_QWORD *)(v30[6] + 8 * v52) = v95;
    *(_QWORD *)(v30[7] + 8 * v52) = v88;
    ++v30[2];
    v34 = v89;
  }
  v42 = v34 + 4;
  if (v34 + 4 < v62)
  {
    v40 = v61[v42];
    if (!v40)
    {
      while (1)
      {
        v41 = v42 + 1;
        if (__OFADD__(v42, 1))
          break;
        if (v41 >= v62)
          goto LABEL_36;
        v40 = v61[v41];
        ++v42;
        if (v40)
          goto LABEL_21;
      }
LABEL_44:
      __break(1u);
      JUMPOUT(0x18D8497E8);
    }
    v41 = v34 + 4;
    goto LABEL_21;
  }
LABEL_36:
  swift_release();
  v3 = v59;
  if ((v66 & 1) != 0)
  {
    v57 = 1 << *(_BYTE *)(v29 + 32);
    if (v57 >= 64)
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v57 + 63) >> 6, v61);
    else
      *v61 = -1 << v57;
    *(_QWORD *)(v29 + 16) = 0;
  }
LABEL_41:
  result = swift_release();
  *v3 = v30;
  return result;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  void *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  Swift::Int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  int64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TimeZone?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TimeZone();
  v81 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v80 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  v89 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
  v87 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88);
  v96 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
  v85 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  v83 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84);
  v82 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for Date.ISO8601FormatStyle();
  v78 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79);
  v77 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v98);
  v97 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v19 = MEMORY[0x1E0C80A78](v18);
  v100 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v101 = (char *)&v61 - v21;
  v103 = type metadata accessor for StorableValue(0);
  v63 = *(_QWORD *)(v103 - 8);
  v22 = MEMORY[0x1E0C80A78](v103);
  v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v61 - v25;
  v27 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<[StorableValue], ChangeRecord>);
  v69 = a2;
  v28 = static _DictionaryStorage.resize(original:capacity:move:)();
  v29 = v27;
  v30 = (_QWORD *)v28;
  if (!*(_QWORD *)(v29 + 16))
    goto LABEL_41;
  v62 = v3;
  v31 = 1 << *(_BYTE *)(v29 + 32);
  v32 = *(_QWORD *)(v29 + 64);
  v64 = (_QWORD *)(v29 + 64);
  if (v31 < 64)
    v33 = ~(-1 << v31);
  else
    v33 = -1;
  v94 = v33 & v32;
  v65 = (unint64_t)(v31 + 63) >> 6;
  v73 = *MEMORY[0x1E0CB05F0];
  v72 = *MEMORY[0x1E0CB05E0];
  v71 = *MEMORY[0x1E0CB0600];
  v70 = *MEMORY[0x1E0CB0628];
  v66 = v28 + 64;
  swift_retain();
  v34 = 0;
  v35 = &demangling cache variable for type metadata for String?;
  v95 = v14;
  v76 = v7;
  v75 = v8;
  v74 = v11;
  v68 = v29;
  v67 = v30;
  while (1)
  {
    if (v94)
    {
      v36 = v35;
      v37 = __clz(__rbit64(v94));
      v94 &= v94 - 1;
      v93 = v34;
      v38 = v37 | (v34 << 6);
      goto LABEL_22;
    }
    v39 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v39 >= v65)
      goto LABEL_36;
    v40 = v64[v39];
    v41 = v34 + 1;
    if (!v40)
    {
      v41 = v34 + 2;
      if (v34 + 2 >= v65)
        goto LABEL_36;
      v40 = v64[v41];
      if (!v40)
      {
        v41 = v34 + 3;
        if (v34 + 3 >= v65)
          goto LABEL_36;
        v40 = v64[v41];
        if (!v40)
          break;
      }
    }
LABEL_21:
    v36 = v35;
    v94 = (v40 - 1) & v40;
    v93 = v41;
    v38 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_22:
    v43 = *(_QWORD *)(*(_QWORD *)(v29 + 48) + 8 * v38);
    v44 = (unsigned __int8 *)(*(_QWORD *)(v29 + 56) + 16 * v38);
    v92 = *v44;
    v45 = *((_QWORD *)v44 + 1);
    if ((v69 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v91 = v45;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(*(_QWORD *)(v43 + 16));
    v99 = v43;
    v46 = *(_QWORD *)(v43 + 16);
    v35 = v36;
    if (v46)
    {
      v47 = (*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
      v102 = *(_QWORD *)(v63 + 72);
      outlined init with copy of StorableValue(v99 + v47, (uint64_t)v26, type metadata accessor for StorableValue);
      outlined init with copy of StorableValue((uint64_t)v26, (uint64_t)v24, type metadata accessor for StorableValue);
      v48 = (char *)&loc_18D849E64 + *((int *)qword_18D940630 + swift_getEnumCaseMultiPayload());
      __asm { BR              X9 }
    }
    v49 = Hasher._finalize()();
    v30 = v67;
    v50 = -1 << *((_BYTE *)v67 + 32);
    v51 = v49 & ~v50;
    v52 = v51 >> 6;
    if (((-1 << v51) & ~*(_QWORD *)(v66 + 8 * (v51 >> 6))) != 0)
    {
      v53 = __clz(__rbit64((-1 << v51) & ~*(_QWORD *)(v66 + 8 * (v51 >> 6)))) | v51 & 0x7FFFFFFFFFFFFFC0;
      v29 = v68;
    }
    else
    {
      v54 = 0;
      v55 = (unint64_t)(63 - v50) >> 6;
      v29 = v68;
      do
      {
        if (++v52 == v55 && (v54 & 1) != 0)
        {
          __break(1u);
          JUMPOUT(0x18D84A42CLL);
        }
        v56 = v52 == v55;
        if (v52 == v55)
          v52 = 0;
        v54 |= v56;
        v57 = *(_QWORD *)(v66 + 8 * v52);
      }
      while (v57 == -1);
      v53 = __clz(__rbit64(~v57)) + (v52 << 6);
    }
    *(_QWORD *)(v66 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v53;
    *(_QWORD *)(v30[6] + 8 * v53) = v99;
    v58 = v30[7] + 16 * v53;
    *(_BYTE *)v58 = v92;
    *(_QWORD *)(v58 + 8) = v91;
    ++v30[2];
    v34 = v93;
  }
  v42 = v34 + 4;
  if (v34 + 4 < v65)
  {
    v40 = v64[v42];
    if (!v40)
    {
      while (1)
      {
        v41 = v42 + 1;
        if (__OFADD__(v42, 1))
          break;
        if (v41 >= v65)
          goto LABEL_36;
        v40 = v64[v41];
        ++v42;
        if (v40)
          goto LABEL_21;
      }
LABEL_44:
      __break(1u);
      JUMPOUT(0x18D84A440);
    }
    v41 = v34 + 4;
    goto LABEL_21;
  }
LABEL_36:
  swift_release();
  v3 = v62;
  if ((v69 & 1) != 0)
  {
    v59 = 1 << *(_BYTE *)(v29 + 32);
    if (v59 >= 64)
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v59 + 63) >> 6, v64);
    else
      *v64 = -1 << v59;
    *(_QWORD *)(v29 + 16) = 0;
  }
LABEL_41:
  result = swift_release();
  *v3 = v30;
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<StorableValue>, type metadata accessor for StorableValue);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<AggregationFunction>, (uint64_t (*)(_QWORD))type metadata accessor for AggregationFunction);
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t closure #2 in group(changes:by:metadata:aggregationFunctions:resultColumns:having:expressionEvaluator:)(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  ValueMetadata *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t result;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  int64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t, ValueMetadata *);
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  __int128 *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  _QWORD *v140;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v142;
  unint64_t v143;
  char v144;
  uint64_t v145;
  _BOOL8 v146;
  Swift::Int v147;
  unint64_t v148;
  char v149;
  Swift::Bool v150;
  unint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  unint64_t v166;
  char v167;
  char v168;
  uint64_t v169;
  _BOOL8 v170;
  unint64_t v171;
  Swift::Bool v172;
  unint64_t v173;
  char v174;
  _QWORD *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t (**v185)(uint64_t, ValueMetadata *);
  ValueMetadata *v186;
  int v187;
  ValueMetadata *v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  char v199;
  _QWORD *v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  int64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  unint64_t v225;
  char v226;
  char v227;
  uint64_t v228;
  _BOOL8 v229;
  unint64_t v230;
  Swift::Bool v231;
  unint64_t v232;
  char v233;
  _QWORD *v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char v260;
  char v261;
  char v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  Swift::Int v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  Swift::UInt v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char v283;
  char v284;
  char *v285;
  char v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  Swift::Int v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  char v305;
  char v306;
  _QWORD *v307;
  uint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  _QWORD *v314;
  uint64_t v315;
  char v316;
  char v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  __int128 *v322;
  uint64_t v323;
  int v324;
  int v325;
  uint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  char *v347;
  char *v348;
  char *v349;
  char *v350;
  char *v351;
  char *v352;
  char *v353;
  uint64_t v354;
  char *v355;
  char *v356;
  char *v357;
  char *v358;
  char *v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  char *v373;
  char *v374;
  _QWORD *v375;
  char *v376;
  char *v377;
  char *v378;
  uint64_t v379;
  char *v380;
  char *v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t (**Description)(uint64_t, ValueMetadata *);
  ValueMetadata *v387;
  uint64_t v388;
  char *v389;
  uint64_t v390;
  uint64_t v391;
  char *v392;
  char *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t *v400;
  Swift::UInt v401;
  uint64_t v402;
  Swift::UInt v403;
  __int128 v404;
  uint64_t v405;
  uint64_t v406;
  char v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;

  v375 = a8;
  v398 = a6;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TimeZone?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v352 = (char *)&v320 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v359 = (char *)&v320 - v18;
  v372 = type metadata accessor for TimeZone();
  v371 = *(_QWORD *)(v372 - 8);
  v19 = MEMORY[0x1E0C80A78](v372);
  v351 = (char *)&v320 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v358 = (char *)&v320 - v21;
  v370 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  v369 = *(_QWORD *)(v370 - 8);
  v22 = MEMORY[0x1E0C80A78](v370);
  v350 = (char *)&v320 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v382 = (char *)&v320 - v24;
  v368 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
  v367 = *(_QWORD *)(v368 - 8);
  v25 = MEMORY[0x1E0C80A78](v368);
  v349 = (char *)&v320 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v377 = (char *)&v320 - v27;
  v366 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
  v365 = *(_QWORD *)(v366 - 8);
  v28 = MEMORY[0x1E0C80A78](v366);
  v348 = (char *)&v320 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v357 = (char *)&v320 - v30;
  v364 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  v363 = *(_QWORD *)(v364 - 8);
  v31 = MEMORY[0x1E0C80A78](v364);
  v353 = (char *)&v320 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v376 = (char *)&v320 - v33;
  v362 = type metadata accessor for Date.ISO8601FormatStyle();
  v361 = *(_QWORD *)(v362 - 8);
  v34 = MEMORY[0x1E0C80A78](v362);
  v347 = (char *)&v320 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34);
  v356 = (char *)&v320 - v36;
  v379 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v379);
  v378 = (char *)&v320 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v39 = MEMORY[0x1E0C80A78](v38);
  v374 = (char *)&v320 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = MEMORY[0x1E0C80A78](v39);
  v373 = (char *)&v320 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v380 = (char *)&v320 - v44;
  MEMORY[0x1E0C80A78](v43);
  v381 = (char *)&v320 - v45;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: StorableValue)?);
  v47 = MEMORY[0x1E0C80A78](v46);
  v401 = (Swift::UInt)&v320 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v47);
  v400 = (uint64_t *)((char *)&v320 - v49);
  v387 = type metadata accessor for AggregationFunction.AggregationType();
  Description = (uint64_t (**)(uint64_t, ValueMetadata *))v387[-1].Description;
  MEMORY[0x1E0C80A78](v387);
  v389 = (char *)&v320 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v402 = type metadata accessor for StorableValue(0);
  v391 = *(_QWORD *)(v402 - 8);
  v51 = MEMORY[0x1E0C80A78](v402);
  v355 = (char *)&v320 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = MEMORY[0x1E0C80A78](v51);
  v354 = (uint64_t)&v320 - v54;
  v55 = MEMORY[0x1E0C80A78](v53);
  v385 = (uint64_t)&v320 - v56;
  v57 = MEMORY[0x1E0C80A78](v55);
  v383 = (uint64_t)&v320 - v58;
  v59 = MEMORY[0x1E0C80A78](v57);
  v360 = (char *)&v320 - v60;
  v61 = MEMORY[0x1E0C80A78](v59);
  v384 = (uint64_t)&v320 - v62;
  v63 = MEMORY[0x1E0C80A78](v61);
  v403 = (Swift::UInt)&v320 - v64;
  v65 = MEMORY[0x1E0C80A78](v63);
  v394 = (uint64_t)&v320 - v66;
  MEMORY[0x1E0C80A78](v65);
  v395 = (uint64_t)&v320 - v67;
  v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  v69 = MEMORY[0x1E0C80A78](v68);
  v399 = (uint64_t)&v320 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = MEMORY[0x1E0C80A78](v69);
  v388 = (uint64_t)&v320 - v72;
  MEMORY[0x1E0C80A78](v71);
  v390 = (uint64_t)&v320 - v73;
  v74 = type metadata accessor for AggregationEvent(0);
  v75 = MEMORY[0x1E0C80A78](v74);
  v393 = (char *)&v320 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = MEMORY[0x1E0C80A78](v75);
  v392 = (char *)&v320 - v78;
  v79 = MEMORY[0x1E0C80A78](v77);
  v397 = (uint64_t)&v320 - v80;
  MEMORY[0x1E0C80A78](v79);
  v396 = (uint64_t)&v320 - v81;
  v82 = type metadata accessor for AggregationFunction();
  MEMORY[0x1E0C80A78](v82);
  v85 = (char *)&v320 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = *a2;
  if (v86 == 1)
  {
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError();
    *v87 = 1;
    v87[64] = 6;
    return swift_willThrow();
  }
  v345 = a5;
  v89 = a7;
  v90 = a1;
  v344 = v86;
  v346 = v83;
  v91 = *((_QWORD *)a2 + 1);
  swift_retain();
  swift_bridgeObjectRetain();
  result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14BiomeSQLParser13SQLExpressionVG_0D7Streams13StorableValueOsAE_pTg504_s12d176Streams5group33_69E06497FCCD36C7847396967BD3AC6FLL7changes2by8metadata20aggregationFunctions13resultColumns6having19expressionEvaluatorSayAA12ChangeRecordVGAM_Say0A9SQLParser13f130VGAA20QueryPlannerMetadataCSayAN19AggregationFunctionVGSayAN12ResultColumnVGAPSgAA0vR0CtKFyAA14GroupedChangesACLLVz_ALtKXEfU0_AA13hI9OAPKXEfU_AJ0fT0CAJ0wX0VTf1cn_n(a3, a4, 0, v91);
  if (v8)
    return result;
  v92 = result;
  v342 = v91;
  v93 = v345 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_keyedAggregationMetadata;
  v94 = specialized KeyedQueryPlannerMetadataCache.getValue(forKey:)(result);
  v95 = 0;
  v96 = v94;
  v335 = v93;
  v341 = a4;
  v343 = v89;
  v339 = v92;
  if (v94)
  {
    if (*(_QWORD *)(v398 + 16) != *(_QWORD *)(v94 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      swift_allocError();
      *(_QWORD *)v106 = v345;
      *(_BYTE *)(v106 + 64) = 9;
      swift_retain();
      return swift_willThrow();
    }
    v97 = v90;
    v98 = swift_bridgeObjectRetain();
    _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay14BiomeSQLParser19AggregationFunctionVGSaySDySS0F7Streams13StorableValueOGGG_AL0H0_psAE_pTg504_s14f11SQLParser19hi18VSDySS0A7Streams13kl11OGAD0C0_ps5C389_pIgngrzo_AC_AGtAdH_psAI_pIegnrzr_TR04_s12a223Streams5group33_69E06497FCCD36C7847396967BD3AC6FLL7changes2by8metadata20aggregationFunctions13resultColumns6having19expressionEvaluatorSayAA12ChangeRecordVGAM_Say0A9SQLParser13SQLExpressionVGAA20QueryPlannerMetadataCSayAN19cd92VGSayAN12ResultColumnVGAPSgAA0vR0CtKFyAA14GroupedChangesACLLVz_ALtKXEfU0_AA0Z0_pAU_SDySSAA13fG10OGtKXEfU0_Tf3nnnpf_nTf1cn_n(v98, v96);
    v336 = v107;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v108 = v89;
    v327 = v97;
  }
  else
  {
    v99 = v398;
    v100 = *(_QWORD *)(v398 + 16);
    v101 = MEMORY[0x1E0DEE9D8];
    v327 = v90;
    if (v100)
    {
      *(_QWORD *)&v408 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v100, 0);
      v102 = v99 + ((*(unsigned __int8 *)(v346 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v346 + 80));
      v340 = *(_QWORD *)(v346 + 72);
      v103 = *(void (**)(char *, uint64_t, ValueMetadata *))(v346 + 16);
      do
      {
        v103(v85, v102, v82);
        AggregationFunction.newAggregation()();
        (*(void (**)(char *, ValueMetadata *))(v346 + 8))(v85, v82);
        v101 = v408;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v101 + 16) + 1, 1);
          v101 = v408;
        }
        v105 = *(_QWORD *)(v101 + 16);
        v104 = *(_QWORD *)(v101 + 24);
        if (v105 >= v104 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v104 > 1), v105 + 1, 1);
          v101 = v408;
        }
        *(_QWORD *)(v101 + 16) = v105 + 1;
        outlined init with take of Aggregation(&v404, v101 + 40 * v105 + 32);
        v102 += v340;
        --v100;
        v108 = v343;
        v95 = 0;
      }
      while (v100);
      a4 = v341;
    }
    else
    {
      v108 = v89;
    }
    v336 = v101;
    v246 = *(_QWORD *)(v101 + 16);
    v247 = MEMORY[0x1E0DEE9D8];
    if (v246)
    {
      *(_QWORD *)&v408 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v248 = v336 + 32;
      do
      {
        outlined init with copy of Aggregation(v248, (uint64_t)&v404);
        v249 = v405;
        v250 = v406;
        __swift_project_boxed_opaque_existential_1(&v404, v405);
        v251 = (*(uint64_t (**)(uint64_t, uint64_t))(v250 + 40))(v249, v250);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v404);
        v247 = v408;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v247 = v408;
        }
        v252 = *(_QWORD *)(v247 + 16);
        if (v252 >= *(_QWORD *)(v247 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v247 = v408;
        }
        *(_QWORD *)(v247 + 16) = v252 + 1;
        *(_QWORD *)(v247 + 8 * v252 + 32) = v251;
        v248 += 40;
        --v246;
        a4 = v341;
      }
      while (v246);
      v108 = v343;
    }
    v253 = v339;
    specialized KeyedQueryPlannerMetadataCache.setValue(_:forKey:)(v247, v339);
    v254 = v345;
    swift_bridgeObjectRelease();
    v255 = v254 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_keyedFirstMatchingRecord;
    specialized KeyedQueryPlannerMetadataCache.getValue(forKey:)(v253);
    v92 = v253;
    if (v256)
    {
      swift_bridgeObjectRelease();
      v257 = *(_QWORD *)(v255 + *(int *)(type metadata accessor for KeyedFirstMatchingRecordCache(0) + 28));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Dictionary.subscript.getter(v253, v257);
      v259 = v258;
      v261 = v260;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v262 = 1;
      if (v259)
      {
        swift_bridgeObjectRelease();
        if ((v261 & 1) == 0)
          v262 = 0;
      }
      v92 = v339;
    }
    else
    {
      v262 = 0;
    }
    v264 = v342;
    swift_bridgeObjectRetain();
    specialized KeyedQueryPlannerMetadataCache.updateCache(_:forKey:)(v344, v264, v92);
    swift_bridgeObjectRelease();
    type metadata accessor for KeyedFirstMatchingRecordCache(0);
    swift_bridgeObjectRetain();
    specialized Dictionary._Variant.updateValue(_:forKey:)(0, v264, v262, v92);
    swift_bridgeObjectRelease();
  }
  v109 = v345;
  v110 = v345 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_keyedFirstMatchingRecord;
  specialized KeyedQueryPlannerMetadataCache.getValue(forKey:)(v92);
  v112 = v336;
  if (!v111)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError();
    *(_QWORD *)v263 = v109;
    *(_BYTE *)(v263 + 64) = 9;
    swift_retain();
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  v320 = v110;
  v113 = v111;
  v114 = swift_allocObject();
  *(_QWORD *)(v114 + 16) = v113;
  v323 = v112 + 32;
  v322 = (__int128 *)&v407;
  v321 = (uint64_t)&v408 + 8;
  v326 = (uint64_t)&v404 + 8;
  v325 = 3;
  v324 = 4;
  v328 = v342 + 64;
  v334 = v113;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v332 = 0;
  v330 = MEMORY[0x1E0DEE9D8];
  v331 = v112;
  v340 = v114;
  while (1)
  {
    v115 = *(_QWORD *)(v112 + 16);
    if (v332 == v115)
    {
      v409 = 0u;
      v410 = 0u;
      v408 = 0u;
    }
    else
    {
      if (v332 >= v115)
        goto LABEL_173;
      v116 = v332;
      v117 = v322;
      outlined init with copy of Aggregation(v323 + 40 * v332, (uint64_t)v322);
      *(_QWORD *)&v408 = v116;
      outlined init with take of Aggregation(v117, v321);
      v332 = v116 + 1;
    }
    outlined init with take of UUID?((uint64_t)&v408, (uint64_t)&v404, &demangling cache variable for type metadata for (offset: Int, element: Aggregation)?);
    if (!v406)
    {
      swift_bridgeObjectRelease();
      specialized KeyedQueryPlannerMetadataCache.setValue(_:forKey:)(v330, v92);
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)(*v327 + 16))
        goto LABEL_138;
      v398 = *v327;
      Hasher.init(_seed:)();
      v265 = v339;
      v401 = *(_QWORD *)(v339 + 16);
      Hasher._combine(_:)(v401);
      v266 = *(_QWORD *)(v265 + 16);
      v400 = 0;
      v267 = v383;
      if (v266)
      {
        v268 = v339 + ((*(unsigned __int8 *)(v391 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v391 + 80));
        LODWORD(v397) = *MEMORY[0x1E0CB05F0];
        LODWORD(v396) = *MEMORY[0x1E0CB05E0];
        LODWORD(v395) = *MEMORY[0x1E0CB0600];
        LODWORD(v394) = *MEMORY[0x1E0CB0628];
        v403 = *(_QWORD *)(v391 + 72);
        outlined init with copy of StorableValue(v268, v383, type metadata accessor for StorableValue);
        outlined init with copy of StorableValue(v267, v385, type metadata accessor for StorableValue);
        v269 = (char *)&loc_18D84C830 + dword_18D9238FC[swift_getEnumCaseMultiPayload()];
        __asm { BR              X9 }
      }
      v270 = Hasher._finalize()();
      v271 = v398;
      v272 = -1 << *(_BYTE *)(v398 + 32);
      v273 = v270 & ~v272;
      v274 = v398 + 56;
      a4 = v341;
      if (((*(_QWORD *)(v398 + 56 + ((v273 >> 3) & 0xFFFFFFFFFFFFF8)) >> v273) & 1) == 0)
        goto LABEL_138;
      v275 = ~v272;
      v403 = v398 + 56;
      v399 = ~v272;
      while (1)
      {
        v276 = *(_QWORD *)(*(_QWORD *)(v271 + 48) + 8 * v273);
        if (*(_QWORD *)(v276 + 16) != v401)
          goto LABEL_137;
        if (!v401 || v276 == v339)
          goto LABEL_161;
        v277 = v391;
        v278 = (*(unsigned __int8 *)(v391 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v391 + 80);
        swift_bridgeObjectRetain();
        v279 = 0;
        v280 = *(_QWORD *)(v277 + 72);
        v281 = (uint64_t)v360;
        while (1)
        {
          v282 = v384;
          outlined init with copy of StorableValue(v276 + v278, v384, type metadata accessor for StorableValue);
          if (v279 >= *(_QWORD *)(v339 + 16))
          {
            __break(1u);
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
LABEL_181:
            JUMPOUT(0x18D84D950);
          }
          outlined init with copy of StorableValue(v339 + v278, v281, type metadata accessor for StorableValue);
          static StorableValue.== infix(_:_:)(v282, v281);
          v284 = v283;
          outlined destroy of StorableValue(v281, type metadata accessor for StorableValue);
          outlined destroy of StorableValue(v282, type metadata accessor for StorableValue);
          if ((v284 & 1) == 0)
            break;
          ++v279;
          v278 += v280;
          if (v401 == v279)
            goto LABEL_135;
        }
        swift_bridgeObjectRelease();
        a4 = v341;
        v108 = v343;
        v95 = (uint64_t)v400;
        v114 = v340;
        v271 = v398;
        v274 = v403;
        v275 = v399;
LABEL_137:
        v273 = (v273 + 1) & v275;
        if (((*(_QWORD *)(v274 + ((v273 >> 3) & 0xFFFFFFFFFFFFF8)) >> v273) & 1) == 0)
        {
LABEL_138:
          v285 = (char *)swift_bridgeObjectRetain();
          LOBYTE(v225) = passesHaving #1 (payload:) in closure #2 in group(changes:by:metadata:aggregationFunctions:resultColumns:having:expressionEvaluator:)(v285, v108, v375, v114, a4);
          if (v95)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease_n();
          }
LABEL_142:
          v286 = v225;
          v400 = (uint64_t *)v95;
          swift_bridgeObjectRelease();
          if ((v286 & 1) != 0)
          {
            v287 = v339;
            swift_bridgeObjectRetain();
            specialized Dictionary._Variant.setValue(_:forKey:)();
            v334 = (_QWORD *)v287;
          }
          swift_bridgeObjectRelease();
          v401 = *v327;
          Hasher.init(_seed:)();
          v288 = v339;
          v403 = *(_QWORD *)(v339 + 16);
          Hasher._combine(_:)(v403);
          if (*(_QWORD *)(v288 + 16))
          {
            v289 = v339
                 + ((*(unsigned __int8 *)(v391 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v391 + 80));
            LODWORD(v397) = *MEMORY[0x1E0CB05F0];
            LODWORD(v396) = *MEMORY[0x1E0CB05E0];
            LODWORD(v395) = *MEMORY[0x1E0CB0600];
            LODWORD(v394) = *MEMORY[0x1E0CB0628];
            v290 = *(_QWORD *)(v391 + 72);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v291 = (uint64_t)v355;
            v292 = v354;
            v399 = v290;
            outlined init with copy of StorableValue(v289, v354, type metadata accessor for StorableValue);
            outlined init with copy of StorableValue(v292, v291, type metadata accessor for StorableValue);
            v293 = (char *)&loc_18D84D104 + dword_18D92391C[swift_getEnumCaseMultiPayload()];
            __asm { BR              X9 }
          }
          goto LABEL_148;
        }
      }
    }
    v118 = v404;
    if ((v404 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_135:
      swift_bridgeObjectRelease();
      goto LABEL_161;
    }
    v119 = v331;
    if ((unint64_t)v404 >= *(_QWORD *)(v331 + 16))
      goto LABEL_167;
    outlined init with copy of Aggregation(v331 + 40 * v404 + 32, (uint64_t)&v408);
    v120 = *((_QWORD *)&v409 + 1);
    v121 = v410;
    __swift_project_boxed_opaque_existential_1(&v408, *((uint64_t *)&v409 + 1));
    v338 = (*(uint64_t (**)(uint64_t, uint64_t))(v121 + 8))(v120, v121);
    v123 = v122;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v408);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()(v119);
      v119 = v243;
    }
    v333 = v123;
    if (v118 >= *(_QWORD *)(v119 + 16))
      goto LABEL_168;
    v124 = v119 + 40 * v118;
    v125 = v124 + 32;
    v126 = v119;
    v127 = *(_QWORD *)(v124 + 56);
    v128 = *(_QWORD *)(v124 + 64);
    __swift_mutable_project_boxed_opaque_existential_1(v124 + 32, v127);
    v129 = (uint64_t)v392;
    v130 = v118;
    v131 = (uint64_t)v393;
    (*(void (**)(char *, char *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v128 + 32))(v392, v393, 0, v342, v341, v127, v128);
    v132 = v396;
    outlined init with take of StorableValue(v129, v396, type metadata accessor for AggregationEvent);
    outlined init with take of StorableValue(v131, v397, type metadata accessor for AggregationEvent);
    v331 = v126;
    v133 = *(_QWORD *)(v126 + 16);
    v329 = v130;
    if (v130 >= v133)
      goto LABEL_169;
    outlined init with copy of Aggregation(v125, (uint64_t)&v408);
    v134 = *((_QWORD *)&v409 + 1);
    v135 = v410;
    __swift_project_boxed_opaque_existential_1(&v408, *((uint64_t *)&v409 + 1));
    v136 = (*(uint64_t (**)(uint64_t, uint64_t))(v135 + 40))(v134, v135);
    v137 = v330;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v137 + 16) + 1, 1, v137);
      v137 = v244;
    }
    v139 = *(_QWORD *)(v137 + 16);
    v138 = *(_QWORD *)(v137 + 24);
    if (v139 >= v138 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v138 > 1, v139 + 1, 1, v137);
      v137 = v245;
    }
    *(_QWORD *)(v137 + 16) = v139 + 1;
    v330 = v137;
    *(_QWORD *)(v137 + 8 * v139 + 32) = v136;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v408);
    outlined init with copy of StorableValue(v132, v395, type metadata accessor for StorableValue);
    v140 = v334;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v408 = v140;
    v142 = v333;
    v143 = specialized __RawDictionaryStorage.find<A>(_:)();
    v145 = v140[2];
    v146 = (v144 & 1) == 0;
    v147 = v145 + v146;
    if (__OFADD__(v145, v146))
      goto LABEL_170;
    v148 = v143;
    v149 = v144;
    v337 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
    v150 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v147);
    a4 = v341;
    v108 = v343;
    if (v150)
    {
      v151 = specialized __RawDictionaryStorage.find<A>(_:)();
      if ((v149 & 1) != (v152 & 1))
        goto LABEL_180;
      v148 = v151;
    }
    v334 = (_QWORD *)v408;
    if ((v149 & 1) != 0)
    {
      v153 = *(_QWORD *)(v408 + 56);
      v154 = v408;
      v345 = *(_QWORD *)(v391 + 72);
      v155 = v345 * v148;
      v156 = v390;
      outlined init with take of StorableValue(v153 + v155, v390, type metadata accessor for StorableValue);
      outlined init with take of StorableValue(v395, *(_QWORD *)(v154 + 56) + v155, type metadata accessor for StorableValue);
      __swift_storeEnumTagSinglePayload(v156, 0, 1, v402);
    }
    else
    {
      *(_QWORD *)(v408 + 8 * (v148 >> 6) + 64) |= 1 << v148;
      v157 = (uint64_t *)(v334[6] + 16 * v148);
      *v157 = v338;
      v157[1] = v142;
      v158 = v334[7];
      v345 = *(_QWORD *)(v391 + 72);
      outlined init with take of StorableValue(v395, v158 + v345 * v148, type metadata accessor for StorableValue);
      v159 = v334[2];
      v160 = __OFADD__(v159, 1);
      v161 = v159 + 1;
      if (v160)
        goto LABEL_174;
      v334[2] = v161;
      v156 = v390;
      __swift_storeEnumTagSinglePayload(v390, 1, 1, v402);
      swift_bridgeObjectRetain();
    }
    v162 = v340;
    v163 = v397;
    swift_bridgeObjectRelease();
    outlined destroy of UUID?(v156, &demangling cache variable for type metadata for StorableValue?);
    outlined init with copy of StorableValue(v163, v394, type metadata accessor for StorableValue);
    v164 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v408 = *(_QWORD *)(v162 + 16);
    v165 = v408;
    *(_QWORD *)(v162 + 16) = 0x8000000000000000;
    v166 = specialized __RawDictionaryStorage.find<A>(_:)();
    v168 = v167;
    v169 = *(_QWORD *)(v165 + 16);
    v170 = (v167 & 1) == 0;
    if (__OFADD__(v169, v170))
      goto LABEL_171;
    v171 = v166;
    v172 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v164, v169 + v170);
    v92 = v339;
    if (v172)
    {
      v173 = specialized __RawDictionaryStorage.find<A>(_:)();
      if ((v168 & 1) != (v174 & 1))
      {
LABEL_180:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        goto LABEL_181;
      }
      v171 = v173;
    }
    v175 = (_QWORD *)v408;
    if ((v168 & 1) != 0)
    {
      v176 = v345 * v171;
      v177 = v388;
      outlined init with take of StorableValue(*(_QWORD *)(v408 + 56) + v176, v388, type metadata accessor for StorableValue);
      v178 = v175[7] + v176;
      v179 = v177;
      outlined init with take of StorableValue(v394, v178, type metadata accessor for StorableValue);
      __swift_storeEnumTagSinglePayload(v177, 0, 1, v402);
    }
    else
    {
      *(_QWORD *)(v408 + 8 * (v171 >> 6) + 64) |= 1 << v171;
      v180 = (uint64_t *)(v175[6] + 16 * v171);
      *v180 = v338;
      v180[1] = v142;
      outlined init with take of StorableValue(v394, v175[7] + v345 * v171, type metadata accessor for StorableValue);
      v181 = v175[2];
      v160 = __OFADD__(v181, 1);
      v182 = v181 + 1;
      if (v160)
        goto LABEL_175;
      v175[2] = v182;
      v179 = v388;
      __swift_storeEnumTagSinglePayload(v388, 1, 1, v402);
      swift_bridgeObjectRetain();
    }
    v114 = v340;
    v183 = (uint64_t)v389;
    v184 = v329;
    *(_QWORD *)(v340 + 16) = v175;
    swift_bridgeObjectRelease();
    outlined destroy of UUID?(v179, &demangling cache variable for type metadata for StorableValue?);
    swift_bridgeObjectRelease();
    if (v184 >= *(_QWORD *)(v398 + 16))
      goto LABEL_172;
    AggregationFunction.aggregationType.getter(v183);
    v185 = Description;
    v186 = v387;
    v187 = Description[11](v183, v387);
    if (v187 != v325 && v187 != v324)
    {
      outlined destroy of StorableValue(v397, type metadata accessor for AggregationEvent);
      outlined destroy of StorableValue(v396, type metadata accessor for AggregationEvent);
      v185[1](v183, v186);
      goto LABEL_104;
    }
    v185[12](v183, v186);
    v189 = type metadata accessor for SQLExpression();
    (*((void (**)(uint64_t, ValueMetadata *))v189[-1].Description + 1))(v183, v189);
    v190 = v396;
    v191 = v397;
    static StorableValue.== infix(_:_:)(v396, v397);
    if ((v192 & 1) == 0)
      break;
    outlined destroy of StorableValue(v191, type metadata accessor for AggregationEvent);
    outlined destroy of StorableValue(v190, type metadata accessor for AggregationEvent);
LABEL_104:
    __swift_destroy_boxed_opaque_existential_1Tm(v326);
    v112 = v336;
  }
  v193 = v320;
  specialized KeyedQueryPlannerMetadataCache.getValue(forKey:)(v92);
  if (v194)
  {
    swift_bridgeObjectRelease();
    v195 = *(_QWORD *)(v193 + *(int *)(type metadata accessor for KeyedFirstMatchingRecordCache(0) + 28));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.getter(v92, v195);
    v197 = v196;
    v199 = v198;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v200 = (_QWORD *)v401;
    v201 = 1;
    if (v197)
    {
      swift_bridgeObjectRelease();
      if ((v199 & 1) == 0)
        v201 = 0;
    }
  }
  else
  {
    v201 = 0;
    v200 = (_QWORD *)v401;
  }
  v202 = v342;
  swift_bridgeObjectRetain();
  specialized KeyedQueryPlannerMetadataCache.updateCache(_:forKey:)(v344, v202, v92);
  swift_bridgeObjectRelease();
  type metadata accessor for KeyedFirstMatchingRecordCache(0);
  swift_bridgeObjectRetain();
  specialized Dictionary._Variant.updateValue(_:forKey:)(0, v202, v201, v92);
  swift_bridgeObjectRelease();
  v203 = 1 << *(_BYTE *)(v202 + 32);
  if (v203 < 64)
    v204 = ~(-1 << v203);
  else
    v204 = -1;
  v205 = v204 & *(_QWORD *)(v202 + 64);
  v206 = (unint64_t)(v203 + 63) >> 6;
  v333 = v206 - 1;
  swift_bridgeObjectRetain();
  v338 = 0;
  while (2)
  {
    if (v205)
    {
      v207 = __clz(__rbit64(v205));
      v205 &= v205 - 1;
      v208 = v207 | (v338 << 6);
      goto LABEL_74;
    }
    v214 = v338 + 1;
    if (__OFADD__(v338, 1))
      goto LABEL_147;
    if (v214 >= v206)
      goto LABEL_92;
    v215 = *(_QWORD *)(v328 + 8 * v214);
    if (!v215)
    {
      v216 = v338 + 2;
      ++v338;
      if (v214 + 1 < v206)
      {
        v215 = *(_QWORD *)(v328 + 8 * v216);
        if (v215)
        {
LABEL_81:
          v214 = v216;
          goto LABEL_78;
        }
        v338 = v214 + 1;
        if (v214 + 2 < v206)
        {
          v215 = *(_QWORD *)(v328 + 8 * (v214 + 2));
          if (v215)
          {
            v214 += 2;
            goto LABEL_78;
          }
          v216 = v214 + 3;
          v338 = v214 + 2;
          if (v214 + 3 < v206)
          {
            v215 = *(_QWORD *)(v328 + 8 * v216);
            if (v215)
              goto LABEL_81;
            while (1)
            {
              v214 = v216 + 1;
              if (__OFADD__(v216, 1))
                goto LABEL_178;
              if (v214 >= v206)
                break;
              v215 = *(_QWORD *)(v328 + 8 * v214);
              ++v216;
              if (v215)
                goto LABEL_78;
            }
            v338 = v333;
          }
        }
      }
LABEL_92:
      v217 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: String, value: StorableValue));
      __swift_storeEnumTagSinglePayload((uint64_t)v200, 1, 1, v217);
      v205 = 0;
      goto LABEL_93;
    }
LABEL_78:
    v205 = (v215 - 1) & v215;
    v208 = __clz(__rbit64(v215)) + (v214 << 6);
    v338 = v214;
LABEL_74:
    v209 = *(_QWORD *)(v342 + 56);
    v210 = (_QWORD *)(*(_QWORD *)(v342 + 48) + 16 * v208);
    v211 = v210[1];
    *v200 = *v210;
    v200[1] = v211;
    v212 = v209 + v345 * v208;
    v213 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: String, value: StorableValue));
    outlined init with copy of StorableValue(v212, (uint64_t)v200 + *(int *)(v213 + 48), type metadata accessor for StorableValue);
    __swift_storeEnumTagSinglePayload((uint64_t)v200, 0, 1, v213);
    swift_bridgeObjectRetain();
LABEL_93:
    v218 = (uint64_t)v200;
    v219 = v400;
    outlined init with take of UUID?(v218, (uint64_t)v400, &demangling cache variable for type metadata for (key: String, value: StorableValue)?);
    v220 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: String, value: StorableValue));
    if (__swift_getEnumTagSinglePayload((uint64_t)v219, 1, v220) == 1)
    {
      swift_release();
      outlined destroy of StorableValue(v397, type metadata accessor for AggregationEvent);
      outlined destroy of StorableValue(v396, type metadata accessor for AggregationEvent);
      a4 = v341;
      v108 = v343;
      goto LABEL_104;
    }
    v222 = *v219;
    v221 = v219[1];
    outlined init with take of StorableValue((uint64_t)v219 + *(int *)(v220 + 48), v403, type metadata accessor for StorableValue);
    v223 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v408 = *(_QWORD *)(v114 + 16);
    v224 = v408;
    *(_QWORD *)(v114 + 16) = 0x8000000000000000;
    v225 = specialized __RawDictionaryStorage.find<A>(_:)();
    v227 = v226;
    v228 = *(_QWORD *)(v224 + 16);
    v229 = (v226 & 1) == 0;
    if (__OFADD__(v228, v229))
    {
      __break(1u);
      goto LABEL_142;
    }
    v230 = v225;
    v231 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v223, v228 + v229);
    v200 = (_QWORD *)v401;
    if (v231)
    {
      v232 = specialized __RawDictionaryStorage.find<A>(_:)();
      if ((v227 & 1) != (v233 & 1))
        goto LABEL_180;
      v230 = v232;
    }
    v234 = (_QWORD *)v408;
    if ((v227 & 1) != 0)
    {
      v235 = v345 * v230;
      v236 = *(_QWORD *)(v408 + 56) + v345 * v230;
      v237 = v399;
      outlined init with take of StorableValue(v236, v399, type metadata accessor for StorableValue);
      v238 = v234[7] + v235;
      v239 = v237;
      outlined init with take of StorableValue(v403, v238, type metadata accessor for StorableValue);
      __swift_storeEnumTagSinglePayload(v237, 0, 1, v402);
LABEL_102:
      v92 = v339;
      v114 = v340;
      *(_QWORD *)(v340 + 16) = v234;
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v239, &demangling cache variable for type metadata for StorableValue?);
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  *(_QWORD *)(v408 + 8 * (v230 >> 6) + 64) |= 1 << v230;
  v240 = (_QWORD *)(v234[6] + 16 * v230);
  *v240 = v222;
  v240[1] = v221;
  outlined init with take of StorableValue(v403, v234[7] + v345 * v230, type metadata accessor for StorableValue);
  v241 = v234[2];
  v160 = __OFADD__(v241, 1);
  v242 = v241 + 1;
  if (!v160)
  {
    v234[2] = v242;
    v239 = v399;
    __swift_storeEnumTagSinglePayload(v399, 1, 1, v402);
    swift_bridgeObjectRetain();
    goto LABEL_102;
  }
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v294 = Hasher._finalize()();
  v295 = -1 << *(_BYTE *)(v401 + 32);
  v296 = v294 & ~v295;
  v402 = v401 + 56;
  if (((*(_QWORD *)(v401 + 56 + ((v296 >> 3) & 0xFFFFFFFFFFFFF8)) >> v296) & 1) != 0)
  {
    v297 = ~v295;
    v399 = ~v295;
    v298 = (uint64_t)v360;
    v299 = v384;
    do
    {
      v300 = *(_QWORD *)(*(_QWORD *)(v401 + 48) + 8 * v296);
      if (*(_QWORD *)(v300 + 16) == v403)
      {
        if (!v403 || v300 == v339)
          goto LABEL_135;
        v301 = v391;
        v302 = (*(unsigned __int8 *)(v391 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v391 + 80);
        swift_bridgeObjectRetain();
        v303 = 0;
        v304 = *(_QWORD *)(v301 + 72);
        while (1)
        {
          outlined init with copy of StorableValue(v300 + v302, v299, type metadata accessor for StorableValue);
          if (v303 >= *(_QWORD *)(v339 + 16))
            goto LABEL_179;
          outlined init with copy of StorableValue(v339 + v302, v298, type metadata accessor for StorableValue);
          static StorableValue.== infix(_:_:)(v299, v298);
          v306 = v305;
          outlined destroy of StorableValue(v298, type metadata accessor for StorableValue);
          outlined destroy of StorableValue(v299, type metadata accessor for StorableValue);
          if ((v306 & 1) == 0)
            break;
          ++v303;
          v302 += v304;
          if (v403 == v303)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_161;
          }
        }
        swift_bridgeObjectRelease();
        v297 = v399;
      }
      v296 = (v296 + 1) & v297;
    }
    while (((*(_QWORD *)(v402 + ((v296 >> 3) & 0xFFFFFFFFFFFFF8)) >> v296) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  v307 = v327;
  swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v404 = *v307;
  *v307 = 0x8000000000000000;
  v308 = swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(v308, v296);
  *v307 = v404;
  swift_bridgeObjectRelease();
LABEL_161:
  swift_bridgeObjectRelease();
  v309 = v375;
  v310 = v341;
  v311 = v343;
  v312 = v340;
  v313 = (char *)swift_bridgeObjectRetain();
  v314 = v309;
  v315 = (uint64_t)v400;
  v316 = passesHaving #1 (payload:) in closure #2 in group(changes:by:metadata:aggregationFunctions:resultColumns:having:expressionEvaluator:)(v313, v311, v314, v312, v310);
  if (v315)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    v317 = v316;
    swift_bridgeObjectRelease();
    if ((v317 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      specialized Dictionary._Variant.setValue(_:forKey:)();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      specialized Dictionary._Variant.removeValue(forKey:)();
      v319 = v318;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      v339 = v319;
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of Aggregation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for COUNT_STAR(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  ValueMetadata *v11;
  void (*v12)(char *, char *, ValueMetadata *);
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SQLDataType();
    v12 = (void (*)(char *, char *, ValueMetadata *))*((_QWORD *)v11[-1].Description + 2);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v5;

  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_107_0();
  v1 = OUTLINED_FUNCTION_139_0();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v1, v2, v3);
  *v0 = v5;
  return swift_bridgeObjectRelease();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], [String : StorableValue]>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) != 0)
  {
    v19 = v18[7];
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v19 + 8 * v14) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a1, v18);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t passesHaving #1 (payload:) in closure #2 in group(changes:by:metadata:aggregationFunctions:resultColumns:having:expressionEvaluator:)(char *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  ValueMetadata *v23;
  void (**v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  ValueMetadata *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  ValueMetadata *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, ValueMetadata *);
  char *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t, ValueMetadata *);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v63;
  Swift::Int v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  _BOOL8 v71;
  Swift::Int v72;
  unint64_t v73;
  char v74;
  Swift::Bool v75;
  unint64_t v76;
  char v77;
  char *v78;
  uint64_t *v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t result;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  void (*v94)(char *, uint64_t, ValueMetadata *);
  uint64_t v95;
  void (**v96)(char *, char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  ValueMetadata *v104;
  char *v105;
  _QWORD *Description;
  char *v107;

  v90 = a5;
  v91 = a3;
  v99 = a4;
  v103 = a2;
  v7 = type metadata accessor for StorableValue(0);
  v102 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v97 = (uint64_t)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v100 = (uint64_t)&v87 - v13;
  v104 = type metadata accessor for ResultColumn();
  Description = v104[-1].Description;
  v14 = MEMORY[0x1E0C80A78](v104);
  v101 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v105 = (char *)&v87 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v87 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for SQLExpression();
  v24 = (void (**)(char *, char *, uint64_t))v23[-1].Description;
  v25 = MEMORY[0x1E0C80A78](v23);
  v98 = (uint64_t)&v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v87 - v27;
  v30 = v29;
  outlined init with copy of Date?(v103, (uint64_t)v22, &demangling cache variable for type metadata for SQLExpression?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v22, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for SQLExpression?);
    LOBYTE(v31) = 1;
    return v31 & 1;
  }
  v88 = v28;
  v89 = v5;
  v95 = v30;
  v96 = v24;
  v24[4](v28, v22, v30);
  v32 = (char *)MEMORY[0x1E0DEE9D8];
  v107 = (char *)MEMORY[0x1E0DEE9D8];
  v33 = v91;
  v34 = v91[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v103 = v7;
  v92 = v12;
  if (v34)
  {
    v35 = Description[9];
    v93 = (*((unsigned __int8 *)Description + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)Description + 80);
    v36 = (uint64_t)v33 + v93;
    v94 = (void (*)(char *, uint64_t, ValueMetadata *))Description[2];
    v31 = v104;
    do
    {
      v94(v19, v36, v31);
      ResultColumn.alias.getter();
      v37 = v31;
      v39 = v38;
      swift_bridgeObjectRelease();
      if (v39)
      {
        v40 = (void (*)(char *, char *, ValueMetadata *))Description[4];
        v40(v105, v19, v37);
        v41 = v107;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v41 = v107;
        }
        v42 = *((_QWORD *)v41 + 2);
        if (v42 >= *((_QWORD *)v41 + 3) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v41 = v107;
        }
        *((_QWORD *)v41 + 2) = v42 + 1;
        v31 = v104;
        v40(&v41[v93 + v42 * v35], v105, v104);
        v107 = v41;
        v7 = v103;
      }
      else
      {
        ((void (*)(char *, ValueMetadata *))Description[1])(v19, v37);
        v31 = v37;
      }
      v36 += v35;
      --v34;
    }
    while (v34);
    v32 = v107;
  }
  else
  {
    v31 = v104;
  }
  swift_bridgeObjectRelease();
  v43 = (char *)*((_QWORD *)v32 + 2);
  v44 = v101;
  if (!v43)
  {
LABEL_38:
    swift_release();
    v84 = (uint64_t)v88;
    v83 = v89;
    v85 = SQLExpressionEvaluator.evaluatesToTrue(expression:payload:)((uint64_t)v88, (uint64_t)a1);
    if (!v83)
      LOBYTE(v31) = v85;
    ((void (*)(uint64_t, uint64_t))v96[1])(v84, v95);
    swift_bridgeObjectRelease();
    return v31 & 1;
  }
  v45 = (*((unsigned __int8 *)Description + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)Description + 80);
  v91 = v32;
  v46 = (uint64_t)&v32[v45];
  v47 = (void (*)(char *, uint64_t, ValueMetadata *))Description[2];
  v93 = Description[9];
  v94 = v47;
  while (1)
  {
    v105 = v43;
    v48 = a1;
    v49 = v7;
    v94(v44, v46, v31);
    v50 = ResultColumn.name.getter();
    v52 = v51;
    v53 = v98;
    ResultColumn.expression.getter(v98);
    SQLExpression.sql.getter();
    ((void (*)(uint64_t, uint64_t))v96[1])(v53, v95);
    v54 = *(_QWORD *)(v99 + 16);
    if (*(_QWORD *)(v54 + 16))
    {
      v55 = specialized __RawDictionaryStorage.find<A>(_:)();
      v7 = v49;
      if ((v56 & 1) != 0)
      {
        v57 = v100;
        outlined init with copy of StorableValue(*(_QWORD *)(v54 + 56) + *(_QWORD *)(v102 + 72) * v55, v100, type metadata accessor for StorableValue);
        v58 = 0;
      }
      else
      {
        v58 = 1;
        v57 = v100;
      }
    }
    else
    {
      v58 = 1;
      v57 = v100;
      v7 = v49;
    }
    a1 = (char *)v48;
    __swift_storeEnumTagSinglePayload(v57, v58, 1, v7);
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload(v57, 1, v7) == 1)
    {
      outlined destroy of UUID?(v57, &demangling cache variable for type metadata for StorableValue?);
      swift_bridgeObjectRetain();
      v59 = specialized __RawDictionaryStorage.find<A>(_:)();
      v61 = v60;
      swift_bridgeObjectRelease();
      if ((v61 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v107 = (char *)v48;
        v63 = v48[3];
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
        v64 = v63;
        v7 = v103;
        _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v64);
        a1 = v107;
        swift_bridgeObjectRelease();
        v65 = (uint64_t)v92;
        outlined init with take of StorableValue(*((_QWORD *)a1 + 7) + *(_QWORD *)(v102 + 72) * v59, (uint64_t)v92, type metadata accessor for StorableValue);
        _NativeDictionary._delete(at:)();
        swift_bridgeObjectRelease();
        v66 = 0;
      }
      else
      {
        v66 = 1;
        v65 = (uint64_t)v92;
      }
      v31 = v104;
      v78 = v105;
      v44 = v101;
      __swift_storeEnumTagSinglePayload(v65, v66, 1, v7);
      outlined destroy of UUID?(v65, &demangling cache variable for type metadata for StorableValue?);
      swift_bridgeObjectRelease();
      goto LABEL_37;
    }
    outlined init with take of StorableValue(v57, v97, type metadata accessor for StorableValue);
    v67 = swift_isUniquelyReferenced_nonNull_native();
    v107 = (char *)v48;
    v68 = specialized __RawDictionaryStorage.find<A>(_:)();
    v70 = v48[2];
    v71 = (v69 & 1) == 0;
    v72 = v70 + v71;
    if (__OFADD__(v70, v71))
      break;
    v73 = v68;
    v74 = v69;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
    v75 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v67, v72);
    v31 = v104;
    if (v75)
    {
      v76 = specialized __RawDictionaryStorage.find<A>(_:)();
      if ((v74 & 1) != (v77 & 1))
        goto LABEL_44;
      v73 = v76;
    }
    a1 = v107;
    if ((v74 & 1) != 0)
    {
      outlined assign with take of StorableValue(v97, *((_QWORD *)v107 + 7) + *(_QWORD *)(v102 + 72) * v73);
    }
    else
    {
      *(_QWORD *)&v107[8 * (v73 >> 6) + 64] |= 1 << v73;
      v79 = (uint64_t *)(*((_QWORD *)a1 + 6) + 16 * v73);
      *v79 = v50;
      v79[1] = v52;
      outlined init with take of StorableValue(v97, *((_QWORD *)a1 + 7) + *(_QWORD *)(v102 + 72) * v73, type metadata accessor for StorableValue);
      v80 = *((_QWORD *)a1 + 2);
      v81 = __OFADD__(v80, 1);
      v82 = v80 + 1;
      if (v81)
        goto LABEL_43;
      *((_QWORD *)a1 + 2) = v82;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = v103;
    v44 = v101;
    v78 = v105;
LABEL_37:
    ((void (*)(char *, ValueMetadata *))Description[1])(v44, v31);
    v46 += v93;
    v43 = v78 - 1;
    if (!v43)
      goto LABEL_38;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t destroy for AggregationFunction.AggregationType(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 192);
  if (v2 >= 7)
    v2 = *(_DWORD *)result + 7;
  switch(v2)
  {
    case 0u:
    case 1u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
      __swift_destroy_boxed_opaque_existential_1Tm(result);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      __swift_destroy_boxed_opaque_existential_1Tm(result);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (*(_QWORD *)(v1 + 120))
      {
        __swift_destroy_boxed_opaque_existential_1Tm(v1 + 96);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_5:
        result = swift_bridgeObjectRelease();
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for Aggregation.name.getter in conformance COUNT_STAR()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void protocol witness for Aggregation.processEvent(changeRecord:expressionEvaluator:) in conformance COUNT_STAR()
{
  COUNT_STAR.processEvent(changeRecord:expressionEvaluator:)();
}

void StorableValue.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  char *v8;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v2);
  OUTLINED_FUNCTION_40();
  v3 = type metadata accessor for Date.ISO8601FormatStyle();
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_115();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_0();
  v5 = MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_118();
  outlined init with copy of StorableValue(v0, v1, v7);
  v8 = (char *)sub_18D84E848 + 4 * byte_18DC0BC70[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_18D84E848()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;

  v2 = v0[1];
  *(_QWORD *)(v1 - 96) = *v0;
  *(_QWORD *)(v1 - 88) = v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v3 = Optional<A>.hashValue.getter();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_131(v3);
}

uint64_t OUTLINED_FUNCTION_65_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_65_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, *(_QWORD *)(v3 - 104), v2);
}

uint64_t OUTLINED_FUNCTION_65_2()
{
  return type metadata accessor for Date();
}

uint64_t OUTLINED_FUNCTION_123_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + *(int *)(a1 + 28)) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_106_0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_106_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_106_2()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_80(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of UUID?(v2 - 152, a2);
}

unint64_t OUTLINED_FUNCTION_80_0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  return result;
}

uint64_t OUTLINED_FUNCTION_80_2@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + a1) = *(_QWORD *)(v2 + a1);
  return swift_bridgeObjectRetain();
}

uint64_t static StorableValue.hashForDouble(double:)(double a1)
{
  double v1;
  uint64_t result;

  v1 = floor(a1);
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 9.22337204e18)
    return Int.hashValue.getter();
LABEL_7:
  __break(1u);
  return result;
}

void static StorableValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(_QWORD);
  char *v35;
  uint64_t v36[12];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v40 = a2;
  v41 = a1;
  v37 = type metadata accessor for UUID();
  v36[1] = *(_QWORD *)(v37 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v2);
  OUTLINED_FUNCTION_14_2(v3, v36[0]);
  v36[8] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_8();
  v36[11] = v5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_6_1();
  v36[2] = v7;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v8);
  v36[9] = (uint64_t)v36 - v9;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_61();
  v38 = v11;
  OUTLINED_FUNCTION_87();
  v12 = type metadata accessor for Date.ISO8601FormatStyle();
  v36[5] = *(_QWORD *)(v12 - 8);
  v36[6] = v12;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_93(v14, v36[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v15);
  OUTLINED_FUNCTION_6_1();
  v36[3] = v16;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v17);
  OUTLINED_FUNCTION_53();
  v36[7] = v18;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v19);
  v36[10] = (uint64_t)v36 - v20;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v21);
  OUTLINED_FUNCTION_61();
  v39 = v22;
  v23 = OUTLINED_FUNCTION_87();
  type metadata accessor for StorableValue(v23);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v24);
  OUTLINED_FUNCTION_63();
  v26 = MEMORY[0x1E0C80A78](v25);
  MEMORY[0x1E0C80A78](v26);
  OUTLINED_FUNCTION_159();
  v28 = MEMORY[0x1E0C80A78](v27);
  v29 = MEMORY[0x1E0C80A78](v28);
  MEMORY[0x1E0C80A78](v29);
  OUTLINED_FUNCTION_66();
  v31 = MEMORY[0x1E0C80A78](v30);
  MEMORY[0x1E0C80A78](v31);
  OUTLINED_FUNCTION_158();
  MEMORY[0x1E0C80A78](v32);
  outlined init with copy of StorableValue(v41, (uint64_t)v36 - v33, v34);
  v35 = (char *)sub_18D84FDD8 + 4 * byte_18DC0BC68[OUTLINED_FUNCTION_33_0()];
  __asm { BR              X10 }
}

uint64_t sub_18D84FDD8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v3 = *v0;
  v4 = *((_BYTE *)v0 + 8);
  outlined init with copy of StorableValue(*(_QWORD *)(v2 - 120), v1, type metadata accessor for StorableValue);
  if (OUTLINED_FUNCTION_33_0())
  {
    outlined destroy of StorableValue(v1, type metadata accessor for StorableValue);
    v5 = 0;
  }
  else
  {
    v5 = *(_BYTE *)(v1 + 8);
    if ((v4 & 1) == 0)
      v5 = (v3 == *(_QWORD *)v1) & ~v5;
  }
  return v5 & 1;
}

uint64_t specialized Dictionary._Variant.updateValue(_:forKey:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  char v8;
  char v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v13;

  v5 = v4;
  v8 = a1 & 1;
  v9 = a3 & 1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v4;
  *v4 = 0x8000000000000000;
  v11 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v8, a2, v9, a4, isUniquelyReferenced_nonNull_native);
  *v5 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(char a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  char v23;
  _QWORD *v24;
  char *v25;
  uint64_t result;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_13;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_9;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], (value: ChangeRecord, event: CacheEvent)>);
    _NativeDictionary.copy()();
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_13:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = v20;
LABEL_9:
  v22 = a1 & 1;
  v23 = a3 & 1;
  v24 = *v6;
  if ((v18 & 1) != 0)
  {
    v25 = (char *)(v24[7] + 24 * v14);
    result = *v25;
    *v25 = v22;
    *((_QWORD *)v25 + 1) = a2;
    v25[16] = v23;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v14, a4, v22, a2, v23, v24);
    swift_bridgeObjectRetain();
    return 0;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a6[6] + 8 * result) = a2;
  v6 = a6[7] + 24 * result;
  *(_BYTE *)v6 = a3 & 1;
  *(_QWORD *)(v6 + 8) = a4;
  *(_BYTE *)(v6 + 16) = a5 & 1;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

uint64_t typeWithBMPBIntentType(uint64_t result)
{
  NSObject *v1;

  if (result < 4)
    return result;
  __biome_log_for_category();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    typeWithBMPBIntentType_cold_1();

  return 0;
}

uint64_t interactionDirectionWithPB(uint64_t result)
{
  NSObject *v1;

  if (result < 4)
    return result;
  __biome_log_for_category();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    interactionDirectionWithPB_cold_1();

  return 0;
}

size_t OUTLINED_FUNCTION_96_0(const void *ptr)
{
  return _swift_stdlib_malloc_size(ptr);
}

uint64_t OUTLINED_FUNCTION_68_0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_68_1()
{
  uint64_t v0;
  uint64_t v1;

  return specialized == infix<A>(_:_:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_67_1()
{
  return OSSignpostIntervalState.signpostID.getter();
}

unint64_t OUTLINED_FUNCTION_67_2()
{
  return specialized __RawDictionaryStorage.find<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_67_3@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + a1) = *(_QWORD *)(v2 + a1);
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_66_0()
{
  return swift_release();
}

void OUTLINED_FUNCTION_66_1()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_66_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_66_4()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_252()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t OUTLINED_FUNCTION_215(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

void OUTLINED_FUNCTION_215_0(char a1@<W8>)
{
  uint64_t v1;

  **(_QWORD **)(v1 - 512) = -1 << a1;
}

uint64_t OUTLINED_FUNCTION_189@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

void OUTLINED_FUNCTION_189_0()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_175()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void OUTLINED_FUNCTION_142(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  outlined init with copy of Date?(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_142_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 120) = a5;
  *(_QWORD *)(v6 - 112) = v5;
  *(_QWORD *)(v6 - 128) = a4;
  *(_QWORD *)(v6 - 168) = a1;
  *(_QWORD *)(v6 - 160) = a2;
  return type metadata accessor for String.Encoding();
}

uint64_t OUTLINED_FUNCTION_140()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1Tm(v0 - 152);
}

uint64_t OUTLINED_FUNCTION_140_0()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_112()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_112_0()
{
  return swift_getEnumCaseMultiPayload();
}

void OUTLINED_FUNCTION_112_1(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of UUID?(a1, v1);
}

uint64_t BMPBIntentEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  void *v50;
  uint64_t v51;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 92) |= 1u;
          v18 = *v3;
          v19 = *(_QWORD *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
            *(_QWORD *)(a2 + v18) = v19 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          *(_QWORD *)(a1 + 8) = v20;
          continue;
        case 2u:
          PBReaderReadString();
          v22 = objc_claimAutoreleasedReturnValue();
          v23 = 16;
          goto LABEL_59;
        case 3u:
          PBReaderReadString();
          v22 = objc_claimAutoreleasedReturnValue();
          v23 = 80;
          goto LABEL_59;
        case 4u:
          PBReaderReadString();
          v22 = objc_claimAutoreleasedReturnValue();
          v23 = 32;
          goto LABEL_59;
        case 5u:
          PBReaderReadString();
          v22 = objc_claimAutoreleasedReturnValue();
          v23 = 48;
          goto LABEL_59;
        case 6u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 92) |= 4u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            v29 = v28 + 1;
            if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if (v30 < 0)
              {
                v24 += 7;
                v15 = v25++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_63:
          v51 = 44;
          goto LABEL_76;
        case 7u:
          v31 = 0;
          v32 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 92) |= 2u;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v35;
              v26 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                v15 = v32++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_67:
          v51 = 40;
          goto LABEL_76;
        case 8u:
          PBReaderReadData();
          v22 = objc_claimAutoreleasedReturnValue();
          v23 = 56;
          goto LABEL_59;
        case 9u:
          PBReaderReadString();
          v22 = objc_claimAutoreleasedReturnValue();
          v23 = 72;
          goto LABEL_59;
        case 0xAu:
          v37 = 0;
          v38 = 0;
          v39 = 0;
          *(_BYTE *)(a1 + 92) |= 0x10u;
          while (2)
          {
            v40 = *v3;
            v41 = *(_QWORD *)(a2 + v40);
            v42 = v41 + 1;
            if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
              *(_QWORD *)(a2 + v40) = v42;
              v39 |= (unint64_t)(v43 & 0x7F) << v37;
              if (v43 < 0)
              {
                v37 += 7;
                v15 = v38++ >= 9;
                if (v15)
                {
                  v39 = 0;
                  goto LABEL_71;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v39 = 0;
LABEL_71:
          *(_BYTE *)(a1 + 88) = v39 != 0;
          continue;
        case 0xBu:
          v44 = 0;
          v45 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 92) |= 8u;
          break;
        case 0xCu:
          PBReaderReadString();
          v22 = objc_claimAutoreleasedReturnValue();
          v23 = 24;
LABEL_59:
          v50 = *(void **)(a1 + v23);
          *(_QWORD *)(a1 + v23) = v22;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v46 = *v3;
        v47 = *(_QWORD *)(a2 + v46);
        v48 = v47 + 1;
        if (v47 == -1 || v48 > *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
        *(_QWORD *)(a2 + v46) = v48;
        v26 |= (unint64_t)(v49 & 0x7F) << v44;
        if ((v49 & 0x80) == 0)
          goto LABEL_73;
        v44 += 7;
        v15 = v45++ >= 9;
        if (v15)
        {
          LODWORD(v26) = 0;
          goto LABEL_75;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_73:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_75:
      v51 = 64;
LABEL_76:
      *(_DWORD *)(a1 + v51) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

ValueMetadata *type metadata accessor for ChangeRecord()
{
  return &type metadata for ChangeRecord;
}

ValueMetadata *type metadata accessor for CacheEvent()
{
  return &type metadata for CacheEvent;
}

uint64_t BMPBMicroLocationRestrictedLocalizationEventReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  BMPBProbabilityPerLabel *v27;
  uint64_t v28;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        a1[56] |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        v28 = 8;
        goto LABEL_40;
      case 2u:
        PBReaderReadString();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = 24;
        goto LABEL_26;
      case 3u:
        PBReaderReadString();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = 32;
LABEL_26:
        v24 = *(void **)&a1[v23];
        *(_QWORD *)&a1[v23] = v22;

        goto LABEL_41;
      case 4u:
        a1[56] |= 2u;
        v25 = *v3;
        v26 = *(_QWORD *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v26);
          *(_QWORD *)(a2 + v25) = v26 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        v28 = 16;
LABEL_40:
        *(_QWORD *)&a1[v28] = v20;
        goto LABEL_41;
      case 5u:
        v27 = objc_alloc_init(BMPBProbabilityPerLabel);
        objc_msgSend(a1, "addProbabilityVector:", v27);
        if (!PBReaderPlaceMark() || (BMPBProbabilityPerLabelReadFrom((uint64_t)v27, a2) & 1) == 0)
          goto LABEL_43;
        goto LABEL_35;
      case 6u:
        v27 = objc_alloc_init(BMPBNumDevicesPerTechnology);
        objc_msgSend(a1, "addNumDevicesVector:", v27);
        if (PBReaderPlaceMark() && (BMPBNumDevicesPerTechnologyReadFrom((uint64_t)v27, a2) & 1) != 0)
        {
LABEL_35:
          PBReaderRecallMark();

LABEL_41:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_43:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_41;
    }
  }
}

uint64_t BMPBNumDevicesPerTechnologyReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBProbabilityPerLabelReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v22 = 0;
        }
        *(_QWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v18;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBMicroLocationTruthTagEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  void *v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v16)
          v17 = 1;
        else
          v17 = (v10 & 7) == 4;
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 1u;
              v18 = *v3;
              v19 = *(_QWORD *)(a2 + v18);
              if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
                *(_QWORD *)(a2 + v18) = v19 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v20 = 0;
              }
              *(_QWORD *)(a1 + 8) = v20;
              goto LABEL_30;
            case 2u:
              PBReaderReadString();
              v21 = objc_claimAutoreleasedReturnValue();
              v22 = 32;
              goto LABEL_27;
            case 3u:
              PBReaderReadString();
              v21 = objc_claimAutoreleasedReturnValue();
              v22 = 24;
              goto LABEL_27;
            case 4u:
              PBReaderReadString();
              v21 = objc_claimAutoreleasedReturnValue();
              v22 = 16;
LABEL_27:
              v24 = *(void **)(a1 + v22);
              *(_QWORD *)(a1 + v22) = v21;

              goto LABEL_30;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_30:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18D855F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

uint64_t BMPBRankableSocialHighlightReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BMPBSocialHighlightContact *v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 112;
        goto LABEL_82;
      case 2u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 180) |= 0x10u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              v15 = v22++ >= 9;
              if (v15)
              {
                LODWORD(v23) = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_86:
        v59 = 120;
        goto LABEL_95;
      case 3u:
        *(_BYTE *)(a1 + 180) |= 8u;
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v30 = 0;
        }
        v62 = 32;
        goto LABEL_109;
      case 4u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 168;
        goto LABEL_82;
      case 5u:
        PBReaderReadString();
        v31 = (BMPBSocialHighlightContact *)objc_claimAutoreleasedReturnValue();
        if (v31)
          objc_msgSend((id)a1, "addApplicationIdentifiers:", v31);
        goto LABEL_44;
      case 6u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 152;
        goto LABEL_82;
      case 7u:
        v31 = objc_alloc_init(BMPBSocialHighlightContact);
        objc_storeStrong((id *)(a1 + 160), v31);
        if (!PBReaderPlaceMark() || (BMPBSocialHighlightContactReadFrom((uint64_t)v31, a2) & 1) == 0)
          goto LABEL_112;
        goto LABEL_43;
      case 8u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 96;
        goto LABEL_82;
      case 9u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 56;
        goto LABEL_82;
      case 0xAu:
        v31 = objc_alloc_init(BMPBSocialHighlightFeature);
        objc_msgSend((id)a1, "addCalculatedFeatures:", v31);
        if (PBReaderPlaceMark() && (BMPBSocialHighlightFeatureReadFrom((uint64_t)v31, a2) & 1) != 0)
        {
LABEL_43:
          PBReaderRecallMark();
LABEL_44:

LABEL_110:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_112:

        return 0;
      case 0xBu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 72;
        goto LABEL_82;
      case 0xCu:
        *(_BYTE *)(a1 + 180) |= 1u;
        v32 = *v3;
        v33 = *(_QWORD *)(a2 + v32);
        if (v33 <= 0xFFFFFFFFFFFFFFF7 && v33 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v30 = 0;
        }
        v62 = 8;
        goto LABEL_109;
      case 0xDu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 104;
        goto LABEL_82;
      case 0xEu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 88;
        goto LABEL_82;
      case 0xFu:
        v34 = 0;
        v35 = 0;
        v36 = 0;
        *(_BYTE *)(a1 + 180) |= 0x80u;
        while (2)
        {
          v37 = *v3;
          v38 = *(_QWORD *)(a2 + v37);
          v39 = v38 + 1;
          if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v39;
            v36 |= (unint64_t)(v40 & 0x7F) << v34;
            if (v40 < 0)
            {
              v34 += 7;
              v15 = v35++ >= 9;
              if (v15)
              {
                v36 = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v36 = 0;
LABEL_90:
        v60 = v36 != 0;
        v61 = 177;
        goto LABEL_100;
      case 0x10u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 48;
        goto LABEL_82;
      case 0x11u:
        v41 = 0;
        v42 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 180) |= 0x20u;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          v45 = v44 + 1;
          if (v44 == -1 || v45 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v45;
            v23 |= (unint64_t)(v46 & 0x7F) << v41;
            if (v46 < 0)
            {
              v41 += 7;
              v15 = v42++ >= 9;
              if (v15)
              {
                LODWORD(v23) = 0;
                goto LABEL_94;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_94:
        v59 = 136;
LABEL_95:
        *(_DWORD *)(a1 + v59) = v23;
        goto LABEL_110;
      case 0x12u:
        *(_BYTE *)(a1 + 180) |= 4u;
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 <= 0xFFFFFFFFFFFFFFF7 && v48 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v48);
          *(_QWORD *)(a2 + v47) = v48 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v30 = 0;
        }
        v62 = 24;
        goto LABEL_109;
      case 0x13u:
        v49 = 0;
        v50 = 0;
        v51 = 0;
        *(_BYTE *)(a1 + 180) |= 0x40u;
        while (2)
        {
          v52 = *v3;
          v53 = *(_QWORD *)(a2 + v52);
          v54 = v53 + 1;
          if (v53 == -1 || v54 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
            *(_QWORD *)(a2 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              v15 = v50++ >= 9;
              if (v15)
              {
                v51 = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v51 = 0;
LABEL_99:
        v60 = v51 != 0;
        v61 = 176;
LABEL_100:
        *(_BYTE *)(a1 + v61) = v60;
        goto LABEL_110;
      case 0x14u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 128;
        goto LABEL_82;
      case 0x15u:
        *(_BYTE *)(a1 + 180) |= 2u;
        v56 = *v3;
        v57 = *(_QWORD *)(a2 + v56);
        if (v57 <= 0xFFFFFFFFFFFFFFF7 && v57 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v57);
          *(_QWORD *)(a2 + v56) = v57 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v30 = 0;
        }
        v62 = 16;
LABEL_109:
        *(_QWORD *)(a1 + v62) = v30;
        goto LABEL_110;
      case 0x16u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 144;
        goto LABEL_82;
      case 0x17u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 80;
LABEL_82:
        v58 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_110;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_110;
    }
  }
}

uint64_t BMPBGroupActivitySessionEventReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v15)
          v16 = 1;
        else
          v16 = (v10 & 7) == 4;
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              a1[68] |= 1u;
              break;
            case 2u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 56;
              goto LABEL_33;
            case 3u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 16;
              goto LABEL_33;
            case 4u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 8;
              goto LABEL_33;
            case 5u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 40;
              goto LABEL_33;
            case 6u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 24;
LABEL_33:
              v26 = *(void **)&a1[v25];
              *(_QWORD *)&a1[v25] = v24;

              goto LABEL_43;
            case 7u:
              PBReaderReadString();
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              if (v27)
                objc_msgSend(a1, "addParticipantHandles:", v27);
              goto LABEL_38;
            case 8u:
              PBReaderReadString();
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              if (v27)
                objc_msgSend(a1, "addMemberHandles:", v27);
LABEL_38:

              goto LABEL_43;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_43:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_40;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_42;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_40:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_42:
          a1[64] = v19 != 0;
          goto LABEL_43;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18D85D2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D85D2F0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int128 buf,int a22,__int16 a23,__int16 a24,id a25)
{
  uint64_t v25;
  id v26;
  NSObject *v27;
  void *v28;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(a1);
      JUMPOUT(0x18D85D254);
    }
    v26 = objc_begin_catch(a1);
    __biome_log_for_category();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
    {
      objc_msgSend(*(id *)(v25 + 8), "identifier");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 138412802;
      *(_QWORD *)((char *)&buf + 4) = v28;
      WORD6(buf) = 2112;
      a24 = 2112;
      a25 = v26;
      _os_log_fault_impl(&dword_18D810000, v27, OS_LOG_TYPE_FAULT, "Encountered exception while pruning '%@' for policy '%@', %@", (uint8_t *)&buf, 0x20u);

    }
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_18D85D3B0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18D85D304);
  }
  _Unwind_Resume(a1);
}

void sub_18D85D3D8()
{
  int v0;

  if (v0)
    JUMPOUT(0x18D85D3E0);
  JUMPOUT(0x18D85D3E4);
}

void sub_18D85D3F4(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18D85D400);
}

uint64_t BMPBSiriDictationEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = 16;
      }
      else
      {
        if ((_DWORD)v18 != 2)
        {
          if ((_DWORD)v18 == 1)
          {
            *(_BYTE *)(a1 + 32) |= 1u;
            v19 = *v3;
            v20 = *(_QWORD *)(a2 + v19);
            if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
            {
              v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
              *(_QWORD *)(a2 + v19) = v20 + 8;
            }
            else
            {
              *(_BYTE *)(a2 + *v5) = 1;
              v21 = 0;
            }
            *(_QWORD *)(a1 + 8) = v21;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = 24;
      }
      v24 = *(void **)(a1 + v23);
      *(_QWORD *)(a1 + v23) = v22;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBRemindersContentEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  void *v42;
  uint64_t v43;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 80;
          goto LABEL_50;
        case 2u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 40;
          goto LABEL_50;
        case 3u:
          *(_BYTE *)(a1 + 92) |= 1u;
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v23 = 0;
          }
          v43 = 8;
          goto LABEL_65;
        case 4u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 72;
          goto LABEL_50;
        case 5u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 48;
          goto LABEL_50;
        case 6u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 92) |= 0x10u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            v29 = v28 + 1;
            if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if (v30 < 0)
              {
                v24 += 7;
                v15 = v25++ >= 9;
                if (v15)
                {
                  v26 = 0;
                  goto LABEL_54;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
LABEL_54:
          *(_BYTE *)(a1 + 88) = v26 != 0;
          continue;
        case 7u:
          *(_BYTE *)(a1 + 92) |= 2u;
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v23 = 0;
          }
          v43 = 16;
          goto LABEL_65;
        case 8u:
          *(_BYTE *)(a1 + 92) |= 4u;
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v23 = 0;
          }
          v43 = 24;
LABEL_65:
          *(_QWORD *)(a1 + v43) = v23;
          continue;
        case 9u:
          v35 = 0;
          v36 = 0;
          v37 = 0;
          *(_BYTE *)(a1 + 92) |= 8u;
          break;
        case 0xAu:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 32;
          goto LABEL_50;
        case 0xBu:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 56;
LABEL_50:
          v42 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v38 = *v3;
        v39 = *(_QWORD *)(a2 + v38);
        v40 = v39 + 1;
        if (v39 == -1 || v40 > *(_QWORD *)(a2 + *v4))
          break;
        v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
        *(_QWORD *)(a2 + v38) = v40;
        v37 |= (unint64_t)(v41 & 0x7F) << v35;
        if ((v41 & 0x80) == 0)
          goto LABEL_56;
        v35 += 7;
        v15 = v36++ >= 9;
        if (v15)
        {
          LODWORD(v37) = 0;
          goto LABEL_58;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_56:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v37) = 0;
LABEL_58:
      *(_DWORD *)(a1 + 64) = -(v37 & 1) ^ ((int)v37 >> 1);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

uint64_t BMPBSiriInferredHelpfulnessEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t result;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v16)
          v17 = 1;
        else
          v17 = (v10 & 7) == 4;
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 48) |= 1u;
              v18 = *v3;
              v19 = *(_QWORD *)(a2 + v18);
              if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
                *(_QWORD *)(a2 + v18) = v19 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v20 = 0;
              }
              v29 = 8;
              goto LABEL_39;
            case 2u:
              *(_BYTE *)(a1 + 48) |= 2u;
              v27 = *v3;
              v28 = *(_QWORD *)(a2 + v27);
              if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v28);
                *(_QWORD *)(a2 + v27) = v28 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v20 = 0;
              }
              v29 = 16;
              goto LABEL_39;
            case 3u:
              *(_BYTE *)(a1 + 48) |= 4u;
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
                *(_QWORD *)(a2 + v21) = v22 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v20 = 0;
              }
              v29 = 24;
LABEL_39:
              *(_QWORD *)(a1 + v29) = v20;
              goto LABEL_40;
            case 4u:
              PBReaderReadString();
              v23 = objc_claimAutoreleasedReturnValue();
              v24 = 40;
              goto LABEL_27;
            case 5u:
              PBReaderReadString();
              v23 = objc_claimAutoreleasedReturnValue();
              v24 = 32;
LABEL_27:
              v25 = *(void **)(a1 + v24);
              *(_QWORD *)(a1 + v24) = v23;

              goto LABEL_40;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_40:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBTextInputSessionEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  void *v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 44) |= 1u;
          v18 = *v3;
          v19 = *(_QWORD *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
            *(_QWORD *)(a2 + v18) = v19 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v34 = 8;
          goto LABEL_45;
        case 2u:
          *(_BYTE *)(a1 + 44) |= 2u;
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v34 = 16;
LABEL_45:
          *(_QWORD *)(a1 + v34) = v20;
          continue;
        case 3u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 24;
          goto LABEL_36;
        case 4u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 44) |= 4u;
          break;
        case 5u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 32;
LABEL_36:
          v33 = *(void **)(a1 + v25);
          *(_QWORD *)(a1 + v25) = v24;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        v31 = v30 + 1;
        if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v4))
          break;
        v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
        *(_QWORD *)(a2 + v29) = v31;
        v28 |= (unint64_t)(v32 & 0x7F) << v26;
        if ((v32 & 0x80) == 0)
          goto LABEL_38;
        v26 += 7;
        v15 = v27++ >= 9;
        if (v15)
        {
          LODWORD(v28) = 0;
          goto LABEL_40;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v28) = 0;
LABEL_40:
      *(_DWORD *)(a1 + 40) = v28;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBInferredModeEventReadFrom(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  unint64_t v7;
  unint64_t v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  void *v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = 0x1EE072000uLL;
    v8 = 0x1EE072000uLL;
    v9 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = *v3;
        v14 = *(_QWORD *)(a2 + v13);
        v15 = v14 + 1;
        if (v14 == -1 || v15 > *(_QWORD *)(a2 + *v4))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v14);
        *(_QWORD *)(a2 + v13) = v15;
        v12 |= (unint64_t)(v16 & 0x7F) << v10;
        if ((v16 & 0x80) == 0)
          goto LABEL_12;
        v10 += 7;
        v17 = v11++ >= 9;
        if (v17)
        {
          v12 = 0;
          v18 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v18 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v12 = 0;
LABEL_14:
      if (v18 || (v12 & 7) == 4)
        break;
      switch((v12 >> 3))
      {
        case 1u:
          *((_BYTE *)a1 + *(int *)(v7 + 3348)) |= 1u;
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v9) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v22 = 0;
          }
          v76 = *(int *)(v8 + 3352);
          goto LABEL_108;
        case 2u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 4;
          goto LABEL_77;
        case 3u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *((_BYTE *)a1 + *(int *)(v7 + 3348)) |= 0x10u;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v30);
              *(_QWORD *)(a2 + v29) = v31;
              v28 |= (unint64_t)(v32 & 0x7F) << v26;
              if (v32 < 0)
              {
                v26 += 7;
                v17 = v27++ >= 9;
                if (v17)
                {
                  LODWORD(v28) = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v28) = 0;
LABEL_81:
          v73 = 44;
          goto LABEL_98;
        case 4u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 7;
          goto LABEL_77;
        case 5u:
          v33 = 0;
          v34 = 0;
          v35 = 0;
          *((_BYTE *)a1 + *(int *)(v7 + 3348)) |= 0x20u;
          while (2)
          {
            v36 = *v3;
            v37 = *(_QWORD *)(a2 + v36);
            v38 = v37 + 1;
            if (v37 == -1 || v38 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v37);
              *(_QWORD *)(a2 + v36) = v38;
              v35 |= (unint64_t)(v39 & 0x7F) << v33;
              if (v39 < 0)
              {
                v33 += 7;
                v17 = v34++ >= 9;
                if (v17)
                {
                  v35 = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v35 = 0;
LABEL_85:
          v74 = v35 != 0;
          v75 = 88;
          goto LABEL_103;
        case 6u:
          v40 = 0;
          v41 = 0;
          v42 = 0;
          *((_BYTE *)a1 + *(int *)(v7 + 3348)) |= 0x40u;
          while (2)
          {
            v43 = *v3;
            v44 = *(_QWORD *)(a2 + v43);
            v45 = v44 + 1;
            if (v44 == -1 || v45 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v44);
              *(_QWORD *)(a2 + v43) = v45;
              v42 |= (unint64_t)(v46 & 0x7F) << v40;
              if (v46 < 0)
              {
                v40 += 7;
                v17 = v41++ >= 9;
                if (v17)
                {
                  v42 = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v42 = 0;
LABEL_89:
          v74 = v42 != 0;
          v75 = 89;
          goto LABEL_103;
        case 7u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 10;
          goto LABEL_77;
        case 8u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 6;
          goto LABEL_77;
        case 9u:
          v47 = 0;
          v48 = 0;
          v49 = 0;
          *((_BYTE *)a1 + *(int *)(v7 + 3348)) |= 4u;
          while (2)
          {
            v50 = *v3;
            v51 = *(_QWORD *)(a2 + v50);
            v52 = v51 + 1;
            if (v51 == -1 || v52 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v51);
              *(_QWORD *)(a2 + v50) = v52;
              v49 |= (unint64_t)(v53 & 0x7F) << v47;
              if (v53 < 0)
              {
                v47 += 7;
                v17 = v48++ >= 9;
                if (v17)
                {
                  v49 = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v49 = 0;
LABEL_93:
          a1[3] = v49;
          continue;
        case 0xAu:
          *((_BYTE *)a1 + *(int *)(v7 + 3348)) |= 2u;
          v54 = *v3;
          v55 = *(_QWORD *)(a2 + v54);
          if (v55 <= 0xFFFFFFFFFFFFFFF7 && v55 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v9) + v55);
            *(_QWORD *)(a2 + v54) = v55 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v22 = 0;
          }
          v76 = 16;
LABEL_108:
          *(_QWORD *)((char *)a1 + v76) = v22;
          continue;
        case 0xBu:
          v56 = v7;
          v57 = v8;
          PBReaderReadData();
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          if (v58)
            objc_msgSend(a1, "addSerializedTriggers:", v58);

          v8 = v57;
          v7 = v56;
          continue;
        case 0xCu:
          v59 = 0;
          v60 = 0;
          v28 = 0;
          *((_BYTE *)a1 + *(int *)(v7 + 3348)) |= 8u;
          while (2)
          {
            v61 = *v3;
            v62 = *(_QWORD *)(a2 + v61);
            v63 = v62 + 1;
            if (v62 == -1 || v63 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v62);
              *(_QWORD *)(a2 + v61) = v63;
              v28 |= (unint64_t)(v64 & 0x7F) << v59;
              if (v64 < 0)
              {
                v59 += 7;
                v17 = v60++ >= 9;
                if (v17)
                {
                  LODWORD(v28) = 0;
                  goto LABEL_97;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v28) = 0;
LABEL_97:
          v73 = 40;
LABEL_98:
          *(_DWORD *)((char *)a1 + v73) = v28;
          continue;
        case 0xDu:
          v65 = 0;
          v66 = 0;
          v67 = 0;
          *((_BYTE *)a1 + *(int *)(v7 + 3348)) |= 0x80u;
          break;
        case 0xEu:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 9;
LABEL_77:
          v72 = (void *)a1[v25];
          a1[v25] = v24;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v68 = *v3;
        v69 = *(_QWORD *)(a2 + v68);
        v70 = v69 + 1;
        if (v69 == -1 || v70 > *(_QWORD *)(a2 + *v4))
          break;
        v71 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v69);
        *(_QWORD *)(a2 + v68) = v70;
        v67 |= (unint64_t)(v71 & 0x7F) << v65;
        if ((v71 & 0x80) == 0)
          goto LABEL_100;
        v65 += 7;
        v17 = v66++ >= 9;
        if (v17)
        {
          v67 = 0;
          goto LABEL_102;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_100:
      if (*(_BYTE *)(a2 + *v5))
        v67 = 0;
LABEL_102:
      v74 = v67 != 0;
      v75 = 90;
LABEL_103:
      *((_BYTE *)a1 + v75) = v74;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL BMPBPersonEntityReadFrom(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  BMPBPersonName *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(BMPBPersonName);
        objc_msgSend(a1, "addNames:", v17);
        if (PBReaderPlaceMark() && BMPBPersonNameReadFrom((uint64_t)v17, a2))
          goto LABEL_38;
        goto LABEL_43;
      case 2u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 32;
        goto LABEL_26;
      case 3u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
LABEL_26:
        v17 = *(BMPBPersonName **)&a1[v19];
        *(_QWORD *)&a1[v19] = v18;
        goto LABEL_39;
      case 4u:
        PBReaderReadString();
        v17 = (BMPBPersonName *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addEmailAddresses:", v17);
        goto LABEL_39;
      case 5u:
        PBReaderReadString();
        v17 = (BMPBPersonName *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addAddresses:", v17);
        goto LABEL_39;
      case 6u:
        PBReaderReadString();
        v17 = (BMPBPersonName *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addPhoneNumbers:", v17);
        goto LABEL_39;
      case 7u:
        v17 = objc_alloc_init(BMPBSocialMediaHandle);
        objc_msgSend(a1, "addSocialMediaHandles:", v17);
        if (!PBReaderPlaceMark() || !BMPBSocialMediaHandleReadFrom((uint64_t)v17, a2))
          goto LABEL_43;
        goto LABEL_38;
      case 8u:
        v17 = objc_alloc_init(BMPBAttributeEntry);
        objc_msgSend(a1, "addAttributes:", v17);
        if (PBReaderPlaceMark() && BMPBAttributeEntryReadFrom((uint64_t)v17, a2))
        {
LABEL_38:
          PBReaderRecallMark();
LABEL_39:

LABEL_40:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_43:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_40;
    }
  }
}

uint64_t BMPBDKEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBNewsArticleViewEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  void *v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v16)
          v17 = 1;
        else
          v17 = (v10 & 7) == 4;
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 72;
              goto LABEL_32;
            case 2u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 32;
              goto LABEL_32;
            case 3u:
              *(_BYTE *)(a1 + 80) |= 1u;
              v20 = *v3;
              v21 = *(_QWORD *)(a2 + v20);
              if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v21);
                *(_QWORD *)(a2 + v20) = v21 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v22 = 0;
              }
              *(_QWORD *)(a1 + 8) = v22;
              goto LABEL_33;
            case 4u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 64;
              goto LABEL_32;
            case 5u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 16;
              goto LABEL_32;
            case 6u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 56;
              goto LABEL_32;
            case 7u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 48;
              goto LABEL_32;
            case 8u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 24;
              goto LABEL_32;
            case 9u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 40;
LABEL_32:
              v24 = *(void **)(a1 + v19);
              *(_QWORD *)(a1 + v19) = v18;

              goto LABEL_33;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_33:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18D86FC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_18D8708D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void biome_each_vtab_destroy(void **a1)
{
  void *v2;

  v2 = *a1;
  *a1 = 0;

  sqlite3_free(a1);
}

id BMFieldPathFromKeyPath(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  char v23;
  id v24;
  id v25;
  id v27;
  id obj;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v31 = a3;
  objc_msgSend(a1, "componentsSeparatedByString:", CFSTR("."));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v6, "count"));
  v8 = v5;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v9 = v6;
  v10 = (uint64_t)v8;
  v29 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
  if (v29)
  {
    v30 = *(_QWORD *)v38;
    v10 = (uint64_t)v8;
    v27 = v8;
    obj = v9;
    while (2)
    {
      v11 = 0;
      v12 = (void *)v10;
      do
      {
        if (*(_QWORD *)v38 != v30)
          objc_enumerationMutation(obj);
        if (!v12)
          goto LABEL_26;
        v13 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * v11);
        objc_msgSend(v31, "objectForKeyedSubscript:", v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v14)
          goto LABEL_26;
        v32 = v12;
        v15 = v7;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v16 = v14;
        v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
        if (!v17)
        {
LABEL_24:

LABEL_25:
          v7 = v15;
          v12 = v32;
LABEL_26:
          v9 = obj;

          v25 = 0;
          v8 = v27;
          goto LABEL_27;
        }
        v18 = v17;
        v19 = *(_QWORD *)v34;
LABEL_10:
        v20 = 0;
        while (1)
        {
          if (*(_QWORD *)v34 != v19)
            objc_enumerationMutation(v16);
          v21 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v20);
          objc_msgSend(v21, "name", v27);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend(v22, "isEqualToString:", v13);

          if ((v23 & 1) != 0)
            break;
          if (v18 == ++v20)
          {
            v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
            if (v18)
              goto LABEL_10;
            goto LABEL_24;
          }
        }
        v24 = v21;

        if (!v24)
          goto LABEL_25;
        v7 = v15;
        objc_msgSend(v15, "addObject:", v24);
        if (objc_msgSend(v24, "subMessageClass"))
        {
          NSStringFromClass((Class)objc_msgSend(v24, "subMessageClass"));
          v10 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v10 = 0;
        }

        ++v11;
        v12 = (void *)v10;
      }
      while (v11 != v29);
      v9 = obj;
      v8 = v27;
      v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
      if (v29)
        continue;
      break;
    }
  }

  v25 = v7;
  v12 = (void *)v10;
LABEL_27:

  return v25;
}

uint64_t biome_each_connect(sqlite3 *a1, id *a2, uint64_t a3, uint64_t a4, id **a5)
{
  uint64_t result;
  id *v8;

  result = sqlite3_declare_vtab(a1, "CREATE TABLE biome_each(value ANY, eventBodyData HIDDEN, eventClass TEXT HIDDEN, keyPath TEXT HIDDEN)");
  if (!(_DWORD)result)
  {
    v8 = (id *)bm_sqlite3_malloc(32);
    *a5 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 3, *a2);
      return 0;
    }
    else
    {
      return 7;
    }
  }
  return result;
}

uint64_t biome_each_bestindex(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  int v6;

  v2 = *a2;
  if ((int)v2 < 1)
    return 0;
  v3 = 0;
  v4 = (_BYTE *)(*((_QWORD *)a2 + 1) + 5);
  v5 = 8 * v2;
  while (*v4)
  {
    if (*(v4 - 1) != 2)
      biome_each_bestindex_cold_1();
    v6 = *(_DWORD *)(v4 - 5);
    if ((v6 - 1) <= 2)
      *(_DWORD *)(*((_QWORD *)a2 + 4) + v3) = v6;
    v3 += 8;
    v4 += 12;
    if (v5 == v3)
      return 0;
  }
  return 19;
}

uint64_t biome_each_disconnect(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[3];
  a1[3] = 0;

  sqlite3_free(a1);
  return 0;
}

uint64_t biome_each_open(uint64_t a1, id **a2)
{
  id *v4;
  id *v5;
  uint64_t result;

  v4 = (id *)bm_sqlite3_malloc(64);
  if (!v4)
    return 7;
  v5 = v4;
  objc_storeStrong(v4 + 5, *(id *)(a1 + 24));
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t biome_each_close(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)a1[2];
  a1[2] = 0;

  v3 = (void *)a1[3];
  a1[3] = 0;

  v4 = (void *)a1[4];
  a1[4] = 0;

  v5 = (void *)a1[5];
  a1[5] = 0;

  v6 = (void *)a1[6];
  a1[6] = 0;

  v7 = (void *)a1[7];
  a1[7] = 0;

  sqlite3_free(a1);
  return 0;
}

uint64_t biome_each_filter(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, sqlite3_value **a5)
{
  void *v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  id v44[2];

  v44[1] = *(id *)MEMORY[0x1E0C80C00];
  if (a4 != 3)
    biome_each_filter_cold_1();
  a1[1] = 0;
  v7 = (void *)MEMORY[0x193FECFB4]();
  v8 = (void *)MEMORY[0x1E0C99D50];
  v9 = sqlite3_value_blob(*a5);
  objc_msgSend(v8, "dataWithBytes:length:", v9, sqlite3_value_bytes(*a5));
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)a1[2];
  a1[2] = v10;

  if (sqlite3_value_type(a5[1]) == 5)
  {
    v12 = sqlite3_mprintf("Error calling biome_each(): eventClassName is null");
LABEL_6:
    *(_QWORD *)(*a1 + 16) = v12;
    v15 = 1;
    goto LABEL_21;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", sqlite3_value_text(a5[1]));
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)a1[3];
  a1[3] = v13;

  if (sqlite3_value_type(a5[2]) == 5)
  {
    v12 = sqlite3_mprintf("Error calling biome_each(): key path is null");
    goto LABEL_6;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", sqlite3_value_text(a5[2]));
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = (void *)a1[4];
  a1[4] = v16;

  v18 = (void *)a1[2];
  v19 = (void *)a1[3];
  v20 = (void *)a1[4];
  v21 = (void *)a1[5];
  v42 = 0;
  v22 = v18;
  v23 = v19;
  v24 = v20;
  BMFieldPathFromKeyPath(v24, v23, v21);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v41 = v22;
  if (v25)
  {
    v40 = v23;
    v26 = v22;
    if (objc_msgSend(v25, "count") == 1)
    {
LABEL_12:
      objc_msgSend(v25, "objectAtIndexedSubscript:", objc_msgSend(v25, "count") - 1);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      +[BMPoirotSchematizerShim searchValuesIn:withFieldNumber:typeRawValue:error:](_TtC12BiomeStreams23BMPoirotSchematizerShim, "searchValuesIn:withFieldNumber:typeRawValue:error:", v26, objc_msgSend(v29, "number"), objc_msgSend(v29, "type"), &v42);
      v33 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v27 = 0;
      while (1)
      {
        v28 = v26;
        objc_msgSend(v25, "objectAtIndexedSubscript:", v27);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = objc_msgSend(v29, "number");
        v31 = objc_msgSend(v29, "type");
        v44[0] = 0;
        +[BMPoirotSchematizerShim searchValueIn:withFieldNumber:typeRawValue:error:](_TtC12BiomeStreams23BMPoirotSchematizerShim, "searchValueIn:withFieldNumber:typeRawValue:error:", v26, v30, v31, v44);
        v26 = (id)objc_claimAutoreleasedReturnValue();
        v32 = v44[0];

        if (v32)
          break;

        if (objc_msgSend(v25, "count") - 1 <= (unint64_t)++v27)
          goto LABEL_12;
      }
      v42 = objc_retainAutorelease(v32);

      v33 = 0;
    }
    v35 = v40;
  }
  else
  {
    v34 = (void *)MEMORY[0x1E0CB35C8];
    v43 = *MEMORY[0x1E0CB2D50];
    v35 = v23;
    v26 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Field path is not valid: %@; eventClass: %@"),
                v24,
                v23);
    v44[0] = v26;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v44, &v43, 1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "errorWithDomain:code:userInfo:", CFSTR("BMSQLDatabaseErrorDomain"), 0, v29);
    v33 = 0;
    v42 = (id)objc_claimAutoreleasedReturnValue();
  }

  v36 = v42;
  v37 = (void *)a1[6];
  a1[6] = v33;

  if (!a1[6] || v36)
  {
    objc_msgSend(v36, "localizedDescription");
    v38 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *(_QWORD *)(*a1 + 16) = sqlite3_mprintf("Error calling biome_each(): %s", (const char *)objc_msgSend(v38, "UTF8String"));

    v15 = 1;
  }
  else
  {
    v15 = biome_each_next((uint64_t)a1);
  }

LABEL_21:
  objc_autoreleasePoolPop(v7);
  return v15;
}

uint64_t biome_each_next(uint64_t a1)
{
  void *v2;
  void *v3;
  char isKindOfClass;
  id v5;

  v2 = (void *)MEMORY[0x193FECFB4]();
  objc_msgSend(*(id *)(a1 + 48), "nextObject");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(v3, "localizedDescription");
    v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *(_QWORD *)(*(_QWORD *)a1 + 16) = sqlite3_mprintf("Error enumerating biome_each() result: %s", (const char *)objc_msgSend(v5, "UTF8String"));

  }
  else
  {
    objc_storeStrong((id *)(a1 + 56), v3);
    ++*(_QWORD *)(a1 + 8);
  }

  objc_autoreleasePoolPop(v2);
  return isKindOfClass & 1;
}

BOOL biome_each_eof(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) == 0;
}

uint64_t biome_each_column(uint64_t a1, sqlite3_context *a2, int a3)
{
  void *v3;

  switch(a3)
  {
    case 0:
      BMSqliteResultFromObjcValue(a2, *(void **)(a1 + 56));
      return 0;
    case 1:
      sqlite3_result_blob(a2, (const void *)objc_msgSend(*(id *)(a1 + 16), "bytes"), objc_msgSend(*(id *)(a1 + 16), "length"), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
      return 0;
    case 2:
      v3 = *(void **)(a1 + 24);
      goto LABEL_6;
    case 3:
      v3 = *(void **)(a1 + 32);
LABEL_6:
      sqlite3_result_text(a2, (const char *)objc_msgSend(v3, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
      return 0;
    default:
      biome_each_column_cold_1();
  }
}

uint64_t biome_each_rowid(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(a1 + 8);
  return 0;
}

BOOL BMPBMailContentHeaderEntryReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBParsecSearchEntityReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  void *v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  BMPBParsecSearchTopic *v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v18;

        goto LABEL_41;
      case 2u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              v15 = v22++ >= 9;
              if (v15)
              {
                LODWORD(v23) = 0;
                goto LABEL_38;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_38:
        *(_DWORD *)(a1 + 8) = v23;
        goto LABEL_41;
      case 3u:
        *(_BYTE *)(a1 + 40) |= 2u;
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFFBLL && v29 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v30 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v30 = 0;
        }
        *(_DWORD *)(a1 + 24) = v30;
        goto LABEL_41;
      case 4u:
        v31 = objc_alloc_init(BMPBParsecSearchTopic);
        objc_msgSend((id)a1, "addTopics:", v31);
        if (PBReaderPlaceMark() && (BMPBParsecSearchTopicReadFrom((uint64_t)v31, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_41:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_41;
    }
  }
}

uint64_t BMPBEntityReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  BMPBTopicEntity *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 2)
      {
        objc_msgSend((id)a1, "clearOneofValuesForEntityType");
        *(_BYTE *)(a1 + 32) |= 1u;
        *(_DWORD *)(a1 + 8) = 2;
        v24 = objc_alloc_init(BMPBTopicEntity);
        objc_storeStrong((id *)(a1 + 24), v24);
        if (!PBReaderPlaceMark() || !BMPBTopicEntityReadFrom((char *)v24, a2))
        {
LABEL_39:

          return 0;
        }
      }
      else
      {
        if ((_DWORD)v17 != 1)
        {
          if ((_DWORD)v17)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          else
          {
            v18 = 0;
            while (1)
            {
              v19 = *v3;
              v20 = *(_QWORD *)(a2 + v19);
              if (v20 == -1 || v20 >= *(_QWORD *)(a2 + *v4))
                break;
              v21 = v20 + 1;
              v22 = *(char *)(*(_QWORD *)(a2 + *v7) + v20);
              *(_QWORD *)(a2 + v19) = v21;
              if (v22 < 0 && v18++ <= 8)
                continue;
              goto LABEL_37;
            }
            *(_BYTE *)(a2 + *v5) = 1;
          }
          continue;
        }
        objc_msgSend((id)a1, "clearOneofValuesForEntityType");
        *(_BYTE *)(a1 + 32) |= 1u;
        *(_DWORD *)(a1 + 8) = 1;
        v24 = objc_alloc_init(BMPBPersonEntity);
        objc_storeStrong((id *)(a1 + 16), v24);
        if (!PBReaderPlaceMark() || !BMPBPersonEntityReadFrom((char *)v24, a2))
          goto LABEL_39;
      }
      PBReaderRecallMark();

LABEL_37:
      ;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id get_DKSystemEventStreamsClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DKSystemEventStreamsClass_softClass;
  v7 = get_DKSystemEventStreamsClass_softClass;
  if (!get_DKSystemEventStreamsClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DKSystemEventStreamsClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_DKSystemEventStreamsClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D879D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_CDContextQueriesClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_CDContextQueriesClass_softClass;
  v7 = get_CDContextQueriesClass_softClass;
  if (!get_CDContextQueriesClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_CDContextQueriesClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_CDContextQueriesClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D879DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D87A5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

id get_DKEventClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DKEventClass_softClass;
  v7 = get_DKEventClass_softClass;
  if (!get_DKEventClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DKEventClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_DKEventClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D87A690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_DKDigitalHealthMetadataKeyClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DKDigitalHealthMetadataKeyClass_softClass;
  v7 = get_DKDigitalHealthMetadataKeyClass_softClass;
  if (!get_DKDigitalHealthMetadataKeyClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DKDigitalHealthMetadataKeyClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_DKDigitalHealthMetadataKeyClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D87A748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL BMPBMailContentEventFilteringSubsetReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 28)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
        goto LABEL_24;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
LABEL_24:
        v20 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = 16;
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBMessagesContentEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BMPBNamedHandle *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  void *v102;
  BOOL v103;
  uint64_t v104;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 192;
        goto LABEL_130;
      case 2u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 104;
        goto LABEL_130;
      case 3u:
        *(_WORD *)(a1 + 220) |= 1u;
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v23 = 0;
        }
        *(_QWORD *)(a1 + 8) = v23;
        goto LABEL_176;
      case 4u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 88;
        goto LABEL_130;
      case 5u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 64;
        goto LABEL_130;
      case 6u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 160;
        goto LABEL_130;
      case 7u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 168;
        goto LABEL_130;
      case 8u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 152;
        goto LABEL_130;
      case 9u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 56;
        goto LABEL_130;
      case 0xAu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 72;
        goto LABEL_130;
      case 0xBu:
        v24 = objc_alloc_init(BMPBNamedHandle);
        objc_storeStrong((id *)(a1 + 112), v24);
        goto LABEL_35;
      case 0xCu:
        v24 = objc_alloc_init(BMPBNamedHandle);
        objc_msgSend((id)a1, "addToHandles:", v24);
LABEL_35:
        if (!PBReaderPlaceMark() || !BMPBNamedHandleReadFrom((uint64_t)v24, a2))
          goto LABEL_181;
        goto LABEL_44;
      case 0xDu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 32;
        goto LABEL_130;
      case 0xEu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 40;
        goto LABEL_130;
      case 0xFu:
        PBReaderReadString();
        v24 = (BMPBNamedHandle *)objc_claimAutoreleasedReturnValue();
        if (v24)
          objc_msgSend((id)a1, "addAccountHandles:", v24);
        goto LABEL_45;
      case 0x10u:
        v24 = objc_alloc_init(BMPBContentAttachment);
        objc_storeStrong((id *)(a1 + 48), v24);
        if (PBReaderPlaceMark() && BMPBContentAttachmentReadFrom((uint64_t)v24, a2))
        {
LABEL_44:
          PBReaderRecallMark();
LABEL_45:

LABEL_176:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_181:

        return 0;
      case 0x11u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 200;
        goto LABEL_130;
      case 0x12u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 80;
        goto LABEL_130;
      case 0x13u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 144;
        goto LABEL_130;
      case 0x14u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_WORD *)(a1 + 220) |= 0x100u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          v30 = v29 + 1;
          if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if (v31 < 0)
            {
              v25 += 7;
              v15 = v26++ >= 9;
              if (v15)
              {
                v27 = 0;
                goto LABEL_134;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_134:
        v103 = v27 != 0;
        v104 = 213;
        goto LABEL_175;
      case 0x15u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        *(_WORD *)(a1 + 220) |= 0x800u;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          v37 = v36 + 1;
          if (v36 == -1 || v37 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v37;
            v34 |= (unint64_t)(v38 & 0x7F) << v32;
            if (v38 < 0)
            {
              v32 += 7;
              v15 = v33++ >= 9;
              if (v15)
              {
                v34 = 0;
                goto LABEL_138;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v34 = 0;
LABEL_138:
        v103 = v34 != 0;
        v104 = 216;
        goto LABEL_175;
      case 0x16u:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        *(_WORD *)(a1 + 220) |= 0x10u;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          v44 = v43 + 1;
          if (v43 == -1 || v44 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v44;
            v41 |= (unint64_t)(v45 & 0x7F) << v39;
            if (v45 < 0)
            {
              v39 += 7;
              v15 = v40++ >= 9;
              if (v15)
              {
                v41 = 0;
                goto LABEL_142;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v41 = 0;
LABEL_142:
        v103 = v41 != 0;
        v104 = 209;
        goto LABEL_175;
      case 0x17u:
        v46 = 0;
        v47 = 0;
        v48 = 0;
        *(_WORD *)(a1 + 220) |= 0x20u;
        while (2)
        {
          v49 = *v3;
          v50 = *(_QWORD *)(a2 + v49);
          v51 = v50 + 1;
          if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
            *(_QWORD *)(a2 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              v15 = v47++ >= 9;
              if (v15)
              {
                v48 = 0;
                goto LABEL_146;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v48 = 0;
LABEL_146:
        v103 = v48 != 0;
        v104 = 210;
        goto LABEL_175;
      case 0x18u:
        v53 = 0;
        v54 = 0;
        v55 = 0;
        *(_WORD *)(a1 + 220) |= 0x40u;
        while (2)
        {
          v56 = *v3;
          v57 = *(_QWORD *)(a2 + v56);
          v58 = v57 + 1;
          if (v57 == -1 || v58 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
            *(_QWORD *)(a2 + v56) = v58;
            v55 |= (unint64_t)(v59 & 0x7F) << v53;
            if (v59 < 0)
            {
              v53 += 7;
              v15 = v54++ >= 9;
              if (v15)
              {
                v55 = 0;
                goto LABEL_150;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v55 = 0;
LABEL_150:
        v103 = v55 != 0;
        v104 = 211;
        goto LABEL_175;
      case 0x19u:
        v60 = 0;
        v61 = 0;
        v62 = 0;
        *(_WORD *)(a1 + 220) |= 0x400u;
        while (2)
        {
          v63 = *v3;
          v64 = *(_QWORD *)(a2 + v63);
          v65 = v64 + 1;
          if (v64 == -1 || v65 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v66 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v64);
            *(_QWORD *)(a2 + v63) = v65;
            v62 |= (unint64_t)(v66 & 0x7F) << v60;
            if (v66 < 0)
            {
              v60 += 7;
              v15 = v61++ >= 9;
              if (v15)
              {
                v62 = 0;
                goto LABEL_154;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v62 = 0;
LABEL_154:
        v103 = v62 != 0;
        v104 = 215;
        goto LABEL_175;
      case 0x1Au:
        v67 = 0;
        v68 = 0;
        v69 = 0;
        *(_WORD *)(a1 + 220) |= 0x200u;
        while (2)
        {
          v70 = *v3;
          v71 = *(_QWORD *)(a2 + v70);
          v72 = v71 + 1;
          if (v71 == -1 || v72 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v73 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v71);
            *(_QWORD *)(a2 + v70) = v72;
            v69 |= (unint64_t)(v73 & 0x7F) << v67;
            if (v73 < 0)
            {
              v67 += 7;
              v15 = v68++ >= 9;
              if (v15)
              {
                v69 = 0;
                goto LABEL_158;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v69 = 0;
LABEL_158:
        v103 = v69 != 0;
        v104 = 214;
        goto LABEL_175;
      case 0x1Bu:
        v74 = 0;
        v75 = 0;
        v76 = 0;
        *(_WORD *)(a1 + 220) |= 8u;
        while (2)
        {
          v77 = *v3;
          v78 = *(_QWORD *)(a2 + v77);
          v79 = v78 + 1;
          if (v78 == -1 || v79 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v80 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v78);
            *(_QWORD *)(a2 + v77) = v79;
            v76 |= (unint64_t)(v80 & 0x7F) << v74;
            if (v80 < 0)
            {
              v74 += 7;
              v15 = v75++ >= 9;
              if (v15)
              {
                v76 = 0;
                goto LABEL_162;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v76 = 0;
LABEL_162:
        v103 = v76 != 0;
        v104 = 208;
        goto LABEL_175;
      case 0x1Cu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 176;
        goto LABEL_130;
      case 0x1Du:
        v81 = 0;
        v82 = 0;
        v83 = 0;
        *(_WORD *)(a1 + 220) |= 2u;
        while (2)
        {
          v84 = *v3;
          v85 = *(_QWORD *)(a2 + v84);
          v86 = v85 + 1;
          if (v85 == -1 || v86 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v87 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v85);
            *(_QWORD *)(a2 + v84) = v86;
            v83 |= (unint64_t)(v87 & 0x7F) << v81;
            if (v87 < 0)
            {
              v81 += 7;
              v15 = v82++ >= 9;
              if (v15)
              {
                v83 = 0;
                goto LABEL_166;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v83 = 0;
LABEL_166:
        *(_QWORD *)(a1 + 16) = v83;
        goto LABEL_176;
      case 0x1Eu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 128;
        goto LABEL_130;
      case 0x1Fu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 136;
        goto LABEL_130;
      case 0x20u:
        v88 = 0;
        v89 = 0;
        v90 = 0;
        *(_WORD *)(a1 + 220) |= 4u;
        while (2)
        {
          v91 = *v3;
          v92 = *(_QWORD *)(a2 + v91);
          v93 = v92 + 1;
          if (v92 == -1 || v93 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v94 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v92);
            *(_QWORD *)(a2 + v91) = v93;
            v90 |= (unint64_t)(v94 & 0x7F) << v88;
            if (v94 < 0)
            {
              v88 += 7;
              v15 = v89++ >= 9;
              if (v15)
              {
                LODWORD(v90) = 0;
                goto LABEL_170;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v90) = 0;
LABEL_170:
        *(_DWORD *)(a1 + 120) = v90;
        goto LABEL_176;
      case 0x21u:
        v95 = 0;
        v96 = 0;
        v97 = 0;
        *(_WORD *)(a1 + 220) |= 0x80u;
        while (2)
        {
          v98 = *v3;
          v99 = *(_QWORD *)(a2 + v98);
          v100 = v99 + 1;
          if (v99 == -1 || v100 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v101 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v99);
            *(_QWORD *)(a2 + v98) = v100;
            v97 |= (unint64_t)(v101 & 0x7F) << v95;
            if (v101 < 0)
            {
              v95 += 7;
              v15 = v96++ >= 9;
              if (v15)
              {
                v97 = 0;
                goto LABEL_174;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v97 = 0;
LABEL_174:
        v103 = v97 != 0;
        v104 = 212;
LABEL_175:
        *(_BYTE *)(a1 + v104) = v103;
        goto LABEL_176;
      case 0x22u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 96;
LABEL_130:
        v102 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_176;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_176;
    }
  }
}

uint64_t BMUserFocusComputedModeUpdateReasonFromReason(uint64_t result)
{
  NSObject *v1;

  if (result < 4)
    return result;
  __biome_log_for_category();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    BMUserFocusComputedModeUpdateReasonFromReason_cold_1();

  return 0;
}

uint64_t BMUserFocusComputedModeUpdateSourceFromSource(uint64_t result)
{
  NSObject *v1;

  if (result < 4)
    return result;
  __biome_log_for_category();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    BMUserFocusComputedModeUpdateSourceFromSource_cold_1();

  return 0;
}

uint64_t activityTypeWithState(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;

  v1 = result;
  if (result < 6)
    return result;
  __biome_log_for_category();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    activityTypeWithState_cold_1(v1);

  return 0;
}

BOOL BMValidateStreamSyncTransportType(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFELL) == 2;
}

void sub_18D882D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D8831E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

uint64_t BMPBDoNotDisturbWhileDrivingEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v23 += 7;
          v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_43:
        *(_DWORD *)(a1 + 8) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 2u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_39:
        *(_BYTE *)(a1 + 12) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18D8860D8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void _logQueryResult(sqlite3_stmt *a1)
{
  int v2;
  void *v3;
  int i;
  const char *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = sqlite3_column_count(a1);
  v3 = (void *)objc_opt_new();
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      v5 = sqlite3_column_table_name(a1, i);
      if (v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "addObject:", v6);

      }
    }
  }
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v7 = v3;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v13;
    do
    {
      for (j = 0; j != v9; ++j)
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        AnalyticsSendEventLazy();
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v9);
  }

  AnalyticsSendEventLazy();
}

void sub_18D886410(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id ___logQueryResult_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v7[3];
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v8[0] = *(_QWORD *)(a1 + 32);
  v7[0] = CFSTR("stream");
  v7[1] = CFSTR("num_results");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v8[1] = v3;
  v7[2] = CFSTR("rc");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[2] = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, v7, 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id ___logQueryResult_block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[2];
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  v6[0] = CFSTR("num_results");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v6[1] = CFSTR("rc");
  v7[0] = v2;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[1] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t BMPBSchoolTimeEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v23 += 7;
          v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_43:
        *(_DWORD *)(a1 + 8) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 2u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_39:
        *(_BYTE *)(a1 + 12) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL BMPBSocialMediaHandleReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBScreenSharingEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v23 += 7;
          v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_43:
        *(_DWORD *)(a1 + 8) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 2u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_39:
        *(_BYTE *)(a1 + 12) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBBacklightEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
            break;
          v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
          *(_QWORD *)(a2 + v24) = v26;
          v23 |= (unint64_t)(v27 & 0x7F) << v21;
          if ((v27 & 0x80) == 0)
            goto LABEL_33;
          v21 += 7;
          v15 = v22++ >= 9;
          if (v15)
          {
            v23 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_35:
        *(_QWORD *)(a1 + 16) = v23;
      }
      else if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id BMDSLGetBookmarkForDate(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  void *v22;
  _QWORD v23[6];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = (void *)MEMORY[0x1E0D01BB0];
  v22 = v5;
  objc_msgSend(MEMORY[0x1E0D01BA8], "archivedDataWithDSL:", v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "unarchiveDSLFromData:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "timeIntervalSinceReferenceDate");
  v11 = v10;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  objc_msgSend(v9, "streamPublishers");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v37;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v37 != v14)
          objc_enumerationMutation(v12);
        v16 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * v15);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v11);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "setBookmarkingTime:", v17);

        ++v15;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
    }
    while (v13);
  }

  v30 = 0;
  v31 = &v30;
  v32 = 0x3032000000;
  v33 = __Block_byref_object_copy__2;
  v34 = __Block_byref_object_dispose__2;
  v35 = 0;
  v24 = 0;
  v25 = &v24;
  v26 = 0x3032000000;
  v27 = __Block_byref_object_copy__2;
  v28 = __Block_byref_object_dispose__2;
  v29 = 0;
  objc_msgSend(v9, "bpsPublisher");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = __BMDSLGetBookmarkForDate_block_invoke;
  v23[3] = &unk_1E26481E0;
  v23[4] = &v30;
  v23[5] = &v24;
  v19 = (id)objc_msgSend(v18, "sinkWithBookmark:completion:receiveInput:", 0, v23, &__block_literal_global_7);

  if (a3)
    *a3 = objc_retainAutorelease((id)v25[5]);
  v20 = (id)v31[5];
  _Block_object_dispose(&v24, 8);

  _Block_object_dispose(&v30, 8);
  return v20;
}

void sub_18D890D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

id BMDSLGetPublisherForEvent(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  id v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1E0D01BB0];
    objc_msgSend(MEMORY[0x1E0D01BA8], "archivedDataWithDSL:", a1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "unarchiveDSLFromData:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    objc_msgSend(v6, "streamPublishers", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v17;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v17 != v10)
            objc_enumerationMutation(v7);
          v12 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
          v20 = v3;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v20, 1);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "setBackingEvents:", v13);

        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
      }
      while (v9);
    }

    objc_msgSend(v6, "bpsPublisher");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C9AA60], "bpsPublisher");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v14;
}

void sub_18D8913B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t BMPBSafariPageViewEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  void *v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 56;
          goto LABEL_38;
        case 2u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 32;
          goto LABEL_38;
        case 3u:
          *(_BYTE *)(a1 + 76) |= 1u;
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v23 = 0;
          }
          *(_QWORD *)(a1 + 8) = v23;
          continue;
        case 4u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 48;
          goto LABEL_38;
        case 5u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 16;
          goto LABEL_38;
        case 6u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 76) |= 2u;
          break;
        case 7u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 64;
          goto LABEL_38;
        case 8u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
          goto LABEL_38;
        case 9u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 40;
LABEL_38:
          v31 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v27 = *v3;
        v28 = *(_QWORD *)(a2 + v27);
        v29 = v28 + 1;
        if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v4))
          break;
        v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
        *(_QWORD *)(a2 + v27) = v29;
        v26 |= (unint64_t)(v30 & 0x7F) << v24;
        if ((v30 & 0x80) == 0)
          goto LABEL_42;
        v24 += 7;
        v15 = v25++ >= 9;
        if (v15)
        {
          v26 = 0;
          goto LABEL_44;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
      if (*(_BYTE *)(a2 + *v5))
        v26 = 0;
LABEL_44:
      *(_BYTE *)(a1 + 72) = v26 != 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBUserActivityMetadataEventReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int *v27;
  BMPBUserActivityMetadataTopic *v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  void *v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = &OBJC_IVAR___BMPBMessagesContentEvent__recipients;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  v9 = &OBJC_IVAR___BMPBMessagesContentEvent__recipients;
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = *v3;
      v14 = *(_QWORD *)(a2 + v13);
      v15 = v14 + 1;
      if (v14 == -1 || v15 > *(_QWORD *)(a2 + *v4))
        break;
      v16 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v14);
      *(_QWORD *)(a2 + v13) = v15;
      v12 |= (unint64_t)(v16 & 0x7F) << v10;
      if ((v16 & 0x80) == 0)
        goto LABEL_12;
      v10 += 7;
      v17 = v11++ >= 9;
      if (v17)
      {
        v12 = 0;
        v18 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v18 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v12 = 0;
LABEL_14:
    if (v18 || (v12 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v12 >> 3))
    {
      case 1u:
        a1[v7[188]] |= 1u;
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v8) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v22 = 0;
        }
        *(_QWORD *)&a1[v9[189]] = v22;
        goto LABEL_42;
      case 2u:
        PBReaderReadData();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 64;
        goto LABEL_41;
      case 3u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 48;
        goto LABEL_41;
      case 4u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 16;
        goto LABEL_41;
      case 5u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 24;
        goto LABEL_41;
      case 6u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 32;
        goto LABEL_41;
      case 7u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 40;
        goto LABEL_41;
      case 8u:
        v26 = v7;
        v27 = v9;
        v28 = objc_alloc_init(BMPBUserActivityMetadataTopic);
        objc_msgSend(a1, "addTopics:", v28);
        if (PBReaderPlaceMark() && BMPBUserActivityMetadataTopicReadFrom((uint64_t)v28, a2))
        {
          PBReaderRecallMark();

          v9 = v27;
          v7 = v26;
LABEL_42:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 9u:
        v29 = 0;
        v30 = 0;
        v31 = 0;
        a1[v7[188]] |= 2u;
        while (2)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          v34 = v33 + 1;
          if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v33);
            *(_QWORD *)(a2 + v32) = v34;
            v31 |= (unint64_t)(v35 & 0x7F) << v29;
            if (v35 < 0)
            {
              v29 += 7;
              v17 = v30++ >= 9;
              if (v17)
              {
                v31 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
LABEL_47:
        a1[80] = v31 != 0;
        goto LABEL_42;
      case 0xAu:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 72;
LABEL_41:
        v36 = *(void **)&a1[v25];
        *(_QWORD *)&a1[v25] = v24;

        goto LABEL_42;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_42;
    }
  }
}

uint64_t BMPBCarPlayEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v23 += 7;
          v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_43:
        *(_DWORD *)(a1 + 8) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 2u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_39:
        *(_BYTE *)(a1 + 12) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBGameControllerEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v23 += 7;
          v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_43:
        *(_DWORD *)(a1 + 8) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 2u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_39:
        *(_BYTE *)(a1 + 12) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL BMPBUserStatusChangeEventReadFrom(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
LABEL_25:
        v20 = *(void **)&a1[v19];
        *(_QWORD *)&a1[v19] = v18;
LABEL_26:

        goto LABEL_28;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (v20)
      objc_msgSend(a1, "addIdsHandles:", v20);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBAskToBuyEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  void *v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 64;
          goto LABEL_51;
        case 2u:
          *(_BYTE *)(a1 + 108) |= 1u;
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v23 = 0;
          }
          *(_QWORD *)(a1 + 8) = v23;
          continue;
        case 3u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 96;
          goto LABEL_51;
        case 4u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 16;
          goto LABEL_51;
        case 5u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 108) |= 4u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            v29 = v28 + 1;
            if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if (v30 < 0)
              {
                v24 += 7;
                v15 = v25++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_57;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_57:
          *(_DWORD *)(a1 + 76) = v26;
          continue;
        case 6u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 48;
          goto LABEL_51;
        case 7u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 32;
          goto LABEL_51;
        case 8u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 40;
          goto LABEL_51;
        case 9u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 88;
          goto LABEL_51;
        case 0xAu:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
          goto LABEL_51;
        case 0xBu:
          *(_BYTE *)(a1 + 108) |= 2u;
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 <= 0xFFFFFFFFFFFFFFFBLL && v32 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v33 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v33 = 0;
          }
          *(_DWORD *)(a1 + 72) = v33;
          continue;
        case 0xCu:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 56;
          goto LABEL_51;
        case 0xDu:
          v34 = 0;
          v35 = 0;
          v36 = 0;
          *(_BYTE *)(a1 + 108) |= 8u;
          break;
        case 0xEu:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 80;
LABEL_51:
          v41 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        v39 = v38 + 1;
        if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v4))
          break;
        v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v39;
        v36 |= (unint64_t)(v40 & 0x7F) << v34;
        if ((v40 & 0x80) == 0)
          goto LABEL_59;
        v34 += 7;
        v15 = v35++ >= 9;
        if (v15)
        {
          v36 = 0;
          goto LABEL_61;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_59:
      if (*(_BYTE *)(a2 + *v5))
        v36 = 0;
LABEL_61:
      *(_BYTE *)(a1 + 104) = v36 != 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL BMPBHomeKitClientAccessoryControlEventReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  BMPBHomeKitClientBase *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(BMPBHomeKitClientBase);
        objc_storeStrong(a1 + 4, v17);
        if (PBReaderPlaceMark() && (BMPBHomeKitClientBaseReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_27;
        goto LABEL_47;
      case 2u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 3;
        goto LABEL_42;
      case 3u:
        v17 = objc_alloc_init(BMPBAccessoryState);
        objc_storeStrong(a1 + 2, v17);
        if (PBReaderPlaceMark() && (BMPBAccessoryStateReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_27:
          PBReaderRecallMark();
LABEL_43:

LABEL_44:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_47:

        return 0;
      case 4u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 13;
        goto LABEL_42;
      case 5u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 12;
        goto LABEL_42;
      case 6u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 5;
        goto LABEL_42;
      case 7u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 10;
        goto LABEL_42;
      case 8u:
        PBReaderReadString();
        v17 = (BMPBHomeKitClientBase *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addZoneUniqueIdentifiers:", v17);
        goto LABEL_43;
      case 9u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
        goto LABEL_42;
      case 0xAu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 1;
        goto LABEL_42;
      case 0xBu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 11;
        goto LABEL_42;
      case 0xCu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 7;
        goto LABEL_42;
      case 0xDu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 9;
        goto LABEL_42;
      case 0xEu:
        PBReaderReadString();
        v17 = (BMPBHomeKitClientBase *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addZoneNames:", v17);
        goto LABEL_43;
      case 0xFu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 6;
LABEL_42:
        v17 = (BMPBHomeKitClientBase *)a1[v19];
        a1[v19] = (id)v18;
        goto LABEL_43;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_44;
    }
  }
}

uint64_t BMPBScreenTimeRequestEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  void *v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 40;
          goto LABEL_50;
        case 2u:
          *(_BYTE *)(a1 + 84) |= 1u;
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v23 = 0;
          }
          *(_QWORD *)(a1 + 8) = v23;
          continue;
        case 3u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 48;
          goto LABEL_50;
        case 4u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 56;
          goto LABEL_50;
        case 5u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 84) |= 4u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            v29 = v28 + 1;
            if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if (v30 < 0)
              {
                v24 += 7;
                v15 = v25++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_61;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_61:
          v51 = 32;
          goto LABEL_70;
        case 6u:
          v31 = 0;
          v32 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 84) |= 8u;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v35;
              v26 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                v15 = v32++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_65;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_65:
          v51 = 64;
          goto LABEL_70;
        case 7u:
          v37 = 0;
          v38 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 84) |= 2u;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
              *(_QWORD *)(a2 + v39) = v41;
              v26 |= (unint64_t)(v42 & 0x7F) << v37;
              if (v42 < 0)
              {
                v37 += 7;
                v15 = v38++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_69;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_69:
          v51 = 16;
LABEL_70:
          *(_DWORD *)(a1 + v51) = v26;
          continue;
        case 8u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 72;
          goto LABEL_50;
        case 9u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
LABEL_50:
          v43 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        case 0xAu:
          v44 = 0;
          v45 = 0;
          v46 = 0;
          *(_BYTE *)(a1 + 84) |= 0x10u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        v49 = v48 + 1;
        if (v48 == -1 || v49 > *(_QWORD *)(a2 + *v4))
          break;
        v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v49;
        v46 |= (unint64_t)(v50 & 0x7F) << v44;
        if ((v50 & 0x80) == 0)
          goto LABEL_72;
        v44 += 7;
        v15 = v45++ >= 9;
        if (v15)
        {
          v46 = 0;
          goto LABEL_74;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_72:
      if (*(_BYTE *)(a2 + *v5))
        v46 = 0;
LABEL_74:
      *(_BYTE *)(a1 + 80) = v46 != 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBNowPlayingEventReadFrom(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  int *v52;
  int *v53;
  BMPBNowPlayingOutputDevice *v54;
  void *v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = &OBJC_IVAR___BMPBMessagesContentEvent__recipients;
  v8 = &OBJC_IVAR___BMPBMessagesContentEvent__recipients;
  v9 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = *v3;
      v14 = *(_QWORD *)(a2 + v13);
      v15 = v14 + 1;
      if (v14 == -1 || v15 > *(_QWORD *)(a2 + *v4))
        break;
      v16 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v14);
      *(_QWORD *)(a2 + v13) = v15;
      v12 |= (unint64_t)(v16 & 0x7F) << v10;
      if ((v16 & 0x80) == 0)
        goto LABEL_12;
      v10 += 7;
      v17 = v11++ >= 9;
      if (v17)
      {
        v12 = 0;
        v18 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v18 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v12 = 0;
LABEL_14:
    if (v18 || (v12 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v12 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = v7[265];
        goto LABEL_67;
      case 2u:
        *((_BYTE *)a1 + v8[266]) |= 1u;
        v23 = *v3;
        v24 = *(_QWORD *)(a2 + v23);
        if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v25 = *(_QWORD *)(*(_QWORD *)(a2 + *v9) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v25 = 0;
        }
        a1[1] = v25;
        goto LABEL_119;
      case 3u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *((_BYTE *)a1 + v8[266]) |= 0x20u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          v31 = v30 + 1;
          if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v30);
            *(_QWORD *)(a2 + v29) = v31;
            v28 |= (unint64_t)(v32 & 0x7F) << v26;
            if (v32 < 0)
            {
              v26 += 7;
              v17 = v27++ >= 9;
              if (v17)
              {
                LODWORD(v28) = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v28) = 0;
LABEL_92:
        v75 = 120;
        goto LABEL_118;
      case 4u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 16;
        goto LABEL_67;
      case 5u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 24;
        goto LABEL_67;
      case 6u:
        v33 = 0;
        v34 = 0;
        v28 = 0;
        *((_BYTE *)a1 + v8[266]) |= 2u;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          v37 = v36 + 1;
          if (v36 == -1 || v37 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v36);
            *(_QWORD *)(a2 + v35) = v37;
            v28 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v17 = v34++ >= 9;
              if (v17)
              {
                LODWORD(v28) = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v28) = 0;
LABEL_96:
        v75 = 40;
        goto LABEL_118;
      case 7u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 48;
        goto LABEL_67;
      case 8u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 128;
        goto LABEL_67;
      case 9u:
        v39 = 0;
        v40 = 0;
        v28 = 0;
        *((_BYTE *)a1 + v8[266]) |= 4u;
        while (2)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v42);
            *(_QWORD *)(a2 + v41) = v43;
            v28 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              v17 = v40++ >= 9;
              if (v17)
              {
                LODWORD(v28) = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v28) = 0;
LABEL_100:
        v75 = 44;
        goto LABEL_118;
      case 0xAu:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 104;
        goto LABEL_67;
      case 0xBu:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 80;
        goto LABEL_67;
      case 0xCu:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 88;
        goto LABEL_67;
      case 0xDu:
        v45 = 0;
        v46 = 0;
        v47 = 0;
        *((_BYTE *)a1 + v8[266]) |= 0x40u;
        while (2)
        {
          v48 = *v3;
          v49 = *(_QWORD *)(a2 + v48);
          v50 = v49 + 1;
          if (v49 == -1 || v50 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v49);
            *(_QWORD *)(a2 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              v17 = v46++ >= 9;
              if (v17)
              {
                v47 = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v47 = 0;
LABEL_104:
        v76 = v47 != 0;
        v77 = 144;
        goto LABEL_109;
      case 0xEu:
        v52 = v8;
        v53 = v7;
        v54 = objc_alloc_init(BMPBNowPlayingOutputDevice);
        objc_msgSend(a1, "addOutputDevices:", v54);
        if (PBReaderPlaceMark() && (BMPBNowPlayingOutputDeviceReadFrom((uint64_t)v54, a2) & 1) != 0)
        {
          PBReaderRecallMark();

          v7 = v53;
          v8 = v52;
LABEL_119:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 0xFu:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 32;
        goto LABEL_67;
      case 0x10u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 72;
        goto LABEL_67;
      case 0x11u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 64;
        goto LABEL_67;
      case 0x12u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 56;
LABEL_67:
        v55 = *(void **)((char *)a1 + v21);
        *(_QWORD *)((char *)a1 + v21) = v20;

        goto LABEL_119;
      case 0x13u:
        v56 = 0;
        v57 = 0;
        v58 = 0;
        *((_BYTE *)a1 + v8[266]) |= 0x80u;
        while (2)
        {
          v59 = *v3;
          v60 = *(_QWORD *)(a2 + v59);
          v61 = v60 + 1;
          if (v60 == -1 || v61 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v62 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v60);
            *(_QWORD *)(a2 + v59) = v61;
            v58 |= (unint64_t)(v62 & 0x7F) << v56;
            if (v62 < 0)
            {
              v56 += 7;
              v17 = v57++ >= 9;
              if (v17)
              {
                v58 = 0;
                goto LABEL_108;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v58 = 0;
LABEL_108:
        v76 = v58 != 0;
        v77 = 145;
LABEL_109:
        *((_BYTE *)a1 + v77) = v76;
        goto LABEL_119;
      case 0x14u:
        v63 = 0;
        v64 = 0;
        v28 = 0;
        *((_BYTE *)a1 + v8[266]) |= 0x10u;
        while (2)
        {
          v65 = *v3;
          v66 = *(_QWORD *)(a2 + v65);
          v67 = v66 + 1;
          if (v66 == -1 || v67 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v68 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v66);
            *(_QWORD *)(a2 + v65) = v67;
            v28 |= (unint64_t)(v68 & 0x7F) << v63;
            if (v68 < 0)
            {
              v63 += 7;
              v17 = v64++ >= 9;
              if (v17)
              {
                LODWORD(v28) = 0;
                goto LABEL_113;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v28) = 0;
LABEL_113:
        v75 = 100;
        goto LABEL_118;
      case 0x15u:
        v69 = 0;
        v70 = 0;
        v28 = 0;
        *((_BYTE *)a1 + v8[266]) |= 8u;
        while (2)
        {
          v71 = *v3;
          v72 = *(_QWORD *)(a2 + v71);
          v73 = v72 + 1;
          if (v72 == -1 || v73 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v74 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v72);
            *(_QWORD *)(a2 + v71) = v73;
            v28 |= (unint64_t)(v74 & 0x7F) << v69;
            if (v74 < 0)
            {
              v69 += 7;
              v17 = v70++ >= 9;
              if (v17)
              {
                LODWORD(v28) = 0;
                goto LABEL_117;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v28) = 0;
LABEL_117:
        v75 = 96;
LABEL_118:
        *(_DWORD *)((char *)a1 + v75) = v28;
        goto LABEL_119;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_119;
    }
  }
}

void sub_18D8A2850(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18D8A29D8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id get_DKNowPlayingMetadataKeyClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DKNowPlayingMetadataKeyClass_softClass;
  v7 = get_DKNowPlayingMetadataKeyClass_softClass;
  if (!get_DKNowPlayingMetadataKeyClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DKNowPlayingMetadataKeyClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_DKNowPlayingMetadataKeyClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8A4760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const __CFString *BMSQLDataTypeToString(unint64_t a1)
{
  NSObject *v3;

  if (a1 < 7)
    return off_1E26485A8[a1];
  __biome_log_for_category();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    BMSQLDataTypeToString_cold_1(a1, v3);

  return CFSTR("TEXT");
}

id BMConvertObjectToJSONString(void *a1, _QWORD *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v10;

  v3 = a1;
  if (!v3
    || (objc_msgSend(MEMORY[0x1E0C99E38], "null"),
        v4 = (id)objc_claimAutoreleasedReturnValue(),
        v4,
        v4 == v3))
  {
    v8 = 0;
  }
  else
  {
    v10 = 0;
    objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v3, 0, &v10);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v10;
    v7 = v6;
    if (v5)
    {
      v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v5, 4);
    }
    else
    {
      v8 = 0;
      if (a2)
        *a2 = objc_retainAutorelease(v6);
    }

  }
  return v8;
}

id BMEventBookmarkSQLColumns()
{
  BMSQLColumn *v0;
  BMSQLColumn *v1;
  BMSQLColumn *v2;
  BMSQLColumn *v3;
  void *v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x1E0C80C00];
  v0 = -[BMSQLColumn initWithName:dataType:requestOnly:extractBlock:]([BMSQLColumn alloc], "initWithName:dataType:requestOnly:extractBlock:", CFSTR("_bookmark.streamId"), 2, 1, &__block_literal_global_23);
  v6[0] = v0;
  v1 = -[BMSQLColumn initWithName:dataType:requestOnly:extractBlock:]([BMSQLColumn alloc], "initWithName:dataType:requestOnly:extractBlock:", CFSTR("_bookmark.segmentName"), 2, 1, &__block_literal_global_26);
  v6[1] = v1;
  v2 = -[BMSQLColumn initWithName:dataType:requestOnly:extractBlock:]([BMSQLColumn alloc], "initWithName:dataType:requestOnly:extractBlock:", CFSTR("_bookmark.iterationStartTime"), 1, 1, &__block_literal_global_29);
  v6[2] = v2;
  v3 = -[BMSQLColumn initWithName:dataType:requestOnly:extractBlock:]([BMSQLColumn alloc], "initWithName:dataType:requestOnly:extractBlock:", CFSTR("_bookmark.offset"), 0, 1, &__block_literal_global_32);
  v6[3] = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t BMPBUserFocusActivityEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 8;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 28) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_36;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_36:
            *(_BYTE *)(a1 + 24) = v20 != 0;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 16;
      }
      v26 = *(void **)(a1 + v25);
      *(_QWORD *)(a1 + v25) = v24;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL BMPBPersonNameReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  BMPBNameComponents *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(BMPBNameComponents **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(BMPBNameComponents);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || !BMPBNameComponentsReadFrom((uint64_t)v18, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18D8A7FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18D8A83C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,id a21)
{
  id *v21;
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a21);
  _Unwind_Resume(a1);
}

id get_DKKnowledgeStoreClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DKKnowledgeStoreClass_softClass;
  v7 = get_DKKnowledgeStoreClass_softClass;
  if (!get_DKKnowledgeStoreClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DKKnowledgeStoreClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_DKKnowledgeStoreClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8AB290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_CDClientContextClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_CDClientContextClass_softClass;
  v7 = get_CDClientContextClass_softClass;
  if (!get_CDClientContextClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_CDClientContextClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_CDClientContextClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8AB348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_CDContextQueriesClass_0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_CDContextQueriesClass_softClass_0;
  v7 = get_CDContextQueriesClass_softClass_0;
  if (!get_CDContextQueriesClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_CDContextQueriesClass_block_invoke_0;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_CDContextQueriesClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8ABDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_DKAppClipUsageMetadataKeyClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DKAppClipUsageMetadataKeyClass_softClass;
  v7 = get_DKAppClipUsageMetadataKeyClass_softClass;
  if (!get_DKAppClipUsageMetadataKeyClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DKAppClipUsageMetadataKeyClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_DKAppClipUsageMetadataKeyClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8ACF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_DKEventClass_0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DKEventClass_softClass_0;
  v7 = get_DKEventClass_softClass_0;
  if (!get_DKEventClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DKEventClass_block_invoke_0;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_DKEventClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8AD00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_DKSystemEventStreamsClass_0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DKSystemEventStreamsClass_softClass_0;
  v7 = get_DKSystemEventStreamsClass_softClass_0;
  if (!get_DKSystemEventStreamsClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DKSystemEventStreamsClass_block_invoke_0;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_DKSystemEventStreamsClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8AD0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_DKAppMediaUsageMetadataKeyClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DKAppMediaUsageMetadataKeyClass_softClass;
  v7 = get_DKAppMediaUsageMetadataKeyClass_softClass;
  if (!get_DKAppMediaUsageMetadataKeyClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DKAppMediaUsageMetadataKeyClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_DKAppMediaUsageMetadataKeyClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8AD40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_DKDigitalHealthMetadataKeyClass_0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DKDigitalHealthMetadataKeyClass_softClass_0;
  v7 = get_DKDigitalHealthMetadataKeyClass_softClass_0;
  if (!get_DKDigitalHealthMetadataKeyClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DKDigitalHealthMetadataKeyClass_block_invoke_0;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_DKDigitalHealthMetadataKeyClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8AD4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t BMPBSleepModeEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v26 = *v3;
        v27 = *(_QWORD *)(a2 + v26);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v28 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v28 = 0;
        }
        *(_QWORD *)(a1 + 8) = v28;
      }
      else
      {
        if ((_DWORD)v18 == 2)
        {
          v29 = 0;
          v30 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (1)
          {
            v31 = *v3;
            v32 = *(_QWORD *)(a2 + v31);
            v33 = v32 + 1;
            if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v4))
              break;
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v33;
            v21 |= (unint64_t)(v34 & 0x7F) << v29;
            if ((v34 & 0x80) == 0)
              goto LABEL_45;
            v29 += 7;
            v15 = v30++ >= 9;
            if (v15)
            {
              LODWORD(v21) = 0;
              goto LABEL_47;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v21) = 0;
LABEL_47:
          v36 = 16;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 24) |= 4u;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
              break;
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              goto LABEL_41;
            v19 += 7;
            v15 = v20++ >= 9;
            if (v15)
            {
              LODWORD(v21) = 0;
              goto LABEL_43;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v21) = 0;
LABEL_43:
          v36 = 20;
        }
        *(_DWORD *)(a1 + v36) = v21;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBSiriUIEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  void *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
          goto LABEL_25;
        case 2u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 32;
          goto LABEL_25;
        case 3u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 40;
          goto LABEL_25;
        case 4u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 16;
LABEL_25:
          v21 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        case 5u:
          v22 = 0;
          v23 = 0;
          v24 = 0;
          *(_BYTE *)(a1 + 52) |= 2u;
          break;
        case 6u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v31 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v31 = 0;
          }
          *(_QWORD *)(a1 + 8) = v31;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v25 = *v3;
        v26 = *(_QWORD *)(a2 + v25);
        v27 = v26 + 1;
        if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v4))
          break;
        v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
        *(_QWORD *)(a2 + v25) = v27;
        v24 |= (unint64_t)(v28 & 0x7F) << v22;
        if ((v28 & 0x80) == 0)
          goto LABEL_37;
        v22 += 7;
        v15 = v23++ >= 9;
        if (v15)
        {
          v24 = 0;
          goto LABEL_39;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
      if (*(_BYTE *)(a2 + *v5))
        v24 = 0;
LABEL_39:
      *(_BYTE *)(a1 + 48) = v24 != 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBScreenRecordingEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        *(_BYTE *)(a1 + 8) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18D8B0EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

BOOL BMPBPhotosKnowledgeGraphEnrichmentLocationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 40;
          goto LABEL_24;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_24;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_24;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_24;
        case 5u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
LABEL_24:
          v19 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          goto LABEL_25;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_25:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBPhotosKnowledgeGraphEnrichmentEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  BMPBPhotosKnowledgeGraphEnrichmentTopic *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 64) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_QWORD *)(a1 + 8) = v20;
        goto LABEL_39;
      case 2u:
        v22 = objc_alloc_init(BMPBPhotosKnowledgeGraphEnrichmentTopic);
        objc_msgSend((id)a1, "addTopics:", v22);
        if (!PBReaderPlaceMark()
          || (BMPBPhotosKnowledgeGraphEnrichmentTopicReadFrom((uint64_t)v22, a2) & 1) == 0)
        {
          goto LABEL_41;
        }
        goto LABEL_32;
      case 3u:
        v22 = objc_alloc_init(BMPBPhotosKnowledgeGraphEnrichmentEntity);
        objc_msgSend((id)a1, "addEntities:", v22);
        if (!PBReaderPlaceMark()
          || (BMPBPhotosKnowledgeGraphEnrichmentEntityReadFrom((uint64_t)v22, a2) & 1) == 0)
        {
          goto LABEL_41;
        }
        goto LABEL_32;
      case 4u:
        v22 = objc_alloc_init(BMPBPhotosKnowledgeGraphEnrichmentLocation);
        objc_msgSend((id)a1, "addLocations:", v22);
        if (PBReaderPlaceMark() && BMPBPhotosKnowledgeGraphEnrichmentLocationReadFrom((uint64_t)v22, a2))
        {
LABEL_32:
          PBReaderRecallMark();

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_41:

        return 0;
      case 5u:
        PBReaderReadString();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = 56;
        goto LABEL_36;
      case 6u:
        PBReaderReadString();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = 16;
        goto LABEL_36;
      case 7u:
        PBReaderReadString();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = 40;
LABEL_36:
        v25 = *(void **)(a1 + v24);
        *(_QWORD *)(a1 + v24) = v23;

        goto LABEL_39;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_39;
    }
  }
}

BOOL BMPBUserActivityMetadataTopicReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 8;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBPOICategoryEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 28) |= 1u;
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v23 = 0;
        }
        *(_QWORD *)(a1 + 8) = v23;
      }
      else if ((_DWORD)v18 == 2)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          v29 = v28 + 1;
          if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v29;
          v26 |= (unint64_t)(v30 & 0x7F) << v24;
          if ((v30 & 0x80) == 0)
            goto LABEL_35;
          v24 += 7;
          v15 = v25++ >= 9;
          if (v15)
          {
            LODWORD(v26) = 0;
            goto LABEL_37;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_37:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else if ((_DWORD)v18 == 1)
      {
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v19;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBThirdPartyAppContentEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  void *v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v16)
          v17 = 1;
        else
          v17 = (v10 & 7) == 4;
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 80;
              goto LABEL_33;
            case 2u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 56;
              goto LABEL_33;
            case 3u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 16;
              goto LABEL_33;
            case 4u:
              *(_BYTE *)(a1 + 88) |= 1u;
              v20 = *v3;
              v21 = *(_QWORD *)(a2 + v20);
              if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v21);
                *(_QWORD *)(a2 + v20) = v21 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v22 = 0;
              }
              *(_QWORD *)(a1 + 8) = v22;
              goto LABEL_34;
            case 5u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 72;
              goto LABEL_33;
            case 6u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 48;
              goto LABEL_33;
            case 7u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 24;
              goto LABEL_33;
            case 8u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 32;
              goto LABEL_33;
            case 9u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 40;
              goto LABEL_33;
            case 0xAu:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 64;
LABEL_33:
              v24 = *(void **)(a1 + v19);
              *(_QWORD *)(a1 + v19) = v18;

              goto LABEL_34;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_34:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL BMPBSiriIntentEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
        goto LABEL_24;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
LABEL_24:
        v20 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = 8;
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMNotificationEventUsageTypeFromDKIdentifierValue(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqual:", CFSTR("Receive")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqual:", CFSTR("DefaultAction")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqual:", CFSTR("SuppAction")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqual:", CFSTR("Clear")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqual:", CFSTR("ClearAll")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqual:", CFSTR("IndirectClear")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqual:", CFSTR("Hidden")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqual:", CFSTR("Orb")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqual:", CFSTR("Dismiss")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqual:", CFSTR("AppLaunch")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqual:", CFSTR("Expired")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqual:", CFSTR("Pulldown")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqual:", CFSTR("TapCoalesce")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqual:", CFSTR("Deduped")) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqual:", CFSTR("DevActivated")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqual:", CFSTR("DevUnlocked")) & 1) != 0)
  {
    v2 = 15;
  }
  else if ((objc_msgSend(v1, "isEqual:", CFSTR("ReceivedAndDeliveredProminently")) & 1) != 0)
  {
    v2 = 17;
  }
  else if ((objc_msgSend(v1, "isEqual:", CFSTR("ReceivedAndDeliveredNonprominently")) & 1) != 0)
  {
    v2 = 18;
  }
  else if ((objc_msgSend(v1, "isEqual:", CFSTR("Modified")) & 1) != 0)
  {
    v2 = 19;
  }
  else if (objc_msgSend(v1, "isEqual:", CFSTR("TapExpand")))
  {
    v2 = 20;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id get_DKNotificationUsageMetadataKeyClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DKNotificationUsageMetadataKeyClass_softClass;
  v7 = get_DKNotificationUsageMetadataKeyClass_softClass;
  if (!get_DKNotificationUsageMetadataKeyClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DKNotificationUsageMetadataKeyClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_DKNotificationUsageMetadataKeyClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8BBC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_DKPREventClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DKPREventClass_softClass;
  v7 = get_DKPREventClass_softClass;
  if (!get_DKPREventClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DKPREventClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_DKPREventClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8BCCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_DKEventClass_1()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DKEventClass_softClass_1;
  v7 = get_DKEventClass_softClass_1;
  if (!get_DKEventClass_softClass_1)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DKEventClass_block_invoke_1;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_DKEventClass_block_invoke_1((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8BCD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL BMPBContentAttachmentReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
        goto LABEL_24;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
LABEL_24:
        v20 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = 16;
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBSiriPrivateLearningSELFEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadData();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = 16;
      }
      else
      {
        if ((_DWORD)v18 != 2)
        {
          if ((_DWORD)v18 == 1)
          {
            *(_BYTE *)(a1 + 32) |= 1u;
            v19 = *v3;
            v20 = *(_QWORD *)(a2 + v19);
            if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
            {
              v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
              *(_QWORD *)(a2 + v19) = v20 + 8;
            }
            else
            {
              *(_BYTE *)(a2 + *v5) = 1;
              v21 = 0;
            }
            *(_QWORD *)(a1 + 8) = v21;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = 24;
      }
      v24 = *(void **)(a1 + v23);
      *(_QWORD *)(a1 + v23) = v22;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBSiriQueryResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 32) |= 1u;
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v24 = 0;
        }
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        if ((_DWORD)v18 == 2)
        {
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 16;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 24;
        }
        v21 = *(void **)(a1 + v20);
        *(_QWORD *)(a1 + v20) = v19;

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBPhotosPhotoViewEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  BOOL v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v16)
          v17 = 1;
        else
          v17 = (v10 & 7) == 4;
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              PBReaderReadString();
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              if (v18)
                objc_msgSend((id)a1, "addLocations:", v18);

              goto LABEL_33;
            case 2u:
              *(_BYTE *)(a1 + 48) |= 1u;
              v23 = *v3;
              v24 = *(_QWORD *)(a2 + v23);
              if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v25 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v24);
                *(_QWORD *)(a2 + v23) = v24 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v25 = 0;
              }
              *(_QWORD *)(a1 + 8) = v25;
              goto LABEL_33;
            case 3u:
              PBReaderReadString();
              v19 = objc_claimAutoreleasedReturnValue();
              v20 = 40;
              goto LABEL_25;
            case 4u:
              PBReaderReadString();
              v19 = objc_claimAutoreleasedReturnValue();
              v20 = 16;
              goto LABEL_25;
            case 5u:
              PBReaderReadString();
              v19 = objc_claimAutoreleasedReturnValue();
              v20 = 32;
LABEL_25:
              v21 = *(void **)(a1 + v20);
              *(_QWORD *)(a1 + v20) = v19;

              goto LABEL_33;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_33:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBHealthKitWorkoutEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  void *v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  BOOL v45;
  uint64_t v46;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_53;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_55;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_55:
          v45 = v19 != 0;
          v46 = 28;
          goto LABEL_68;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 32) |= 4u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  v26 = 0;
                  goto LABEL_59;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
LABEL_59:
          v45 = v26 != 0;
          v46 = 29;
          goto LABEL_68;
        case 3u:
          PBReaderReadString();
          v30 = objc_claimAutoreleasedReturnValue();
          v31 = 8;
          goto LABEL_44;
        case 4u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v34) = 0;
LABEL_63:
          *(_DWORD *)(a1 + 24) = v34;
          continue;
        case 5u:
          PBReaderReadString();
          v30 = objc_claimAutoreleasedReturnValue();
          v31 = 16;
LABEL_44:
          v38 = *(void **)(a1 + v31);
          *(_QWORD *)(a1 + v31) = v30;

          continue;
        case 6u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          *(_BYTE *)(a1 + 32) |= 8u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v41 |= (unint64_t)(v44 & 0x7F) << v39;
        if ((v44 & 0x80) == 0)
          goto LABEL_65;
        v39 += 7;
        v14 = v40++ >= 9;
        if (v14)
        {
          v41 = 0;
          goto LABEL_67;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_65:
      if (*(_BYTE *)(a2 + *v5))
        v41 = 0;
LABEL_67:
      v45 = v41 != 0;
      v46 = 30;
LABEL_68:
      *(_BYTE *)(a1 + v46) = v45;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id getBMAppInFocusIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMAppInFocusIdentifierSymbolLoc_ptr;
  v6 = getBMAppInFocusIdentifierSymbolLoc_ptr;
  if (!getBMAppInFocusIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMAppInFocusIdentifier");
    v4[3] = (uint64_t)v0;
    getBMAppInFocusIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMAppInFocusIdentifier_cold_1();
  return *v0;
}

void sub_18D8C693C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMAppIntentIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMAppIntentIdentifierSymbolLoc_ptr;
  v6 = getBMAppIntentIdentifierSymbolLoc_ptr;
  if (!getBMAppIntentIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMAppIntentIdentifier");
    v4[3] = (uint64_t)v0;
    getBMAppIntentIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMAppIntentIdentifier_cold_1();
  return *v0;
}

void sub_18D8C69D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMSiriRemembersInteractionHistoryIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMSiriRemembersInteractionHistoryIdentifierSymbolLoc_ptr;
  v6 = getBMSiriRemembersInteractionHistoryIdentifierSymbolLoc_ptr;
  if (!getBMSiriRemembersInteractionHistoryIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMSiriRemembersInteractionHistoryIdentifier");
    v4[3] = (uint64_t)v0;
    getBMSiriRemembersInteractionHistoryIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMSiriRemembersInteractionHistoryIdentifier_cold_1();
  return *v0;
}

void sub_18D8C6A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMSiriRemembersMessageHistoryIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMSiriRemembersMessageHistoryIdentifierSymbolLoc_ptr;
  v6 = getBMSiriRemembersMessageHistoryIdentifierSymbolLoc_ptr;
  if (!getBMSiriRemembersMessageHistoryIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMSiriRemembersMessageHistoryIdentifier");
    v4[3] = (uint64_t)v0;
    getBMSiriRemembersMessageHistoryIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMSiriRemembersMessageHistoryIdentifier_cold_1();
  return *v0;
}

void sub_18D8C6B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMSiriRemembersCallHistoryIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMSiriRemembersCallHistoryIdentifierSymbolLoc_ptr;
  v6 = getBMSiriRemembersCallHistoryIdentifierSymbolLoc_ptr;
  if (!getBMSiriRemembersCallHistoryIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMSiriRemembersCallHistoryIdentifier");
    v4[3] = (uint64_t)v0;
    getBMSiriRemembersCallHistoryIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMSiriRemembersCallHistoryIdentifier_cold_1();
  return *v0;
}

void sub_18D8C6B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMSiriRemembersAudioHistoryIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMSiriRemembersAudioHistoryIdentifierSymbolLoc_ptr;
  v6 = getBMSiriRemembersAudioHistoryIdentifierSymbolLoc_ptr;
  if (!getBMSiriRemembersAudioHistoryIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMSiriRemembersAudioHistoryIdentifier");
    v4[3] = (uint64_t)v0;
    getBMSiriRemembersAudioHistoryIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMSiriRemembersAudioHistoryIdentifier_cold_1();
  return *v0;
}

void sub_18D8C6C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMFrontBoardDisplayElementIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMFrontBoardDisplayElementIdentifierSymbolLoc_ptr;
  v6 = getBMFrontBoardDisplayElementIdentifierSymbolLoc_ptr;
  if (!getBMFrontBoardDisplayElementIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMFrontBoardDisplayElementIdentifier");
    v4[3] = (uint64_t)v0;
    getBMFrontBoardDisplayElementIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMFrontBoardDisplayElementIdentifier_cold_1();
  return *v0;
}

void sub_18D8C6CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMScreenTimeAppUsageIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMScreenTimeAppUsageIdentifierSymbolLoc_ptr;
  v6 = getBMScreenTimeAppUsageIdentifierSymbolLoc_ptr;
  if (!getBMScreenTimeAppUsageIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMScreenTimeAppUsageIdentifier");
    v4[3] = (uint64_t)v0;
    getBMScreenTimeAppUsageIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMScreenTimeAppUsageIdentifier_cold_1();
  return *v0;
}

void sub_18D8C6D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMIntelligenceEngineInteractionDonationIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMIntelligenceEngineInteractionDonationIdentifierSymbolLoc_ptr;
  v6 = getBMIntelligenceEngineInteractionDonationIdentifierSymbolLoc_ptr;
  if (!getBMIntelligenceEngineInteractionDonationIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMIntelligenceEngineInteractionDonationIdentifier");
    v4[3] = (uint64_t)v0;
    getBMIntelligenceEngineInteractionDonationIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMIntelligenceEngineInteractionDonationIdentifier_cold_1();
  return *v0;
}

void sub_18D8C6DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMAppLocationActivityIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMAppLocationActivityIdentifierSymbolLoc_ptr;
  v6 = getBMAppLocationActivityIdentifierSymbolLoc_ptr;
  if (!getBMAppLocationActivityIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMAppLocationActivityIdentifier");
    v4[3] = (uint64_t)v0;
    getBMAppLocationActivityIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMAppLocationActivityIdentifier_cold_1();
  return *v0;
}

void sub_18D8C6E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMSiriRemembersAssistantSuggestionsIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMSiriRemembersAssistantSuggestionsIdentifierSymbolLoc_ptr;
  v6 = getBMSiriRemembersAssistantSuggestionsIdentifierSymbolLoc_ptr;
  if (!getBMSiriRemembersAssistantSuggestionsIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMSiriRemembersAssistantSuggestionsIdentifier");
    v4[3] = (uint64_t)v0;
    getBMSiriRemembersAssistantSuggestionsIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMSiriRemembersAssistantSuggestionsIdentifier_cold_1();
  return *v0;
}

void sub_18D8C7968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMSiriAppSelectionMusicIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMSiriAppSelectionMusicIdentifierSymbolLoc_ptr;
  v6 = getBMSiriAppSelectionMusicIdentifierSymbolLoc_ptr;
  if (!getBMSiriAppSelectionMusicIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMSiriAppSelectionMusicIdentifier");
    v4[3] = (uint64_t)v0;
    getBMSiriAppSelectionMusicIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMSiriAppSelectionMusicIdentifier_cold_1();
  return *v0;
}

void sub_18D8C7A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMSiriExecutionIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMSiriExecutionIdentifierSymbolLoc_ptr;
  v6 = getBMSiriExecutionIdentifierSymbolLoc_ptr;
  if (!getBMSiriExecutionIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMSiriExecutionIdentifier");
    v4[3] = (uint64_t)v0;
    getBMSiriExecutionIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMSiriExecutionIdentifier_cold_1();
  return *v0;
}

void sub_18D8C7A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMSiriFeedbackLearningUserInteractionsIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMSiriFeedbackLearningUserInteractionsIdentifierSymbolLoc_ptr;
  v6 = getBMSiriFeedbackLearningUserInteractionsIdentifierSymbolLoc_ptr;
  if (!getBMSiriFeedbackLearningUserInteractionsIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMSiriFeedbackLearningUserInteractionsIdentifier");
    v4[3] = (uint64_t)v0;
    getBMSiriFeedbackLearningUserInteractionsIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMSiriFeedbackLearningUserInteractionsIdentifier_cold_1();
  return *v0;
}

void sub_18D8C7B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMSiriPostSiriEngagementIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMSiriPostSiriEngagementIdentifierSymbolLoc_ptr;
  v6 = getBMSiriPostSiriEngagementIdentifierSymbolLoc_ptr;
  if (!getBMSiriPostSiriEngagementIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMSiriPostSiriEngagementIdentifier");
    v4[3] = (uint64_t)v0;
    getBMSiriPostSiriEngagementIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMSiriPostSiriEngagementIdentifier_cold_1();
  return *v0;
}

void sub_18D8C7BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMSiriPrivateLearningSELFEventIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMSiriPrivateLearningSELFEventIdentifierSymbolLoc_ptr;
  v6 = getBMSiriPrivateLearningSELFEventIdentifierSymbolLoc_ptr;
  if (!getBMSiriPrivateLearningSELFEventIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMSiriPrivateLearningSELFEventIdentifier");
    v4[3] = (uint64_t)v0;
    getBMSiriPrivateLearningSELFEventIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMSiriPrivateLearningSELFEventIdentifier_cold_1();
  return *v0;
}

void sub_18D8C7C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMSiriRemembersIntentIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMSiriRemembersIntentIdentifierSymbolLoc_ptr;
  v6 = getBMSiriRemembersIntentIdentifierSymbolLoc_ptr;
  if (!getBMSiriRemembersIntentIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMSiriRemembersIntentIdentifier");
    v4[3] = (uint64_t)v0;
    getBMSiriRemembersIntentIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMSiriRemembersIntentIdentifier_cold_1();
  return *v0;
}

void sub_18D8C7CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMSiriSELFProcessedEventIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMSiriSELFProcessedEventIdentifierSymbolLoc_ptr;
  v6 = getBMSiriSELFProcessedEventIdentifierSymbolLoc_ptr;
  if (!getBMSiriSELFProcessedEventIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMSiriSELFProcessedEventIdentifier");
    v4[3] = (uint64_t)v0;
    getBMSiriSELFProcessedEventIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMSiriSELFProcessedEventIdentifier_cold_1();
  return *v0;
}

void sub_18D8C7D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMDictationUserEditIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMDictationUserEditIdentifierSymbolLoc_ptr;
  v6 = getBMDictationUserEditIdentifierSymbolLoc_ptr;
  if (!getBMDictationUserEditIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMDictationUserEditIdentifier");
    v4[3] = (uint64_t)v0;
    getBMDictationUserEditIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMDictationUserEditIdentifier_cold_1();
  return *v0;
}

void sub_18D8C7E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMProactiveHarvestingSiriQueryIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMProactiveHarvestingSiriQueryIdentifierSymbolLoc_ptr;
  v6 = getBMProactiveHarvestingSiriQueryIdentifierSymbolLoc_ptr;
  if (!getBMProactiveHarvestingSiriQueryIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMProactiveHarvestingSiriQueryIdentifier");
    v4[3] = (uint64_t)v0;
    getBMProactiveHarvestingSiriQueryIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMProactiveHarvestingSiriQueryIdentifier_cold_1();
  return *v0;
}

void sub_18D8C7EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMSiriDictationIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMSiriDictationIdentifierSymbolLoc_ptr;
  v6 = getBMSiriDictationIdentifierSymbolLoc_ptr;
  if (!getBMSiriDictationIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMSiriDictationIdentifier");
    v4[3] = (uint64_t)v0;
    getBMSiriDictationIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMSiriDictationIdentifier_cold_1();
  return *v0;
}

void sub_18D8C7F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMSiriRemembersExplicitRequestsIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMSiriRemembersExplicitRequestsIdentifierSymbolLoc_ptr;
  v6 = getBMSiriRemembersExplicitRequestsIdentifierSymbolLoc_ptr;
  if (!getBMSiriRemembersExplicitRequestsIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMSiriRemembersExplicitRequestsIdentifier");
    v4[3] = (uint64_t)v0;
    getBMSiriRemembersExplicitRequestsIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMSiriRemembersExplicitRequestsIdentifier_cold_1();
  return *v0;
}

void sub_18D8C7FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getBMSiriServiceIdentifier()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getBMSiriServiceIdentifierSymbolLoc_ptr;
  v6 = getBMSiriServiceIdentifierSymbolLoc_ptr;
  if (!getBMSiriServiceIdentifierSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary();
    v0 = (id *)dlsym(v1, "BMSiriServiceIdentifier");
    v4[3] = (uint64_t)v0;
    getBMSiriServiceIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getBMSiriServiceIdentifier_cold_1();
  return *v0;
}

void sub_18D8C8088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_18D8C8544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_18D8C86D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_18D8C87E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_18D8C9560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

id getBMAppIntentClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getBMAppIntentClass_softClass;
  v7 = getBMAppIntentClass_softClass;
  if (!getBMAppIntentClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getBMAppIntentClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __getBMAppIntentClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8C967C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriInteractionHistoryClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getBMSiriInteractionHistoryClass_softClass;
  v7 = getBMSiriInteractionHistoryClass_softClass;
  if (!getBMSiriInteractionHistoryClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getBMSiriInteractionHistoryClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __getBMSiriInteractionHistoryClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8C9734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriMessageHistoryClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getBMSiriMessageHistoryClass_softClass;
  v7 = getBMSiriMessageHistoryClass_softClass;
  if (!getBMSiriMessageHistoryClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getBMSiriMessageHistoryClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __getBMSiriMessageHistoryClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8C97EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriCallHistoryClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getBMSiriCallHistoryClass_softClass;
  v7 = getBMSiriCallHistoryClass_softClass;
  if (!getBMSiriCallHistoryClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getBMSiriCallHistoryClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __getBMSiriCallHistoryClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8C98A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriAssistantSuggestionsClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getBMSiriAssistantSuggestionsClass_softClass;
  v7 = getBMSiriAssistantSuggestionsClass_softClass;
  if (!getBMSiriAssistantSuggestionsClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getBMSiriAssistantSuggestionsClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __getBMSiriAssistantSuggestionsClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8C995C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriAudioHistoryClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getBMSiriAudioHistoryClass_softClass;
  v7 = getBMSiriAudioHistoryClass_softClass;
  if (!getBMSiriAudioHistoryClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getBMSiriAudioHistoryClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __getBMSiriAudioHistoryClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8C9A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMFrontBoardDisplayElementClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getBMFrontBoardDisplayElementClass_softClass;
  v7 = getBMFrontBoardDisplayElementClass_softClass;
  if (!getBMFrontBoardDisplayElementClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getBMFrontBoardDisplayElementClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __getBMFrontBoardDisplayElementClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8C9ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMScreenTimeAppUsageClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getBMScreenTimeAppUsageClass_softClass;
  v7 = getBMScreenTimeAppUsageClass_softClass;
  if (!getBMScreenTimeAppUsageClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getBMScreenTimeAppUsageClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __getBMScreenTimeAppUsageClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8C9B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMIntelligenceEngineInteractionClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getBMIntelligenceEngineInteractionClass_softClass;
  v7 = getBMIntelligenceEngineInteractionClass_softClass;
  if (!getBMIntelligenceEngineInteractionClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getBMIntelligenceEngineInteractionClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __getBMIntelligenceEngineInteractionClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8C9C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMAppLocationActivityClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getBMAppLocationActivityClass_softClass;
  v7 = getBMAppLocationActivityClass_softClass;
  if (!getBMAppLocationActivityClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getBMAppLocationActivityClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __getBMAppLocationActivityClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8C9CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t BiomeLibraryLibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!BiomeLibraryLibraryCore_frameworkLibrary)
  {
    v2 = xmmword_1E2648A80;
    v3 = 0;
    BiomeLibraryLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!BiomeLibraryLibraryCore_frameworkLibrary)
    BiomeLibraryLibrary_cold_1(&v1);
  return BiomeLibraryLibraryCore_frameworkLibrary;
}

Class __getBMAppInFocusClass_block_invoke(uint64_t a1)
{
  Class result;

  BiomeLibraryLibrary();
  result = objc_getClass("BMAppInFocus");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getBMAppInFocusClass_block_invoke_cold_1();
  getBMAppInFocusClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMAppIntentClass_block_invoke(uint64_t a1)
{
  Class result;

  BiomeLibraryLibrary();
  result = objc_getClass("BMAppIntent");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getBMAppIntentClass_block_invoke_cold_1();
  getBMAppIntentClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMSiriInteractionHistoryClass_block_invoke(uint64_t a1)
{
  Class result;

  BiomeLibraryLibrary();
  result = objc_getClass("BMSiriInteractionHistory");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getBMSiriInteractionHistoryClass_block_invoke_cold_1();
  getBMSiriInteractionHistoryClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMSiriMessageHistoryClass_block_invoke(uint64_t a1)
{
  Class result;

  BiomeLibraryLibrary();
  result = objc_getClass("BMSiriMessageHistory");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getBMSiriMessageHistoryClass_block_invoke_cold_1();
  getBMSiriMessageHistoryClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMSiriCallHistoryClass_block_invoke(uint64_t a1)
{
  Class result;

  BiomeLibraryLibrary();
  result = objc_getClass("BMSiriCallHistory");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getBMSiriCallHistoryClass_block_invoke_cold_1();
  getBMSiriCallHistoryClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMSiriAssistantSuggestionsClass_block_invoke(uint64_t a1)
{
  Class result;

  BiomeLibraryLibrary();
  result = objc_getClass("BMSiriAssistantSuggestions");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getBMSiriAssistantSuggestionsClass_block_invoke_cold_1();
  getBMSiriAssistantSuggestionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMSiriAudioHistoryClass_block_invoke(uint64_t a1)
{
  Class result;

  BiomeLibraryLibrary();
  result = objc_getClass("BMSiriAudioHistory");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getBMSiriAudioHistoryClass_block_invoke_cold_1();
  getBMSiriAudioHistoryClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMFrontBoardDisplayElementClass_block_invoke(uint64_t a1)
{
  Class result;

  BiomeLibraryLibrary();
  result = objc_getClass("BMFrontBoardDisplayElement");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getBMFrontBoardDisplayElementClass_block_invoke_cold_1();
  getBMFrontBoardDisplayElementClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMScreenTimeAppUsageClass_block_invoke(uint64_t a1)
{
  Class result;

  BiomeLibraryLibrary();
  result = objc_getClass("BMScreenTimeAppUsage");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getBMScreenTimeAppUsageClass_block_invoke_cold_1();
  getBMScreenTimeAppUsageClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMIntelligenceEngineInteractionClass_block_invoke(uint64_t a1)
{
  Class result;

  BiomeLibraryLibrary();
  result = objc_getClass("BMIntelligenceEngineInteraction");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getBMIntelligenceEngineInteractionClass_block_invoke_cold_1();
  getBMIntelligenceEngineInteractionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMAppLocationActivityClass_block_invoke(uint64_t a1)
{
  Class result;

  BiomeLibraryLibrary();
  result = objc_getClass("BMAppLocationActivity");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getBMAppLocationActivityClass_block_invoke_cold_1();
  getBMAppLocationActivityClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMDiscoverabilitySignalsClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!BiomeLibraryLibraryCore_frameworkLibrary_0)
  {
    v4 = xmmword_1E2648AD8;
    v5 = 0;
    BiomeLibraryLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!BiomeLibraryLibraryCore_frameworkLibrary_0)
    __getBMDiscoverabilitySignalsClass_block_invoke_cold_1(&v3);
  result = objc_getClass("BMDiscoverabilitySignals");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getBMDiscoverabilitySignalsClass_block_invoke_cold_2();
  getBMDiscoverabilitySignalsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL BMPBHomeKitClientMediaAccessoryControlEventReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  BMPBHomeKitClientBase *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(BMPBHomeKitClientBase);
        objc_storeStrong(a1 + 5, v17);
        if (PBReaderPlaceMark() && (BMPBHomeKitClientBaseReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_27;
        goto LABEL_42;
      case 2u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 4;
        goto LABEL_37;
      case 3u:
        v17 = objc_alloc_init(BMPBAccessoryState);
        objc_msgSend(a1, "addAccessoryState:", v17);
        if (PBReaderPlaceMark() && (BMPBAccessoryStateReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_27:
          PBReaderRecallMark();
LABEL_38:

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_42:

        return 0;
      case 4u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 1;
        goto LABEL_37;
      case 5u:
        PBReaderReadString();
        v17 = (BMPBHomeKitClientBase *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addZoneUniqueIdentifiers:", v17);
        goto LABEL_38;
      case 6u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
        goto LABEL_37;
      case 7u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 2;
        goto LABEL_37;
      case 8u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 7;
        goto LABEL_37;
      case 9u:
        PBReaderReadString();
        v17 = (BMPBHomeKitClientBase *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addZoneNames:", v17);
        goto LABEL_38;
      case 0xAu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 6;
LABEL_37:
        v17 = (BMPBHomeKitClientBase *)a1[v19];
        a1[v19] = (id)v18;
        goto LABEL_38;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_39;
    }
  }
}

uint64_t BMPBSocialHighlightFeatureReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v22 = 0;
        }
        *(_QWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v18;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL BMPBNamedHandleReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_25;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_25;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_25;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
LABEL_25:
          v19 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          goto LABEL_26;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_26:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBWorkoutEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        *(_BYTE *)(a1 + 8) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18D8D1E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D8D23B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _BiomeLibrary()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = getBiomeLibrarySymbolLoc_ptr;
  v7 = getBiomeLibrarySymbolLoc_ptr;
  if (!getBiomeLibrarySymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryLibrary_0();
    v0 = dlsym(v1, "BiomeLibrary");
    v5[3] = (uint64_t)v0;
    getBiomeLibrarySymbolLoc_ptr = v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
    _BiomeLibrary_cold_1();
  ((void (*)(uint64_t))v0)(v2);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_18D8D2454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_18D8D2D0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose(&STACK[0x230], 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

id getBMDeviceBootSessionClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getBMDeviceBootSessionClass_softClass;
  v7 = getBMDeviceBootSessionClass_softClass;
  if (!getBMDeviceBootSessionClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getBMDeviceBootSessionClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __getBMDeviceBootSessionClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8D2F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t BiomeLibraryLibrary_0()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!BiomeLibraryLibraryCore_frameworkLibrary_1)
  {
    v2 = xmmword_1E2648C38;
    v3 = 0;
    BiomeLibraryLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  if (!BiomeLibraryLibraryCore_frameworkLibrary_1)
    BiomeLibraryLibrary_cold_1_0(&v1);
  return BiomeLibraryLibraryCore_frameworkLibrary_1;
}

Class __getBMDeviceMetadataClass_block_invoke(uint64_t a1)
{
  Class result;

  BiomeLibraryLibrary_0();
  result = objc_getClass("BMDeviceMetadata");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getBMDeviceMetadataClass_block_invoke_cold_1();
  getBMDeviceMetadataClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMDeviceBootSessionClass_block_invoke(uint64_t a1)
{
  Class result;

  BiomeLibraryLibrary_0();
  result = objc_getClass("BMDeviceBootSession");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getBMDeviceBootSessionClass_block_invoke_cold_1();
  getBMDeviceBootSessionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18D8D3A08(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL BMPBContextualActionEventReadFrom(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_22;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_22;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
LABEL_22:
          v19 = *(void **)&a1[v18];
          *(_QWORD *)&a1[v18] = v17;
          goto LABEL_23;
        case 4u:
          PBReaderReadData();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          if (v19)
            objc_msgSend(a1, "addContent:", v19);
          goto LABEL_23;
        case 5u:
          PBReaderReadData();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          if (v19)
            objc_msgSend(a1, "addParameter:", v19);
LABEL_23:

          goto LABEL_24;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_24:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL BMPBEntityRelationshipEventReadFrom(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  BMPBEntity *v19;
  uint64_t v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
        goto LABEL_24;
      case 2u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
        goto LABEL_24;
      case 3u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 40;
LABEL_24:
        v19 = *(BMPBEntity **)&a1[v18];
        *(_QWORD *)&a1[v18] = v17;
        goto LABEL_33;
      case 4u:
        v19 = objc_alloc_init(BMPBEntity);
        v20 = 32;
        goto LABEL_27;
      case 5u:
        v19 = objc_alloc_init(BMPBEntity);
        v20 = 48;
LABEL_27:
        objc_storeStrong((id *)&a1[v20], v19);
        if (!PBReaderPlaceMark() || (BMPBEntityReadFrom((uint64_t)v19, a2) & 1) == 0)
          goto LABEL_37;
        goto LABEL_32;
      case 6u:
        v19 = objc_alloc_init(BMPBAttributeEntry);
        objc_msgSend(a1, "addAttributes:", v19);
        if (PBReaderPlaceMark() && BMPBAttributeEntryReadFrom((uint64_t)v19, a2))
        {
LABEL_32:
          PBReaderRecallMark();
LABEL_33:

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_37:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_34;
    }
  }
}

uint64_t BiomeLibraryInternalLibraryCore()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = BiomeLibraryInternalLibraryCore_frameworkLibrary;
  v6 = BiomeLibraryInternalLibraryCore_frameworkLibrary;
  if (!BiomeLibraryInternalLibraryCore_frameworkLibrary)
  {
    v7 = xmmword_1E2648CE8;
    v8 = *(_OWORD *)&off_1E2648CF8;
    v1 = _sl_dlopen();
    v4[3] = v1;
    BiomeLibraryInternalLibraryCore_frameworkLibrary = v1;
    v0 = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_18D8D86BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t BiomeLibraryInternalLibrary()
{
  uint64_t result;
  void *v1;

  v1 = 0;
  result = BiomeLibraryInternalLibraryCore();
  if (!result)
    BiomeLibraryInternalLibrary_cold_1(&v1);
  return result;
}

id BiomeLibraryNodeBridge()
{
  void (*v0)(void);
  void *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v0 = (void (*)(void))getBiomeLibraryNodeSymbolLoc_ptr;
  v15 = getBiomeLibraryNodeSymbolLoc_ptr;
  if (!getBiomeLibraryNodeSymbolLoc_ptr)
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __getBiomeLibraryNodeSymbolLoc_block_invoke;
    v11[3] = &unk_1E2647EA8;
    v11[4] = &v12;
    __getBiomeLibraryNodeSymbolLoc_block_invoke((uint64_t)v11);
    v0 = (void (*)(void))v13[3];
  }
  _Block_object_dispose(&v12, 8);
  if (!v0)
    BiomeLibraryNodeBridge_cold_1();
  v0();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v1)
  {
    __biome_log_for_category();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      BiomeLibraryNodeBridge_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);

  }
  return v1;
}

void sub_18D8D8800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id BiomeLibraryInternalNodeBridge()
{
  void (*BiomeLibraryInternalNodeSymbolLoc)(void);
  void *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!os_variant_has_internal_content())
    goto LABEL_12;
  if (!BiomeLibraryInternalLibraryCore()
    || !BiomeLibraryInternalLibraryCore()
    || !getBiomeLibraryInternalNodeSymbolLoc())
  {
    __biome_log_for_category();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      BiomeLibraryInternalNodeBridge_cold_1(v2, v10, v11, v12, v13, v14, v15, v16);
    goto LABEL_11;
  }
  BiomeLibraryInternalNodeSymbolLoc = (void (*)(void))getBiomeLibraryInternalNodeSymbolLoc();
  if (!BiomeLibraryInternalNodeSymbolLoc)
    BiomeLibraryInternalNodeBridge_cold_2();
  BiomeLibraryInternalNodeSymbolLoc();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v1)
  {
    __biome_log_for_category();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      BiomeLibraryInternalNodeBridge_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
LABEL_11:

LABEL_12:
    v1 = 0;
  }
  return v1;
}

uint64_t BiomeLibraryAndInternalLibraryNode()
{
  return objc_opt_class();
}

void *__getBiomeLibraryNodeSymbolLoc_block_invoke(uint64_t a1)
{
  void *result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!BiomeLibraryLibraryCore_frameworkLibrary_2)
  {
    v4 = xmmword_1E2648D08;
    v5 = 0;
    BiomeLibraryLibraryCore_frameworkLibrary_2 = _sl_dlopen();
  }
  if (!BiomeLibraryLibraryCore_frameworkLibrary_2)
    __getBiomeLibraryNodeSymbolLoc_block_invoke_cold_1(&v3);
  result = dlsym((void *)BiomeLibraryLibraryCore_frameworkLibrary_2, "BiomeLibraryNode");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getBiomeLibraryNodeSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void *getBiomeLibraryInternalNodeSymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getBiomeLibraryInternalNodeSymbolLoc_ptr;
  v6 = getBiomeLibraryInternalNodeSymbolLoc_ptr;
  if (!getBiomeLibraryInternalNodeSymbolLoc_ptr)
  {
    v1 = (void *)BiomeLibraryInternalLibrary();
    v0 = dlsym(v1, "BiomeLibraryInternalNode");
    v4[3] = (uint64_t)v0;
    getBiomeLibraryInternalNodeSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_18D8D8B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t BMPBSocialHighlightContactReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  void *v31;
  uint64_t result;
  BOOL v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 != 2)
      {
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          goto LABEL_47;
        }
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 20) |= 2u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_39;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_41;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_41:
        v33 = v20 != 0;
        v34 = 17;
        goto LABEL_46;
      }
      PBReaderReadString();
      v30 = objc_claimAutoreleasedReturnValue();
      v31 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v30;

LABEL_47:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v24 = 0;
    v25 = 0;
    v26 = 0;
    *(_BYTE *)(a1 + 20) |= 1u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v26 |= (unint64_t)(v29 & 0x7F) << v24;
      if ((v29 & 0x80) == 0)
        goto LABEL_43;
      v24 += 7;
      v14 = v25++ >= 9;
      if (v14)
      {
        v26 = 0;
        goto LABEL_45;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
    if (*(_BYTE *)(a2 + *v5))
      v26 = 0;
LABEL_45:
    v33 = v26 != 0;
    v34 = 16;
LABEL_46:
    *(_BYTE *)(a1 + v34) = v33;
    goto LABEL_47;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBPhotosKnowledgeGraphEnrichmentTopicReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v22 = 0;
        }
        *(_QWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v18;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBAccessoryStateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
          goto LABEL_31;
        case 2u:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 44) |= 2u;
          break;
        case 3u:
          PBReaderReadData();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 16;
          goto LABEL_31;
        case 4u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 32;
LABEL_31:
          v28 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        case 5u:
          *(_BYTE *)(a1 + 44) |= 1u;
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v31 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v31 = 0;
          }
          *(_QWORD *)(a1 + 8) = v31;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        v26 = v25 + 1;
        if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
          break;
        v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
        *(_QWORD *)(a2 + v24) = v26;
        v23 |= (unint64_t)(v27 & 0x7F) << v21;
        if ((v27 & 0x80) == 0)
          goto LABEL_36;
        v21 += 7;
        v15 = v22++ >= 9;
        if (v15)
        {
          LODWORD(v23) = 0;
          goto LABEL_38;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v23) = 0;
LABEL_38:
      *(_DWORD *)(a1 + 40) = v23;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBHomeKitClientBaseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  void *v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 64) |= 1u;
          v18 = *v3;
          v19 = *(_QWORD *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
            *(_QWORD *)(a2 + v18) = v19 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v34 = 8;
          goto LABEL_47;
        case 2u:
          *(_BYTE *)(a1 + 64) |= 2u;
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v34 = 16;
LABEL_47:
          *(_QWORD *)(a1 + v34) = v20;
          continue;
        case 3u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 48;
          goto LABEL_38;
        case 4u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 64) |= 4u;
          break;
        case 5u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 56;
          goto LABEL_38;
        case 6u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 24;
          goto LABEL_38;
        case 7u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 32;
LABEL_38:
          v33 = *(void **)(a1 + v25);
          *(_QWORD *)(a1 + v25) = v24;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        v31 = v30 + 1;
        if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v4))
          break;
        v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
        *(_QWORD *)(a2 + v29) = v31;
        v28 |= (unint64_t)(v32 & 0x7F) << v26;
        if ((v32 & 0x80) == 0)
          goto LABEL_40;
        v26 += 7;
        v15 = v27++ >= 9;
        if (v15)
        {
          LODWORD(v28) = 0;
          goto LABEL_42;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_40:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v28) = 0;
LABEL_42:
      *(_DWORD *)(a1 + 40) = v28;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL BMPBMindfulnessSessionEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
          {
            v24 = &OBJC_IVAR___BMPBMindfulnessSessionEvent__sessionType;
            goto LABEL_38;
          }
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            break;
          v17 += 7;
          v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            v24 = &OBJC_IVAR___BMPBMindfulnessSessionEvent__sessionType;
            goto LABEL_41;
          }
        }
        v24 = &OBJC_IVAR___BMPBMindfulnessSessionEvent__sessionType;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v25 = 0;
    v26 = 0;
    v19 = 0;
    *(_BYTE *)(a1 + 16) |= 2u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        v24 = &OBJC_IVAR___BMPBMindfulnessSessionEvent__stateType;
        goto LABEL_39;
      }
      v25 += 7;
      v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        v24 = &OBJC_IVAR___BMPBMindfulnessSessionEvent__stateType;
        goto LABEL_41;
      }
    }
    v24 = &OBJC_IVAR___BMPBMindfulnessSessionEvent__stateType;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBSemanticLocationEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_44;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_46;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_46:
          *(_BYTE *)(a1 + 24) = v19 != 0;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_50:
          v37 = 20;
          goto LABEL_55;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          break;
        case 4u:
          PBReaderReadString();
          v35 = objc_claimAutoreleasedReturnValue();
          v36 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v35;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v32 = *v3;
        v33 = *(_QWORD *)(a2 + v32);
        if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
          break;
        v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
        *(_QWORD *)(a2 + v32) = v33 + 1;
        v26 |= (unint64_t)(v34 & 0x7F) << v30;
        if ((v34 & 0x80) == 0)
          goto LABEL_52;
        v30 += 7;
        v14 = v31++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_54;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_52:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_54:
      v37 = 16;
LABEL_55:
      *(_DWORD *)(a1 + v37) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBReadMessageEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            v21 = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_33:
        *(_BYTE *)(a1 + 16) = v21 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBSocialHighlightFeedbackEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BMPBRankableSocialHighlight *v31;
  void *v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
        goto LABEL_36;
      case 2u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 48) |= 2u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              v15 = v22++ >= 9;
              if (v15)
              {
                LODWORD(v23) = 0;
                goto LABEL_40;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_40:
        *(_DWORD *)(a1 + 32) = v23;
        goto LABEL_43;
      case 3u:
        *(_BYTE *)(a1 + 48) |= 1u;
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v30 = 0;
        }
        *(_QWORD *)(a1 + 8) = v30;
        goto LABEL_43;
      case 4u:
        v31 = objc_alloc_init(BMPBRankableSocialHighlight);
        objc_storeStrong((id *)(a1 + 40), v31);
        if (PBReaderPlaceMark() && (BMPBRankableSocialHighlightReadFrom((uint64_t)v31, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_43:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 5u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
LABEL_36:
        v32 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_43;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_43;
    }
  }
}

BOOL BMPBNameComponentsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_28;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_28;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_28;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 56;
          goto LABEL_28;
        case 5u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_28;
        case 6u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 40;
          goto LABEL_28;
        case 7u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 48;
LABEL_28:
          v19 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          goto LABEL_29;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_29:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBSiriQueryEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  BMPBSiriQueryResult *v24;
  void *v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 56) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_QWORD *)(a1 + 8) = v20;
        goto LABEL_32;
      case 2u:
        PBReaderReadString();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = 32;
        goto LABEL_31;
      case 3u:
        v24 = objc_alloc_init(BMPBSiriQueryResult);
        objc_msgSend((id)a1, "addResults:", v24);
        if (PBReaderPlaceMark() && (BMPBSiriQueryResultReadFrom((uint64_t)v24, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_32:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 4u:
        PBReaderReadString();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = 48;
        goto LABEL_31;
      case 5u:
        PBReaderReadString();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = 16;
        goto LABEL_31;
      case 6u:
        PBReaderReadString();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = 24;
LABEL_31:
        v25 = *(void **)(a1 + v23);
        *(_QWORD *)(a1 + v23) = v22;

        goto LABEL_32;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_32;
    }
  }
}

BOOL BMPBTopicEntityReadFrom(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BMPBAttributeEntry *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
LABEL_26:
        v20 = *(BMPBAttributeEntry **)&a1[v19];
        *(_QWORD *)&a1[v19] = v18;
LABEL_27:

        goto LABEL_29;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v20 = objc_alloc_init(BMPBAttributeEntry);
    objc_msgSend(a1, "addAttributes:", v20);
    if (!PBReaderPlaceMark() || !BMPBAttributeEntryReadFrom((uint64_t)v20, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id BMSQLDatabaseError(uint64_t a1, sqlite3 *a2, const char *a3)
{
  id v6;
  void *v7;
  void *v8;
  const char *v9;
  const char *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v6 = objc_alloc(MEMORY[0x1E0CB37A0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v6, "initWithFormat:", CFSTR("BMSQLDatabase error (%@)"), v7);

  v9 = sqlite3_errmsg(a2);
  if (!v9)
  {
    if (!a3)
      goto LABEL_5;
    goto LABEL_4;
  }
  v10 = v9;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "appendFormat:", CFSTR(" %@."), v11);

  if (a3 && strcmp(v10, a3))
  {
LABEL_4:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "appendFormat:", CFSTR(" %@"), v12);

  }
LABEL_5:
  v13 = objc_alloc(MEMORY[0x1E0CB35C8]);
  v18 = *MEMORY[0x1E0CB2D50];
  v14 = (void *)objc_msgSend(v8, "copy");
  v19[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v13, "initWithDomain:code:userInfo:", CFSTR("BMSQLDatabaseErrorDomain"), (int)a1, v15);

  return v16;
}

void *bm_sqlite3_malloc(int a1)
{
  void *v2;
  void *v3;

  v2 = sqlite3_malloc(a1);
  v3 = v2;
  if (v2)
    bzero(v2, a1);
  return v3;
}

id BMSQLVirtualTables(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  __int128 v10;
  uint64_t i;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  BMStreamVirtualTable *v24;
  BMSQLSchema *v25;
  void *v26;
  id v27;
  void *v28;
  BMSQLSchema *v29;
  BMStreamVirtualTable *v30;
  BMStreamVirtualTable *v31;
  void *v32;
  __int128 v34;
  id v36;
  id v37;
  id obj;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[4];
  id v42;
  id v43;
  id v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint8_t buf[4];
  id v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v7 = a2;
  v37 = a3;
  v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v9 = v7;
  v40 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v45, v51, 16);
  if (v40)
  {
    v39 = *(_QWORD *)v46;
    *(_QWORD *)&v10 = 138412290;
    v34 = v10;
    v36 = v8;
    obj = v9;
    while (2)
    {
      for (i = 0; i != v40; ++i)
      {
        if (*(_QWORD *)v46 != v39)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * i);
        v13 = (void *)MEMORY[0x193FECFB4]();
        v14 = v12;
        objc_msgSend(&unk_1E26D3710, "objectForKeyedSubscript:", v14);
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = (void *)v15;
        if (v15)
          v17 = (void *)v15;
        else
          v17 = v14;
        v18 = v17;

        v44 = 0;
        objc_msgSend(v6, "streamWithIdentifier:error:", v18, &v44);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = v44;
        v21 = v20;
        if (v20)
        {
          objc_msgSend(v20, "domain");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          if (!objc_msgSend(v22, "isEqualToString:", CFSTR("BMLibraryErrorDomain")))
          {

LABEL_22:
            if (a4)
              *a4 = objc_retainAutorelease(v21);

            objc_autoreleasePoolPop(v13);
            v9 = obj;

            v32 = 0;
            goto LABEL_25;
          }
          v23 = objc_msgSend(v21, "code");

          if (v23 != 1)
            goto LABEL_22;
          __biome_log_for_category();
          v24 = (BMStreamVirtualTable *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(&v24->super, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v34;
            v50 = v18;
            _os_log_debug_impl(&dword_18D810000, &v24->super, OS_LOG_TYPE_DEBUG, "BMSQLDatabase failed to add virtual table for stream %@ because it is not in BiomeLibrary", buf, 0xCu);
          }
        }
        else
        {
          if (objc_msgSend(v14, "isEqualToString:", v18))
          {
            v24 = -[BMStreamVirtualTable initWithStream:useCase:]([BMStreamVirtualTable alloc], "initWithStream:useCase:", v19, v37);
          }
          else
          {
            v25 = [BMSQLSchema alloc];
            objc_msgSend(v19, "schema");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "columns");
            v27 = v6;
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            v29 = -[BMSQLSchema initWithTableName:columns:](v25, "initWithTableName:columns:", v14, v28);

            v30 = [BMStreamVirtualTable alloc];
            v41[0] = MEMORY[0x1E0C809B0];
            v41[1] = 3221225472;
            v41[2] = __BMSQLVirtualTables_block_invoke;
            v41[3] = &unk_1E2648ED8;
            v42 = v19;
            v43 = v37;
            v31 = v30;
            v6 = v27;
            v8 = v36;
            v24 = -[BMStreamVirtualTable initWithSchema:publisherBlock:](v31, "initWithSchema:publisherBlock:", v29, v41);

          }
          objc_msgSend(v8, "addObject:", v24, v34);
        }

        objc_autoreleasePoolPop(v13);
      }
      v9 = obj;
      v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v51, 16);
      if (v40)
        continue;
      break;
    }
  }

  v32 = (void *)objc_msgSend(v8, "copy");
LABEL_25:

  return v32;
}

void bmstream_vtab_destroy(id *a1)
{
  objc_storeWeak(a1, 0);
  sqlite3_free(a1);
}

uint64_t bmstream_authorizer(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const __CFString *v7;
  uint64_t v8;
  NSObject *v9;
  void *v11;
  void *v13;
  void *v14;
  void *v15;
  char v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  const __CFString *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v7 = CFSTR("DENY");
  v8 = 1;
  switch((int)a2)
  {
    case 4:
    case 6:
    case 13:
    case 15:
    case 21:
    case 22:
    case 24:
    case 25:
    case 31:
    case 33:
      goto LABEL_2;
    case 9:
    case 18:
      if (a3)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a3);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v11 = 0;
      }
      v16 = objc_msgSend(v11, "isEqualToString:", CFSTR("sqlite_temp_master"));

      if ((v16 & 1) != 0)
        goto LABEL_2;
      v8 = 1;
      goto LABEL_3;
    case 20:
      if (a3)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a3);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (a4)
        {
LABEL_10:
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a4);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_18;
        }
      }
      else
      {
        v13 = 0;
        if (a4)
          goto LABEL_10;
      }
      v14 = 0;
LABEL_18:
      if ((objc_msgSend(v13, "isEqualToString:", CFSTR("sqlite_master")) & 1) != 0
        || (objc_msgSend(v13, "isEqualToString:", CFSTR("json_each")) & 1) != 0)
      {
        v8 = 0;
      }
      else
      {
        objc_msgSend(a1, "privileges");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = v17;
        if (v17)
        {
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v19 = v17;
          v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v24, v36, 16);
          if (v20)
          {
            v21 = v20;
            v22 = *(_QWORD *)v25;
            while (2)
            {
              for (i = 0; i != v21; ++i)
              {
                if (*(_QWORD *)v25 != v22)
                  objc_enumerationMutation(v19);
                if ((objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * i), "checkTable:column:", v13, v14, (_QWORD)v24) & 1) != 0)
                {
                  v8 = 0;
                  goto LABEL_36;
                }
              }
              v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v24, v36, 16);
              if (v21)
                continue;
              break;
            }
            v8 = 1;
          }
LABEL_36:

        }
        else
        {
          v8 = 0;
        }

      }
LABEL_40:

      if ((_DWORD)v8)
      {
        v7 = CFSTR("DENY");
      }
      else
      {
LABEL_2:
        v8 = 0;
        v7 = CFSTR("ALLOW");
      }
LABEL_3:
      __biome_log_for_category();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138413058;
        v29 = v7;
        v30 = 2112;
        v31 = v15;
        v32 = 2080;
        v33 = a3;
        v34 = 2080;
        v35 = a4;
        _os_log_debug_impl(&dword_18D810000, v9, OS_LOG_TYPE_DEBUG, "bmstream_authorizer callback %@ for action %@, (%s, %s)", buf, 0x2Au);

      }
      return v8;
    case 23:
      if (a3)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a3);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v13 = 0;
      }
      if ((objc_msgSend(v13, "isEqualToString:", CFSTR("sqlite_master")) & 1) != 0)
        v8 = 0;
      else
        v8 = objc_msgSend(v13, "isEqualToString:", CFSTR("sqlite_temp_master")) ^ 1;
      goto LABEL_40;
    default:
      goto LABEL_3;
  }
}

void sub_18D8E6DBC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18D8E7294(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18D8E74E0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18D8E76E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18D8E7758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id BMSqliteValueToObjcValue(sqlite3_value *a1)
{
  int v2;
  void *v3;
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  const void *v7;
  _QWORD block[5];
  uint8_t buf[8];
  uint8_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = sqlite3_value_type(a1);
  switch(v2)
  {
    case 1:
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", sqlite3_value_int64(a1));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 2:
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", sqlite3_value_double(a1));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 3:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", sqlite3_value_text(a1));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 4:
      v7 = sqlite3_value_blob(a1);
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v7, sqlite3_value_bytes(a1));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 5:
      goto LABEL_8;
    default:
      v4 = v2;
      __biome_log_for_category();
      v5 = objc_claimAutoreleasedReturnValue();
      *(_QWORD *)buf = 0;
      v11 = buf;
      v12 = 0x2020000000;
      v13 = 16;
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __BMSqliteValueToObjcValue_block_invoke;
      block[3] = &unk_1E2647EA8;
      block[4] = buf;
      if (BMSqliteValueToObjcValue_onceToken != -1)
        dispatch_once(&BMSqliteValueToObjcValue_onceToken, block);
      v6 = v11[24];
      _Block_object_dispose(buf, 8);
      if (os_log_type_enabled(v5, v6))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v4;
        _os_log_impl(&dword_18D810000, v5, v6, "Invalid sqlite3 value type: %d", buf, 8u);
      }

LABEL_8:
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      break;
  }
  return v3;
}

void BMSqliteResultFromObjcValue(sqlite3_context *a1, void *a2)
{
  void *v3;
  int v4;
  double v5;
  id v6;
  const void *v7;
  int v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  if (v13
    && (objc_msgSend(MEMORY[0x1E0C99E38], "null"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v4 = objc_msgSend(v13, "isEqual:", v3),
        v3,
        !v4))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v13, "doubleValue");
      sqlite3_result_double(a1, v5);
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        sqlite3_result_text(a1, (const char *)objc_msgSend(objc_retainAutorelease(v13), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v6 = objc_retainAutorelease(v13);
          v7 = (const void *)objc_msgSend(v6, "bytes");
          v8 = objc_msgSend(v6, "length");

          sqlite3_result_blob(a1, v7, v8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
        }
        else
        {
          if ((objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector() & 1) != 0)
          {
            objc_msgSend(v13, "serialize");
            v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            sqlite3_result_blob(a1, (const void *)objc_msgSend(v9, "bytes"), objc_msgSend(v9, "length"), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
          }
          else
          {
            v10 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(v13, "className");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "stringWithFormat:", CFSTR("Objective-C class %@ is not a valid sqlite type"), v11);
            v12 = (void *)objc_claimAutoreleasedReturnValue();

            v9 = objc_retainAutorelease(v12);
            sqlite3_result_error(a1, (const char *)objc_msgSend(v9, "UTF8String"), -1);
          }

        }
      }
    }
  }
  else
  {
    sqlite3_result_null(a1);
  }

}

void bmstream_udf_callback(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  sqlite3_value *v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;

  v6 = (void *)MEMORY[0x193FECFB4]();
  v7 = (void *)objc_opt_new();
  if (a2 >= 1)
  {
    v8 = a2;
    do
    {
      v9 = *a3++;
      BMSqliteValueToObjcValue(v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "addObject:", v10);

      --v8;
    }
    while (v8);
  }
  v11 = (uint64_t *)sqlite3_user_data(a1);
  v13 = *v11;
  v12 = v11[1];
  v17 = 0;
  (*(void (**)(uint64_t, void *, uint64_t, id *))(v13 + 16))(v13, v7, v12, &v17);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v17;
  if (v15)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Error set by user-defined function: %@"), v15);
    v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    sqlite3_result_error(a1, (const char *)objc_msgSend(v16, "UTF8String"), -1);

  }
  else
  {
    BMSqliteResultFromObjcValue(a1, v14);
  }

  objc_autoreleasePoolPop(v6);
}

void bmstream_udf_destructor_callback(void **a1)
{
  void *v2;
  void *v3;

  if (a1)
  {
    v2 = *a1;
    *a1 = 0;

    v3 = a1[1];
    a1[1] = 0;

    sqlite3_free(a1);
  }
}

uint64_t bmstream_vtab_connect(sqlite3 *a1, id *a2, int a3, uint64_t a4, id **a5, char **a6)
{
  void *v10;
  NSObject *v11;
  id WeakRetained;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  id v19;
  uint64_t v20;
  id *v21;
  id *v22;
  void *v23;
  void *v24;
  void *v25;

  if (a3 == 3)
  {
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", *(_QWORD *)(a4 + 16));
    __biome_log_for_category();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      bmstream_vtab_connect_cold_2();

    WeakRetained = objc_loadWeakRetained(a2);
    objc_msgSend(WeakRetained, "virtualTableForName:", v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (v13)
    {
      objc_msgSend(v13, "schema");
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (v15)
      {
        objc_msgSend(v14, "schema");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "createTableSQL");
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        __biome_log_for_category();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          bmstream_vtab_connect_cold_1();

        v19 = objc_retainAutorelease(v17);
        v20 = sqlite3_declare_vtab(a1, (const char *)objc_msgSend(v19, "UTF8String"));
        if (!(_DWORD)v20)
        {
          v21 = (id *)bm_sqlite3_malloc(40);
          *a5 = v21;
          if (v21)
          {
            v22 = v21;
            objc_storeStrong(v21 + 3, v14);
            objc_storeWeak(v22 + 4, WeakRetained);
            v20 = 0;
          }
          else
          {
            v20 = 7;
          }
        }

        goto LABEL_22;
      }
      if (a6)
      {
        objc_msgSend(v14, "schema");
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        if (v23)
          goto LABEL_16;
        *a6 = sqlite3_mprintf("stream %s does not have a schema", (const char *)objc_msgSend(objc_retainAutorelease(v10), "UTF8String"));
      }
    }
    else if (a6)
    {
LABEL_16:
      objc_msgSend(0, "localizedDescription");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = v24;
      if (v24)
        *a6 = sqlite3_mprintf("%s", (const char *)objc_msgSend(objc_retainAutorelease(v24), "UTF8String"));

    }
    v20 = 1;
LABEL_22:

    return v20;
  }
  return 1;
}

uint64_t bmstream_vtab_bestindex(uint64_t a1, int *a2)
{
  unsigned int *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  BOOL v24;
  uint64_t v25;
  void *v26;
  int v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  unsigned int *v32;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  a2[10] = 0;
  v3 = (unsigned int *)(a2 + 10);
  v4 = *(id *)(a1 + 24);
  if (objc_msgSend(v4, "acceptPublisherOptions"))
  {
    objc_msgSend(v4, "schema");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "columns");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "count");

    if (v7)
    {
      v8 = 0;
      while (1)
      {
        objc_msgSend(v4, "schema");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "columns");
        v10 = objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)v10, "objectAtIndexedSubscript:", v8);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v11, "name");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v10) = objc_msgSend(v12, "isEqualToString:", CFSTR("eventTimestamp"));

        if ((v10 & 1) != 0)
          break;
        ++v8;
        objc_msgSend(v4, "schema");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "columns");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "count");

        if (v15 <= v8)
          goto LABEL_35;
      }
      if ((_DWORD)v8 != -1)
      {
        if (a2[4] == 1)
        {
          v16 = *((_QWORD *)a2 + 3);
          if (*(_DWORD *)v16 == (_DWORD)v8)
          {
            a2[15] = 1;
            if (*(_BYTE *)(v16 + 4))
              *v3 |= 4u;
          }
        }
        if (*a2 < 1)
          goto LABEL_32;
        v32 = v3;
        v17 = 0;
        v18 = 0;
        v38 = 0;
        v36 = -1;
        v37 = -1;
        do
        {
          v19 = (unsigned int *)(*((_QWORD *)a2 + 1) + v17);
          v20 = *v19;
          v21 = *((unsigned __int8 *)v19 + 4);
          v22 = *((unsigned __int8 *)v19 + 5);
          __biome_log_for_category();
          v23 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v18);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v20);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", v21);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", v22);
            v25 = objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138413058;
            v40 = v35;
            v41 = 2112;
            v42 = v34;
            v43 = 2112;
            v44 = v33;
            v45 = 2112;
            v46 = v25;
            v26 = (void *)v25;
            _os_log_debug_impl(&dword_18D810000, v23, OS_LOG_TYPE_DEBUG, "bmstream_vtab_bestindex constraint %@ - iColumn: %@; op: %@; usable: %@",
              buf,
              0x2Au);

          }
          v24 = (_DWORD)v20 != (_DWORD)v8 || (_DWORD)v22 == 0;
          if (!v24 && v21 <= 0x20)
          {
            if (((1 << v21) & 0x100000014) != 0)
            {
              ++HIDWORD(v38);
              v37 = v18;
            }
            else if (((1 << v21) & 0x10100) != 0)
            {
              LODWORD(v38) = v38 + 1;
              v36 = v18;
            }
          }
          ++v18;
          v17 += 12;
        }
        while (v18 < *a2);
        if (HIDWORD(v38) == 1)
        {
          v27 = a2[10];
          a2[10] = v27 | 1;
          v28 = *((_QWORD *)a2 + 4);
          *(_DWORD *)(v28 + 8 * v37) = 1;
          v3 = v32;
          if ((_DWORD)v38 == 1)
          {
            *v32 = v27 | 3;
            v29 = 2;
LABEL_31:
            *(_DWORD *)(v28 + 8 * v36) = v29;
          }
        }
        else
        {
          v3 = v32;
          if ((_DWORD)v38 == 1)
          {
            a2[10] |= 2u;
            v28 = *((_QWORD *)a2 + 4);
            v29 = 1;
            goto LABEL_31;
          }
        }
LABEL_32:
        __biome_log_for_category();
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          bmstream_vtab_bestindex_cold_1(v3, v30);

      }
    }
  }
LABEL_35:

  return 0;
}

uint64_t bmstream_vtab_disconnect(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;

  objc_storeWeak((id *)(a1 + 32), 0);
  sqlite3_free((void *)a1);
  return 0;
}

uint64_t bmstream_vtab_open(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  BMPublisherVirtualTableCursor *v6;
  void *v7;

  v4 = bm_sqlite3_malloc(16);
  if (!v4)
    return 7;
  v5 = v4;
  *a2 = v4;
  v6 = -[BMPublisherVirtualTableCursor initWithVirtualTable:]([BMPublisherVirtualTableCursor alloc], "initWithVirtualTable:", *(_QWORD *)(a1 + 24));
  v7 = (void *)v5[1];
  v5[1] = v6;

  return 0;
}

uint64_t bmstream_vtab_close(id *a1)
{
  id v2;

  objc_msgSend(a1[1], "close");
  v2 = a1[1];
  a1[1] = 0;

  sqlite3_free(a1);
  return 0;
}

uint64_t bmstream_vtab_filter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, sqlite3_value **a5)
{
  NSObject *v9;
  void *v10;
  char v11;
  void *v12;
  double v13;
  void *v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  void *v22;
  double v23;
  double v24;
  void *v25;
  double v26;
  double v27;
  uint64_t v28;
  void *v29;
  BMPublisherOptions *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  BMPublisherOptions *v34;
  NSObject *v35;

  __biome_log_for_category();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    bmstream_vtab_filter_cold_2(a2, a4, v9);

  objc_msgSend(*(id *)(a1 + 8), "virtualTable");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "acceptPublisherOptions");

  if ((v11 & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 8), "reset");
    return 0;
  }
  if ((a2 & 1) != 0)
  {
    v21 = sqlite3_value_double(*a5);
    objc_msgSend(MEMORY[0x1E0C99D68], "distantPast");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "timeIntervalSince1970");
    v24 = v23;

    if (v21 <= v24)
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "distantPast");
      v28 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "timeIntervalSince1970");
      v27 = v26;

      if (v21 >= v27)
        objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
      else
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", v21 + -0.000001);
      v28 = objc_claimAutoreleasedReturnValue();
    }
    v12 = (void *)v28;
    if ((a2 & 2) != 0)
      goto LABEL_6;
  }
  else
  {
    v12 = 0;
    if ((a2 & 2) != 0)
    {
LABEL_6:
      v13 = sqlite3_value_double(a5[(_DWORD)a4 != 1]);
      objc_msgSend(MEMORY[0x1E0C99D68], "distantPast");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "timeIntervalSince1970");
      v16 = v15;

      if (v13 <= v16)
      {
        objc_msgSend(MEMORY[0x1E0C99D68], "distantPast");
        v20 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "timeIntervalSince1970");
        v19 = v18;

        if (v13 >= v19)
          objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
        else
          objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", v13 + 0.000001);
        v20 = objc_claimAutoreleasedReturnValue();
      }
      v29 = (void *)v20;
      goto LABEL_22;
    }
  }
  v29 = 0;
LABEL_22:
  v30 = [BMPublisherOptions alloc];
  if ((a2 & 4) != 0)
  {
    v31 = v29;
    v32 = v12;
    v33 = 1;
  }
  else
  {
    v31 = v12;
    v32 = v29;
    v33 = 0;
  }
  v34 = -[BMPublisherOptions initWithStartDate:endDate:maxEvents:lastN:reversed:](v30, "initWithStartDate:endDate:maxEvents:lastN:reversed:", v31, v32, 0, 0, v33);
  __biome_log_for_category();
  v35 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    bmstream_vtab_filter_cold_1();

  objc_msgSend(*(id *)(a1 + 8), "resetWithOptions:", v34);
  return 0;
}

uint64_t bmstream_vtab_next(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x193FECFB4]();
  objc_msgSend(*(id *)(a1 + 8), "advance");
  objc_autoreleasePoolPop(v2);
  return 0;
}

BOOL bmstream_vtab_eof(uint64_t a1)
{
  void *v1;
  _BOOL8 v2;

  objc_msgSend(*(id *)(a1 + 8), "rowObject");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1 == 0;

  return v2;
}

uint64_t bmstream_vtab_column(id *a1, sqlite3_context *a2, uint64_t a3)
{
  void *v6;
  id *v7;
  void *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id WeakRetained;
  void *v16;
  void *v17;
  void (**v18)(_QWORD, _QWORD, _QWORD);
  void *v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  const char *v26;
  id v27;
  char *v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  const char *v34;
  id v35;
  char *v36;
  const char *v38;
  double v39;
  const char *v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  _QWORD v48[3];

  v48[2] = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x193FECFB4]();
  v7 = (id *)*a1;
  objc_msgSend(*((id *)*a1 + 3), "schema");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if ((a3 & 0x80000000) != 0 || !v8)
  {
    if (!v8)
    {
      v28 = sqlite3_mprintf("stream is missing a schema");
      goto LABEL_13;
    }
  }
  else
  {
    objc_msgSend(v8, "columns");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "count");

    if (v11 > a3)
    {
      objc_msgSend(a1[1], "rowObject");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "columns");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "objectAtIndexedSubscript:", a3);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      WeakRetained = objc_loadWeakRetained(v7 + 4);
      if (objc_msgSend(WeakRetained, "isColumnAccessLoggingEnabled"))
      {
        objc_msgSend(v14, "name");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "tableName");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(WeakRetained, "logColumnAccess:tableName:", v16, v17);

      }
      objc_msgSend(v14, "extractBlock");
      v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v47 = 0;
      ((void (**)(_QWORD, void *, id *))v18)[2](v18, v12, &v47);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = v47;

      if (v20)
      {
        objc_msgSend(v20, "localizedDescription");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = v21;
        if (v21)
          *((_QWORD *)*a1 + 2) = sqlite3_mprintf("%s", (const char *)objc_msgSend(objc_retainAutorelease(v21), "UTF8String"));

        v23 = 1;
        goto LABEL_25;
      }
      if (v19)
      {
        v46 = v12;
        v29 = v19;
        v30 = v14;
        if ((unint64_t)objc_msgSend(v30, "dataType") <= 6
          && (v31 = objc_retainAutorelease((id)objc_opt_class())) != 0)
        {
          v41 = v31;
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {

            v32 = objc_msgSend(v30, "dataType");
            v12 = v46;
            switch(v32)
            {
              case 0:
                sqlite3_result_int64(a2, objc_msgSend(v29, "longLongValue"));
                goto LABEL_24;
              case 1:
                objc_msgSend(v29, "doubleValue");
                goto LABEL_32;
              case 2:
              case 5:
                v33 = v29;
                sqlite3_result_text(a2, (const char *)objc_msgSend(v33, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
                goto LABEL_34;
              case 3:
                objc_msgSend(v29, "timeIntervalSince1970");
LABEL_32:
                sqlite3_result_double(a2, v39);
                break;
              case 4:
                v33 = v29;
                sqlite3_result_blob(a2, (const void *)objc_msgSend(v33, "bytes"), objc_msgSend(v33, "length"), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
LABEL_34:

                break;
              case 6:
                v48[0] = 0;
                v48[1] = 0;
                objc_msgSend(v29, "getUUIDBytes:", v48);
                sqlite3_result_blob(a2, v48, 16, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
                goto LABEL_24;
              default:
                v23 = 17;
                goto LABEL_22;
            }
            goto LABEL_24;
          }
          v44 = v30;
          objc_msgSend(v30, "name");
          v43 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v40 = (const char *)objc_msgSend(v43, "UTF8String");
          v45 = v29;
          objc_msgSend((id)objc_opt_class(), "description");
          v42 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v38 = (const char *)objc_msgSend(v42, "UTF8String");
          objc_msgSend(v41, "description");
          v35 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v36 = sqlite3_mprintf("value for column '%s' is type %s instead of expected type %s", v40, v38, (const char *)objc_msgSend(v35, "UTF8String"));
          v23 = 20;
        }
        else
        {
          v45 = v29;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v30, "dataType"));
          v43 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v43, "description");
          v42 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v34 = (const char *)objc_msgSend(v42, "UTF8String");
          v44 = v30;
          objc_msgSend(v30, "name");
          v35 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v36 = sqlite3_mprintf("unknown data type (%s) for column '%s'", v34, (const char *)objc_msgSend(v35, "UTF8String"));
          v23 = 1;
        }

        *((_QWORD *)*a1 + 2) = v36;
LABEL_22:
        v12 = v46;
        goto LABEL_25;
      }
      sqlite3_result_null(a2);
LABEL_24:
      v23 = 0;
LABEL_25:

      goto LABEL_26;
    }
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a3);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "description");
  v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v26 = (const char *)objc_msgSend(v25, "UTF8String");
  objc_msgSend(v9, "tableName");
  v27 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v28 = sqlite3_mprintf("unknown column %s for table %s", v26, (const char *)objc_msgSend(v27, "UTF8String"));

LABEL_13:
  *((_QWORD *)*a1 + 2) = v28;
  v23 = 17;
LABEL_26:

  objc_autoreleasePoolPop(v6);
  return v23;
}

uint64_t bmstream_vtab_rowid(uint64_t a1, _QWORD *a2)
{
  *a2 = objc_msgSend(*(id *)(a1 + 8), "rowID");
  return 0;
}

uint64_t BMPBSiriExecutionEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 56;
          goto LABEL_34;
        case 2u:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 68) |= 2u;
          break;
        case 3u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 48;
          goto LABEL_34;
        case 4u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 40;
          goto LABEL_34;
        case 5u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
          goto LABEL_34;
        case 6u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 16;
          goto LABEL_34;
        case 7u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 32;
LABEL_34:
          v28 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        case 8u:
          *(_BYTE *)(a1 + 68) |= 1u;
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v31 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v31 = 0;
          }
          *(_QWORD *)(a1 + 8) = v31;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        v26 = v25 + 1;
        if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
          break;
        v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
        *(_QWORD *)(a2 + v24) = v26;
        v23 |= (unint64_t)(v27 & 0x7F) << v21;
        if ((v27 & 0x80) == 0)
          goto LABEL_41;
        v21 += 7;
        v15 = v22++ >= 9;
        if (v15)
        {
          LODWORD(v23) = 0;
          goto LABEL_43;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v23) = 0;
LABEL_43:
      *(_DWORD *)(a1 + 64) = v23;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t typeWithBMPBMindfulnessSessionStateType(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;

  v1 = result;
  if (result < 5)
    return result;
  __biome_log_for_category();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    typeWithBMPBMindfulnessSessionStateType_cold_1(v1);

  return 0;
}

uint64_t BMPBNotesContentEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v16)
          v17 = 1;
        else
          v17 = (v10 & 7) == 4;
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 56;
              goto LABEL_30;
            case 2u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 32;
              goto LABEL_30;
            case 3u:
              *(_BYTE *)(a1 + 64) |= 1u;
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
                *(_QWORD *)(a2 + v21) = v22 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v23 = 0;
              }
              *(_QWORD *)(a1 + 8) = v23;
              goto LABEL_31;
            case 4u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 48;
              goto LABEL_30;
            case 5u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 16;
              goto LABEL_30;
            case 6u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 24;
              goto LABEL_30;
            case 7u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 40;
LABEL_30:
              v24 = *(void **)(a1 + v19);
              *(_QWORD *)(a1 + v19) = v18;

              goto LABEL_31;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_31:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id get_DKBiomeQueryClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DKBiomeQueryClass_softClass;
  v7 = get_DKBiomeQueryClass_softClass;
  if (!get_DKBiomeQueryClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DKBiomeQueryClass_block_invoke;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_DKBiomeQueryClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8EFDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_DKKnowledgeStoreClass_0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_DKKnowledgeStoreClass_softClass_1;
  v7 = get_DKKnowledgeStoreClass_softClass_1;
  if (!get_DKKnowledgeStoreClass_softClass_1)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_DKKnowledgeStoreClass_block_invoke_1;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_DKKnowledgeStoreClass_block_invoke_1((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8F0390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_CDClientContextClass_0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)get_CDClientContextClass_softClass_1;
  v7 = get_CDClientContextClass_softClass_1;
  if (!get_CDClientContextClass_softClass_1)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __get_CDClientContextClass_block_invoke_1;
    v3[3] = &unk_1E2647EA8;
    v3[4] = &v4;
    __get_CDClientContextClass_block_invoke_1((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18D8F0448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t BMComputePublisherInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE0DB060);
}

uint64_t BMComputePublishingInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE0E6040);
}

uint64_t BMPBParsecSearchEngagementEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int *v26;
  int *v27;
  BMPBParsecSearchEntity *v28;
  void *v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = &OBJC_IVAR___BMPBMessagesContentEvent__recipients;
  v8 = &OBJC_IVAR___BMPBMessagesContentEvent__recipients;
  v9 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = *v3;
      v14 = *(_QWORD *)(a2 + v13);
      v15 = v14 + 1;
      if (v14 == -1 || v15 > *(_QWORD *)(a2 + *v4))
        break;
      v16 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v14);
      *(_QWORD *)(a2 + v13) = v15;
      v12 |= (unint64_t)(v16 & 0x7F) << v10;
      if ((v16 & 0x80) == 0)
        goto LABEL_12;
      v10 += 7;
      if (v11++ >= 9)
      {
        v12 = 0;
        v18 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v18 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v12 = 0;
LABEL_14:
    if (v18 || (v12 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v12 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = v7[844];
        goto LABEL_34;
      case 2u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = v8[845];
        goto LABEL_34;
      case 3u:
        *(_BYTE *)(a1 + 80) |= 1u;
        v23 = *v3;
        v24 = *(_QWORD *)(a2 + v23);
        if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v25 = *(_QWORD *)(*(_QWORD *)(a2 + *v9) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v25 = 0;
        }
        *(_QWORD *)(a1 + 8) = v25;
        goto LABEL_35;
      case 4u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 72;
        goto LABEL_34;
      case 5u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 16;
        goto LABEL_34;
      case 6u:
        v26 = v8;
        v27 = v7;
        v28 = objc_alloc_init(BMPBParsecSearchEntity);
        objc_msgSend((id)a1, "addEntities:", v28);
        if (PBReaderPlaceMark() && (BMPBParsecSearchEntityReadFrom((uint64_t)v28, a2) & 1) != 0)
        {
          PBReaderRecallMark();

          v7 = v27;
          v8 = v26;
LABEL_35:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 7u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 64;
        goto LABEL_34;
      case 8u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 24;
        goto LABEL_34;
      case 9u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 48;
LABEL_34:
        v29 = *(void **)(a1 + v21);
        *(_QWORD *)(a1 + v21) = v20;

        goto LABEL_35;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_35;
    }
  }
}

BOOL BMPBAppClipLaunchEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 56;
          goto LABEL_29;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_29;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_29;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 64;
          goto LABEL_29;
        case 5u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_29;
        case 6u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_29;
        case 7u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 48;
          goto LABEL_29;
        case 8u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 40;
LABEL_29:
          v19 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          goto LABEL_30;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_30:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL BMPBAttributeEntryReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBNotificationEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  void *v40;
  int *v41;
  int *v42;
  void *v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = &OBJC_IVAR___BMPBMessagesContentEvent__recipients;
    v8 = &OBJC_IVAR___BMPBMessagesContentEvent__recipients;
    v9 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = *v3;
        v14 = *(_QWORD *)(a2 + v13);
        v15 = v14 + 1;
        if (v14 == -1 || v15 > *(_QWORD *)(a2 + *v4))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v14);
        *(_QWORD *)(a2 + v13) = v15;
        v12 |= (unint64_t)(v16 & 0x7F) << v10;
        if ((v16 & 0x80) == 0)
          goto LABEL_12;
        v10 += 7;
        v17 = v11++ >= 9;
        if (v17)
        {
          v12 = 0;
          v18 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v18 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v12 = 0;
LABEL_14:
      if (v18 || (v12 & 7) == 4)
        break;
      switch((v12 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v20 = objc_claimAutoreleasedReturnValue();
          v21 = v7[878];
          goto LABEL_48;
        case 2u:
          *(_BYTE *)(a1 + v8[879]) |= 1u;
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v9) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v24 = 0;
          }
          *(_QWORD *)(a1 + 8) = v24;
          continue;
        case 3u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + v8[879]) |= 4u;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v29);
              *(_QWORD *)(a2 + v28) = v30;
              v27 |= (unint64_t)(v31 & 0x7F) << v25;
              if (v31 < 0)
              {
                v25 += 7;
                v17 = v26++ >= 9;
                if (v17)
                {
                  LODWORD(v27) = 0;
                  goto LABEL_64;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v27) = 0;
LABEL_64:
          *(_DWORD *)(a1 + 112) = v27;
          continue;
        case 4u:
          PBReaderReadString();
          v20 = objc_claimAutoreleasedReturnValue();
          v21 = 32;
          goto LABEL_48;
        case 5u:
          PBReaderReadString();
          v20 = objc_claimAutoreleasedReturnValue();
          v21 = 64;
          goto LABEL_48;
        case 7u:
          PBReaderReadString();
          v20 = objc_claimAutoreleasedReturnValue();
          v21 = 56;
          goto LABEL_48;
        case 8u:
          PBReaderReadString();
          v20 = objc_claimAutoreleasedReturnValue();
          v21 = 96;
          goto LABEL_48;
        case 9u:
          PBReaderReadString();
          v20 = objc_claimAutoreleasedReturnValue();
          v21 = 80;
          goto LABEL_48;
        case 0xAu:
          PBReaderReadString();
          v20 = objc_claimAutoreleasedReturnValue();
          v21 = 24;
          goto LABEL_48;
        case 0xBu:
          v33 = 0;
          v34 = 0;
          v35 = 0;
          *(_BYTE *)(a1 + v8[879]) |= 2u;
          while (2)
          {
            v36 = *v3;
            v37 = *(_QWORD *)(a2 + v36);
            v38 = v37 + 1;
            if (v37 == -1 || v38 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v37);
              *(_QWORD *)(a2 + v36) = v38;
              v35 |= (unint64_t)(v39 & 0x7F) << v33;
              if (v39 < 0)
              {
                v33 += 7;
                v17 = v34++ >= 9;
                if (v17)
                {
                  v35 = 0;
                  goto LABEL_68;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v35 = 0;
LABEL_68:
          *(_QWORD *)(a1 + 16) = v35;
          continue;
        case 0xCu:
          PBReaderReadString();
          v20 = objc_claimAutoreleasedReturnValue();
          v21 = 88;
          goto LABEL_48;
        case 0xDu:
          PBReaderReadString();
          v20 = objc_claimAutoreleasedReturnValue();
          v21 = 40;
          goto LABEL_48;
        case 0xEu:
          PBReaderReadString();
          v20 = objc_claimAutoreleasedReturnValue();
          v21 = 72;
LABEL_48:
          v40 = *(void **)(a1 + v21);
          *(_QWORD *)(a1 + v21) = v20;

          continue;
        case 0xFu:
          v41 = v8;
          v42 = v7;
          PBReaderReadString();
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          if (v43)
            objc_msgSend((id)a1, "addContactIDs:", v43);

          v7 = v42;
          v8 = v41;
          continue;
        case 0x10u:
          v44 = 0;
          v45 = 0;
          v46 = 0;
          *(_BYTE *)(a1 + v8[879]) |= 8u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        v49 = v48 + 1;
        if (v48 == -1 || v49 > *(_QWORD *)(a2 + *v4))
          break;
        v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v48);
        *(_QWORD *)(a2 + v47) = v49;
        v46 |= (unint64_t)(v50 & 0x7F) << v44;
        if ((v50 & 0x80) == 0)
          goto LABEL_70;
        v44 += 7;
        v17 = v45++ >= 9;
        if (v17)
        {
          v46 = 0;
          goto LABEL_72;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_70:
      if (*(_BYTE *)(a2 + *v5))
        v46 = 0;
LABEL_72:
      *(_BYTE *)(a1 + 116) = v46 != 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBSoundDetectionEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = 16;
      }
      else
      {
        if ((_DWORD)v18 != 2)
        {
          if ((_DWORD)v18 == 1)
          {
            *(_BYTE *)(a1 + 32) |= 1u;
            v19 = *v3;
            v20 = *(_QWORD *)(a2 + v19);
            if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
            {
              v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
              *(_QWORD *)(a2 + v19) = v20 + 8;
            }
            else
            {
              *(_BYTE *)(a2 + *v5) = 1;
              v21 = 0;
            }
            *(_QWORD *)(a1 + 8) = v21;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = 24;
      }
      v24 = *(void **)(a1 + v23);
      *(_QWORD *)(a1 + v23) = v22;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBUserFocusComputedModeEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  void *v42;
  uint64_t v43;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_51;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 44) |= 8u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  v22 = 0;
                  goto LABEL_55;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v22 = 0;
LABEL_55:
          *(_BYTE *)(a1 + 40) = v22 != 0;
          continue;
        case 3u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 44) |= 2u;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  LODWORD(v28) = 0;
                  goto LABEL_59;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v28) = 0;
LABEL_59:
          v43 = 20;
          goto LABEL_68;
        case 4u:
          v32 = 0;
          v33 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 44) |= 1u;
          while (2)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v35 + 1;
              v28 |= (unint64_t)(v36 & 0x7F) << v32;
              if (v36 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  LODWORD(v28) = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v28) = 0;
LABEL_63:
          v43 = 16;
          goto LABEL_68;
        case 5u:
          v37 = 0;
          v38 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 44) |= 4u;
          break;
        case 6u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
LABEL_51:
          v42 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v39 = *v3;
        v40 = *(_QWORD *)(a2 + v39);
        if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
          break;
        v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
        *(_QWORD *)(a2 + v39) = v40 + 1;
        v28 |= (unint64_t)(v41 & 0x7F) << v37;
        if ((v41 & 0x80) == 0)
          goto LABEL_65;
        v37 += 7;
        v14 = v38++ >= 9;
        if (v14)
        {
          LODWORD(v28) = 0;
          goto LABEL_67;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_65:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v28) = 0;
LABEL_67:
      v43 = 24;
LABEL_68:
      *(_DWORD *)(a1 + v43) = v28;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMSleepModeChangeReasonFromReason(uint64_t a1)
{
  NSObject *v3;

  if (a1 < 0xA)
    return qword_18DC0BA58[(int)a1];
  __biome_log_for_category();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    BMSleepModeChangeReasonFromReason_cold_1(a1);

  return 0;
}

uint64_t typeFromBMPBSemanticLocationUserSpecificPlaceType(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;

  v1 = result;
  if (result < 5)
    return result;
  __biome_log_for_category();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    typeFromBMPBSemanticLocationUserSpecificPlaceType_cold_1(v1);

  return 0;
}

void sub_18D900DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18D901168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18D901490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_18D902434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_activity_scope_state_s a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18D902684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18D902A2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 48));
  _Unwind_Resume(a1);
}

void sub_18D902F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

Class __getFSFUtilsClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!FeatureStoreLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E26495A0;
    v5 = 0;
    FeatureStoreLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!FeatureStoreLibraryCore_frameworkLibrary)
    __getFSFUtilsClass_block_invoke_cold_1(&v3);
  result = objc_getClass("FSFUtils");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getFSFUtilsClass_block_invoke_cold_2();
  getFSFUtilsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getSAPathInfoClass_block_invoke(uint64_t a1)
{
  Class result;

  SpaceAttributionLibrary();
  result = objc_getClass("SAPathInfo");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSAPathInfoClass_block_invoke_cold_1();
  getSAPathInfoClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void SpaceAttributionLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!SpaceAttributionLibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E26495B8;
    v2 = 0;
    SpaceAttributionLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SpaceAttributionLibraryCore_frameworkLibrary)
    SpaceAttributionLibrary_cold_1(&v0);
}

Class __getSAPathManagerClass_block_invoke(uint64_t a1)
{
  Class result;

  SpaceAttributionLibrary();
  result = objc_getClass("SAPathManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSAPathManagerClass_block_invoke_cold_1();
  getSAPathManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18D903BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18D9047B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18D90553C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t BMPBDeviceMetadataEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_31;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_31;
        case 3u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 44) |= 1u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_42;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_42:
          *(_DWORD *)(a1 + 24) = v22;
          continue;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
LABEL_31:
          v26 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        case 5u:
          v27 = 0;
          v28 = 0;
          v29 = 0;
          *(_BYTE *)(a1 + 44) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v30 = *v3;
        v31 = *(_QWORD *)(a2 + v30);
        if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          break;
        v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
        *(_QWORD *)(a2 + v30) = v31 + 1;
        v29 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0)
          goto LABEL_44;
        v27 += 7;
        v14 = v28++ >= 9;
        if (v14)
        {
          v29 = 0;
          goto LABEL_46;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
      if (*(_BYTE *)(a2 + *v5))
        v29 = 0;
LABEL_46:
      *(_BYTE *)(a1 + 40) = v29 != 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBUserProofingEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  void *v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v16)
          v17 = 1;
        else
          v17 = (v10 & 7) == 4;
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 88) |= 1u;
              v18 = *v3;
              v19 = *(_QWORD *)(a2 + v18);
              if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
                *(_QWORD *)(a2 + v18) = v19 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v20 = 0;
              }
              *(_QWORD *)(a1 + 8) = v20;
              goto LABEL_34;
            case 2u:
              PBReaderReadString();
              v21 = objc_claimAutoreleasedReturnValue();
              v22 = 16;
              goto LABEL_33;
            case 3u:
              PBReaderReadString();
              v21 = objc_claimAutoreleasedReturnValue();
              v22 = 40;
              goto LABEL_33;
            case 4u:
              PBReaderReadString();
              v21 = objc_claimAutoreleasedReturnValue();
              v22 = 80;
              goto LABEL_33;
            case 5u:
              PBReaderReadString();
              v21 = objc_claimAutoreleasedReturnValue();
              v22 = 32;
              goto LABEL_33;
            case 6u:
              PBReaderReadString();
              v21 = objc_claimAutoreleasedReturnValue();
              v22 = 24;
              goto LABEL_33;
            case 7u:
              PBReaderReadString();
              v21 = objc_claimAutoreleasedReturnValue();
              v22 = 72;
              goto LABEL_33;
            case 8u:
              PBReaderReadString();
              v21 = objc_claimAutoreleasedReturnValue();
              v22 = 56;
              goto LABEL_33;
            case 9u:
              PBReaderReadString();
              v21 = objc_claimAutoreleasedReturnValue();
              v22 = 64;
              goto LABEL_33;
            case 0xAu:
              PBReaderReadString();
              v21 = objc_claimAutoreleasedReturnValue();
              v22 = 48;
LABEL_33:
              v24 = *(void **)(a1 + v22);
              *(_QWORD *)(a1 + v22) = v21;

              goto LABEL_34;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_34:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id bm_sha256(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_msgSend(a1, "dataUsingEncoding:", 4);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", 32);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  CC_SHA256((const void *)objc_msgSend(v1, "bytes"), objc_msgSend(v1, "length"), (unsigned __int8 *)objc_msgSend(v2, "mutableBytes"));
  objc_msgSend(v2, "base64EncodedStringWithOptions:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t BMPBMailContentEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BMPBMailContentHeaderEntry *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 240;
        goto LABEL_69;
      case 2u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 104;
        goto LABEL_69;
      case 3u:
        *(_WORD *)(a1 + 256) |= 1u;
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v23 = 0;
        }
        v94 = 8;
        goto LABEL_170;
      case 4u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 32;
        goto LABEL_69;
      case 5u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 176;
        goto LABEL_69;
      case 6u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 112;
        goto LABEL_69;
      case 7u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 224;
        goto LABEL_69;
      case 8u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 72;
        goto LABEL_69;
      case 9u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 56;
        goto LABEL_69;
      case 0xAu:
        v24 = objc_alloc_init(BMPBMailContentHeaderEntry);
        objc_msgSend((id)a1, "addHeaders:", v24);
        if (!PBReaderPlaceMark() || !BMPBMailContentHeaderEntryReadFrom((uint64_t)v24, a2))
          goto LABEL_173;
        goto LABEL_64;
      case 0xBu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 208;
        goto LABEL_69;
      case 0xCu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 144;
        goto LABEL_69;
      case 0xDu:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_WORD *)(a1 + 256) |= 0x20u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          v30 = v29 + 1;
          if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if (v31 < 0)
            {
              v25 += 7;
              v15 = v26++ >= 9;
              if (v15)
              {
                v27 = 0;
                goto LABEL_132;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_132:
        v92 = v27 != 0;
        v93 = 250;
        goto LABEL_165;
      case 0xEu:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 136;
        goto LABEL_69;
      case 0xFu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 216;
        goto LABEL_69;
      case 0x10u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 200;
        goto LABEL_69;
      case 0x11u:
        PBReaderReadString();
        v24 = (BMPBMailContentHeaderEntry *)objc_claimAutoreleasedReturnValue();
        if (v24)
          objc_msgSend((id)a1, "addAccountHandles:", v24);
        goto LABEL_65;
      case 0x12u:
        v24 = objc_alloc_init(BMPBNamedHandle);
        v32 = 192;
        goto LABEL_58;
      case 0x13u:
        PBReaderReadString();
        v24 = (BMPBMailContentHeaderEntry *)objc_claimAutoreleasedReturnValue();
        if (v24)
          objc_msgSend((id)a1, "addMailboxIdentifiers:", v24);
        goto LABEL_65;
      case 0x14u:
        v24 = objc_alloc_init(BMPBNamedHandle);
        v32 = 152;
        goto LABEL_58;
      case 0x15u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 40;
        goto LABEL_69;
      case 0x16u:
        v24 = objc_alloc_init(BMPBContentAttachment);
        objc_msgSend((id)a1, "addAttachments:", v24);
        if (!PBReaderPlaceMark() || !BMPBContentAttachmentReadFrom((uint64_t)v24, a2))
          goto LABEL_173;
        goto LABEL_64;
      case 0x17u:
        v24 = objc_alloc_init(BMPBNamedHandle);
        v32 = 120;
LABEL_58:
        objc_storeStrong((id *)(a1 + v32), v24);
        goto LABEL_62;
      case 0x18u:
        v24 = objc_alloc_init(BMPBNamedHandle);
        objc_msgSend((id)a1, "addToHandles:", v24);
        goto LABEL_62;
      case 0x19u:
        v24 = objc_alloc_init(BMPBNamedHandle);
        objc_msgSend((id)a1, "addCcHandles:", v24);
        goto LABEL_62;
      case 0x1Au:
        v24 = objc_alloc_init(BMPBNamedHandle);
        objc_msgSend((id)a1, "addBccHandles:", v24);
LABEL_62:
        if (PBReaderPlaceMark() && BMPBNamedHandleReadFrom((uint64_t)v24, a2))
        {
LABEL_64:
          PBReaderRecallMark();
LABEL_65:

LABEL_171:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_173:

        return 0;
      case 0x1Bu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 88;
        goto LABEL_69;
      case 0x1Cu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 184;
        goto LABEL_69;
      case 0x1Du:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 96;
LABEL_69:
        v33 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_171;
      case 0x1Eu:
        *(_WORD *)(a1 + 256) |= 2u;
        v34 = *v3;
        v35 = *(_QWORD *)(a2 + v34);
        if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v35);
          *(_QWORD *)(a2 + v34) = v35 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v23 = 0;
        }
        v94 = 16;
LABEL_170:
        *(_QWORD *)(a1 + v94) = v23;
        goto LABEL_171;
      case 0x1Fu:
        v36 = 0;
        v37 = 0;
        v38 = 0;
        *(_WORD *)(a1 + 256) |= 4u;
        while (2)
        {
          v39 = *v3;
          v40 = *(_QWORD *)(a2 + v39);
          v41 = v40 + 1;
          if (v40 == -1 || v41 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
            *(_QWORD *)(a2 + v39) = v41;
            v38 |= (unint64_t)(v42 & 0x7F) << v36;
            if (v42 < 0)
            {
              v36 += 7;
              v15 = v37++ >= 9;
              if (v15)
              {
                LODWORD(v38) = 0;
                goto LABEL_136;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v38) = 0;
LABEL_136:
        *(_DWORD *)(a1 + 160) = v38;
        goto LABEL_171;
      case 0x20u:
        v43 = 0;
        v44 = 0;
        v45 = 0;
        *(_WORD *)(a1 + 256) |= 0x80u;
        while (2)
        {
          v46 = *v3;
          v47 = *(_QWORD *)(a2 + v46);
          v48 = v47 + 1;
          if (v47 == -1 || v48 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
            *(_QWORD *)(a2 + v46) = v48;
            v45 |= (unint64_t)(v49 & 0x7F) << v43;
            if (v49 < 0)
            {
              v43 += 7;
              v15 = v44++ >= 9;
              if (v15)
              {
                v45 = 0;
                goto LABEL_140;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v45 = 0;
LABEL_140:
        v92 = v45 != 0;
        v93 = 252;
        goto LABEL_165;
      case 0x21u:
        v50 = 0;
        v51 = 0;
        v52 = 0;
        *(_WORD *)(a1 + 256) |= 0x200u;
        while (2)
        {
          v53 = *v3;
          v54 = *(_QWORD *)(a2 + v53);
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v54);
            *(_QWORD *)(a2 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if (v56 < 0)
            {
              v50 += 7;
              v15 = v51++ >= 9;
              if (v15)
              {
                v52 = 0;
                goto LABEL_144;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v52 = 0;
LABEL_144:
        v92 = v52 != 0;
        v93 = 254;
        goto LABEL_165;
      case 0x22u:
        v57 = 0;
        v58 = 0;
        v59 = 0;
        *(_WORD *)(a1 + 256) |= 0x10u;
        while (2)
        {
          v60 = *v3;
          v61 = *(_QWORD *)(a2 + v60);
          v62 = v61 + 1;
          if (v61 == -1 || v62 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v63 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v61);
            *(_QWORD *)(a2 + v60) = v62;
            v59 |= (unint64_t)(v63 & 0x7F) << v57;
            if (v63 < 0)
            {
              v57 += 7;
              v15 = v58++ >= 9;
              if (v15)
              {
                v59 = 0;
                goto LABEL_148;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v59 = 0;
LABEL_148:
        v92 = v59 != 0;
        v93 = 249;
        goto LABEL_165;
      case 0x23u:
        v64 = 0;
        v65 = 0;
        v66 = 0;
        *(_WORD *)(a1 + 256) |= 0x40u;
        while (2)
        {
          v67 = *v3;
          v68 = *(_QWORD *)(a2 + v67);
          v69 = v68 + 1;
          if (v68 == -1 || v69 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v68);
            *(_QWORD *)(a2 + v67) = v69;
            v66 |= (unint64_t)(v70 & 0x7F) << v64;
            if (v70 < 0)
            {
              v64 += 7;
              v15 = v65++ >= 9;
              if (v15)
              {
                v66 = 0;
                goto LABEL_152;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v66 = 0;
LABEL_152:
        v92 = v66 != 0;
        v93 = 251;
        goto LABEL_165;
      case 0x24u:
        v71 = 0;
        v72 = 0;
        v73 = 0;
        *(_WORD *)(a1 + 256) |= 0x100u;
        while (2)
        {
          v74 = *v3;
          v75 = *(_QWORD *)(a2 + v74);
          v76 = v75 + 1;
          if (v75 == -1 || v76 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v75);
            *(_QWORD *)(a2 + v74) = v76;
            v73 |= (unint64_t)(v77 & 0x7F) << v71;
            if (v77 < 0)
            {
              v71 += 7;
              v15 = v72++ >= 9;
              if (v15)
              {
                v73 = 0;
                goto LABEL_156;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v73 = 0;
LABEL_156:
        v92 = v73 != 0;
        v93 = 253;
        goto LABEL_165;
      case 0x25u:
        v78 = 0;
        v79 = 0;
        v80 = 0;
        *(_WORD *)(a1 + 256) |= 0x400u;
        while (2)
        {
          v81 = *v3;
          v82 = *(_QWORD *)(a2 + v81);
          v83 = v82 + 1;
          if (v82 == -1 || v83 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v84 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v82);
            *(_QWORD *)(a2 + v81) = v83;
            v80 |= (unint64_t)(v84 & 0x7F) << v78;
            if (v84 < 0)
            {
              v78 += 7;
              v15 = v79++ >= 9;
              if (v15)
              {
                v80 = 0;
                goto LABEL_160;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v80 = 0;
LABEL_160:
        v92 = v80 != 0;
        v93 = 255;
        goto LABEL_165;
      case 0x26u:
        v85 = 0;
        v86 = 0;
        v87 = 0;
        *(_WORD *)(a1 + 256) |= 8u;
        while (2)
        {
          v88 = *v3;
          v89 = *(_QWORD *)(a2 + v88);
          v90 = v89 + 1;
          if (v89 == -1 || v90 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v91 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v89);
            *(_QWORD *)(a2 + v88) = v90;
            v87 |= (unint64_t)(v91 & 0x7F) << v85;
            if (v91 < 0)
            {
              v85 += 7;
              v15 = v86++ >= 9;
              if (v15)
              {
                v87 = 0;
                goto LABEL_164;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v87 = 0;
LABEL_164:
        v92 = v87 != 0;
        v93 = 248;
LABEL_165:
        *(_BYTE *)(a1 + v93) = v92;
        goto LABEL_171;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_171;
    }
  }
}

BOOL BMPBHomeKitClientActionSetEventReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  BMPBHomeKitClientBase *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = objc_alloc_init(BMPBHomeKitClientBase);
          objc_storeStrong(a1 + 5, v17);
          if (PBReaderPlaceMark() && (BMPBHomeKitClientBaseReadFrom((uint64_t)v17, a2) & 1) != 0)
          {
            PBReaderRecallMark();
            goto LABEL_31;
          }

          return 0;
        case 2u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 3;
          goto LABEL_30;
        case 3u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 2;
          goto LABEL_30;
        case 4u:
          PBReaderReadString();
          v17 = (BMPBHomeKitClientBase *)objc_claimAutoreleasedReturnValue();
          if (v17)
            objc_msgSend(a1, "addAssociatedAccessoryUniqueIdentifiers:", v17);
          goto LABEL_31;
        case 5u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 1;
          goto LABEL_30;
        case 6u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 6;
LABEL_30:
          v17 = (BMPBHomeKitClientBase *)a1[v19];
          a1[v19] = (id)v18;
LABEL_31:

          goto LABEL_32;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_32:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBFindMyLocationChangeEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 32;
          goto LABEL_43;
        case 2u:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 56) |= 8u;
          while (2)
          {
            v24 = *v3;
            v25 = *(_QWORD *)(a2 + v24);
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
              *(_QWORD *)(a2 + v24) = v26;
              v23 |= (unint64_t)(v27 & 0x7F) << v21;
              if (v27 < 0)
              {
                v21 += 7;
                v15 = v22++ >= 9;
                if (v15)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_47;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v23) = 0;
LABEL_47:
          v40 = 40;
          goto LABEL_52;
        case 3u:
          v28 = 0;
          v29 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 56) |= 4u;
          break;
        case 4u:
          *(_BYTE *)(a1 + 56) |= 1u;
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v36 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v36 = 0;
          }
          v41 = 8;
          goto LABEL_57;
        case 5u:
          *(_BYTE *)(a1 + 56) |= 2u;
          v37 = *v3;
          v38 = *(_QWORD *)(a2 + v37);
          if (v38 <= 0xFFFFFFFFFFFFFFF7 && v38 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v36 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v36 = 0;
          }
          v41 = 16;
LABEL_57:
          *(_QWORD *)(a1 + v41) = v36;
          continue;
        case 6u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 48;
LABEL_43:
          v39 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v30 = *v3;
        v31 = *(_QWORD *)(a2 + v30);
        v32 = v31 + 1;
        if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v4))
          break;
        v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
        *(_QWORD *)(a2 + v30) = v32;
        v23 |= (unint64_t)(v33 & 0x7F) << v28;
        if ((v33 & 0x80) == 0)
          goto LABEL_49;
        v28 += 7;
        v15 = v29++ >= 9;
        if (v15)
        {
          LODWORD(v23) = 0;
          goto LABEL_51;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v23) = 0;
LABEL_51:
      v40 = 24;
LABEL_52:
      *(_DWORD *)(a1 + v40) = v23;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBCommunicationSafetyResultEventReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  int *v45;
  int *v46;
  void *v47;
  uint64_t v48;
  void *v49;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = &OBJC_IVAR___BMAskToBuyEvent__itemAgeRating;
    v8 = &OBJC_IVAR___BMAskToBuyEvent__itemAgeRating;
    v9 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = *v3;
        v14 = *(_QWORD *)(a2 + v13);
        v15 = v14 + 1;
        if (v14 == -1 || v15 > *(_QWORD *)(a2 + *v4))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v14);
        *(_QWORD *)(a2 + v13) = v15;
        v12 |= (unint64_t)(v16 & 0x7F) << v10;
        if ((v16 & 0x80) == 0)
          goto LABEL_12;
        v10 += 7;
        v17 = v11++ >= 9;
        if (v17)
        {
          v12 = 0;
          v18 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v18 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v12 = 0;
LABEL_14:
      if (v18 || (v12 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v12 >> 3))
      {
        case 1u:
          a1[v7[115]] |= 1u;
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v9) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v22 = 0;
          }
          *(_QWORD *)&a1[v8[116]] = v22;
          goto LABEL_74;
        case 2u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 16;
          goto LABEL_73;
        case 3u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 80;
          goto LABEL_73;
        case 4u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          a1[v7[115]] |= 4u;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v30);
              *(_QWORD *)(a2 + v29) = v31;
              v28 |= (unint64_t)(v32 & 0x7F) << v26;
              if (v32 < 0)
              {
                v26 += 7;
                v17 = v27++ >= 9;
                if (v17)
                {
                  LODWORD(v28) = 0;
                  goto LABEL_62;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v28) = 0;
LABEL_62:
          v48 = 28;
          goto LABEL_71;
        case 5u:
          v33 = 0;
          v34 = 0;
          v28 = 0;
          a1[v7[115]] |= 8u;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            v37 = v36 + 1;
            if (v36 == -1 || v37 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v36);
              *(_QWORD *)(a2 + v35) = v37;
              v28 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v17 = v34++ >= 9;
                if (v17)
                {
                  LODWORD(v28) = 0;
                  goto LABEL_66;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v28) = 0;
LABEL_66:
          v48 = 32;
          goto LABEL_71;
        case 6u:
          v39 = 0;
          v40 = 0;
          v28 = 0;
          a1[v7[115]] |= 2u;
          while (2)
          {
            v41 = *v3;
            v42 = *(_QWORD *)(a2 + v41);
            v43 = v42 + 1;
            if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v42);
              *(_QWORD *)(a2 + v41) = v43;
              v28 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                v17 = v40++ >= 9;
                if (v17)
                {
                  LODWORD(v28) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v28) = 0;
LABEL_70:
          v48 = 24;
LABEL_71:
          *(_DWORD *)&a1[v48] = v28;
          goto LABEL_74;
        case 7u:
          v45 = v7;
          v46 = v8;
          PBReaderReadString();
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          if (v47)
            objc_msgSend(a1, "addContactHandles:", v47);

          v8 = v46;
          v7 = v45;
          goto LABEL_74;
        case 8u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 48;
          goto LABEL_73;
        case 9u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 64;
          goto LABEL_73;
        case 0xAu:
          if (a1[116])
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              return 0;
          }
          else
          {
            PBReaderReadData();
            v24 = objc_claimAutoreleasedReturnValue();
            v25 = 88;
LABEL_73:
            v49 = *(void **)&a1[v25];
            *(_QWORD *)&a1[v25] = v24;

          }
LABEL_74:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
        case 0xBu:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 104;
          goto LABEL_73;
        case 0xCu:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 96;
          goto LABEL_73;
        case 0xDu:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 56;
          goto LABEL_73;
        case 0xEu:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 72;
          goto LABEL_73;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          goto LABEL_74;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBLastAlarmEventTypeFromType(unint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  NSObject *v4;

  v2 = a1;
  if (a1 >= 0xB)
  {
    __biome_log_for_category();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      BMPBLastAlarmEventTypeFromType_cold_1(v2);

    if (a2)
      *a2 = 1;
    return 0xFFFFFFFFLL;
  }
  return v2;
}

uint64_t BMPBAlarmEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  void *v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_44;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_46;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_46:
          *(_BYTE *)(a1 + 24) = v19 != 0;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_50:
          v37 = 16;
          goto LABEL_55;
        case 3u:
          PBReaderReadString();
          v30 = objc_claimAutoreleasedReturnValue();
          v31 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v30;

          continue;
        case 4u:
          v32 = 0;
          v33 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v34 = *v3;
        v35 = *(_QWORD *)(a2 + v34);
        if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          break;
        v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
        *(_QWORD *)(a2 + v34) = v35 + 1;
        v26 |= (unint64_t)(v36 & 0x7F) << v32;
        if ((v36 & 0x80) == 0)
          goto LABEL_52;
        v32 += 7;
        v14 = v33++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_54;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_52:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_54:
      v37 = 20;
LABEL_55:
      *(_DWORD *)(a1 + v37) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMComputeSourceServerInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE0E5DB8);
}

void sub_18D91C55C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18D91C780(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 80));
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_18D91CD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18D91D294(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18D91D5DC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18D91D900(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t BMPBNowPlayingOutputDeviceReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t result;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v24;

      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v26 = 0;
          v27 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (1)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
              break;
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v20 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              goto LABEL_43;
            v26 += 7;
            v14 = v27++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_45;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_45:
          v32 = 16;
        }
        else
        {
          if ((_DWORD)v17 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
              break;
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0)
              goto LABEL_39;
            v18 += 7;
            v14 = v19++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_41;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_41:
          v32 = 20;
        }
        *(_DWORD *)(a1 + v32) = v20;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBParsecSearchTopicReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v22 = 0;
        }
        *(_DWORD *)(a1 + 16) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v18;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t BMPBPhotosKnowledgeGraphEnrichmentEntityReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 32;
          goto LABEL_26;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v23 = 0;
          }
          *(_QWORD *)(a1 + 8) = v23;
          continue;
        case 3u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
LABEL_26:
          v24 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        case 4u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        v30 = v29 + 1;
        if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
          break;
        v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
        *(_QWORD *)(a2 + v28) = v30;
        v27 |= (unint64_t)(v31 & 0x7F) << v25;
        if ((v31 & 0x80) == 0)
          goto LABEL_35;
        v25 += 7;
        v15 = v26++ >= 9;
        if (v15)
        {
          LODWORD(v27) = 0;
          goto LABEL_37;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v27) = 0;
LABEL_37:
      *(_DWORD *)(a1 + 16) = v27;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t *initializeBufferWithCopyOfBuffer for MaterializedViewPhysicalPlan(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  ValueMetadata *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  ValueMetadata *v14;
  void (*v15)(char *, char *, ValueMetadata *);
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  char *v25;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for MaterializedView();
    (*((void (**)(uint64_t *, uint64_t *, ValueMetadata *))v7[-1].Description + 2))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    v11 = (int *)type metadata accessor for SelectCorePhysicalPlan(0);
    v12 = v11[5];
    v25 = &v9[v12];
    v13 = &v10[v12];
    v14 = type metadata accessor for SelectCore();
    v15 = (void (*)(char *, char *, ValueMetadata *))*((_QWORD *)v14[-1].Description + 2);
    swift_bridgeObjectRetain();
    v15(v25, v13, v14);
    v16 = v11[6];
    v17 = *(void **)&v10[v16];
    *(_QWORD *)&v9[v16] = v17;
    *(_QWORD *)&v9[v11[7]] = *(_QWORD *)&v10[v11[7]];
    *(_QWORD *)&v9[v11[8]] = *(_QWORD *)&v10[v11[8]];
    v18 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for MaterializedViewPhysicalPlan(uint64_t a1, uint64_t a2, int *a3)
{
  ValueMetadata *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ValueMetadata *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v6 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v6[-1].Description + 3))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = (int *)type metadata accessor for SelectCorePhysicalPlan(0);
  v11 = v10[5];
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = type metadata accessor for SelectCore();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v14[-1].Description + 3))(v12, v13, v14);
  v15 = v10[6];
  v16 = *(void **)(v9 + v15);
  v17 = *(void **)(v8 + v15);
  *(_QWORD *)(v8 + v15) = v16;
  v18 = v16;

  *(_QWORD *)(v8 + v10[7]) = *(_QWORD *)(v9 + v10[7]);
  *(_QWORD *)(v8 + v10[8]) = *(_QWORD *)(v9 + v10[8]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  v19 = a3[7];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for MaterializedViewPhysicalPlan(uint64_t a1, uint64_t a2, int *a3)
{
  ValueMetadata *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ValueMetadata *v14;
  uint64_t v15;

  v6 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v6[-1].Description + 4))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for SelectCorePhysicalPlan(0);
  v11 = v10[5];
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = type metadata accessor for SelectCore();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v14[-1].Description + 4))(v12, v13, v14);
  *(_QWORD *)(v8 + v10[6]) = *(_QWORD *)(v9 + v10[6]);
  *(_QWORD *)(v8 + v10[7]) = *(_QWORD *)(v9 + v10[7]);
  *(_QWORD *)(v8 + v10[8]) = *(_QWORD *)(v9 + v10[8]);
  v15 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  return a1;
}

uint64_t assignWithTake for MaterializedViewPhysicalPlan(uint64_t a1, uint64_t a2, int *a3)
{
  ValueMetadata *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ValueMetadata *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v6[-1].Description + 5))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease();
  v10 = (int *)type metadata accessor for SelectCorePhysicalPlan(0);
  v11 = v10[5];
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = type metadata accessor for SelectCore();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v14[-1].Description + 5))(v12, v13, v14);
  v15 = v10[6];
  v16 = *(void **)(v8 + v15);
  *(_QWORD *)(v8 + v15) = *(_QWORD *)(v9 + v15);

  *(_QWORD *)(v8 + v10[7]) = *(_QWORD *)(v9 + v10[7]);
  *(_QWORD *)(v8 + v10[8]) = *(_QWORD *)(v9 + v10[8]);
  swift_release();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_release();
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  return a1;
}

void sub_18D920E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  ValueMetadata *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = OUTLINED_FUNCTION_125();
  if (*((_DWORD *)v6[-1].Description + 21) == (_DWORD)v3)
  {
    v7 = (uint64_t)v6;
    v8 = v4;
LABEL_5:
    OUTLINED_FUNCTION_67_0(v8, v3, v7);
    return;
  }
  v9 = type metadata accessor for SelectCorePhysicalPlan(0);
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v9;
    v8 = v4 + *(int *)(a3 + 20);
    goto LABEL_5;
  }
  OUTLINED_FUNCTION_165(*(_QWORD *)(v4 + *(int *)(a3 + 24)));
  OUTLINED_FUNCTION_1_6();
}

void sub_18D920F14(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  ValueMetadata *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = OUTLINED_FUNCTION_125();
  if (*((_DWORD *)v8[-1].Description + 21) == a3)
  {
    v9 = (uint64_t)v8;
    v10 = v5;
LABEL_5:
    OUTLINED_FUNCTION_68(v10, v4, v4, v9);
    return;
  }
  v11 = type metadata accessor for SelectCorePhysicalPlan(0);
  if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
  {
    v9 = v11;
    v10 = v5 + *(int *)(a4 + 20);
    goto LABEL_5;
  }
  *(_QWORD *)(v5 + *(int *)(a4 + 24)) = (v4 - 1);
  OUTLINED_FUNCTION_1_6();
}

uint64_t type metadata completion function for MaterializedViewPhysicalPlan()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = (uint64_t)type metadata accessor for MaterializedView();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for SelectCorePhysicalPlan(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SelectCorePhysicalPlan(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  ValueMetadata *v11;
  void (*v12)(char *, char *, ValueMetadata *);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SelectCore();
    v12 = (void (*)(char *, char *, ValueMetadata *))*((_QWORD *)v11[-1].Description + 2);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = *(void **)((char *)a2 + v13);
    *(uint64_t *)((char *)v7 + v13) = (uint64_t)v15;
    *(uint64_t *)((char *)v7 + v14) = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)v7 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    v16 = v15;
  }
  swift_retain();
  return v7;
}

uint64_t destroy for SelectCorePhysicalPlan(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  ValueMetadata *v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for SelectCore();
  (*((void (**)(uint64_t, ValueMetadata *))v5[-1].Description + 1))(v4, v5);

  return swift_release();
}

_QWORD *initializeWithCopy for SelectCorePhysicalPlan(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  ValueMetadata *v9;
  void (*v10)(char *, char *, ValueMetadata *);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SelectCore();
  v10 = (void (*)(char *, char *, ValueMetadata *))*((_QWORD *)v9[-1].Description + 2);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = a3[7];
  v13 = *(void **)((char *)a2 + v11);
  *(_QWORD *)((char *)a1 + v11) = v13;
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v14 = v13;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for SelectCorePhysicalPlan(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  ValueMetadata *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SelectCore();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 3))(v7, v8, v9);
  v10 = a3[6];
  v11 = *(void **)((char *)a2 + v10);
  v12 = *(void **)((char *)a1 + v10);
  *(_QWORD *)((char *)a1 + v10) = v11;
  v13 = v11;

  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for SelectCorePhysicalPlan(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  ValueMetadata *v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SelectCore();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 4))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

_QWORD *assignWithTake for SelectCorePhysicalPlan(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  ValueMetadata *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SelectCore();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 5))(v7, v8, v9);
  v10 = a3[6];
  v11 = *(void **)((char *)a1 + v10);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);

  v12 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SelectCorePhysicalPlan()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_18D921408(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  ValueMetadata *v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    OUTLINED_FUNCTION_165(*a1);
    OUTLINED_FUNCTION_1_6();
  }
  else
  {
    v6 = OUTLINED_FUNCTION_124();
    OUTLINED_FUNCTION_67_0((uint64_t)a1 + *(int *)(a3 + 20), a2, (uint64_t)v6);
  }
}

uint64_t storeEnumTagSinglePayload for SelectCorePhysicalPlan()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_18D921468(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  ValueMetadata *v7;

  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    OUTLINED_FUNCTION_1_6();
  }
  else
  {
    v7 = OUTLINED_FUNCTION_124();
    OUTLINED_FUNCTION_68((uint64_t)a1 + *(int *)(a4 + 20), a2, a2, (uint64_t)v7);
  }
}

ValueMetadata *type metadata completion function for SelectCorePhysicalPlan()
{
  ValueMetadata *result;
  unint64_t v1;

  result = type metadata accessor for SelectCore();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

BOOL static StorableValue.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void StorableValue.CodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t StorableValue.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  char v13;

  v3 = a1 == 0x5672656765746E69 && a2 == 0xEC00000065756C61;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6156656C62756F64 && a2 == 0xEB0000000065756CLL;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x756C615665746164 && a2 == 0xE900000000000065;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x6156676E69727473 && a2 == 0xEB0000000065756CLL;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          v9 = a1 == 0x756C61566E6F736ALL && a2 == 0xE900000000000065;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            v10 = a1 == 0x756C615661746164 && a2 == 0xE900000000000065;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              v11 = a1 == 0x756C615664697575 && a2 == 0xE900000000000065;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else if (a1 == 0x756C61566C6C756ELL && a2 == 0xE900000000000065)
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else
              {
                v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v13 & 1) != 0)
                  return 7;
                else
                  return 8;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t StorableValue.CodingKeys.init(intValue:)()
{
  return 8;
}

Swift::Int StorableValue.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t StorableValue.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t StorableValue.CodingKeys.stringValue.getter(char a1)
{
  return *(_QWORD *)&aIntegervdouble[8 * a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance StorableValue.CodingKeys(char *a1, char *a2)
{
  return static StorableValue.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StorableValue.CodingKeys()
{
  unsigned __int8 *v0;

  return StorableValue.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance StorableValue.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  StorableValue.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StorableValue.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance StorableValue.CodingKeys()
{
  char *v0;

  return StorableValue.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StorableValue.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = StorableValue.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance StorableValue.CodingKeys()
{
  return StorableValue.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance StorableValue.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = StorableValue.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StorableValue.CodingKeys()
{
  lazy protocol witness table accessor for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StorableValue.CodingKeys()
{
  lazy protocol witness table accessor for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void StorableValue.DataValueCodingKeys.hash(into:)()
{
  Hasher._combine(_:)(0);
}

uint64_t StorableValue.DataValueCodingKeys.stringValue.getter()
{
  return 12383;
}

uint64_t StorableValue.NullValueCodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t StorableValue.NullValueCodingKeys.stringValue.getter()
{
  return 0;
}

uint64_t StorableValue.DataValueCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    OUTLINED_FUNCTION_64();
    v4 = 0;
  }
  else
  {
    v3 = OUTLINED_FUNCTION_147();
    OUTLINED_FUNCTION_64();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

void StorableValue.DataValueCodingKeys.hashValue.getter()
{
  OUTLINED_FUNCTION_164();
  OUTLINED_FUNCTION_163();
  OUTLINED_FUNCTION_121();
  OUTLINED_FUNCTION_46();
}

void StorableValue.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  OUTLINED_FUNCTION_42();
  v28 = v0;
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StorableValue.NullValueCodingKeys>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_89(v5, v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StorableValue.UuidValueCodingKeys>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_8();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_92(v8, v25);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StorableValue.DataValueCodingKeys>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_91(v10, v26);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedEncodingContainer<StorableValue.JsonValueCodingKeys>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_14_2(v12, v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StorableValue.StringValueCodingKeys>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_120(v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StorableValue.DateValueCodingKeys>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v15);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_120(v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v17);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_120(v18);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedEncodingContainer<StorableValue.DoubleValueCodingKeys>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v19);
  OUTLINED_FUNCTION_117();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StorableValue.IntegerValueCodingKeys>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v20);
  OUTLINED_FUNCTION_41();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v21);
  OUTLINED_FUNCTION_40();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedEncodingContainer<StorableValue.CodingKeys>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v22);
  OUTLINED_FUNCTION_118();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of StorableValue(v28, v1, type metadata accessor for StorableValue);
  OUTLINED_FUNCTION_107();
  v23 = (char *)sub_18D921DD8 + 4 * byte_18DC0BC78[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_18D921DD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  *(_BYTE *)(v1 - 104) = 0;
  lazy protocol witness table accessor for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys();
  OUTLINED_FUNCTION_10_0();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  v2 = OUTLINED_FUNCTION_57();
  v3(v2, v0);
  v4 = OUTLINED_FUNCTION_149();
  v5(v4);
  OUTLINED_FUNCTION_9();
}

void sub_18D921FFC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);

  v2 = *v0;
  v3 = v0[1];
  *(_BYTE *)(v1 - 104) = 5;
  lazy protocol witness table accessor for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys();
  OUTLINED_FUNCTION_10_0();
  *(_QWORD *)(v1 - 104) = v2;
  *(_QWORD *)(v1 - 96) = v3;
  lazy protocol witness table accessor for type Data and conformance Data();
  OUTLINED_FUNCTION_155();
  OUTLINED_FUNCTION_101_0(*(_QWORD *)(v1 - 208));
  v4 = OUTLINED_FUNCTION_149();
  v5(v4);
  outlined consume of Data?(v2, v3);
  JUMPOUT(0x18D921FECLL);
}

void sub_18D922070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 - 168);
  outlined init with take of UUID?(v0, v2, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(_BYTE *)(v1 - 104) = 6;
  lazy protocol witness table accessor for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys();
  v3 = *(_QWORD *)(v1 - 160);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  OUTLINED_FUNCTION_71();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
  OUTLINED_FUNCTION_127_0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  OUTLINED_FUNCTION_62_0(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 152) + 8));
  outlined destroy of UUID?(v2, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_107();
  JUMPOUT(0x18D921FE8);
}

void sub_18D922130()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v0 - 104) = 7;
  lazy protocol witness table accessor for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys();
  v1 = *(_QWORD *)(v0 - 192);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 - 184) + 8))(v1, *(_QWORD *)(v0 - 176));
  OUTLINED_FUNCTION_102(*(_QWORD *)(v0 - 136));
  JUMPOUT(0x18D921FECLL);
}

void StorableValue.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v7 = type metadata accessor for Date.ISO8601FormatStyle();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_116();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v2);
  OUTLINED_FUNCTION_40();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_0();
  v4 = MEMORY[0x1E0C80A78](v3);
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_41();
  Hasher.init(_seed:)();
  outlined init with copy of StorableValue(v0, v1, type metadata accessor for StorableValue);
  v6 = (char *)sub_18D9222A8 + 4 * byte_18DC0BC80[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_18D9222A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;

  v2 = v0[1];
  *(_QWORD *)(v1 - 168) = *v0;
  *(_QWORD *)(v1 - 160) = v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v3 = Optional<A>.hashValue.getter();
  OUTLINED_FUNCTION_64();
  Hasher._combine(_:)(v3);
  Hasher._finalize()();
  OUTLINED_FUNCTION_55();
}

void StorableValue.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88[20];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;

  OUTLINED_FUNCTION_42();
  a19 = v24;
  a20 = v25;
  a10 = v20;
  v27 = v26;
  v95 = v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StorableValue.NullValueCodingKeys>);
  v93 = *(_QWORD *)(v29 - 8);
  v94 = v29;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v30);
  OUTLINED_FUNCTION_89(v31, v88[0]);
  v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StorableValue.UuidValueCodingKeys>);
  v98 = *(_QWORD *)(v90 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v32);
  OUTLINED_FUNCTION_92(v33, v88[0]);
  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StorableValue.DataValueCodingKeys>);
  v88[19] = *(_QWORD *)(v89 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v34);
  OUTLINED_FUNCTION_90(v35, v88[0]);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StorableValue.JsonValueCodingKeys>);
  OUTLINED_FUNCTION_160(v36, (uint64_t)&a17);
  v88[17] = v37;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v38);
  OUTLINED_FUNCTION_93(v39, v88[0]);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StorableValue.StringValueCodingKeys>);
  OUTLINED_FUNCTION_160(v40, (uint64_t)&a15);
  v88[14] = v41;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v42);
  OUTLINED_FUNCTION_91(v43, v88[0]);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StorableValue.DateValueCodingKeys>);
  v88[13] = *(_QWORD *)(OUTLINED_FUNCTION_153(v44) - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v45);
  OUTLINED_FUNCTION_8();
  v92 = v46;
  v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<StorableValue.DoubleValueCodingKeys>);
  OUTLINED_FUNCTION_160(v47, (uint64_t)&a11);
  v88[11] = v48;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v49);
  OUTLINED_FUNCTION_8();
  v91 = v50;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StorableValue.IntegerValueCodingKeys>);
  OUTLINED_FUNCTION_160(v51, (uint64_t)&a9);
  v88[9] = v52;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v53);
  OUTLINED_FUNCTION_14_2(v54, v88[0]);
  v99 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<StorableValue.CodingKeys>);
  v97 = *(_QWORD *)(v99 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v55);
  OUTLINED_FUNCTION_114();
  v58 = v57 - v56;
  v96 = OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v59);
  OUTLINED_FUNCTION_6_1();
  v88[8] = v60;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v61);
  OUTLINED_FUNCTION_53();
  v88[7] = v62;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v63);
  OUTLINED_FUNCTION_53();
  v88[6] = v64;
  OUTLINED_FUNCTION_7();
  v66 = MEMORY[0x1E0C80A78](v65);
  v68 = (char *)v88 - v67;
  MEMORY[0x1E0C80A78](v66);
  OUTLINED_FUNCTION_66();
  MEMORY[0x1E0C80A78](v69);
  OUTLINED_FUNCTION_158();
  MEMORY[0x1E0C80A78](v70);
  OUTLINED_FUNCTION_63();
  MEMORY[0x1E0C80A78](v71);
  v73 = (char *)v88 - v72;
  v74 = v27[3];
  v100 = v27;
  __swift_project_boxed_opaque_existential_1(v27, v74);
  lazy protocol witness table accessor for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys();
  v75 = a10;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v75)
  {
    v88[1] = v23;
    v88[2] = v22;
    v88[3] = (uint64_t)v68;
    v88[4] = v21;
    v88[5] = (uint64_t)v73;
    v76 = v99;
    v77 = KeyedDecodingContainer.allKeys.getter();
    v78 = *(_QWORD *)(v77 + 16);
    if (v78)
    {
      a10 = v58;
      v88[0] = 0;
      v79 = *(unsigned __int8 *)(v77 + 32);
      specialized ArraySlice.subscript.getter(1, v78, v77, v77 + 32, 0, (2 * v78) | 1);
      v81 = v80;
      v83 = v82;
      OUTLINED_FUNCTION_64();
      if (v81 == v83 >> 1)
        __asm { BR              X9 }
      v76 = v99;
      v58 = a10;
    }
    v84 = v96;
    v85 = type metadata accessor for DecodingError();
    OUTLINED_FUNCTION_13_0();
    v87 = v86;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v87 = v84;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v85 - 8) + 104))(v87, *MEMORY[0x1E0DEC450], v85);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v58, v76);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v100);
  OUTLINED_FUNCTION_9();
}

void sub_18D9229B4()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 112) = 1;
  lazy protocol witness table accessor for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys();
  OUTLINED_FUNCTION_4_6();
  if (!v0)
  {
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_34(v1 - 72);
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_19(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 - 144) + 8));
    OUTLINED_FUNCTION_95(v1 - 144);
    swift_storeEnumTagMultiPayload();
    JUMPOUT(0x18D922EB4);
  }
  OUTLINED_FUNCTION_18_0();
  JUMPOUT(0x18D922998);
}

void sub_18D922A18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v2 - 112) = 2;
  lazy protocol witness table accessor for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys();
  OUTLINED_FUNCTION_4_6();
  if (!v0)
  {
    OUTLINED_FUNCTION_70();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
    v3 = *(_QWORD *)(v2 - 384);
    OUTLINED_FUNCTION_132();
    v4 = *(_QWORD *)(v2 - 144);
    OUTLINED_FUNCTION_34(v2 - 56);
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_19(*(uint64_t (**)(_QWORD, _QWORD))(v4 + 8));
    swift_storeEnumTagMultiPayload();
    v5 = *(_QWORD *)(v2 - 376);
    outlined init with take of StorableValue(v3, v5, type metadata accessor for StorableValue);
    outlined init with take of StorableValue(v5, v1, type metadata accessor for StorableValue);
    JUMPOUT(0x18D92299CLL);
  }
  OUTLINED_FUNCTION_18_0();
  JUMPOUT(0x18D922998);
}

void sub_18D922AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t *v7;

  *(_BYTE *)(v1 - 112) = 3;
  lazy protocol witness table accessor for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v0)
  {
    OUTLINED_FUNCTION_18_0();
    JUMPOUT(0x18D922998);
  }
  v2 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v4 = v3;
  v5 = OUTLINED_FUNCTION_119();
  v6(v5);
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_19(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 - 144) + 8));
  v7 = *(uint64_t **)(v1 - 392);
  *v7 = v2;
  v7[1] = v4;
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x18D922EB4);
}

void sub_18D922B34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  *(_BYTE *)(v1 - 112) = 4;
  lazy protocol witness table accessor for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys();
  OUTLINED_FUNCTION_4_6();
  if (!v0)
  {
    OUTLINED_FUNCTION_130();
    v2 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v3 = *(_QWORD *)(v1 - 144);
    v4 = v2;
    v6 = v5;
    OUTLINED_FUNCTION_35_0(v1 - 24);
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_19(*(uint64_t (**)(_QWORD, _QWORD))(v3 + 8));
    v7 = *(uint64_t **)(v1 - 368);
    *v7 = v4;
    v7[1] = v6;
    JUMPOUT(0x18D922DF0);
  }
  OUTLINED_FUNCTION_18_0();
  JUMPOUT(0x18D922998);
}

void sub_18D922B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 - 112) = 5;
  lazy protocol witness table accessor for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys();
  OUTLINED_FUNCTION_4_6();
  if (!v0)
  {
    lazy protocol witness table accessor for type Data and conformance Data();
    OUTLINED_FUNCTION_132();
    v2 = *(_QWORD *)(v1 - 144);
    OUTLINED_FUNCTION_34(v1 - 8);
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_19(*(uint64_t (**)(_QWORD, _QWORD))(v2 + 8));
    *(_OWORD *)*(_QWORD *)(v1 - 360) = *(_OWORD *)(v1 - 112);
    JUMPOUT(0x18D922EA4);
  }
  OUTLINED_FUNCTION_18_0();
  JUMPOUT(0x18D922998);
}

void sub_18D922C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v4 - 112) = 6;
  lazy protocol witness table accessor for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys();
  OUTLINED_FUNCTION_4_6();
  if (!v0)
  {
    OUTLINED_FUNCTION_71();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    v5 = *(_QWORD *)(v4 - 352);
    OUTLINED_FUNCTION_132();
    v6 = *(_QWORD *)(v4 - 144);
    OUTLINED_FUNCTION_65_0(v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_19(*(uint64_t (**)(_QWORD, _QWORD))(v6 + 8));
    swift_storeEnumTagMultiPayload();
    v7 = *(_QWORD *)(v4 - 376);
    outlined init with take of StorableValue(v5, v7, type metadata accessor for StorableValue);
    outlined init with take of StorableValue(v7, v2, type metadata accessor for StorableValue);
    JUMPOUT(0x18D92299CLL);
  }
  OUTLINED_FUNCTION_18_0();
  JUMPOUT(0x18D922998);
}

void sub_18D922CA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v2 - 112) = 7;
  lazy protocol witness table accessor for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys();
  v3 = *(_QWORD *)(v2 - 192);
  OUTLINED_FUNCTION_4_6();
  if (v0)
    JUMPOUT(0x18D922CD4);
  OUTLINED_FUNCTION_65_0(v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_102(*(_QWORD *)(v2 - 144));
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x18D922EC4);
}

BOOL static ChangeOperation.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void ChangeOperation.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

void ChangeOperation.hashValue.getter(char a1)
{
  OUTLINED_FUNCTION_164();
  Hasher._combine(_:)(a1 & 1);
  OUTLINED_FUNCTION_121();
  OUTLINED_FUNCTION_46();
}

void protocol witness for Hashable.hashValue.getter in conformance StorableValue.DataValueCodingKeys()
{
  StorableValue.DataValueCodingKeys.hashValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StorableValue.DataValueCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = StorableValue.DataValueCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance StorableValue.DataValueCodingKeys()
{
  return StorableValue.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance StorableValue.DataValueCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static StorableValue.DataValueCodingKeys.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StorableValue.DataValueCodingKeys()
{
  lazy protocol witness table accessor for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StorableValue.DataValueCodingKeys()
{
  lazy protocol witness table accessor for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StorableValue.DateValueCodingKeys()
{
  lazy protocol witness table accessor for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StorableValue.DateValueCodingKeys()
{
  lazy protocol witness table accessor for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StorableValue.DoubleValueCodingKeys()
{
  lazy protocol witness table accessor for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StorableValue.DoubleValueCodingKeys()
{
  lazy protocol witness table accessor for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StorableValue.IntegerValueCodingKeys()
{
  lazy protocol witness table accessor for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StorableValue.IntegerValueCodingKeys()
{
  lazy protocol witness table accessor for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StorableValue.JsonValueCodingKeys()
{
  lazy protocol witness table accessor for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StorableValue.JsonValueCodingKeys()
{
  lazy protocol witness table accessor for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StorableValue.NullValueCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = StorableValue.NullValueCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StorableValue.NullValueCodingKeys()
{
  lazy protocol witness table accessor for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StorableValue.NullValueCodingKeys()
{
  lazy protocol witness table accessor for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StorableValue.StringValueCodingKeys()
{
  lazy protocol witness table accessor for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StorableValue.StringValueCodingKeys()
{
  lazy protocol witness table accessor for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance StorableValue.DataValueCodingKeys()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_163();
  OUTLINED_FUNCTION_121();
  OUTLINED_FUNCTION_46();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StorableValue.UuidValueCodingKeys()
{
  lazy protocol witness table accessor for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StorableValue.UuidValueCodingKeys()
{
  lazy protocol witness table accessor for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance StorableValue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v8 = type metadata accessor for Date.ISO8601FormatStyle();
  MEMORY[0x1E0C80A78](v8);
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v1);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v4 = MEMORY[0x1E0C80A78](v3);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  outlined init with copy of StorableValue(v0, (uint64_t)v6, type metadata accessor for StorableValue);
  v7 = (char *)sub_18D92340C + 4 * byte_18DC0BC98[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

Swift::Int sub_18D92340C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;

  v2 = v0[1];
  *(_QWORD *)(v1 - 168) = *v0;
  *(_QWORD *)(v1 - 160) = v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v3 = Optional<A>.hashValue.getter();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

#error "18D923678: call analysis failed (funcsize=5)"

void protocol witness for Encodable.encode(to:) in conformance StorableValue()
{
  StorableValue.encode(to:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ChangeOperation(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static ChangeOperation.== infix(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance ChangeOperation()
{
  char *v0;

  ChangeOperation.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ChangeOperation(uint64_t a1)
{
  char *v1;

  ChangeOperation.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ChangeOperation()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  OUTLINED_FUNCTION_121();
  OUTLINED_FUNCTION_46();
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x193FED7A0](MEMORY[0x1E0CB0358], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x193FED7A0](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x193FED7A0](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x193FED7A0](MEMORY[0x1E0CB0360], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14BiomeSQLParser13SQLExpressionVG_0D7Streams13StorableValueOsAE_pTg504_s12d176Streams5group33_69E06497FCCD36C7847396967BD3AC6FLL7changes2by8metadata20aggregationFunctions13resultColumns6having19expressionEvaluatorSayAA12ChangeRecordVGAM_Say0A9SQLParser13f130VGAA20QueryPlannerMetadataCSayAN19AggregationFunctionVGSayAN12ResultColumnVGAPSgAA0vR0CtKFyAA14GroupedChangesACLLVz_ALtKXEfU0_AA13hI9OAPKXEfU_AJ0fT0CAJ0wX0VTf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *Description;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a4;
  v6 = type metadata accessor for StorableValue(0);
  v17 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v10 = v19;
    Description = type metadata accessor for SQLExpression()[-1].Description;
    v12 = a1
        + ((*((unsigned __int8 *)Description + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)Description + 80));
    v16 = Description[9];
    while (1)
    {
      SQLExpressionEvaluator.execute(expression:payload:)(v12, v18, v8);
      if (v4)
        break;
      v19 = v10;
      v13 = *(_QWORD *)(v10 + 16);
      if (v13 >= *(_QWORD *)(v10 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v10 = v19;
      }
      *(_QWORD *)(v10 + 16) = v13 + 1;
      outlined init with take of StorableValue((uint64_t)v8, v10+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v13, type metadata accessor for StorableValue);
      v12 += v16;
      if (!--v9)
      {
        swift_release();
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    v10 = MEMORY[0x1E0DEE9D8];
LABEL_10:
    swift_bridgeObjectRelease();
  }
  return v10;
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay14BiomeSQLParser19AggregationFunctionVGSaySDySS0F7Streams13StorableValueOGGG_AL0H0_psAE_pTg504_s14f11SQLParser19hi18VSDySS0A7Streams13kl11OGAD0C0_ps5C389_pIgngrzo_AC_AGtAdH_psAI_pIegnrzr_TR04_s12a223Streams5group33_69E06497FCCD36C7847396967BD3AC6FLL7changes2by8metadata20aggregationFunctions13resultColumns6having19expressionEvaluatorSayAA12ChangeRecordVGAM_Say0A9SQLParser13SQLExpressionVGAA20QueryPlannerMetadataCSayAN19cd92VGSayAN12ResultColumnVGAPSgAA0vR0CtKFyAA14GroupedChangesACLLVz_ALtKXEfU0_AA0Z0_pAU_SDySSAA13fG10OGtKXEfU0_Tf3nnnpf_nTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  ValueMetadata *v5;
  void (**Description)(char *, unint64_t, ValueMetadata *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (**v24)(char *, unint64_t, ValueMetadata *);
  ValueMetadata *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  ValueMetadata *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v5 = type metadata accessor for AggregationFunction();
  Description = (void (**)(char *, unint64_t, ValueMetadata *))v5[-1].Description;
  v7 = MEMORY[0x1E0C80A78](v5);
  v51 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v47 - v9;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AggregationFunction, [String : StorableValue]));
  v11 = MEMORY[0x1E0C80A78](v54);
  v57 = (ValueMetadata *)((char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x1E0C80A78](v11);
  v47 = (char *)&v47 - v14;
  MEMORY[0x1E0C80A78](v13);
  v48 = (uint64_t)&v47 - v15;
  v16 = *(_QWORD *)(a1 + 16);
  v56 = *(_QWORD *)(a2 + 16);
  if (v56 >= v16)
    v17 = v16;
  else
    v17 = v56;
  v61 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
  v52 = v16;
  v53 = a1;
  v55 = a2;
  v49 = v10;
  v50 = v17;
  if (v17)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = 0;
    while (v16 != v18)
    {
      v19 = v51;
      Description[2](v51, a1+ ((*((unsigned __int8 *)Description + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)Description + 80))+ (_QWORD)Description[9] * v18, v5);
      if (v56 == v18)
        goto LABEL_33;
      v20 = v19;
      v21 = *(_QWORD *)(a2 + 8 * v18 + 32);
      v22 = *(int *)(v54 + 48);
      v23 = (uint64_t)v57;
      Description[4]((char *)v57, (unint64_t)v20, v5);
      *(_QWORD *)(v23 + v22) = v21;
      swift_bridgeObjectRetain();
      AggregationFunction.newAggregation()();
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        outlined destroy of UUID?((uint64_t)v57, &demangling cache variable for type metadata for (AggregationFunction, [String : StorableValue]));
        return;
      }
      v24 = Description;
      v25 = v5;
      v27 = v59;
      v26 = v60;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v58, v59);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v21, v27, v26);
      outlined destroy of UUID?((uint64_t)v57, &demangling cache variable for type metadata for (AggregationFunction, [String : StorableValue]));
      v28 = v61;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1);
        v28 = v61;
      }
      v5 = v25;
      v30 = *(_QWORD *)(v28 + 16);
      v29 = *(_QWORD *)(v28 + 24);
      Description = v24;
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1);
        v28 = v61;
      }
      ++v18;
      *(_QWORD *)(v28 + 16) = v30 + 1;
      outlined init with take of Aggregation(&v58, v28 + 40 * v30 + 32);
      v16 = v52;
      a1 = v53;
      a2 = v55;
      if (v50 == v18)
        goto LABEL_16;
    }
    __break(1u);
LABEL_33:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_16:
    v31 = v56;
    if (v16 <= v56)
    {
LABEL_30:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v57 = v5;
    v32 = v50;
    while (v32 < v16)
    {
      v33 = v49;
      Description[2](v49, a1+ ((*((unsigned __int8 *)Description + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)Description + 80))+ (_QWORD)Description[9] * v32, v57);
      if (v31 == v32)
      {
        ((void (*)(char *, ValueMetadata *))Description[1])(v33, v57);
        goto LABEL_30;
      }
      if (v32 >= v31)
        goto LABEL_35;
      v34 = v54;
      v35 = v32;
      v36 = *(_QWORD *)(v55 + 8 * v32 + 32);
      v37 = *(int *)(v54 + 48);
      v38 = (uint64_t)v47;
      Description[4](v47, (unint64_t)v33, v57);
      *(_QWORD *)(v38 + v37) = v36;
      v39 = v48;
      outlined init with take of UUID?(v38, v48, &demangling cache variable for type metadata for (AggregationFunction, [String : StorableValue]));
      v40 = *(_QWORD *)(v39 + *(int *)(v34 + 48));
      swift_bridgeObjectRetain();
      AggregationFunction.newAggregation()();
      if (v2)
      {
        outlined destroy of UUID?(v39, &demangling cache variable for type metadata for (AggregationFunction, [String : StorableValue]));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
      v41 = v59;
      v42 = v60;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v58, v59);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v40, v41, v42);
      outlined destroy of UUID?(v39, &demangling cache variable for type metadata for (AggregationFunction, [String : StorableValue]));
      v43 = v61;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      a1 = v53;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v43 + 16) + 1, 1);
        v43 = v61;
      }
      v16 = v52;
      v46 = *(_QWORD *)(v43 + 16);
      v45 = *(_QWORD *)(v43 + 24);
      if (v46 >= v45 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v45 > 1), v46 + 1, 1);
        v43 = v61;
      }
      v32 = v35 + 1;
      *(_QWORD *)(v43 + 16) = v46 + 1;
      outlined init with take of Aggregation(&v58, v43 + 40 * v46 + 32);
      v31 = v56;
      if (v16 == v35 + 1)
        goto LABEL_30;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
}

void specialized OrderedDictionary.removeFirst()()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16))
  {
    v1 = objc_msgSend(*(id *)v0, sel_objectAtIndexedSubscript_, 0);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrderedDictionary<[StorableValue], ChangeRecord?>.KeyWrapper);
    swift_dynamicCast();
    objc_msgSend(*(id *)v0, sel_removeObjectAtIndex_, 0);
    v2 = specialized Dictionary._Variant.removeValue(forKey:)();
    v4 = v3;
    swift_release();
    outlined consume of ChangeRecord??(v2, v4);
  }
}

{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16))
  {
    v1 = objc_msgSend(*(id *)v0, sel_objectAtIndexedSubscript_, 0);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for OrderedDictionary<[StorableValue], [[String : StorableValue]]?>.KeyWrapper);
    swift_dynamicCast();
    objc_msgSend(*(id *)v0, sel_removeObjectAtIndex_, 0);
    specialized Dictionary._Variant.removeValue(forKey:)();
    v3 = v2;
    swift_release();
    outlined consume of [[String : StorableValue]]??(v3);
  }
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

void specialized MutableCollection<>.sort(by:)(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t))
{
  uint64_t *v3;
  uint64_t v5;

  OUTLINED_FUNCTION_137(a1, a2);
  v5 = *v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = a3(v5);
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)();
  *v3 = v5;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t (*v35)(unint64_t, unint64_t, uint64_t);
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t (*v39)(unint64_t, unint64_t, uint64_t);
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v50;
  char *v51;
  void (*v52)(unint64_t, uint64_t);
  unint64_t v53;
  BOOL v54;
  BOOL v55;
  uint64_t (*v58)(uint64_t, unint64_t, uint64_t);
  uint64_t v59;
  uint64_t (*v60)(void);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v67;
  BOOL v69;
  char *v70;
  _QWORD v72[2];
  unint64_t v73;
  uint64_t (*v74)(unint64_t, unint64_t, uint64_t);
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t (*v81)(void);
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;

  OUTLINED_FUNCTION_42();
  v84 = v0;
  v85 = v1;
  v81 = v2;
  v72[1] = v3;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12(0);
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_6_1();
  v80 = v14;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v15);
  OUTLINED_FUNCTION_53();
  v79 = v16;
  OUTLINED_FUNCTION_7();
  v18 = MEMORY[0x1E0C80A78](v17);
  result = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)v72 - v21;
  v82 = v23;
  v24 = *(_QWORD *)(v23 + 72);
  if (!v24)
  {
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  v25 = v9 - v11;
  if (v9 - v11 == 0x8000000000000000 && v24 == -1)
    goto LABEL_87;
  v27 = &v7[-v9];
  if (&v7[-v9] == (char *)0x8000000000000000 && v24 == -1)
    goto LABEL_88;
  v76 = v7;
  v29 = v25 / v24;
  v30 = (uint64_t)v27 / v24;
  v78 = v24;
  if (v25 / v24 >= (uint64_t)v27 / v24)
  {
    result = OUTLINED_FUNCTION_133();
    v32 = (char *)(v5 + v30 * v24);
    if (v30 * v24 >= 1 && v11 < v9)
    {
      v77 = -v24;
      v35 = *(uint64_t (**)(unint64_t, unint64_t, uint64_t))(v82 + 16);
      v73 = v5;
      v74 = v35;
      v36 = v76;
      v75 = v11;
      do
      {
        v37 = v36;
        v83 = (unint64_t)v32;
        v38 = v77;
        v76 = &v32[v77];
        v39 = v74;
        ((void (*)(uint64_t))v74)(v79);
        v40 = v9 + v38;
        v41 = v9 + v38;
        v42 = v13;
        v43 = v39(v80, v41, v13);
        v44 = v81;
        v45 = ((uint64_t (*)(uint64_t))v81)(v43);
        v47 = v46;
        if (v45 == v44() && v47 == v48)
        {
          v50 = 0;
        }
        else
        {
          OUTLINED_FUNCTION_107();
          v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        OUTLINED_FUNCTION_54();
        swift_bridgeObjectRelease();
        v51 = &v37[v77];
        v52 = *(void (**)(unint64_t, uint64_t))(v82 + 8);
        v13 = v42;
        v52(v80, v42);
        result = ((uint64_t (*)(uint64_t, uint64_t))v52)(v79, v42);
        v53 = v75;
        if ((v50 & 1) != 0)
        {
          v54 = (unint64_t)v37 < v9 || (unint64_t)v51 >= v9;
          v36 = v51;
          if (v54)
          {
            result = OUTLINED_FUNCTION_22();
          }
          else if (v37 != (char *)v9)
          {
            result = OUTLINED_FUNCTION_36();
          }
          v9 = v40;
          v5 = v73;
          v24 = v78;
          v32 = (char *)v83;
        }
        else
        {
          v55 = (unint64_t)v37 < v83 || (unint64_t)v51 >= v83;
          v36 = v51;
          if (v55)
          {
            v32 = v76;
            result = OUTLINED_FUNCTION_22();
            v5 = v73;
            v24 = v78;
          }
          else
          {
            v24 = v78;
            v32 = v76;
            if (v37 != (char *)v83)
              result = OUTLINED_FUNCTION_36();
            v5 = v73;
          }
        }
      }
      while ((unint64_t)v32 > v5 && v9 > v53);
    }
  }
  else
  {
    v79 = v20;
    result = OUTLINED_FUNCTION_133();
    v31 = v29 * v24;
    v32 = (char *)(v5 + v29 * v24);
    if (v31 >= 1 && v9 < (unint64_t)v76)
    {
      v77 = *(_QWORD *)(v82 + 16);
      v83 = (unint64_t)v32;
      while (1)
      {
        v80 = v9;
        v58 = (uint64_t (*)(uint64_t, unint64_t, uint64_t))v77;
        ((void (*)(char *, unint64_t, uint64_t))v77)(v22, v9, v13);
        v59 = v58(v79, v5, v13);
        v60 = v81;
        v61 = v13;
        v62 = ((uint64_t (*)(uint64_t))v81)(v59);
        v64 = v63;
        if (v62 == v60() && v64 == v65)
          break;
        v67 = OUTLINED_FUNCTION_29();
        OUTLINED_FUNCTION_54();
        OUTLINED_FUNCTION_24();
        OUTLINED_FUNCTION_85();
        result = OUTLINED_FUNCTION_138();
        v13 = v61;
        if ((v67 & 1) == 0)
          goto LABEL_68;
        v24 = v78;
        v9 = v80 + v78;
        if (v11 >= v80 && v11 < v9)
        {
          v70 = v76;
          if (v11 != v80)
            result = OUTLINED_FUNCTION_36();
          goto LABEL_78;
        }
        result = OUTLINED_FUNCTION_22();
LABEL_77:
        v70 = v76;
LABEL_78:
        v32 = (char *)v83;
        v11 += v24;
        if (v5 >= v83 || v9 >= (unint64_t)v70)
          goto LABEL_51;
      }
      OUTLINED_FUNCTION_99();
      OUTLINED_FUNCTION_85();
      result = OUTLINED_FUNCTION_138();
      v13 = v61;
LABEL_68:
      v24 = v78;
      v69 = v11 < v5 || v11 >= v5 + v78;
      v9 = v80;
      if (v69)
      {
        result = OUTLINED_FUNCTION_22();
      }
      else if (v11 != v5)
      {
        result = OUTLINED_FUNCTION_36();
      }
      v5 += v24;
      goto LABEL_77;
    }
  }
LABEL_51:
  if (v24 != -1 || &v32[-v5] != (char *)0x8000000000000000)
  {
    OUTLINED_FUNCTION_133();
    return 1;
  }
LABEL_89:
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12)
      memmove(v12, v13, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  OUTLINED_FUNCTION_64();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Binding>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Schema>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SQLExpression>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8])
      memmove(v12, v13, 96 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_18D9246A0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_18D9246C4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_18D9246E8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18D92471C()
{
  uint64_t v0;
  ValueMetadata *v1;
  void (**Description)(unint64_t, ValueMetadata *);
  unint64_t v3;

  v1 = OUTLINED_FUNCTION_124();
  Description = (void (**)(unint64_t, ValueMetadata *))v1[-1].Description;
  v3 = (*((unsigned __int8 *)Description + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)Description + 80);

  swift_release();
  Description[1](v0 + v3, v1);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x193FED794](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t specialized ArraySlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2)
    goto LABEL_10;
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0)
    return swift_unknownObjectRetain();
LABEL_12:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type SQLError and conformance SQLError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SQLError and conformance SQLError;
  if (!lazy protocol witness table cache variable for type SQLError and conformance SQLError)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for SQLError, &type metadata for SQLError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SQLError and conformance SQLError);
  }
  return result;
}

uint64_t assignWithCopy for ChangeRecord(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for ChangeRecord(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t storeEnumTagSinglePayload for ChangeRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StorableValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        v7 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
          goto LABEL_13;
        v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
        goto LABEL_14;
      case 3u:
      case 4u:
        v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        swift_bridgeObjectRetain();
        goto LABEL_14;
      case 5u:
        v11 = a2[1];
        if (v11 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v13 = *a2;
          outlined copy of Data._Representation(v13, v11);
          *a1 = v13;
          a1[1] = v11;
        }
        goto LABEL_14;
      case 6u:
        v7 = type metadata accessor for UUID();
        if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
        {
          v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        }
        else
        {
LABEL_13:
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
          __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
        }
LABEL_14:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t *assignWithCopy for StorableValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    outlined destroy of StorableValue((uint64_t)a1, type metadata accessor for StorableValue);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        v6 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
          goto LABEL_12;
        v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        goto LABEL_13;
      case 3u:
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_13;
      case 5u:
        v8 = a2[1];
        if (v8 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v10 = *a2;
          outlined copy of Data._Representation(v10, v8);
          *a1 = v10;
          a1[1] = v8;
        }
        goto LABEL_13;
      case 6u:
        v6 = type metadata accessor for UUID();
        if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
        {
          v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        }
        else
        {
LABEL_12:
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
          __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
        }
LABEL_13:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for StorableValue(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 6)
  {
    v9 = type metadata accessor for UUID();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v9))
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v9);
    }
    goto LABEL_11;
  }
  if (EnumCaseMultiPayload == 2)
  {
    v7 = type metadata accessor for Date();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
LABEL_11:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

uint64_t destructiveInjectEnumTag for StorableValue()
{
  return swift_storeEnumTagMultiPayload();
}

void type metadata completion function for StorableValue()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for UUID?, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
    if (v1 <= 0x3F)
      swift_initEnumMetadataMultiPayload();
  }
}

void type metadata accessor for Date?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void base witness table accessor for Equatable in StorableValue()
{
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type StorableValue and conformance StorableValue, type metadata accessor for StorableValue, (uint64_t)&protocol conformance descriptor for StorableValue);
}

unint64_t lazy protocol witness table accessor for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.CodingKeys, &unk_1E2636980);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.CodingKeys, &unk_1E2636980);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.CodingKeys, &unk_1E2636980);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys[0];
  if (!lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys[0])
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.CodingKeys, &unk_1E2636980);
    atomic_store(result, lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.NullValueCodingKeys, &unk_1E2636720);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.NullValueCodingKeys, &unk_1E2636720);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.NullValueCodingKeys, &unk_1E2636720);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.UuidValueCodingKeys, &unk_1E2636740);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.UuidValueCodingKeys, &unk_1E2636740);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.UuidValueCodingKeys, &unk_1E2636740);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.UuidValueCodingKeys, &unk_1E2636740);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.DataValueCodingKeys, &unk_1E2636570);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.DataValueCodingKeys, &unk_1E2636570);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.DataValueCodingKeys, &unk_1E2636570);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.DataValueCodingKeys, &unk_1E2636570);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.JsonValueCodingKeys, &unk_1E2636690);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.JsonValueCodingKeys, &unk_1E2636690);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.JsonValueCodingKeys, &unk_1E2636690);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.JsonValueCodingKeys, &unk_1E2636690);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.StringValueCodingKeys, &unk_1E2636860);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.StringValueCodingKeys, &unk_1E2636860);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0]("]ڣT", &unk_1E2636860);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.StringValueCodingKeys, &unk_1E2636860);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.DateValueCodingKeys, &unk_1E2636600);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.DateValueCodingKeys, &unk_1E2636600);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.DateValueCodingKeys, &unk_1E2636600);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.DateValueCodingKeys, &unk_1E2636600);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.DoubleValueCodingKeys, &unk_1E26367D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.DoubleValueCodingKeys, &unk_1E26367D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.DoubleValueCodingKeys, &unk_1E26367D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.DoubleValueCodingKeys, &unk_1E26367D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.IntegerValueCodingKeys, &unk_1E26368F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.IntegerValueCodingKeys, &unk_1E26368F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.IntegerValueCodingKeys, &unk_1E26368F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue.IntegerValueCodingKeys, &unk_1E26368F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for StorableValue.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 7) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v5 = v6 - 8;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for StorableValue.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_18D9253E4 + 4 * byte_18DC0BCB9[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_18D925418 + 4 * byte_18DC0BCB4[v4]))();
}

uint64_t sub_18D925418(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18D925420(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18D925428);
  return result;
}

uint64_t sub_18D925434(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18D92543CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_18D925440(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18D925448(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for StorableValue.CodingKeys()
{
  return &unk_1E2636980;
}

uint64_t getEnumTag for StorableValue.IntegerValueCodingKeys()
{
  return 0;
}

void *type metadata accessor for StorableValue.IntegerValueCodingKeys()
{
  return &unk_1E26368F0;
}

void *type metadata accessor for StorableValue.DoubleValueCodingKeys()
{
  return &unk_1E26367D0;
}

void *type metadata accessor for StorableValue.DateValueCodingKeys()
{
  return &unk_1E2636600;
}

void *type metadata accessor for StorableValue.StringValueCodingKeys()
{
  return &unk_1E2636860;
}

void *type metadata accessor for StorableValue.JsonValueCodingKeys()
{
  return &unk_1E2636690;
}

void *type metadata accessor for StorableValue.DataValueCodingKeys()
{
  return &unk_1E2636570;
}

uint64_t getEnumTagSinglePayload for StorableValue.IntegerValueCodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for StorableValue.IntegerValueCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_18D925568 + 4 * byte_18DC0BCBE[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_18D925588 + 4 * byte_18DC0BCC3[v4]))();
}

_BYTE *sub_18D925568(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_18D925588(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18D925590(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18D925598(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18D9255A0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18D9255A8(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for StorableValue.UuidValueCodingKeys()
{
  return &unk_1E2636740;
}

void *type metadata accessor for StorableValue.NullValueCodingKeys()
{
  return &unk_1E2636720;
}

uint64_t getEnumTagSinglePayload for ChangeOperation(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ChangeOperation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18D9256A8 + 4 * byte_18DC0BCCD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18D9256DC + 4 * byte_18DC0BCC8[v4]))();
}

uint64_t sub_18D9256DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18D9256E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18D9256ECLL);
  return result;
}

uint64_t sub_18D9256F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18D925700);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18D925704(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18D92570C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for ChangeOperation(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ChangeOperation()
{
  return &type metadata for ChangeOperation;
}

unint64_t lazy protocol witness table accessor for type ChangeOperation and conformance ChangeOperation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ChangeOperation and conformance ChangeOperation;
  if (!lazy protocol witness table cache variable for type ChangeOperation and conformance ChangeOperation)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for ChangeOperation, &type metadata for ChangeOperation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChangeOperation and conformance ChangeOperation);
  }
  return result;
}

void OUTLINED_FUNCTION_93(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_97(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 40) = v1;
}

void OUTLINED_FUNCTION_98(uint64_t a1, uint64_t a2)
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1);
}

uint64_t OUTLINED_FUNCTION_101_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_104()
{
  uint64_t v0;

  outlined init with take of Any((_OWORD *)(v0 - 152), (_OWORD *)(v0 - 120));
  return outlined init with copy of Any(v0 - 120, v0 - 152);
}

uint64_t OUTLINED_FUNCTION_105@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_108_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_119()
{
  uint64_t v0;

  return v0;
}

Swift::Int OUTLINED_FUNCTION_121()
{
  return Hasher._finalize()();
}

void OUTLINED_FUNCTION_122(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of StorableValue(v2, a2);
}

ValueMetadata *OUTLINED_FUNCTION_124()
{
  return type metadata accessor for SelectCore();
}

uint64_t OUTLINED_FUNCTION_126()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 248));
}

uint64_t OUTLINED_FUNCTION_128()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 272);
}

void OUTLINED_FUNCTION_129()
{
  uint64_t v0;

  objc_autoreleasePoolPop(*(void **)(v0 - 344));
}

void OUTLINED_FUNCTION_131(Swift::UInt a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_133()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 168))();
}

uint64_t OUTLINED_FUNCTION_136()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_147()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void *OUTLINED_FUNCTION_148@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = a1;
  *(_QWORD *)(v2 - 112) = v1;
  return _Block_copy((const void *)(v2 - 136));
}

uint64_t OUTLINED_FUNCTION_152()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_154(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_164()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_167()
{
  uint64_t v0;

  return v0;
}

void SQLError.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[6];
  uint64_t v7;
  _BYTE v8[80];

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: String, value: StorableValue));
  v1 = MEMORY[0x1E0C80A78](v7);
  v6[5] = (char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = MEMORY[0x1E0C80A78](v1);
  v6[4] = (char *)v6 - v4;
  MEMORY[0x1E0C80A78](v3);
  v6[3] = (char *)v6 - v5;
  outlined init with copy of SQLError(v0, (uint64_t)v8);
  __asm { BR              X10 }
}

uint64_t sub_18D926084()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 232) = 0;
  *(_QWORD *)(v0 - 224) = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_9_1(0xD000000000000010);
  OUTLINED_FUNCTION_7_3();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_4_7(34);
  return *(_QWORD *)(v0 - 232);
}

void sub_18D926518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  Swift::String *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 - 160);
  v2 = *(_QWORD *)(v0 - 152);
  v3 = *(_QWORD *)(v0 - 144);
  static String._createEmpty(withInitialCapacity:)(33);
  OUTLINED_FUNCTION_2_1();
  strcpy((char *)(v0 - 232), "Metadata: \"[");
  *(_BYTE *)(v0 - 219) = 0;
  *(_WORD *)(v0 - 218) = -5120;
  v4 = *(_QWORD *)(v1 + 16);
  if (v4)
  {
    *(_QWORD *)(v0 - 336) = v2;
    *(_QWORD *)(v0 - 328) = v3;
    *(_QWORD *)(v0 - 248) = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v5 = specialized Dictionary.startIndex.getter(v1);
    v7 = v6;
    v9 = v8 & 1;
    v10 = v1;
    *(_QWORD *)(v0 - 320) = v1;
    do
    {
      v11 = *(_QWORD *)(v0 - 288);
      v12 = *(_QWORD **)(v0 - 312);
      v13 = (uint64_t)v12 + *(int *)(v11 + 48);
      v14 = v9 & 1;
      specialized Dictionary.subscript.getter(v13, v5, v7, v9 & 1, v10);
      *v12 = v15;
      v12[1] = v16;
      v17 = *(_QWORD **)(v0 - 304);
      *v17 = v15;
      v17[1] = v16;
      outlined init with copy of StorableValue(v13, (uint64_t)v17 + *(int *)(v11 + 48));
      v18 = (uint64_t)v17;
      v19 = *(Swift::String **)(v0 - 296);
      outlined init with take of (key: String, value: StorableValue)(v18, (uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: StorableValue));
      swift_bridgeObjectRetain();
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: StorableValue));
      v20 = static String._createEmpty(withInitialCapacity:)(6);
      OUTLINED_FUNCTION_19_0(v20, v21);
      OUTLINED_FUNCTION_20_0(*v19);
      OUTLINED_FUNCTION_4_7(32);
      type metadata accessor for StorableValue(0);
      _print_unlocked<A, B>(_:_:)();
      OUTLINED_FUNCTION_4_7(32);
      v22 = *(_QWORD *)(v0 - 280);
      v23 = *(_QWORD *)(v0 - 272);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: StorableValue));
      v24 = *(_QWORD *)(v0 - 248);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v24 + 16) + 1, 1);
        v24 = *(_QWORD *)(v0 - 248);
      }
      v26 = *(_QWORD *)(v24 + 16);
      v25 = *(_QWORD *)(v24 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v24 = *(_QWORD *)(v0 - 248);
      }
      *(_QWORD *)(v24 + 16) = v26 + 1;
      v27 = v24 + 16 * v26;
      *(_QWORD *)(v27 + 32) = v22;
      *(_QWORD *)(v27 + 40) = v23;
      v10 = *(_QWORD *)(v0 - 320);
      v28 = specialized _NativeDictionary.index(after:)(v5, v7, v14, v10);
      v30 = v29;
      v9 = v31 & 1;
      outlined consume of [String : StorableValue].Index._Variant(v5, v7, v14);
      v5 = v28;
      v7 = v30;
      --v4;
    }
    while (v4);
    outlined consume of [String : StorableValue].Index._Variant(v28, v30, v9);
    swift_bridgeObjectRelease();
    v2 = *(_QWORD *)(v0 - 336);
  }
  else
  {
    OUTLINED_FUNCTION_64();
    v24 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)(v0 - 280) = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_3();
  OUTLINED_FUNCTION_14_1();
  OUTLINED_FUNCTION_0_15();
  OUTLINED_FUNCTION_5_1(v32 - 6, (uint64_t)"]\", aggregation: ");
  OUTLINED_FUNCTION_18_1(v2);
  OUTLINED_FUNCTION_54();
  JUMPOUT(0x18D9264ECLL);
}

uint64_t outlined init with copy of SQLError(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SQLError(a2, a1);
  return a2;
}

uint64_t specialized _NativeDictionary.index(after:)(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || -(-1 << *(_BYTE *)(a4 + 32)) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + 64 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return _HashTable.occupiedBucket(after:)();
LABEL_8:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void destroy for SQLError(uint64_t a1)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 64);
  while (2)
  {
    switch(v2)
    {
      case 0:
      case 2:
      case 5:
        goto LABEL_11;
      case 1:
      case 7:
      case 8:
        swift_bridgeObjectRelease();
        goto LABEL_11;
      case 3:
        if (*(_QWORD *)(a1 + 24))
          __swift_destroy_boxed_opaque_existential_1Tm(a1);
        if (*(_QWORD *)(a1 + 56))
          __swift_destroy_boxed_opaque_existential_1Tm(a1 + 32);
        return;
      case 4:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_11:
        swift_bridgeObjectRelease();
        break;
      case 6:
        return;
      case 9:
        swift_release();
        break;
      case 10:
        swift_bridgeObjectRelease();

        break;
      default:
        v2 = *(_DWORD *)a1 + 11;
        continue;
    }
    break;
  }
}

uint64_t initializeWithCopy for SQLError(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  __int128 v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;

  v4 = *(unsigned __int8 *)(a2 + 64);
  while (2)
  {
    switch(v4)
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v5;
        *(_BYTE *)(a1 + 64) = 0;
        goto LABEL_17;
      case 1:
        v6 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v6;
        v7 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = v7;
        v8 = 1;
        goto LABEL_15;
      case 2:
        v9 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v9;
        v10 = 2;
        goto LABEL_11;
      case 3:
        v11 = *(_QWORD *)(a2 + 24);
        if (v11)
        {
          *(_QWORD *)(a1 + 24) = v11;
          (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1, a2);
        }
        else
        {
          v21 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v21;
        }
        v22 = (_OWORD *)(a1 + 32);
        v23 = (_OWORD *)(a2 + 32);
        v24 = *(_QWORD *)(a2 + 56);
        if (v24)
        {
          *(_QWORD *)(a1 + 56) = v24;
          (**(void (***)(_OWORD *, _OWORD *))(v24 - 8))(v22, v23);
        }
        else
        {
          v25 = *(_OWORD *)(a2 + 48);
          *v22 = *v23;
          *(_OWORD *)(a1 + 48) = v25;
        }
        v15 = 3;
        goto LABEL_25;
      case 4:
        v12 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v12;
        v13 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = v13;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 64) = 4;
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 5:
        v14 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v14;
        v10 = 5;
LABEL_11:
        *(_BYTE *)(a1 + 64) = v10;
        goto LABEL_17;
      case 6:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v15 = 6;
        goto LABEL_25;
      case 7:
        v16 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v16;
        v8 = 7;
        goto LABEL_15;
      case 8:
        v17 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        v8 = 8;
LABEL_15:
        *(_BYTE *)(a1 + 64) = v8;
LABEL_16:
        swift_bridgeObjectRetain();
LABEL_17:
        swift_bridgeObjectRetain();
        break;
      case 9:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 64) = 9;
        swift_retain();
        break;
      case 10:
        v18 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v18;
        v19 = *(void **)(a2 + 16);
        swift_bridgeObjectRetain();
        v20 = v19;
        *(_QWORD *)(a1 + 16) = v19;
        v15 = 10;
LABEL_25:
        *(_BYTE *)(a1 + 64) = v15;
        break;
      default:
        v4 = *(_DWORD *)a2 + 11;
        continue;
    }
    return a1;
  }
}

uint64_t assignWithCopy for SQLError(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  void *v10;
  id v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 64);
    while (2)
    {
      switch(v4)
      {
        case 0:
        case 2:
        case 5:
          goto LABEL_11;
        case 1:
        case 7:
        case 8:
          swift_bridgeObjectRelease();
          goto LABEL_11;
        case 3:
          if (*(_QWORD *)(a1 + 24))
            __swift_destroy_boxed_opaque_existential_1Tm(a1);
          if (*(_QWORD *)(a1 + 56))
            __swift_destroy_boxed_opaque_existential_1Tm(a1 + 32);
          break;
        case 4:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_11:
          swift_bridgeObjectRelease();
          break;
        case 6:
          break;
        case 9:
          swift_release();
          break;
        case 10:
          swift_bridgeObjectRelease();

          break;
        default:
          v4 = *(_DWORD *)a1 + 11;
          continue;
      }
      break;
    }
    v5 = *(unsigned __int8 *)(a2 + 64);
    while (2)
    {
      switch(v5)
      {
        case 0:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_BYTE *)(a1 + 64) = 0;
          goto LABEL_30;
        case 1:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          v6 = 1;
          goto LABEL_28;
        case 2:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v7 = 2;
          goto LABEL_24;
        case 3:
          v8 = *(_QWORD *)(a2 + 24);
          if (v8)
          {
            *(_QWORD *)(a1 + 24) = v8;
            (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
          }
          else
          {
            v12 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v12;
          }
          v13 = (_OWORD *)(a1 + 32);
          v14 = (_OWORD *)(a2 + 32);
          v15 = *(_QWORD *)(a2 + 56);
          if (v15)
          {
            *(_QWORD *)(a1 + 56) = v15;
            (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v13, v14);
          }
          else
          {
            v16 = *(_OWORD *)(a2 + 48);
            *v13 = *v14;
            *(_OWORD *)(a1 + 48) = v16;
          }
          v9 = 3;
          goto LABEL_38;
        case 4:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          *(_BYTE *)(a1 + 64) = 4;
          swift_bridgeObjectRetain();
          goto LABEL_29;
        case 5:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v7 = 5;
LABEL_24:
          *(_BYTE *)(a1 + 64) = v7;
          goto LABEL_30;
        case 6:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          v9 = 6;
          goto LABEL_38;
        case 7:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v6 = 7;
          goto LABEL_28;
        case 8:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          v6 = 8;
LABEL_28:
          *(_BYTE *)(a1 + 64) = v6;
LABEL_29:
          swift_bridgeObjectRetain();
LABEL_30:
          swift_bridgeObjectRetain();
          break;
        case 9:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_BYTE *)(a1 + 64) = 9;
          swift_retain();
          break;
        case 10:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v10 = *(void **)(a2 + 16);
          swift_bridgeObjectRetain();
          v11 = v10;
          *(_QWORD *)(a1 + 16) = v10;
          v9 = 10;
LABEL_38:
          *(_BYTE *)(a1 + 64) = v9;
          break;
        default:
          v5 = *(_DWORD *)a2 + 11;
          continue;
      }
      break;
    }
  }
  return a1;
}

void *__swift_memcpy65_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x41uLL);
}

uint64_t assignWithTake for SQLError(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 64);
    while (2)
    {
      switch(v4)
      {
        case 0:
        case 2:
        case 5:
          goto LABEL_11;
        case 1:
        case 7:
        case 8:
          swift_bridgeObjectRelease();
          goto LABEL_11;
        case 3:
          if (*(_QWORD *)(a1 + 24))
            __swift_destroy_boxed_opaque_existential_1Tm(a1);
          if (*(_QWORD *)(a1 + 56))
            __swift_destroy_boxed_opaque_existential_1Tm(a1 + 32);
          break;
        case 4:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_11:
          swift_bridgeObjectRelease();
          break;
        case 6:
          break;
        case 9:
          swift_release();
          break;
        case 10:
          swift_bridgeObjectRelease();

          break;
        default:
          v4 = *(_DWORD *)a1 + 11;
          continue;
      }
      break;
    }
    v5 = *(unsigned __int8 *)(a2 + 64);
    while (2)
    {
      switch(v5)
      {
        case 0:
          v6 = 0;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          break;
        case 1:
          v7 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v7;
          v6 = 1;
          break;
        case 2:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 2;
          break;
        case 3:
          v8 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v8;
          v9 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 48) = v9;
          v6 = 3;
          break;
        case 4:
          v10 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v10;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          v6 = 4;
          break;
        case 5:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 5;
          break;
        case 6:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          v6 = 6;
          break;
        case 7:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 7;
          break;
        case 8:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          v6 = 8;
          break;
        case 9:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v6 = 9;
          break;
        case 10:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          v6 = 10;
          break;
        default:
          v5 = *(_DWORD *)a2 + 11;
          continue;
      }
      break;
    }
    *(_BYTE *)(a1 + 64) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xF6 && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 246);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 >= 0xB)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SQLError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_BYTE *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 246;
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for SQLError(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 64);
  if (result >= 0xB)
    return (*(_DWORD *)a1 + 11);
  return result;
}

uint64_t destructiveInjectEnumTag for SQLError(uint64_t result, unsigned int a2)
{
  if (a2 > 0xA)
  {
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 11;
    LOBYTE(a2) = 11;
  }
  *(_BYTE *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SQLError()
{
  return &type metadata for SQLError;
}

void __swiftcall BMSQLDatabase.execute(query:)(BMSQLResultSet *__return_ptr retstr, Swift::String query)
{
  void *v2;
  _QWORD *v3;
  id v4;

  v3 = MEMORY[0x193FEC534](retstr, query._countAndFlagsBits, query._object);
  v4 = objc_msgSend(v2, sel__executeQuery_, v3);

}

BOOL static DataProtectionClass.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void DataProtectionClass.hash(into:)()
{
  OUTLINED_FUNCTION_2_7();
}

void DataProtectionClass.hashValue.getter()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  v0 = OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_3_5(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  Hasher._finalize()();
  OUTLINED_FUNCTION_46();
}

BOOL static Domain.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Domain.hash(into:)()
{
  OUTLINED_FUNCTION_2_7();
}

void Domain.hashValue.getter()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  v0 = OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_3_5(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  Hasher._finalize()();
  OUTLINED_FUNCTION_46();
}

unint64_t lazy protocol witness table accessor for type DataProtectionClass and conformance DataProtectionClass()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DataProtectionClass and conformance DataProtectionClass;
  if (!lazy protocol witness table cache variable for type DataProtectionClass and conformance DataProtectionClass)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for DataProtectionClass, &type metadata for DataProtectionClass);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataProtectionClass and conformance DataProtectionClass);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Domain and conformance Domain()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Domain and conformance Domain;
  if (!lazy protocol witness table cache variable for type Domain and conformance Domain)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for Domain, &type metadata for Domain);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Domain and conformance Domain);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DataProtectionClass(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 6) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v5 = v6 - 7;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DataProtectionClass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_18D927570 + 4 * byte_18DC0CA25[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_18D9275A4 + 4 * byte_18DC0CA20[v4]))();
}

uint64_t sub_18D9275A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18D9275AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18D9275B4);
  return result;
}

uint64_t sub_18D9275C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18D9275C8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_18D9275CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18D9275D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DataProtectionClass()
{
  return &type metadata for DataProtectionClass;
}

uint64_t storeEnumTagSinglePayload for Domain(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18D92763C + 4 * byte_18DC0CA2F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18D927670 + 4 * byte_18DC0CA2A[v4]))();
}

uint64_t sub_18D927670(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18D927678(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18D927680);
  return result;
}

uint64_t sub_18D92768C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18D927694);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18D927698(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18D9276A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Domain()
{
  return &type metadata for Domain;
}

uint64_t dispatch thunk of static DataResource.uuid.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static DataResource.domain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static DataResource.protectionClass.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t StoreStreamProtocol.identifier.getter(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  uint64_t v4;

  v2 = (void *)OUTLINED_FUNCTION_0_17(a1, a2);
  v3 = objc_msgSend(v2, sel_identifier);

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v4;
}

uint64_t StoreStreamProtocol.source()(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = (void *)OUTLINED_FUNCTION_0_17(a1, a2);
  v3 = objc_msgSend(v2, sel_source);

  objc_opt_self();
  return swift_dynamicCastObjCClassUnconditional();
}

uint64_t StoreStreamProtocol.publisher(with:)(uint64_t a1, uint64_t a2, double a3)
{
  void *v4;
  id v5;

  v4 = (void *)OUTLINED_FUNCTION_0_17(a1, a2);
  v5 = objc_msgSend(v4, sel_publisherFromStartTime_, a3);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BMStoreEvent);
  return BookmarkablePublisher.init(_:)();
}

uint64_t dispatch thunk of IdentifiableStream.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SourceStream.source()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TimeBasedBookmarkablePublisherStream.publisher(with:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void protocol witness for TimeBasedBookmarkablePublisherStream.publisher(with:) in conformance Streams.StoreStream<A>()
{
  OUTLINED_FUNCTION_1_10();
}

uint64_t sub_18D927848(uint64_t a1)
{
  uint64_t v1;
  double v2;

  return StoreStreamProtocol.publisher(with:)(v1, a1, v2);
}

void protocol witness for SourceStream.source() in conformance Streams.StoreStream<A>()
{
  OUTLINED_FUNCTION_1_10();
}

uint64_t sub_18D927888(uint64_t a1)
{
  uint64_t v1;

  return StoreStreamProtocol.source()(v1, a1);
}

void protocol witness for IdentifiableStream.identifier.getter in conformance Streams.StoreStream<A>()
{
  OUTLINED_FUNCTION_1_10();
}

uint64_t sub_18D9278B8(uint64_t a1)
{
  uint64_t v1;

  return StoreStreamProtocol.identifier.getter(v1, a1);
}

uint64_t type metadata completion function for OrderedDictionary.KeyWrapper()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for OrderedDictionary.KeyWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedDictionary.KeyWrapper);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x193FED734](a1, v6, a5);
}

uint64_t type metadata instantiation function for OrderedDictionary()
{
  return swift_allocateGenericValueMetadata();
}

_QWORD *initializeBufferWithCopyOfBuffer for OrderedDictionary(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for OrderedDictionary(id *a1)
{

  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for OrderedDictionary(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

id *assignWithTake for OrderedDictionary(id *a1, _OWORD *a2)
{

  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OrderedDictionary(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OrderedDictionary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for OrderedDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedDictionary);
}

uint64_t SQLDatabaseError.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if (*(_BYTE *)(v0 + 32))
  {
    v1 = *(_QWORD *)(v0 + 16);
    v2 = *(_QWORD *)(v0 + 24);
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_10_2();
    v3._countAndFlagsBits = OUTLINED_FUNCTION_5_2();
    String.append(_:)(v3);
    v4._countAndFlagsBits = 8238;
    v4._object = (void *)0xE200000000000000;
    String.append(_:)(v4);
    v5 = v1;
    v6 = v2;
  }
  else
  {
    v8 = 0;
    _StringGuts.grow(_:)(30);
    OUTLINED_FUNCTION_10_2();
    v5 = OUTLINED_FUNCTION_5_2();
  }
  String.append(_:)(*(Swift::String *)&v5);
  return v8;
}

uint64_t SQLDatabaseHandle.init(identifier:useCase:readOnly:)(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  sqlite3 *v46;
  id v47;
  Swift::String v48;
  Swift::String v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  _QWORD v68[4];
  int v69;
  id v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  sqlite3 *ppDb[3];
  uint64_t v88;
  uint64_t v89;

  ppDb[1] = *(sqlite3 **)MEMORY[0x1E0C80C00];
  v8 = type metadata accessor for URL.DirectoryHint();
  v77 = *(_QWORD *)(v8 - 8);
  v78 = v8;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_114();
  v12 = v11 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_114();
  v74 = v15 - v14;
  v79 = type metadata accessor for URL();
  v76 = *(_QWORD *)(v79 - 8);
  OUTLINED_FUNCTION_0();
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v75 = (char *)v68 - v20;
  type metadata accessor for BMResourceSpecifier();
  swift_bridgeObjectRetain();
  v73 = a1;
  v21 = BMResourceSpecifier.__allocating_init(type:name:)(3, a1, a2);
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D01CC0]), sel_initWithUseCase_, a3);
  v23 = v22;
  if ((a4 & 1) != 0)
    v24 = 1;
  else
    v24 = 3;
  v85 = 0;
  v25 = objc_msgSend(v22, sel_requestAccessToResource_mode_error_, v21, v24, &v85);
  v26 = (id)v85;
  if (!v25)
  {
    v47 = (id)v85;
    OUTLINED_FUNCTION_45();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v29 = v80;
LABEL_16:
    type metadata accessor for SQLDatabaseHandle();
    swift_deallocPartialClassInstance();
    return v29;
  }
  v27 = v25;
  v69 = a4;
  v72 = v23;
  v70 = v21;
  v71 = a3;
  v28 = OBJC_IVAR____TtC12BiomeStreams17SQLDatabaseHandle_assertion;
  v29 = v80;
  *(_QWORD *)(v80 + OBJC_IVAR____TtC12BiomeStreams17SQLDatabaseHandle_assertion) = v25;
  v30 = v26;
  v31 = objc_msgSend(v27, sel_path);
  if (!v31)
  {
    OUTLINED_FUNCTION_45();
    v85 = 0;
    v86 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    v48._object = (void *)0x800000018DCC2AA0;
    v48._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v48);
    v83 = *(_QWORD *)(v29 + v28);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BMAccessAssertion);
    _print_unlocked<A, B>(_:_:)();
    v49._countAndFlagsBits = 0x6E20612073616820;
    v49._object = (void *)0xEF68746170206C69;
    String.append(_:)(v49);
    v51 = v85;
    v50 = v86;
    lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
    v52 = OUTLINED_FUNCTION_13_0();
    *v53 = v51;
    v53[1] = v50;
    OUTLINED_FUNCTION_9_2(v52, (uint64_t)v53);
    OUTLINED_FUNCTION_2_8((uint64_t)&v88);
    OUTLINED_FUNCTION_12_3();
    OUTLINED_FUNCTION_2_8((uint64_t)&v89);
LABEL_15:
    swift_unknownObjectRelease();
    goto LABEL_16;
  }
  v32 = v31;
  v68[1] = v28;
  v68[3] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v68[2] = v33;

  v85 = 0x336574696C71732ELL;
  v86 = 0xE800000000000000;
  v83 = v73;
  v84 = a2;
  swift_bridgeObjectRetain();
  v83 = String.init<A>(_:)();
  v84 = v34;
  String.append<A>(contentsOf:)();
  OUTLINED_FUNCTION_45();
  v35 = v84;
  v73 = v83;
  v36 = v79;
  __swift_storeEnumTagSinglePayload(v74, 1, 1, v79);
  v38 = v77;
  v37 = v78;
  OUTLINED_FUNCTION_8_2();
  URL.init(filePath:directoryHint:relativeTo:)();
  v85 = v73;
  v86 = v35;
  OUTLINED_FUNCTION_8_2();
  lazy protocol witness table accessor for type String and conformance String();
  v39 = v75;
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v12, v37);
  v40 = v76;
  v41 = *(void (**)(char *, uint64_t))(v76 + 8);
  v41(v19, v36);
  swift_bridgeObjectRelease();
  URL.standardizedFileURL.getter();
  v41(v39, v36);
  v29 = v80;
  v42 = (char *)(v80 + OBJC_IVAR____TtC12BiomeStreams17SQLDatabaseHandle_databaseFileURL);
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v80 + OBJC_IVAR____TtC12BiomeStreams17SQLDatabaseHandle_databaseFileURL, v19, v36);
  ppDb[0] = 0;
  if ((v69 & 1) != 0)
    v43 = 1;
  else
    v43 = 6;
  URL.path.getter();
  v44 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v45 = sqlite3_open_v2((const char *)(v44 + 32), ppDb, v43, 0);
  swift_release();
  v46 = ppDb[0];
  if ((_DWORD)v45 || !ppDb[0])
  {
    v54 = BMSQLDatabaseError(v45, ppDb[0], 0);
    swift_getErrorValue();
    v55 = Error.localizedDescription.getter();
    v57 = v56;

    v85 = v55;
    v86 = v57;
    OUTLINED_FUNCTION_0_18();
    v83 = v58;
    v84 = v59;
    OUTLINED_FUNCTION_1_11();
    v81 = v60;
    v82 = v61;
    OUTLINED_FUNCTION_6_4();
    v62 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v64 = v63;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
    v65 = OUTLINED_FUNCTION_13_0();
    *v66 = v62;
    v66[1] = v64;
    OUTLINED_FUNCTION_9_2(v65, (uint64_t)v66);
    OUTLINED_FUNCTION_2_8((uint64_t)&v88);
    OUTLINED_FUNCTION_12_3();
    OUTLINED_FUNCTION_2_8((uint64_t)&v89);
    v41(v42, v79);
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_2_8((uint64_t)&v88);
  OUTLINED_FUNCTION_12_3();
  OUTLINED_FUNCTION_2_8((uint64_t)&v89);
  *(_QWORD *)(v29 + OBJC_IVAR____TtC12BiomeStreams17SQLDatabaseHandle_db) = v46;
  return v29;
}

id BMResourceSpecifier.__allocating_init(type:name:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  id v8;

  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v7 = (void *)MEMORY[0x193FEC534](a2, a3);
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithType_name_, a1, v7);

  return v8;
}

uint64_t SQLDatabaseHandle.deinit()
{
  uint64_t v0;
  uint64_t v1;
  sqlite3 *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18[2];

  v1 = v0;
  v2 = *(sqlite3 **)(v0 + OBJC_IVAR____TtC12BiomeStreams17SQLDatabaseHandle_db);
  v3 = sqlite3_close_v2(v2);
  if ((_DWORD)v3)
  {
    v4 = BMSQLDatabaseError(v3, v2, 0);
    swift_getErrorValue();
    v5 = Error.localizedDescription.getter();
    v7 = v6;

    v18[0] = v5;
    v18[1] = v7;
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_1_11();
    lazy protocol witness table accessor for type String and conformance String();
    OUTLINED_FUNCTION_6_4();
    v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v10 = v9;
    swift_bridgeObjectRelease();
    if (one-time initialization token for SQL != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logging.SQL);
    swift_bridgeObjectRetain();
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v18[0] = swift_slowAlloc();
      *(_DWORD *)v14 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_18D810000, v12, v13, "SQLDatabaseHandle: Failed to close database connection with error: %s", v14, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_14();
    }

    swift_bridgeObjectRelease_n();
  }
  v15 = v1 + OBJC_IVAR____TtC12BiomeStreams17SQLDatabaseHandle_databaseFileURL;
  v16 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t SQLDatabaseHandle.__deallocating_deinit()
{
  SQLDatabaseHandle.deinit();
  return swift_deallocClassInstance();
}

Swift::OpaquePointer_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLResultSet.next()()
{
  void *v0;
  Swift::OpaquePointer_optional result;

  v0 = 0;
  result.value._rawValue = v0;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLDatabase.execute(statement:)(Swift::String statement)
{
  uint64_t *v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  sqlite3 *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *errmsg[2];

  object = statement._object;
  countAndFlagsBits = statement._countAndFlagsBits;
  errmsg[1] = *(char **)MEMORY[0x1E0C80C00];
  type metadata accessor for String.Encoding();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_114();
  v5 = *v1;
  errmsg[0] = 0;
  v6 = *(sqlite3 **)(v5 + OBJC_IVAR____TtC12BiomeStreams17SQLDatabaseHandle_db);
  v7 = String.utf8CString.getter();
  LODWORD(v6) = sqlite3_exec(v6, (const char *)(v7 + 32), 0, 0, errmsg);
  swift_release();
  if ((_DWORD)v6)
  {
    v8 = 0xEF3E726F72726520;
    v9 = 0x6E776F6E6B6E553CLL;
    if (errmsg[0])
    {
      static String.Encoding.utf8.getter();
      v10 = String.init(cString:encoding:)();
      if (v11)
      {
        v9 = v10;
        v8 = v11;
      }
    }
    lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
    OUTLINED_FUNCTION_13_0();
    *(_QWORD *)v12 = countAndFlagsBits;
    *(_QWORD *)(v12 + 8) = object;
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v8;
    *(_BYTE *)(v12 + 32) = 1;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }
}

uint64_t SQLDatabase.databasePath()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC12BiomeStreams17SQLDatabaseHandle_databaseFileURL;
  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t outlined copy of SQLDatabaseError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  result = a2;
  if (a5 - 1 < 2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  if (!a5)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for SQLDatabaseError(uint64_t a1)
{
  return outlined consume of SQLDatabaseError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t outlined consume of SQLDatabaseError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  result = a2;
  if (a5 - 1 < 2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (!a5)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for SQLDatabaseError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of SQLDatabaseError(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for SQLDatabaseError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of SQLDatabaseError(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of SQLDatabaseError(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SQLDatabaseError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of SQLDatabaseError(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLDatabaseError(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLDatabaseError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for SQLDatabaseError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for SQLDatabaseError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

void type metadata accessor for SQLDatabaseError()
{
  OUTLINED_FUNCTION_11_0();
}

uint64_t ObjC metadata update function for SQLDatabaseHandle()
{
  return type metadata accessor for SQLDatabaseHandle();
}

uint64_t type metadata accessor for SQLDatabaseHandle()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SQLDatabaseHandle;
  if (!type metadata singleton initialization cache for SQLDatabaseHandle)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for SQLDatabaseHandle()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void type metadata accessor for SQLResultSet()
{
  OUTLINED_FUNCTION_11_0();
}

void type metadata accessor for SQLDatabase()
{
  OUTLINED_FUNCTION_11_0();
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x193FED7A0](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x193FED7A0](MEMORY[0x1E0DEA980], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x193FED7A0](MEMORY[0x1E0DEA9A8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SQLDatabaseError and conformance SQLDatabaseError;
  if (!lazy protocol witness table cache variable for type SQLDatabaseError and conformance SQLDatabaseError)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for SQLDatabaseError, &type metadata for SQLDatabaseError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SQLDatabaseError and conformance SQLDatabaseError);
  }
  return result;
}

unint64_t type metadata accessor for BMResourceSpecifier()
{
  unint64_t result;

  result = lazy cache variable for type metadata for BMResourceSpecifier;
  if (!lazy cache variable for type metadata for BMResourceSpecifier)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BMResourceSpecifier);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12BiomeStreams26MaterializedViewDefinitionVG_AF0fG12PhysicalPlanVsAE_pTg5(void (*a1)(_QWORD *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  void (*v20)(_QWORD *, uint64_t *);
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[6];
  uint64_t v24;

  v4 = v3;
  v20 = a1;
  v21 = a2;
  v6 = type metadata accessor for MaterializedViewPhysicalPlan(0);
  v19 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  if (v9)
  {
    v24 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v10 = v24;
    v11 = (uint64_t *)(a3 + 72);
    while (1)
    {
      v12 = *(v11 - 4);
      v13 = *(v11 - 3);
      v14 = *(v11 - 2);
      v15 = *(v11 - 1);
      v16 = *v11;
      v23[0] = *(v11 - 5);
      v23[1] = v12;
      v23[2] = v13;
      v23[3] = v14;
      v23[4] = v15;
      v23[5] = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v20(v23, &v22);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = v10;
      v17 = *(_QWORD *)(v10 + 16);
      if (v17 >= *(_QWORD *)(v10 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v10 = v24;
      }
      v11 += 6;
      *(_QWORD *)(v10 + 16) = v17 + 1;
      outlined init with take of StorableValue((uint64_t)v8, v10+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(_QWORD *)(v19 + 72) * v17, type metadata accessor for MaterializedViewPhysicalPlan);
      if (!--v9)
        return v10;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t DatabaseWithAccess.deinit()
{
  uint64_t v0;
  uint64_t v1;
  sqlite3 *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v17[2];

  v1 = v0;
  v2 = *(sqlite3 **)(v0 + 16);
  v3 = sqlite3_close_v2(v2);
  if ((_DWORD)v3)
  {
    v4 = BMSQLDatabaseError(v3, v2, 0);
    swift_getErrorValue();
    v5 = Error.localizedDescription.getter();
    v7 = v6;

    v17[0] = v5;
    v17[1] = v7;
    lazy protocol witness table accessor for type String and conformance String();
    v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v10 = v9;
    swift_bridgeObjectRelease();
    if (one-time initialization token for SQL != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logging.SQL);
    swift_bridgeObjectRetain();
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v17[0] = v15;
      *(_DWORD *)v14 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_18D810000, v12, v13, "SQLExpressionEvaluator: Failed to close database connection with error: %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x193FED860](v15, -1, -1);
      MEMORY[0x193FED860](v14, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  swift_unknownObjectRelease();
  return v1;
}

uint64_t DatabaseWithAccess.__deallocating_deinit()
{
  DatabaseWithAccess.deinit();
  return swift_deallocClassInstance();
}

void IncrementalViewManager.__allocating_init()()
{
  swift_allocObject();
  IncrementalViewManager.init()();
  OUTLINED_FUNCTION_1();
}

_QWORD *IncrementalViewManager.init()()
{
  void *v0;
  uint64_t v1;
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  ValueMetadata *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void (**object)(uint64_t, uint64_t, _QWORD *);
  uint64_t v17;
  uint64_t v18;
  uint64_t countAndFlagsBits;
  uint64_t v20;
  uint64_t v21;
  char v22;
  id v23;
  unint64_t v24;
  _QWORD *v25;
  id v26;
  BOOL v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::OpaquePointer v46;
  id v47;
  id v48;
  Swift::String v49;
  id v50;
  id v51;
  Swift::String v52;
  Swift::OpaquePointer v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v75;
  uint64_t v76;
  _QWORD *result;
  uint64_t v78;
  Swift::String v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  _QWORD *v87;
  id v88;
  uint64_t (**v89)(void);
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  __int128 v93;
  _QWORD *v94;
  unint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  _QWORD *v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD v113[2];
  _QWORD v114[5];
  char v115[8];
  BiomeSQLParser::Schema v116;

  v3 = v0;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SQLDataType));
  v110 = *(_QWORD *)(v4 - 8);
  v111 = v4;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_76_0();
  v6 = type metadata accessor for DatabaseCatalog();
  OUTLINED_FUNCTION_160((uint64_t)v6, (uint64_t)v115);
  OUTLINED_FUNCTION_3_6(v7);
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_8();
  v98 = v9;
  v10 = (_QWORD *)type metadata accessor for Logger();
  OUTLINED_FUNCTION_97_0();
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_114();
  v14 = v13 - v12;
  v15 = (_QWORD *)type metadata accessor for OSSignposter();
  object = (void (**)(uint64_t, uint64_t, _QWORD *))*(v15 - 1);
  MEMORY[0x1E0C80A78](v15);
  OUTLINED_FUNCTION_114();
  countAndFlagsBits = v18 - v17;
  v20 = OBJC_IVAR____TtC12BiomeStreams22IncrementalViewManager_cachedDatabaseWithAccesses;
  type metadata accessor for DatabaseWithAccess();
  *(_QWORD *)((char *)v3 + v20) = Dictionary.init(dictionaryLiteral:)();
  if (one-time initialization token for compute != -1)
    goto LABEL_43;
  while (1)
  {
    v21 = __swift_project_value_buffer((uint64_t)v10, (uint64_t)static Logging.compute);
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(v1 + 16))(v14, v21, v10);
    OSSignposter.init(logger:)();
    object[4]((uint64_t)v3 + OBJC_IVAR____TtC12BiomeStreams22IncrementalViewManager_signposter, countAndFlagsBits, v15);
    v114[3] = &unk_1E2636AA0;
    v114[4] = lazy protocol witness table accessor for type IPCSFeatureFlag and conformance IPCSFeatureFlag();
    v22 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v114);
    *((_BYTE *)v3 + OBJC_IVAR____TtC12BiomeStreams22IncrementalViewManager_useCache) = (v22 & 1) == 0;
    type metadata accessor for SQLExpressionEvaluator();
    swift_allocObject();
    v14 = 0;
    v97 = SQLExpressionEvaluator.init(isReadOnly:)(1);
    v109 = 0;
    v87 = v3;
    v90 = static DaemonLibrary.root;
    if (!static DaemonLibrary.root)
      goto LABEL_76;
    v89 = (uint64_t (**)(void))off_1EE082870;
    v96 = BiomeLibraryNodeBridge();
    v88 = BiomeLibraryNodeBridge();
    v23 = objc_msgSend(v88, sel_allStreams);
    type metadata accessor for BMStreamBase(0, (unint64_t *)&lazy cache variable for type metadata for BMStreamBase);
    v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v114[0] = MEMORY[0x1E0DEE9D8];
    v92 = v24;
    if (!(v24 >> 62))
    {
      v10 = *(_QWORD **)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
      OUTLINED_FUNCTION_141();
      if (!v10)
        break;
      goto LABEL_5;
    }
    swift_bridgeObjectRetain_n();
    v10 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_24();
    if (!v10)
      break;
LABEL_5:
    v25 = 0;
    v95 = v92 & 0xC000000000000001;
    v91 = v92 + 32;
    v108 = 2;
    v107 = 0;
    v106 = 1;
    v105 = 3;
    v104 = 4;
    v103 = 6;
    v102 = 5;
    v101 = 7;
    v93 = xmmword_18DC0CE10;
    v94 = v10;
    while (1)
    {
      v26 = v95 ? (id)MEMORY[0x193FEC81C](v25, v92) : *(id *)(v91 + 8 * (_QWORD)v25);
      v27 = __OFADD__(v25, 1);
      v15 = (_QWORD *)((char *)v25 + 1);
      if (v27)
        break;
      v99 = v26;
      v100 = v15;
      v10 = objc_msgSend(v26, sel_schema);
      v28 = objc_msgSend(v10, sel_columns);

      type metadata accessor for BMStreamBase(0, &lazy cache variable for type metadata for BMSQLColumn);
      v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if ((unint64_t)v29 >> 62)
      {
        if (v29 < 0)
          v10 = (_QWORD *)v29;
        else
          v10 = (_QWORD *)(v29 & 0xFFFFFFFFFFFFFF8);
        swift_bridgeObjectRetain();
        countAndFlagsBits = _CocoaArrayWrapper.endIndex.getter();
        OUTLINED_FUNCTION_45();
        if (countAndFlagsBits)
        {
LABEL_12:
          v113[0] = MEMORY[0x1E0DEE9D8];
          v15 = v113;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          if (countAndFlagsBits < 0)
            goto LABEL_42;
          v3 = 0;
          v30 = v113[0];
          v112 = v29 & 0xC000000000000001;
          v31 = v29;
          do
          {
            if (v112)
              v32 = (id)MEMORY[0x193FEC81C](v3, v29);
            else
              v32 = *(id *)(v29 + 8 * (_QWORD)v3 + 32);
            v33 = v32;
            v34 = objc_msgSend(v32, sel_name);
            v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v37 = v36;

            *v2 = v35;
            v2[1] = v37;
            switch((unint64_t)objc_msgSend(v33, sel_dataType))
            {
              case 0uLL:
                OUTLINED_FUNCTION_33();
                v38 = OUTLINED_FUNCTION_4_9();
                v40 = v107;
                break;
              case 1uLL:
                OUTLINED_FUNCTION_33();
                v38 = OUTLINED_FUNCTION_4_9();
                v40 = v106;
                break;
              case 2uLL:
                OUTLINED_FUNCTION_33();
                v38 = OUTLINED_FUNCTION_4_9();
                v40 = v108;
                break;
              case 3uLL:
                OUTLINED_FUNCTION_33();
                v38 = OUTLINED_FUNCTION_4_9();
                v40 = v105;
                break;
              case 4uLL:
                OUTLINED_FUNCTION_33();
                v38 = OUTLINED_FUNCTION_4_9();
                v40 = v104;
                break;
              case 5uLL:
                OUTLINED_FUNCTION_33();
                v38 = OUTLINED_FUNCTION_4_9();
                v40 = v102;
                break;
              case 6uLL:
                OUTLINED_FUNCTION_33();
                v38 = OUTLINED_FUNCTION_4_9();
                v40 = v103;
                break;
              default:
                OUTLINED_FUNCTION_33();
                v38 = OUTLINED_FUNCTION_4_9();
                v40 = v101;
                break;
            }
            v39(v38, v40);
            v29 = v31;

            v113[0] = v30;
            v41 = *(_QWORD *)(v30 + 16);
            if (v41 >= *(_QWORD *)(v30 + 24) >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              v30 = v113[0];
            }
            v3 = (char *)v3 + 1;
            *(_QWORD *)(v30 + 16) = v41 + 1;
            OUTLINED_FUNCTION_57_0();
            outlined init with take of UUID?((uint64_t)v2, v30 + v42 + *(_QWORD *)(v43 + 72) * v41, &demangling cache variable for type metadata for (String, SQLDataType));
          }
          while ((void *)countAndFlagsBits != v3);
          OUTLINED_FUNCTION_45();
          goto LABEL_35;
        }
      }
      else
      {
        countAndFlagsBits = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (countAndFlagsBits)
          goto LABEL_12;
      }
      OUTLINED_FUNCTION_45();
      v30 = MEMORY[0x1E0DEE9D8];
LABEL_35:
      if (*(_QWORD *)(v30 + 16))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SQLDataType>);
        v44 = static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v44 = MEMORY[0x1E0DEE9E0];
      }
      v113[0] = v44;
      v45 = swift_bridgeObjectRetain();
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v45, 1, v113);
      if (v109)
        goto LABEL_72;
      OUTLINED_FUNCTION_64();
      v46._rawValue = (void *)v113[0];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Schema>);
      v1 = *((_QWORD *)type metadata accessor for Schema()[-1].Description + 9);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = v93;
      v47 = objc_msgSend(v99, sel_schema);
      v48 = objc_msgSend(v47, sel_tableName);

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_115_0();
      swift_retain();
      v49._countAndFlagsBits = (uint64_t)v47;
      v49._object = v3;
      v116 = Schema.init(tableName:columns:)(v49, v46);
      v50 = objc_msgSend(v99, sel_schema, v116.columns._rawValue);
      v51 = objc_msgSend(v50, sel_tableName);

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_115_0();
      v52 = String.lowercased()();
      countAndFlagsBits = v52._countAndFlagsBits;
      object = (void (**)(uint64_t, uint64_t, _QWORD *))v52._object;
      swift_bridgeObjectRelease();
      Schema.init(tableName:columns:)(v52, v46);

      specialized Array.append<A>(contentsOf:)(v14, (uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<Schema>, (uint64_t (*)(_QWORD))type metadata accessor for Schema);
      v10 = v94;
      v25 = v100;
      if (v100 == v94)
      {
        OUTLINED_FUNCTION_106_0();
        v53._rawValue = (void *)v114[0];
        goto LABEL_46;
      }
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    swift_once();
  }
  OUTLINED_FUNCTION_106_0();
  v53._rawValue = (void *)MEMORY[0x1E0DEE9D8];
LABEL_46:
  DatabaseCatalog.init(schemas:)(v53);
  swift_unknownObjectRelease();
  v54 = v89[1]();
  v55 = *(_QWORD *)(v54 + 16);
  v112 = v54;
  if (v55)
  {
    v56 = v54 + 40;
    v57 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v58 = (*(uint64_t (**)(void))(*(_QWORD *)v56 + 16))();
      MEMORY[0x1E0C80A78](v58);
      v82 = v98;
      v83 = v96;
      v84 = v97;
      v59 = v109;
      v60 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12BiomeStreams26MaterializedViewDefinitionVG_AF0fG12PhysicalPlanVsAE_pTg5((void (*)(_QWORD *, uint64_t *))partial apply for closure #1 in closure #1 in IncrementalViewManager.init(), (uint64_t)(&v86 - 6), v58);
      v109 = v59;
      if (v59)
        goto LABEL_73;
      v61 = v60;
      OUTLINED_FUNCTION_8_1();
      v62 = *(_QWORD *)(v61 + 16);
      v63 = *(_QWORD *)(v57 + 16);
      if (__OFADD__(v63, v62))
        break;
      if (!swift_isUniquelyReferenced_nonNull_native() || v63 + v62 > *(_QWORD *)(v57 + 24) >> 1)
        v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (*(_QWORD *)(v61 + 16))
      {
        v64 = *(_QWORD *)(v57 + 16);
        v65 = (*(_QWORD *)(v57 + 24) >> 1) - v64;
        type metadata accessor for MaterializedViewPhysicalPlan(0);
        if (v65 < v62)
          goto LABEL_70;
        OUTLINED_FUNCTION_168();
        v68 = *(_QWORD *)(v67 + 72);
        v69 = v57 + v66 + v68 * v64;
        v70 = v61 + v66;
        v71 = v68 * v62;
        v72 = v69 + v71;
        v73 = v70 + v71;
        if (v70 < v72 && v69 < v73)
        {
          while (1)
          {
            OUTLINED_FUNCTION_0_19();
            OUTLINED_FUNCTION_9_3();
            __break(1u);
LABEL_76:
            lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError();
            v80 = swift_allocError();
            *(_QWORD *)v81 = 0;
            *(_QWORD *)(v81 + 8) = 0;
            *(_BYTE *)(v81 + 16) = 4;
            v109 = v80;
            swift_willThrow();
            swift_release();
LABEL_74:
            v114[0] = 0;
            v114[1] = 0xE000000000000000;
            _StringGuts.grow(_:)(46);
            v79._object = (void *)0x800000018DCC2AF0;
            v79._countAndFlagsBits = 0xD00000000000002CLL;
            String.append(_:)(v79);
            v113[0] = v109;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
            _print_unlocked<A, B>(_:_:)();
            v85 = 0;
            v84 = 86;
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
        }
        swift_arrayInitWithCopy();
        if (v62)
        {
          v75 = *(_QWORD *)(v57 + 16);
          v27 = __OFADD__(v75, v62);
          v76 = v75 + v62;
          if (v27)
            goto LABEL_71;
          *(_QWORD *)(v57 + 16) = v76;
        }
      }
      else if (v62)
      {
        goto LABEL_69;
      }
      OUTLINED_FUNCTION_24();
      v56 += 16;
      if (!--v55)
        goto LABEL_67;
    }
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    swift_unexpectedError();
    __break(1u);
LABEL_73:
    swift_bridgeObjectRelease();
    swift_release();
    OUTLINED_FUNCTION_64();
    OUTLINED_FUNCTION_8_1();
    swift_unknownObjectRelease();
    OUTLINED_FUNCTION_42_0();
    goto LABEL_74;
  }
  v57 = MEMORY[0x1E0DEE9D8];
LABEL_67:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_42_0();
  result = v87;
  v78 = v97;
  v87[2] = v57;
  result[3] = v78;
  return result;
}

void closure #1 in closure #1 in IncrementalViewManager.init()(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  ValueMetadata *v23;
  void (**v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void (**v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  unsigned int (**v38)(uint64_t, ValueMetadata *);
  ValueMetadata *v39;
  void (**v40)(char *, uint64_t, ValueMetadata *);
  char *v41;
  ValueMetadata *v42;
  void (*v43)(char *, uint64_t, ValueMetadata *);
  char *v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ValueMetadata *v51;
  uint64_t v52;
  uint64_t v53;
  ValueMetadata *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  ValueMetadata *v59;
  id v60;
  uint64_t v61;
  ValueMetadata **v62;
  uint64_t inited;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  Swift::Int v68;
  ValueMetadata *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t Kind;
  _QWORD *v76;
  BOOL v77;
  uint64_t v78;
  _QWORD *v79;
  BOOL v80;
  _QWORD *v81;
  BOOL v82;
  _QWORD *v83;
  BOOL v84;
  _QWORD *v85;
  BOOL v86;
  uint64_t v87;
  ValueMetadata *v88;
  uint64_t v89;
  void (**v90)(uint64_t, ValueMetadata *);
  ValueMetadata *v91;
  id v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t, ValueMetadata *);
  _QWORD *v97;
  BOOL v98;
  _QWORD *v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t, ValueMetadata *);
  ValueMetadata *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  void (**v115)(char *, char *, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  ValueMetadata **v119;
  uint64_t v120;
  uint64_t v121;
  void (**Description)(uint64_t, ValueMetadata *);
  ValueMetadata *v123;
  uint64_t v124;
  uint64_t v125;
  void (**v126)(uint64_t, ValueMetadata *);
  ValueMetadata *v127;
  char *v128;
  void *v129;
  ValueMetadata *v130;
  char *v131;
  void (**v132)(char *, uint64_t, ValueMetadata *);
  char *v133;
  unsigned int (**v134)(uint64_t, ValueMetadata *);
  uint64_t v135;
  ValueMetadata *v136;
  uint64_t v137;
  ValueMetadata *v138;
  uint64_t *v139;
  id v140[16];

  v139 = a5;
  v125 = a4;
  v129 = a3;
  v116 = a6;
  v140[15] = *(id *)MEMORY[0x1E0C80C00];
  v123 = type metadata accessor for FromClause();
  Description = (void (**)(uint64_t, ValueMetadata *))v123[-1].Description;
  MEMORY[0x1E0C80A78](v123);
  v121 = (uint64_t)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Schema?);
  MEMORY[0x1E0C80A78](v9);
  v124 = (uint64_t)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for SelectCore();
  v126 = (void (**)(uint64_t, ValueMetadata *))v127[-1].Description;
  MEMORY[0x1E0C80A78](v127);
  v137 = (uint64_t)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for SelectCorePhysicalPlan(0);
  v12 = MEMORY[0x1E0C80A78](v120);
  v119 = (ValueMetadata **)((char *)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v12);
  v118 = (uint64_t)&v111 - v14;
  v117 = type metadata accessor for MaterializedViewPhysicalPlan(0);
  MEMORY[0x1E0C80A78](v117);
  v128 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = type metadata accessor for LogicalPlanType();
  v134 = (unsigned int (**)(uint64_t, ValueMetadata *))v136[-1].Description;
  MEMORY[0x1E0C80A78](v136);
  v135 = (uint64_t)&v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for MaterializedView();
  v132 = (void (**)(char *, uint64_t, ValueMetadata *))v130[-1].Description;
  v17 = MEMORY[0x1E0C80A78](v130);
  v131 = (char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v133 = (char *)&v111 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogicalPlan?);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v111 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for LogicalPlan();
  v24 = (void (**)(char *, char *, uint64_t))v23[-1].Description;
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v111 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = a1[2];
  v27 = a1[3];
  v29 = a1[4];
  v30 = a1[5];
  v31 = (uint64_t)v138;
  parse(sql:catalog:)(v28, v27, a2);
  v33 = v139;
  if (v31)
    goto LABEL_12;
  v112 = v29;
  v113 = v30;
  v114 = v26;
  v115 = v24;
  v138 = v23;
  if (*(_QWORD *)(v32 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v111 = 0;
  specialized Collection.first.getter(v32, (uint64_t)v22);
  swift_bridgeObjectRelease();
  v34 = (uint64_t)v138;
  if (__swift_getEnumTagSinglePayload((uint64_t)v22, 1, (uint64_t)v138) != 1)
  {
    v35 = v115;
    v36 = v114;
    v115[4](v114, v22, v34);
    v37 = v135;
    LogicalPlan.plan.getter(v135);
    v38 = v134;
    v39 = v136;
    if (v134[11](v37, v136) != 1)
    {
      ((void (*)(char *, uint64_t))v35[1])(v36, v34);
      v38[1](v37, v39);
      goto LABEL_10;
    }
    v38[12](v37, v39);
    v40 = v132;
    v41 = v133;
    v42 = v130;
    v132[4](v133, v37, v130);
    v43 = v40[2];
    v44 = v131;
    v43(v131, (uint64_t)v41, v42);
    v45 = v128;
    v43(v128, (uint64_t)v44, v42);
    v46 = v129;
    swift_unknownObjectRetain();
    v47 = v125;
    swift_retain();
    swift_bridgeObjectRetain();
    MaterializedView.select.getter(v137);
    swift_retain();
    v48 = v121;
    SelectCore.from.getter(v121);
    v49 = FromClause.schemas.getter();
    Description[1](v48, v123);
    v50 = v124;
    specialized Collection.first.getter(v49, v124);
    swift_bridgeObjectRelease();
    v51 = type metadata accessor for Schema();
    if (__swift_getEnumTagSinglePayload(v50, 1, (uint64_t)v51) == 1)
    {
      outlined destroy of UUID?(v50, &demangling cache variable for type metadata for Schema?);
      v52 = 0;
      v53 = 0;
      v54 = v127;
LABEL_47:
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      v94 = swift_allocError();
      *(_QWORD *)v95 = v52;
      *(_QWORD *)(v95 + 8) = v53;
      *(_BYTE *)(v95 + 64) = 5;
      swift_willThrow();
      swift_unknownObjectRelease();
      swift_release();
      v126[1](v137, v54);
      swift_release();
      swift_bridgeObjectRelease();
      v96 = v132[1];
      ((void (*)(char *, ValueMetadata *))v96)(v131, v42);
      ((void (*)(char *, ValueMetadata *))v96)(v45, v42);
      ((void (*)(char *, ValueMetadata *))v96)(v133, v42);
      ((void (*)(char *, ValueMetadata *))v115[1])(v114, v138);
      v31 = v94;
      goto LABEL_11;
    }
    v52 = Schema.tableName.getter();
    v53 = v57;
    (*((void (**)(uint64_t, ValueMetadata *))v51[-1].Description + 1))(v50, v51);
    swift_bridgeObjectRetain();
    v58 = (void *)MEMORY[0x193FEC534](v52, v53);
    v140[0] = 0;
    v59 = (ValueMetadata *)objc_msgSend(v46, sel_streamWithIdentifier_error_, v58, v140);

    v54 = v127;
    if (!v59)
    {
      v92 = v140[0];
      swift_bridgeObjectRelease();
      v93 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      v42 = v130;
      goto LABEL_47;
    }
    v60 = v140[0];
    swift_bridgeObjectRelease();
    v61 = v120;
    v62 = v119;
    ((void (*)(char *, uint64_t, ValueMetadata *))v126[2])((char *)v119 + *(int *)(v120 + 20), v137, v54);
    *(ValueMetadata **)((char *)v62 + *(int *)(v61 + 24)) = v59;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18DC0CE20;
    *(_QWORD *)(inited + 32) = v52;
    *(_QWORD *)(inited + 40) = v53;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
    v64 = static _SetStorage.allocate(capacity:)();
    v65 = v64 + 56;
    v139 = v59;
    v66 = *(_QWORD *)(inited + 32);
    v67 = *(_QWORD *)(inited + 40);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v68 = Hasher._finalize()();
    v69 = (ValueMetadata *)v64;
    v70 = -1 << *(_BYTE *)(v64 + 32);
    v71 = v68 & ~v70;
    v72 = v71 >> 6;
    v73 = *(_QWORD *)(v65 + 8 * (v71 >> 6));
    v74 = 1 << v71;
    if (((1 << v71) & v73) != 0)
    {
      v136 = v69;
      Kind = v69[3].Kind;
      v76 = (_QWORD *)(Kind + 16 * v71);
      v77 = *v76 == v66 && v76[1] == v67;
      if (v77 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_45;
      v78 = ~v70;
      v71 = (v71 + 1) & v78;
      v72 = v71 >> 6;
      v73 = *(_QWORD *)(v65 + 8 * (v71 >> 6));
      v74 = 1 << v71;
      if ((v73 & (1 << v71)) != 0)
      {
        v79 = (_QWORD *)(Kind + 16 * v71);
        v80 = *v79 == v66 && v79[1] == v67;
        if (v80 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_45;
        v71 = (v71 + 1) & v78;
        v72 = v71 >> 6;
        v73 = *(_QWORD *)(v65 + 8 * (v71 >> 6));
        v74 = 1 << v71;
        if ((v73 & (1 << v71)) != 0)
        {
          v81 = (_QWORD *)(Kind + 16 * v71);
          v82 = *v81 == v66 && v81[1] == v67;
          if (v82 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_45;
          v71 = (v71 + 1) & v78;
          v72 = v71 >> 6;
          v73 = *(_QWORD *)(v65 + 8 * (v71 >> 6));
          v74 = 1 << v71;
          if ((v73 & (1 << v71)) != 0)
          {
            v83 = (_QWORD *)(Kind + 16 * v71);
            v84 = *v83 == v66 && v83[1] == v67;
            v47 = v125;
            if (v84 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_45;
            v71 = (v71 + 1) & v78;
            v72 = v71 >> 6;
            v73 = *(_QWORD *)(v65 + 8 * (v71 >> 6));
            v74 = 1 << v71;
            if ((v73 & (1 << v71)) != 0)
            {
              v85 = (_QWORD *)(Kind + 16 * v71);
              v86 = *v85 == v66 && v85[1] == v67;
              v47 = v125;
              if (v86 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
LABEL_45:
                swift_bridgeObjectRelease();
                v87 = (uint64_t)v128;
                v88 = v127;
                v89 = v116;
                v90 = v126;
                v91 = v136;
LABEL_61:
                swift_setDeallocating();
                specialized _ContiguousArrayStorage.__deallocating_deinit();

                swift_unknownObjectRelease();
                v90[1](v137, v88);
                v103 = (uint64_t)v119;
                *v119 = v91;
                v104 = v120;
                *(_QWORD *)(v103 + *(int *)(v120 + 28)) = 1024;
                *(_QWORD *)(v103 + *(int *)(v104 + 32)) = v47;
                v105 = v118;
                outlined init with take of StorableValue(v103, v118, type metadata accessor for SelectCorePhysicalPlan);
                v106 = v132[1];
                v107 = v130;
                ((void (*)(char *, ValueMetadata *))v106)(v131, v130);
                v108 = v117;
                outlined init with take of StorableValue(v105, v87 + *(int *)(v117 + 20), type metadata accessor for SelectCorePhysicalPlan);
                *(_QWORD *)(v87 + *(int *)(v108 + 24)) = v47;
                v109 = (_QWORD *)(v87 + *(int *)(v108 + 28));
                v110 = v113;
                *v109 = v112;
                v109[1] = v110;
                outlined init with take of StorableValue(v87, v89, type metadata accessor for MaterializedViewPhysicalPlan);
                ((void (*)(char *, ValueMetadata *))v106)(v133, v107);
                ((void (*)(char *, ValueMetadata *))v115[1])(v114, v138);
                return;
              }
              v71 = (v71 + 1) & v78;
              v72 = v71 >> 6;
              v73 = *(_QWORD *)(v65 + 8 * (v71 >> 6));
              v74 = 1 << v71;
              if ((v73 & (1 << v71)) != 0)
              {
                v47 = v125;
                while (1)
                {
                  v97 = (_QWORD *)(Kind + 16 * v71);
                  v98 = *v97 == v66 && v97[1] == v67;
                  if (v98 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    goto LABEL_45;
                  v71 = (v71 + 1) & v78;
                  v72 = v71 >> 6;
                  v73 = *(_QWORD *)(v65 + 8 * (v71 >> 6));
                  v74 = 1 << v71;
                  v69 = v136;
                  if ((v73 & (1 << v71)) == 0)
                    goto LABEL_59;
                }
              }
            }
          }
          v47 = v125;
        }
      }
      v69 = v136;
    }
LABEL_59:
    *(_QWORD *)(v65 + 8 * v72) = v74 | v73;
    v99 = (_QWORD *)(v69[3].Kind + 16 * v71);
    *v99 = v66;
    v99[1] = v67;
    v100 = v69[1].Kind;
    v101 = __OFADD__(v100, 1);
    v102 = v100 + 1;
    if (v101)
      __break(1u);
    v69[1].Kind = v102;
    v87 = (uint64_t)v128;
    v88 = v127;
    v89 = v116;
    v90 = v126;
    v91 = v69;
    goto LABEL_61;
  }
  outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for LogicalPlan?);
LABEL_10:
  lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError();
  v55 = swift_allocError();
  *(_QWORD *)v56 = v28;
  *(_QWORD *)(v56 + 8) = v27;
  *(_BYTE *)(v56 + 16) = 1;
  swift_bridgeObjectRetain();
  swift_willThrow();
  v31 = v55;
LABEL_11:
  v33 = v139;
LABEL_12:
  *v33 = v31;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> IncrementalViewManager.clearAndRegenerateSync(viewName:databaseName:streamIdentifier:)(Swift::String viewName, Swift::String databaseName, Swift::String streamIdentifier)
{
  IncrementalViewManager.clearAndRegenerate(viewName:databaseName:streamIdentifier:)(viewName, databaseName, streamIdentifier);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> IncrementalViewManager.clearAndRegenerate(viewName:databaseName:streamIdentifier:)(Swift::String viewName, Swift::String databaseName, Swift::String streamIdentifier)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *object;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  NSObject *v32;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_signpost_id_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  os_signpost_type_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  os_signpost_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_signpost_type_t v62;
  os_signpost_id_t v63;
  os_signpost_id_t v64;
  uint64_t v65;
  uint64_t v66;
  _WORD *v67;
  uint64_t v68;
  os_signpost_type_t v69;
  os_signpost_id_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, _QWORD, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t countAndFlagsBits;
  char *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  object = streamIdentifier._object;
  countAndFlagsBits = streamIdentifier._countAndFlagsBits;
  v7 = databaseName._object;
  v92 = databaseName._countAndFlagsBits;
  v8 = viewName._object;
  v90 = viewName._countAndFlagsBits;
  v9 = OUTLINED_FUNCTION_125_0();
  v82 = *(_QWORD *)(v9 - 8);
  v83 = v9;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_6_1();
  v91 = v11;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v12);
  v76 = (char *)&v71 - v13;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_53();
  v75 = v15;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_61();
  v18 = OUTLINED_FUNCTION_47_0(v17);
  OUTLINED_FUNCTION_97_0();
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v86 = (char *)&v71 - v23;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v24);
  OUTLINED_FUNCTION_53();
  v79 = v25;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v26);
  v78 = (char *)&v71 - v27;
  OUTLINED_FUNCTION_7();
  v29 = MEMORY[0x1E0C80A78](v28);
  v31 = (char *)&v71 - v30;
  MEMORY[0x1E0C80A78](v29);
  OUTLINED_FUNCTION_122_0();
  OUTLINED_FUNCTION_121_0();
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_50_0();
  v89 = v3;
  v32 = OSSignposter.logHandle.getter();
  v33 = static os_signpost_type_t.begin.getter();
  v34 = OUTLINED_FUNCTION_120_0(v33);
  v87 = v7;
  v88 = v5;
  v77 = v22;
  v81 = (uint64_t)v8;
  if ((v34 & 1) != 0)
  {
    v72 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 16);
    OUTLINED_FUNCTION_65_1((uint64_t)v31, v72);
    v35 = OUTLINED_FUNCTION_7_0();
    v94 = OUTLINED_FUNCTION_7_0();
    *(_DWORD *)v35 = 136446722;
    v73 = v18;
    swift_bridgeObjectRetain();
    v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v94);
    OUTLINED_FUNCTION_32_1(v36);
    OUTLINED_FUNCTION_52_0();
    *(_WORD *)(v35 + 12) = 2082;
    swift_bridgeObjectRetain();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, (unint64_t)v7, &v94);
    OUTLINED_FUNCTION_69(v37);
    OUTLINED_FUNCTION_52_0();
    *(_WORD *)(v35 + 22) = 2082;
    OUTLINED_FUNCTION_87_0();
    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, (unint64_t)v8, &v94);
    OUTLINED_FUNCTION_69(v38);
    OUTLINED_FUNCTION_52_0();
    v39 = OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_136_0(&dword_18D810000, v32, (os_signpost_type_t)v84, v39, "IncrementalViewClearAndRegenerate", "stream:%{public}s database:%{public}s view:%{public}s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_14();
  }
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_99();

  v40 = v90;
  OUTLINED_FUNCTION_65_1((uint64_t)v31, *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 16));
  OUTLINED_FUNCTION_124_0();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_113();
  v41 = v91;
  if (!static DaemonLibrary.root)
  {
    lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError();
    v51 = OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_78_0(v51, v52);
    v53 = (void *)OUTLINED_FUNCTION_34_0();
    v54 = v86;
    OUTLINED_FUNCTION_72_0();
    static os_signpost_type_t.end.getter();
    if ((OUTLINED_FUNCTION_21_1() & 1) == 0)
      goto LABEL_27;
    OUTLINED_FUNCTION_94();
    v55 = (uint64_t)v76;
    OUTLINED_FUNCTION_92_0();
    OUTLINED_FUNCTION_73_0();
    if (OUTLINED_FUNCTION_14_3() != *MEMORY[0x1E0DF2190])
      OUTLINED_FUNCTION_30_0(v55, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    *(_WORD *)OUTLINED_FUNCTION_7_0() = 0;
    OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_114_0();
LABEL_25:
    OUTLINED_FUNCTION_27_0(&dword_18D810000, v61, v62, v63, "IncrementalViewClearAndRegenerate");
    goto LABEL_26;
  }
  v42 = v92;
  v43 = (uint64_t)v87;
  if (!(*((uint64_t (**)(uint64_t, void *))off_1EE082870 + 2))(v92, v87))
  {
    lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError();
    OUTLINED_FUNCTION_13_0();
    *(_QWORD *)v56 = v42;
    *(_QWORD *)(v56 + 8) = v43;
    *(_BYTE *)(v56 + 16) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    v53 = (void *)OUTLINED_FUNCTION_34_0();
    v54 = v79;
    OUTLINED_FUNCTION_72_0();
    v57 = static os_signpost_type_t.end.getter();
    if ((OUTLINED_FUNCTION_21_1() & 1) == 0)
      goto LABEL_27;
    OUTLINED_FUNCTION_94();
    v58 = v75;
    checkForErrorAndConsumeState(state:)();
    OUTLINED_FUNCTION_73_0();
    v59 = v82;
    if (OUTLINED_FUNCTION_30_0(v58, *(uint64_t (**)(uint64_t, uint64_t))(v82 + 88)) != *MEMORY[0x1E0DF2190])
      OUTLINED_FUNCTION_30_0(v58, *(uint64_t (**)(uint64_t, uint64_t))(v59 + 8));
    *(_WORD *)OUTLINED_FUNCTION_7_0() = 0;
    v63 = OSSignpostID.rawValue.getter();
    v62 = v57;
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_129_0();
  v45 = MEMORY[0x1E0C80A78](v44);
  v46 = v81;
  *(&v71 - 8) = v80;
  *(&v71 - 7) = v40;
  *(&v71 - 6) = v46;
  *(&v71 - 5) = v45;
  *(&v71 - 4) = v47;
  *(&v71 - 3) = v42;
  *(&v71 - 2) = v43;
  OUTLINED_FUNCTION_127_1(*(uint64_t (**)(void))(v47 + 32));
  if (!v4)
  {
    v53 = (void *)OUTLINED_FUNCTION_34_0();
    v54 = v78;
    OUTLINED_FUNCTION_72_0();
    static os_signpost_type_t.end.getter();
    if ((OUTLINED_FUNCTION_21_1() & 1) != 0)
    {
      OUTLINED_FUNCTION_94();
      v60 = v74;
      OUTLINED_FUNCTION_92_0();
      OUTLINED_FUNCTION_73_0();
      if (OUTLINED_FUNCTION_14_3() != *MEMORY[0x1E0DF2190])
        OUTLINED_FUNCTION_30_0(v60, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
      v67 = (_WORD *)OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_119_0(v67);
      OUTLINED_FUNCTION_114_0();
      OUTLINED_FUNCTION_27_0(&dword_18D810000, v68, v69, v70, "IncrementalViewClearAndRegenerate");
LABEL_26:
      OUTLINED_FUNCTION_14();
    }
LABEL_27:

    v66 = (uint64_t)v54;
    goto LABEL_28;
  }
  v48 = (void *)OUTLINED_FUNCTION_34_0();
  v49 = (uint64_t)v77;
  OSSignpostIntervalState.signpostID.getter();
  v50 = static os_signpost_type_t.end.getter();
  if ((OUTLINED_FUNCTION_21_1() & 1) != 0)
  {
    OUTLINED_FUNCTION_94();
    OUTLINED_FUNCTION_92_0();
    OUTLINED_FUNCTION_73_0();
    if (OUTLINED_FUNCTION_14_3() != *MEMORY[0x1E0DF2190])
      OUTLINED_FUNCTION_30_0(v41, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    *(_WORD *)OUTLINED_FUNCTION_7_0() = 0;
    v64 = OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_27_0(&dword_18D810000, v65, v50, v64, "IncrementalViewClearAndRegenerate");
    OUTLINED_FUNCTION_14();
  }

  v66 = v49;
LABEL_28:
  OUTLINED_FUNCTION_102_0(v66);
  OUTLINED_FUNCTION_73_0();
  OUTLINED_FUNCTION_102_0(v93);
  OUTLINED_FUNCTION_9();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> IncrementalViewManager.clear(viewName:databaseName:streamIdentifier:)(Swift::String viewName, Swift::String databaseName, Swift::String streamIdentifier)
{
  IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)(viewName._countAndFlagsBits, (unint64_t)viewName._object, databaseName._countAndFlagsBits, (unint64_t)databaseName._object, streamIdentifier._countAndFlagsBits, (unint64_t)streamIdentifier._object, "IncrementalViewClear", (uint64_t)partial apply for closure #1 in IncrementalViewManager.clear(viewName:databaseName:streamIdentifier:));
}

void closure #1 in IncrementalViewManager.clear(viewName:databaseName:streamIdentifier:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, NSObject *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Class isa;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  sqlite3 *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  Swift::String v59;
  void *v60;
  void *v61;
  sqlite3 *v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  sqlite3 *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  int v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  NSObject *v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD v110[2];
  uint64_t v111;
  uint64_t v112;

  v97 = a7;
  v96 = a6;
  v99 = a3;
  v107 = a1;
  v102 = type metadata accessor for MaterializedViewPhysicalPlan(0);
  v100 = *(_QWORD *)(v102 - 8);
  v10 = MEMORY[0x1E0C80A78](v102);
  v12 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v94 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v101 = (char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v94 - v18;
  if (one-time initialization token for compute != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  v21 = __swift_project_value_buffer(v20, (uint64_t)static Logging.compute);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v94 = v21;
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.info.getter();
  v24 = os_log_type_enabled(v22, v23);
  v105 = v19;
  v103 = v14;
  v95 = a4;
  v106 = a2;
  v104 = a5;
  if (v24)
  {
    v25 = swift_slowAlloc();
    v26 = swift_slowAlloc();
    v111 = v26;
    *(_DWORD *)v25 = 136315394;
    swift_bridgeObjectRetain();
    v110[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, a2, &v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v25 + 12) = 2080;
    swift_bridgeObjectRetain();
    v110[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, a4, &v111);
    v19 = v105;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_18D810000, v22, v23, "IncrementalViewManager: clearing materialized view for %s in %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    v27 = v26;
    a5 = v104;
    MEMORY[0x193FED860](v27, -1, -1);
    MEMORY[0x193FED860](v25, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  isa = a5[2].isa;
  v29 = *((_QWORD *)isa + 2);
  if (v29)
  {
    v30 = (uint64_t)isa + ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80));
    v31 = *(_QWORD *)(v100 + 72);
    swift_bridgeObjectRetain_n();
    while (1)
    {
      outlined init with copy of StorableValue(v30, (uint64_t)v12, type metadata accessor for MaterializedViewPhysicalPlan);
      MaterializedView.name.getter();
      v32 = String.lowercased()();
      swift_bridgeObjectRelease();
      v33 = String.lowercased()();
      if (v32._countAndFlagsBits == v33._countAndFlagsBits && v32._object == v33._object)
        break;
      v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v35 & 1) != 0)
        goto LABEL_18;
      outlined destroy of StorableValue((uint64_t)v12, type metadata accessor for MaterializedViewPhysicalPlan);
      v30 += v31;
      if (!--v29)
      {
        swift_bridgeObjectRelease();
        v36 = 1;
        v19 = v105;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_18:
    v37 = (uint64_t)v103;
    v38 = v102;
    v39 = (uint64_t)v101;
    swift_bridgeObjectRelease();
    v19 = v105;
    outlined init with take of StorableValue((uint64_t)v12, (uint64_t)v105, type metadata accessor for MaterializedViewPhysicalPlan);
    v36 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    v36 = 1;
LABEL_16:
    v37 = (uint64_t)v103;
    v38 = v102;
    v39 = (uint64_t)v101;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v19, v36, 1, v38);
  swift_bridgeObjectRelease();
  outlined init with copy of Date?((uint64_t)v19, v39, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  if (__swift_getEnumTagSinglePayload(v39, 1, v38) != 1)
  {
    outlined init with take of StorableValue(v39, v37, type metadata accessor for MaterializedViewPhysicalPlan);
    v42 = v98;
    v43 = IncrementalViewManager.cachedDatabaseWithAccess(for:)(v96, v97);
    if (!v42)
    {
      v44 = v43;
      v45 = *(sqlite3 **)(v43 + 16);
      v46 = sqlite3_exec(v45, "begin", 0, 0, 0);
      if ((_DWORD)v46)
      {
        v47 = BMSQLDatabaseError(v46, v45, 0);
        swift_getErrorValue();
        v48 = Error.localizedDescription.getter();
        v50 = v49;

        v111 = v48;
        v112 = v50;
        strcpy((char *)v110, "BMSQLDatabase");
        HIWORD(v110[1]) = -4864;
        v108 = 0x62617461444C5153;
        v109 = 0xEB00000000657361;
        lazy protocol witness table accessor for type String and conformance String();
        v51 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v53 = v52;
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
        swift_allocError();
        *(_OWORD *)v54 = xmmword_18DC0CE30;
        *(_QWORD *)(v54 + 16) = v51;
        *(_QWORD *)(v54 + 24) = v53;
        *(_BYTE *)(v54 + 32) = 1;
      }
      else
      {
        v56 = MaterializedView.name.getter();
        v58 = v57;
        v59._countAndFlagsBits = v56;
        v59._object = v58;
        IncrementalViewManager.clear(database:materializedViewName:)((Swift::OpaquePointer)v45, v59);
        v61 = v60;
        if (v60)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v62 = *(sqlite3 **)(v44 + 16);
          v63 = sqlite3_exec(v62, "commit", 0, 0, 0);
          if (!(_DWORD)v63)
          {
            v82 = v106;
            swift_bridgeObjectRetain_n();
            v83 = v95;
            swift_bridgeObjectRetain_n();
            swift_retain_n();
            v84 = Logger.logObject.getter();
            v85 = static os_log_type_t.info.getter();
            v86 = v85;
            v104 = v84;
            if (os_log_type_enabled(v84, v85))
            {
              v87 = swift_slowAlloc();
              v102 = swift_slowAlloc();
              v111 = v102;
              *(_DWORD *)v87 = 136315650;
              swift_bridgeObjectRetain();
              v110[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v82, &v111);
              LODWORD(v107) = v86;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v87 + 12) = 2080;
              swift_bridgeObjectRetain();
              v110[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v83, &v111);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v87 + 22) = 2080;
              v88 = objc_msgSend(*(id *)(v44 + 24), sel_description);
              v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v91 = v90;

              v110[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v91, &v111);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              v92 = v104;
              _os_log_impl(&dword_18D810000, v104, (os_log_type_t)v107, "IncrementalViewManager: cleared materialized views for %s in %s.Access assertion: %s", (uint8_t *)v87, 0x20u);
              v93 = v102;
              swift_arrayDestroy();
              MEMORY[0x193FED860](v93, -1, -1);
              MEMORY[0x193FED860](v87, -1, -1);
              swift_release();

              outlined destroy of StorableValue((uint64_t)v103, type metadata accessor for MaterializedViewPhysicalPlan);
              v55 = (uint64_t)v19;
              goto LABEL_27;
            }
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_release_n();

            goto LABEL_25;
          }
          v64 = BMSQLDatabaseError(v63, v62, 0);
          swift_getErrorValue();
          v65 = Error.localizedDescription.getter();
          v67 = v66;

          v111 = v65;
          v112 = v67;
          strcpy((char *)v110, "BMSQLDatabase");
          HIWORD(v110[1]) = -4864;
          v108 = 0x62617461444C5153;
          v109 = 0xEB00000000657361;
          lazy protocol witness table accessor for type String and conformance String();
          v68 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          v70 = v69;
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
          v61 = (void *)swift_allocError();
          *(_OWORD *)v71 = xmmword_18DC0CE40;
          *(_QWORD *)(v71 + 16) = v68;
          *(_QWORD *)(v71 + 24) = v70;
          *(_BYTE *)(v71 + 32) = 1;
          swift_willThrow();
        }
        v72 = *(sqlite3 **)(v44 + 16);
        v73 = sqlite3_exec(v72, "rollback", 0, 0, 0);
        if ((_DWORD)v73)
        {
          v74 = BMSQLDatabaseError(v73, v72, 0);
          swift_getErrorValue();
          v75 = Error.localizedDescription.getter();
          v77 = v76;

          v111 = v75;
          v112 = v77;
          strcpy((char *)v110, "BMSQLDatabase");
          HIWORD(v110[1]) = -4864;
          v108 = 0x62617461444C5153;
          v109 = 0xEB00000000657361;
          lazy protocol witness table accessor for type String and conformance String();
          v78 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          v80 = v79;
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
          swift_allocError();
          *(_OWORD *)v81 = xmmword_18DC0CE50;
          *(_QWORD *)(v81 + 16) = v78;
          *(_QWORD *)(v81 + 24) = v80;
          *(_BYTE *)(v81 + 32) = 1;
          swift_willThrow();

          swift_release();
          outlined destroy of StorableValue(v37, type metadata accessor for MaterializedViewPhysicalPlan);
          goto LABEL_26;
        }
      }
      swift_willThrow();
      swift_release();
    }
LABEL_25:
    outlined destroy of StorableValue(v37, type metadata accessor for MaterializedViewPhysicalPlan);
    goto LABEL_26;
  }
  outlined destroy of UUID?(v39, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError();
  swift_allocError();
  v40 = v106;
  *(_QWORD *)v41 = v107;
  *(_QWORD *)(v41 + 8) = v40;
  *(_BYTE *)(v41 + 16) = 3;
  swift_bridgeObjectRetain();
  swift_willThrow();
LABEL_26:
  v55 = (uint64_t)v19;
LABEL_27:
  outlined destroy of UUID?(v55, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> IncrementalViewManager.clear(database:materializedViewName:)(Swift::OpaquePointer database, Swift::String materializedViewName)
{
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  object = materializedViewName._object;
  countAndFlagsBits = materializedViewName._countAndFlagsBits;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = countAndFlagsBits;
  v5._object = object;
  String.append(_:)(v5);
  v6 = String.utf8CString.getter();
  v7 = OUTLINED_FUNCTION_101((sqlite3 *)database._rawValue, (const char *)(v6 + 32));
  swift_release();
  if ((_DWORD)v7)
  {
    v8 = BMSQLDatabaseError(v7, (sqlite3 *)database._rawValue, 0);
    swift_getErrorValue();
    Error.localizedDescription.getter();

    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_1_11();
    lazy protocol witness table accessor for type String and conformance String();
    v9 = OUTLINED_FUNCTION_62_1();
    v11 = v10;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
    OUTLINED_FUNCTION_13_0();
    *(_QWORD *)v12 = 0xD000000000000015;
    *(_QWORD *)(v12 + 8) = 0x800000018DCC2E80;
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v11;
    *(_BYTE *)(v12 + 32) = 1;
    swift_willThrow();
  }
  else
  {
    OUTLINED_FUNCTION_64();
    type metadata accessor for QueryPlannerMetadata(0);
    static QueryPlannerMetadata.clearMetadata(materializedViewName:database:)(countAndFlagsBits, (int)object, (sqlite3 *)database._rawValue);
  }
}

void closure #1 in IncrementalViewManager.clearAndRegenerate(viewName:databaseName:streamIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  sqlite3 *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  void *v50;
  void *v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _WORD v84[8];
  uint64_t v85;
  uint64_t v86;

  v8 = v7;
  v71 = a7;
  v70 = a6;
  v77 = a4;
  v81 = a2;
  v80 = type metadata accessor for MaterializedViewPhysicalPlan(0);
  v12 = *(_QWORD *)(v80 - 8);
  v13 = MEMORY[0x1E0C80A78](v80);
  v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v70 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  v19 = MEMORY[0x1E0C80A78](v18);
  v79 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v70 - v21;
  v23 = *(_QWORD *)(a1 + 16);
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    v72 = a5;
    v73 = v7;
    v76 = a1;
    v74 = v17;
    v75 = (char *)&v70 - v21;
    v25 = v23 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v26 = *(_QWORD *)(v12 + 72);
    v78 = v23;
    swift_bridgeObjectRetain_n();
    while (1)
    {
      outlined init with copy of StorableValue(v25, (uint64_t)v15, type metadata accessor for MaterializedViewPhysicalPlan);
      MaterializedView.name.getter();
      v27 = String.lowercased()();
      swift_bridgeObjectRelease();
      v28 = String.lowercased()();
      if (v27._countAndFlagsBits == v28._countAndFlagsBits && v27._object == v28._object)
        break;
      v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v30 & 1) != 0)
        goto LABEL_13;
      outlined destroy of StorableValue((uint64_t)v15, type metadata accessor for MaterializedViewPhysicalPlan);
      v25 += v26;
      if (!--v24)
      {
        swift_bridgeObjectRelease();
        v31 = 1;
        v22 = v75;
        v17 = v74;
        v8 = v73;
        a5 = v72;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_13:
    v22 = v75;
    v17 = v74;
    v8 = v73;
    a5 = v72;
    v33 = (uint64_t)v79;
    v32 = v80;
    swift_bridgeObjectRelease();
    outlined init with take of StorableValue((uint64_t)v15, (uint64_t)v22, type metadata accessor for MaterializedViewPhysicalPlan);
    v31 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    v31 = 1;
LABEL_11:
    v33 = (uint64_t)v79;
    v32 = v80;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v22, v31, 1, v32);
  swift_bridgeObjectRelease();
  outlined init with copy of Date?((uint64_t)v22, v33, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  if (__swift_getEnumTagSinglePayload(v33, 1, v32) != 1)
  {
    outlined init with take of StorableValue(v33, (uint64_t)v17, type metadata accessor for MaterializedViewPhysicalPlan);
    v35 = IncrementalViewManager.cachedDatabaseWithAccess(for:)(v77, a5);
    if (!v8)
    {
      v36 = *(sqlite3 **)(v35 + 16);
      swift_release();
      v37 = sqlite3_exec(v36, "begin", 0, 0, 0);
      if ((_DWORD)v37)
      {
        v38 = BMSQLDatabaseError(v37, v36, 0);
        swift_getErrorValue();
        v39 = Error.localizedDescription.getter();
        v41 = v40;

        v85 = v39;
        v86 = v41;
        strcpy((char *)v84, "BMSQLDatabase");
        v84[7] = -4864;
        v82 = 0x62617461444C5153;
        v83 = 0xEB00000000657361;
        lazy protocol witness table accessor for type String and conformance String();
        v42 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v44 = v43;
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
        swift_allocError();
        *(_OWORD *)v45 = xmmword_18DC0CE30;
        *(_QWORD *)(v45 + 16) = v42;
        *(_QWORD *)(v45 + 24) = v44;
        *(_BYTE *)(v45 + 32) = 1;
      }
      else
      {
        v46 = MaterializedView.name.getter();
        v48 = v47;
        v49._countAndFlagsBits = v46;
        v49._object = v48;
        IncrementalViewManager.clear(database:materializedViewName:)((Swift::OpaquePointer)v36, v49);
        v51 = v50;
        if (v50)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          IncrementalViewManager.update(database:materializedViewPlan:databaseName:)(v36, (uint64_t)v17, v70, v71);
          v52 = sqlite3_exec(v36, "commit", 0, 0, 0);
          if (!(_DWORD)v52)
            goto LABEL_20;
          v53 = BMSQLDatabaseError(v52, v36, 0);
          swift_getErrorValue();
          v54 = Error.localizedDescription.getter();
          v56 = v55;

          v85 = v54;
          v86 = v56;
          strcpy((char *)v84, "BMSQLDatabase");
          v84[7] = -4864;
          v82 = 0x62617461444C5153;
          v83 = 0xEB00000000657361;
          lazy protocol witness table accessor for type String and conformance String();
          v57 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          v59 = v58;
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
          v51 = (void *)swift_allocError();
          *(_OWORD *)v60 = xmmword_18DC0CE40;
          *(_QWORD *)(v60 + 16) = v57;
          *(_QWORD *)(v60 + 24) = v59;
          *(_BYTE *)(v60 + 32) = 1;
          swift_willThrow();
        }
        v61 = sqlite3_exec(v36, "rollback", 0, 0, 0);
        if ((_DWORD)v61)
        {
          v62 = BMSQLDatabaseError(v61, v36, 0);
          swift_getErrorValue();
          v63 = Error.localizedDescription.getter();
          v65 = v64;

          v85 = v63;
          v86 = v65;
          strcpy((char *)v84, "BMSQLDatabase");
          v84[7] = -4864;
          v82 = 0x62617461444C5153;
          v83 = 0xEB00000000657361;
          lazy protocol witness table accessor for type String and conformance String();
          v66 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          v68 = v67;
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
          swift_allocError();
          *(_OWORD *)v69 = xmmword_18DC0CE50;
          *(_QWORD *)(v69 + 16) = v66;
          *(_QWORD *)(v69 + 24) = v68;
          *(_BYTE *)(v69 + 32) = 1;
          swift_willThrow();

          outlined destroy of StorableValue((uint64_t)v17, type metadata accessor for MaterializedViewPhysicalPlan);
          goto LABEL_21;
        }
      }
      swift_willThrow();
    }
LABEL_20:
    outlined destroy of StorableValue((uint64_t)v17, type metadata accessor for MaterializedViewPhysicalPlan);
    goto LABEL_21;
  }
  outlined destroy of UUID?(v33, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError();
  swift_allocError();
  *(_QWORD *)v34 = v81;
  *(_QWORD *)(v34 + 8) = a3;
  *(_BYTE *)(v34 + 16) = 3;
  swift_bridgeObjectRetain();
  swift_willThrow();
LABEL_21:
  outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
}

void IncrementalViewManager.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  v0 = type metadata accessor for OSSignposter();
  OUTLINED_FUNCTION_75(v0);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1();
}

uint64_t IncrementalViewManager.__deallocating_deinit()
{
  IncrementalViewManager.deinit();
  return swift_deallocClassInstance();
}

void IncrementalViewManager.UpdateError.description.getter(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_18D92C454()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;

  OUTLINED_FUNCTION_53_0();
  _StringGuts.grow(_:)(31);
  OUTLINED_FUNCTION_10_2();
  v3._countAndFlagsBits = v1;
  v3._object = v0;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 34;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v2 + 6;
}

void protocol witness for CustomStringConvertible.description.getter in conformance IncrementalViewManager.UpdateError()
{
  uint64_t v0;

  IncrementalViewManager.UpdateError.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

const char *IPCSFeatureFlag.domain.getter()
{
  return "IntelligencePlatform";
}

const char *IPCSFeatureFlag.feature.getter()
{
  return "IPCSMemoryReduction";
}

Swift::Int IPCSFeatureFlag.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IPCSFeatureFlag()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t type metadata accessor for DatabaseWithAccess()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type IPCSFeatureFlag and conformance IPCSFeatureFlag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IPCSFeatureFlag and conformance IPCSFeatureFlag;
  if (!lazy protocol witness table cache variable for type IPCSFeatureFlag and conformance IPCSFeatureFlag)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for IPCSFeatureFlag, &unk_1E2636AA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IPCSFeatureFlag and conformance IPCSFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IPCSFeatureFlag and conformance IPCSFeatureFlag;
  if (!lazy protocol witness table cache variable for type IPCSFeatureFlag and conformance IPCSFeatureFlag)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for IPCSFeatureFlag, &unk_1E2636AA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IPCSFeatureFlag and conformance IPCSFeatureFlag);
  }
  return result;
}

void implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(void (*a1)(void))
{
  a1();
  OUTLINED_FUNCTION_1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  result = OUTLINED_FUNCTION_24();
  *a1 = v8;
  return result;
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError;
  if (!lazy protocol witness table cache variable for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for IncrementalViewManager.UpdateError, &type metadata for IncrementalViewManager.UpdateError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError);
  }
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  ValueMetadata *v6;
  void (**Description)(char *, ValueMetadata *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, ValueMetadata *);
  _QWORD *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  char v24;
  unint64_t v25;
  char v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  void *v34;
  id v35;
  Swift::String v36;
  Swift::String v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;
  void (**v41)(char *, ValueMetadata *);
  ValueMetadata *v42;
  char *v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;

  v45 = a3;
  v6 = type metadata accessor for SQLDataType();
  Description = (void (**)(char *, ValueMetadata *))v6[-1].Description;
  MEMORY[0x1E0C80A78](v6);
  v44 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SQLDataType));
  v10 = MEMORY[0x1E0C80A78](v9);
  v13 = (_QWORD *)((char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v38[1] = v3;
    v38[2] = a1;
    v43 = (char *)v13 + *(int *)(v10 + 48);
    v15 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v40 = *(_QWORD *)(v11 + 72);
    swift_bridgeObjectRetain();
    v41 = Description;
    v42 = v6;
    v39 = v13;
    while (1)
    {
      outlined init with copy of Date?(v15, (uint64_t)v13, &demangling cache variable for type metadata for (String, SQLDataType));
      v16 = *v13;
      v17 = v13[1];
      v48 = *v13;
      v49 = v17;
      v18 = Description[4];
      ((void (*)(char *, char *, ValueMetadata *))v18)(v44, v43, v6);
      v19 = (_QWORD *)*v45;
      v21 = specialized __RawDictionaryStorage.find<A>(_:)();
      v22 = v19[2];
      v23 = (v20 & 1) == 0;
      if (__OFADD__(v22, v23))
        break;
      v24 = v20;
      if (v19[3] >= v22 + v23)
      {
        if ((a2 & 1) != 0)
        {
          if ((v20 & 1) != 0)
            goto LABEL_14;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, SQLDataType>);
          _NativeDictionary.copy()();
          if ((v24 & 1) != 0)
            goto LABEL_14;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
        v25 = specialized __RawDictionaryStorage.find<A>(_:)();
        if ((v24 & 1) != (v26 & 1))
          goto LABEL_19;
        v21 = v25;
        if ((v24 & 1) != 0)
        {
LABEL_14:
          v34 = (void *)swift_allocError();
          swift_willThrow();
          v50 = v34;
          v35 = v34;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
          if ((swift_dynamicCast() & 1) == 0)
          {
            swift_bridgeObjectRelease();
            v41[1](v44, v42);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            return;
          }
LABEL_20:
          v46 = 0;
          v47 = 0xE000000000000000;
          _StringGuts.grow(_:)(30);
          v36._object = (void *)0x800000018DCC3160;
          v36._countAndFlagsBits = 0xD00000000000001BLL;
          String.append(_:)(v36);
          _print_unlocked<A, B>(_:_:)();
          v37._countAndFlagsBits = 39;
          v37._object = (void *)0xE100000000000000;
          String.append(_:)(v37);
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x18D92CF6CLL);
        }
      }
      v27 = v44;
      v28 = (_QWORD *)*v45;
      *(_QWORD *)(*v45 + 8 * (v21 >> 6) + 64) |= 1 << v21;
      v29 = (_QWORD *)(v28[6] + 16 * v21);
      *v29 = v16;
      v29[1] = v17;
      Description = v41;
      v30 = v28[7] + (_QWORD)v41[9] * v21;
      v6 = v42;
      ((void (*)(unint64_t, char *, ValueMetadata *))v18)(v30, v27, v42);
      v31 = v28[2];
      v32 = __OFADD__(v31, 1);
      v33 = v31 + 1;
      if (v32)
        goto LABEL_18;
      v28[2] = v33;
      v13 = v39;
      v15 += v40;
      a2 = 1;
      if (!--v14)
      {
        swift_bridgeObjectRelease_n();
        return;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
}

void partial apply for closure #1 in closure #1 in IncrementalViewManager.init()(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  closure #1 in closure #1 in IncrementalViewManager.init()(a1, *(uint64_t **)(v3 + 16), *(void **)(v3 + 24), *(_QWORD *)(v3 + 32), a2, a3);
}

uint64_t partial apply for closure #1 in IncrementalViewManager.clearAndRegenerate(viewName:databaseName:streamIdentifier:)()
{
  return partial apply for closure #1 in IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in IncrementalViewManager.clearAndRegenerate(viewName:databaseName:streamIdentifier:));
}

uint64_t partial apply for closure #1 in IncrementalViewManager.clear(viewName:databaseName:streamIdentifier:)()
{
  return partial apply for closure #1 in IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in IncrementalViewManager.clear(viewName:databaseName:streamIdentifier:));
}

uint64_t ObjC metadata update function for IncrementalViewManager()
{
  return type metadata accessor for IncrementalViewManager();
}

uint64_t type metadata accessor for IncrementalViewManager()
{
  uint64_t result;

  result = type metadata singleton initialization cache for IncrementalViewManager;
  if (!type metadata singleton initialization cache for IncrementalViewManager)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for IncrementalViewManager()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for OSSignposter();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for IncrementalViewManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IncrementalViewManager.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t outlined copy of IncrementalViewManager.UpdateError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for IncrementalViewManager.UpdateError(uint64_t a1)
{
  return outlined consume of IncrementalViewManager.UpdateError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of IncrementalViewManager.UpdateError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u)
    return swift_bridgeObjectRelease();
  return result;
}

void initializeBufferWithCopyOfBuffer for IncrementalViewManager.UpdateError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of IncrementalViewManager.UpdateError(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  OUTLINED_FUNCTION_1_6();
}

uint64_t assignWithCopy for IncrementalViewManager.UpdateError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of IncrementalViewManager.UpdateError(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of IncrementalViewManager.UpdateError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for IncrementalViewManager.UpdateError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of IncrementalViewManager.UpdateError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for IncrementalViewManager.UpdateError(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFC && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 4)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IncrementalViewManager.UpdateError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for IncrementalViewManager.UpdateError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t destructiveInjectEnumTag for IncrementalViewManager.UpdateError(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for IncrementalViewManager.UpdateError()
{
  return &type metadata for IncrementalViewManager.UpdateError;
}

uint64_t storeEnumTagSinglePayload for IPCSFeatureFlag(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_18D92D2EC + 4 * byte_18DC0CE65[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_18D92D30C + 4 * byte_18DC0CE6A[v4]))();
}

_BYTE *sub_18D92D2EC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_18D92D30C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18D92D314(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18D92D31C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18D92D324(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18D92D32C(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for IPCSFeatureFlag()
{
  return &unk_1E2636AA0;
}

void type metadata accessor for BMStreamBase(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    objc_opt_self();
    atomic_store(swift_getObjCClassMetadata(), a2);
  }
  OUTLINED_FUNCTION_1();
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x193FED7A0](MEMORY[0x1E0CB09C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_93_0()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

uint64_t OUTLINED_FUNCTION_94()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_98_0@<X0>(__int16 a1@<W8>)
{
  uint64_t v1;

  *(_WORD *)(v1 + 12) = a1;
  return MaterializedView.name.getter();
}

uint64_t OUTLINED_FUNCTION_113()
{
  return OSSignpostIntervalState.init(id:isOpen:)();
}

uint64_t OUTLINED_FUNCTION_119_0(_WORD *a1)
{
  *a1 = 0;
  return OSSignpostID.rawValue.getter();
}

uint64_t OUTLINED_FUNCTION_120_0(int a1)
{
  uint64_t v1;

  *(_DWORD *)(v1 - 172) = a1;
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t OUTLINED_FUNCTION_121_0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = v0;
  return OSSignpostID.init(log:)();
}

uint64_t OUTLINED_FUNCTION_122_0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = v0;
  return OSSignposter.logHandle.getter();
}

uint64_t OUTLINED_FUNCTION_124_0()
{
  return type metadata accessor for OSSignpostIntervalState();
}

uint64_t OUTLINED_FUNCTION_127_1@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

void OUTLINED_FUNCTION_128_0()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  outlined destroy of StorableValue(v0, v1);
}

uint64_t OUTLINED_FUNCTION_131_0()
{
  uint64_t v0;

  return v0 + 32;
}

void OUTLINED_FUNCTION_136_0(void *a1, NSObject *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6)
{
  uint8_t *v6;

  _os_signpost_emit_with_name_impl(a1, a2, a3, a4, a5, a6, v6, 0x20u);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Collection.first.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for Schema, a2);
}

{
  return specialized Collection.first.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for LogicalPlan, a2);
}

uint64_t SQLExpressionEvaluatorError.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v21;
  unint64_t v22;

  type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_25_0();
  MEMORY[0x1E0C80A78](v2);
  OUTLINED_FUNCTION_22_1();
  v5 = v3 - v4;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v21 - v7;
  type metadata accessor for SQLExpressionEvaluatorError();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_114();
  outlined init with copy of SQLExpressionEvaluatorError(v0, v11 - v10, v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (expression: SQLExpression, message: String));
    OUTLINED_FUNCTION_69_0(v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32));
    v21 = 0;
    v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    OUTLINED_FUNCTION_71_1();
    String.append(_:)(v13);
    _print_unlocked<A, B>(_:_:)();
    v14._countAndFlagsBits = 8238;
    v14._object = (void *)0xE200000000000000;
    String.append(_:)(v14);
    v15._countAndFlagsBits = OUTLINED_FUNCTION_107();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_69_0((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32));
    v21 = 0;
    v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    OUTLINED_FUNCTION_71_1();
    v17._countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v17);
    _print_unlocked<A, B>(_:_:)();
  }
  v16 = v21;
  v18 = OUTLINED_FUNCTION_13_3();
  v19(v18);
  return v16;
}

void one-time initialization function for SQLITE_TRANSIENT()
{
  SQLITE_TRANSIENT = -1;
}

uint64_t SQLExpressionEvaluator.init(isReadOnly:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  sqlite3 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  sqlite3_stmt *v19;
  sqlite3 *ppDb[2];

  v3 = v1;
  ppDb[1] = *(sqlite3 **)MEMORY[0x1E0C80C00];
  ppDb[0] = 0;
  if ((a1 & 1) != 0)
    v4 = 1;
  else
    v4 = 2;
  v5 = sqlite3_open_v2(":memory:", ppDb, v4, 0);
  v6 = ppDb[0];
  if ((_DWORD)v5 || !ppDb[0])
  {
    v15 = OUTLINED_FUNCTION_15_2(v5);
    swift_getErrorValue();
    Error.localizedDescription.getter();
    OUTLINED_FUNCTION_66_1();
    OUTLINED_FUNCTION_2_9();
    v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    OUTLINED_FUNCTION_51_1();
    lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
    OUTLINED_FUNCTION_13_0();
    *(_QWORD *)v17 = v16;
    *(_QWORD *)(v17 + 8) = v2;
    *(_QWORD *)(v17 + 16) = 0;
    *(_QWORD *)(v17 + 24) = 0;
    *(_BYTE *)(v17 + 32) = 0;
    OUTLINED_FUNCTION_35_1();
  }
  else
  {
    *(sqlite3 **)(v3 + 24) = ppDb[0];
    *(_BYTE *)(v3 + 16) = 1;
    *(_QWORD *)(v3 + 32) = Dictionary.init(dictionaryLiteral:)();
    v19 = 0;
    v9 = OUTLINED_FUNCTION_12_4(v6, "SELECT NOT ((?) IS NULL OR CAST((?) as NUMERIC) == 0 OR CAST((?) as NUMERIC) == 0.0)", v7, v8, &v19);
    if (!(_DWORD)v9 && v19)
    {
      *(_QWORD *)(v3 + 40) = v19;
      return v3;
    }
    v10 = OUTLINED_FUNCTION_15_2(v9);
    swift_getErrorValue();
    Error.localizedDescription.getter();

    OUTLINED_FUNCTION_2_9();
    OUTLINED_FUNCTION_49_1();
    v11 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v13 = v12;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
    OUTLINED_FUNCTION_13_0();
    *(_QWORD *)v14 = 0xD000000000000054;
    *(_QWORD *)(v14 + 8) = 0x800000018DCC3370;
    *(_QWORD *)(v14 + 16) = v11;
    *(_QWORD *)(v14 + 24) = v13;
    *(_BYTE *)(v14 + 32) = 2;
    OUTLINED_FUNCTION_35_1();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_34_1();
  return v3;
}

uint64_t type metadata accessor for SQLExpressionEvaluatorError()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SQLExpressionEvaluatorError;
  if (!type metadata singleton initialization cache for SQLExpressionEvaluatorError)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)()
{
  uint64_t *v0;
  uint64_t *v1;
  unint64_t v2;
  char v3;
  char v4;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = v0;
  swift_bridgeObjectRetain();
  v2 = specialized __RawDictionaryStorage.find<A>(_:)();
  v4 = v3;
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *v1;
  v9 = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, OpaquePointer>);
    _NativeDictionary.copy()();
    v6 = v9;
  }
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v2);
  _NativeDictionary._delete(at:)();
  *v1 = v6;
  swift_bridgeObjectRelease();
  return v7;
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_14_4();
  if ((v0 & 1) == 0)
    return 0;
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_17_1();
  if ((v2 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], ChangeRecord?>);
    OUTLINED_FUNCTION_64_0();
    v0 = v5;
  }
  OUTLINED_FUNCTION_36_0();
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 16 * v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ChangeRecord?);
  lazy protocol witness table accessor for type [StorableValue] and conformance <A> [A]();
  _NativeDictionary._delete(at:)();
  OUTLINED_FUNCTION_27_1();
  return v3;
}

void specialized Dictionary._Variant.removeValue(forKey:)()
{
  char v0;
  char v1;

  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_14_4();
  if ((v0 & 1) != 0)
  {
    OUTLINED_FUNCTION_45_1();
    OUTLINED_FUNCTION_17_1();
    if ((v1 & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], [[String : StorableValue]]?>);
      OUTLINED_FUNCTION_64_0();
    }
    OUTLINED_FUNCTION_36_0();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : StorableValue]]?);
    lazy protocol witness table accessor for type [StorableValue] and conformance <A> [A]();
    OUTLINED_FUNCTION_26_1();
    OUTLINED_FUNCTION_27_1();
  }
  OUTLINED_FUNCTION_32_2();
}

{
  char v0;
  int v1;

  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_14_4();
  if ((v0 & 1) != 0)
  {
    OUTLINED_FUNCTION_45_1();
    OUTLINED_FUNCTION_17_1();
    if (!v1)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], [String : StorableValue]>);
      OUTLINED_FUNCTION_64_0();
    }
    OUTLINED_FUNCTION_36_0();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : StorableValue]);
    lazy protocol witness table accessor for type [StorableValue] and conformance <A> [A]();
    OUTLINED_FUNCTION_26_1();
    OUTLINED_FUNCTION_27_1();
  }
  OUTLINED_FUNCTION_32_2();
}

void outlined init with take of (offset: Int, element: StorableValue)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = OUTLINED_FUNCTION_110(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, v4, v5);
  OUTLINED_FUNCTION_1();
}

unint64_t lazy protocol witness table accessor for type StorableValue and conformance StorableValue()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StorableValue and conformance StorableValue;
  if (!lazy protocol witness table cache variable for type StorableValue and conformance StorableValue)
  {
    v1 = type metadata accessor for StorableValue(255);
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for StorableValue, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue and conformance StorableValue);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DatabaseValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of DatabaseValue(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DatabaseValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of DatabaseValue(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of DatabaseValue(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for DatabaseValue(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of DatabaseValue(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for DatabaseValue()
{
  return &type metadata for DatabaseValue;
}

uint64_t *initializeBufferWithCopyOfBuffer for SQLExpressionEvaluatorError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  ValueMetadata *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = type metadata accessor for SQLExpression();
    (*((void (**)(uint64_t *, uint64_t *, ValueMetadata *))v7[-1].Description + 2))(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (expression: SQLExpression, message: String))
                  + 48);
      v9 = (uint64_t *)((char *)a1 + v8);
      v10 = (uint64_t *)((char *)a2 + v8);
      v11 = v10[1];
      *v9 = *v10;
      v9[1] = v11;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for SQLExpressionEvaluatorError(uint64_t a1)
{
  int EnumCaseMultiPayload;
  ValueMetadata *v3;
  uint64_t result;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v3 = type metadata accessor for SQLExpression();
  result = (*((uint64_t (**)(uint64_t, ValueMetadata *))v3[-1].Description + 1))(a1, v3);
  if (EnumCaseMultiPayload == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (expression: SQLExpression, message: String));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SQLExpressionEvaluatorError(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  ValueMetadata *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = type metadata accessor for SQLExpression();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v5[-1].Description + 2))(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (expression: SQLExpression, message: String))
                + 48);
    v7 = (_QWORD *)(a1 + v6);
    v8 = (_QWORD *)(a2 + v6);
    v9 = v8[1];
    *v7 = *v8;
    v7[1] = v9;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for SQLExpressionEvaluatorError(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  ValueMetadata *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  if (a1 != a2)
  {
    outlined destroy of StorableValue(a1, (uint64_t (*)(_QWORD))type metadata accessor for SQLExpressionEvaluatorError);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = type metadata accessor for SQLExpression();
    (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v5[-1].Description + 2))(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
    {
      v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (expression: SQLExpression, message: String))
                  + 48);
      v7 = (_QWORD *)(a1 + v6);
      v8 = (_QWORD *)(a2 + v6);
      *v7 = *v8;
      v7[1] = v8[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for SQLExpressionEvaluatorError(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  ValueMetadata *v5;
  uint64_t v6;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = type metadata accessor for SQLExpression();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v5[-1].Description + 4))(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (expression: SQLExpression, message: String));
    *(_OWORD *)(a1 + *(int *)(v6 + 48)) = *(_OWORD *)(a2 + *(int *)(v6 + 48));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for SQLExpressionEvaluatorError(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  ValueMetadata *v5;
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of StorableValue(a1, (uint64_t (*)(_QWORD))type metadata accessor for SQLExpressionEvaluatorError);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = type metadata accessor for SQLExpression();
    (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v5[-1].Description + 4))(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (expression: SQLExpression, message: String));
      *(_OWORD *)(a1 + *(int *)(v6 + 48)) = *(_OWORD *)(a2 + *(int *)(v6 + 48));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

ValueMetadata *type metadata completion function for SQLExpressionEvaluatorError()
{
  ValueMetadata *result;
  unint64_t v1;
  _QWORD v2[6];

  result = type metadata accessor for SQLExpression();
  if (v1 <= 0x3F)
  {
    v2[4] = (char *)result[-1].Description + 64;
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t one-time initialization function for numeratorKey()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static AVG.numeratorKey = (__int128)v1;
  return result;
}

uint64_t one-time initialization function for denominatorKey()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static AVG.denominatorKey = (__int128)v1;
  return result;
}

void AVG.getCurrentAggregationEvent()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_32_3();
  OUTLINED_FUNCTION_134_1();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_39_0();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v19 - v7;
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_160_0();
  MEMORY[0x1E0C80A78](v10);
  v12 = (unint64_t *)((char *)&v19 - v11);
  v13 = type metadata accessor for AVG(0);
  v14 = *(_QWORD *)(v1 + *(int *)(v13 + 32));
  if (v14)
  {
    v15 = *(double *)(v1 + *(int *)(v13 + 28)) / (double)v14;
    *((_QWORD *)&v20 + 1) = MEMORY[0x1E0DEB070];
    *(double *)&v19 = v15;
    OUTLINED_FUNCTION_218(v4);
    OUTLINED_FUNCTION_70_2((uint64_t)&v19, v3);
    if (!v2)
    {
      v16 = type metadata accessor for AggregationEvent(0);
      OUTLINED_FUNCTION_218(v0 + *(int *)(v16 + 20));
      v12 = v3;
LABEL_6:
      OUTLINED_FUNCTION_95_1((uint64_t)v12, v17, type metadata accessor for StorableValue);
    }
  }
  else
  {
    v19 = 0u;
    v20 = 0u;
    OUTLINED_FUNCTION_215((uint64_t)v8);
    OUTLINED_FUNCTION_86_1((uint64_t)&v19, (uint64_t)v8, v12);
    if (!v2)
    {
      v18 = type metadata accessor for AggregationEvent(0);
      OUTLINED_FUNCTION_215(v0 + *(int *)(v18 + 20));
      goto LABEL_6;
    }
  }
  OUTLINED_FUNCTION_94_0();
  OUTLINED_FUNCTION_9();
}

void AVG.processEvent(changeRecord:expressionEvaluator:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int EnumCaseMultiPayload;
  _QWORD v30[4];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  OUTLINED_FUNCTION_75_1();
  OUTLINED_FUNCTION_142_1(v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v8);
  v34 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = OUTLINED_FUNCTION_65_2();
  v32 = *(_QWORD *)(v10 - 8);
  v33 = v10;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_117();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_22_1();
  v15 = v13 - v14;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v30 - v17;
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v19);
  OUTLINED_FUNCTION_22_1();
  v22 = v20 - v21;
  MEMORY[0x1E0C80A78](v23);
  v25 = (_QWORD *)((char *)v30 - v24);
  type metadata accessor for AggregationEvent(0);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v26);
  OUTLINED_FUNCTION_159_0();
  v27 = v37;
  AVG.getCurrentAggregationEvent()();
  if (!v27)
  {
    v30[3] = v18;
    v31 = v22;
    v30[1] = v2;
    v30[2] = v15;
    v37 = v1;
    v28 = type metadata accessor for AVG(0);
    OUTLINED_FUNCTION_144_0(v0 + *(int *)(v28 + 20), v25);
    v35 = v28;
    outlined init with copy of StorableValue((uint64_t)v25, v31, type metadata accessor for StorableValue);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v36 = 0;
    __asm { BR              X10 }
  }
  OUTLINED_FUNCTION_94_0();
  OUTLINED_FUNCTION_13_4();
}

void protocol witness for Aggregation.processEvent(changeRecord:expressionEvaluator:) in conformance AVG()
{
  AVG.processEvent(changeRecord:expressionEvaluator:)();
}

uint64_t protocol witness for Aggregation.aggregationMetadata() in conformance AVG()
{
  return AVG.aggregationMetadata()();
}

uint64_t AVG.aggregationMetadata()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, StorableValue)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
  v5 = (__n128 *)OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_126_0(v5, (__n128)xmmword_18DC0CE10);
  if (one-time initialization token for numeratorKey != -1)
    swift_once();
  v6 = OUTLINED_FUNCTION_176(&static AVG.numeratorKey);
  v7 = type metadata accessor for AVG(v6);
  OUTLINED_FUNCTION_56_2(v7);
  OUTLINED_FUNCTION_148_0();
  v8 = *(int *)(v1 + 48);
  v9 = one-time initialization token for denominatorKey;
  OUTLINED_FUNCTION_100();
  if (v9 != -1)
    swift_once();
  v10 = (_QWORD *)(v4 + v3);
  v11 = v4 + v3 + v8;
  v12 = *((_QWORD *)&static AVG.denominatorKey + 1);
  *v10 = static AVG.denominatorKey;
  v10[1] = v12;
  *(_QWORD *)v11 = *(_QWORD *)(v0 + *(int *)(v2 + 32));
  *(_BYTE *)(v11 + 8) = 0;
  OUTLINED_FUNCTION_107_1();
  OUTLINED_FUNCTION_104_0();
  return OUTLINED_FUNCTION_26_2();
}

void protocol witness for Aggregation.applyMetadata(metadata:) in conformance AVG(Swift::OpaquePointer a1)
{
  AVG.applyMetadata(metadata:)(a1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AVG.applyMetadata(metadata:)(Swift::OpaquePointer metadata)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_75_1();
  OUTLINED_FUNCTION_79_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_17_2();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_130_0();
  if (!v8)
  {
    v4 = type metadata accessor for AVG(0);
    v12 = 0;
    *(_QWORD *)(v1 + *(int *)(v4 + 28)) = 0;
    goto LABEL_13;
  }
  if (one-time initialization token for numeratorKey != -1)
  {
    swift_once();
    if (!*(_QWORD *)(v2 + 16))
      goto LABEL_21;
  }
  OUTLINED_FUNCTION_100();
  OUTLINED_FUNCTION_67_2();
  OUTLINED_FUNCTION_66_2();
  if ((v5 & 1) == 0)
    goto LABEL_21;
  if (one-time initialization token for denominatorKey != -1)
    swift_once();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_21;
  OUTLINED_FUNCTION_100();
  OUTLINED_FUNCTION_67_2();
  OUTLINED_FUNCTION_66_2();
  if ((v5 & 1) == 0)
    goto LABEL_21;
  OUTLINED_FUNCTION_100();
  OUTLINED_FUNCTION_72_1(v4);
  OUTLINED_FUNCTION_45();
  v9 = OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_86(v4, 1, v9);
  if (v10)
  {
    v11 = v4;
LABEL_11:
    outlined destroy of UUID?(v11, &demangling cache variable for type metadata for StorableValue?);
    goto LABEL_21;
  }
  v13 = OUTLINED_FUNCTION_112_0();
  if (v13 != 1)
  {
    v15 = v4;
LABEL_20:
    outlined destroy of StorableValue(v15, type metadata accessor for StorableValue);
    goto LABEL_21;
  }
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
LABEL_21:
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    v16 = OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_6_6(v16, v17);
    OUTLINED_FUNCTION_141();
    OUTLINED_FUNCTION_125_1();
    goto LABEL_22;
  }
  v14 = type metadata accessor for AVG(0);
  OUTLINED_FUNCTION_123_1(v14);
  OUTLINED_FUNCTION_72_1(v3);
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_86(v3, 1, v9);
  if (v10)
  {
    v11 = v3;
    goto LABEL_11;
  }
  if (OUTLINED_FUNCTION_101_1())
  {
    v15 = v3;
    goto LABEL_20;
  }
  if (*(_BYTE *)(v3 + 8) == 1)
    goto LABEL_21;
  v12 = *(_QWORD *)v3;
LABEL_13:
  *(_QWORD *)(v1 + *(int *)(v4 + 32)) = v12;
LABEL_22:
  OUTLINED_FUNCTION_13_4();
}

uint64_t one-time initialization function for countKey()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static COUNT.countKey = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static COUNT_STAR.countKey = (__int128)v1;
  return result;
}

void COUNT.getCurrentAggregationEvent()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  OUTLINED_FUNCTION_32_3();
  OUTLINED_FUNCTION_124_1();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v7);
  v8 = OUTLINED_FUNCTION_77_0();
  v9 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for COUNT(v8) + 28));
  v12[3] = MEMORY[0x1E0DEDC60];
  v12[0] = v9;
  OUTLINED_FUNCTION_69_1((uint64_t)v6);
  OUTLINED_FUNCTION_70_2((uint64_t)v12, v3);
  if (!v2)
  {
    v10 = type metadata accessor for AggregationEvent(0);
    OUTLINED_FUNCTION_69_1(v0 + *(int *)(v10 + 20));
    OUTLINED_FUNCTION_95_1((uint64_t)v3, v11, type metadata accessor for StorableValue);
  }
  OUTLINED_FUNCTION_152_0();
  OUTLINED_FUNCTION_81_1();
}

void COUNT.processEvent(changeRecord:expressionEvaluator:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  OUTLINED_FUNCTION_42();
  v12 = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_118();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_17_2();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_156_0();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_158_0();
  COUNT.getCurrentAggregationEvent()();
  if (!v1)
  {
    v10 = OUTLINED_FUNCTION_183();
    SQLExpressionEvaluator.execute(expression:payload:)(v0 + *(int *)(v10 + 20), v12, v3);
    outlined init with copy of StorableValue((uint64_t)v3, v2, type metadata accessor for StorableValue);
    v11 = (char *)&loc_18D92F2CC + dword_18D92F45C[OUTLINED_FUNCTION_101_1()];
    __asm { BR              X10 }
  }
  OUTLINED_FUNCTION_94_0();
  OUTLINED_FUNCTION_9();
}

void protocol witness for Aggregation.processEvent(changeRecord:expressionEvaluator:) in conformance COUNT()
{
  COUNT.processEvent(changeRecord:expressionEvaluator:)();
}

uint64_t protocol witness for Aggregation.aggregationMetadata() in conformance COUNT()
{
  return COUNT.aggregationMetadata()();
}

uint64_t COUNT.aggregationMetadata()()
{
  __n128 *v0;
  uint64_t v1;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, StorableValue)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
  v0 = (__n128 *)OUTLINED_FUNCTION_9_5();
  OUTLINED_FUNCTION_217(v0, (__n128)xmmword_18DC0CE20);
  if (one-time initialization token for countKey != -1)
    swift_once();
  v1 = OUTLINED_FUNCTION_58_3(&static COUNT.countKey);
  v2 = type metadata accessor for COUNT(v1);
  OUTLINED_FUNCTION_87_1(*(int *)(v2 + 28));
  OUTLINED_FUNCTION_141_1();
  OUTLINED_FUNCTION_104_0();
  return OUTLINED_FUNCTION_19_2();
}

void protocol witness for Aggregation.applyMetadata(metadata:) in conformance COUNT(Swift::OpaquePointer a1)
{
  COUNT.applyMetadata(metadata:)(a1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> COUNT.applyMetadata(metadata:)(Swift::OpaquePointer metadata)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_79_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_38_2();
  if (v5)
  {
    if (one-time initialization token for countKey != -1)
    {
      swift_once();
      if (!*(_QWORD *)(v2 + 16))
        goto LABEL_12;
    }
    OUTLINED_FUNCTION_33_1();
    OUTLINED_FUNCTION_105_0();
    v7 = v6;
    OUTLINED_FUNCTION_8_1();
    if ((v7 & 1) == 0)
      goto LABEL_12;
    OUTLINED_FUNCTION_33_1();
    OUTLINED_FUNCTION_53_2();
    OUTLINED_FUNCTION_8_1();
    v8 = OUTLINED_FUNCTION_123();
    v9 = OUTLINED_FUNCTION_86(v3, 1, v8);
    if (v10)
    {
      OUTLINED_FUNCTION_48(v9, &demangling cache variable for type metadata for StorableValue?);
LABEL_12:
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      v14 = OUTLINED_FUNCTION_13_0();
      OUTLINED_FUNCTION_6_6(v14, v15);
      OUTLINED_FUNCTION_141();
      OUTLINED_FUNCTION_125_1();
      goto LABEL_13;
    }
    v13 = OUTLINED_FUNCTION_139_1();
    if ((_DWORD)v13)
    {
      OUTLINED_FUNCTION_121_1(v13, type metadata accessor for StorableValue);
      goto LABEL_12;
    }
    if (*(_BYTE *)(v3 + 8) == 1)
      goto LABEL_12;
    v12 = *(_QWORD *)v3;
    v11 = OUTLINED_FUNCTION_183();
  }
  else
  {
    v11 = OUTLINED_FUNCTION_183();
    v12 = 0;
  }
  *(_QWORD *)(v1 + *(int *)(v11 + 28)) = v12;
LABEL_13:
  OUTLINED_FUNCTION_152_0();
  OUTLINED_FUNCTION_82_0();
}

uint64_t one-time initialization function for sumKey()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static SUM_INT.sumKey = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static SUM_NON_INT.sumKey = (__int128)v1;
  return result;
}

uint64_t one-time initialization function for isNonNullEventSeenKey()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static SUM_INT.isNonNullEventSeenKey = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static SUM_NON_INT.isNonNullEventSeenKey = (__int128)v1;
  return result;
}

void SUM_INT.getCurrentAggregationEvent()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_32_3();
  OUTLINED_FUNCTION_134_1();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_39_0();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v18 - v8;
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_18_2();
  MEMORY[0x1E0C80A78](v11);
  v12 = OUTLINED_FUNCTION_131_1();
  v13 = type metadata accessor for SUM_INT(v12);
  if ((*(_BYTE *)(v1 + *(int *)(v13 + 32)) & 1) != 0)
  {
    v14 = *(_QWORD *)(v1 + *(int *)(v13 + 28));
    v18[3] = MEMORY[0x1E0DEDC60];
    v18[0] = v14;
    OUTLINED_FUNCTION_106_1(v5);
    OUTLINED_FUNCTION_70_2((uint64_t)v18, v4);
    if (!v2)
    {
      v15 = type metadata accessor for AggregationEvent(0);
      OUTLINED_FUNCTION_106_1(v0 + *(int *)(v15 + 20));
      v3 = v4;
LABEL_6:
      OUTLINED_FUNCTION_95_1((uint64_t)v3, v16, type metadata accessor for StorableValue);
    }
  }
  else
  {
    OUTLINED_FUNCTION_85_1(v13);
    OUTLINED_FUNCTION_86_1((uint64_t)v18, (uint64_t)v9, v3);
    if (!v2)
    {
      v17 = type metadata accessor for AggregationEvent(0);
      OUTLINED_FUNCTION_111_1(v0 + *(int *)(v17 + 20));
      goto LABEL_6;
    }
  }
  OUTLINED_FUNCTION_94_0();
  OUTLINED_FUNCTION_9();
}

void SUM_INT.processEvent(changeRecord:expressionEvaluator:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_42();
  v4 = v0;
  v29 = v5;
  v7 = v6;
  v8 = OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_18_2();
  MEMORY[0x1E0C80A78](v10);
  v12 = (uint64_t *)((char *)&v28 - v11);
  type metadata accessor for AggregationEvent(0);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_116();
  SUM_INT.getCurrentAggregationEvent()();
  if (v1)
    goto LABEL_4;
  v28 = v3;
  v14 = OUTLINED_FUNCTION_184();
  SQLExpressionEvaluator.execute(expression:payload:)(v0 + *(int *)(v14 + 20), v29, v12);
  v15 = v14;
  v16 = v28;
  outlined init with copy of StorableValue((uint64_t)v12, v28, type metadata accessor for StorableValue);
  if (swift_getEnumCaseMultiPayload())
  {
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    v17 = OUTLINED_FUNCTION_13_0();
    v19 = v18;
    v18[3] = v8;
    v20 = OUTLINED_FUNCTION_57_1(v17, v18);
    outlined init with copy of StorableValue((uint64_t)v12, (uint64_t)v20, type metadata accessor for StorableValue);
    *((_OWORD *)v19 + 2) = 0u;
    *((_OWORD *)v19 + 3) = 0u;
    *((_BYTE *)v19 + 64) = 3;
    swift_willThrow();
    outlined destroy of StorableValue((uint64_t)v12, type metadata accessor for StorableValue);
    outlined destroy of StorableValue(v2, type metadata accessor for AggregationEvent);
    outlined destroy of StorableValue(v16, type metadata accessor for StorableValue);
LABEL_4:
    OUTLINED_FUNCTION_9();
    return;
  }
  if ((*(_BYTE *)(v16 + 8) & 1) != 0)
  {
LABEL_10:
    SUM_INT.getCurrentAggregationEvent()();
    OUTLINED_FUNCTION_121_1(v27, type metadata accessor for StorableValue);
    outlined init with take of StorableValue(v2, v7, type metadata accessor for AggregationEvent);
    goto LABEL_4;
  }
  v21 = *(_QWORD *)v16;
  v22 = *(int *)(v15 + 32);
  if ((*(_BYTE *)(v4 + v22) & 1) == 0)
    *(_BYTE *)(v4 + v22) = 1;
  v23 = *(int *)(v15 + 28);
  v24 = *(_QWORD *)(v4 + v23);
  v25 = __OFADD__(v24, v21);
  v26 = v24 + v21;
  if (!v25)
  {
    *(_QWORD *)(v4 + v23) = v26;
    goto LABEL_10;
  }
  __break(1u);
}

void protocol witness for Aggregation.processEvent(changeRecord:expressionEvaluator:) in conformance SUM_INT()
{
  SUM_INT.processEvent(changeRecord:expressionEvaluator:)();
}

uint64_t protocol witness for Aggregation.aggregationMetadata() in conformance SUM_INT()
{
  return SUM_INT.aggregationMetadata()();
}

uint64_t SUM_INT.aggregationMetadata()()
{
  __n128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, StorableValue)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
  v0 = (__n128 *)OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_126_0(v0, (__n128)xmmword_18DC0CE10);
  if (one-time initialization token for sumKey != -1)
    swift_once();
  v1 = OUTLINED_FUNCTION_176(&static SUM_INT.sumKey);
  v2 = type metadata accessor for SUM_INT(v1);
  OUTLINED_FUNCTION_56_2(v2);
  OUTLINED_FUNCTION_107_1();
  v3 = one-time initialization token for isNonNullEventSeenKey;
  OUTLINED_FUNCTION_100();
  if (v3 != -1)
    swift_once();
  OUTLINED_FUNCTION_62_3(&static SUM_INT.isNonNullEventSeenKey);
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_26_2();
}

void protocol witness for Aggregation.applyMetadata(metadata:) in conformance SUM_INT(Swift::OpaquePointer a1)
{
  SUM_INT.applyMetadata(metadata:)(a1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SUM_INT.applyMetadata(metadata:)(Swift::OpaquePointer metadata)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_79_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_17_2();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_130_0();
  if (v8)
  {
    if (one-time initialization token for sumKey != -1)
    {
      swift_once();
      if (!*(_QWORD *)(v2 + 16))
        goto LABEL_17;
    }
    OUTLINED_FUNCTION_100();
    OUTLINED_FUNCTION_67_2();
    OUTLINED_FUNCTION_66_2();
    if ((v5 & 1) == 0)
      goto LABEL_17;
    if (one-time initialization token for isNonNullEventSeenKey != -1)
      swift_once();
    if (!*(_QWORD *)(v2 + 16))
      goto LABEL_17;
    OUTLINED_FUNCTION_100();
    OUTLINED_FUNCTION_67_2();
    OUTLINED_FUNCTION_66_2();
    if ((v5 & 1) == 0)
      goto LABEL_17;
    OUTLINED_FUNCTION_100();
    OUTLINED_FUNCTION_72_1(v4);
    OUTLINED_FUNCTION_45();
    v9 = OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_86(v4, 1, v9);
    if (v10)
    {
      v11 = v4;
    }
    else
    {
      if (OUTLINED_FUNCTION_112_0())
      {
        v14 = v4;
LABEL_15:
        outlined destroy of StorableValue(v14, type metadata accessor for StorableValue);
        goto LABEL_17;
      }
      if (*(_BYTE *)(v4 + 8) == 1)
        goto LABEL_17;
      v17 = *(_QWORD *)v4;
      *(_QWORD *)(v1 + *(int *)(OUTLINED_FUNCTION_184() + 28)) = v17;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_72_1(v3);
      OUTLINED_FUNCTION_127();
      OUTLINED_FUNCTION_86(v3, 1, v9);
      if (!v10)
      {
        if (!OUTLINED_FUNCTION_101_1())
        {
          if ((*(_BYTE *)(v3 + 8) & 1) == 0 && *(_QWORD *)v3 < 2uLL)
          {
            OUTLINED_FUNCTION_221(*(_QWORD *)v3);
            goto LABEL_18;
          }
          goto LABEL_17;
        }
        v14 = v3;
        goto LABEL_15;
      }
      v11 = v3;
    }
    outlined destroy of UUID?(v11, &demangling cache variable for type metadata for StorableValue?);
LABEL_17:
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    v15 = OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_6_6(v15, v16);
    OUTLINED_FUNCTION_141();
    OUTLINED_FUNCTION_125_1();
    goto LABEL_18;
  }
  v12 = OUTLINED_FUNCTION_184();
  OUTLINED_FUNCTION_216(v12);
LABEL_18:
  OUTLINED_FUNCTION_9();
}

void SUM_NON_INT.getCurrentAggregationEvent()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_32_3();
  OUTLINED_FUNCTION_134_1();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_39_0();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v18 - v8;
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_18_2();
  MEMORY[0x1E0C80A78](v11);
  v12 = OUTLINED_FUNCTION_131_1();
  v13 = type metadata accessor for SUM_NON_INT(v12);
  if ((*(_BYTE *)(v1 + *(int *)(v13 + 32)) & 1) != 0)
  {
    v14 = *(_QWORD *)(v1 + *(int *)(v13 + 28));
    v18[3] = MEMORY[0x1E0DEB070];
    v18[0] = v14;
    OUTLINED_FUNCTION_106_1(v5);
    OUTLINED_FUNCTION_70_2((uint64_t)v18, v4);
    if (!v2)
    {
      v15 = type metadata accessor for AggregationEvent(0);
      OUTLINED_FUNCTION_106_1(v0 + *(int *)(v15 + 20));
      v3 = v4;
LABEL_6:
      OUTLINED_FUNCTION_95_1((uint64_t)v3, v16, type metadata accessor for StorableValue);
    }
  }
  else
  {
    OUTLINED_FUNCTION_85_1(v13);
    OUTLINED_FUNCTION_86_1((uint64_t)v18, (uint64_t)v9, v3);
    if (!v2)
    {
      v17 = type metadata accessor for AggregationEvent(0);
      OUTLINED_FUNCTION_111_1(v0 + *(int *)(v17 + 20));
      goto LABEL_6;
    }
  }
  OUTLINED_FUNCTION_94_0();
  OUTLINED_FUNCTION_9();
}

void SUM_NON_INT.processEvent(changeRecord:expressionEvaluator:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  _QWORD v29[5];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;

  OUTLINED_FUNCTION_75_1();
  v38 = v4;
  v37 = v5;
  v32 = v6;
  v33 = v7;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v8);
  v36 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for String.Encoding();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v10);
  v35 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = OUTLINED_FUNCTION_65_2();
  v31 = *(_QWORD *)(v34 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v15);
  OUTLINED_FUNCTION_18_2();
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v29 - v17;
  v19 = OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v20);
  OUTLINED_FUNCTION_39_0();
  MEMORY[0x1E0C80A78](v21);
  v23 = (_QWORD *)((char *)v29 - v22);
  type metadata accessor for AggregationEvent(0);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)v29 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  SUM_NON_INT.getCurrentAggregationEvent()();
  if (!v1)
  {
    v29[4] = v19;
    v30 = v3;
    v29[2] = v2;
    v29[3] = v18;
    v29[1] = v14;
    v39 = v26;
    v27 = OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_144_0(v0 + *(int *)(v27 + 20), v23);
    v38 = 0;
    v37 = v23;
    outlined init with copy of StorableValue((uint64_t)v23, v30, type metadata accessor for StorableValue);
    v28 = (char *)&loc_18D930148 + 4 * byte_18DC0D130[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  OUTLINED_FUNCTION_94_0();
  OUTLINED_FUNCTION_13_4();
}

void protocol witness for Aggregation.processEvent(changeRecord:expressionEvaluator:) in conformance SUM_NON_INT()
{
  SUM_NON_INT.processEvent(changeRecord:expressionEvaluator:)();
}

uint64_t protocol witness for Aggregation.aggregationMetadata() in conformance SUM_NON_INT()
{
  return SUM_NON_INT.aggregationMetadata()();
}

uint64_t SUM_NON_INT.aggregationMetadata()()
{
  __n128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, StorableValue)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
  v0 = (__n128 *)OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_126_0(v0, (__n128)xmmword_18DC0CE10);
  if (one-time initialization token for sumKey != -1)
    swift_once();
  v1 = OUTLINED_FUNCTION_176(&static SUM_NON_INT.sumKey);
  v2 = type metadata accessor for SUM_NON_INT(v1);
  OUTLINED_FUNCTION_56_2(v2);
  OUTLINED_FUNCTION_148_0();
  v3 = one-time initialization token for isNonNullEventSeenKey;
  OUTLINED_FUNCTION_100();
  if (v3 != -1)
    swift_once();
  OUTLINED_FUNCTION_62_3(&static SUM_NON_INT.isNonNullEventSeenKey);
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_26_2();
}

void protocol witness for Aggregation.applyMetadata(metadata:) in conformance SUM_NON_INT(Swift::OpaquePointer a1)
{
  SUM_NON_INT.applyMetadata(metadata:)(a1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SUM_NON_INT.applyMetadata(metadata:)(Swift::OpaquePointer metadata)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_75_1();
  OUTLINED_FUNCTION_79_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_17_2();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_130_0();
  if (v7)
  {
    if (one-time initialization token for sumKey != -1)
    {
      swift_once();
      if (!*(_QWORD *)(v1 + 16))
        goto LABEL_20;
    }
    OUTLINED_FUNCTION_100();
    OUTLINED_FUNCTION_67_2();
    OUTLINED_FUNCTION_66_2();
    if ((v4 & 1) == 0)
      goto LABEL_20;
    if (one-time initialization token for isNonNullEventSeenKey != -1)
      swift_once();
    if (!*(_QWORD *)(v1 + 16))
      goto LABEL_20;
    OUTLINED_FUNCTION_100();
    OUTLINED_FUNCTION_67_2();
    OUTLINED_FUNCTION_66_2();
    if ((v4 & 1) == 0)
      goto LABEL_20;
    OUTLINED_FUNCTION_100();
    OUTLINED_FUNCTION_72_1(v3);
    OUTLINED_FUNCTION_45();
    v8 = OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_86(v3, 1, v8);
    if (v9)
    {
      v10 = v3;
    }
    else
    {
      v12 = OUTLINED_FUNCTION_112_0();
      if (v12 != 1)
      {
        v14 = v3;
LABEL_19:
        outlined destroy of StorableValue(v14, type metadata accessor for StorableValue);
        goto LABEL_20;
      }
      if ((*(_BYTE *)(v3 + 8) & 1) != 0)
      {
LABEL_20:
        lazy protocol witness table accessor for type SQLError and conformance SQLError();
        v15 = OUTLINED_FUNCTION_13_0();
        OUTLINED_FUNCTION_6_6(v15, v16);
        OUTLINED_FUNCTION_141();
        OUTLINED_FUNCTION_125_1();
        goto LABEL_21;
      }
      v13 = OUTLINED_FUNCTION_186();
      OUTLINED_FUNCTION_123_1(v13);
      OUTLINED_FUNCTION_72_1(v2);
      OUTLINED_FUNCTION_127();
      OUTLINED_FUNCTION_86(v2, 1, v8);
      if (!v9)
      {
        if (!OUTLINED_FUNCTION_101_1())
        {
          if ((*(_BYTE *)(v2 + 8) & 1) == 0 && *(_QWORD *)v2 < 2uLL)
          {
            OUTLINED_FUNCTION_221(*(_QWORD *)v2);
            goto LABEL_21;
          }
          goto LABEL_20;
        }
        v14 = v2;
        goto LABEL_19;
      }
      v10 = v2;
    }
    outlined destroy of UUID?(v10, &demangling cache variable for type metadata for StorableValue?);
    goto LABEL_20;
  }
  v11 = OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_216(v11);
LABEL_21:
  OUTLINED_FUNCTION_13_4();
}

uint64_t one-time initialization function for totalKey()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static TOTAL.totalKey = (__int128)v1;
  return result;
}

void TOTAL.getCurrentAggregationEvent()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  OUTLINED_FUNCTION_32_3();
  OUTLINED_FUNCTION_124_1();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v7);
  v8 = OUTLINED_FUNCTION_77_0();
  v9 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for TOTAL(v8) + 28));
  v12[3] = MEMORY[0x1E0DEB070];
  v12[0] = v9;
  OUTLINED_FUNCTION_69_1((uint64_t)v6);
  OUTLINED_FUNCTION_70_2((uint64_t)v12, v3);
  if (!v2)
  {
    v10 = type metadata accessor for AggregationEvent(0);
    OUTLINED_FUNCTION_69_1(v0 + *(int *)(v10 + 20));
    OUTLINED_FUNCTION_95_1((uint64_t)v3, v11, type metadata accessor for StorableValue);
  }
  OUTLINED_FUNCTION_152_0();
  OUTLINED_FUNCTION_81_1();
}

void TOTAL.processEvent(changeRecord:expressionEvaluator:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int EnumCaseMultiPayload;
  _QWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  OUTLINED_FUNCTION_75_1();
  OUTLINED_FUNCTION_142_1(v5, v6, v7, v8, v9);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v10);
  v30 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OUTLINED_FUNCTION_65_2();
  v28 = *(_QWORD *)(v12 - 8);
  v29 = v12;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_116();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_160_0();
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v26 - v16;
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_18_2();
  MEMORY[0x1E0C80A78](v19);
  v21 = (_QWORD *)((char *)v26 - v20);
  type metadata accessor for AggregationEvent(0);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v22);
  OUTLINED_FUNCTION_118();
  v23 = v33;
  TOTAL.getCurrentAggregationEvent()();
  if (!v23)
  {
    v26[3] = v17;
    v27 = v3;
    v26[1] = v1;
    v26[2] = v2;
    v33 = v4;
    v24 = OUTLINED_FUNCTION_185();
    OUTLINED_FUNCTION_144_0(v0 + *(int *)(v24 + 20), v21);
    v31 = v24;
    outlined init with copy of StorableValue((uint64_t)v21, v27, type metadata accessor for StorableValue);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v32 = 0;
    __asm { BR              X10 }
  }
  OUTLINED_FUNCTION_94_0();
  OUTLINED_FUNCTION_13_4();
}

void protocol witness for Aggregation.processEvent(changeRecord:expressionEvaluator:) in conformance TOTAL()
{
  TOTAL.processEvent(changeRecord:expressionEvaluator:)();
}

uint64_t protocol witness for Aggregation.aggregationMetadata() in conformance TOTAL()
{
  return TOTAL.aggregationMetadata()();
}

uint64_t TOTAL.aggregationMetadata()()
{
  __n128 *v0;
  uint64_t v1;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, StorableValue)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
  v0 = (__n128 *)OUTLINED_FUNCTION_9_5();
  OUTLINED_FUNCTION_217(v0, (__n128)xmmword_18DC0CE20);
  if (one-time initialization token for totalKey != -1)
    swift_once();
  v1 = OUTLINED_FUNCTION_58_3(&static TOTAL.totalKey);
  v2 = type metadata accessor for TOTAL(v1);
  OUTLINED_FUNCTION_87_1(*(int *)(v2 + 28));
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_104_0();
  return OUTLINED_FUNCTION_19_2();
}

void protocol witness for Aggregation.applyMetadata(metadata:) in conformance TOTAL(Swift::OpaquePointer a1)
{
  TOTAL.applyMetadata(metadata:)(a1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TOTAL.applyMetadata(metadata:)(Swift::OpaquePointer metadata)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_79_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_38_2();
  if (v5)
  {
    if (one-time initialization token for totalKey == -1 || (swift_once(), *(_QWORD *)(v2 + 16)))
    {
      OUTLINED_FUNCTION_33_1();
      OUTLINED_FUNCTION_105_0();
      v7 = v6;
      OUTLINED_FUNCTION_8_1();
      if ((v7 & 1) != 0)
      {
        OUTLINED_FUNCTION_33_1();
        OUTLINED_FUNCTION_53_2();
        OUTLINED_FUNCTION_8_1();
        v8 = OUTLINED_FUNCTION_123();
        v9 = OUTLINED_FUNCTION_86(v3, 1, v8);
        if (v10)
        {
          OUTLINED_FUNCTION_48(v9, &demangling cache variable for type metadata for StorableValue?);
        }
        else
        {
          v13 = OUTLINED_FUNCTION_139_1();
          if ((_DWORD)v13 == 1)
          {
            if ((*(_BYTE *)(v3 + 8) & 1) == 0)
            {
              v12 = *(_QWORD *)v3;
              v11 = OUTLINED_FUNCTION_185();
              goto LABEL_8;
            }
          }
          else
          {
            OUTLINED_FUNCTION_121_1(v13, type metadata accessor for StorableValue);
          }
        }
      }
    }
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    v14 = OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_6_6(v14, v15);
    OUTLINED_FUNCTION_141();
    OUTLINED_FUNCTION_125_1();
    goto LABEL_14;
  }
  v11 = OUTLINED_FUNCTION_185();
  v12 = 0;
LABEL_8:
  *(_QWORD *)(v1 + *(int *)(v11 + 28)) = v12;
LABEL_14:
  OUTLINED_FUNCTION_152_0();
}

uint64_t one-time initialization function for toBeConcatendatedKey()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static GROUP_CONCAT.toBeConcatendatedKey = (__int128)v1;
  return result;
}

void GROUP_CONCAT.processEvent(changeRecord:expressionEvaluator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  ValueMetadata *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  char *v93;
  _QWORD v94[3];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  ValueMetadata *v108;
  uint64_t v109;
  void *Description;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  int *v117;
  __int128 v118;
  __int128 v119;

  OUTLINED_FUNCTION_42();
  a19 = v25;
  a20 = v26;
  v27 = v20;
  v114 = v28;
  v115 = v29;
  v100 = v30;
  v101 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v32);
  OUTLINED_FUNCTION_8();
  v107 = v33;
  v108 = type metadata accessor for SQLExpression();
  Description = v108[-1].Description;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v34);
  OUTLINED_FUNCTION_8();
  v102 = v35;
  v36 = OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_160(v36, (uint64_t)&a10);
  v98 = v37;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v38);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v39);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_120(v40);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v41);
  OUTLINED_FUNCTION_17_2();
  MEMORY[0x1E0C80A78](v42);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v43);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v44);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_12(v45);
  type metadata accessor for String.Encoding();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v46);
  OUTLINED_FUNCTION_8();
  v96 = v47;
  v48 = OUTLINED_FUNCTION_65_2();
  OUTLINED_FUNCTION_160(v48, (uint64_t)&a11);
  v97 = v49;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v50);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v51);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_120(v52);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v53);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v54);
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v55);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v56);
  v99 = (char *)v94 - v57;
  v58 = OUTLINED_FUNCTION_33();
  v59 = OUTLINED_FUNCTION_193((uint64_t)v58);
  MEMORY[0x1E0C80A78](v59);
  OUTLINED_FUNCTION_6_1();
  v106 = v60;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v61);
  v63 = (char *)v94 - v62;
  v109 = OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v64);
  v105 = (char *)v94 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v66);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v67);
  v103 = (char *)v94 - v68;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v69);
  v111 = (uint64_t)v94 - v70;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v71);
  v112 = (_QWORD *)((char *)v94 - v72);
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v73);
  v75 = (_QWORD *)((char *)v94 - v74);
  v76 = (int *)type metadata accessor for GROUP_CONCAT(0);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v77);
  OUTLINED_FUNCTION_6_1();
  v104 = v78;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v79);
  v113 = OUTLINED_FUNCTION_156_0();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v80);
  v116 = (char *)v94 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = v27;
  outlined init with copy of StorableValue(v27, v24, type metadata accessor for GROUP_CONCAT);
  v83 = (uint64_t *)(v24 + v76[8]);
  v84 = v83[1];
  v95 = v23;
  if (v84)
  {
    v85 = *v83;
    *((_QWORD *)&v119 + 1) = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v118 = v85;
    *((_QWORD *)&v118 + 1) = v84;
  }
  else
  {
    v118 = 0u;
    v119 = 0u;
  }
  v86 = v24 + v76[7];
  v87 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v88 = a10;
  v87(v63, v86, a10);
  OUTLINED_FUNCTION_156();
  StorableValue.init(_:dataType:)((uint64_t)&v118, (uint64_t)v63, v75);
  if (!v21)
  {
    v87(&v116[*(int *)(v113 + 20)], v86, v88);
    OUTLINED_FUNCTION_95_1((uint64_t)v75, v89, type metadata accessor for StorableValue);
    OUTLINED_FUNCTION_190(v90, type metadata accessor for GROUP_CONCAT);
    v91 = v82 + v76[5];
    v92 = v112;
    OUTLINED_FUNCTION_211(v91, v112);
    v94[1] = v87;
    v117 = v76;
    outlined init with copy of StorableValue((uint64_t)v92, v111, type metadata accessor for StorableValue);
    v93 = (char *)sub_18D9317FC + 4 * byte_18DC0D140[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  outlined destroy of StorableValue(v24, type metadata accessor for GROUP_CONCAT);
  OUTLINED_FUNCTION_94_0();
  OUTLINED_FUNCTION_9();
}

uint64_t sub_18D9317FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  Swift::String v15;
  _QWORD *v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t *v19;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v8 = *(uint64_t **)(v7 - 184);
  v9 = v8[1];
  if (v9)
    v10 = *v8;
  else
    v10 = 0;
  *(_QWORD *)(v7 - 216) = v10;
  outlined init with copy of Date?(v4 + *(int *)(*(_QWORD *)(v7 - 136) + 24), v5, &demangling cache variable for type metadata for SQLExpression?);
  v11 = OUTLINED_FUNCTION_173();
  OUTLINED_FUNCTION_86(v11, v12, v6);
  if (v13)
  {
    outlined destroy of UUID?(v5, &demangling cache variable for type metadata for SQLExpression?);
    if (v9)
    {
      *(_QWORD *)(v7 - 184) = v9;
      v14 = v0;
      if (*(_QWORD *)(v4 + *(int *)(*(_QWORD *)(v7 - 136) + 32) + 8))
      {
        v15._countAndFlagsBits = 44;
        v15._object = (void *)0xE100000000000000;
        String.append(_:)(v15);
      }
      OUTLINED_FUNCTION_64();
      v16 = (_QWORD *)(v4 + *(int *)(*(_QWORD *)(v7 - 136) + 32));
      if (v16[1])
      {
        v17._countAndFlagsBits = *(_QWORD *)(v7 - 216);
        v17._object = *(void **)(v7 - 184);
        String.append(_:)(v17);
        OUTLINED_FUNCTION_64();
      }
      else
      {
        v22 = *(_QWORD *)(v7 - 184);
        *v16 = *(_QWORD *)(v7 - 216);
        v16[1] = v22;
      }
      v0 = v14;
    }
    else
    {
      OUTLINED_FUNCTION_64();
    }
    v23 = *(_QWORD *)(v7 - 240);
    outlined init with copy of StorableValue(v4, v23, type metadata accessor for GROUP_CONCAT);
    v24 = (uint64_t *)(v23 + *(int *)(*(_QWORD *)(v7 - 136) + 32));
    v25 = v24[1];
    if (v25)
    {
      v26 = *v24;
      *(_QWORD *)(v7 - 104) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v7 - 128) = v26;
      *(_QWORD *)(v7 - 120) = v25;
    }
    else
    {
      *(_OWORD *)(v7 - 128) = 0u;
      *(_OWORD *)(v7 - 112) = 0u;
    }
    v28 = *(unint64_t **)(v7 - 232);
    v27 = *(_QWORD *)(v7 - 224);
    OUTLINED_FUNCTION_192(v27);
    OUTLINED_FUNCTION_156();
    StorableValue.init(_:dataType:)(v7 - 128, v27, v28);
    if (v0)
    {
      OUTLINED_FUNCTION_190(v29, type metadata accessor for GROUP_CONCAT);
      outlined destroy of StorableValue(v3, type metadata accessor for StorableValue);
      outlined destroy of StorableValue(*(_QWORD *)(v7 - 144), type metadata accessor for AggregationEvent);
    }
    else
    {
      v30 = *(_QWORD *)(v7 - 280);
      OUTLINED_FUNCTION_192(v30 + *(int *)(*(_QWORD *)(v7 - 168) + 20));
      outlined init with take of StorableValue((uint64_t)v28, v30, type metadata accessor for StorableValue);
      OUTLINED_FUNCTION_190(v31, type metadata accessor for GROUP_CONCAT);
      outlined destroy of StorableValue(v3, type metadata accessor for StorableValue);
      outlined init with take of StorableValue(*(_QWORD *)(v7 - 144), *(_QWORD *)(v7 - 272), type metadata accessor for AggregationEvent);
    }
    JUMPOUT(0x18D931790);
  }
  *(_QWORD *)(v7 - 184) = v9;
  v18 = *(_QWORD *)(v7 - 256);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v18, v5, v6);
  v19 = *(uint64_t **)(v7 - 248);
  OUTLINED_FUNCTION_211(v18, v19);
  if (v1)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_73_1();
    outlined destroy of StorableValue(v3, type metadata accessor for StorableValue);
    JUMPOUT(0x18D931780);
  }
  OUTLINED_FUNCTION_116_1((uint64_t)v19, type metadata accessor for StorableValue, v7 - 8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)&loc_18D931BF8 + 4 * byte_18DC0D148[EnumCaseMultiPayload]))();
}

#error "18D932064: call analysis failed (funcsize=5)"

uint64_t protocol witness for Aggregation.aggregationMetadata() in conformance GROUP_CONCAT()
{
  return GROUP_CONCAT.aggregationMetadata()();
}

uint64_t GROUP_CONCAT.aggregationMetadata()()
{
  uint64_t v0;
  _QWORD *v1;
  __n128 *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, StorableValue)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
  v2 = (__n128 *)OUTLINED_FUNCTION_9_5();
  OUTLINED_FUNCTION_217(v2, (__n128)xmmword_18DC0CE20);
  if (one-time initialization token for toBeConcatendatedKey != -1)
    swift_once();
  v3 = OUTLINED_FUNCTION_58_3(&static GROUP_CONCAT.toBeConcatendatedKey);
  v4 = (_QWORD *)(v0 + *(int *)(type metadata accessor for GROUP_CONCAT(v3) + 32));
  v5 = v4[1];
  *v1 = *v4;
  v1[1] = v5;
  OUTLINED_FUNCTION_123();
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_141();
  OUTLINED_FUNCTION_104_0();
  return OUTLINED_FUNCTION_19_2();
}

void protocol witness for Aggregation.applyMetadata(metadata:) in conformance GROUP_CONCAT(Swift::OpaquePointer a1)
{
  GROUP_CONCAT.applyMetadata(metadata:)(a1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> GROUP_CONCAT.applyMetadata(metadata:)(Swift::OpaquePointer metadata)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_38_2();
  if (!v6)
    goto LABEL_10;
  if (one-time initialization token for toBeConcatendatedKey != -1
    && (swift_once(), !*((_QWORD *)metadata._rawValue + 2))
    || (OUTLINED_FUNCTION_33_1(), OUTLINED_FUNCTION_105_0(), v8 = v7, OUTLINED_FUNCTION_8_1(), (v8 & 1) == 0))
  {
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    OUTLINED_FUNCTION_13_0();
    v19 = *v3;
    v20 = v3[1];
    *(Swift::OpaquePointer *)v21 = metadata;
    *(_QWORD *)(v21 + 8) = v19;
    *(_QWORD *)(v21 + 16) = v20;
    *(_BYTE *)(v21 + 64) = 8;
    OUTLINED_FUNCTION_141();
    OUTLINED_FUNCTION_104_0();
    swift_willThrow();
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_33_1();
  OUTLINED_FUNCTION_53_2();
  OUTLINED_FUNCTION_8_1();
  v9 = OUTLINED_FUNCTION_123();
  v10 = OUTLINED_FUNCTION_202();
  v12 = OUTLINED_FUNCTION_86(v10, v11, v9);
  if (v13)
  {
    OUTLINED_FUNCTION_48(v12, &demangling cache variable for type metadata for StorableValue?);
LABEL_10:
    v18 = (uint64_t *)((char *)v3 + *(int *)(type metadata accessor for GROUP_CONCAT(0) + 32));
    swift_bridgeObjectRelease();
    *v18 = 0;
    v18[1] = 0;
    goto LABEL_13;
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((_DWORD)EnumCaseMultiPayload != 3)
  {
    OUTLINED_FUNCTION_121_1(EnumCaseMultiPayload, type metadata accessor for StorableValue);
    goto LABEL_10;
  }
  v15 = *v2;
  v16 = v2[1];
  v17 = (uint64_t *)((char *)v3 + *(int *)(type metadata accessor for GROUP_CONCAT(0) + 32));
  swift_bridgeObjectRelease();
  *v17 = v15;
  v17[1] = v16;
LABEL_13:
  OUTLINED_FUNCTION_82_0();
}

void MAX.getCurrentAggregationEvent()()
{
  MAX.getCurrentAggregationEvent()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  ValueMetadata *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  OUTLINED_FUNCTION_42();
  v23 = v3;
  v24 = v1;
  v5 = v4;
  v6 = OUTLINED_FUNCTION_33();
  v7 = OUTLINED_FUNCTION_193((uint64_t)v6);
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_117();
  v8 = *(_QWORD *)(v5 + 16);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v23 - v11;
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v13);
  v15 = (unint64_t *)((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_60_1((uint64_t)v12, v0 + *(int *)(v5 + 48), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
  v16 = OUTLINED_FUNCTION_167_0();
  OUTLINED_FUNCTION_86(v16, v17, v8);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v25 = 0u;
    v26 = 0u;
  }
  else
  {
    *((_QWORD *)&v26 + 1) = v8;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v25);
    OUTLINED_FUNCTION_83((uint64_t)boxed_opaque_existential_0, (uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32));
  }
  v20 = v24;
  OUTLINED_FUNCTION_213(v2);
  StorableValue.init(_:dataType:)((uint64_t)&v25, v2, v15);
  if (!v20)
  {
    v21 = type metadata accessor for AggregationEvent(0);
    v22 = v23;
    OUTLINED_FUNCTION_213(v23 + *(int *)(v21 + 20));
    outlined init with take of StorableValue((uint64_t)v15, v22, type metadata accessor for StorableValue);
  }
  OUTLINED_FUNCTION_94_0();
  OUTLINED_FUNCTION_9();
}

void MAX.processEvent(changeRecord:expressionEvaluator:)()
{
  MAX.processEvent(changeRecord:expressionEvaluator:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  ValueMetadata *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t (**v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  ValueMetadata *v91;
  char v92;
  uint64_t (*v93)(uint64_t, uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102[36];
  _QWORD v103[8];
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[2];
  _BYTE *v109;
  uint64_t v110;
  uint64_t (**Description)(uint64_t, uint64_t, uint64_t);
  ValueMetadata *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  OUTLINED_FUNCTION_42();
  v102[33] = v5;
  v7 = v6;
  v113 = v8;
  v114 = v9;
  v103[1] = v10;
  v108[1] = v11;
  v12 = *(_QWORD *)(v6 + 16);
  v103[2] = *(_QWORD *)(v12 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_12(v15);
  v16 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_160(v16, (uint64_t)&v109);
  v102[7] = v17;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_8();
  v103[6] = v19;
  v102[30] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v20);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v21);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v22);
  v102[31] = (uint64_t)v102 - v23;
  v24 = OUTLINED_FUNCTION_65_2();
  OUTLINED_FUNCTION_160(v24, (uint64_t)v108);
  v102[5] = v25;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v26);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_120(v27);
  v102[27] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v28);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v29);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v30);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_12(v31);
  v104 = v12;
  v106 = type metadata accessor for Optional();
  v103[7] = *(_QWORD *)(v106 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v32);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v33);
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v34);
  v105 = (char *)v102 - v35;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v36);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v37);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v38);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v39);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v40);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v41);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v42);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v43);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v44);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v45);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v46);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v47);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v48);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v49);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v50);
  OUTLINED_FUNCTION_61();
  v107 = v51;
  v52 = OUTLINED_FUNCTION_33();
  Description = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v52[-1].Description;
  v112 = v52;
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v53);
  OUTLINED_FUNCTION_6_1();
  v110 = v54;
  OUTLINED_FUNCTION_7();
  v56 = MEMORY[0x1E0C80A78](v55);
  OUTLINED_FUNCTION_226(v56, v57, v58, v59, v60, v61, v62, v63, v102[0]);
  v108[0] = OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v64);
  v103[5] = (char *)v102 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v66);
  OUTLINED_FUNCTION_53();
  v103[4] = v67;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v68);
  v103[3] = (char *)v102 - v69;
  OUTLINED_FUNCTION_7();
  v71 = MEMORY[0x1E0C80A78](v70);
  v73 = (char *)v102 - v72;
  v74 = MEMORY[0x1E0C80A78](v71);
  v76 = (char *)v102 - v75;
  v77 = MEMORY[0x1E0C80A78](v74);
  v79 = (char *)v102 - v78;
  v80 = MEMORY[0x1E0C80A78](v77);
  v82 = (char *)v102 - v81;
  MEMORY[0x1E0C80A78](v80);
  OUTLINED_FUNCTION_227();
  MEMORY[0x1E0C80A78](v83);
  v84 = OUTLINED_FUNCTION_131_1();
  type metadata accessor for AggregationEvent(v84);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v85);
  OUTLINED_FUNCTION_158_0();
  v115 = v7;
  MAX.getCurrentAggregationEvent()();
  if (!v1)
  {
    v102[0] = (uint64_t)v82;
    v102[1] = (uint64_t)v79;
    v102[2] = (uint64_t)v76;
    v102[3] = (uint64_t)v73;
    v102[4] = v4;
    v116 = v3;
    v86 = v115;
    SQLExpressionEvaluator.execute(expression:payload:)(v0 + *(int *)(v115 + 36), v113, v2);
    v114 = 0;
    v87 = v109;
    SQLExpression.returnType.getter(v109);
    v88 = *(int *)(v86 + 40);
    v113 = v0;
    v90 = v110;
    v89 = Description;
    v91 = v112;
    OUTLINED_FUNCTION_60_1(v110, v0 + v88, Description[2]);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type SQLDataType and conformance SQLDataType, (uint64_t (*)(uint64_t))type metadata accessor for SQLDataType, (uint64_t)&protocol conformance descriptor for SQLDataType);
    v92 = dispatch thunk of static Equatable.== infix(_:_:)();
    v93 = v89[1];
    ((void (*)(uint64_t, ValueMetadata *))v93)(v90, v91);
    ((void (*)(_BYTE *, ValueMetadata *))v93)(v87, v91);
    if ((v92 & 1) != 0)
    {
      __swift_storeEnumTagSinglePayload(v107, 1, 1, v104);
      OUTLINED_FUNCTION_116_1((uint64_t)v2, type metadata accessor for StorableValue, (uint64_t)v103);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v112 = (ValueMetadata *)v2;
      __asm { BR              X10 }
    }
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    OUTLINED_FUNCTION_13_0();
    v96 = v95;
    v97 = SQLExpression.sql.getter();
    v99 = v98;
    v100 = SQLDataType.rawValue.getter();
    *v96 = v97;
    v96[1] = v99;
    v96[2] = v100;
    v96[3] = v101;
    OUTLINED_FUNCTION_222(1);
    outlined destroy of StorableValue((uint64_t)v2, type metadata accessor for StorableValue);
    outlined destroy of StorableValue(v116, type metadata accessor for AggregationEvent);
  }
  OUTLINED_FUNCTION_9();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MAX.applyMetadata(metadata:)(Swift::OpaquePointer metadata)
{
  MAX.applyMetadata(metadata:)();
}

void MIN.processEvent(changeRecord:expressionEvaluator:)()
{
  MAX.processEvent(changeRecord:expressionEvaluator:)();
}

void MAX.applyMetadata(metadata:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, _QWORD);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86[7];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;

  OUTLINED_FUNCTION_42();
  v109 = v1;
  v110 = v0;
  v3 = v2;
  v5 = v4;
  v94 = OUTLINED_FUNCTION_71();
  v91 = *(_QWORD *)(v94 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_120(v7);
  v105 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_6_1();
  v93 = v9;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_53();
  v104 = v11;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_61();
  v106 = v13;
  v92 = OUTLINED_FUNCTION_65_2();
  v90 = *(_QWORD *)(v92 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_120(v15);
  v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v17);
  v102 = (char *)v86 - v18;
  OUTLINED_FUNCTION_7();
  v20 = MEMORY[0x1E0C80A78](v19);
  OUTLINED_FUNCTION_226(v20, v21, v22, v23, v24, v25, v26, v27, v86[0]);
  v28 = *(_QWORD *)(v3 + 16);
  v29 = type metadata accessor for Optional();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v31);
  v101 = (char *)v86 - v32;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v33);
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v34);
  OUTLINED_FUNCTION_53();
  v100 = v35;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v36);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v37);
  v99 = (char *)v86 - v38;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v39);
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v40);
  OUTLINED_FUNCTION_53();
  v98 = v41;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v42);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v43);
  OUTLINED_FUNCTION_53();
  v97 = v44;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v45);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v46);
  OUTLINED_FUNCTION_53();
  v96 = v47;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v48);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_1_13();
  MEMORY[0x1E0C80A78](v49);
  OUTLINED_FUNCTION_61();
  v95 = v50;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v51);
  v53 = (char *)v86 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0_20();
  MEMORY[0x1E0C80A78](v54);
  OUTLINED_FUNCTION_22_1();
  v56 = MEMORY[0x1E0C80A78](v55);
  v57 = MEMORY[0x1E0C80A78](v56);
  v59 = (char *)v86 - v58;
  MEMORY[0x1E0C80A78](v57);
  v61 = MEMORY[0x1E0C80A78]((char *)v86 - v60);
  v62 = MEMORY[0x1E0C80A78](v61);
  MEMORY[0x1E0C80A78](v62);
  OUTLINED_FUNCTION_227();
  v64 = MEMORY[0x1E0C80A78](v63);
  v65 = MEMORY[0x1E0C80A78](v64);
  if (*(_QWORD *)(v5 + 16))
  {
    v71 = v5;
    v86[1] = v66;
    v86[2] = v65;
    v86[3] = (uint64_t)v59;
    v86[4] = v70;
    v86[5] = v69;
    v87 = (uint64_t)v86 - v67;
    v107 = v68;
    v86[6] = v30;
    v88 = v29;
    v89 = v28;
    OUTLINED_FUNCTION_100();
    specialized __RawDictionaryStorage.find<A>(_:)();
    v73 = v72;
    OUTLINED_FUNCTION_45();
    if ((v73 & 1) == 0)
    {
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      OUTLINED_FUNCTION_13_0();
      v80 = *v110;
      v81 = v110[1];
      *(_QWORD *)v82 = v71;
      *(_QWORD *)(v82 + 8) = v80;
      *(_QWORD *)(v82 + 16) = v81;
      *(_BYTE *)(v82 + 64) = 8;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_104_0();
      swift_willThrow();
      goto LABEL_9;
    }
    v86[0] = v3;
    OUTLINED_FUNCTION_100();
    specialized Dictionary.subscript.getter(v71, (uint64_t)v53);
    OUTLINED_FUNCTION_45();
    OUTLINED_FUNCTION_86((uint64_t)v53, 1, v108);
    if (!v74)
    {
      v83 = (uint64_t)v53;
      v84 = v87;
      outlined init with take of StorableValue(v83, v87, type metadata accessor for StorableValue);
      outlined init with copy of StorableValue(v84, v107, type metadata accessor for StorableValue);
      v85 = (char *)&loc_18D9339DC + 4 * byte_18DC0D150[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    outlined destroy of UUID?((uint64_t)v53, &demangling cache variable for type metadata for StorableValue?);
    v75 = OUTLINED_FUNCTION_138_1(*(int *)(v86[0] + 48));
    OUTLINED_FUNCTION_118_0(v75, v76);
    v77 = (uint64_t)v53;
    v78 = v89;
  }
  else
  {
    v79 = (uint64_t)v110 + *(int *)(v3 + 48);
    OUTLINED_FUNCTION_83_1(v79, *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8));
    v77 = v79;
    v78 = v28;
  }
  __swift_storeEnumTagSinglePayload(v77, 1, 1, v78);
LABEL_9:
  OUTLINED_FUNCTION_9();
}

uint64_t static Data.< infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(a3, a4, a1, a2);
}

uint64_t specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned int v16;
  void (*v17)(_BYTE *, uint64_t);
  char v18;
  void (*v19)(_BYTE *, uint64_t);
  void (*v20)(_BYTE *, uint64_t);
  _BYTE v22[10];
  unsigned __int8 v23;
  char v24;
  char v25;
  unsigned __int8 v26;
  char v27;

  v8 = type metadata accessor for Data.Iterator();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB02C0];
  v10 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11);
  v15 = &v22[-v14];
  outlined copy of Data._Representation(a3, a4);
  Data.makeIterator()();
  outlined consume of Data._Representation(a3, a4);
  outlined copy of Data._Representation(a1, a2);
  Data.makeIterator()();
  outlined consume of Data._Representation(a1, a2);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator, v9, MEMORY[0x1E0CB02D0]);
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((v27 & 1) != 0)
    {
      v19 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
      v19(v15, v8);
      dispatch thunk of IteratorProtocol.next()();
      v19(v13, v8);
      v18 = v25 ^ 1;
      return v18 & 1;
    }
    v16 = v26;
    dispatch thunk of IteratorProtocol.next()();
    if ((v24 & 1) != 0)
      goto LABEL_6;
    if (v16 < v23)
      break;
    if (v23 < v16)
    {
LABEL_6:
      v17 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
      v17(v13, v8);
      v17(v15, v8);
      v18 = 0;
      return v18 & 1;
    }
  }
  v20 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
  v20(v13, v8);
  v20(v15, v8);
  v18 = 1;
  return v18 & 1;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance Data(uint64_t a1, uint64_t a2)
{
  return static Data.< infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Data(uint64_t a1, uint64_t a2)
{
  return specialized static Comparable.<= infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

BOOL specialized static Comparable.<= infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  return (specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(a1, a2, a3, a4) & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Data(uint64_t a1, uint64_t a2)
{
  return specialized static Comparable.>= infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

BOOL specialized static Comparable.>= infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  return (specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(a3, a4, a1, a2) & 1) == 0;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance Data(_QWORD *a1, _QWORD *a2)
{
  return specialized static Comparable.> infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t dispatch thunk of Aggregation.returnType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Aggregation.processEvent(changeRecord:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a6 + 24))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of Aggregation.processEvent(changeRecord:expressionEvaluator:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a7 + 32))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of Aggregation.aggregationMetadata()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Aggregation.applyMetadata(metadata:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

_BYTE *closure #1 in closure #1 in Double.init<A>(_:)@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AVG(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  ValueMetadata *v11;
  void (*v12)(char *, char *, ValueMetadata *);
  uint64_t v13;
  char *v14;
  char *v15;
  ValueMetadata *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SQLExpression();
    v12 = (void (*)(char *, char *, ValueMetadata *))*((_QWORD *)v11[-1].Description + 2);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for SQLDataType();
    (*((void (**)(char *, char *, ValueMetadata *))v16[-1].Description + 2))(v14, v15, v16);
    v17 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v17) = *(uint64_t *)((char *)a2 + v17);
  }
  return v4;
}

_QWORD *initializeWithCopy for AVG(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  ValueMetadata *v10;
  void (*v11)(char *, char *, ValueMetadata *);
  uint64_t v12;
  char *v13;
  char *v14;
  ValueMetadata *v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SQLExpression();
  v11 = (void (*)(char *, char *, ValueMetadata *))*((_QWORD *)v10[-1].Description + 2);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v15[-1].Description + 2))(v13, v14, v15);
  v16 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  return a1;
}

_QWORD *assignWithCopy for AVG(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  ValueMetadata *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  ValueMetadata *v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 3))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v13[-1].Description + 3))(v11, v12, v13);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

_OWORD *initializeWithTake for AVG(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  ValueMetadata *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  ValueMetadata *v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 4))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v13[-1].Description + 4))(v11, v12, v13);
  v14 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  return a1;
}

_QWORD *assignWithTake for AVG(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  ValueMetadata *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  ValueMetadata *v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v10[-1].Description + 5))(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v14[-1].Description + 5))(v12, v13, v14);
  v15 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v15) = *(_QWORD *)((char *)a2 + v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for AVG()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AVG()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for AVG(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for AVG);
}

ValueMetadata *type metadata completion function for AVG()
{
  return type metadata completion function for AVG();
}

{
  ValueMetadata *result;
  unint64_t v1;
  unint64_t v2;

  result = OUTLINED_FUNCTION_209();
  if (v1 <= 0x3F)
  {
    result = OUTLINED_FUNCTION_154_0();
    if (v2 <= 0x3F)
    {
      OUTLINED_FUNCTION_177();
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *assignWithCopy for COUNT(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  ValueMetadata *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  ValueMetadata *v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 3))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v13[-1].Description + 3))(v11, v12, v13);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

_QWORD *assignWithTake for COUNT(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  ValueMetadata *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  ValueMetadata *v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v10[-1].Description + 5))(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v14[-1].Description + 5))(v12, v13, v14);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for COUNT()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for COUNT()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for COUNT(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for COUNT);
}

ValueMetadata *type metadata completion function for COUNT()
{
  return type metadata completion function for COUNT();
}

{
  ValueMetadata *result;
  unint64_t v1;
  unint64_t v2;

  result = OUTLINED_FUNCTION_209();
  if (v1 <= 0x3F)
  {
    OUTLINED_FUNCTION_177();
    result = type metadata accessor for SQLDataType();
    if (v2 <= 0x3F)
    {
      OUTLINED_FUNCTION_177();
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *assignWithCopy for COUNT_STAR(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  ValueMetadata *v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 3))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *initializeWithTake for COUNT_STAR(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  ValueMetadata *v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 4))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithTake for COUNT_STAR(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  ValueMetadata *v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v10[-1].Description + 5))(v8, v9, v10);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for COUNT_STAR()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_18D934AC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  ValueMetadata *v6;

  OUTLINED_FUNCTION_170();
  if (v3)
  {
    OUTLINED_FUNCTION_165(*(_QWORD *)(v0 + 8));
    OUTLINED_FUNCTION_1_6();
  }
  else
  {
    v4 = v2;
    v5 = v1;
    v6 = OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_67_0(v0 + *(int *)(v4 + 20), v5, (uint64_t)v6);
  }
}

uint64_t storeEnumTagSinglePayload for COUNT_STAR()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_18D934B20()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_133_1();
  if (v3)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    OUTLINED_FUNCTION_1_6();
  }
  else
  {
    v4 = v2;
    OUTLINED_FUNCTION_33();
    v5 = OUTLINED_FUNCTION_178(*(int *)(v4 + 20));
    OUTLINED_FUNCTION_68(v5, v6, v7, v8);
  }
}

ValueMetadata *type metadata completion function for COUNT_STAR()
{
  ValueMetadata *result;
  unint64_t v1;

  result = type metadata accessor for SQLDataType();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *assignWithCopy for SUM_INT(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  ValueMetadata *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  ValueMetadata *v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 3))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v13[-1].Description + 3))(v11, v12, v13);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

_QWORD *assignWithTake for SUM_INT(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  ValueMetadata *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  ValueMetadata *v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v10[-1].Description + 5))(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v14[-1].Description + 5))(v12, v13, v14);
  v15 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for SUM_INT()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for SUM_INT()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for SUM_INT(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for SUM_INT);
}

ValueMetadata *type metadata completion function for SUM_INT()
{
  return type metadata completion function for AVG();
}

void initializeBufferWithCopyOfBuffer for SUM_INT()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  ValueMetadata *v6;
  uint64_t v7;

  OUTLINED_FUNCTION_223();
  OUTLINED_FUNCTION_231();
  if ((v3 & 0x20000) != 0)
  {
    OUTLINED_FUNCTION_109();
  }
  else
  {
    v4 = v2;
    v5 = v1[1];
    *v0 = *v1;
    v0[1] = v5;
    OUTLINED_FUNCTION_22_2();
    OUTLINED_FUNCTION_54_2();
    OUTLINED_FUNCTION_74_0();
    v6 = OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_1((uint64_t)v6);
    v7 = *(int *)(v4 + 32);
    *(_QWORD *)((char *)v0 + *(int *)(v4 + 28)) = *(_QWORD *)((char *)v1 + *(int *)(v4 + 28));
    *((_BYTE *)v0 + v7) = *((_BYTE *)v1 + v7);
  }
  OUTLINED_FUNCTION_70_0();
}

void initializeWithCopy for SUM_INT()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  ValueMetadata *v3;

  OUTLINED_FUNCTION_223();
  v1 = v0[1];
  *v2 = *v0;
  v2[1] = v1;
  OUTLINED_FUNCTION_22_2();
  OUTLINED_FUNCTION_54_2();
  OUTLINED_FUNCTION_74_0();
  v3 = OUTLINED_FUNCTION_33();
  OUTLINED_FUNCTION_28_1((uint64_t)v3);
  OUTLINED_FUNCTION_145_0();
  OUTLINED_FUNCTION_70_0();
}

_QWORD *assignWithCopy for SUM_NON_INT(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  ValueMetadata *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  ValueMetadata *v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 3))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v13[-1].Description + 3))(v11, v12, v13);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

void initializeWithTake for SUM_INT(_OWORD *a1, _OWORD *a2)
{
  ValueMetadata *v2;
  ValueMetadata *v3;

  *a1 = *a2;
  v2 = OUTLINED_FUNCTION_22_2();
  OUTLINED_FUNCTION_27_2((uint64_t)v2);
  v3 = OUTLINED_FUNCTION_33();
  OUTLINED_FUNCTION_27_2((uint64_t)v3);
  OUTLINED_FUNCTION_145_0();
  OUTLINED_FUNCTION_1_8();
}

_QWORD *assignWithTake for SUM_NON_INT(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  ValueMetadata *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  ValueMetadata *v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v10[-1].Description + 5))(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v14[-1].Description + 5))(v12, v13, v14);
  v15 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for SUM_NON_INT()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for SUM_NON_INT()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for SUM_NON_INT(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for SUM_NON_INT);
}

void initializeBufferWithCopyOfBuffer for COUNT()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  ValueMetadata *v6;

  OUTLINED_FUNCTION_223();
  OUTLINED_FUNCTION_231();
  if ((v3 & 0x20000) != 0)
  {
    OUTLINED_FUNCTION_109();
  }
  else
  {
    v4 = v2;
    v5 = v1[1];
    *v0 = *v1;
    v0[1] = v5;
    OUTLINED_FUNCTION_22_2();
    OUTLINED_FUNCTION_54_2();
    OUTLINED_FUNCTION_74_0();
    v6 = OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_1((uint64_t)v6);
    *(_QWORD *)((char *)v0 + *(int *)(v4 + 28)) = *(_QWORD *)((char *)v1 + *(int *)(v4 + 28));
  }
  OUTLINED_FUNCTION_70_0();
}

uint64_t destroy for AVG()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  ValueMetadata *v3;
  uint64_t v4;
  ValueMetadata *v5;

  OUTLINED_FUNCTION_166();
  v2 = v1 + *(int *)(v0 + 20);
  v3 = OUTLINED_FUNCTION_22_2();
  (*((void (**)(uint64_t, ValueMetadata *))v3[-1].Description + 1))(v2, v3);
  v4 = v1 + *(int *)(v0 + 24);
  v5 = OUTLINED_FUNCTION_33();
  return OUTLINED_FUNCTION_135_1(v4, (uint64_t)v5, *((uint64_t (**)(void))v5[-1].Description + 1));
}

void initializeWithCopy for COUNT()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  ValueMetadata *v3;

  OUTLINED_FUNCTION_223();
  v1 = v0[1];
  *v2 = *v0;
  v2[1] = v1;
  OUTLINED_FUNCTION_22_2();
  OUTLINED_FUNCTION_54_2();
  OUTLINED_FUNCTION_74_0();
  v3 = OUTLINED_FUNCTION_33();
  OUTLINED_FUNCTION_28_1((uint64_t)v3);
  OUTLINED_FUNCTION_204();
  OUTLINED_FUNCTION_70_0();
}

_QWORD *assignWithCopy for TOTAL(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  ValueMetadata *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  ValueMetadata *v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 3))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v13[-1].Description + 3))(v11, v12, v13);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

void initializeWithTake for COUNT(_OWORD *a1, _OWORD *a2)
{
  ValueMetadata *v2;
  ValueMetadata *v3;

  *a1 = *a2;
  v2 = OUTLINED_FUNCTION_22_2();
  OUTLINED_FUNCTION_27_2((uint64_t)v2);
  v3 = OUTLINED_FUNCTION_33();
  OUTLINED_FUNCTION_27_2((uint64_t)v3);
  OUTLINED_FUNCTION_204();
  OUTLINED_FUNCTION_1_8();
}

_QWORD *assignWithTake for TOTAL(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  ValueMetadata *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  ValueMetadata *v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v10[-1].Description + 5))(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v14[-1].Description + 5))(v12, v13, v14);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for TOTAL()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void __swift_get_extra_inhabitant_indexTm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  ValueMetadata *v6;
  ValueMetadata *v7;
  uint64_t v8;

  OUTLINED_FUNCTION_170();
  if (v5)
  {
    OUTLINED_FUNCTION_165(*(_QWORD *)(v0 + 8));
    OUTLINED_FUNCTION_1_6();
  }
  else
  {
    v3 = v2;
    v4 = v1;
    OUTLINED_FUNCTION_22_2();
    OUTLINED_FUNCTION_128_1();
    if (v5)
    {
      v7 = v6;
      v8 = *(int *)(v3 + 20);
    }
    else
    {
      v7 = OUTLINED_FUNCTION_33();
      v8 = *(int *)(v3 + 24);
    }
    OUTLINED_FUNCTION_67_0(v0 + v8, v4, (uint64_t)v7);
  }
}

uint64_t storeEnumTagSinglePayload for TOTAL()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void __swift_store_extra_inhabitant_indexTm()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_133_1();
  if (v4)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    OUTLINED_FUNCTION_1_6();
  }
  else
  {
    v3 = v2;
    OUTLINED_FUNCTION_22_2();
    OUTLINED_FUNCTION_129_1();
    if (v4)
    {
      v5 = *(int *)(v3 + 20);
    }
    else
    {
      OUTLINED_FUNCTION_33();
      v5 = *(int *)(v3 + 24);
    }
    v6 = OUTLINED_FUNCTION_178(v5);
    OUTLINED_FUNCTION_68(v6, v7, v8, v9);
  }
}

uint64_t type metadata accessor for TOTAL(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for TOTAL);
}

uint64_t *initializeBufferWithCopyOfBuffer for GROUP_CONCAT(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  ValueMetadata *v11;
  void (*v12)(char *, char *, ValueMetadata *);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  ValueMetadata *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SQLExpression();
    v12 = (void (*)(char *, char *, ValueMetadata *))*((_QWORD *)v11[-1].Description + 2);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v13, 1, (uint64_t)v11))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, (uint64_t)v11);
    }
    v18 = a3[7];
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for SQLDataType();
    (*((void (**)(char *, char *, ValueMetadata *))v21[-1].Description + 2))(v19, v20, v21);
    v22 = a3[8];
    v23 = (uint64_t *)((char *)v4 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for GROUP_CONCAT(uint64_t a1, int *a2)
{
  uint64_t v4;
  ValueMetadata *v5;
  void (*v6)(uint64_t, ValueMetadata *);
  uint64_t v7;
  uint64_t v8;
  ValueMetadata *v9;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for SQLExpression();
  v6 = (void (*)(uint64_t, ValueMetadata *))*((_QWORD *)v5[-1].Description + 1);
  v6(v4, v5);
  v7 = a1 + a2[6];
  if (!__swift_getEnumTagSinglePayload(v7, 1, (uint64_t)v5))
    v6(v7, v5);
  v8 = a1 + a2[7];
  v9 = type metadata accessor for SQLDataType();
  (*((void (**)(uint64_t, ValueMetadata *))v9[-1].Description + 1))(v8, v9);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for GROUP_CONCAT(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  ValueMetadata *v10;
  void (*v11)(char *, char *, ValueMetadata *);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  ValueMetadata *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SQLExpression();
  v11 = (void (*)(char *, char *, ValueMetadata *))*((_QWORD *)v10[-1].Description + 2);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v12, 1, (uint64_t)v10))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, (uint64_t)v10);
  }
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v19[-1].Description + 2))(v17, v18, v19);
  v20 = a3[8];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for GROUP_CONCAT(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  ValueMetadata *v9;
  _QWORD *Description;
  void (*v11)(char *, char *, ValueMetadata *);
  uint64_t v12;
  char *v13;
  char *v14;
  int EnumTagSinglePayload;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  ValueMetadata *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SQLExpression();
  Description = v9[-1].Description;
  v11 = (void (*)(char *, char *, ValueMetadata *))Description[3];
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1 + v12, 1, (uint64_t)v9);
  v16 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, (uint64_t)v9);
  if (!EnumTagSinglePayload)
  {
    if (!v16)
    {
      v11(v13, v14, v9);
      goto LABEL_7;
    }
    ((void (*)(char *, ValueMetadata *))Description[1])(v13, v9);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, ValueMetadata *))Description[2])(v13, v14, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, (uint64_t)v9);
LABEL_7:
  v18 = a3[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v21[-1].Description + 3))(v19, v20, v21);
  v22 = a3[8];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for GROUP_CONCAT(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  ValueMetadata *v9;
  void (*v10)(char *, char *, ValueMetadata *);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  ValueMetadata *v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SQLExpression();
  v10 = (void (*)(char *, char *, ValueMetadata *))*((_QWORD *)v9[-1].Description + 4);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v11, 1, (uint64_t)v9))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, (uint64_t)v9);
  }
  v15 = a3[7];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v18[-1].Description + 4))(v16, v17, v18);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

_QWORD *assignWithTake for GROUP_CONCAT(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  ValueMetadata *v10;
  _QWORD *Description;
  void (*v12)(char *, char *, ValueMetadata *);
  uint64_t v13;
  char *v14;
  char *v15;
  int EnumTagSinglePayload;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  ValueMetadata *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SQLExpression();
  Description = v10[-1].Description;
  v12 = (void (*)(char *, char *, ValueMetadata *))Description[5];
  v12(v8, v9, v10);
  v13 = a3[6];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1 + v13, 1, (uint64_t)v10);
  v17 = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, (uint64_t)v10);
  if (!EnumTagSinglePayload)
  {
    if (!v17)
    {
      v12(v14, v15, v10);
      goto LABEL_7;
    }
    ((void (*)(char *, ValueMetadata *))Description[1])(v14, v10);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, ValueMetadata *))Description[4])(v14, v15, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, (uint64_t)v10);
LABEL_7:
  v19 = a3[7];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v22[-1].Description + 5))(v20, v21, v22);
  v23 = a3[8];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  v27 = *v25;
  v26 = v25[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GROUP_CONCAT()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_18D935D14()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  int *v3;
  uint64_t v4;
  char v5;
  ValueMetadata *v6;
  ValueMetadata *v7;
  uint64_t v8;
  char v9;
  ValueMetadata *v10;

  OUTLINED_FUNCTION_170();
  if (v5)
  {
    OUTLINED_FUNCTION_165(*(_QWORD *)(v0 + 8));
    OUTLINED_FUNCTION_1_6();
  }
  else
  {
    v3 = v2;
    v4 = v1;
    OUTLINED_FUNCTION_22_2();
    OUTLINED_FUNCTION_128_1();
    if (v5)
    {
      v7 = v6;
      v8 = v3[5];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
      OUTLINED_FUNCTION_128_1();
      if (v9)
      {
        v7 = v10;
        v8 = v3[6];
      }
      else
      {
        v7 = OUTLINED_FUNCTION_33();
        v8 = v3[7];
      }
    }
    OUTLINED_FUNCTION_67_0(v0 + v8, v4, (uint64_t)v7);
  }
}

uint64_t storeEnumTagSinglePayload for GROUP_CONCAT()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_18D935DA4()
{
  int v0;
  uint64_t v1;
  int *v2;
  int *v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_133_1();
  if (v4)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    OUTLINED_FUNCTION_1_6();
  }
  else
  {
    v3 = v2;
    OUTLINED_FUNCTION_22_2();
    OUTLINED_FUNCTION_129_1();
    if (v4)
    {
      v5 = v3[5];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
      OUTLINED_FUNCTION_129_1();
      if (v6)
      {
        v5 = v3[6];
      }
      else
      {
        OUTLINED_FUNCTION_33();
        v5 = v3[7];
      }
    }
    v7 = OUTLINED_FUNCTION_178(v5);
    OUTLINED_FUNCTION_68(v7, v8, v9, v10);
  }
}

uint64_t type metadata accessor for GROUP_CONCAT(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for GROUP_CONCAT);
}

void type metadata completion function for GROUP_CONCAT()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for SQLExpression();
  if (v0 <= 0x3F)
  {
    type metadata accessor for SQLExpression?();
    if (v1 <= 0x3F)
    {
      type metadata accessor for SQLDataType();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void type metadata accessor for SQLExpression?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SQLExpression?)
  {
    type metadata accessor for SQLExpression();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SQLExpression?);
  }
}

uint64_t type metadata instantiation function for MIN()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for MIN(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MIN);
}

uint64_t type metadata completion function for MIN()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = (uint64_t)OUTLINED_FUNCTION_209();
  if (v1 <= 0x3F)
  {
    result = (uint64_t)OUTLINED_FUNCTION_154_0();
    if (v2 <= 0x3F)
    {
      OUTLINED_FUNCTION_177();
      result = type metadata accessor for Optional();
      if (v3 <= 0x3F)
      {
        OUTLINED_FUNCTION_177();
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MIN(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  _DWORD *Description;
  int v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata *v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, ValueMetadata *);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  size_t __n;
  ValueMetadata *v46;
  uint64_t v47;
  ValueMetadata *v48;
  uint64_t v49;

  v48 = OUTLINED_FUNCTION_22_2();
  Description = v48[-1].Description;
  v7 = Description[20];
  v8 = v7;
  v9 = *((_QWORD *)Description + 8);
  v10 = OUTLINED_FUNCTION_33();
  v11 = v10[-1].Description;
  v12 = v11[20];
  v13 = v12;
  v47 = v9;
  v14 = (v9 + v12 + ((v8 + 16) & ~v8)) & ~(unint64_t)v12;
  v15 = *((_QWORD *)v11 + 8) + 7;
  v49 = *(_QWORD *)(a3 + 16);
  v16 = *(_QWORD *)(v49 - 8);
  v17 = *(_DWORD *)(v16 + 80);
  v18 = v17;
  v19 = (((v15 + v14) & 0xFFFFFFFFFFFFFFF8) + v17 + 16) & ~(unint64_t)v17;
  v20 = *(_QWORD *)(v16 + 64);
  if (!*(_DWORD *)(v16 + 84))
    ++v20;
  v21 = v19 + v20;
  v22 = v12 | (unint64_t)v7 | v17;
  v23 = (v12 | v7 | v17) & 0x100000;
  if (v22 > 7 || v23 != 0 || v21 > 0x18)
  {
    v26 = *a2;
    *a1 = *a2;
    v27 = v26 + ((v22 & 0xF8 ^ 0x1F8) & (v22 + 16));
    swift_retain();
  }
  else
  {
    __n = v20;
    v46 = v10;
    v28 = ~v13;
    v29 = a2[1];
    *a1 = *a2;
    a1[1] = v29;
    v30 = (char *)a2 + v8;
    v31 = ((unint64_t)a1 + v8 + 16) & ~v8;
    v32 = (unint64_t)(v30 + 16) & ~v8;
    v33 = (void (*)(uint64_t, uint64_t, ValueMetadata *))*((_QWORD *)Description + 2);
    swift_bridgeObjectRetain();
    v33(v31, v32, v48);
    v34 = v47 + v13;
    v35 = (v31 + v47 + v13) & ~v13;
    v36 = (v32 + v34) & v28;
    (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v11 + 2))(v35, v36, v46);
    v37 = (_QWORD *)((v15 + v35) & 0xFFFFFFFFFFFFFFF8);
    v38 = (_QWORD *)((v15 + v36) & 0xFFFFFFFFFFFFFFF8);
    *v37 = *v38;
    v37[1] = v38[1];
    v39 = (void *)(((unint64_t)v37 + v18 + 16) & ~v18);
    v40 = (const void *)(((unint64_t)v38 + v18 + 16) & ~v18);
    swift_bridgeObjectRetain();
    v41 = OUTLINED_FUNCTION_202();
    if (__swift_getEnumTagSinglePayload(v41, v42, v49))
    {
      memcpy(v39, v40, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v39, v40, v49);
      __swift_storeEnumTagSinglePayload((uint64_t)v39, 0, 1, v49);
    }
    return a1;
  }
  return (uint64_t *)v27;
}

void initializeWithCopy for MIN()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  ValueMetadata *v5;
  _QWORD *Description;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, ValueMetadata *);
  uint64_t (**v11)(uint64_t, uint64_t);
  _QWORD *v12;
  _QWORD *v13;

  OUTLINED_FUNCTION_223();
  OUTLINED_FUNCTION_119_1();
  v3 = v2[1];
  *v4 = *v2;
  v4[1] = v3;
  v5 = OUTLINED_FUNCTION_22_2();
  Description = v5[-1].Description;
  v7 = *((unsigned __int8 *)Description + 80);
  v8 = (v7 + 16 + v0) & ~v7;
  v9 = (v7 + 16 + v1) & ~v7;
  v10 = (void (*)(uint64_t, uint64_t, ValueMetadata *))Description[2];
  OUTLINED_FUNCTION_21_0();
  v10(v8, v9, v5);
  v11 = (uint64_t (**)(uint64_t, uint64_t))OUTLINED_FUNCTION_33()[-1].Description;
  OUTLINED_FUNCTION_52_2(v11[2]);
  OUTLINED_FUNCTION_187();
  *v13 = *v12;
  v13[1] = v12[1];
  OUTLINED_FUNCTION_114_1();
  swift_bridgeObjectRetain();
  if (OUTLINED_FUNCTION_168_0())
  {
    OUTLINED_FUNCTION_113_0();
  }
  else
  {
    OUTLINED_FUNCTION_171((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11[2]);
    OUTLINED_FUNCTION_143_1();
  }
  OUTLINED_FUNCTION_70_0();
}

void assignWithCopy for MIN()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  OUTLINED_FUNCTION_119_1();
  *v4 = *v3;
  v5 = *(_QWORD *)(v0 + 8);
  *(_QWORD *)(v0 + 8) = v3[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_22_2();
  OUTLINED_FUNCTION_43_0();
  OUTLINED_FUNCTION_52_2(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24));
  v6 = *(_QWORD *)(v1 + 64);
  OUTLINED_FUNCTION_33();
  OUTLINED_FUNCTION_42_2();
  OUTLINED_FUNCTION_52_2(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24));
  OUTLINED_FUNCTION_110_1();
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(v6 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = OUTLINED_FUNCTION_35_2();
  if (!(_DWORD)v6)
  {
    if (!v7)
    {
      OUTLINED_FUNCTION_71_2(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 24));
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_175();
    goto LABEL_6;
  }
  if (v7)
  {
LABEL_6:
    OUTLINED_FUNCTION_108_1();
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_71_2(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  OUTLINED_FUNCTION_137_1();
LABEL_7:
  OUTLINED_FUNCTION_1_8();
}

void initializeWithTake for MIN()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;

  OUTLINED_FUNCTION_119_1();
  *v3 = *v2;
  OUTLINED_FUNCTION_22_2();
  OUTLINED_FUNCTION_43_0();
  OUTLINED_FUNCTION_52_2(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 32));
  v4 = *(_QWORD *)(v0 + 64);
  OUTLINED_FUNCTION_33();
  OUTLINED_FUNCTION_42_2();
  OUTLINED_FUNCTION_52_2(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 32));
  OUTLINED_FUNCTION_187();
  *v6 = *v5;
  OUTLINED_FUNCTION_114_1();
  if (OUTLINED_FUNCTION_168_0())
  {
    OUTLINED_FUNCTION_113_0();
  }
  else
  {
    OUTLINED_FUNCTION_171(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
    OUTLINED_FUNCTION_143_1();
  }
  OUTLINED_FUNCTION_1_8();
}

void assignWithTake for MIN()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  OUTLINED_FUNCTION_119_1();
  v5 = v4[1];
  *v0 = *v4;
  v0[1] = v5;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_22_2();
  OUTLINED_FUNCTION_43_0();
  OUTLINED_FUNCTION_52_2(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40));
  v6 = *(_QWORD *)(v2 + 64);
  OUTLINED_FUNCTION_33();
  OUTLINED_FUNCTION_42_2();
  OUTLINED_FUNCTION_52_2(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40));
  OUTLINED_FUNCTION_110_1();
  *(_QWORD *)(v1 + 8) = *(_QWORD *)(v6 + 8);
  swift_bridgeObjectRelease();
  v7 = OUTLINED_FUNCTION_35_2();
  if (!(_DWORD)v6)
  {
    if (!v7)
    {
      OUTLINED_FUNCTION_71_2(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 40));
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_175();
    goto LABEL_6;
  }
  if (v7)
  {
LABEL_6:
    OUTLINED_FUNCTION_108_1();
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_71_2(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
  OUTLINED_FUNCTION_137_1();
LABEL_7:
  OUTLINED_FUNCTION_1_8();
}

uint64_t getEnumTagSinglePayload for MIN(uint64_t a1, unsigned int a2, uint64_t a3)
{
  ValueMetadata *v6;
  _QWORD *Description;
  uint64_t v8;
  ValueMetadata *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int EnumTagSinglePayload;

  v6 = OUTLINED_FUNCTION_22_2();
  Description = v6[-1].Description;
  v8 = *((unsigned int *)Description + 21);
  v9 = OUTLINED_FUNCTION_33();
  v10 = (unsigned int *)v9[-1].Description;
  v11 = v10[21];
  if (v8 <= v11)
    v12 = v10[21];
  else
    v12 = v8;
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int *)(v14 + 84);
  v16 = v15 - 1;
  if (!(_DWORD)v15)
    v16 = 0;
  if (v12 <= v16)
    v17 = v16;
  else
    v17 = v12;
  if (v17 <= 0x7FFFFFFF)
    v18 = 0x7FFFFFFF;
  else
    v18 = v17;
  if ((_DWORD)v15)
    v19 = *(_QWORD *)(v14 + 64);
  else
    v19 = *(_QWORD *)(v14 + 64) + 1;
  if (!a2)
    return 0;
  v20 = *((unsigned __int8 *)Description + 80);
  v21 = Description[8];
  v22 = *((unsigned __int8 *)v10 + 80);
  v23 = *((_QWORD *)v10 + 8) + 7;
  v24 = *(unsigned __int8 *)(v14 + 80);
  v25 = v24 + 16;
  if (a2 <= v18)
    goto LABEL_34;
  v26 = v19 + ((v25 + ((v23 + ((v21 + v22 + ((v20 + 16) & ~v20)) & ~v22)) & 0xFFFFFFFFFFFFFFF8)) & ~v24);
  v27 = 8 * v26;
  if (v26 > 3)
    goto LABEL_18;
  v29 = ((a2 - v18 + ~(-1 << v27)) >> v27) + 1;
  if (HIWORD(v29))
  {
    v28 = *(_DWORD *)(a1 + v26);
    if (v28)
      goto LABEL_25;
  }
  else
  {
    if (v29 <= 0xFF)
    {
      if (v29 < 2)
        goto LABEL_34;
LABEL_18:
      v28 = *(unsigned __int8 *)(a1 + v26);
      if (!*(_BYTE *)(a1 + v26))
        goto LABEL_34;
LABEL_25:
      v30 = (v28 - 1) << v27;
      if (v26 > 3)
        v30 = 0;
      if ((_DWORD)v26)
      {
        if (v26 <= 3)
          v31 = v26;
        else
          v31 = 4;
        __asm { BR              X12 }
      }
      return v18 + v30 + 1;
    }
    v28 = *(unsigned __int16 *)(a1 + v26);
    if (*(_WORD *)(a1 + v26))
      goto LABEL_25;
  }
LABEL_34:
  if ((v17 & 0x80000000) == 0)
    return OUTLINED_FUNCTION_165(*(_QWORD *)(a1 + 8));
  v32 = (a1 + v20 + 16) & ~v20;
  if ((_DWORD)v8 == v18)
  {
    v33 = v8;
    v34 = (uint64_t)v6;
    return __swift_getEnumTagSinglePayload(v32, v33, v34);
  }
  v32 = (v32 + v21 + v22) & ~v22;
  if ((_DWORD)v11 == v18)
  {
    v33 = v11;
    v34 = (uint64_t)v9;
    return __swift_getEnumTagSinglePayload(v32, v33, v34);
  }
  if (v15 < 2)
    return 0;
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((v25 + ((v23 + v32) & 0xFFFFFFFFFFFFFFF8)) & ~v24, v15, v13);
  if (EnumTagSinglePayload >= 2)
    return EnumTagSinglePayload - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for MIN()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *Description;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  unsigned int v22;
  int v23;
  int v24;

  OUTLINED_FUNCTION_223();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  Description = OUTLINED_FUNCTION_22_2()[-1].Description;
  v9 = Description[21];
  v10 = 0u;
  v11 = OUTLINED_FUNCTION_33()[-1].Description;
  if (v9 <= v11[21])
    v12 = v11[21];
  else
    v12 = v9;
  v13 = *(_QWORD *)(*(_QWORD *)(v1 + 16) - 8);
  v14 = *(_DWORD *)(v13 + 84);
  v15 = v14 - 1;
  if (!v14)
    v15 = 0;
  if (v12 <= v15)
    v16 = v15;
  else
    v16 = v12;
  if (v16 <= 0x7FFFFFFF)
    v17 = 0x7FFFFFFF;
  else
    v17 = v16;
  v18 = (*(unsigned __int8 *)(v13 + 80)
       + 16
       + ((*((_QWORD *)v11 + 8)
         + 7
         + ((*((_QWORD *)Description + 8)
           + *((unsigned __int8 *)v11 + 80)
           + ((*((unsigned __int8 *)Description + 80) + 16) & ~(unint64_t)*((unsigned __int8 *)Description + 80))) & ~(unint64_t)*((unsigned __int8 *)v11 + 80))) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v19 = *(_QWORD *)(v13 + 64);
  if (!v14)
    LODWORD(v19) = v19 + 1;
  v20 = v19 + v18;
  v21 = 8 * (v19 + v18);
  if (v3 > v17)
  {
    if (v20 <= 3)
    {
      v22 = ((v3 - v17 + ~(-1 << v21)) >> v21) + 1;
      if (HIWORD(v22))
      {
        v10 = 4u;
      }
      else if (v22 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v22 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  if (v17 < v5)
  {
    v23 = ~v17 + v5;
    if (v20 < 4)
    {
      if (v20)
      {
        v24 = v23 & ~(-1 << v21);
        OUTLINED_FUNCTION_203();
        if (v20 == 3)
        {
          *(_WORD *)v7 = v24;
          *(_BYTE *)(v7 + 2) = BYTE2(v24);
        }
        else if (v20 == 2)
        {
          *(_WORD *)v7 = v24;
        }
        else
        {
          *(_BYTE *)v7 = v24;
        }
      }
    }
    else
    {
      OUTLINED_FUNCTION_203();
      *(_DWORD *)v7 = v23;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

void sub_18D936984()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_18D93698C()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

uint64_t type metadata accessor for MAX(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MAX);
}

unint64_t *initializeBufferWithCopyOfBuffer for AggregationEvent(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  ValueMetadata *v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (unint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for StorableValue(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        v8 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v8))
          goto LABEL_13;
        v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        goto LABEL_14;
      case 3u:
      case 4u:
        v11 = a2[1];
        *a1 = *a2;
        a1[1] = v11;
        swift_bridgeObjectRetain();
        goto LABEL_14;
      case 5u:
        v12 = a2[1];
        if (v12 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v14 = *a2;
          outlined copy of Data._Representation(*a2, a2[1]);
          *a1 = v14;
          a1[1] = v12;
        }
        goto LABEL_14;
      case 6u:
        v8 = type metadata accessor for UUID();
        if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v8))
        {
          v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
        }
        else
        {
LABEL_13:
          (*(void (**)(unint64_t *, unint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
          __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v8);
        }
LABEL_14:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v15 = *(int *)(a3 + 20);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for SQLDataType();
    (*((void (**)(char *, char *, ValueMetadata *))v18[-1].Description + 2))(v16, v17, v18);
  }
  return a1;
}

unint64_t *initializeWithCopy for AggregationEvent(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  ValueMetadata *v16;

  v6 = type metadata accessor for StorableValue(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      v7 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
        goto LABEL_11;
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      goto LABEL_12;
    case 3u:
    case 4u:
      v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain();
      goto LABEL_12;
    case 5u:
      v10 = a2[1];
      if (v10 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        v12 = *a2;
        outlined copy of Data._Representation(*a2, a2[1]);
        *a1 = v12;
        a1[1] = v10;
      }
      goto LABEL_12;
    case 6u:
      v7 = type metadata accessor for UUID();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
      {
        v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
LABEL_11:
        (*(void (**)(unint64_t *, unint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
      }
LABEL_12:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v13 = *(int *)(a3 + 20);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v16[-1].Description + 2))(v14, v15, v16);
  return a1;
}

unint64_t *assignWithCopy for AggregationEvent(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  ValueMetadata *v15;

  if (a1 != a2)
  {
    outlined destroy of StorableValue((uint64_t)a1, type metadata accessor for StorableValue);
    v6 = type metadata accessor for StorableValue(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        v7 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
          goto LABEL_12;
        v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
        goto LABEL_13;
      case 3u:
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_13;
      case 5u:
        v9 = a2[1];
        if (v9 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v11 = *a2;
          outlined copy of Data._Representation(*a2, a2[1]);
          *a1 = v11;
          a1[1] = v9;
        }
        goto LABEL_13;
      case 6u:
        v7 = type metadata accessor for UUID();
        if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        }
        else
        {
LABEL_12:
          (*(void (**)(unint64_t *, unint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
          __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
        }
LABEL_13:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v15[-1].Description + 3))(v13, v14, v15);
  return a1;
}

char *initializeWithTake for AggregationEvent(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  ValueMetadata *v15;

  v6 = type metadata accessor for StorableValue(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 6)
  {
    v10 = type metadata accessor for UUID();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v10))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v10);
    }
    goto LABEL_11;
  }
  if (EnumCaseMultiPayload == 2)
  {
    v8 = type metadata accessor for Date();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v8))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v8);
    }
LABEL_11:
    swift_storeEnumTagMultiPayload();
    goto LABEL_12;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_12:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v15[-1].Description + 4))(v13, v14, v15);
  return a1;
}

char *assignWithTake for AggregationEvent(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  ValueMetadata *v15;

  if (a1 != a2)
  {
    outlined destroy of StorableValue((uint64_t)a1, type metadata accessor for StorableValue);
    v6 = type metadata accessor for StorableValue(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 6)
    {
      v10 = type metadata accessor for UUID();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v10))
      {
        v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v10);
      }
      goto LABEL_12;
    }
    if (EnumCaseMultiPayload == 2)
    {
      v8 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v8))
      {
        v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v8);
      }
LABEL_12:
      swift_storeEnumTagMultiPayload();
      goto LABEL_13;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
LABEL_13:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v15[-1].Description + 5))(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for AggregationEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18D937444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ValueMetadata *v6;
  char v7;
  ValueMetadata *v8;
  uint64_t v9;

  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_128_1();
  if (v7)
  {
    v8 = v6;
    v9 = a1;
  }
  else
  {
    v8 = OUTLINED_FUNCTION_33();
    v9 = a1 + *(int *)(a3 + 20);
  }
  return OUTLINED_FUNCTION_67_0(v9, a2, (uint64_t)v8);
}

uint64_t storeEnumTagSinglePayload for AggregationEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18D9374A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ValueMetadata *v7;
  char v8;
  ValueMetadata *v9;
  uint64_t v10;

  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_129_1();
  if (v8)
  {
    v9 = v7;
    v10 = a1;
  }
  else
  {
    v9 = OUTLINED_FUNCTION_33();
    v10 = a1 + *(int *)(a4 + 20);
  }
  return OUTLINED_FUNCTION_68(v10, a2, a2, (uint64_t)v9);
}

uint64_t type metadata completion function for AggregationEvent()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for StorableValue(319);
  if (v1 <= 0x3F)
  {
    result = (uint64_t)type metadata accessor for SQLDataType();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var2;

  if (a1)
  {
    a3(&var2);
    if (!v3)
      v4 = var2;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      v4 = BYTE1(var2);
  }
  return v4 & 1;
}

_BYTE *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return closure #1 in closure #1 in Double.init<A>(_:)(a1, a2);
}

_QWORD *partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(_BYTE *a1@<X8>)
{
  return partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2)
    *a1 = v5;
  return result;
}

_BYTE *closure #1 in closure #1 in Double.init<A>(_:)partial apply@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return partial apply for closure #1 in closure #1 in Double.init<A>(_:)(a1, a2);
}

void OUTLINED_FUNCTION_93_1(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with take of UUID?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_97_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_98_1(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  return _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_101_1()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_104_0()
{
  return swift_bridgeObjectRetain();
}

unint64_t OUTLINED_FUNCTION_105_0()
{
  return specialized __RawDictionaryStorage.find<A>(_:)();
}

void *OUTLINED_FUNCTION_108_1()
{
  void *v0;
  const void *v1;
  uint64_t v2;
  size_t v3;

  if (*(_DWORD *)(v2 + 84))
    v3 = *(_QWORD *)(v2 + 64);
  else
    v3 = *(_QWORD *)(v2 + 64) + 1;
  return memcpy(v0, v1, v3);
}

void *OUTLINED_FUNCTION_113_0()
{
  void *v0;
  const void *v1;
  uint64_t v2;
  size_t v3;

  if (*(_DWORD *)(v2 + 84))
    v3 = *(_QWORD *)(v2 + 64);
  else
    v3 = *(_QWORD *)(v2 + 64) + 1;
  return memcpy(v0, v1, v3);
}

void OUTLINED_FUNCTION_121_1(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of StorableValue(v2, a2);
}

__n128 *OUTLINED_FUNCTION_126_0(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_131_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_147_0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_148_0()
{
  return swift_storeEnumTagMultiPayload();
}

ValueMetadata *OUTLINED_FUNCTION_154_0()
{
  return type metadata accessor for SQLDataType();
}

uint64_t OUTLINED_FUNCTION_167_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_168_0()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_173()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_176@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = a1[1];
  *v1 = *a1;
  v1[1] = v2;
  return 0;
}

uint64_t OUTLINED_FUNCTION_178@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

uint64_t OUTLINED_FUNCTION_184()
{
  return type metadata accessor for SUM_INT(0);
}

uint64_t OUTLINED_FUNCTION_185()
{
  return type metadata accessor for TOTAL(0);
}

uint64_t OUTLINED_FUNCTION_186()
{
  return type metadata accessor for SUM_NON_INT(0);
}

uint64_t OUTLINED_FUNCTION_191(uint64_t a1)
{
  unint64_t v1;

  return outlined copy of Data._Representation(a1, v1);
}

uint64_t OUTLINED_FUNCTION_193(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = result;
  return result;
}

void OUTLINED_FUNCTION_194()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  outlined destroy of StorableValue(v1, v0);
}

void OUTLINED_FUNCTION_195(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);
  uint64_t v3;

  outlined init with copy of StorableValue(v3, a2, v2);
}

void OUTLINED_FUNCTION_199(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with take of UUID?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_201()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_202()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + *(int *)(v0 + 28)) = *(_QWORD *)(v1 + *(int *)(v0 + 28));
  return v2;
}

double OUTLINED_FUNCTION_205()
{
  uint64_t v0;

  return *(double *)(v0 - 88);
}

ValueMetadata *OUTLINED_FUNCTION_209()
{
  return type metadata accessor for SQLExpression();
}

void OUTLINED_FUNCTION_212(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of UUID?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_216(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(result + 28)) = 0;
  *(_BYTE *)(v1 + *(int *)(result + 32)) = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_218(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

void OUTLINED_FUNCTION_220(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of UUID?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_222@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 64) = a1;
  return swift_willThrow();
}

void OUTLINED_FUNCTION_224(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  outlined destroy of UUID?(*(_QWORD *)(a2 - 256), a1);
}

void OUTLINED_FUNCTION_225(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of StorableValue(*(_QWORD *)(v2 - 112), a2);
}

uint64_t static DaemonLibrary.root.getter()
{
  return static DaemonLibrary.root;
}

uint64_t static DaemonLibrary.root.setter(uint64_t result, void *a2)
{
  static DaemonLibrary.root = result;
  off_1EE082870 = a2;
  return result;
}

uint64_t (*static DaemonLibrary.root.modify())()
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t dispatch thunk of static LibraryBase.databaseResources.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static LibraryBase.lookupDatabaseResource(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static LibraryBase.megadomeViewToBiomeStreamMapping.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static LibraryBase.sqlViewToBiomeStreamMapping.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for DaemonLibrary()
{
  return &type metadata for DaemonLibrary;
}

id BMEventBase.init(jsonDictionary:error:)(uint64_t a1, _QWORD *a2)
{
  id v3;
  Class isa;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x1E0C80C00];
  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v12[0] = 0;
  v5 = objc_msgSend(v3, sel_initWithJSONDictionary_error_, isa, v12);

  v6 = v12[0];
  if (!v5)
  {
    v7 = v6;
    v8 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (a2)
    {
      v9 = (void *)_convertErrorToNSError(_:)();
      v10 = v9;
      *a2 = v9;
    }

    return 0;
  }
  return v5;
}

ValueMetadata *type metadata accessor for Streams()
{
  return &type metadata for Streams;
}

id one-time initialization function for general(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.general);
}

uint64_t static Logging.general.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for general, (uint64_t)static Logging.general, a1);
}

id one-time initialization function for pubSub(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.pubSub);
}

uint64_t static Logging.pubSub.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for pubSub, (uint64_t)static Logging.pubSub, a1);
}

uint64_t static Logging.general.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

id one-time initialization function for storage(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.storage);
}

uint64_t static Logging.storage.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for storage, (uint64_t)static Logging.storage, a1);
}

id one-time initialization function for source(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.source);
}

uint64_t static Logging.source.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for source, (uint64_t)static Logging.source, a1);
}

id one-time initialization function for stream(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.stream);
}

uint64_t static Logging.stream.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for stream, (uint64_t)static Logging.stream, a1);
}

id one-time initialization function for metrics(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.metrics);
}

uint64_t static Logging.metrics.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for metrics, (uint64_t)static Logging.metrics, a1);
}

id one-time initialization function for accessService(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.accessService);
}

uint64_t static Logging.accessService.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for accessService, (uint64_t)static Logging.accessService, a1);
}

id one-time initialization function for privacy(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.privacy);
}

uint64_t static Logging.privacy.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(one-time initialization token for privacy, (uint64_t)static Logging.privacy, a1);
}

id one-time initialization function for compute(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.compute);
}

uint64_t static Logging.compute.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for compute, (uint64_t)static Logging.compute, a1);
}

id one-time initialization function for sensor(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.sensor);
}

uint64_t static Logging.sensor.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for sensor, (uint64_t)static Logging.sensor, a1);
}

id one-time initialization function for test(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.test);
}

uint64_t static Logging.test.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for test, (uint64_t)static Logging.test, a1);
}

id one-time initialization function for sync(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.sync);
}

uint64_t static Logging.sync.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for sync, (uint64_t)static Logging.sync, a1);
}

id one-time initialization function for DSL(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.DSL);
}

uint64_t static Logging.DSL.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for DSL, (uint64_t)static Logging.DSL, a1);
}

id one-time initialization function for SQL(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.SQL);
}

uint64_t static Logging.SQL.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for SQL, (uint64_t)static Logging.SQL, a1);
}

id one-time initialization function for flexibleStorage(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.flexibleStorage);
}

uint64_t static Logging.flexibleStorage.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for flexibleStorage, (uint64_t)static Logging.flexibleStorage, a1);
}

id one-time initialization function for library(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.library);
}

uint64_t static Logging.library.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for library, (uint64_t)static Logging.library, a1);
}

id one-time initialization function for distributedContext(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.distributedContext);
}

id one-time initialization function for general(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  id result;

  v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  result = (id)__biome_log_for_category();
  if (result)
    return (id)Logger.init(_:)();
  __break(1u);
  return result;
}

uint64_t static Logging.distributedContext.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for distributedContext, (uint64_t)static Logging.distributedContext, a1);
}

ValueMetadata *type metadata accessor for Logging()
{
  return &type metadata for Logging;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void __swiftcall MaterializedViewDefinition.init(name:sql:createTableSQL:)(BiomeStreams::MaterializedViewDefinition *__return_ptr retstr, Swift::String name, Swift::String sql, Swift::String createTableSQL)
{
  retstr->name = name;
  retstr->sql = sql;
  retstr->createTableSQL = createTableSQL;
}

void MaterializedViewDefinition.name.getter()
{
  OUTLINED_FUNCTION_141();
  OUTLINED_FUNCTION_1();
}

void MaterializedViewDefinition.sql.getter()
{
  OUTLINED_FUNCTION_141();
  OUTLINED_FUNCTION_1();
}

void MaterializedViewDefinition.createTableSQL.getter()
{
  OUTLINED_FUNCTION_141();
  OUTLINED_FUNCTION_1();
}

id static DatabaseResource.sqlDatabase(useCase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static DatabaseResource.sqlDatabase(useCase:)(a1, a2, a3, a4);
}

{
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v15[2];

  v15[1] = *(id *)MEMORY[0x1E0C80C00];
  v8 = objc_msgSend(objc_allocWithZone((Class)BMSQLDatabase), sel_init);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a4 + 8) + 8))(a3);
  v10 = (void *)MEMORY[0x193FEC534](v9);
  swift_bridgeObjectRelease();
  v11 = (void *)MEMORY[0x193FEC534](a1, a2);
  v15[0] = 0;
  LOBYTE(a3) = objc_msgSend(v8, sel_attachDatabaseWithResourceIdentifier_useCase_error_, v10, v11, v15);

  if ((a3 & 1) != 0)
  {
    v12 = v15[0];
  }
  else
  {
    v13 = v15[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v8;
}

uint64_t static DatabaseResource.database(useCase:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return static DatabaseResource.database(useCase:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t result;

  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a4 + 8) + 8))(a3);
  v11 = v10;
  v12 = (void *)MEMORY[0x193FEC534](a1, a2);
  type metadata accessor for SQLDatabaseHandle();
  swift_allocObject();
  result = SQLDatabaseHandle.init(identifier:useCase:readOnly:)(v9, v11, v12, 1);
  if (!v5)
    *a5 = result;
  return result;
}

uint64_t destroy for MaterializedViewDefinition()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MaterializedViewDefinition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MaterializedViewDefinition(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for MaterializedViewDefinition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterializedViewDefinition(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterializedViewDefinition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterializedViewDefinition()
{
  return &type metadata for MaterializedViewDefinition;
}

uint64_t dispatch thunk of static DatabaseResource.materializedViewDefinitions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static DatabaseResource.sqlDatabase(useCase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static DatabaseResource.attribute(to:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of static DatabaseResource.database(useCase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS3key_14BiomeSQLParser11SQLDataTypeO5valuetG_SSAF_0E7Streams13StorableValueOAJtsAE_pTg506_sSS14e11SQLParser11gh15OSS0A7Streams13kl3Os5C51_pIggnorzo_SS3key_AC5valuetSSAH_AfItsAG_pIegnrzr_TRSSAISSANsAE_pIggnorzo_Tf1cn_n(uint64_t a1, uint64_t (*a2)(char *, _QWORD, _QWORD, char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, _QWORD, _QWORD, char *);
  uint64_t v22;
  uint64_t v23;

  v21 = a2;
  v22 = a3;
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: String, value: StorableValue));
  v5 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v7 = (uint64_t *)((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  if (v8)
  {
    v23 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v9 = v23;
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
    v11 = *(_QWORD *)(v10 - 8);
    v12 = (char *)(a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)));
    v18 = *(_QWORD *)(v11 + 72);
    v19 = v10;
    while (1)
    {
      v13 = v21((char *)v7 + *(int *)(v20 + 48), *(_QWORD *)v12, *((_QWORD *)v12 + 1), &v12[*(int *)(v19 + 48)]);
      if (v3)
        break;
      *v7 = v13;
      v7[1] = v14;
      v23 = v9;
      v15 = *(_QWORD *)(v9 + 16);
      if (v15 >= *(_QWORD *)(v9 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v9 = v23;
      }
      v12 += v18;
      *(_QWORD *)(v9 + 16) = v15 + 1;
      outlined init with take of UUID?((uint64_t)v7, v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v15, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: StorableValue));
      if (!--v8)
        return v9;
    }
    swift_release();
  }
  return v9;
}

uint64_t DBViewWriter.init(database:tableName:schema:createTableSQL:)@<X0>(sqlite3 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  void (**v73)(uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  ValueMetadata *v84;
  uint64_t *v85;
  uint64_t v86;
  Swift::String v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  Swift::String *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  Swift::String v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  Swift::String *v107;
  uint64_t v108;
  Swift::String v109;
  Swift::String v110;
  Swift::String v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  Swift::String v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  Swift::String v123;
  Swift::String v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  Swift::String v132;
  ValueMetadata *v133;
  ValueMetadata *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  void *v138;
  Swift::String v139;
  Swift::String v140;
  uint64_t v141;
  char v142;
  unint64_t v143;
  uint64_t v144;
  Swift::String *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  void *v158;
  Swift::String v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  const char *v164;
  sqlite3 *v165;
  uint64_t v166;
  uint64_t v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  ValueMetadata *v178;
  uint64_t v179;
  uint64_t v180;
  sqlite3 *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *boxed_opaque_existential_0;
  void (*v189)(uint64_t *, uint64_t);
  _DWORD v190[6];
  uint64_t v191;
  int v192;
  sqlite3 *v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  int v197;
  ValueMetadata *v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t *v202;
  int v203;
  int v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  char *v208;
  uint64_t *v209;
  char *v210;
  _QWORD *v211;
  uint64_t v212;
  Swift::String *v213;
  uint64_t v214;
  Swift::String *v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  void (**Description)(uint64_t);
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  ValueMetadata *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234[2];
  uint64_t v235[2];
  uint64_t v236;

  v201 = a6;
  v218 = a5;
  v230 = a4;
  v202 = a3;
  v222 = a2;
  v231 = type metadata accessor for SQLRawDataType();
  Description = (void (**)(uint64_t))v231[-1].Description;
  MEMORY[0x1E0C80A78](v231);
  OUTLINED_FUNCTION_8();
  v219 = v9;
  v198 = type metadata accessor for SQLDataType();
  v10 = (uint64_t)v198[-1].Description;
  MEMORY[0x1E0C80A78](v198);
  OUTLINED_FUNCTION_8();
  v217 = v11;
  v220 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  v207 = *(_QWORD *)(v220 - 8);
  MEMORY[0x1E0C80A78](v220);
  OUTLINED_FUNCTION_6_1();
  v216 = v12;
  MEMORY[0x1E0C80A78](v13);
  v221 = (uint64_t)v190 - v14;
  v228 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
  v224 = *(_QWORD *)(v228 - 8);
  v15 = *(_QWORD *)(v224 + 64);
  MEMORY[0x1E0C80A78](v228);
  OUTLINED_FUNCTION_1_14();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_1_14();
  MEMORY[0x1E0C80A78](v17);
  OUTLINED_FUNCTION_24_1();
  v223 = v18;
  MEMORY[0x1E0C80A78](v19);
  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_1_14();
  MEMORY[0x1E0C80A78](v20);
  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_1_14();
  MEMORY[0x1E0C80A78](v21);
  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_1_14();
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)v190 - v24;
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = (char *)v190 - v27;
  v29 = MEMORY[0x1E0C80A78](v26);
  v31 = (char *)v190 - v30;
  MEMORY[0x1E0C80A78](v29);
  v33 = (char *)v190 - v32;
  type metadata accessor for SQLExpressionEvaluator();
  swift_allocObject();
  v34 = v229;
  v35 = SQLExpressionEvaluator.init(db:)(a1);
  if (v34)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_35_3();
  }
  v211 = v33;
  v208 = v31;
  v209 = (uint64_t *)v28;
  v210 = v25;
  v226 = v15;
  v193 = a1;
  v37 = v35;
  swift_retain();
  swift_bridgeObjectRetain();
  v38 = OUTLINED_FUNCTION_48_2();
  specialized _copyCollectionToContiguousArray<A>(_:)(v38);
  v40 = v39;
  OUTLINED_FUNCTION_106();
  v235[0] = v40;
  specialized MutableCollection<>.sort(by:)(v235);
  v191 = 0;
  v194 = v37;
  OUTLINED_FUNCTION_106();
  v41 = v235[0];
  v42 = *(_QWORD *)(v235[0] + 16);
  v225 = a7;
  v43 = (uint64_t *)v221;
  v44 = v220;
  v45 = v207;
  v196 = v235[0];
  if (v42)
  {
    v235[0] = MEMORY[0x1E0DEE9D8];
    swift_retain_n();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v46 = v45;
    v47 = v41 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
    v205 = *(_QWORD *)(v46 + 72);
    v206 = 0;
    v203 = 1;
    v199 = 2;
    v197 = 3;
    v192 = 4;
    v190[5] = 5;
    v190[4] = 6;
    v190[3] = 7;
    LODWORD(v207) = 0;
    v195 = 3;
    v200 = 2;
    v204 = 1;
    v48 = (uint64_t)v198;
    v49 = v211;
    do
    {
      outlined init with copy of Date?(v47, (uint64_t)v43, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
      v229 = *(int *)(v228 + 48);
      v50 = *(int *)(v44 + 48);
      v51 = v216;
      v52 = (uint64_t)v216 + v50;
      a7 = (uint64_t *)((char *)v43 + v50);
      v53 = v10;
      v54 = *v43;
      v55 = v43[1];
      *v216 = *v43;
      v51[1] = v55;
      v56 = *(_QWORD *)(v53 + 16);
      v230 = (uint64_t)v51 + v50;
      OUTLINED_FUNCTION_46_3(v52);
      *v49 = v54;
      v49[1] = v55;
      v10 = v53;
      v57 = v217;
      OUTLINED_FUNCTION_46_3((uint64_t)v217);
      (*(void (**)(uint64_t *, uint64_t))(v10 + 88))(v57, v48);
      OUTLINED_FUNCTION_2_10();
      if (!v115)
      {
        OUTLINED_FUNCTION_2_10();
        if (!v115)
        {
          OUTLINED_FUNCTION_2_10();
          if (!v115)
          {
            OUTLINED_FUNCTION_2_10();
            if (!v115)
            {
              OUTLINED_FUNCTION_2_10();
              if (!v115)
              {
                OUTLINED_FUNCTION_2_10();
                if (!v115)
                {
                  OUTLINED_FUNCTION_2_10();
                  if (!v115)
                  {
                    OUTLINED_FUNCTION_2_10();
                    if (!v115)
                      goto LABEL_83;
                  }
                }
              }
            }
          }
        }
      }
      v49 = v211;
      Description[13]((uint64_t)v211 + v229);
      OUTLINED_FUNCTION_32_4();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v230, v48);
      v43 = (uint64_t *)v221;
      outlined destroy of (key: String, value: SQLDataType)(v221, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v58 = *(_QWORD *)(v235[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v58);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, (uint64_t)v49);
      destructiveProjectEnumData for StorableValue(v59, v60);
      v47 += v205;
      --v42;
      v44 = v220;
    }
    while (v42);
    swift_release();
    v61 = v235[0];
    a7 = v225;
  }
  else
  {
    swift_retain();
    v61 = MEMORY[0x1E0DEE9D8];
  }
  v62 = *(_QWORD *)(v61 + 16);
  v63 = MEMORY[0x1E0DEE9D8];
  v56 = v219;
  v229 = v61;
  v230 = v62;
  if (!v62)
    goto LABEL_27;
  v234[0] = MEMORY[0x1E0DEE9D8];
  v57 = v234;
  OUTLINED_FUNCTION_25_1();
  v10 = static StorableValue.DataValueCodingKeys.== infix(_:_:)();
  v48 = 0;
  do
  {
    if ((v10 & 1) != 0)
    {
      v64 = OUTLINED_FUNCTION_5_4();
      v65 = (uint64_t)v208;
      OUTLINED_FUNCTION_49_2(v64);
      v56 = (uint64_t)v210;
      v66 = v209;
    }
    else
    {
      OUTLINED_FUNCTION_13_5();
      OUTLINED_FUNCTION_38_3();
      v56 = (uint64_t)v210;
      v66 = v209;
      v65 = (uint64_t)v208;
      if (!v115)
      {
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        lazy protocol witness table accessor for type SQLError and conformance SQLError();
        v185 = v48;
        OUTLINED_FUNCTION_13_0();
        v187 = v186;
        v186[3] = v48;
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v186);
        ((void (*)(uint64_t *, uint64_t *, uint64_t))v56)(boxed_opaque_existential_0, a7, v48);
        *((_OWORD *)v187 + 2) = 0u;
        *((_OWORD *)v187 + 3) = 0u;
        *((_BYTE *)v187 + 64) = 3;
        OUTLINED_FUNCTION_32_4();
        swift_willThrow();
        v189 = *(void (**)(uint64_t *, uint64_t))(v10 + 8);
        v189(v57, v185);
        v189((uint64_t *)v230, v185);
        swift_bridgeObjectRelease();
        outlined destroy of (key: String, value: SQLDataType)(v221, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        OUTLINED_FUNCTION_31_2();
        OUTLINED_FUNCTION_23_1();
        swift_release_n();
        swift_release();
        OUTLINED_FUNCTION_35_3();
        v172 = 0;
        goto LABEL_77;
      }
      v235[0] = v67;
      OUTLINED_FUNCTION_49_2((uint64_t)v235);
      OUTLINED_FUNCTION_30_2();
    }
    outlined init with take of UUID?(v65, (uint64_t)v66, &demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
    static String._createEmpty(withInitialCapacity:)(7);
    OUTLINED_FUNCTION_2_1();
    v235[0] = 34;
    v235[1] = 0xE100000000000000;
    v68 = *v66;
    v69 = v66[1];
    OUTLINED_FUNCTION_26_3();
    ++v48;
    OUTLINED_FUNCTION_33_2(8226);
    v70 = *(int *)(v228 + 48);
    v71 = v56 + v70;
    v72 = (char *)v66 + v70;
    *(_QWORD *)v56 = v68;
    *(_QWORD *)(v56 + 8) = v69;
    v73 = Description;
    v74 = (uint64_t)v66;
    v75 = (uint64_t)v231;
    ((void (*)(uint64_t, char *, ValueMetadata *))Description[2])(v71, v72, v231);
    SQLRawDataType.rawValue.getter();
    ((void (*)(uint64_t, uint64_t))v73[1])(v71, v75);
    OUTLINED_FUNCTION_26_3();
    swift_bridgeObjectRelease();
    v76 = OUTLINED_FUNCTION_16_2();
    v78 = v77;
    outlined destroy of (key: String, value: SQLDataType)(v74, &demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
    v57 = v234;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    OUTLINED_FUNCTION_50_2(v234[0]);
    v79 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v75, v76, v78);
    destructiveProjectEnumData for StorableValue(v79, v80);
    v62 = v230;
    a7 = v225;
    v56 = v219;
  }
  while (v230 != v48);
  v63 = v234[0];
LABEL_27:
  v235[0] = v63;
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v82 = lazy protocol witness table accessor for type [String] and conformance [A]();
  v211 = (_QWORD *)v81;
  v210 = (char *)v82;
  v83 = BidirectionalCollection<>.joined(separator:)();
  OUTLINED_FUNCTION_8_1();
  v84 = v231;
  if (v201)
  {
    OUTLINED_FUNCTION_64();
    v85 = v202;
    v86 = v222;
  }
  else
  {
    static String._createEmpty(withInitialCapacity:)(43);
    OUTLINED_FUNCTION_2_1();
    v235[0] = 0xD00000000000001BLL;
    v235[1] = 0x800000018DCC3420;
    v85 = v202;
    OUTLINED_FUNCTION_48_2();
    v86 = v222;
    OUTLINED_FUNCTION_40_2();
    OUTLINED_FUNCTION_106();
    OUTLINED_FUNCTION_22_3();
    OUTLINED_FUNCTION_21_3(v83);
    OUTLINED_FUNCTION_64();
    v87._countAndFlagsBits = 0x4349525453202920;
    v87._object = (void *)0xE900000000000054;
    String.append(_:)(v87);
    v218 = OUTLINED_FUNCTION_16_2();
    v201 = v88;
  }
  v235[0] = 0;
  v235[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  strcpy((char *)v235, "INSERT INTO ");
  BYTE5(v235[1]) = 0;
  HIWORD(v235[1]) = -5120;
  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_33_2(10272);
  if (v62)
  {
    v232 = specialized ContiguousArray.init()();
    v57 = &v232;
    OUTLINED_FUNCTION_19_3();
    v10 = OUTLINED_FUNCTION_47_3();
    v48 = 0;
    a7 = (uint64_t *)0xE100000000000000;
    v85 = &demangling cache variable for type metadata for (key: String, value: SQLRawDataType);
    do
    {
      if ((v10 & 1) != 0)
      {
        v89 = OUTLINED_FUNCTION_5_4();
        v90 = v214;
        OUTLINED_FUNCTION_39_1(v89);
        v91 = v215;
      }
      else
      {
        OUTLINED_FUNCTION_13_5();
        OUTLINED_FUNCTION_38_3();
        v91 = v215;
        v90 = v214;
        if (!v115)
          goto LABEL_80;
        v93 = OUTLINED_FUNCTION_28_2(v92);
        OUTLINED_FUNCTION_39_1(v93);
        OUTLINED_FUNCTION_30_2();
      }
      outlined init with take of UUID?(v90, (uint64_t)v91, &demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
      static String._createEmpty(withInitialCapacity:)(4);
      OUTLINED_FUNCTION_2_1();
      v234[0] = 34;
      v234[1] = 0xE100000000000000;
      String.append(_:)(*v91);
      ++v48;
      OUTLINED_FUNCTION_4_7(34);
      v94 = OUTLINED_FUNCTION_42_3();
      v96 = v95;
      outlined destroy of (key: String, value: SQLDataType)((uint64_t)v91, &demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
      v57 = &v232;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v97 = *(_QWORD *)(v232 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v97);
      v98 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v97, v94, v96);
      destructiveProjectEnumData for StorableValue(v98, v99);
      v62 = v230;
      v84 = v231;
      v86 = v222;
    }
    while (v230 != v48);
    v100 = v232;
    a7 = v225;
  }
  else
  {
    OUTLINED_FUNCTION_29_1();
    v100 = v101;
  }
  v234[0] = v100;
  OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_6_7();
  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_106();
  v102._countAndFlagsBits = 0x5345554C41562029;
  v102._object = (void *)0xEA00000000002820;
  String.append(_:)(v102);
  if (v62)
  {
    v234[0] = specialized ContiguousArray.init()();
    v57 = v234;
    OUTLINED_FUNCTION_19_3();
    v10 = OUTLINED_FUNCTION_47_3();
    v48 = 0;
    do
    {
      if ((v10 & 1) == 0)
      {
        OUTLINED_FUNCTION_13_5();
        swift_unknownObjectRelease();
        OUTLINED_FUNCTION_38_3();
        if (!v115)
          goto LABEL_81;
      }
      ++v48;
      v57 = v234;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_34_3(v234[0]);
      v103 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)((uint64_t)v85, 63, 0xE100000000000000);
      destructiveProjectEnumData for StorableValue(v103, v104);
    }
    while (v62 != v48);
    v105 = v234[0];
  }
  else
  {
    OUTLINED_FUNCTION_29_1();
    v105 = v106;
  }
  v234[0] = v105;
  OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_6_7();
  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_4_7(41);
  v214 = OUTLINED_FUNCTION_16_2();
  v215 = v107;
  swift_bridgeObjectRetain();
  v235[0] = static String._createEmpty(withInitialCapacity:)(70);
  v235[1] = v108;
  v109._countAndFlagsBits = 0x46204554454C4544;
  v109._object = (void *)0xEC000000204D4F52;
  String.append(_:)(v109);
  OUTLINED_FUNCTION_21_3(v86);
  v110._countAndFlagsBits = 0xD000000000000022;
  v110._object = (void *)0x800000018DCC3440;
  String.append(_:)(v110);
  OUTLINED_FUNCTION_21_3(v86);
  v111._countAndFlagsBits = 0x2820455245485720;
  v111._object = (void *)0xE800000000000000;
  String.append(_:)(v111);
  if (v62)
  {
    v236 = specialized ContiguousArray.init()();
    v57 = &v236;
    OUTLINED_FUNCTION_19_3();
    LODWORD(v221) = OUTLINED_FUNCTION_47_3();
    v112 = 0;
    a7 = &demangling cache variable for type metadata for (key: String, value: SQLRawDataType);
    v220 = (uint64_t)"SELECT rowid FROM ";
    v216 = (uint64_t *)0x800000018DCC3470;
    v219 = 0xD000000000000016;
    v217 = (uint64_t *)0x800000018DCC34B0;
    while (1)
    {
      if ((v221 & 1) != 0)
      {
        OUTLINED_FUNCTION_15_3(v229+ ((*(unsigned __int8 *)(v224 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v224 + 80))+ *(_QWORD *)(v224 + 72) * v112);
        v10 = (uint64_t)Description;
      }
      else
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)(v112, v229);
        v10 = (uint64_t)Description;
        v48 = v228;
        if (v226 != 8)
          goto LABEL_82;
        v114 = OUTLINED_FUNCTION_28_2(v113);
        OUTLINED_FUNCTION_15_3(v114);
        OUTLINED_FUNCTION_30_2();
      }
      outlined init with take of UUID?(v62, v223, &demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
      (*(void (**)(uint64_t, uint64_t, ValueMetadata *))(v10 + 104))(v56, 1, v84);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type SQLRawDataType and conformance SQLRawDataType, (uint64_t (*)(uint64_t))type metadata accessor for SQLRawDataType, (uint64_t)&protocol conformance descriptor for SQLRawDataType);
      OUTLINED_FUNCTION_41_2();
      OUTLINED_FUNCTION_41_2();
      v115 = v234[0] == v232 && v234[1] == v233;
      if (v115)
        break;
      v116 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_54();
      OUTLINED_FUNCTION_18_3();
      if ((v116 & 1) != 0)
        goto LABEL_61;
      static String._createEmpty(withInitialCapacity:)(42);
      OUTLINED_FUNCTION_2_1();
      v234[0] = 8744;
      v234[1] = 0xE200000000000000;
      v117 = v223;
      v118 = *(_QWORD *)(v223 + 8);
      OUTLINED_FUNCTION_4_10();
      v119._countAndFlagsBits = 0x524F203F203D2022;
      v119._object = (void *)0xEB00000000222820;
      String.append(_:)(v119);
      OUTLINED_FUNCTION_4_10();
      v120 = 0xD000000000000019;
      v121 = (unint64_t)v216;
LABEL_62:
      String.append(_:)(*(Swift::String *)&v120);
      v125 = OUTLINED_FUNCTION_42_3();
      v127 = v126;
      ++v112;
      outlined destroy of (key: String, value: SQLDataType)(v117, &demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
      v57 = &v236;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_50_2(v236);
      v128 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v118, v125, v127);
      destructiveProjectEnumData for StorableValue(v128, v129);
      v62 = v230;
      v84 = v231;
      if (v230 == v112)
      {
        v130 = v236;
        a7 = v225;
        v86 = v222;
        goto LABEL_65;
      }
    }
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_18_3();
LABEL_61:
    v234[0] = static String._createEmpty(withInitialCapacity:)(57);
    v234[1] = v122;
    v123._countAndFlagsBits = 0x222873626128;
    v123._object = (void *)0xE600000000000000;
    String.append(_:)(v123);
    v117 = v223;
    v118 = *(_QWORD *)(v223 + 8);
    OUTLINED_FUNCTION_4_10();
    v124._countAndFlagsBits = v219;
    v124._object = v217;
    String.append(_:)(v124);
    OUTLINED_FUNCTION_4_10();
    v121 = v220 | 0x8000000000000000;
    v120 = 0xD000000000000019;
    goto LABEL_62;
  }
  OUTLINED_FUNCTION_29_1();
  v130 = v131;
LABEL_65:
  v234[0] = v130;
  BidirectionalCollection<>.joined(separator:)();
  OUTLINED_FUNCTION_6_7();
  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_106();
  v132._object = (void *)0xEA00000000002931;
  v132._countAndFlagsBits = 0x2054494D494C2029;
  String.append(_:)(v132);
  v228 = OUTLINED_FUNCTION_16_2();
  v134 = v133;
  v135 = MEMORY[0x193FEC5C4](v86, v202, 0x7865646E695FLL, 0xE600000000000000);
  v136 = v86;
  v138 = v137;
  v231 = v134;
  swift_bridgeObjectRetain();
  static String._createEmpty(withInitialCapacity:)(46);
  OUTLINED_FUNCTION_2_1();
  v235[0] = 0xD00000000000001FLL;
  v235[1] = 0x800000018DCC3490;
  v139._countAndFlagsBits = v135;
  v139._object = v138;
  String.append(_:)(v139);
  OUTLINED_FUNCTION_8_1();
  v140._countAndFlagsBits = 542002976;
  v140._object = (void *)0xE400000000000000;
  String.append(_:)(v140);
  OUTLINED_FUNCTION_21_3(v136);
  OUTLINED_FUNCTION_22_3();
  v141 = v229;
  if (v62)
  {
    v232 = specialized ContiguousArray.init()();
    OUTLINED_FUNCTION_19_3();
    v142 = static StorableValue.DataValueCodingKeys.== infix(_:_:)();
    v143 = 0;
    do
    {
      if ((v142 & 1) != 0)
      {
        v144 = v212;
        OUTLINED_FUNCTION_45_3(v141+ ((*(unsigned __int8 *)(v224 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v224 + 80))+ *(_QWORD *)(v224 + 72) * v143);
        v145 = v213;
      }
      else
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)(v143, v141);
        OUTLINED_FUNCTION_38_3();
        v145 = v213;
        v144 = v212;
        if (!v115)
        {
          __break(1u);
          result = swift_release();
          __break(1u);
          return result;
        }
        v147 = OUTLINED_FUNCTION_28_2(v146);
        OUTLINED_FUNCTION_45_3(v147);
        OUTLINED_FUNCTION_30_2();
      }
      outlined init with take of UUID?(v144, (uint64_t)v145, &demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
      static String._createEmpty(withInitialCapacity:)(4);
      OUTLINED_FUNCTION_2_1();
      v234[0] = 34;
      v234[1] = 0xE100000000000000;
      String.append(_:)(*v145);
      ++v143;
      OUTLINED_FUNCTION_4_7(34);
      v148 = OUTLINED_FUNCTION_42_3();
      v150 = v149;
      outlined destroy of (key: String, value: SQLDataType)((uint64_t)v145, &demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_34_3(v232);
      v151 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)((uint64_t)v145, v148, v150);
      destructiveProjectEnumData for StorableValue(v151, v152);
      a7 = v225;
      v153 = v218;
    }
    while (v230 != v143);
    OUTLINED_FUNCTION_45();
    v154 = v232;
  }
  else
  {
    OUTLINED_FUNCTION_29_1();
    v154 = v155;
    OUTLINED_FUNCTION_45();
    v153 = v218;
  }
  v234[0] = v154;
  v156 = OUTLINED_FUNCTION_0_21();
  v158 = v157;
  OUTLINED_FUNCTION_54();
  v159._countAndFlagsBits = v156;
  v159._object = v158;
  String.append(_:)(v159);
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_33_2(10528);
  v160 = OUTLINED_FUNCTION_16_2();
  v162 = v161;
  v163 = v201;
  v164 = (const char *)(String.utf8CString.getter() + 32);
  swift_bridgeObjectRetain();
  v165 = v193;
  v166 = sqlite3_exec(v193, v164, 0, 0, 0);
  swift_release();
  if (!(_DWORD)v166)
  {
    OUTLINED_FUNCTION_127();
    v177 = v194;
    swift_retain();
    OUTLINED_FUNCTION_54();
    v178 = v231;
    swift_bridgeObjectRelease();
    v179 = (uint64_t)v215;
    OUTLINED_FUNCTION_127();
    v180 = v196;
    OUTLINED_FUNCTION_8_1();
    v181 = v165;
    v182 = (uint64_t)v202;
    OUTLINED_FUNCTION_64();
    result = swift_release_n();
    *a7 = (uint64_t)v181;
    a7[1] = v177;
    a7[2] = v222;
    a7[3] = v182;
    v183 = v214;
    a7[4] = v180;
    a7[5] = v183;
    v184 = v228;
    a7[6] = v179;
    a7[7] = v184;
    a7[8] = (uint64_t)v178;
    a7[9] = v160;
    a7[10] = v162;
    return result;
  }
  v167 = v153;
  v168 = BMSQLDatabaseError(v166, v165, 0);
  swift_getErrorValue();
  v169 = Error.localizedDescription.getter();
  v171 = v170;

  v235[0] = v169;
  v235[1] = v171;
  strcpy((char *)v234, "BMSQLDatabase");
  HIWORD(v234[1]) = -4864;
  v232 = 0x62617461444C5153;
  v233 = 0xEB00000000657361;
  lazy protocol witness table accessor for type String and conformance String();
  v172 = 1;
  v173 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v175 = v174;
  OUTLINED_FUNCTION_8_1();
  lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
  OUTLINED_FUNCTION_13_0();
  *(_QWORD *)v176 = v167;
  *(_QWORD *)(v176 + 8) = v163;
  *(_QWORD *)(v176 + 16) = v173;
  *(_QWORD *)(v176 + 24) = v175;
  *(_BYTE *)(v176 + 32) = 1;
  OUTLINED_FUNCTION_32_4();
  swift_willThrow();
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_23_1();
  swift_release();
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_54();
LABEL_77:
  OUTLINED_FUNCTION_8_1();
  swift_bridgeObjectRelease();
  result = swift_release();
  if (v172)
  {
    OUTLINED_FUNCTION_54();
    OUTLINED_FUNCTION_127();
    return OUTLINED_FUNCTION_45();
  }
  return result;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(Swift::Int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  Swift::Int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  Swift::Int v29;
  Swift::Int v30;
  Swift::Int v31;
  uint64_t v32;
  Swift::Int v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  Swift::Int v38;
  uint64_t v39;
  Swift::Int v40;
  Swift::Int v41;
  uint64_t v42;
  Swift::Int v43;
  _QWORD *v44;
  _QWORD *v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  Swift::Int v49;
  uint64_t v50;
  uint64_t v51;
  Swift::Int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  Swift::Int v57;
  Swift::Int v58;
  uint64_t v59;
  Swift::Int v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  Swift::Int v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char v69;
  Swift::Int v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  Swift::Int v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  char v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  Swift::Int v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  Swift::Int v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  Swift::Int v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  char *v147;
  uint64_t v148;
  Swift::Int v149;
  uint64_t v150;
  uint64_t v151;
  Swift::Int *v152;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  v144 = *(_QWORD *)(v4 - 8);
  v145 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v139 = (uint64_t)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v150 = (uint64_t)&v131 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v131 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v131 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v142 = (uint64_t *)((char *)&v131 - v16);
  v17 = MEMORY[0x1E0C80A78](v15);
  v141 = (uint64_t *)((char *)&v131 - v18);
  v19 = MEMORY[0x1E0C80A78](v17);
  v137 = (uint64_t *)((char *)&v131 - v20);
  MEMORY[0x1E0C80A78](v19);
  v136 = (uint64_t *)((char *)&v131 - v21);
  v152 = a1;
  v22 = a1[1];
  v23 = _minimumMergeRunLength(_:)(v22);
  if (v23 >= v22)
  {
    if (v22 < 0)
      goto LABEL_159;
    if (v22)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v22, 1, v152);
    return;
  }
  if (v22 < -1)
    goto LABEL_167;
  v24 = v23;
  v25 = (char *)MEMORY[0x1E0DEE9D8];
  v26 = MEMORY[0x1E0DEE9D8];
  if (v22 > 1)
  {
    v26 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v26 + 16) = v22 / 2;
  }
  v27 = *(unsigned __int8 *)(v144 + 80);
  v135 = v26;
  v143 = v26 + ((v27 + 32) & ~v27);
  if (v22 < 1)
  {
    v74 = *((_QWORD *)v25 + 2);
LABEL_125:
    if (v74 >= 2)
    {
      v124 = *v152;
      do
      {
        v125 = v74 - 2;
        if (v74 < 2)
          goto LABEL_153;
        if (!v124)
          goto LABEL_166;
        v126 = v25;
        v127 = *(_QWORD *)&v25[16 * v125 + 32];
        v128 = *(_QWORD *)&v25[16 * v74 + 24];
        specialized _merge<A>(low:mid:high:buffer:by:)(v124 + *(_QWORD *)(v144 + 72) * v127, v124 + *(_QWORD *)(v144 + 72) * *(_QWORD *)&v25[16 * v74 + 16], v124 + *(_QWORD *)(v144 + 72) * v128, v143);
        if (v2)
          break;
        if (v128 < v127)
          goto LABEL_154;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v126 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v25);
        if (v125 >= *((_QWORD *)v126 + 2))
          goto LABEL_155;
        v129 = &v126[16 * v125 + 32];
        *(_QWORD *)v129 = v127;
        *((_QWORD *)v129 + 1) = v128;
        v130 = *((_QWORD *)v126 + 2);
        if (v74 > v130)
          goto LABEL_156;
        memmove(&v126[16 * v74 + 16], &v126[16 * v74 + 32], 16 * (v130 - v74));
        *((_QWORD *)v126 + 2) = v130 - 1;
        v74 = v130 - 1;
        v25 = v126;
      }
      while (v130 > 2);
    }
LABEL_136:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v135 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
  v134 = v24;
  v146 = v14;
  v147 = v11;
  v28 = 0;
  while (1)
  {
    v29 = v28;
    v30 = v28 + 1;
    if (v28 + 1 >= v22)
    {
      v38 = v28 + 1;
LABEL_14:
      v39 = (uint64_t)v147;
      goto LABEL_47;
    }
    v31 = *v152;
    v32 = *(_QWORD *)(v144 + 72);
    v33 = v28;
    v34 = v136;
    outlined init with copy of Date?(*v152 + v32 * v30, (uint64_t)v136, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
    v140 = v33;
    v151 = v32;
    v35 = v31 + v32 * v33;
    v36 = v137;
    outlined init with copy of Date?(v35, (uint64_t)v137, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
    if (*v34 == *v36 && v34[1] == v36[1])
      LODWORD(v149) = 0;
    else
      LODWORD(v149) = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined destroy of (key: String, value: SQLDataType)((uint64_t)v137, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
    outlined destroy of (key: String, value: SQLDataType)((uint64_t)v136, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
    v29 = v140;
    v138 = v31;
    if (v140 + 2 >= v22)
    {
      v41 = v140 + 2;
    }
    else
    {
      v148 = v151 * v30;
      v40 = v31;
      v41 = v140 + 2;
      v42 = v151 * (v140 + 2);
      while (1)
      {
        v43 = v22;
        v44 = v141;
        outlined init with copy of Date?(v40 + v42, (uint64_t)v141, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        v45 = v142;
        outlined init with copy of Date?(v40 + v148, (uint64_t)v142, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        v46 = *v44 == *v45 && v44[1] == v45[1];
        v47 = v46 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined destroy of (key: String, value: SQLDataType)((uint64_t)v142, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        outlined destroy of (key: String, value: SQLDataType)((uint64_t)v141, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        v22 = v43;
        if (((v149 ^ v47) & 1) != 0)
          break;
        v40 += v151;
        if (++v41 >= v43)
        {
          v41 = v43;
          break;
        }
      }
      v29 = v140;
      v31 = v138;
    }
    if ((v149 & 1) == 0)
    {
      v39 = (uint64_t)v147;
      v38 = v41;
      goto LABEL_47;
    }
    if (v41 < v29)
      goto LABEL_160;
    v38 = v41;
    if (v29 >= v41)
      goto LABEL_14;
    v148 = v22;
    v133 = v25;
    v48 = 0;
    v49 = v29;
    v50 = v151 * (v38 - 1);
    v51 = v38 * v151;
    v52 = v49;
    v53 = v49 * v151;
    v54 = (uint64_t)v147;
    do
    {
      if (v52 != v38 + v48 - 1)
      {
        if (!v31)
          goto LABEL_165;
        v149 = v31 + v50;
        outlined init with take of UUID?(v31 + v53, v139, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        if (v53 < v50 || v31 + v53 >= (unint64_t)(v31 + v51))
        {
          v56 = v149;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v56 = v149;
          if (v53 != v50)
            swift_arrayInitWithTakeBackToFront();
        }
        outlined init with take of UUID?(v139, v56, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        v54 = (uint64_t)v147;
        v31 = v138;
      }
      ++v52;
      --v48;
      v50 -= v151;
      v51 -= v151;
      v53 += v151;
    }
    while (v52 < v38 + v48);
    v25 = v133;
    v29 = v140;
    v22 = v148;
    v39 = v54;
LABEL_47:
    v149 = v38;
    if (v38 >= v22)
      goto LABEL_71;
    if (__OFSUB__(v38, v29))
      goto LABEL_158;
    if (v38 - v29 >= v134)
      goto LABEL_71;
    if (__OFADD__(v29, v134))
      goto LABEL_161;
    v57 = v29 + v134 >= v22 ? v22 : v29 + v134;
    if (v57 < v29)
      break;
    v140 = v29;
    v58 = v149;
    if (v149 != v57)
    {
      v132 = v2;
      v133 = v25;
      v59 = *(_QWORD *)(v144 + 72);
      v151 = v59 * (v149 - 1);
      v148 = v59;
      v60 = v149 * v59;
      v138 = v57;
      do
      {
        v61 = 0;
        v62 = v140;
        v149 = v60;
        while (1)
        {
          v63 = (_QWORD *)v39;
          v64 = *v152;
          v65 = v60 + v61 + *v152;
          v66 = v146;
          outlined init with copy of Date?(v65, (uint64_t)v146, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
          v67 = v151 + v61 + v64;
          v39 = (uint64_t)v63;
          outlined init with copy of Date?(v67, (uint64_t)v63, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
          if (*v66 == *v63 && v66[1] == v63[1])
            break;
          v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined destroy of (key: String, value: SQLDataType)(v39, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
          outlined destroy of (key: String, value: SQLDataType)((uint64_t)v66, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
          if ((v69 & 1) == 0)
            goto LABEL_67;
          v70 = *v152;
          v60 = v149;
          if (!*v152)
            goto LABEL_163;
          v71 = v70 + v151 + v61;
          outlined init with take of UUID?(v70 + v149 + v61, v150, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
          swift_arrayInitWithTakeFrontToBack();
          outlined init with take of UUID?(v150, v71, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
          v39 = (uint64_t)v147;
          v61 -= v148;
          if (v58 == ++v62)
            goto LABEL_68;
        }
        outlined destroy of (key: String, value: SQLDataType)((uint64_t)v63, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        outlined destroy of (key: String, value: SQLDataType)((uint64_t)v66, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
LABEL_67:
        v60 = v149;
LABEL_68:
        ++v58;
        v151 += v148;
        v60 += v148;
      }
      while (v58 != v138);
      v149 = v138;
      v2 = v132;
      v25 = v133;
    }
    v29 = v140;
LABEL_71:
    if (v149 < v29)
      goto LABEL_157;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
    v73 = *((_QWORD *)v25 + 2);
    v72 = *((_QWORD *)v25 + 3);
    v74 = v73 + 1;
    if (v73 >= v72 >> 1)
      v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v25);
    *((_QWORD *)v25 + 2) = v74;
    v75 = v25 + 32;
    v76 = &v25[16 * v73 + 32];
    v77 = v149;
    *(_QWORD *)v76 = v29;
    *((_QWORD *)v76 + 1) = v77;
    if (v73)
    {
      while (1)
      {
        v78 = v74 - 1;
        if (v74 >= 4)
        {
          v83 = &v75[16 * v74];
          v84 = *((_QWORD *)v83 - 8);
          v85 = *((_QWORD *)v83 - 7);
          v89 = __OFSUB__(v85, v84);
          v86 = v85 - v84;
          if (v89)
            goto LABEL_142;
          v88 = *((_QWORD *)v83 - 6);
          v87 = *((_QWORD *)v83 - 5);
          v89 = __OFSUB__(v87, v88);
          v81 = v87 - v88;
          v82 = v89;
          if (v89)
            goto LABEL_143;
          v90 = v74 - 2;
          v91 = &v75[16 * v74 - 32];
          v93 = *(_QWORD *)v91;
          v92 = *((_QWORD *)v91 + 1);
          v89 = __OFSUB__(v92, v93);
          v94 = v92 - v93;
          if (v89)
            goto LABEL_145;
          v89 = __OFADD__(v81, v94);
          v95 = v81 + v94;
          if (v89)
            goto LABEL_148;
          if (v95 >= v86)
          {
            v113 = &v75[16 * v78];
            v115 = *(_QWORD *)v113;
            v114 = *((_QWORD *)v113 + 1);
            v89 = __OFSUB__(v114, v115);
            v116 = v114 - v115;
            if (v89)
              goto LABEL_152;
            v106 = v81 < v116;
            goto LABEL_108;
          }
        }
        else
        {
          if (v74 != 3)
          {
            v107 = *((_QWORD *)v25 + 4);
            v108 = *((_QWORD *)v25 + 5);
            v89 = __OFSUB__(v108, v107);
            v100 = v108 - v107;
            v101 = v89;
            goto LABEL_102;
          }
          v80 = *((_QWORD *)v25 + 4);
          v79 = *((_QWORD *)v25 + 5);
          v89 = __OFSUB__(v79, v80);
          v81 = v79 - v80;
          v82 = v89;
        }
        if ((v82 & 1) != 0)
          goto LABEL_144;
        v90 = v74 - 2;
        v96 = &v75[16 * v74 - 32];
        v98 = *(_QWORD *)v96;
        v97 = *((_QWORD *)v96 + 1);
        v99 = __OFSUB__(v97, v98);
        v100 = v97 - v98;
        v101 = v99;
        if (v99)
          goto LABEL_147;
        v102 = &v75[16 * v78];
        v104 = *(_QWORD *)v102;
        v103 = *((_QWORD *)v102 + 1);
        v89 = __OFSUB__(v103, v104);
        v105 = v103 - v104;
        if (v89)
          goto LABEL_150;
        if (__OFADD__(v100, v105))
          goto LABEL_151;
        if (v100 + v105 >= v81)
        {
          v106 = v81 < v105;
LABEL_108:
          if (v106)
            v78 = v90;
          goto LABEL_110;
        }
LABEL_102:
        if ((v101 & 1) != 0)
          goto LABEL_146;
        v109 = &v75[16 * v78];
        v111 = *(_QWORD *)v109;
        v110 = *((_QWORD *)v109 + 1);
        v89 = __OFSUB__(v110, v111);
        v112 = v110 - v111;
        if (v89)
          goto LABEL_149;
        if (v112 < v100)
          goto LABEL_119;
LABEL_110:
        v117 = v78 - 1;
        if (v78 - 1 >= v74)
        {
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
          goto LABEL_162;
        }
        if (!*v152)
          goto LABEL_164;
        v118 = v25;
        v119 = &v75[16 * v117];
        v120 = *(_QWORD *)v119;
        v121 = &v75[16 * v78];
        v122 = *((_QWORD *)v121 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(*v152 + *(_QWORD *)(v144 + 72) * *(_QWORD *)v119, *v152 + *(_QWORD *)(v144 + 72) * *(_QWORD *)v121, *v152 + *(_QWORD *)(v144 + 72) * v122, v143);
        if (v2)
          goto LABEL_136;
        if (v122 < v120)
          goto LABEL_139;
        if (v78 > *((_QWORD *)v118 + 2))
          goto LABEL_140;
        *(_QWORD *)v119 = v120;
        *(_QWORD *)&v75[16 * v117 + 8] = v122;
        v123 = *((_QWORD *)v118 + 2);
        if (v78 >= v123)
          goto LABEL_141;
        v25 = v118;
        v74 = v123 - 1;
        memmove(&v75[16 * v78], v121 + 16, 16 * (v123 - 1 - v78));
        *((_QWORD *)v118 + 2) = v123 - 1;
        if (v123 <= 2)
          goto LABEL_119;
      }
    }
    v74 = 1;
LABEL_119:
    v22 = v152[1];
    v28 = v149;
    if (v149 >= v22)
      goto LABEL_125;
  }
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v30 = a1;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  v7 = MEMORY[0x1E0C80A78](v31);
  v35 = (uint64_t)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (uint64_t *)((char *)&v28 - v10);
  MEMORY[0x1E0C80A78](v9);
  v14 = (uint64_t *)((char *)&v28 - v13);
  v34 = a3;
  v29 = a2;
  if (a3 != a2)
  {
    v15 = *(_QWORD *)(v12 + 72);
    v37 = v15 * (v34 - 1);
    v32 = (char *)&v28 - v13;
    v33 = v15;
    v36 = v15 * v34;
    v16 = &demangling cache variable for type metadata for (key: String, value: SQLDataType);
    while (2)
    {
      v17 = 0;
      v18 = v30;
      while (1)
      {
        v19 = *a4;
        outlined init with copy of Date?(v36 + v17 + *a4, (uint64_t)v14, v16);
        outlined init with copy of Date?(v37 + v17 + v19, (uint64_t)v11, v16);
        if (*v14 == *v11 && v14[1] == v11[1])
          break;
        v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined destroy of (key: String, value: SQLDataType)((uint64_t)v11, v16);
        outlined destroy of (key: String, value: SQLDataType)((uint64_t)v14, v16);
        if ((v21 & 1) != 0)
        {
          v22 = *a4;
          if (!*a4)
          {
            __break(1u);
            return;
          }
          v23 = v11;
          v24 = v16;
          v25 = a4;
          v26 = v22 + v37 + v17;
          v27 = v24;
          outlined init with take of UUID?(v22 + v36 + v17, v35, v24);
          swift_arrayInitWithTakeFrontToBack();
          outlined init with take of UUID?(v35, v26, v27);
          v17 -= v33;
          ++v18;
          a4 = v25;
          v16 = v27;
          v11 = v23;
          v14 = v32;
          if (v34 != v18)
            continue;
        }
        goto LABEL_13;
      }
      outlined destroy of (key: String, value: SQLDataType)((uint64_t)v11, v16);
      outlined destroy of (key: String, value: SQLDataType)((uint64_t)v14, v16);
LABEL_13:
      v37 += v33;
      v36 += v33;
      if (++v34 != v29)
        continue;
      break;
    }
  }
}

void specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int64_t v18;
  int64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v33;
  BOOL v35;
  unint64_t v36;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  char v45;
  int64_t v49;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;

  v52 = a4;
  v54 = a3;
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  v6 = MEMORY[0x1E0C80A78](v53);
  v8 = (uint64_t *)((char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = MEMORY[0x1E0C80A78](v6);
  v57 = (uint64_t *)((char *)&v51 - v10);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (uint64_t *)((char *)&v51 - v12);
  MEMORY[0x1E0C80A78](v11);
  v16 = (uint64_t *)((char *)&v51 - v15);
  v17 = *(_QWORD *)(v14 + 72);
  if (!v17)
  {
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  v18 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v17 == -1)
    goto LABEL_88;
  v20 = v54 - a2;
  if (v54 - a2 == 0x8000000000000000 && v17 == -1)
    goto LABEL_89;
  v22 = v18 / v17;
  v23 = v20 / v17;
  v56 = *(_QWORD *)(v14 + 72);
  if (v18 / v17 >= v20 / v17)
  {
    v36 = v52;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v20 / v17);
    v26 = v36 + v23 * v17;
    if (v23 * v17 < 1 || a1 >= a2)
    {
      v24 = v52;
    }
    else
    {
      v55 = -v17;
      v38 = v54;
      do
      {
        v39 = v38;
        v54 = v26;
        v40 = v55;
        v41 = v26 + v55;
        v42 = v57;
        outlined init with copy of Date?(v26 + v55, (uint64_t)v57, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        v43 = a2 + v40;
        outlined init with copy of Date?(a2 + v40, (uint64_t)v8, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        if (*v42 == *v8 && v42[1] == v8[1])
          v45 = 0;
        else
          v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v38 = v39 + v55;
        outlined destroy of (key: String, value: SQLDataType)((uint64_t)v8, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        outlined destroy of (key: String, value: SQLDataType)((uint64_t)v57, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        if ((v45 & 1) != 0)
        {
          if (v39 < a2 || v38 >= a2)
          {
            swift_arrayInitWithTakeFrontToBack();
            a2 = v43;
            v26 = v54;
          }
          else
          {
            if (v39 != a2)
              swift_arrayInitWithTakeBackToFront();
            a2 = v43;
            v26 = v54;
          }
        }
        else if (v39 < v54 || v38 >= v54)
        {
          swift_arrayInitWithTakeFrontToBack();
          v26 = v41;
        }
        else
        {
          if (v39 != v54)
            swift_arrayInitWithTakeBackToFront();
          v26 = v41;
        }
      }
      while (v26 > v52 && a2 > a1);
      v24 = v52;
    }
  }
  else
  {
    v24 = v52;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, v18 / v17);
    v25 = v22 * v17;
    v26 = v24 + v22 * v17;
    if (v25 >= 1 && a2 < v54)
    {
      while (1)
      {
        outlined init with copy of Date?(a2, (uint64_t)v16, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        outlined init with copy of Date?(v24, (uint64_t)v13, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        if (*v16 == *v13 && v16[1] == v13[1])
          break;
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined destroy of (key: String, value: SQLDataType)((uint64_t)v13, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        outlined destroy of (key: String, value: SQLDataType)((uint64_t)v16, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        if ((v29 & 1) == 0)
          goto LABEL_27;
        v30 = v56;
        v31 = a2 + v56;
        if (a1 < a2 || a1 >= v31)
        {
          swift_arrayInitWithTakeFrontToBack();
LABEL_39:
          v30 = v56;
          goto LABEL_40;
        }
        if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront();
          goto LABEL_39;
        }
LABEL_40:
        a1 += v30;
        v35 = v24 >= v26 || v31 >= v54;
        a2 = v31;
        if (v35)
          goto LABEL_82;
      }
      outlined destroy of (key: String, value: SQLDataType)((uint64_t)v13, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
      outlined destroy of (key: String, value: SQLDataType)((uint64_t)v16, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
LABEL_27:
      v30 = v56;
      v33 = v24 + v56;
      if (a1 < v24 || a1 >= v33)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        if (a1 == v24)
        {
LABEL_36:
          v31 = a2;
          v24 = v33;
          goto LABEL_40;
        }
        swift_arrayInitWithTakeBackToFront();
      }
      v30 = v56;
      goto LABEL_36;
    }
  }
LABEL_82:
  v49 = v26 - v24;
  if (v56 != -1 || v49 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v24, v49 / v56);
    return;
  }
LABEL_90:
  __break(1u);
}

id Streams.StoreStream.inner.getter()
{
  id *v0;

  return *v0;
}

void Streams.StoreStream.inner.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*Streams.StoreStream.inner.modify())()
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t Streams.StoreStream.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

id Streams.StoreStream.init(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)BMStoreStream), sel_initWithPublicStream_, a1);
  *a2 = result;
  return result;
}

id Streams.StoreStream.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BMStoreStream);
  result = BMStoreStream.__allocating_init(restrictedStreamIdentifier:)(a1, a2);
  *a3 = result;
  return result;
}

id BMStoreStream.__allocating_init(restrictedStreamIdentifier:)(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v5 = (void *)MEMORY[0x193FEC534](a1, a2);
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithRestrictedStreamIdentifier_, v5);

  return v6;
}

id Streams.StoreStream.init(_:storeConfig:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  id v8;
  id result;

  v8 = objc_allocWithZone((Class)BMStoreStream);
  result = @nonobjc BMStoreStream.init(privateStreamIdentifier:storeConfig:)(a1, a2, a3);
  *a4 = result;
  return result;
}

id Streams.StoreStream.validator()()
{
  id *v0;

  return objc_msgSend(*v0, sel_validator);
}

uint64_t Streams.StoreStream.prune(predicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  void *v7;
  _QWORD *v8;
  void *v9;
  uint64_t result;
  _QWORD v11[6];

  v7 = *v3;
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = *(_QWORD *)(a3 + 16);
  v8[3] = a1;
  v8[4] = a2;
  v11[4] = partial apply for thunk for @callee_guaranteed (@guaranteed BMStoreEvent<A>?, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
  v11[5] = v8;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@guaranteed BMStoreEvent<A>?, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
  v11[3] = &block_descriptor_0;
  v9 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_pruneWithPredicateBlock_, v9);
  _Block_release(v9);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v7 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed BMStoreEvent<A>?, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t (*v5)(void *, uint64_t);
  id v6;

  v5 = *(uint64_t (**)(void *, uint64_t))(a1 + 32);
  v6 = a2;
  LOBYTE(a3) = v5(a2, a3);

  return a3 & 1;
}

id @nonobjc BMStoreStream.init(privateStreamIdentifier:storeConfig:)(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  void *v5;
  id v6;

  v5 = (void *)MEMORY[0x193FEC534]();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v3, sel_initWithPrivateStreamIdentifier_storeConfig_, v5, a3);

  return v6;
}

uint64_t sub_18D93AEF0()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed BMStoreEvent<A>?, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))() & 1;
}

uint64_t instantiation function for generic protocol witness table for Streams.StoreStream<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x193FED7A0](&protocol conformance descriptor for Streams.StoreStream<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for Streams.StoreStream<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x193FED7A0](&protocol conformance descriptor for Streams.StoreStream<A>);
  result = MEMORY[0x193FED7A0](&protocol conformance descriptor for Streams.StoreStream<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata instantiation function for Streams.StoreStream()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for Streams.StoreStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Streams.StoreStream);
}

uint64_t static BMPoirotSchematizerShim.searchValue(in:withFieldPath:typeRawValue:error:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  return static BMPoirotSchematizerShim.searchValue(in:withFieldNumber:typeRawValue:error:)(a1, a2, a3, a4, MEMORY[0x1E0D7F458], a5);
}

uint64_t static BMPoirotSchematizerShim.searchValue(in:withFieldNumber:typeRawValue:error:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, _OWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyValue?);
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_114();
  v14 = v13 - v12;
  v15 = OUTLINED_FUNCTION_4_11();
  MEMORY[0x1E0C80A78](v15);
  OUTLINED_FUNCTION_114();
  v18 = v17 - v16;
  static BMPoirotSchematizerShim.bmTypeToPoirotType(typeRawValue:)(a4, v17 - v16);
  a5(a1, a2, a3, v18);
  static BMPoirotSchematizerShim.poirotValueToObjcValue(value:)(v14, a6);
  outlined destroy of (key: String, value: StorableValue)(v14, (uint64_t *)&demangling cache variable for type metadata for AnyValue?);
  return OUTLINED_FUNCTION_1_15();
}

uint64_t (*BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator.iterator.modify())()
{
  return destructiveProjectEnumData for StorableValue;
}

id BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator.init(iterator:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  objc_super v9;

  v3 = (uint64_t)v1
     + OBJC_IVAR____TtCC12BiomeStreams23BMPoirotSchematizerShimP33_6AF5E9B2F4D56B14EB8E6E9336EA174F31BMPoirotRepeatedFieldEnumerator_iterator;
  v4 = type metadata accessor for Schematizer.RepeatableFieldIterator();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  v5 = v1;
  outlined destroy of (key: String, value: StorableValue)(v3, &demangling cache variable for type metadata for Schematizer.RepeatableFieldIterator?);
  v6 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, a1, v4);
  __swift_storeEnumTagSinglePayload(v3, 0, 1, v4);

  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator();
  v7 = objc_msgSendSuper2(&v9, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v4);
  return v7;
}

uint64_t BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator.nextObject()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[32];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyValue?);
  MEMORY[0x1E0C80A78](v2);
  v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator.iterator.modify();
  v7 = v6;
  v8 = type metadata accessor for Schematizer.RepeatableFieldIterator();
  if (__swift_getEnumTagSinglePayload(v7, 1, v8))
  {
    ((void (*)(_BYTE *, _QWORD))v5)(v12, 0);
    v9 = type metadata accessor for AnyValue();
    __swift_storeEnumTagSinglePayload((uint64_t)v4, 1, 1, v9);
  }
  else
  {
    Schematizer.RepeatableFieldIterator.next()();
    ((void (*)(_BYTE *, _QWORD))v5)(v12, 0);
  }
  type metadata accessor for BMPoirotSchematizerShim();
  static BMPoirotSchematizerShim.poirotValueToObjcValue(value:)((uint64_t)v4, a1);
  return outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for AnyValue?);
}

void BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator.__deallocating_deinit()
{
  return BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator.__deallocating_deinit(0, type metadata accessor for BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator);
}

id static BMPoirotSchematizerShim.searchValues(in:withFieldNumber:typeRawValue:error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = a5;
  v6 = type metadata accessor for Schematizer.RepeatableFieldIterator();
  v20 = *(_QWORD *)(v6 - 8);
  v21 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v20 - v10;
  v12 = OUTLINED_FUNCTION_4_11();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_114();
  static BMPoirotSchematizerShim.bmTypeToPoirotType(typeRawValue:)(a4, v14 - v13);
  static Schematizer.makeRepeatableFieldIterator(in:withFieldNumber:type:)();
  v16 = v20;
  v15 = v21;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v9, v11, v21);
  v17 = objc_allocWithZone((Class)type metadata accessor for BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator());
  v18 = BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator.init(iterator:)((uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v15);
  OUTLINED_FUNCTION_0_22();
  return v18;
}

uint64_t type metadata accessor for BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator()
{
  uint64_t result;

  result = type metadata singleton initialization cache for BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator;
  if (!type metadata singleton initialization cache for BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator)
    return swift_getSingletonMetadata();
  return result;
}

id BMPoirotSchematizerShim.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id BMPoirotSchematizerShim.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BMPoirotSchematizerShim();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for BMPoirotSchematizerShim()
{
  return objc_opt_self();
}

id BMPoirotSchematizerShim.__deallocating_deinit(uint64_t a1)
{
  return BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator.__deallocating_deinit(a1, type metadata accessor for BMPoirotSchematizerShim);
}

id BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t ObjC metadata update function for BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator()
{
  return type metadata accessor for BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator();
}

void type metadata completion function for BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator()
{
  unint64_t v0;

  type metadata accessor for Schematizer.RepeatableFieldIterator?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void type metadata accessor for Schematizer.RepeatableFieldIterator?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Schematizer.RepeatableFieldIterator?)
  {
    type metadata accessor for Schematizer.RepeatableFieldIterator();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Schematizer.RepeatableFieldIterator?);
  }
}

unint64_t type metadata accessor for NSError()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSError;
  if (!lazy cache variable for type metadata for NSError)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSError);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12BiomeStreams26MaterializedViewDefinitionVG_SSs5NeverOTg504_s12d80Streams21BMDatabaseInitializerC21initializeSQLDatabase10identifierSbSS_tFZSSAA26fgH55Vcfu1_33_2af4e89e74c5fb7e083bd0f7ae20babdAGSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 72);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      v4 += 6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t static BMDatabaseInitializer.initializeSQLDatabase(identifier:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void *v31;
  uint64_t v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  Swift::String v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;

  v4 = type metadata accessor for URL.DirectoryHint();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_114();
  v8 = (v7 - v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_114();
  v12 = v11 - v10;
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v74 - v18;
  if (static DaemonLibrary.root)
  {
    v81 = v5;
    v20 = (*((uint64_t (**)(uint64_t, unint64_t))off_1EE082870 + 2))(a1, a2);
    if (!v20)
    {
      if (one-time initialization token for compute != -1)
        swift_once();
      v37 = OUTLINED_FUNCTION_35_4();
      __swift_project_value_buffer(v37, (uint64_t)static Logging.compute);
      swift_bridgeObjectRetain_n();
      Logger.logObject.getter();
      v38 = OUTLINED_FUNCTION_36_2();
      if (OUTLINED_FUNCTION_46_4(v38))
      {
        v39 = (_DWORD *)OUTLINED_FUNCTION_7_0();
        v84 = OUTLINED_FUNCTION_7_0();
        *v39 = 136315138;
        swift_bridgeObjectRetain();
        v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v84);
        OUTLINED_FUNCTION_18_4(v40);
        swift_bridgeObjectRelease_n();
        OUTLINED_FUNCTION_37_3(&dword_18D810000, v41, v42, "Error initializing database: could not find %s in IntelligencePlatformLibrary");
        OUTLINED_FUNCTION_42_4();
        OUTLINED_FUNCTION_14();
      }

      swift_bridgeObjectRelease_n();
      return 0;
    }
    v77 = v21;
    v78 = v20;
    v79 = v17;
    v22 = objc_allocWithZone(MEMORY[0x1E0D01D30]);
    OUTLINED_FUNCTION_44_3();
    v23 = @nonobjc BMResourceSpecifier.init(type:name:descriptors:)(3, a1, a2);
    v24 = objc_msgSend((id)objc_opt_self(), sel_pathForResource_, v23);
    if (!v24)
    {
      if (one-time initialization token for compute != -1)
        swift_once();
      v43 = OUTLINED_FUNCTION_35_4();
      __swift_project_value_buffer(v43, (uint64_t)static Logging.compute);
      swift_bridgeObjectRetain_n();
      Logger.logObject.getter();
      v44 = OUTLINED_FUNCTION_36_2();
      if (OUTLINED_FUNCTION_46_4(v44))
      {
        v45 = (_DWORD *)OUTLINED_FUNCTION_7_0();
        v84 = OUTLINED_FUNCTION_7_0();
        *v45 = 136315138;
        swift_bridgeObjectRetain();
        v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v84);
        OUTLINED_FUNCTION_18_4(v46);
        swift_bridgeObjectRelease_n();
        OUTLINED_FUNCTION_37_3(&dword_18D810000, v47, v48, "Error initializing database: could not find determine database directory path for %s");
        OUTLINED_FUNCTION_42_4();
        OUTLINED_FUNCTION_14();
      }

      swift_bridgeObjectRelease_n();
      return 0;
    }
    v25 = v24;
    v75 = v14;
    v76 = v23;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v80 = v19;

    __swift_storeEnumTagSinglePayload(v12, 1, 1, v13);
    v74 = v13;
    OUTLINED_FUNCTION_40_3();
    v26 = (uint64_t)v80;
    URL.init(filePath:directoryHint:relativeTo:)();
    v84 = 0x336574696C71732ELL;
    v85 = 0xE800000000000000;
    v82 = a1;
    v83 = a2;
    OUTLINED_FUNCTION_44_3();
    v82 = String.init<A>(_:)();
    v83 = v27;
    String.append<A>(contentsOf:)();
    v84 = v82;
    v85 = v83;
    OUTLINED_FUNCTION_40_3();
    lazy protocol witness table accessor for type String and conformance String();
    v28 = (uint64_t)v79;
    URL.appending<A>(path:directoryHint:)();
    (*(void (**)(NSObject *, uint64_t))(v81 + 8))(v8, v4);
    swift_bridgeObjectRelease();
    v29 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v30 = URL.path.getter();
    v31 = (void *)MEMORY[0x193FEC534](v30);
    OUTLINED_FUNCTION_24();
    LOBYTE(v25) = objc_msgSend(v29, sel_fileExistsAtPath_, v31);

    if ((v25 & 1) != 0)
    {
      OUTLINED_FUNCTION_50_3();
      OUTLINED_FUNCTION_16_3(v28);
      OUTLINED_FUNCTION_16_3(v26);
      return 1;
    }
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v51 = v50;
    v52 = v77;
    v53 = v78;
    v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 16))(v78, v77);
    v55 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12BiomeStreams26MaterializedViewDefinitionVG_SSs5NeverOTg504_s12d80Streams21BMDatabaseInitializerC21initializeSQLDatabase10identifierSbSS_tFZSSAA26fgH55Vcfu1_33_2af4e89e74c5fb7e083bd0f7ae20babdAGSSTf3nnnpk_nTf1cn_n(v54);
    OUTLINED_FUNCTION_24();
    v84 = v55;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v56 = BidirectionalCollection<>.joined(separator:)();
    v58 = v57;
    swift_bridgeObjectRelease();
    v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v52 + 8) + 8))(v53);
    v61 = v60;
    v62 = (void *)MEMORY[0x193FEC534](v49, v51);
    type metadata accessor for SQLDatabaseHandle();
    swift_allocObject();
    v63 = SQLDatabaseHandle.init(identifier:useCase:readOnly:)(v59, v61, v62, 0);
    swift_bridgeObjectRelease();
    v84 = v63;
    v64._countAndFlagsBits = v56;
    v64._object = v58;
    SQLDatabase.execute(statement:)(v64);
    v66 = (uint64_t)v79;
    if (!v65)
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_50_3();
      OUTLINED_FUNCTION_16_3(v66);
      OUTLINED_FUNCTION_16_3((uint64_t)v80);
      swift_release();
      return 1;
    }
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_50_3();
    v8 = *(NSObject **)(v75 + 8);
    OUTLINED_FUNCTION_16_3(v66);
    OUTLINED_FUNCTION_16_3((uint64_t)v80);
    swift_release();
    if (one-time initialization token for compute != -1)
      swift_once();
    v67 = OUTLINED_FUNCTION_35_4();
    __swift_project_value_buffer(v67, (uint64_t)static Logging.compute);
    v68 = v65;
    v69 = v65;
    Logger.logObject.getter();
    v70 = OUTLINED_FUNCTION_36_2();
    if (os_log_type_enabled(v8, v70))
    {
      v71 = (uint8_t *)OUTLINED_FUNCTION_7_0();
      v84 = OUTLINED_FUNCTION_7_0();
      *(_DWORD *)v71 = 136315138;
      swift_getErrorValue();
      v72 = Error.localizedDescription.getter();
      v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_24();
      OUTLINED_FUNCTION_3_0();
      OUTLINED_FUNCTION_3_0();
      _os_log_impl(&dword_18D810000, v8, v70, "Error initializing database: %s", v71, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_14();
    }
    OUTLINED_FUNCTION_3_0();
    OUTLINED_FUNCTION_3_0();
    OUTLINED_FUNCTION_3_0();
  }
  else
  {
    if (one-time initialization token for compute != -1)
      swift_once();
    v33 = OUTLINED_FUNCTION_35_4();
    __swift_project_value_buffer(v33, (uint64_t)static Logging.compute);
    Logger.logObject.getter();
    v34 = OUTLINED_FUNCTION_36_2();
    if (OUTLINED_FUNCTION_47_4(v34))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_0() = 0;
      OUTLINED_FUNCTION_38_4(&dword_18D810000, v35, v36, "Error initializing database: could not find IntelligencePlatformLibrary");
      OUTLINED_FUNCTION_14();
    }
  }

  return 0;
}

Swift::Int one-time initialization function for streamsSubscribedByNonLibraryViews()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18DC0D540;
  *(_QWORD *)(inited + 40) = 0xEA0000000000746ELL;
  *(_QWORD *)(inited + 48) = 0xD000000000000013;
  *(_QWORD *)(inited + 56) = 0x800000018DCC3720;
  *(_QWORD *)(inited + 64) = 0xD000000000000019;
  *(_QWORD *)(inited + 72) = 0x800000018DCC3740;
  *(_QWORD *)(inited + 80) = 0xD000000000000014;
  *(_QWORD *)(inited + 88) = 0x800000018DCC3760;
  *(_QWORD *)(inited + 96) = 0xD000000000000021;
  *(_QWORD *)(inited + 104) = 0x800000018DCC3780;
  *(_QWORD *)(inited + 112) = 0xD000000000000027;
  *(_QWORD *)(inited + 120) = 0x800000018DCC37B0;
  *(_QWORD *)(inited + 128) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 136) = 0x800000018DCC37E0;
  *(_QWORD *)(inited + 144) = 0xD00000000000001BLL;
  *(_QWORD *)(inited + 152) = 0x800000018DCC3800;
  *(_QWORD *)(inited + 160) = 0xD000000000000011;
  *(_QWORD *)(inited + 168) = 0x800000018DCC3820;
  *(_QWORD *)(inited + 176) = 0x412E6E6F69746F4DLL;
  *(_QWORD *)(inited + 184) = 0xEF79746976697463;
  *(_QWORD *)(inited + 192) = 0xD000000000000012;
  *(_QWORD *)(inited + 200) = 0x800000018DCC3840;
  *(_QWORD *)(inited + 208) = 0xD000000000000026;
  *(_QWORD *)(inited + 216) = 0x800000018DCC3860;
  *(_QWORD *)(inited + 224) = 0xD000000000000023;
  *(_QWORD *)(inited + 232) = 0x800000018DCC3890;
  *(_QWORD *)(inited + 240) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 248) = 0x800000018DCC38C0;
  *(_QWORD *)(inited + 256) = 0xD000000000000021;
  *(_QWORD *)(inited + 264) = 0x800000018DCC38E0;
  *(_QWORD *)(inited + 272) = 0xD00000000000001DLL;
  *(_QWORD *)(inited + 280) = 0x800000018DCC3910;
  *(_QWORD *)(inited + 288) = 0xD00000000000001BLL;
  *(_QWORD *)(inited + 296) = 0x800000018DCC3930;
  *(_QWORD *)(inited + 304) = 0x6172542E65676153;
  *(_QWORD *)(inited + 312) = 0xEF7470697263736ELL;
  *(_QWORD *)(inited + 320) = 0xD000000000000016;
  *(_QWORD *)(inited + 328) = 0x800000018DCC3950;
  *(_QWORD *)(inited + 32) = 0x65746E492E707041;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  v1 = static _SetStorage.allocate(capacity:)();
  v2 = 0;
  v3 = v1 + 56;
  while (1)
  {
    v4 = (uint64_t *)(inited + 32 + 16 * v2);
    v6 = *v4;
    v5 = v4[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v8 = -1 << *(_BYTE *)(v1 + 32);
    v9 = result & ~v8;
    v10 = v9 >> 6;
    v11 = *(_QWORD *)(v3 + 8 * (v9 >> 6));
    v12 = 1 << v9;
    if (((1 << v9) & v11) == 0)
      break;
    v13 = *(_QWORD *)(v1 + 48);
    v14 = (_QWORD *)(v13 + 16 * v9);
    if (*v14 != v6 || v14[1] != v5)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        v16 = ~v8;
        while (1)
        {
          v9 = (v9 + 1) & v16;
          v10 = v9 >> 6;
          v11 = *(_QWORD *)(v3 + 8 * (v9 >> 6));
          v12 = 1 << v9;
          if ((v11 & (1 << v9)) == 0)
            goto LABEL_17;
          v17 = (_QWORD *)(v13 + 16 * v9);
          if (*v17 != v6 || v17[1] != v5)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
              continue;
          }
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_19:
    if (++v2 == 19)
    {
      swift_setDeallocating();
      result = specialized _ContiguousArrayStorage.__deallocating_deinit();
      static BMDatabaseInitializer.streamsSubscribedByNonLibraryViews = v1;
      return result;
    }
  }
LABEL_17:
  *(_QWORD *)(v3 + 8 * v10) = v12 | v11;
  v19 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v9);
  *v19 = v6;
  v19[1] = v5;
  v20 = *(_QWORD *)(v1 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (!v21)
  {
    *(_QWORD *)(v1 + 16) = v22;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t static BMDatabaseInitializer.viewSubscribedStreams()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t (**v31)(uint64_t, void *);
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  int64_t v48;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (**v71)(uint64_t, void *);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[5];
  unint64_t v76[6];

  if (static DaemonLibrary.root)
  {
    v71 = (uint64_t (**)(uint64_t, void *))off_1EE082870;
    v72 = static DaemonLibrary.root;
    v1 = (*((uint64_t (**)(void))off_1EE082870 + 3))();
    specialized _NativeDictionary.makeIterator()(v1, v75);
    v2 = v75[0];
    v3 = v75[1];
    v4 = v75[3];
    v5 = v75[4];
    v6 = (unint64_t)(v75[2] + 64) >> 6;
    swift_bridgeObjectRetain();
    v7 = MEMORY[0x1E0DEE9D8];
    if (!v5)
      goto LABEL_4;
LABEL_3:
    OUTLINED_FUNCTION_66_3();
    v9 = v8 | (v4 << 6);
    while (1)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v9);
      v15 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v7 + 16);
      v17 = v16 + v15;
      if (__OFADD__(v16, v15))
      {
        __break(1u);
LABEL_98:
        __break(1u);
        goto LABEL_99;
      }
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || v17 > *(_QWORD *)(v7 + 24) >> 1)
      {
        if (v16 <= v17)
          v19 = v16 + v15;
        else
          v19 = v16;
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v19, 1, v7);
        v7 = v20;
      }
      if (*(_QWORD *)(v14 + 16))
      {
        v21 = *(_QWORD *)(v7 + 16);
        if ((*(_QWORD *)(v7 + 24) >> 1) - v21 < v15)
          goto LABEL_101;
        v22 = v7 + 16 * v21 + 32;
        if (v14 + 32 < v22 + 16 * v15 && v22 < v14 + 32 + 16 * v15)
        {
LABEL_108:
          OUTLINED_FUNCTION_0_19();
          result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        swift_arrayInitWithCopy();
        if (v15)
        {
          v24 = *(_QWORD *)(v7 + 16);
          v25 = __OFADD__(v24, v15);
          v26 = v24 + v15;
          if (v25)
            goto LABEL_103;
          *(_QWORD *)(v7 + 16) = v26;
        }
      }
      else if (v15)
      {
        goto LABEL_98;
      }
      swift_bridgeObjectRelease();
      if (v5)
        goto LABEL_3;
LABEL_4:
      v10 = v4 + 1;
      if (__OFADD__(v4, 1))
        goto LABEL_104;
      if (v10 >= v6)
        break;
      if (!*(_QWORD *)(v3 + 8 * v10))
      {
        if (v4 + 2 >= v6)
          break;
        if (!*(_QWORD *)(v3 + 8 * (v4 + 2)))
        {
          if (v4 + 3 >= v6)
            break;
          if (!*(_QWORD *)(v3 + 8 * (v4 + 3)))
          {
            if (v4 + 4 >= v6)
              break;
            if (!*(_QWORD *)(v3 + 8 * (v4 + 4)))
            {
              if (v4 + 5 >= v6)
                break;
              if (!*(_QWORD *)(v3 + 8 * (v4 + 5)))
              {
                if (v4 + 6 >= v6)
                  break;
                if (!*(_QWORD *)(v3 + 8 * (v4 + 6)))
                {
                  v11 = v4 + 7;
                  while (v11 < v6)
                  {
                    if (*(_QWORD *)(v3 + 8 * v11++))
                      goto LABEL_20;
                  }
                  break;
                }
              }
            }
          }
        }
      }
LABEL_20:
      OUTLINED_FUNCTION_43_1();
      v4 = v13;
    }
    swift_bridgeObjectRelease();
    swift_release();
    v27 = Set.init(minimumCapacity:)();
    v73 = v27;
    v28 = *(_QWORD *)(v7 + 16);
    if (v28)
    {
      v29 = (unint64_t *)(v7 + 40);
      v31 = v71;
      v30 = v72;
      do
      {
        v32 = *(v29 - 1);
        v33 = *v29;
        OUTLINED_FUNCTION_44_3();
        specialized Set._Variant.insert(_:)(v76, v32, v33);
        swift_bridgeObjectRelease();
        v29 += 2;
        --v28;
      }
      while (v28);
      OUTLINED_FUNCTION_106();
      v70 = v73;
    }
    else
    {
      v70 = v27;
      OUTLINED_FUNCTION_106();
      v31 = v71;
      v30 = v72;
    }
    v39 = v31[4](v30, v31);
    specialized _NativeDictionary.makeIterator()(v39, v76);
    v40 = v76[0];
    v41 = v76[1];
    v42 = v76[3];
    v5 = v76[4];
    v43 = (v76[2] + 64) >> 6;
    swift_bridgeObjectRetain();
    v44 = MEMORY[0x1E0DEE9D8];
    if (!v5)
      goto LABEL_53;
LABEL_52:
    OUTLINED_FUNCTION_66_3();
    v46 = v45 | (v42 << 6);
    while (1)
    {
      v51 = *(_QWORD *)(*(_QWORD *)(v40 + 56) + 8 * v46);
      v52 = *(_QWORD *)(v51 + 16);
      v53 = *(_QWORD *)(v44 + 16);
      v54 = v53 + v52;
      if (__OFADD__(v53, v52))
        break;
      OUTLINED_FUNCTION_44_3();
      v55 = swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)v55 || v54 > *(_QWORD *)(v44 + 24) >> 1)
      {
        if (v53 <= v54)
          v56 = v53 + v52;
        else
          v56 = v53;
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v55, v56, 1, v44);
        v44 = v57;
      }
      if (*(_QWORD *)(v51 + 16))
      {
        v58 = *(_QWORD *)(v44 + 16);
        if ((*(_QWORD *)(v44 + 24) >> 1) - v58 < v52)
          goto LABEL_102;
        v59 = v44 + 16 * v58 + 32;
        if (v51 + 32 < v59 + 16 * v52 && v59 < v51 + 32 + 16 * v52)
          goto LABEL_108;
        swift_arrayInitWithCopy();
        if (v52)
        {
          v61 = *(_QWORD *)(v44 + 16);
          v25 = __OFADD__(v61, v52);
          v62 = v61 + v52;
          if (v25)
            goto LABEL_105;
          *(_QWORD *)(v44 + 16) = v62;
        }
      }
      else if (v52)
      {
        goto LABEL_100;
      }
      swift_bridgeObjectRelease();
      if (v5)
        goto LABEL_52;
LABEL_53:
      v47 = v42 + 1;
      if (__OFADD__(v42, 1))
        goto LABEL_106;
      if (v47 >= v43)
        goto LABEL_90;
      if (!*(_QWORD *)(v41 + 8 * v47))
      {
        if ((uint64_t)(v42 + 2) >= v43)
          goto LABEL_90;
        if (!*(_QWORD *)(v41 + 8 * (v42 + 2)))
        {
          if ((uint64_t)(v42 + 3) >= v43)
            goto LABEL_90;
          if (!*(_QWORD *)(v41 + 8 * (v42 + 3)))
          {
            if ((uint64_t)(v42 + 4) >= v43)
              goto LABEL_90;
            if (!*(_QWORD *)(v41 + 8 * (v42 + 4)))
            {
              if ((uint64_t)(v42 + 5) >= v43)
                goto LABEL_90;
              if (!*(_QWORD *)(v41 + 8 * (v42 + 5)))
              {
                if ((uint64_t)(v42 + 6) >= v43)
                  goto LABEL_90;
                if (!*(_QWORD *)(v41 + 8 * (v42 + 6)))
                {
                  v48 = v42 + 7;
                  while (v48 < v43)
                  {
                    if (*(_QWORD *)(v41 + 8 * v48++))
                      goto LABEL_69;
                  }
LABEL_90:
                  swift_bridgeObjectRelease();
                  swift_release();
                  v63 = Set.init(minimumCapacity:)();
                  v74 = v63;
                  v64 = *(_QWORD *)(v44 + 16);
                  if (v64)
                  {
                    v65 = (unint64_t *)(v44 + 40);
                    do
                    {
                      v66 = *(v65 - 1);
                      v67 = *v65;
                      swift_bridgeObjectRetain();
                      specialized Set._Variant.insert(_:)((unint64_t *)&v73, v66, v67);
                      swift_bridgeObjectRelease();
                      v65 += 2;
                      --v64;
                    }
                    while (v64);
                    swift_bridgeObjectRelease();
                    v68 = v74;
                  }
                  else
                  {
                    v68 = v63;
                    swift_bridgeObjectRelease();
                  }
                  v5 = specialized Set.union<A>(_:)(v68, v70);
                  if (one-time initialization token for streamsSubscribedByNonLibraryViews != -1)
                    goto LABEL_107;
                  goto LABEL_96;
                }
              }
            }
          }
        }
      }
LABEL_69:
      OUTLINED_FUNCTION_43_1();
      v42 = v50;
    }
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    swift_once();
LABEL_96:
    v69 = swift_bridgeObjectRetain();
    return specialized Set.union<A>(_:)(v69, v5);
  }
  else
  {
    if (one-time initialization token for compute != -1)
      swift_once();
    v34 = OUTLINED_FUNCTION_35_4();
    __swift_project_value_buffer(v34, (uint64_t)static Logging.compute);
    Logger.logObject.getter();
    v35 = OUTLINED_FUNCTION_36_2();
    if (OUTLINED_FUNCTION_47_4(v35))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_0() = 0;
      OUTLINED_FUNCTION_38_4(&dword_18D810000, v36, v37, "viewSubscribedStreams: Couldn't find IntelligencePlatformLibrary");
      OUTLINED_FUNCTION_14();
    }

    return MEMORY[0x1E0DEE9E8];
  }
}

uint64_t specialized Set.union<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = result;
  v3 = 0;
  v18 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v9 | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    v14 = (unint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v15, v16);
    result = swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_4;
LABEL_5:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_20:
    v7 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

id BMDatabaseInitializer.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id BMDatabaseInitializer.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BMDatabaseInitializer();
  return objc_msgSendSuper2(&v2, sel_init);
}

id BMDatabaseInitializer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BMDatabaseInitializer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id @nonobjc BMResourceSpecifier.init(type:name:descriptors:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  Class isa;
  id v7;

  v5 = (void *)MEMORY[0x193FEC534](a2, a3);
  swift_bridgeObjectRelease();
  type metadata accessor for BMResourceDescriptor();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v3, sel_initWithType_name_descriptors_, a1, v5, isa);

  return v7;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (unint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

unint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(unint64_t result, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t i;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int64_t v46;
  unint64_t v47;
  unint64_t k;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int64_t v62;
  unint64_t v63;
  unint64_t j;
  int64_t v65;
  unint64_t v66;
  int64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  BOOL v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  BOOL v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t *v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  int64_t v96;

  v5 = v4;
  v8 = result;
  v9 = *v4;
  v10 = *(_QWORD *)(*v4 + 16);
  v11 = *(_QWORD *)(*v4 + 24);
  if (v11 > v10 && (a4 & 1) != 0)
  {
    v12 = *v4;
    goto LABEL_121;
  }
  if ((a4 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
    v13 = static _SetStorage.resize(original:capacity:move:)();
    v12 = v13;
    if (*(_QWORD *)(v9 + 16))
    {
      v91 = v8;
      v14 = 1 << *(_BYTE *)(v9 + 32);
      v93 = a2;
      v95 = (_QWORD *)(v9 + 56);
      if (v14 < 64)
        v15 = ~(-1 << v14);
      else
        v15 = -1;
      v16 = v15 & *(_QWORD *)(v9 + 56);
      v17 = (unint64_t)(v14 + 63) >> 6;
      v18 = v13 + 56;
      result = swift_retain();
      v19 = 0;
      if (!v16)
        goto LABEL_11;
LABEL_10:
      v20 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      for (i = v20 | (v19 << 6); ; i = __clz(__rbit64(v23)) + (v19 << 6))
      {
        v25 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * i);
        v26 = *v25;
        v27 = v25[1];
        Hasher.init(_seed:)();
        String.hash(into:)();
        result = Hasher._finalize()();
        v28 = -1 << *(_BYTE *)(v12 + 32);
        v29 = result & ~v28;
        v30 = v29 >> 6;
        if (((-1 << v29) & ~*(_QWORD *)(v18 + 8 * (v29 >> 6))) == 0)
          break;
        v31 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v18 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
LABEL_36:
        *(_QWORD *)(v18 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
        v36 = (_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v31);
        *v36 = v26;
        v36[1] = v27;
        ++*(_QWORD *)(v12 + 16);
        if (v16)
          goto LABEL_10;
LABEL_11:
        v22 = v19 + 1;
        if (__OFADD__(v19, 1))
          goto LABEL_126;
        if (v22 >= v17)
        {
LABEL_68:
          swift_release();
          v55 = 1 << *(_BYTE *)(v9 + 32);
          v8 = v91;
          a2 = v93;
          v5 = v4;
          if (v55 > 63)
            specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v55 + 63) >> 6, v95);
          else
            *v95 = -1 << v55;
          *(_QWORD *)(v9 + 16) = 0;
          goto LABEL_106;
        }
        v23 = v95[v22];
        ++v19;
        if (!v23)
        {
          v19 = v22 + 1;
          if (v22 + 1 >= v17)
            goto LABEL_68;
          v23 = v95[v19];
          if (!v23)
          {
            v19 = v22 + 2;
            if (v22 + 2 >= v17)
              goto LABEL_68;
            v23 = v95[v19];
            if (!v23)
            {
              v19 = v22 + 3;
              if (v22 + 3 >= v17)
                goto LABEL_68;
              v23 = v95[v19];
              if (!v23)
              {
                v24 = v22 + 4;
                if (v24 >= v17)
                  goto LABEL_68;
                v23 = v95[v24];
                if (!v23)
                {
                  while (1)
                  {
                    v19 = v24 + 1;
                    if (__OFADD__(v24, 1))
                      goto LABEL_130;
                    if (v19 >= v17)
                      goto LABEL_68;
                    v23 = v95[v19];
                    ++v24;
                    if (v23)
                      goto LABEL_26;
                  }
                }
                v19 = v24;
              }
            }
          }
        }
LABEL_26:
        v16 = (v23 - 1) & v23;
      }
      v32 = 0;
      v33 = (unint64_t)(63 - v28) >> 6;
      while (++v30 != v33 || (v32 & 1) == 0)
      {
        v34 = v30 == v33;
        if (v30 == v33)
          v30 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v18 + 8 * v30);
        if (v35 != -1)
        {
          v31 = __clz(__rbit64(~v35)) + (v30 << 6);
          goto LABEL_36;
        }
      }
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }
    goto LABEL_106;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  if (v11 <= v10)
  {
    v56 = static _SetStorage.resize(original:capacity:move:)();
    v12 = v56;
    if (*(_QWORD *)(v9 + 16))
    {
      v92 = v8;
      v57 = 1 << *(_BYTE *)(v9 + 32);
      v58 = v9 + 56;
      if (v57 < 64)
        v59 = ~(-1 << v57);
      else
        v59 = -1;
      v60 = v59 & *(_QWORD *)(v9 + 56);
      v94 = a2;
      v96 = (unint64_t)(v57 + 63) >> 6;
      v61 = v56 + 56;
      result = swift_retain();
      v62 = 0;
      if (!v60)
        goto LABEL_76;
LABEL_75:
      v63 = __clz(__rbit64(v60));
      v60 &= v60 - 1;
      for (j = v63 | (v62 << 6); ; j = __clz(__rbit64(v66)) + (v62 << 6))
      {
        v68 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * j);
        v69 = *v68;
        v70 = v68[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        result = Hasher._finalize()();
        v71 = -1 << *(_BYTE *)(v12 + 32);
        v72 = result & ~v71;
        v73 = v72 >> 6;
        if (((-1 << v72) & ~*(_QWORD *)(v61 + 8 * (v72 >> 6))) != 0)
        {
          v74 = __clz(__rbit64((-1 << v72) & ~*(_QWORD *)(v61 + 8 * (v72 >> 6)))) | v72 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v75 = 0;
          v76 = (unint64_t)(63 - v71) >> 6;
          do
          {
            if (++v73 == v76 && (v75 & 1) != 0)
              goto LABEL_125;
            v77 = v73 == v76;
            if (v73 == v76)
              v73 = 0;
            v75 |= v77;
            v78 = *(_QWORD *)(v61 + 8 * v73);
          }
          while (v78 == -1);
          v74 = __clz(__rbit64(~v78)) + (v73 << 6);
        }
        *(_QWORD *)(v61 + ((v74 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v74;
        v79 = (_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v74);
        *v79 = v69;
        v79[1] = v70;
        ++*(_QWORD *)(v12 + 16);
        if (v60)
          goto LABEL_75;
LABEL_76:
        v65 = v62 + 1;
        if (__OFADD__(v62, 1))
          goto LABEL_128;
        if (v65 >= v96)
          goto LABEL_123;
        v66 = *(_QWORD *)(v58 + 8 * v65);
        ++v62;
        if (!v66)
        {
          v62 = v65 + 1;
          if (v65 + 1 >= v96)
            goto LABEL_123;
          v66 = *(_QWORD *)(v58 + 8 * v62);
          if (!v66)
          {
            v62 = v65 + 2;
            if (v65 + 2 >= v96)
              goto LABEL_123;
            v66 = *(_QWORD *)(v58 + 8 * v62);
            if (!v66)
            {
              v62 = v65 + 3;
              if (v65 + 3 >= v96)
                goto LABEL_123;
              v66 = *(_QWORD *)(v58 + 8 * v62);
              if (!v66)
              {
                v67 = v65 + 4;
                if (v67 >= v96)
                  goto LABEL_123;
                v66 = *(_QWORD *)(v58 + 8 * v67);
                if (!v66)
                {
                  while (1)
                  {
                    v62 = v67 + 1;
                    if (__OFADD__(v67, 1))
                      goto LABEL_132;
                    if (v62 >= v96)
                      break;
                    v66 = *(_QWORD *)(v58 + 8 * v62);
                    ++v67;
                    if (v66)
                      goto LABEL_91;
                  }
LABEL_123:
                  swift_release_n();
                  v8 = v92;
                  a2 = v94;
                  v5 = v4;
LABEL_107:
                  *v5 = v12;
                  Hasher.init(_seed:)();
                  String.hash(into:)();
                  result = Hasher._finalize()();
                  v80 = -1 << *(_BYTE *)(v12 + 32);
                  a3 = result & ~v80;
                  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
                  {
                    v81 = *(_QWORD *)(v12 + 48);
                    v82 = (_QWORD *)(v81 + 16 * a3);
                    v83 = *v82 == v8 && v82[1] == a2;
                    if (v83 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                    {
LABEL_120:
                      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
                    }
                    else
                    {
                      v84 = ~v80;
                      while (1)
                      {
                        a3 = (a3 + 1) & v84;
                        if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
                          break;
                        v85 = (_QWORD *)(v81 + 16 * a3);
                        if (*v85 != v8 || v85[1] != a2)
                        {
                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if ((result & 1) == 0)
                            continue;
                        }
                        goto LABEL_120;
                      }
                    }
                  }
LABEL_121:
                  *(_QWORD *)(v12 + 8 * (a3 >> 6) + 56) |= 1 << a3;
                  v87 = (unint64_t *)(*(_QWORD *)(v12 + 48) + 16 * a3);
                  *v87 = v8;
                  v87[1] = a2;
                  v88 = *(_QWORD *)(v12 + 16);
                  v89 = __OFADD__(v88, 1);
                  v90 = v88 + 1;
                  if (!v89)
                  {
                    *(_QWORD *)(v12 + 16) = v90;
                    return result;
                  }
LABEL_129:
                  __break(1u);
LABEL_130:
                  __break(1u);
                  goto LABEL_131;
                }
                v62 = v67;
              }
            }
          }
        }
LABEL_91:
        v60 = (v66 - 1) & v66;
      }
    }
LABEL_106:
    swift_release();
    goto LABEL_107;
  }
  v37 = static _SetStorage.copy(original:)();
  v12 = v37;
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_103:
    result = swift_release();
    *v5 = v12;
    goto LABEL_121;
  }
  result = v37 + 56;
  v38 = v9 + 56;
  v39 = (unint64_t)((1 << *(_BYTE *)(v12 + 32)) + 63) >> 6;
  if (v12 != v9 || result >= v9 + 56 + 8 * v39)
    result = (unint64_t)memmove((void *)result, (const void *)(v9 + 56), 8 * v39);
  v41 = 0;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v9 + 16);
  v42 = 1 << *(_BYTE *)(v9 + 32);
  v43 = *(_QWORD *)(v9 + 56);
  v44 = -1;
  if (v42 < 64)
    v44 = ~(-1 << v42);
  v45 = v44 & v43;
  v46 = (unint64_t)(v42 + 63) >> 6;
  if ((v44 & v43) == 0)
    goto LABEL_50;
LABEL_49:
  v47 = __clz(__rbit64(v45));
  v45 &= v45 - 1;
  for (k = v47 | (v41 << 6); ; k = __clz(__rbit64(v50)) + (v41 << 6))
  {
    v52 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * k);
    v53 = v52[1];
    v54 = (_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * k);
    *v54 = *v52;
    v54[1] = v53;
    result = swift_bridgeObjectRetain();
    if (v45)
      goto LABEL_49;
LABEL_50:
    v49 = v41 + 1;
    if (__OFADD__(v41, 1))
      goto LABEL_127;
    if (v49 >= v46)
      goto LABEL_103;
    v50 = *(_QWORD *)(v38 + 8 * v49);
    ++v41;
    if (!v50)
    {
      v41 = v49 + 1;
      if (v49 + 1 >= v46)
        goto LABEL_103;
      v50 = *(_QWORD *)(v38 + 8 * v41);
      if (!v50)
      {
        v41 = v49 + 2;
        if (v49 + 2 >= v46)
          goto LABEL_103;
        v50 = *(_QWORD *)(v38 + 8 * v41);
        if (!v50)
        {
          v41 = v49 + 3;
          if (v49 + 3 >= v46)
            goto LABEL_103;
          v50 = *(_QWORD *)(v38 + 8 * v41);
          if (!v50)
            break;
        }
      }
    }
LABEL_65:
    v45 = (v50 - 1) & v50;
  }
  v51 = v49 + 4;
  if (v51 >= v46)
    goto LABEL_103;
  v50 = *(_QWORD *)(v38 + 8 * v51);
  if (v50)
  {
    v41 = v51;
    goto LABEL_65;
  }
  while (1)
  {
    v41 = v51 + 1;
    if (__OFADD__(v51, 1))
      break;
    if (v41 >= v46)
      goto LABEL_103;
    v50 = *(_QWORD *)(v38 + 8 * v41);
    ++v51;
    if (v50)
      goto LABEL_65;
  }
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for BMDatabaseInitializer()
{
  return objc_opt_self();
}

unint64_t type metadata accessor for BMResourceDescriptor()
{
  unint64_t result;

  result = lazy cache variable for type metadata for BMResourceDescriptor;
  if (!lazy cache variable for type metadata for BMResourceDescriptor)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BMResourceDescriptor);
  }
  return result;
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t dispatch thunk of static QueryPlannerMetadataCache.tableName(materializedViewName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of QueryPlannerMetadataCache.flush()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.materializedView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.itemsToBeFlushed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.itemsToBeFlushed.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.itemsToBeFlushed.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.itemCache.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.itemCache.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.itemCache.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.cacheSize.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.db.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.sqlExpressionEvaluator.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.groupByFields.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.payloadSchema.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.isTableEmpty.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.isTableEmpty.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.isTableEmpty.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.readSQL.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of static KeyedQueryPlannerMetadataCache.metadataItemAsRow(item:groupBySchema:payloadSchema:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 160))();
}

uint64_t dispatch thunk of static KeyedQueryPlannerMetadataCache.columnNames(groupBySchema:payloadSchema:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 168))();
}

uint64_t dispatch thunk of static KeyedQueryPlannerMetadataCache.metadataFromRow(_:groupBySchema:payloadSchema:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 176))();
}

void default argument 0 of Date.ISO8601Format(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  OUTLINED_FUNCTION_82_1();
  v28 = v7;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_262();
  v30 = type metadata accessor for TimeZone();
  v26 = *(_QWORD *)(v30 - 8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_8();
  v27 = v10;
  v29 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  OUTLINED_FUNCTION_254();
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_40();
  v12 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
  OUTLINED_FUNCTION_253();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
  OUTLINED_FUNCTION_318();
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  OUTLINED_FUNCTION_247();
  MEMORY[0x1E0C80A78](v19);
  OUTLINED_FUNCTION_118();
  (*(void (**)(uint64_t, _QWORD))(v20 + 104))(v6, *MEMORY[0x1E0CB05F0]);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v18, *MEMORY[0x1E0CB05E0], v0);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v15, *MEMORY[0x1E0CB0600], v12);
  v21 = *(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104);
  v22 = v30;
  v21(v4, *MEMORY[0x1E0CB0628], v29);
  TimeZone.init(secondsFromGMT:)();
  v23 = OUTLINED_FUNCTION_188();
  if (__swift_getEnumTagSinglePayload(v23, v24, v22) == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v27, v1, v22);
    Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
    OUTLINED_FUNCTION_55();
  }
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS14BiomeSQLParser11SQLDataTypeOG_SSsAE_pTg506_sSS14d11SQLParser11fg5OSSs5C197_pIggnozo_SS3key_AC5valuetSSsAD_pIegnrzr_TR04_s12a111Streams30KeyedQueryPlannerMetadataCachePAAE14createTableSQL20materializedViewName6schemaS2S_SDySS0A9SQLParser11cD19OGtKFZS2S_AItKXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  ValueMetadata *v20;
  _QWORD *Description;
  uint64_t v22;
  void (*v23)(char *, uint64_t, ValueMetadata *);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  v3 = MEMORY[0x1E0C80A78](v41);
  v40 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v39 = (uint64_t *)((char *)&v35 - v6);
  MEMORY[0x1E0C80A78](v5);
  v38 = (char *)&v35 - v7;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v46 = v1;
    v47 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v9 = specialized Dictionary.startIndex.getter(a1);
    if ((v9 & 0x8000000000000000) == 0)
    {
      v11 = v9;
      if (v9 < 1 << *(_BYTE *)(a1 + 32))
      {
        v12 = a1 + 64;
        v36 = a1 + 64;
        v37 = a1;
        v13 = v38;
        while ((*(_QWORD *)(v12 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
        {
          if ((_DWORD)v10 != *(_DWORD *)(a1 + 36))
            goto LABEL_22;
          v44 = 1 << v11;
          v45 = v11 >> 6;
          v42 = v8;
          v43 = v10;
          v14 = v41;
          v15 = (char *)v13 + *(int *)(v41 + 48);
          v16 = *(_QWORD *)(a1 + 56);
          v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
          v19 = *v17;
          v18 = v17[1];
          v20 = type metadata accessor for SQLDataType();
          Description = v20[-1].Description;
          v22 = v16 + Description[9] * v11;
          v23 = (void (*)(char *, uint64_t, ValueMetadata *))Description[2];
          v23(v15, v22, v20);
          *v13 = v19;
          v13[1] = v18;
          v24 = (uint64_t)v39;
          *v39 = v19;
          *(_QWORD *)(v24 + 8) = v18;
          v23((char *)(v24 + *(int *)(v14 + 48)), (uint64_t)v15, v20);
          v25 = v40;
          outlined init with take of UUID?(v24, v40, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
          swift_bridgeObjectRetain_n();
          outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
          v26 = v46;
          v27 = closure #1 in static KeyedQueryPlannerMetadataCache.createTableSQL(materializedViewName:schema:)(*(_QWORD *)v25, *(void **)(v25 + 8));
          v29 = v28;
          outlined destroy of UUID?(v25, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
          v30 = v47;
          v46 = v26;
          if (v26)
          {
            swift_release();
            return;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v30 + 16) + 1, 1);
            v30 = v47;
          }
          v32 = *(_QWORD *)(v30 + 16);
          v31 = *(_QWORD *)(v30 + 24);
          if (v32 >= v31 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
            v30 = v47;
          }
          *(_QWORD *)(v30 + 16) = v32 + 1;
          v33 = v30 + 16 * v32;
          *(_QWORD *)(v33 + 32) = v27;
          *(_QWORD *)(v33 + 40) = v29;
          a1 = v37;
          if ((uint64_t)v11 >= -(-1 << *(_BYTE *)(v37 + 32)))
            goto LABEL_23;
          v12 = v36;
          if ((*(_QWORD *)(v36 + 8 * v45) & v44) == 0)
            goto LABEL_24;
          if ((_DWORD)v43 != *(_DWORD *)(v37 + 36))
            goto LABEL_25;
          v34 = _HashTable.occupiedBucket(after:)();
          v8 = v42 - 1;
          if (v42 == 1)
            return;
          v11 = v34;
          if ((v34 & 0x8000000000000000) == 0)
          {
            v10 = *(unsigned int *)(a1 + 36);
            if (v34 < 1 << *(_BYTE *)(a1 + 32))
              continue;
          }
          goto LABEL_26;
        }
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
      }
    }
LABEL_26:
    __break(1u);
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_14BiomeSQLParser11SQLDataTypeOtG_SSsAE_pTg506_sSS14d11SQLParser11fg5OSSs5c186_pIggnozo_SS_ACtSSsAD_pIegnrzr_TR04_s12a146Streams30KeyedQueryPlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v19;
    __swift_instantiateConcreteTypeFromMangledName(a2);
    OUTLINED_FUNCTION_285();
    v8 = a1 + v7;
    v18 = *(_QWORD *)(v9 + 72);
    while (1)
    {
      closure #2 in static KeyedQueryPlannerMetadataCache.updateMetadataSQL(materializedViewName:groupBySchema:payloadSchema:)();
      if (v2)
        break;
      v12 = v10;
      v13 = v11;
      v15 = *(_QWORD *)(v19 + 16);
      v14 = *(_QWORD *)(v19 + 24);
      if (v15 >= v14 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      v8 += v18;
      *(_QWORD *)(v19 + 16) = v15 + 1;
      v16 = v19 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v12;
      *(_QWORD *)(v16 + 40) = v13;
      if (!--v3)
        return v4;
    }
    OUTLINED_FUNCTION_96();
  }
  return v4;
}

uint64_t static QueryPlannerMetadata.clearMetadata(materializedViewName:database:)(uint64_t a1, int a2, sqlite3 *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sqlite3 *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  uint64_t v24;
  int v25;
  id v26;
  uint64_t v27;

  static BookmarkCache.tableName(materializedViewName:)();
  v4 = a1;
  v6 = v5;
  OUTLINED_FUNCTION_107_2();
  OUTLINED_FUNCTION_106_2();
  OUTLINED_FUNCTION_227_0(v4);
  OUTLINED_FUNCTION_127();
  v7 = OUTLINED_FUNCTION_271();
  v8 = a3;
  v9 = OUTLINED_FUNCTION_101(a3, (const char *)(v7 + 32));
  OUTLINED_FUNCTION_157_1();
  if ((_DWORD)v9)
  {
    v10 = BMSQLDatabaseError(v9, a3, 0);
    swift_getErrorValue();
LABEL_5:
    Error.localizedDescription.getter();
    OUTLINED_FUNCTION_330();
    OUTLINED_FUNCTION_14_5();
    v15 = OUTLINED_FUNCTION_60_3();
    v17 = v16;
    OUTLINED_FUNCTION_106();
    lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
    OUTLINED_FUNCTION_13_0();
    *(_QWORD *)v18 = v6;
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_64();
  v4 = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(a1, a2, 36, 0xD000000000000022, (void *)0x800000018DCC3EB0);
  v6 = v11;
  OUTLINED_FUNCTION_107_2();
  OUTLINED_FUNCTION_106_2();
  OUTLINED_FUNCTION_227_0(v4);
  OUTLINED_FUNCTION_127();
  v12 = OUTLINED_FUNCTION_271();
  v13 = OUTLINED_FUNCTION_101(a3, (const char *)(v12 + 32));
  OUTLINED_FUNCTION_157_1();
  if (v13)
  {
    v14 = OUTLINED_FUNCTION_270();
    swift_getErrorValue();
    goto LABEL_5;
  }
  OUTLINED_FUNCTION_64();
  v20 = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(a1, a2, 27, 0xD000000000000019, (void *)0x800000018DCC3E90);
  v22 = v21;
  OUTLINED_FUNCTION_107_2();
  OUTLINED_FUNCTION_106_2();
  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  OUTLINED_FUNCTION_8_1();
  v4 = 0x800000018DCC2E80;
  OUTLINED_FUNCTION_243();
  v24 = String.utf8CString.getter();
  v25 = OUTLINED_FUNCTION_101(v8, (const char *)(v24 + 32));
  swift_release();
  if (!v25)
    return OUTLINED_FUNCTION_64();
  v26 = OUTLINED_FUNCTION_270();
  swift_getErrorValue();
  Error.localizedDescription.getter();
  OUTLINED_FUNCTION_330();
  OUTLINED_FUNCTION_14_5();
  v15 = OUTLINED_FUNCTION_60_3();
  v17 = v27;
  OUTLINED_FUNCTION_106();
  lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
  OUTLINED_FUNCTION_13_0();
  *(_QWORD *)v18 = 0xD000000000000015;
LABEL_6:
  *(_QWORD *)(v18 + 8) = v4;
  *(_QWORD *)(v18 + 16) = v15;
  *(_QWORD *)(v18 + 24) = v17;
  *(_BYTE *)(v18 + 32) = 1;
  return swift_willThrow();
}

void MetadataSQLError.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  char *v5;

  type metadata accessor for AggregationFunction.AggregationType();
  OUTLINED_FUNCTION_318();
  MEMORY[0x1E0C80A78](v2);
  OUTLINED_FUNCTION_52_4();
  type metadata accessor for MetadataSQLError(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_40();
  outlined init with copy of StorableValue(v0, v1, v4);
  v5 = (char *)sub_18D93E6B0 + 4 * byte_18DC0D590[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_18D93E6B0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v7;
  Swift::String v8;

  v3 = *v0;
  v4 = v0[1];
  OUTLINED_FUNCTION_9_6();
  _StringGuts.grow(_:)(92);
  OUTLINED_FUNCTION_128_2();
  OUTLINED_FUNCTION_5_1(v1 - 6, (uint64_t)"The number of group by keys in the query (");
  *(_QWORD *)(v2 - 80) = v3;
  v7._countAndFlagsBits = OUTLINED_FUNCTION_66_4();
  OUTLINED_FUNCTION_57_3(v7);
  OUTLINED_FUNCTION_54();
  OUTLINED_FUNCTION_71_1();
  String.append(_:)(v5);
  *(_QWORD *)(v2 - 80) = v4;
  v8._countAndFlagsBits = OUTLINED_FUNCTION_66_4();
  OUTLINED_FUNCTION_85_2(v8);
  swift_bridgeObjectRelease();
  return *(_QWORD *)(v2 - 104);
}

void sub_18D93EA9C()
{
  JUMPOUT(0x18D93EA78);
}

Swift::Int CacheEvent.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CacheEvent()
{
  char *v0;

  return CacheEvent.hashValue.getter(*v0);
}

uint64_t closure #1 in static KeyedQueryPlannerMetadataCache.createTableSQL(materializedViewName:schema:)(uint64_t a1, void *a2)
{
  ValueMetadata *v4;
  void (**Description)(char *, ValueMetadata *);
  uint64_t v6;
  char *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  _QWORD v17[2];

  v4 = type metadata accessor for SQLRawDataType();
  Description = (void (**)(char *, ValueMetadata *))v4[-1].Description;
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = 0;
  v17[1] = 0xE000000000000000;
  v8._countAndFlagsBits = 34;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 8226;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  SQLDataType.columnType()();
  if (v11)
    return swift_bridgeObjectRelease();
  v13 = SQLRawDataType.rawValue.getter();
  v15 = v14;
  Description[1](v7, v4);
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  return v17[0];
}

uint64_t static KeyedAggregationMetadataCache.tableName(materializedViewName:)(uint64_t a1, int a2)
{
  return OUTLINED_FUNCTION_185_0(a1, a2, 36, 34, (void *)0x800000018DCC3EB0);
}

uint64_t static KeyedFirstMatchingRecordCache.tableName(materializedViewName:)(uint64_t a1, int a2)
{
  return OUTLINED_FUNCTION_185_0(a1, a2, 27, 25, (void *)0x800000018DCC3E90);
}

uint64_t ObjC metadata update function for QueryPlannerMetadata()
{
  return type metadata accessor for QueryPlannerMetadata(0);
}

uint64_t type metadata completion function for QueryPlannerMetadata()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = (uint64_t)type metadata accessor for MaterializedView();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for BookmarkCache(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for KeyedAggregationMetadataCache(319);
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for KeyedFirstMatchingRecordCache(319);
        if (v4 <= 0x3F)
          return swift_updateClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for KeyedFirstMatchingRecordCache()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for KeyedFirstMatchingRecordCache()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void initializeBufferWithCopyOfBuffer for KeyedFirstMatchingRecordCache()
{
  _QWORD *v0;
  _QWORD *v1;
  int *v2;
  _QWORD *v3;
  _QWORD *v4;
  int *v5;
  ValueMetadata *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  OUTLINED_FUNCTION_81_2();
  v3 = v1;
  v4 = v0;
  if ((*(_DWORD *)(*((_QWORD *)v2 - 1) + 80) & 0x20000) != 0)
  {
    *v0 = *v1;
  }
  else
  {
    v5 = v2;
    v6 = OUTLINED_FUNCTION_35();
    OUTLINED_FUNCTION_50(*((uint64_t (**)(uint64_t, uint64_t))v6[-1].Description + 2));
    v7 = v5[6];
    *(_QWORD *)((char *)v4 + v5[5]) = *(_QWORD *)((char *)v3 + v5[5]);
    *(_QWORD *)((char *)v4 + v7) = *(_QWORD *)((char *)v3 + v7);
    v8 = v5[8];
    *(_QWORD *)((char *)v4 + v5[7]) = *(_QWORD *)((char *)v3 + v5[7]);
    v9 = (_QWORD *)((char *)v4 + v8);
    v10 = (char *)v3 + v8;
    v11 = *(void **)v10;
    v22 = *((_QWORD *)v10 + 1);
    *v9 = *(_QWORD *)v10;
    v9[1] = v22;
    OUTLINED_FUNCTION_260();
    v12 = v5[12];
    *(_QWORD *)((char *)v4 + v5[11]) = *(_QWORD *)((char *)v3 + v5[11]);
    *(_QWORD *)((char *)v4 + v12) = *(_QWORD *)((char *)v3 + v12);
    v13 = v5[14];
    *(_QWORD *)((char *)v4 + v5[13]) = *(_QWORD *)((char *)v3 + v5[13]);
    *((_BYTE *)v4 + v13) = *((_BYTE *)v3 + v13);
    v14 = v5[15];
    v15 = (char *)v4 + v14;
    v16 = (char *)v3 + v14;
    v17 = *(_QWORD *)((char *)v3 + v14 + 8);
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_48_2();
    v18 = v11;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_84_0();
    OUTLINED_FUNCTION_32_4();
    OUTLINED_FUNCTION_192_0();
    if (!v17)
    {
      v21 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v21;
      goto LABEL_7;
    }
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v17;
    v19 = *((_QWORD *)v16 + 2);
    v20 = *((_QWORD *)v16 + 3);
    *((_QWORD *)v15 + 2) = v19;
    *((_QWORD *)v15 + 3) = v20;
    OUTLINED_FUNCTION_141();
  }
  swift_retain();
LABEL_7:
  OUTLINED_FUNCTION_40_4();
}

void assignWithCopy for KeyedFirstMatchingRecordCache(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  ValueMetadata *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  v6 = OUTLINED_FUNCTION_59_3();
  OUTLINED_FUNCTION_50(*((uint64_t (**)(uint64_t, uint64_t))v6[-1].Description + 3));
  OUTLINED_FUNCTION_80_2(a3[5]);
  OUTLINED_FUNCTION_54();
  OUTLINED_FUNCTION_80_2(a3[6]);
  OUTLINED_FUNCTION_54();
  OUTLINED_FUNCTION_80_2(a3[7]);
  OUTLINED_FUNCTION_54();
  v7 = a3[8];
  v8 = v3 + v7;
  v9 = a2 + v7;
  v10 = *(void **)(a2 + v7);
  v11 = *(void **)v8;
  *(_QWORD *)v8 = v10;
  v12 = v10;

  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_54();
  *(_QWORD *)(v3 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(v3 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(v3 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_retain();
  swift_release();
  *(_QWORD *)(v3 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_54();
  OUTLINED_FUNCTION_80_2(a3[13]);
  OUTLINED_FUNCTION_54();
  *(_BYTE *)(v3 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  v13 = a3[15];
  v14 = v3 + v13;
  v15 = a2 + v13;
  v16 = *(_QWORD *)(v3 + v13 + 8);
  v17 = *(_QWORD *)(v15 + 8);
  if (v16)
  {
    if (v17)
    {
      OUTLINED_FUNCTION_295();
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_24();
      v18 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v14 + 24) = v18;
      swift_retain();
      OUTLINED_FUNCTION_96();
    }
    else
    {
      outlined destroy of UUID?(v14, &demangling cache variable for type metadata for (sql: String, argumentsFromKey: ()));
      v20 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *(_OWORD *)(v14 + 16) = v20;
    }
  }
  else if (v17)
  {
    OUTLINED_FUNCTION_295();
    v19 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
    *(_QWORD *)(v14 + 24) = v19;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v21 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *(_OWORD *)(v14 + 16) = v21;
  }
  OUTLINED_FUNCTION_1_8();
}

void initializeWithTake for KeyedFirstMatchingRecordCache(uint64_t a1, uint64_t a2, int *a3)
{
  ValueMetadata *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;

  v6 = OUTLINED_FUNCTION_35();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v6[-1].Description + 4))(a1, a2, v6);
  OUTLINED_FUNCTION_168_1(a3[5]);
  v7 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  OUTLINED_FUNCTION_168_1(a3[9]);
  OUTLINED_FUNCTION_168_1(a3[11]);
  v8 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[15];
  v10 = (_OWORD *)(a1 + v9);
  v11 = (_OWORD *)(a2 + v9);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  OUTLINED_FUNCTION_1_6();
}

void assignWithTake for KeyedFirstMatchingRecordCache(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  ValueMetadata *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v6 = OUTLINED_FUNCTION_59_3();
  OUTLINED_FUNCTION_50(*((uint64_t (**)(uint64_t, uint64_t))v6[-1].Description + 5));
  OUTLINED_FUNCTION_67_3(a3[5]);
  OUTLINED_FUNCTION_67_3(a3[6]);
  OUTLINED_FUNCTION_67_3(a3[7]);
  v7 = a3[8];
  v8 = v3 + v7;
  v9 = a2 + v7;
  v10 = *(void **)(v3 + v7);
  *(_QWORD *)(v3 + v7) = *(_QWORD *)(a2 + v7);

  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_260();
  *(_QWORD *)(v3 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_release();
  *(_QWORD *)(v3 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_67_3(a3[13]);
  v11 = a3[15];
  *(_BYTE *)(v3 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  v12 = v3 + v11;
  v13 = a2 + v11;
  if (!*(_QWORD *)(v3 + v11 + 8))
    goto LABEL_5;
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14)
  {
    outlined destroy of UUID?(v3 + v11, &demangling cache variable for type metadata for (sql: String, argumentsFromKey: ()));
LABEL_5:
    v15 = *(_OWORD *)(v13 + 16);
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *(_OWORD *)(v12 + 16) = v15;
    goto LABEL_6;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_QWORD *)(v12 + 8) = v14;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(v13 + 16);
  swift_release();
LABEL_6:
  OUTLINED_FUNCTION_1_8();
}

uint64_t getEnumTagSinglePayload for KeyedAggregationMetadataCache()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  ValueMetadata *v6;

  v6 = OUTLINED_FUNCTION_59_3();
  if (*((_DWORD *)v6[-1].Description + 21) == (_DWORD)a2)
  {
    OUTLINED_FUNCTION_67_0(v3, a2, (uint64_t)v6);
  }
  else
  {
    OUTLINED_FUNCTION_209_0(*(int *)(a3 + 20));
    OUTLINED_FUNCTION_1_6();
  }
}

uint64_t storeEnumTagSinglePayload for KeyedAggregationMetadataCache()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*((_DWORD *)OUTLINED_FUNCTION_35()[-1].Description + 21) == a3)
  {
    v7 = OUTLINED_FUNCTION_322();
    OUTLINED_FUNCTION_68(v7, v8, v9, v10);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
    OUTLINED_FUNCTION_1_6();
  }
}

ValueMetadata *type metadata completion function for KeyedFirstMatchingRecordCache()
{
  ValueMetadata *result;
  unint64_t v1;

  result = type metadata accessor for MaterializedView();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for BookmarkCache(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  ValueMetadata *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for MaterializedView();
    (*((void (**)(_QWORD *, _QWORD *, ValueMetadata *))v7[-1].Description + 2))(v4, a2, v7);
    v8 = a3[6];
    *(_QWORD *)((char *)v4 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    *((_BYTE *)v4 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[8];
    *(_QWORD *)((char *)v4 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    *(_QWORD *)((char *)v4 + v9) = *(_QWORD *)((char *)a2 + v9);
    swift_unknownObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithCopy for BookmarkCache(uint64_t a1, uint64_t a2, int *a3)
{
  ValueMetadata *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v6[-1].Description + 2))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BookmarkCache(uint64_t a1, uint64_t a2, int *a3)
{
  ValueMetadata *v6;

  v6 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v6[-1].Description + 3))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for BookmarkCache(uint64_t a1, uint64_t a2, int *a3)
{
  ValueMetadata *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v6[-1].Description + 4))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for BookmarkCache(uint64_t a1, uint64_t a2, int *a3)
{
  ValueMetadata *v6;
  uint64_t v7;

  v6 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v6[-1].Description + 5))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_unknownObjectRelease();
  v7 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BookmarkCache()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_18D93F628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  ValueMetadata *v6;

  v6 = OUTLINED_FUNCTION_59_3();
  if (*((_DWORD *)v6[-1].Description + 21) == (_DWORD)a2)
  {
    OUTLINED_FUNCTION_67_0(v3, a2, (uint64_t)v6);
  }
  else
  {
    OUTLINED_FUNCTION_209_0(*(int *)(a3 + 32));
    OUTLINED_FUNCTION_1_6();
  }
}

uint64_t storeEnumTagSinglePayload for BookmarkCache()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_18D93F684(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*((_DWORD *)OUTLINED_FUNCTION_35()[-1].Description + 21) == a3)
  {
    v7 = OUTLINED_FUNCTION_322();
    OUTLINED_FUNCTION_68(v7, v8, v9, v10);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
    OUTLINED_FUNCTION_1_6();
  }
}

ValueMetadata *type metadata completion function for BookmarkCache()
{
  ValueMetadata *result;
  unint64_t v1;

  result = type metadata accessor for MaterializedView();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void QueryPlannerMetadata.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  Swift::String v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;

  OUTLINED_FUNCTION_82_1();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_52_4();
  OUTLINED_FUNCTION_9_6();
  _StringGuts.grow(_:)(139);
  OUTLINED_FUNCTION_128_2();
  OUTLINED_FUNCTION_5_1(0xD000000000000031, (uint64_t)"    QueryPlannerMetadata: materializedViewName: \"");
  v41._countAndFlagsBits = MaterializedView.name.getter();
  OUTLINED_FUNCTION_57_3(v41);
  OUTLINED_FUNCTION_54();
  OUTLINED_FUNCTION_71_1();
  OUTLINED_FUNCTION_222_0(34, v5);
  v29 = v0 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_keyedAggregationMetadata;
  v6 = *(_QWORD *)(v29 + *(int *)(type metadata accessor for KeyedAggregationMetadataCache(0) + 28));
  v7 = *(_QWORD *)(v6 + 16);
  v8 = MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    OUTLINED_FUNCTION_100();
    OUTLINED_FUNCTION_54_4(0, v7);
    if ((OUTLINED_FUNCTION_286() & 0x8000000000000000) == 0)
    {
      OUTLINED_FUNCTION_110_2();
      if (v9 != v10)
      {
        v30 = v6;
        v31 = v7;
        v32 = v6 + 64;
        while (1)
        {
          OUTLINED_FUNCTION_105_1();
          if (v15)
            break;
          if (*(_DWORD *)(v6 + 36) != v11)
            goto LABEL_30;
          v35 = v12;
          v36 = v14;
          v33 = v13;
          v34 = v11;
          OUTLINED_FUNCTION_268();
          v16 = *(_QWORD *)(v7 + 16);
          if (v16)
          {
            OUTLINED_FUNCTION_156();
            OUTLINED_FUNCTION_54_4(0, v16);
            OUTLINED_FUNCTION_266();
            v18 = v7 + v17;
            v20 = *(_QWORD *)(v19 + 72);
            do
            {
              outlined init with copy of StorableValue(v18, v1, type metadata accessor for StorableValue);
              OUTLINED_FUNCTION_275();
              _print_unlocked<A, B>(_:_:)();
              OUTLINED_FUNCTION_289();
              if ((OUTLINED_FUNCTION_338() & 1) == 0)
              {
                OUTLINED_FUNCTION_21_5(0, *(_QWORD *)(v2 + 16) + 1);
                v2 = v8;
              }
              v22 = *(_QWORD *)(v2 + 16);
              v21 = *(_QWORD *)(v2 + 24);
              if (v22 >= v21 >> 1)
              {
                OUTLINED_FUNCTION_21_5(v21 > 1, v22 + 1);
                v2 = v8;
              }
              *(_QWORD *)(v2 + 16) = v22 + 1;
              v23 = v2 + 16 * v22;
              *(_QWORD *)(v23 + 32) = v37;
              *(_QWORD *)(v23 + 40) = v38;
              v18 += v20;
              --v16;
            }
            while (v16);
            v6 = v30;
            v8 = MEMORY[0x1E0DEE9D8];
          }
          else
          {
            OUTLINED_FUNCTION_156();
            v2 = v8;
          }
          v24._countAndFlagsBits = MEMORY[0x193FEC6A8](v2, MEMORY[0x1E0DEA968]);
          String.append(_:)(v24);
          OUTLINED_FUNCTION_8_1();
          OUTLINED_FUNCTION_106();
          OUTLINED_FUNCTION_292();
          OUTLINED_FUNCTION_64();
          v2 = v40;
          v26 = *(_QWORD *)(v3 + 16);
          v25 = *(_QWORD *)(v3 + 24);
          if (v26 >= v25 >> 1)
            OUTLINED_FUNCTION_21_5(v25 > 1, v26 + 1);
          *(_QWORD *)(v3 + 16) = v26 + 1;
          v27 = v3 + 16 * v26;
          *(_QWORD *)(v27 + 32) = v39;
          *(_QWORD *)(v27 + 40) = v40;
          OUTLINED_FUNCTION_180();
          if (v9 == v10)
            goto LABEL_31;
          if ((*(_QWORD *)(v32 + 8 * v36) & v35) == 0)
            goto LABEL_32;
          if (*(_DWORD *)(v6 + 36) != v34)
            goto LABEL_33;
          v28 = OUTLINED_FUNCTION_124_2();
          v7 = v31;
          if (v33 == v31)
          {
            OUTLINED_FUNCTION_45();
            goto LABEL_28;
          }
          if ((v28 & 0x8000000000000000) == 0)
          {
            OUTLINED_FUNCTION_110_2();
            if (v9 != v10)
              continue;
          }
          goto LABEL_34;
        }
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
      }
    }
LABEL_34:
    __break(1u);
    JUMPOUT(0x18D940250);
  }
LABEL_28:
  OUTLINED_FUNCTION_313();
}

void protocol witness for CustomStringConvertible.description.getter in conformance QueryPlannerMetadata()
{
  QueryPlannerMetadata.description.getter();
}

void specialized _merge<A>(low:mid:high:buffer:by:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  ValueMetadata *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v30;
  uint64_t v32;
  void (*v33)(uint64_t, unint64_t, ValueMetadata *);
  ValueMetadata *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  BOOL v45;
  BOOL v46;
  void (*v47)(char *, unint64_t, ValueMetadata *);
  unint64_t v48;
  uint64_t v49;
  void (*v50)(char *, unint64_t, ValueMetadata *);
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v57;
  void (*v58)(char *, ValueMetadata *);
  unint64_t v59;
  BOOL v60;
  BOOL v61;
  unint64_t v62;
  uint64_t v64;
  unint64_t v65;
  void (*v66)(char *, unint64_t, ValueMetadata *);
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;

  OUTLINED_FUNCTION_42();
  v75 = v0;
  v76 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = OUTLINED_FUNCTION_22_2();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_6_1();
  v72 = v11;
  OUTLINED_FUNCTION_7();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_53();
  v71 = v13;
  OUTLINED_FUNCTION_7();
  v15 = MEMORY[0x1E0C80A78](v14);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v64 - v17;
  v73 = v19;
  v20 = *(_QWORD *)(v19 + 72);
  if (!v20)
  {
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v21 = v7 - v9;
  if (v7 - v9 == 0x8000000000000000 && v20 == -1)
    goto LABEL_91;
  v23 = v5 - v7;
  if (v5 - v7 == 0x8000000000000000 && v20 == -1)
    goto LABEL_92;
  v69 = v16;
  v70 = v20;
  v25 = v21 / v20;
  v26 = v23 / v20;
  if (v21 / v20 >= v23 / v20)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v23 / v20);
    v27 = v3 + v26 * v20;
    if (v26 * v20 < 1 || v9 >= v7)
      goto LABEL_22;
    v69 = -v20;
    v47 = *(void (**)(char *, unint64_t, ValueMetadata *))(v73 + 16);
    v65 = v3;
    v66 = v47;
    v67 = v9;
    while (1)
    {
      v48 = v5;
      v74 = v27;
      v49 = v69;
      v68 = v27 + v69;
      v50 = v66;
      ((void (*)(char *))v66)(v71);
      v51 = v7 + v49;
      v50(v72, v7 + v49, v10);
      v52 = SQLExpression.sql.getter();
      v54 = v53;
      if (v52 == SQLExpression.sql.getter() && v54 == v55)
        v57 = 0;
      else
        v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
      OUTLINED_FUNCTION_41_0();
      OUTLINED_FUNCTION_127();
      v5 = v48 + v69;
      v58 = *(void (**)(char *, ValueMetadata *))(v73 + 8);
      v58(v72, v10);
      v58(v71, v10);
      v59 = v67;
      if ((v57 & 1) != 0)
      {
        v60 = v48 < v7 || v5 >= v7;
        v20 = v70;
        if (v60)
        {
          OUTLINED_FUNCTION_135_2();
        }
        else if (v48 != v7)
        {
          OUTLINED_FUNCTION_136_1();
        }
        v7 = v51;
        v3 = v65;
        v27 = v74;
        goto LABEL_84;
      }
      v61 = v48 < v74 || v5 >= v74;
      v20 = v70;
      if (v61)
      {
        v62 = v68;
        OUTLINED_FUNCTION_135_2();
      }
      else
      {
        if (v48 == v74)
        {
          v27 = v68;
          goto LABEL_83;
        }
        v62 = v68;
        OUTLINED_FUNCTION_136_1();
      }
      v27 = v62;
LABEL_83:
      v3 = v65;
LABEL_84:
      if (v27 <= v3 || v7 <= v59)
        goto LABEL_22;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v9, v21 / v20);
  v27 = v3 + v25 * v20;
  if (v25 * v20 >= 1 && v7 < v5)
  {
    v71 = *(char **)(v73 + 16);
    v72 = v18;
    v32 = v69;
    v74 = v3 + v25 * v20;
    v68 = v5;
    while (1)
    {
      v33 = (void (*)(uint64_t, unint64_t, ValueMetadata *))v71;
      ((void (*)(char *, unint64_t, ValueMetadata *))v71)(v18, v7, v10);
      v33(v32, v3, v10);
      v34 = v10;
      v35 = SQLExpression.sql.getter();
      v37 = v36;
      if (v35 == SQLExpression.sql.getter() && v37 == v38)
        break;
      v40 = v32;
      v41 = OUTLINED_FUNCTION_29();
      OUTLINED_FUNCTION_41_0();
      OUTLINED_FUNCTION_24();
      OUTLINED_FUNCTION_149_1(v40);
      OUTLINED_FUNCTION_149_1((uint64_t)v18);
      v10 = v34;
      if ((v41 & 1) == 0)
        goto LABEL_39;
      v20 = v70;
      v42 = v7 + v70;
      v43 = v9 < v7 || v9 >= v42;
      v44 = v68;
      if (!v43)
      {
        v32 = v69;
        if (v9 != v7)
          OUTLINED_FUNCTION_136_1();
        v27 = v74;
        goto LABEL_49;
      }
      OUTLINED_FUNCTION_135_2();
LABEL_48:
      v27 = v74;
      v32 = v69;
LABEL_49:
      v9 += v20;
      v46 = v3 >= v27 || v42 >= v44;
      v7 = v42;
      if (v46)
        goto LABEL_22;
    }
    OUTLINED_FUNCTION_99();
    OUTLINED_FUNCTION_149_1(v32);
    OUTLINED_FUNCTION_149_1((uint64_t)v18);
    v10 = v34;
LABEL_39:
    v20 = v70;
    v45 = v9 < v3 || v9 >= v3 + v70;
    v44 = v68;
    if (v45)
    {
      OUTLINED_FUNCTION_135_2();
    }
    else if (v9 != v3)
    {
      OUTLINED_FUNCTION_136_1();
    }
    v42 = v7;
    v3 += v20;
    goto LABEL_48;
  }
LABEL_22:
  v30 = v27 - v3;
  if (v20 != -1 || v30 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v3, v30 / v20);
    return;
  }
LABEL_93:
  __break(1u);
}

uint64_t specialized _NativeDictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 192;
  for (i = 12; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t type metadata accessor for MetadataSQLError(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, type metadata singleton initialization cache for MetadataSQLError);
}

uint64_t sub_18D940BC8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t *initializeBufferWithCopyOfBuffer for MetadataSQLError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  ValueMetadata *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
      case 4u:
      case 5u:
      case 9u:
        v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 6u:
        v9 = type metadata accessor for AggregationFunction.AggregationType();
        (*((void (**)(uint64_t *, uint64_t *, ValueMetadata *))v9[-1].Description + 2))(a1, a2, v9);
        goto LABEL_10;
      case 7u:
        v10 = *a2;
        v11 = a2[1];
        v12 = *((_BYTE *)a2 + 16);
        outlined copy of DatabaseValue(v10, v11, v12);
        *a1 = v10;
        a1[1] = v11;
        *((_BYTE *)a1 + 16) = v12;
        goto LABEL_10;
      case 8u:
        v13 = *a2;
        v14 = a2[1];
        *a1 = v13;
        a1[1] = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 0xAu:
        *a1 = *a2;
        swift_bridgeObjectRetain();
LABEL_10:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for MetadataSQLError(uint64_t a1)
{
  uint64_t result;
  ValueMetadata *v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 3:
    case 4:
    case 5:
    case 9:
    case 10:
      goto LABEL_5;
    case 6:
      v3 = type metadata accessor for AggregationFunction.AggregationType();
      result = (*((uint64_t (**)(uint64_t, ValueMetadata *))v3[-1].Description + 1))(a1, v3);
      break;
    case 7:
      result = outlined consume of DatabaseValue(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
      break;
    case 8:
      swift_bridgeObjectRelease();
LABEL_5:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *initializeWithCopy for MetadataSQLError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  ValueMetadata *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
    case 4u:
    case 5u:
    case 9u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 6u:
      v7 = type metadata accessor for AggregationFunction.AggregationType();
      (*((void (**)(uint64_t *, uint64_t *, ValueMetadata *))v7[-1].Description + 2))(a1, a2, v7);
      goto LABEL_8;
    case 7u:
      v8 = *a2;
      v9 = a2[1];
      v10 = *((_BYTE *)a2 + 16);
      outlined copy of DatabaseValue(v8, v9, v10);
      *a1 = v8;
      a1[1] = v9;
      *((_BYTE *)a1 + 16) = v10;
      goto LABEL_8;
    case 8u:
      v11 = *a2;
      v12 = a2[1];
      *a1 = v11;
      a1[1] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 0xAu:
      *a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *assignWithCopy for MetadataSQLError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  ValueMetadata *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 != a2)
  {
    outlined destroy of StorableValue((uint64_t)a1, type metadata accessor for MetadataSQLError);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
      case 4u:
      case 5u:
      case 9u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 6u:
        v6 = type metadata accessor for AggregationFunction.AggregationType();
        (*((void (**)(uint64_t *, uint64_t *, ValueMetadata *))v6[-1].Description + 2))(a1, a2, v6);
        goto LABEL_9;
      case 7u:
        v7 = *a2;
        v8 = a2[1];
        v9 = *((_BYTE *)a2 + 16);
        outlined copy of DatabaseValue(v7, v8, v9);
        *a1 = v7;
        a1[1] = v8;
        *((_BYTE *)a1 + 16) = v9;
        goto LABEL_9;
      case 8u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 0xAu:
        *a1 = *a2;
        swift_bridgeObjectRetain();
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for MetadataSQLError(void *a1, const void *a2, uint64_t a3)
{
  ValueMetadata *v6;

  if (swift_getEnumCaseMultiPayload() == 6)
  {
    v6 = type metadata accessor for AggregationFunction.AggregationType();
    (*((void (**)(void *, const void *, ValueMetadata *))v6[-1].Description + 4))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for MetadataSQLError(void *a1, const void *a2, uint64_t a3)
{
  ValueMetadata *v6;

  if (a1 != a2)
  {
    outlined destroy of StorableValue((uint64_t)a1, type metadata accessor for MetadataSQLError);
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      v6 = type metadata accessor for AggregationFunction.AggregationType();
      (*((void (**)(void *, const void *, ValueMetadata *))v6[-1].Description + 4))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

ValueMetadata *type metadata completion function for MetadataSQLError()
{
  ValueMetadata *result;
  unint64_t v1;

  result = type metadata accessor for AggregationFunction.AggregationType();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CacheEvent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18D9413B8 + 4 * byte_18DC0D5C2[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18D9413EC + 4 * byte_18DC0D5BD[v4]))();
}

uint64_t sub_18D9413EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18D9413F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18D9413FCLL);
  return result;
}

uint64_t sub_18D941408(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18D941410);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18D941414(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18D94141C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t lazy protocol witness table accessor for type CacheEvent and conformance CacheEvent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CacheEvent and conformance CacheEvent;
  if (!lazy protocol witness table cache variable for type CacheEvent and conformance CacheEvent)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for CacheEvent, &type metadata for CacheEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CacheEvent and conformance CacheEvent);
  }
  return result;
}

uint64_t closure #2 in static KeyedQueryPlannerMetadataCache.readMetadataSQL(materializedViewName:groupBySchema:)partial apply(uint64_t a1)
{
  return partial apply for closure #2 in static KeyedQueryPlannerMetadataCache.readMetadataSQL(materializedViewName:groupBySchema:)(a1);
}

uint64_t OUTLINED_FUNCTION_98_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_113_1()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 488) + 8))(*(_QWORD *)(v0 - 344), *(_QWORD *)(v0 - 448));
}

uint64_t OUTLINED_FUNCTION_120_1()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_121_2()
{
  Swift::String v0;

  v0._object = (void *)0xE900000000000054;
  v0._countAndFlagsBits = 0x434952545320290ALL;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_124_2()
{
  return _HashTable.occupiedBucket(after:)();
}

uint64_t OUTLINED_FUNCTION_127_2@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return __swift_getEnumTagSinglePayload(a1, a2, *(_QWORD *)(a3 - 256));
}

void OUTLINED_FUNCTION_128_2()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 96);
  *(_QWORD *)(v0 - 104) = *(_QWORD *)(v0 - 104);
  *(_QWORD *)(v0 - 96) = v1;
}

uint64_t OUTLINED_FUNCTION_129_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t OUTLINED_FUNCTION_131_2@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_136_1()
{
  return swift_arrayInitWithTakeBackToFront();
}

BOOL OUTLINED_FUNCTION_147_1@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void OUTLINED_FUNCTION_158_1()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 128) = 8315;
  *(_QWORD *)(v0 - 120) = 0xE200000000000000;
}

uint64_t OUTLINED_FUNCTION_160_1()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_164_0()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x202020200A2820;
  v0._object = (void *)0xE700000000000000;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_167_1()
{
  return type metadata accessor for MetadataSQLError(0);
}

void OUTLINED_FUNCTION_168_1(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + a1) = *(_QWORD *)(v2 + a1);
  *(_QWORD *)(v3 + v1) = *(_QWORD *)(v2 + v1);
}

void OUTLINED_FUNCTION_176_0(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 192) = a1;
  *(_BYTE *)(v1 - 184) = 1;
}

uint64_t OUTLINED_FUNCTION_184_0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 448))(a1, *(_QWORD *)(v1 - 440));
}

uint64_t OUTLINED_FUNCTION_185_0(uint64_t a1, int a2, Swift::Int a3, uint64_t a4, void *a5)
{
  return static KeyedAggregationMetadataCache.tableName(materializedViewName:)(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a5);
}

unint64_t OUTLINED_FUNCTION_186_0()
{
  return specialized __RawDictionaryStorage.find<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_187_0()
{
  uint64_t v0;
  uint64_t v1;

  return outlined consume of DatabaseValue(v0, *(_QWORD *)(v1 - 296), 3);
}

uint64_t OUTLINED_FUNCTION_194_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_195_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, *(unsigned int *)(v2 - 256), v3);
}

uint64_t OUTLINED_FUNCTION_196()
{
  return type metadata accessor for StorableValue(0);
}

uint64_t OUTLINED_FUNCTION_197()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_201_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 72) + 8))(v1, v0);
}

void OUTLINED_FUNCTION_204_0(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  static StorableValue.fromDatabaseValue(_:dataType:)(a1, a2, a3, a4, a5);
}

uint64_t OUTLINED_FUNCTION_207()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_209_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(v1 + a1);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t OUTLINED_FUNCTION_212_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t OUTLINED_FUNCTION_216_0()
{
  return swift_willThrow();
}

BOOL OUTLINED_FUNCTION_218_0(Swift::Bool a1)
{
  Swift::Int v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, v1);
}

void OUTLINED_FUNCTION_222_0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t OUTLINED_FUNCTION_224_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void OUTLINED_FUNCTION_227_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_230(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_232_0()
{
  uint64_t v0;

  return v0;
}

unint64_t OUTLINED_FUNCTION_234()
{
  return lazy protocol witness table accessor for type Data and conformance Data();
}

uint64_t OUTLINED_FUNCTION_236()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_239()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_240()
{
  return outlined consume of [String : SQLDataType].Iterator._Variant();
}

uint64_t OUTLINED_FUNCTION_243()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_255()
{
  Swift::String v0;

  v0._countAndFlagsBits = 1528838688;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(int *)(v2 + 40);
  *(_QWORD *)(v0 + *(int *)(v2 + 36)) = *(_QWORD *)(v1 + *(int *)(v2 + 36));
  *(_QWORD *)(v0 + v3) = *(_QWORD *)(v1 + v3);
}

uint64_t OUTLINED_FUNCTION_263(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, _QWORD);
  uint64_t v3;

  return v2(a1, a2, *(_QWORD *)(v3 - 160));
}

void OUTLINED_FUNCTION_266()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = v0;
}

uint64_t OUTLINED_FUNCTION_267()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 176);
}

void OUTLINED_FUNCTION_268()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 128) = 91;
  *(_QWORD *)(v0 - 120) = 0xE100000000000000;
}

uint64_t OUTLINED_FUNCTION_269()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 112) + 8))(v0, *(_QWORD *)(v1 - 104));
}

id OUTLINED_FUNCTION_270()
{
  uint64_t v0;
  sqlite3 *v1;

  return BMSQLDatabaseError(v0, v1, 0);
}

uint64_t OUTLINED_FUNCTION_271()
{
  return String.utf8CString.getter();
}

uint64_t OUTLINED_FUNCTION_272()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = v0;
  return 0;
}

void OUTLINED_FUNCTION_273()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_275()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 152) = 0;
  *(_QWORD *)(v1 - 144) = 0xE000000000000000;
  return v0;
}

uint64_t OUTLINED_FUNCTION_276(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_277@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1 + *(_QWORD *)(*(_QWORD *)(v2 - 144) + 72) * v1;
}

void OUTLINED_FUNCTION_279(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + a1) = *(_QWORD *)(v1 - 256);
}

uint64_t OUTLINED_FUNCTION_281()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 264);
}

void OUTLINED_FUNCTION_282()
{
  specialized _merge<A>(low:mid:high:buffer:by:)();
}

uint64_t OUTLINED_FUNCTION_283()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_284()
{
  return MaterializedView.name.getter();
}

uint64_t OUTLINED_FUNCTION_286()
{
  uint64_t v0;

  return specialized _NativeDictionary.startIndex.getter(v0);
}

void OUTLINED_FUNCTION_287()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = v1;
}

void OUTLINED_FUNCTION_289()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  outlined destroy of StorableValue(v1, v0);
}

uint64_t OUTLINED_FUNCTION_290@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_291()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_292()
{
  Swift::String v0;

  v0._countAndFlagsBits = 93;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_293()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_295()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t result;

  *v0 = *v1;
  result = v1[1];
  v0[1] = result;
  return result;
}

void OUTLINED_FUNCTION_296()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v0[1];
  *(_QWORD *)(v1 - 192) = *v0;
  *(_QWORD *)(v1 - 184) = v2;
}

uint64_t OUTLINED_FUNCTION_297()
{
  return MaterializedView.name.getter();
}

uint64_t OUTLINED_FUNCTION_298()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_299()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_300()
{
  Swift::String v0;

  v0._countAndFlagsBits = 32032;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_301()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_302()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

void OUTLINED_FUNCTION_303()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 232) = v0;
}

uint64_t OUTLINED_FUNCTION_304()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

unint64_t OUTLINED_FUNCTION_305()
{
  return specialized __RawDictionaryStorage.find<A>(_:)();
}

void OUTLINED_FUNCTION_306(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) |= v1;
}

uint64_t OUTLINED_FUNCTION_307()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_308()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t OUTLINED_FUNCTION_310()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t OUTLINED_FUNCTION_312()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_313()
{
  JUMPOUT(0x193FEC6A8);
}

uint64_t OUTLINED_FUNCTION_314()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_316()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_317()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_321()
{
  return 8236;
}

uint64_t OUTLINED_FUNCTION_322()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_323()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_324()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_325()
{
  return swift_release();
}

unint64_t OUTLINED_FUNCTION_327()
{
  return specialized __RawDictionaryStorage.find<A>(_:)();
}

void OUTLINED_FUNCTION_330()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_332()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_334()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_335@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

unint64_t OUTLINED_FUNCTION_336()
{
  return specialized __RawDictionaryStorage.find<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_338()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_339()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind(specialized PgQuery_OverridingKind.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_OverridingKind.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_OverridingKind()
{
  lazy protocol witness table accessor for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind();
  return Enum.hash(into:)();
}

void one-time initialization function for allCases()
{
  static PgQuery_OverridingKind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_QuerySource.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_SortByDir.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_SortByNulls.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_A_Expr_Kind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_RoleSpecType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_TableLikeOption.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_DefElemAction.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_PartitionRangeDatumKind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_RTEKind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_WCOKind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_GroupingSetKind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_CTEMaterialize.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_SetOperation.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_ObjectType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_DropBehavior.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_AlterTableType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_GrantTargetType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_VariableSetKind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_ConstrType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_ImportForeignSchemaType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_RoleStmtType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_FetchDirection.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_FunctionParameterMode.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_TransactionStmtKind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_ViewCheckOption.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_ClusterOption.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_DiscardMode.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_ReindexObjectType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_AlterTSConfigType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_AlterSubscriptionType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_OnCommitAction.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_ParamKind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_CoercionContext.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_CoercionForm.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_BoolExprType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_SubLinkType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_RowCompareType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_MinMaxOp.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_SQLValueFunctionOp.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_XmlExprOp.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_XmlOptionType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_NullTestType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_BoolTestType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_CmdType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_JoinType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_AggStrategy.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_AggSplit.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_SetOpCmd.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_SetOpStrategy.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_OnConflictAction.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_LimitOption.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_LockClauseStrength.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_LockWaitPolicy.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_LockTupleMode.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_KeywordKind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_Token.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_OverridingKind.allCases, a1);
}

void protocol witness for Enum.init() in conformance PgQuery_QuerySource(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_QuerySource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_QuerySource.init(rawValue:), a1);
}

uint64_t protocol witness for Enum.rawValue.getter in conformance PgQuery_QuerySource()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_QuerySource@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_QuerySource.init(rawValue:), a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PgQuery_QuerySource(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_QuerySource()
{
  lazy protocol witness table accessor for type PgQuery_QuerySource and conformance PgQuery_QuerySource();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_QuerySource(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_QuerySource@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_QuerySource.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_SortByDir@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind(specialized PgQuery_RoleSpecType.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_SortByDir@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_RoleSpecType.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SortByDir()
{
  lazy protocol witness table accessor for type PgQuery_SortByDir and conformance PgQuery_SortByDir();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_SortByDir@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_SortByDir.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SortByNulls()
{
  lazy protocol witness table accessor for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_SortByNulls@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_SortByNulls.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_A_Expr_Kind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_A_Expr_Kind.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_A_Expr_Kind@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_A_Expr_Kind.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_A_Expr_Kind()
{
  lazy protocol witness table accessor for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_A_Expr_Kind(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8));
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_A_Expr_Kind@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_A_Expr_Kind.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RoleSpecType()
{
  lazy protocol witness table accessor for type PgQuery_RoleSpecType and conformance PgQuery_RoleSpecType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_RoleSpecType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_RoleSpecType.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_TableLikeOption@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind(specialized PgQuery_TableLikeOption.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_TableLikeOption@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_TableLikeOption.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TableLikeOption()
{
  lazy protocol witness table accessor for type PgQuery_TableLikeOption and conformance PgQuery_TableLikeOption();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_TableLikeOption@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_TableLikeOption.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DefElemAction()
{
  lazy protocol witness table accessor for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_DefElemAction@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_DefElemAction.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_PartitionRangeDatumKind()
{
  lazy protocol witness table accessor for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_PartitionRangeDatumKind@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_PartitionRangeDatumKind.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_RTEKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_RTEKind.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_RTEKind@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_RTEKind.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RTEKind()
{
  lazy protocol witness table accessor for type PgQuery_RTEKind and conformance PgQuery_RTEKind();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_RTEKind@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_RTEKind.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_WCOKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_WCOKind.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_WCOKind@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_WCOKind.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_WCOKind()
{
  lazy protocol witness table accessor for type PgQuery_WCOKind and conformance PgQuery_WCOKind();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_WCOKind@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_WCOKind.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_GroupingSetKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind(specialized PgQuery_GroupingSetKind.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_GroupingSetKind@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_GroupingSetKind.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_GroupingSetKind()
{
  lazy protocol witness table accessor for type PgQuery_GroupingSetKind and conformance PgQuery_GroupingSetKind();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_GroupingSetKind@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_GroupingSetKind.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CTEMaterialize()
{
  lazy protocol witness table accessor for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_CTEMaterialize@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_CTEMaterialize.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SetOperation()
{
  lazy protocol witness table accessor for type PgQuery_SetOperation and conformance PgQuery_SetOperation();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_SetOperation@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_SetOperation.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_ObjectType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_ObjectType.init(rawValue:), a1);
}

uint64_t protocol witness for Enum.rawValue.getter in conformance PgQuery_ObjectType()
{
  uint64_t v0;

  return destructiveProjectEnumData for StorableValue(*(_QWORD *)v0, *(unsigned __int8 *)(v0 + 8));
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_ObjectType@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_ObjectType.init(rawValue:), a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PgQuery_ObjectType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = destructiveProjectEnumData for StorableValue(*(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8));
  *a1 = result;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ObjectType()
{
  lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ObjectType(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ObjectType(a1, a2, a3, a4, destructiveProjectEnumData for StorableValue);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_ObjectType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_ObjectType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DropBehavior()
{
  lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_DropBehavior@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_DropBehavior.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_AlterTableType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_AlterTableType.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_AlterTableType@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_AlterTableType.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterTableType()
{
  lazy protocol witness table accessor for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlterTableType(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ObjectType(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))PgQuery_A_Expr_Kind.rawValue.getter);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_AlterTableType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_AlterTableType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_GrantTargetType()
{
  lazy protocol witness table accessor for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_GrantTargetType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_GrantTargetType.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_VariableSetKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind(specialized PgQuery_VariableSetKind.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_VariableSetKind@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_VariableSetKind.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_VariableSetKind()
{
  lazy protocol witness table accessor for type PgQuery_VariableSetKind and conformance PgQuery_VariableSetKind();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_VariableSetKind@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_VariableSetKind.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_ConstrType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_ConstrType.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_ConstrType@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_ConstrType.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ConstrType()
{
  lazy protocol witness table accessor for type PgQuery_ConstrType and conformance PgQuery_ConstrType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_ConstrType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_ConstrType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ImportForeignSchemaType()
{
  lazy protocol witness table accessor for type PgQuery_ImportForeignSchemaType and conformance PgQuery_ImportForeignSchemaType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_ImportForeignSchemaType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_ImportForeignSchemaType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RoleStmtType()
{
  lazy protocol witness table accessor for type PgQuery_RoleStmtType and conformance PgQuery_RoleStmtType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_RoleStmtType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_RoleStmtType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_FetchDirection()
{
  lazy protocol witness table accessor for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_FetchDirection@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_FetchDirection.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_FunctionParameterMode()
{
  lazy protocol witness table accessor for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_FunctionParameterMode@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_FunctionParameterMode.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_TransactionStmtKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_TransactionStmtKind.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_TransactionStmtKind@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_TransactionStmtKind.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TransactionStmtKind()
{
  lazy protocol witness table accessor for type PgQuery_TransactionStmtKind and conformance PgQuery_TransactionStmtKind();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_TransactionStmtKind@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_TransactionStmtKind.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ViewCheckOption()
{
  lazy protocol witness table accessor for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_ViewCheckOption@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_ViewCheckOption.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ClusterOption()
{
  lazy protocol witness table accessor for type PgQuery_ClusterOption and conformance PgQuery_ClusterOption();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_ClusterOption@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_ClusterOption.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DiscardMode()
{
  lazy protocol witness table accessor for type PgQuery_DiscardMode and conformance PgQuery_DiscardMode();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_DiscardMode@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_DiscardMode.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ReindexObjectType()
{
  lazy protocol witness table accessor for type PgQuery_ReindexObjectType and conformance PgQuery_ReindexObjectType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_ReindexObjectType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_ReindexObjectType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterTSConfigType()
{
  lazy protocol witness table accessor for type PgQuery_AlterTSConfigType and conformance PgQuery_AlterTSConfigType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_AlterTSConfigType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_AlterTSConfigType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterSubscriptionType()
{
  lazy protocol witness table accessor for type PgQuery_AlterSubscriptionType and conformance PgQuery_AlterSubscriptionType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_AlterSubscriptionType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_AlterSubscriptionType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_OnCommitAction()
{
  lazy protocol witness table accessor for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OnCommitAction@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_OnCommitAction.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ParamKind()
{
  lazy protocol witness table accessor for type PgQuery_ParamKind and conformance PgQuery_ParamKind();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_ParamKind@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_ParamKind.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CoercionContext()
{
  lazy protocol witness table accessor for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_CoercionContext@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_CoercionContext.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CoercionForm()
{
  lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_CoercionForm@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_CoercionForm.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_BoolExprType()
{
  lazy protocol witness table accessor for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_BoolExprType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_BoolExprType.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_SubLinkType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind(specialized PgQuery_SubLinkType.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_SubLinkType@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_SubLinkType.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SubLinkType()
{
  lazy protocol witness table accessor for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_SubLinkType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_SubLinkType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RowCompareType()
{
  lazy protocol witness table accessor for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_RowCompareType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_RowCompareType.allCases, a1);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_MinMaxOp@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_MinMaxOp@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result >= 3uLL;
  *(_QWORD *)a2 = *result;
  v3 = !v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_MinMaxOp()
{
  lazy protocol witness table accessor for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_MinMaxOp@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_MinMaxOp.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_SQLValueFunctionOp@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_SQLValueFunctionOp.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_SQLValueFunctionOp@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_SQLValueFunctionOp.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SQLValueFunctionOp()
{
  lazy protocol witness table accessor for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_SQLValueFunctionOp@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_SQLValueFunctionOp.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_XmlExprOp()
{
  lazy protocol witness table accessor for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_XmlExprOp@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_XmlExprOp.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_XmlOptionType()
{
  lazy protocol witness table accessor for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_XmlOptionType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_XmlOptionType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_NullTestType()
{
  lazy protocol witness table accessor for type PgQuery_NullTestType and conformance PgQuery_NullTestType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_NullTestType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_NullTestType.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_BoolTestType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_BoolTestType.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_BoolTestType@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_BoolTestType.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_BoolTestType()
{
  lazy protocol witness table accessor for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_BoolTestType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_BoolTestType.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_CmdType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_CmdType.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_CmdType@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_CmdType.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CmdType()
{
  lazy protocol witness table accessor for type PgQuery_CmdType and conformance PgQuery_CmdType();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CmdType(uint64_t a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_CmdType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_CmdType.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_JoinType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_JoinType.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_JoinType@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_JoinType.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_JoinType()
{
  lazy protocol witness table accessor for type PgQuery_JoinType and conformance PgQuery_JoinType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_JoinType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_JoinType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AggStrategy()
{
  lazy protocol witness table accessor for type PgQuery_AggStrategy and conformance PgQuery_AggStrategy();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_AggStrategy@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_AggStrategy.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_AggSplit@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_AggSplit.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_AggSplit@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(_QWORD))specialized PgQuery_AggSplit.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AggSplit()
{
  lazy protocol witness table accessor for type PgQuery_AggSplit and conformance PgQuery_AggSplit();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_AggSplit@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_AggSplit.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SetOpCmd()
{
  lazy protocol witness table accessor for type PgQuery_SetOpCmd and conformance PgQuery_SetOpCmd();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_SetOpCmd@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_SetOpCmd.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SetOpStrategy()
{
  lazy protocol witness table accessor for type PgQuery_SetOpStrategy and conformance PgQuery_SetOpStrategy();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_SetOpStrategy@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_SetOpStrategy.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_OnConflictAction()
{
  lazy protocol witness table accessor for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OnConflictAction@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_OnConflictAction.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_LimitOption()
{
  lazy protocol witness table accessor for type PgQuery_LimitOption and conformance PgQuery_LimitOption();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_LimitOption@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_LimitOption.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_LockClauseStrength()
{
  lazy protocol witness table accessor for type PgQuery_LockClauseStrength and conformance PgQuery_LockClauseStrength();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_LockClauseStrength@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_LockClauseStrength.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_LockWaitPolicy()
{
  lazy protocol witness table accessor for type PgQuery_LockWaitPolicy and conformance PgQuery_LockWaitPolicy();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_LockWaitPolicy@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_LockWaitPolicy.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_LockTupleMode()
{
  lazy protocol witness table accessor for type PgQuery_LockTupleMode and conformance PgQuery_LockTupleMode();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_LockTupleMode@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_LockTupleMode.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_KeywordKind()
{
  lazy protocol witness table accessor for type PgQuery_KeywordKind and conformance PgQuery_KeywordKind();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_KeywordKind@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_KeywordKind.allCases, a1);
}

uint64_t PgQuery_Token.rawValue.getter(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return qword_18DC2AA08[result];
  return result;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_Token@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_Token.init(rawValue:), a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;
  char v5;

  result = a1();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance PgQuery_Token()
{
  uint64_t v0;

  return PgQuery_Token.rawValue.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_Token@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, specialized PgQuery_Token.init(rawValue:), a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v5;
  char v6;

  result = a2(*a1);
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 9) = v6 & 1;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PgQuery_Token@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = PgQuery_Token.rawValue.getter(*(_QWORD *)v1, *(_BYTE *)(v1 + 8));
  *a1 = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PgQuery_OverridingKind()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Token()
{
  lazy protocol witness table accessor for type PgQuery_Token and conformance PgQuery_Token();
  return Enum.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PgQuery_OverridingKind()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_Token(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ObjectType(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))PgQuery_Token.rawValue.getter);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ObjectType(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a2;
  v7 = *((unsigned __int8 *)a2 + 8);
  v8 = a5(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  return v8 == a5(v6, v7);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_Token@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_Token.allCases, a1);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind@<X0>(_QWORD *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_OverridingKind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_OverridingKind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "OVERRIDING_KIND_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 25;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "OVERRIDING_NOT_SET";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "OVERRIDING_USER_VALUE";
  *((_QWORD *)v13 + 1) = 21;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "OVERRIDING_SYSTEM_VALUE";
  *((_QWORD *)v15 + 1) = 23;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_QuerySource._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_QuerySource._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "QUERY_SOURCE_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 22;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "QSRC_ORIGINAL";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "QSRC_PARSER";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "QSRC_INSTEAD_RULE";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "QSRC_QUAL_INSTEAD_RULE";
  *((_QWORD *)v17 + 1) = 22;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "QSRC_NON_INSTEAD_RULE";
  *((_QWORD *)v19 + 1) = 21;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SortByDir._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SortByDir._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "SORT_BY_DIR_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 21;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "SORTBY_DEFAULT";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "SORTBY_ASC";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "SORTBY_DESC";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "SORTBY_USING";
  *(_QWORD *)(v16 + 8) = 12;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SortByNulls._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SortByNulls._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "SORT_BY_NULLS_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "SORTBY_NULLS_DEFAULT";
  *(_QWORD *)(v11 + 8) = 20;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "SORTBY_NULLS_FIRST";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "SORTBY_NULLS_LAST";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v40;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_A_Expr_Kind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_A_Expr_Kind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_18DC0D8F0;
  v5 = v40 + v4;
  v6 = v40 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v40 + v4) = 0;
  *(_QWORD *)v6 = "A_EXPR_KIND_UNDEFINED";
  *(_QWORD *)(v6 + 8) = 21;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "AEXPR_OP";
  *(_QWORD *)(v10 + 8) = 8;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "AEXPR_OP_ANY";
  *((_QWORD *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "AEXPR_OP_ALL";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "AEXPR_DISTINCT";
  *((_QWORD *)v16 + 1) = 14;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "AEXPR_NOT_DISTINCT";
  *((_QWORD *)v18 + 1) = 18;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "AEXPR_NULLIF";
  *((_QWORD *)v20 + 1) = 12;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "AEXPR_OF";
  *((_QWORD *)v22 + 1) = 8;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "AEXPR_IN";
  *(_QWORD *)(v23 + 8) = 8;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "AEXPR_LIKE";
  *((_QWORD *)v25 + 1) = 10;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "AEXPR_ILIKE";
  *((_QWORD *)v27 + 1) = 11;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "AEXPR_SIMILAR";
  *((_QWORD *)v29 + 1) = 13;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "AEXPR_BETWEEN";
  *((_QWORD *)v31 + 1) = 13;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "AEXPR_NOT_BETWEEN";
  *((_QWORD *)v33 + 1) = 17;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "AEXPR_BETWEEN_SYM";
  *((_QWORD *)v35 + 1) = 17;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "AEXPR_NOT_BETWEEN_SYM";
  *((_QWORD *)v37 + 1) = 21;
  v37[16] = 2;
  v9();
  v38 = v5 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 16;
  *(_QWORD *)v38 = "AEXPR_PAREN";
  *(_QWORD *)(v38 + 8) = 11;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RoleSpecType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RoleSpecType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "ROLE_SPEC_TYPE_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 24;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "ROLESPEC_CSTRING";
  *(_QWORD *)(v11 + 8) = 16;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "ROLESPEC_CURRENT_USER";
  *((_QWORD *)v13 + 1) = 21;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ROLESPEC_SESSION_USER";
  *((_QWORD *)v15 + 1) = 21;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "ROLESPEC_PUBLIC";
  *(_QWORD *)(v16 + 8) = 15;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TableLikeOption._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TableLikeOption._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D900;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "TABLE_LIKE_OPTION_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "CREATE_TABLE_LIKE_COMMENTS";
  *(_QWORD *)(v11 + 8) = 26;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "CREATE_TABLE_LIKE_CONSTRAINTS";
  *((_QWORD *)v13 + 1) = 29;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "CREATE_TABLE_LIKE_DEFAULTS";
  *((_QWORD *)v15 + 1) = 26;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "CREATE_TABLE_LIKE_GENERATED";
  *((_QWORD *)v17 + 1) = 27;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "CREATE_TABLE_LIKE_IDENTITY";
  *((_QWORD *)v19 + 1) = 26;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "CREATE_TABLE_LIKE_INDEXES";
  *((_QWORD *)v21 + 1) = 25;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "CREATE_TABLE_LIKE_STATISTICS";
  *((_QWORD *)v23 + 1) = 28;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 8;
  *(_QWORD *)v24 = "CREATE_TABLE_LIKE_STORAGE";
  *(_QWORD *)(v24 + 8) = 25;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 9;
  *(_QWORD *)v26 = "CREATE_TABLE_LIKE_ALL";
  *((_QWORD *)v26 + 1) = 21;
  v26[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DefElemAction._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DefElemAction._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "DEF_ELEM_ACTION_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 25;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "DEFELEM_UNSPEC";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "DEFELEM_SET";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "DEFELEM_ADD";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "DEFELEM_DROP";
  *(_QWORD *)(v16 + 8) = 12;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_PartitionRangeDatumKind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_PartitionRangeDatumKind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "PARTITION_RANGE_DATUM_KIND_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 36;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "PARTITION_RANGE_DATUM_MINVALUE";
  *(_QWORD *)(v11 + 8) = 30;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "PARTITION_RANGE_DATUM_VALUE";
  *((_QWORD *)v13 + 1) = 27;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "PARTITION_RANGE_DATUM_MAXVALUE";
  *((_QWORD *)v15 + 1) = 30;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RTEKind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RTEKind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D900;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "RTEKIND_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 17;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "RTE_RELATION";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "RTE_SUBQUERY";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "RTE_JOIN";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "RTE_FUNCTION";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "RTE_TABLEFUNC";
  *((_QWORD *)v19 + 1) = 13;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "RTE_VALUES";
  *((_QWORD *)v21 + 1) = 10;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "RTE_CTE";
  *((_QWORD *)v23 + 1) = 7;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 8;
  *(_QWORD *)v24 = "RTE_NAMEDTUPLESTORE";
  *(_QWORD *)(v24 + 8) = 19;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 9;
  *(_QWORD *)v26 = "RTE_RESULT";
  *((_QWORD *)v26 + 1) = 10;
  v26[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_WCOKind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_WCOKind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "WCOKIND_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 17;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "WCO_VIEW_CHECK";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "WCO_RLS_INSERT_CHECK";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "WCO_RLS_UPDATE_CHECK";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "WCO_RLS_CONFLICT_CHECK";
  *(_QWORD *)(v16 + 8) = 22;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_GroupingSetKind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_GroupingSetKind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "GROUPING_SET_KIND_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "GROUPING_SET_EMPTY";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "GROUPING_SET_SIMPLE";
  *((_QWORD *)v13 + 1) = 19;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "GROUPING_SET_ROLLUP";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "GROUPING_SET_CUBE";
  *((_QWORD *)v17 + 1) = 17;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "GROUPING_SET_SETS";
  *((_QWORD *)v19 + 1) = 17;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CTEMaterialize._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CTEMaterialize._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "CTEMATERIALIZE_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 24;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "CTEMaterializeDefault";
  *(_QWORD *)(v11 + 8) = 21;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "CTEMaterializeAlways";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "CTEMaterializeNever";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SetOperation._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SetOperation._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "SET_OPERATION_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "SETOP_NONE";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "SETOP_UNION";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "SETOP_INTERSECT";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "SETOP_EXCEPT";
  *(_QWORD *)(v16 + 8) = 12;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  char *v85;
  _QWORD *v86;
  char *v87;
  _QWORD *v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  _QWORD *v92;
  char *v93;
  _QWORD *v94;
  char *v95;
  _QWORD *v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  _QWORD *v100;
  char *v101;
  _QWORD *v102;
  char *v103;
  _QWORD *v104;
  char *v105;
  uint64_t v107;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ObjectType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ObjectType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v107 = swift_allocObject();
  *(_OWORD *)(v107 + 16) = xmmword_18DC0D910;
  v5 = v107 + v4;
  v6 = v107 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v107 + v4) = 0;
  *(_QWORD *)v6 = "OBJECT_TYPE_UNDEFINED";
  *(_QWORD *)(v6 + 8) = 21;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v107 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "OBJECT_ACCESS_METHOD";
  *(_QWORD *)(v10 + 8) = 20;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v107 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "OBJECT_AGGREGATE";
  *((_QWORD *)v12 + 1) = 16;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v107 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "OBJECT_AMOP";
  *((_QWORD *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v107 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "OBJECT_AMPROC";
  *((_QWORD *)v16 + 1) = 13;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v107 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "OBJECT_ATTRIBUTE";
  *((_QWORD *)v18 + 1) = 16;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v107 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "OBJECT_CAST";
  *((_QWORD *)v20 + 1) = 11;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v107 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "OBJECT_COLUMN";
  *((_QWORD *)v22 + 1) = 13;
  v22[16] = 2;
  v9();
  v23 = v107 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "OBJECT_COLLATION";
  *(_QWORD *)(v23 + 8) = 16;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v107 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "OBJECT_CONVERSION";
  *((_QWORD *)v25 + 1) = 17;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v107 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "OBJECT_DATABASE";
  *((_QWORD *)v27 + 1) = 15;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v107 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "OBJECT_DEFAULT";
  *((_QWORD *)v29 + 1) = 14;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v107 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "OBJECT_DEFACL";
  *((_QWORD *)v31 + 1) = 13;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v107 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "OBJECT_DOMAIN";
  *((_QWORD *)v33 + 1) = 13;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v107 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "OBJECT_DOMCONSTRAINT";
  *((_QWORD *)v35 + 1) = 20;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v107 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "OBJECT_EVENT_TRIGGER";
  *((_QWORD *)v37 + 1) = 20;
  v37[16] = 2;
  v9();
  v38 = v107 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 16;
  *(_QWORD *)v38 = "OBJECT_EXTENSION";
  *(_QWORD *)(v38 + 8) = 16;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v107 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 17;
  *(_QWORD *)v40 = "OBJECT_FDW";
  *((_QWORD *)v40 + 1) = 10;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v107 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 18;
  *(_QWORD *)v42 = 0x18DCC9000;
  *((_QWORD *)v42 + 1) = 21;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v107 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 19;
  *(_QWORD *)v44 = "OBJECT_FOREIGN_TABLE";
  *((_QWORD *)v44 + 1) = 20;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v107 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 20;
  *(_QWORD *)v46 = "OBJECT_FUNCTION";
  *((_QWORD *)v46 + 1) = 15;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v107 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 21;
  *(_QWORD *)v48 = "OBJECT_INDEX";
  *((_QWORD *)v48 + 1) = 12;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v107 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 22;
  *(_QWORD *)v50 = "OBJECT_LANGUAGE";
  *((_QWORD *)v50 + 1) = 15;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v107 + v4 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 23;
  *(_QWORD *)v52 = "OBJECT_LARGEOBJECT";
  *((_QWORD *)v52 + 1) = 18;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v107 + v4 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 24;
  *(_QWORD *)v54 = "OBJECT_MATVIEW";
  *((_QWORD *)v54 + 1) = 14;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v107 + v4 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 25;
  *(_QWORD *)v56 = "OBJECT_OPCLASS";
  *((_QWORD *)v56 + 1) = 14;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v107 + v4 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 26;
  *(_QWORD *)v58 = "OBJECT_OPERATOR";
  *((_QWORD *)v58 + 1) = 15;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v107 + v4 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 27;
  *(_QWORD *)v60 = "OBJECT_OPFAMILY";
  *((_QWORD *)v60 + 1) = 15;
  v60[16] = 2;
  v9();
  v61 = (_QWORD *)(v107 + v4 + 28 * v3);
  v62 = (char *)v61 + *(int *)(v1 + 48);
  *v61 = 28;
  *(_QWORD *)v62 = "OBJECT_POLICY";
  *((_QWORD *)v62 + 1) = 13;
  v62[16] = 2;
  v9();
  v63 = (_QWORD *)(v107 + v4 + 29 * v3);
  v64 = (char *)v63 + *(int *)(v1 + 48);
  *v63 = 29;
  *(_QWORD *)v64 = "OBJECT_PROCEDURE";
  *((_QWORD *)v64 + 1) = 16;
  v64[16] = 2;
  v9();
  v65 = (_QWORD *)(v107 + v4 + 30 * v3);
  v66 = (char *)v65 + *(int *)(v1 + 48);
  *v65 = 30;
  *(_QWORD *)v66 = "OBJECT_PUBLICATION";
  *((_QWORD *)v66 + 1) = 18;
  v66[16] = 2;
  v9();
  v67 = (_QWORD *)(v107 + v4 + 31 * v3);
  v68 = (char *)v67 + *(int *)(v1 + 48);
  *v67 = 31;
  *(_QWORD *)v68 = "OBJECT_PUBLICATION_REL";
  *((_QWORD *)v68 + 1) = 22;
  v68[16] = 2;
  v9();
  v69 = v107 + v4 + 32 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 32 * v3) = 32;
  *(_QWORD *)v69 = "OBJECT_ROLE";
  *(_QWORD *)(v69 + 8) = 11;
  *(_BYTE *)(v69 + 16) = 2;
  v9();
  v70 = (_QWORD *)(v107 + v4 + 33 * v3);
  v71 = (char *)v70 + *(int *)(v1 + 48);
  *v70 = 33;
  *(_QWORD *)v71 = "OBJECT_ROUTINE";
  *((_QWORD *)v71 + 1) = 14;
  v71[16] = 2;
  v9();
  v72 = (_QWORD *)(v107 + v4 + 34 * v3);
  v73 = (char *)v72 + *(int *)(v1 + 48);
  *v72 = 34;
  *(_QWORD *)v73 = "OBJECT_RULE";
  *((_QWORD *)v73 + 1) = 11;
  v73[16] = 2;
  v9();
  v74 = (_QWORD *)(v107 + v4 + 35 * v3);
  v75 = (char *)v74 + *(int *)(v1 + 48);
  *v74 = 35;
  *(_QWORD *)v75 = "OBJECT_SCHEMA";
  *((_QWORD *)v75 + 1) = 13;
  v75[16] = 2;
  v9();
  v76 = (_QWORD *)(v107 + v4 + 36 * v3);
  v77 = (char *)v76 + *(int *)(v1 + 48);
  *v76 = 36;
  *(_QWORD *)v77 = "OBJECT_SEQUENCE";
  *((_QWORD *)v77 + 1) = 15;
  v77[16] = 2;
  v9();
  v78 = (_QWORD *)(v107 + v4 + 37 * v3);
  v79 = (char *)v78 + *(int *)(v1 + 48);
  *v78 = 37;
  *(_QWORD *)v79 = "OBJECT_SUBSCRIPTION";
  *((_QWORD *)v79 + 1) = 19;
  v79[16] = 2;
  v9();
  v80 = (_QWORD *)(v107 + v4 + 38 * v3);
  v81 = (char *)v80 + *(int *)(v1 + 48);
  *v80 = 38;
  *(_QWORD *)v81 = "OBJECT_STATISTIC_EXT";
  *((_QWORD *)v81 + 1) = 20;
  v81[16] = 2;
  v9();
  v82 = (_QWORD *)(v107 + v4 + 39 * v3);
  v83 = (char *)v82 + *(int *)(v1 + 48);
  *v82 = 39;
  *(_QWORD *)v83 = "OBJECT_TABCONSTRAINT";
  *((_QWORD *)v83 + 1) = 20;
  v83[16] = 2;
  v9();
  v84 = (_QWORD *)(v107 + v4 + 40 * v3);
  v85 = (char *)v84 + *(int *)(v1 + 48);
  *v84 = 40;
  *(_QWORD *)v85 = "OBJECT_TABLE";
  *((_QWORD *)v85 + 1) = 12;
  v85[16] = 2;
  v9();
  v86 = (_QWORD *)(v107 + v4 + 41 * v3);
  v87 = (char *)v86 + *(int *)(v1 + 48);
  *v86 = 41;
  *(_QWORD *)v87 = "OBJECT_TABLESPACE";
  *((_QWORD *)v87 + 1) = 17;
  v87[16] = 2;
  v9();
  v88 = (_QWORD *)(v107 + v4 + 42 * v3);
  v89 = (char *)v88 + *(int *)(v1 + 48);
  *v88 = 42;
  *(_QWORD *)v89 = "OBJECT_TRANSFORM";
  *((_QWORD *)v89 + 1) = 16;
  v89[16] = 2;
  v9();
  v90 = (_QWORD *)(v107 + v4 + 43 * v3);
  v91 = (char *)v90 + *(int *)(v1 + 48);
  *v90 = 43;
  *(_QWORD *)v91 = "OBJECT_TRIGGER";
  *((_QWORD *)v91 + 1) = 14;
  v91[16] = 2;
  v9();
  v92 = (_QWORD *)(v107 + v4 + 44 * v3);
  v93 = (char *)v92 + *(int *)(v1 + 48);
  *v92 = 44;
  *(_QWORD *)v93 = "OBJECT_TSCONFIGURATION";
  *((_QWORD *)v93 + 1) = 22;
  v93[16] = 2;
  v9();
  v94 = (_QWORD *)(v107 + v4 + 45 * v3);
  v95 = (char *)v94 + *(int *)(v1 + 48);
  *v94 = 45;
  *(_QWORD *)v95 = "OBJECT_TSDICTIONARY";
  *((_QWORD *)v95 + 1) = 19;
  v95[16] = 2;
  v9();
  v96 = (_QWORD *)(v107 + v4 + 46 * v3);
  v97 = (char *)v96 + *(int *)(v1 + 48);
  *v96 = 46;
  *(_QWORD *)v97 = "OBJECT_TSPARSER";
  *((_QWORD *)v97 + 1) = 15;
  v97[16] = 2;
  v9();
  v98 = (_QWORD *)(v107 + v4 + 47 * v3);
  v99 = (char *)v98 + *(int *)(v1 + 48);
  *v98 = 47;
  *(_QWORD *)v99 = "OBJECT_TSTEMPLATE";
  *((_QWORD *)v99 + 1) = 17;
  v99[16] = 2;
  v9();
  v100 = (_QWORD *)(v107 + v4 + 48 * v3);
  v101 = (char *)v100 + *(int *)(v1 + 48);
  *v100 = 48;
  *(_QWORD *)v101 = "OBJECT_TYPE";
  *((_QWORD *)v101 + 1) = 11;
  v101[16] = 2;
  v9();
  v102 = (_QWORD *)(v107 + v4 + 49 * v3);
  v103 = (char *)v102 + *(int *)(v1 + 48);
  *v102 = 49;
  *(_QWORD *)v103 = "OBJECT_USER_MAPPING";
  *((_QWORD *)v103 + 1) = 19;
  v103[16] = 2;
  v9();
  v104 = (_QWORD *)(v107 + v4 + 50 * v3);
  v105 = (char *)v104 + *(int *)(v1 + 48);
  *v104 = 50;
  *(_QWORD *)v105 = "OBJECT_VIEW";
  *((_QWORD *)v105 + 1) = 11;
  v105[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DropBehavior._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DropBehavior._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "DROP_BEHAVIOR_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "DROP_RESTRICT";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "DROP_CASCADE";
  *(_QWORD *)(v12 + 8) = 12;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  char *v85;
  _QWORD *v86;
  char *v87;
  _QWORD *v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  _QWORD *v92;
  char *v93;
  _QWORD *v94;
  char *v95;
  _QWORD *v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  _QWORD *v100;
  char *v101;
  _QWORD *v102;
  char *v103;
  _QWORD *v104;
  char *v105;
  _QWORD *v106;
  char *v107;
  _QWORD *v108;
  char *v109;
  _QWORD *v110;
  char *v111;
  _QWORD *v112;
  char *v113;
  _QWORD *v114;
  char *v115;
  _QWORD *v116;
  char *v117;
  _QWORD *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  _QWORD *v122;
  char *v123;
  _QWORD *v124;
  char *v125;
  _QWORD *v126;
  char *v127;
  _QWORD *v128;
  char *v129;
  _QWORD *v130;
  char *v131;
  unint64_t v132;
  _QWORD *v133;
  char *v134;
  _QWORD *v135;
  char *v136;
  _QWORD *v137;
  char *v138;
  uint64_t v140;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterTableType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterTableType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v140 = swift_allocObject();
  *(_OWORD *)(v140 + 16) = xmmword_18DC0D920;
  v5 = v140 + v4;
  v6 = v140 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v140 + v4) = 0;
  *(_QWORD *)v6 = "ALTER_TABLE_TYPE_UNDEFINED";
  *(_QWORD *)(v6 + 8) = 26;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v140 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "AT_AddColumn";
  *(_QWORD *)(v10 + 8) = 12;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v140 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "AT_AddColumnRecurse";
  *((_QWORD *)v12 + 1) = 19;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v140 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "AT_AddColumnToView";
  *((_QWORD *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v140 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "AT_ColumnDefault";
  *((_QWORD *)v16 + 1) = 16;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v140 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "AT_CookedColumnDefault";
  *((_QWORD *)v18 + 1) = 22;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v140 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "AT_DropNotNull";
  *((_QWORD *)v20 + 1) = 14;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v140 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "AT_SetNotNull";
  *((_QWORD *)v22 + 1) = 13;
  v22[16] = 2;
  v9();
  v23 = v140 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "AT_DropExpression";
  *(_QWORD *)(v23 + 8) = 17;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v140 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "AT_CheckNotNull";
  *((_QWORD *)v25 + 1) = 15;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v140 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "AT_SetStatistics";
  *((_QWORD *)v27 + 1) = 16;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v140 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "AT_SetOptions";
  *((_QWORD *)v29 + 1) = 13;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v140 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "AT_ResetOptions";
  *((_QWORD *)v31 + 1) = 15;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v140 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "AT_SetStorage";
  *((_QWORD *)v33 + 1) = 13;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v140 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "AT_DropColumn";
  *((_QWORD *)v35 + 1) = 13;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v140 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "AT_DropColumnRecurse";
  *((_QWORD *)v37 + 1) = 20;
  v37[16] = 2;
  v9();
  v38 = v140 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 16;
  *(_QWORD *)v38 = "AT_AddIndex";
  *(_QWORD *)(v38 + 8) = 11;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v140 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 17;
  *(_QWORD *)v40 = "AT_ReAddIndex";
  *((_QWORD *)v40 + 1) = 13;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v140 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 18;
  *(_QWORD *)v42 = "AT_AddConstraint";
  *((_QWORD *)v42 + 1) = 16;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v140 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 19;
  *(_QWORD *)v44 = "AT_AddConstraintRecurse";
  *((_QWORD *)v44 + 1) = 23;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v140 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 20;
  *(_QWORD *)v46 = "AT_ReAddConstraint";
  *((_QWORD *)v46 + 1) = 18;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v140 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 21;
  *(_QWORD *)v48 = "AT_ReAddDomainConstraint";
  *((_QWORD *)v48 + 1) = 24;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v140 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 22;
  *(_QWORD *)v50 = "AT_AlterConstraint";
  *((_QWORD *)v50 + 1) = 18;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v140 + v4 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 23;
  *(_QWORD *)v52 = "AT_ValidateConstraint";
  *((_QWORD *)v52 + 1) = 21;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v140 + v4 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 24;
  *(_QWORD *)v54 = "AT_ValidateConstraintRecurse";
  *((_QWORD *)v54 + 1) = 28;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v140 + v4 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 25;
  *(_QWORD *)v56 = "AT_AddIndexConstraint";
  *((_QWORD *)v56 + 1) = 21;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v140 + v4 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 26;
  *(_QWORD *)v58 = "AT_DropConstraint";
  *((_QWORD *)v58 + 1) = 17;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v140 + v4 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 27;
  *(_QWORD *)v60 = "AT_DropConstraintRecurse";
  *((_QWORD *)v60 + 1) = 24;
  v60[16] = 2;
  v9();
  v61 = (_QWORD *)(v140 + v4 + 28 * v3);
  v62 = (char *)v61 + *(int *)(v1 + 48);
  *v61 = 28;
  *(_QWORD *)v62 = "AT_ReAddComment";
  *((_QWORD *)v62 + 1) = 15;
  v62[16] = 2;
  v9();
  v63 = (_QWORD *)(v140 + v4 + 29 * v3);
  v64 = (char *)v63 + *(int *)(v1 + 48);
  *v63 = 29;
  *(_QWORD *)v64 = "AT_AlterColumnType";
  *((_QWORD *)v64 + 1) = 18;
  v64[16] = 2;
  v9();
  v65 = (_QWORD *)(v140 + v4 + 30 * v3);
  v66 = (char *)v65 + *(int *)(v1 + 48);
  *v65 = 30;
  *(_QWORD *)v66 = "AT_AlterColumnGenericOptions";
  *((_QWORD *)v66 + 1) = 28;
  v66[16] = 2;
  v9();
  v67 = (_QWORD *)(v140 + v4 + 31 * v3);
  v68 = (char *)v67 + *(int *)(v1 + 48);
  *v67 = 31;
  *(_QWORD *)v68 = "AT_ChangeOwner";
  *((_QWORD *)v68 + 1) = 14;
  v68[16] = 2;
  v9();
  v69 = v140 + v4 + 32 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 32 * v3) = 32;
  *(_QWORD *)v69 = "AT_ClusterOn";
  *(_QWORD *)(v69 + 8) = 12;
  *(_BYTE *)(v69 + 16) = 2;
  v9();
  v70 = (_QWORD *)(v140 + v4 + 33 * v3);
  v71 = (char *)v70 + *(int *)(v1 + 48);
  *v70 = 33;
  *(_QWORD *)v71 = "AT_DropCluster";
  *((_QWORD *)v71 + 1) = 14;
  v71[16] = 2;
  v9();
  v72 = (_QWORD *)(v140 + v4 + 34 * v3);
  v73 = (char *)v72 + *(int *)(v1 + 48);
  *v72 = 34;
  *(_QWORD *)v73 = "AT_SetLogged";
  *((_QWORD *)v73 + 1) = 12;
  v73[16] = 2;
  v9();
  v74 = (_QWORD *)(v140 + v4 + 35 * v3);
  v75 = (char *)v74 + *(int *)(v1 + 48);
  *v74 = 35;
  *(_QWORD *)v75 = "AT_SetUnLogged";
  *((_QWORD *)v75 + 1) = 14;
  v75[16] = 2;
  v9();
  v76 = (_QWORD *)(v140 + v4 + 36 * v3);
  v77 = (char *)v76 + *(int *)(v1 + 48);
  *v76 = 36;
  *(_QWORD *)v77 = "AT_DropOids";
  *((_QWORD *)v77 + 1) = 11;
  v77[16] = 2;
  v9();
  v78 = (_QWORD *)(v140 + v4 + 37 * v3);
  v79 = (char *)v78 + *(int *)(v1 + 48);
  *v78 = 37;
  *(_QWORD *)v79 = "AT_SetTableSpace";
  *((_QWORD *)v79 + 1) = 16;
  v79[16] = 2;
  v9();
  v80 = (_QWORD *)(v140 + v4 + 38 * v3);
  v81 = (char *)v80 + *(int *)(v1 + 48);
  *v80 = 38;
  *(_QWORD *)v81 = "AT_SetRelOptions";
  *((_QWORD *)v81 + 1) = 16;
  v81[16] = 2;
  v9();
  v82 = (_QWORD *)(v140 + v4 + 39 * v3);
  v83 = (char *)v82 + *(int *)(v1 + 48);
  *v82 = 39;
  *(_QWORD *)v83 = "AT_ResetRelOptions";
  *((_QWORD *)v83 + 1) = 18;
  v83[16] = 2;
  v9();
  v84 = (_QWORD *)(v140 + v4 + 40 * v3);
  v85 = (char *)v84 + *(int *)(v1 + 48);
  *v84 = 40;
  *(_QWORD *)v85 = "AT_ReplaceRelOptions";
  *((_QWORD *)v85 + 1) = 20;
  v85[16] = 2;
  v9();
  v86 = (_QWORD *)(v140 + v4 + 41 * v3);
  v87 = (char *)v86 + *(int *)(v1 + 48);
  *v86 = 41;
  *(_QWORD *)v87 = "AT_EnableTrig";
  *((_QWORD *)v87 + 1) = 13;
  v87[16] = 2;
  v9();
  v88 = (_QWORD *)(v140 + v4 + 42 * v3);
  v89 = (char *)v88 + *(int *)(v1 + 48);
  *v88 = 42;
  *(_QWORD *)v89 = "AT_EnableAlwaysTrig";
  *((_QWORD *)v89 + 1) = 19;
  v89[16] = 2;
  v9();
  v90 = (_QWORD *)(v140 + v4 + 43 * v3);
  v91 = (char *)v90 + *(int *)(v1 + 48);
  *v90 = 43;
  *(_QWORD *)v91 = "AT_EnableReplicaTrig";
  *((_QWORD *)v91 + 1) = 20;
  v91[16] = 2;
  v9();
  v92 = (_QWORD *)(v140 + v4 + 44 * v3);
  v93 = (char *)v92 + *(int *)(v1 + 48);
  *v92 = 44;
  *(_QWORD *)v93 = "AT_DisableTrig";
  *((_QWORD *)v93 + 1) = 14;
  v93[16] = 2;
  v9();
  v94 = (_QWORD *)(v140 + v4 + 45 * v3);
  v95 = (char *)v94 + *(int *)(v1 + 48);
  *v94 = 45;
  *(_QWORD *)v95 = "AT_EnableTrigAll";
  *((_QWORD *)v95 + 1) = 16;
  v95[16] = 2;
  v9();
  v96 = (_QWORD *)(v140 + v4 + 46 * v3);
  v97 = (char *)v96 + *(int *)(v1 + 48);
  *v96 = 46;
  *(_QWORD *)v97 = "AT_DisableTrigAll";
  *((_QWORD *)v97 + 1) = 17;
  v97[16] = 2;
  v9();
  v98 = (_QWORD *)(v140 + v4 + 47 * v3);
  v99 = (char *)v98 + *(int *)(v1 + 48);
  *v98 = 47;
  *(_QWORD *)v99 = "AT_EnableTrigUser";
  *((_QWORD *)v99 + 1) = 17;
  v99[16] = 2;
  v9();
  v100 = (_QWORD *)(v140 + v4 + 48 * v3);
  v101 = (char *)v100 + *(int *)(v1 + 48);
  *v100 = 48;
  *(_QWORD *)v101 = "AT_DisableTrigUser";
  *((_QWORD *)v101 + 1) = 18;
  v101[16] = 2;
  v9();
  v102 = (_QWORD *)(v140 + v4 + 49 * v3);
  v103 = (char *)v102 + *(int *)(v1 + 48);
  *v102 = 49;
  *(_QWORD *)v103 = "AT_EnableRule";
  *((_QWORD *)v103 + 1) = 13;
  v103[16] = 2;
  v9();
  v104 = (_QWORD *)(v140 + v4 + 50 * v3);
  v105 = (char *)v104 + *(int *)(v1 + 48);
  *v104 = 50;
  *(_QWORD *)v105 = "AT_EnableAlwaysRule";
  *((_QWORD *)v105 + 1) = 19;
  v105[16] = 2;
  v9();
  v106 = (_QWORD *)(v140 + v4 + 51 * v3);
  v107 = (char *)v106 + *(int *)(v1 + 48);
  *v106 = 51;
  *(_QWORD *)v107 = "AT_EnableReplicaRule";
  *((_QWORD *)v107 + 1) = 20;
  v107[16] = 2;
  v9();
  v108 = (_QWORD *)(v140 + v4 + 52 * v3);
  v109 = (char *)v108 + *(int *)(v1 + 48);
  *v108 = 52;
  *(_QWORD *)v109 = "AT_DisableRule";
  *((_QWORD *)v109 + 1) = 14;
  v109[16] = 2;
  v9();
  v110 = (_QWORD *)(v140 + v4 + 53 * v3);
  v111 = (char *)v110 + *(int *)(v1 + 48);
  *v110 = 53;
  *(_QWORD *)v111 = "AT_AddInherit";
  *((_QWORD *)v111 + 1) = 13;
  v111[16] = 2;
  v9();
  v112 = (_QWORD *)(v140 + v4 + 54 * v3);
  v113 = (char *)v112 + *(int *)(v1 + 48);
  *v112 = 54;
  *(_QWORD *)v113 = "AT_DropInherit";
  *((_QWORD *)v113 + 1) = 14;
  v113[16] = 2;
  v9();
  v114 = (_QWORD *)(v140 + v4 + 55 * v3);
  v115 = (char *)v114 + *(int *)(v1 + 48);
  *v114 = 55;
  *(_QWORD *)v115 = "AT_AddOf";
  *((_QWORD *)v115 + 1) = 8;
  v115[16] = 2;
  v9();
  v116 = (_QWORD *)(v140 + v4 + 56 * v3);
  v117 = (char *)v116 + *(int *)(v1 + 48);
  *v116 = 56;
  *(_QWORD *)v117 = "AT_DropOf";
  *((_QWORD *)v117 + 1) = 9;
  v117[16] = 2;
  v9();
  v118 = (_QWORD *)(v140 + v4 + 57 * v3);
  v119 = (char *)v118 + *(int *)(v1 + 48);
  *v118 = 57;
  *(_QWORD *)v119 = "AT_ReplicaIdentity";
  *((_QWORD *)v119 + 1) = 18;
  v119[16] = 2;
  v9();
  v120 = (_QWORD *)(v140 + v4 + 58 * v3);
  v121 = (char *)v120 + *(int *)(v1 + 48);
  *v120 = 58;
  *(_QWORD *)v121 = "AT_EnableRowSecurity";
  *((_QWORD *)v121 + 1) = 20;
  v121[16] = 2;
  v9();
  v122 = (_QWORD *)(v140 + v4 + 59 * v3);
  v123 = (char *)v122 + *(int *)(v1 + 48);
  *v122 = 59;
  *(_QWORD *)v123 = "AT_DisableRowSecurity";
  *((_QWORD *)v123 + 1) = 21;
  v123[16] = 2;
  v9();
  v124 = (_QWORD *)(v140 + v4 + 60 * v3);
  v125 = (char *)v124 + *(int *)(v1 + 48);
  *v124 = 60;
  *(_QWORD *)v125 = "AT_ForceRowSecurity";
  *((_QWORD *)v125 + 1) = 19;
  v125[16] = 2;
  v9();
  v126 = (_QWORD *)(v140 + v4 + 61 * v3);
  v127 = (char *)v126 + *(int *)(v1 + 48);
  *v126 = 61;
  *(_QWORD *)v127 = "AT_NoForceRowSecurity";
  *((_QWORD *)v127 + 1) = 21;
  v127[16] = 2;
  v9();
  v128 = (_QWORD *)(v140 + v4 + 62 * v3);
  v129 = (char *)v128 + *(int *)(v1 + 48);
  *v128 = 62;
  *(_QWORD *)v129 = "AT_GenericOptions";
  *((_QWORD *)v129 + 1) = 17;
  v129[16] = 2;
  v9();
  v130 = (_QWORD *)(v140 + v4 + 63 * v3);
  v131 = (char *)v130 + *(int *)(v1 + 48);
  *v130 = 63;
  *(_QWORD *)v131 = "AT_AttachPartition";
  *((_QWORD *)v131 + 1) = 18;
  v131[16] = 2;
  v9();
  v132 = v140 + v4 + (v3 << 6) + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + (v3 << 6)) = 64;
  *(_QWORD *)v132 = "AT_DetachPartition";
  *(_QWORD *)(v132 + 8) = 18;
  *(_BYTE *)(v132 + 16) = 2;
  v9();
  v133 = (_QWORD *)(v140 + v4 + 65 * v3);
  v134 = (char *)v133 + *(int *)(v1 + 48);
  *v133 = 65;
  *(_QWORD *)v134 = "AT_AddIdentity";
  *((_QWORD *)v134 + 1) = 14;
  v134[16] = 2;
  v9();
  v135 = (_QWORD *)(v140 + v4 + 66 * v3);
  v136 = (char *)v135 + *(int *)(v1 + 48);
  *v135 = 66;
  *(_QWORD *)v136 = "AT_SetIdentity";
  *((_QWORD *)v136 + 1) = 14;
  v136[16] = 2;
  v9();
  v137 = (_QWORD *)(v140 + v4 + 67 * v3);
  v138 = (char *)v137 + *(int *)(v1 + 48);
  *v137 = 67;
  *(_QWORD *)v138 = "AT_DropIdentity";
  *((_QWORD *)v138 + 1) = 15;
  v138[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_GrantTargetType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_GrantTargetType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "GRANT_TARGET_TYPE_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "ACL_TARGET_OBJECT";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "ACL_TARGET_ALL_IN_SCHEMA";
  *((_QWORD *)v13 + 1) = 24;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ACL_TARGET_DEFAULTS";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_VariableSetKind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_VariableSetKind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "VARIABLE_SET_KIND_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "VAR_SET_VALUE";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "VAR_SET_DEFAULT";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "VAR_SET_CURRENT";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "VAR_SET_MULTI";
  *((_QWORD *)v17 + 1) = 13;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "VAR_RESET";
  *((_QWORD *)v19 + 1) = 9;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "VAR_RESET_ALL";
  *((_QWORD *)v21 + 1) = 13;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v37;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ConstrType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ConstrType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_18DC0D940;
  v5 = v37 + v4;
  v6 = v37 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v37 + v4) = 0;
  *(_QWORD *)v6 = "CONSTR_TYPE_UNDEFINED";
  *(_QWORD *)(v6 + 8) = 21;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v37 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "CONSTR_NULL";
  *(_QWORD *)(v10 + 8) = 11;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v37 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "CONSTR_NOTNULL";
  *((_QWORD *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v37 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "CONSTR_DEFAULT";
  *((_QWORD *)v14 + 1) = 14;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v37 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "CONSTR_IDENTITY";
  *((_QWORD *)v16 + 1) = 15;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v37 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "CONSTR_GENERATED";
  *((_QWORD *)v18 + 1) = 16;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v37 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "CONSTR_CHECK";
  *((_QWORD *)v20 + 1) = 12;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v37 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "CONSTR_PRIMARY";
  *((_QWORD *)v22 + 1) = 14;
  v22[16] = 2;
  v9();
  v23 = v37 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "CONSTR_UNIQUE";
  *(_QWORD *)(v23 + 8) = 13;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v37 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "CONSTR_EXCLUSION";
  *((_QWORD *)v25 + 1) = 16;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v37 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "CONSTR_FOREIGN";
  *((_QWORD *)v27 + 1) = 14;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v37 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "CONSTR_ATTR_DEFERRABLE";
  *((_QWORD *)v29 + 1) = 22;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v37 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "CONSTR_ATTR_NOT_DEFERRABLE";
  *((_QWORD *)v31 + 1) = 26;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v37 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "CONSTR_ATTR_DEFERRED";
  *((_QWORD *)v33 + 1) = 20;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v37 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "CONSTR_ATTR_IMMEDIATE";
  *((_QWORD *)v35 + 1) = 21;
  v35[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ImportForeignSchemaType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ImportForeignSchemaType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "IMPORT_FOREIGN_SCHEMA_TYPE_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 36;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "FDW_IMPORT_SCHEMA_ALL";
  *(_QWORD *)(v11 + 8) = 21;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "FDW_IMPORT_SCHEMA_LIMIT_TO";
  *((_QWORD *)v13 + 1) = 26;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "FDW_IMPORT_SCHEMA_EXCEPT";
  *((_QWORD *)v15 + 1) = 24;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RoleStmtType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RoleStmtType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "ROLE_STMT_TYPE_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 24;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "ROLESTMT_ROLE";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "ROLESTMT_USER";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ROLESTMT_GROUP";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_FetchDirection._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_FetchDirection._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "FETCH_DIRECTION_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 25;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "FETCH_FORWARD";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "FETCH_BACKWARD";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "FETCH_ABSOLUTE";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "FETCH_RELATIVE";
  *(_QWORD *)(v16 + 8) = 14;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_FunctionParameterMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_FunctionParameterMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "FUNCTION_PARAMETER_MODE_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 33;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "FUNC_PARAM_IN";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "FUNC_PARAM_OUT";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "FUNC_PARAM_INOUT";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "FUNC_PARAM_VARIADIC";
  *((_QWORD *)v17 + 1) = 19;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "FUNC_PARAM_TABLE";
  *((_QWORD *)v19 + 1) = 16;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TransactionStmtKind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TransactionStmtKind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D950;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "TRANSACTION_STMT_KIND_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 31;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "TRANS_STMT_BEGIN";
  *(_QWORD *)(v11 + 8) = 16;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "TRANS_STMT_START";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "TRANS_STMT_COMMIT";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "TRANS_STMT_ROLLBACK";
  *((_QWORD *)v17 + 1) = 19;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "TRANS_STMT_SAVEPOINT";
  *((_QWORD *)v19 + 1) = 20;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "TRANS_STMT_RELEASE";
  *((_QWORD *)v21 + 1) = 18;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "TRANS_STMT_ROLLBACK_TO";
  *((_QWORD *)v23 + 1) = 22;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 8;
  *(_QWORD *)v24 = "TRANS_STMT_PREPARE";
  *(_QWORD *)(v24 + 8) = 18;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 9;
  *(_QWORD *)v26 = "TRANS_STMT_COMMIT_PREPARED";
  *((_QWORD *)v26 + 1) = 26;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v6 + 10 * v3);
  v28 = (char *)v27 + *(int *)(v1 + 48);
  *v27 = 10;
  *(_QWORD *)v28 = "TRANS_STMT_ROLLBACK_PREPARED";
  *((_QWORD *)v28 + 1) = 28;
  v28[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ViewCheckOption._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ViewCheckOption._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "VIEW_CHECK_OPTION_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "NO_CHECK_OPTION";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "LOCAL_CHECK_OPTION";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "CASCADED_CHECK_OPTION";
  *((_QWORD *)v15 + 1) = 21;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ClusterOption._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ClusterOption._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "CLUSTER_OPTION_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 24;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "CLUOPT_RECHECK";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "CLUOPT_VERBOSE";
  *(_QWORD *)(v12 + 8) = 14;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DiscardMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DiscardMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "DISCARD_MODE_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 22;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "DISCARD_ALL";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "DISCARD_PLANS";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "DISCARD_SEQUENCES";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "DISCARD_TEMP";
  *(_QWORD *)(v16 + 8) = 12;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ReindexObjectType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ReindexObjectType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "REINDEX_OBJECT_TYPE_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 29;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "REINDEX_OBJECT_INDEX";
  *(_QWORD *)(v11 + 8) = 20;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "REINDEX_OBJECT_TABLE";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "REINDEX_OBJECT_SCHEMA";
  *((_QWORD *)v15 + 1) = 21;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "REINDEX_OBJECT_SYSTEM";
  *((_QWORD *)v17 + 1) = 21;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "REINDEX_OBJECT_DATABASE";
  *((_QWORD *)v19 + 1) = 23;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterTSConfigType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterTSConfigType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "ALTER_TSCONFIG_TYPE_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 29;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "ALTER_TSCONFIG_ADD_MAPPING";
  *(_QWORD *)(v11 + 8) = 26;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN";
  *((_QWORD *)v13 + 1) = 38;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ALTER_TSCONFIG_REPLACE_DICT";
  *((_QWORD *)v15 + 1) = 27;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN";
  *((_QWORD *)v17 + 1) = 37;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "ALTER_TSCONFIG_DROP_MAPPING";
  *((_QWORD *)v19 + 1) = 27;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterSubscriptionType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterSubscriptionType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "ALTER_SUBSCRIPTION_TYPE_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 33;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "ALTER_SUBSCRIPTION_OPTIONS";
  *(_QWORD *)(v11 + 8) = 26;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "ALTER_SUBSCRIPTION_CONNECTION";
  *((_QWORD *)v13 + 1) = 29;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ALTER_SUBSCRIPTION_PUBLICATION";
  *((_QWORD *)v15 + 1) = 30;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "ALTER_SUBSCRIPTION_REFRESH";
  *((_QWORD *)v17 + 1) = 26;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "ALTER_SUBSCRIPTION_ENABLED";
  *((_QWORD *)v19 + 1) = 26;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_OnCommitAction._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_OnCommitAction._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "ON_COMMIT_ACTION_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 26;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "ONCOMMIT_NOOP";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "ONCOMMIT_PRESERVE_ROWS";
  *((_QWORD *)v13 + 1) = 22;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ONCOMMIT_DELETE_ROWS";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "ONCOMMIT_DROP";
  *(_QWORD *)(v16 + 8) = 13;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ParamKind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ParamKind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "PARAM_KIND_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "PARAM_EXTERN";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "PARAM_EXEC";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "PARAM_SUBLINK";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "PARAM_MULTIEXPR";
  *(_QWORD *)(v16 + 8) = 15;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CoercionContext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CoercionContext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "COERCION_CONTEXT_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 26;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "COERCION_IMPLICIT";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "COERCION_ASSIGNMENT";
  *((_QWORD *)v13 + 1) = 19;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "COERCION_EXPLICIT";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CoercionForm._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CoercionForm._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "COERCION_FORM_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "COERCE_EXPLICIT_CALL";
  *(_QWORD *)(v11 + 8) = 20;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "COERCE_EXPLICIT_CAST";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "COERCE_IMPLICIT_CAST";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_BoolExprType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_BoolExprType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "BOOL_EXPR_TYPE_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 24;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "AND_EXPR";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "OR_EXPR";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "NOT_EXPR";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SubLinkType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SubLinkType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_18DC0D960;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 0;
  *(_QWORD *)v6 = "SUB_LINK_TYPE_UNDEFINED";
  *(_QWORD *)(v6 + 8) = 23;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "EXISTS_SUBLINK";
  *(_QWORD *)(v10 + 8) = 14;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "ALL_SUBLINK";
  *((_QWORD *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "ANY_SUBLINK";
  *((_QWORD *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "ROWCOMPARE_SUBLINK";
  *((_QWORD *)v16 + 1) = 18;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "EXPR_SUBLINK";
  *((_QWORD *)v18 + 1) = 12;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "MULTIEXPR_SUBLINK";
  *((_QWORD *)v20 + 1) = 17;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "ARRAY_SUBLINK";
  *((_QWORD *)v22 + 1) = 13;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "CTE_SUBLINK";
  *(_QWORD *)(v23 + 8) = 11;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RowCompareType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RowCompareType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "ROW_COMPARE_TYPE_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 26;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "ROWCOMPARE_LT";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "ROWCOMPARE_LE";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ROWCOMPARE_EQ";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "ROWCOMPARE_GE";
  *((_QWORD *)v17 + 1) = 13;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "ROWCOMPARE_GT";
  *((_QWORD *)v19 + 1) = 13;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "ROWCOMPARE_NE";
  *((_QWORD *)v21 + 1) = 13;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_MinMaxOp._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_MinMaxOp._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "MIN_MAX_OP_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "IS_GREATEST";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "IS_LEAST";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  _QWORD *v37;
  char *v38;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SQLValueFunctionOp._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SQLValueFunctionOp._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D970;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "SQLVALUE_FUNCTION_OP_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 30;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "SVFOP_CURRENT_DATE";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "SVFOP_CURRENT_TIME";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "SVFOP_CURRENT_TIME_N";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "SVFOP_CURRENT_TIMESTAMP";
  *((_QWORD *)v17 + 1) = 23;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "SVFOP_CURRENT_TIMESTAMP_N";
  *((_QWORD *)v19 + 1) = 25;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "SVFOP_LOCALTIME";
  *((_QWORD *)v21 + 1) = 15;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "SVFOP_LOCALTIME_N";
  *((_QWORD *)v23 + 1) = 17;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 8;
  *(_QWORD *)v24 = "SVFOP_LOCALTIMESTAMP";
  *(_QWORD *)(v24 + 8) = 20;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 9;
  *(_QWORD *)v26 = "SVFOP_LOCALTIMESTAMP_N";
  *((_QWORD *)v26 + 1) = 22;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v6 + 10 * v3);
  v28 = (char *)v27 + *(int *)(v1 + 48);
  *v27 = 10;
  *(_QWORD *)v28 = "SVFOP_CURRENT_ROLE";
  *((_QWORD *)v28 + 1) = 18;
  v28[16] = 2;
  v10();
  v29 = (_QWORD *)(v6 + 11 * v3);
  v30 = (char *)v29 + *(int *)(v1 + 48);
  *v29 = 11;
  *(_QWORD *)v30 = "SVFOP_CURRENT_USER";
  *((_QWORD *)v30 + 1) = 18;
  v30[16] = 2;
  v10();
  v31 = (_QWORD *)(v6 + 12 * v3);
  v32 = (char *)v31 + *(int *)(v1 + 48);
  *v31 = 12;
  *(_QWORD *)v32 = "SVFOP_USER";
  *((_QWORD *)v32 + 1) = 10;
  v32[16] = 2;
  v10();
  v33 = (_QWORD *)(v6 + 13 * v3);
  v34 = (char *)v33 + *(int *)(v1 + 48);
  *v33 = 13;
  *(_QWORD *)v34 = "SVFOP_SESSION_USER";
  *((_QWORD *)v34 + 1) = 18;
  v34[16] = 2;
  v10();
  v35 = (_QWORD *)(v6 + 14 * v3);
  v36 = (char *)v35 + *(int *)(v1 + 48);
  *v35 = 14;
  *(_QWORD *)v36 = "SVFOP_CURRENT_CATALOG";
  *((_QWORD *)v36 + 1) = 21;
  v36[16] = 2;
  v10();
  v37 = (_QWORD *)(v6 + 15 * v3);
  v38 = (char *)v37 + *(int *)(v1 + 48);
  *v37 = 15;
  *(_QWORD *)v38 = "SVFOP_CURRENT_SCHEMA";
  *((_QWORD *)v38 + 1) = 20;
  v38[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_XmlExprOp._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_XmlExprOp._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_18DC0D960;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 0;
  *(_QWORD *)v6 = "XML_EXPR_OP_UNDEFINED";
  *(_QWORD *)(v6 + 8) = 21;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "IS_XMLCONCAT";
  *(_QWORD *)(v10 + 8) = 12;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "IS_XMLELEMENT";
  *((_QWORD *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "IS_XMLFOREST";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "IS_XMLPARSE";
  *((_QWORD *)v16 + 1) = 11;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "IS_XMLPI";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "IS_XMLROOT";
  *((_QWORD *)v20 + 1) = 10;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "IS_XMLSERIALIZE";
  *((_QWORD *)v22 + 1) = 15;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "IS_DOCUMENT";
  *(_QWORD *)(v23 + 8) = 11;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_XmlOptionType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_XmlOptionType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "XML_OPTION_TYPE_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 25;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "XMLOPTION_DOCUMENT";
  *((_QWORD *)v11 + 1) = 18;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "XMLOPTION_CONTENT";
  *(_QWORD *)(v12 + 8) = 17;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_NullTestType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_NullTestType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "NULL_TEST_TYPE_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 24;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "IS_NULL";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "IS_NOT_NULL";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_BoolTestType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_BoolTestType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "BOOL_TEST_TYPE_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 24;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "IS_TRUE";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "IS_NOT_TRUE";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "IS_FALSE";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "IS_NOT_FALSE";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "IS_UNKNOWN";
  *((_QWORD *)v19 + 1) = 10;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "IS_NOT_UNKNOWN";
  *((_QWORD *)v21 + 1) = 14;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CmdType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CmdType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D980;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "CMD_TYPE_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "CMD_UNKNOWN";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "CMD_SELECT";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "CMD_UPDATE";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "CMD_INSERT";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "CMD_DELETE";
  *((_QWORD *)v19 + 1) = 10;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "CMD_UTILITY";
  *((_QWORD *)v21 + 1) = 11;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "CMD_NOTHING";
  *((_QWORD *)v23 + 1) = 11;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_JoinType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_JoinType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_18DC0D960;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 0;
  *(_QWORD *)v6 = "JOIN_TYPE_UNDEFINED";
  *(_QWORD *)(v6 + 8) = 19;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "JOIN_INNER";
  *(_QWORD *)(v10 + 8) = 10;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "JOIN_LEFT";
  *((_QWORD *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "JOIN_FULL";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "JOIN_RIGHT";
  *((_QWORD *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "JOIN_SEMI";
  *((_QWORD *)v18 + 1) = 9;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "JOIN_ANTI";
  *((_QWORD *)v20 + 1) = 9;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "JOIN_UNIQUE_OUTER";
  *((_QWORD *)v22 + 1) = 17;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "JOIN_UNIQUE_INNER";
  *(_QWORD *)(v23 + 8) = 17;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AggStrategy._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AggStrategy._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "AGG_STRATEGY_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 22;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "AGG_PLAIN";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "AGG_SORTED";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "AGG_HASHED";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "AGG_MIXED";
  *(_QWORD *)(v16 + 8) = 9;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AggSplit._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AggSplit._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "AGG_SPLIT_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 19;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "AGGSPLIT_SIMPLE";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "AGGSPLIT_INITIAL_SERIAL";
  *((_QWORD *)v13 + 1) = 23;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "AGGSPLIT_FINAL_DESERIAL";
  *((_QWORD *)v15 + 1) = 23;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SetOpCmd._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SetOpCmd._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "SET_OP_CMD_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "SETOPCMD_INTERSECT";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "SETOPCMD_INTERSECT_ALL";
  *((_QWORD *)v13 + 1) = 22;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "SETOPCMD_EXCEPT";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "SETOPCMD_EXCEPT_ALL";
  *(_QWORD *)(v16 + 8) = 19;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SetOpStrategy._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SetOpStrategy._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "SET_OP_STRATEGY_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 25;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "SETOP_SORTED";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "SETOP_HASHED";
  *(_QWORD *)(v12 + 8) = 12;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_OnConflictAction._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_OnConflictAction._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "ON_CONFLICT_ACTION_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 28;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "ONCONFLICT_NONE";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "ONCONFLICT_NOTHING";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ONCONFLICT_UPDATE";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_LimitOption._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_LimitOption._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "LIMIT_OPTION_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 22;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "LIMIT_OPTION_DEFAULT";
  *(_QWORD *)(v11 + 8) = 20;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "LIMIT_OPTION_COUNT";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "LIMIT_OPTION_WITH_TIES";
  *((_QWORD *)v15 + 1) = 22;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_LockClauseStrength._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_LockClauseStrength._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "LOCK_CLAUSE_STRENGTH_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 30;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "LCS_NONE";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "LCS_FORKEYSHARE";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "LCS_FORSHARE";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "LCS_FORNOKEYUPDATE";
  *((_QWORD *)v17 + 1) = 18;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "LCS_FORUPDATE";
  *((_QWORD *)v19 + 1) = 13;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_LockWaitPolicy._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_LockWaitPolicy._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "LOCK_WAIT_POLICY_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 26;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "LockWaitBlock";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "LockWaitSkip";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "LockWaitError";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_LockTupleMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_LockTupleMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "LOCK_TUPLE_MODE_UNDEFINED";
  *(_QWORD *)(v7 + 8) = 25;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "LockTupleKeyShare";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "LockTupleShare";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "LockTupleNoKeyExclusive";
  *((_QWORD *)v15 + 1) = 23;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "LockTupleExclusive";
  *(_QWORD *)(v16 + 8) = 18;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_KeywordKind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_KeywordKind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "NO_KEYWORD";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "UNRESERVED_KEYWORD";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "COL_NAME_KEYWORD";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "TYPE_FUNC_NAME_KEYWORD";
  *((_QWORD *)v15 + 1) = 22;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "RESERVED_KEYWORD";
  *(_QWORD *)(v16 + 8) = 16;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  char *v85;
  _QWORD *v86;
  char *v87;
  _QWORD *v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  _QWORD *v92;
  char *v93;
  _QWORD *v94;
  char *v95;
  _QWORD *v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  _QWORD *v100;
  char *v101;
  _QWORD *v102;
  char *v103;
  _QWORD *v104;
  char *v105;
  _QWORD *v106;
  char *v107;
  _QWORD *v108;
  char *v109;
  _QWORD *v110;
  char *v111;
  _QWORD *v112;
  char *v113;
  _QWORD *v114;
  char *v115;
  _QWORD *v116;
  char *v117;
  _QWORD *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  _QWORD *v122;
  char *v123;
  _QWORD *v124;
  char *v125;
  _QWORD *v126;
  char *v127;
  _QWORD *v128;
  char *v129;
  _QWORD *v130;
  char *v131;
  unint64_t v132;
  _QWORD *v133;
  char *v134;
  _QWORD *v135;
  char *v136;
  _QWORD *v137;
  char *v138;
  _QWORD *v139;
  char *v140;
  _QWORD *v141;
  char *v142;
  _QWORD *v143;
  char *v144;
  _QWORD *v145;
  char *v146;
  _QWORD *v147;
  char *v148;
  _QWORD *v149;
  char *v150;
  _QWORD *v151;
  char *v152;
  _QWORD *v153;
  char *v154;
  _QWORD *v155;
  char *v156;
  _QWORD *v157;
  char *v158;
  _QWORD *v159;
  char *v160;
  _QWORD *v161;
  char *v162;
  _QWORD *v163;
  char *v164;
  _QWORD *v165;
  char *v166;
  _QWORD *v167;
  char *v168;
  _QWORD *v169;
  char *v170;
  _QWORD *v171;
  char *v172;
  _QWORD *v173;
  char *v174;
  _QWORD *v175;
  char *v176;
  _QWORD *v177;
  char *v178;
  _QWORD *v179;
  char *v180;
  _QWORD *v181;
  char *v182;
  _QWORD *v183;
  char *v184;
  _QWORD *v185;
  char *v186;
  _QWORD *v187;
  char *v188;
  _QWORD *v189;
  char *v190;
  _QWORD *v191;
  char *v192;
  _QWORD *v193;
  char *v194;
  _QWORD *v195;
  char *v196;
  _QWORD *v197;
  char *v198;
  _QWORD *v199;
  char *v200;
  _QWORD *v201;
  char *v202;
  _QWORD *v203;
  char *v204;
  _QWORD *v205;
  char *v206;
  _QWORD *v207;
  char *v208;
  _QWORD *v209;
  char *v210;
  _QWORD *v211;
  char *v212;
  _QWORD *v213;
  char *v214;
  _QWORD *v215;
  char *v216;
  _QWORD *v217;
  char *v218;
  _QWORD *v219;
  char *v220;
  _QWORD *v221;
  char *v222;
  _QWORD *v223;
  char *v224;
  _QWORD *v225;
  char *v226;
  _QWORD *v227;
  char *v228;
  _QWORD *v229;
  char *v230;
  _QWORD *v231;
  char *v232;
  _QWORD *v233;
  char *v234;
  _QWORD *v235;
  char *v236;
  _QWORD *v237;
  char *v238;
  _QWORD *v239;
  char *v240;
  _QWORD *v241;
  char *v242;
  _QWORD *v243;
  char *v244;
  _QWORD *v245;
  char *v246;
  _QWORD *v247;
  char *v248;
  _QWORD *v249;
  char *v250;
  _QWORD *v251;
  char *v252;
  _QWORD *v253;
  char *v254;
  _QWORD *v255;
  char *v256;
  _QWORD *v257;
  char *v258;
  unint64_t v259;
  _QWORD *v260;
  char *v261;
  _QWORD *v262;
  char *v263;
  _QWORD *v264;
  char *v265;
  _QWORD *v266;
  char *v267;
  _QWORD *v268;
  char *v269;
  _QWORD *v270;
  char *v271;
  _QWORD *v272;
  char *v273;
  _QWORD *v274;
  char *v275;
  _QWORD *v276;
  char *v277;
  _QWORD *v278;
  char *v279;
  _QWORD *v280;
  char *v281;
  _QWORD *v282;
  char *v283;
  _QWORD *v284;
  char *v285;
  _QWORD *v286;
  char *v287;
  _QWORD *v288;
  char *v289;
  _QWORD *v290;
  char *v291;
  _QWORD *v292;
  char *v293;
  _QWORD *v294;
  char *v295;
  _QWORD *v296;
  char *v297;
  _QWORD *v298;
  char *v299;
  _QWORD *v300;
  char *v301;
  _QWORD *v302;
  char *v303;
  _QWORD *v304;
  char *v305;
  _QWORD *v306;
  char *v307;
  _QWORD *v308;
  char *v309;
  _QWORD *v310;
  char *v311;
  _QWORD *v312;
  char *v313;
  _QWORD *v314;
  char *v315;
  _QWORD *v316;
  char *v317;
  _QWORD *v318;
  char *v319;
  _QWORD *v320;
  char *v321;
  _QWORD *v322;
  char *v323;
  _QWORD *v324;
  char *v325;
  _QWORD *v326;
  char *v327;
  _QWORD *v328;
  char *v329;
  _QWORD *v330;
  char *v331;
  _QWORD *v332;
  char *v333;
  _QWORD *v334;
  char *v335;
  _QWORD *v336;
  char *v337;
  _QWORD *v338;
  char *v339;
  _QWORD *v340;
  char *v341;
  _QWORD *v342;
  char *v343;
  _QWORD *v344;
  char *v345;
  _QWORD *v346;
  char *v347;
  _QWORD *v348;
  char *v349;
  _QWORD *v350;
  char *v351;
  _QWORD *v352;
  char *v353;
  _QWORD *v354;
  char *v355;
  _QWORD *v356;
  char *v357;
  _QWORD *v358;
  char *v359;
  _QWORD *v360;
  char *v361;
  _QWORD *v362;
  char *v363;
  _QWORD *v364;
  char *v365;
  _QWORD *v366;
  char *v367;
  _QWORD *v368;
  char *v369;
  _QWORD *v370;
  char *v371;
  _QWORD *v372;
  char *v373;
  _QWORD *v374;
  char *v375;
  _QWORD *v376;
  char *v377;
  _QWORD *v378;
  char *v379;
  _QWORD *v380;
  char *v381;
  _QWORD *v382;
  char *v383;
  _QWORD *v384;
  char *v385;
  _QWORD *v386;
  char *v387;
  _QWORD *v388;
  char *v389;
  _QWORD *v390;
  char *v391;
  _QWORD *v392;
  char *v393;
  _QWORD *v394;
  char *v395;
  _QWORD *v396;
  char *v397;
  _QWORD *v398;
  char *v399;
  _QWORD *v400;
  char *v401;
  _QWORD *v402;
  char *v403;
  _QWORD *v404;
  char *v405;
  _QWORD *v406;
  char *v407;
  _QWORD *v408;
  char *v409;
  _QWORD *v410;
  char *v411;
  _QWORD *v412;
  char *v413;
  _QWORD *v414;
  char *v415;
  _QWORD *v416;
  char *v417;
  _QWORD *v418;
  char *v419;
  _QWORD *v420;
  char *v421;
  _QWORD *v422;
  char *v423;
  _QWORD *v424;
  char *v425;
  _QWORD *v426;
  char *v427;
  _QWORD *v428;
  char *v429;
  _QWORD *v430;
  char *v431;
  _QWORD *v432;
  char *v433;
  _QWORD *v434;
  char *v435;
  _QWORD *v436;
  char *v437;
  _QWORD *v438;
  char *v439;
  _QWORD *v440;
  char *v441;
  _QWORD *v442;
  char *v443;
  _QWORD *v444;
  char *v445;
  _QWORD *v446;
  char *v447;
  _QWORD *v448;
  char *v449;
  _QWORD *v450;
  char *v451;
  _QWORD *v452;
  char *v453;
  _QWORD *v454;
  char *v455;
  _QWORD *v456;
  char *v457;
  _QWORD *v458;
  char *v459;
  _QWORD *v460;
  char *v461;
  _QWORD *v462;
  char *v463;
  _QWORD *v464;
  char *v465;
  _QWORD *v466;
  char *v467;
  _QWORD *v468;
  char *v469;
  _QWORD *v470;
  char *v471;
  _QWORD *v472;
  char *v473;
  _QWORD *v474;
  char *v475;
  _QWORD *v476;
  char *v477;
  _QWORD *v478;
  char *v479;
  _QWORD *v480;
  char *v481;
  _QWORD *v482;
  char *v483;
  _QWORD *v484;
  char *v485;
  _QWORD *v486;
  char *v487;
  _QWORD *v488;
  char *v489;
  _QWORD *v490;
  char *v491;
  _QWORD *v492;
  char *v493;
  _QWORD *v494;
  char *v495;
  _QWORD *v496;
  char *v497;
  _QWORD *v498;
  char *v499;
  _QWORD *v500;
  char *v501;
  _QWORD *v502;
  char *v503;
  _QWORD *v504;
  char *v505;
  _QWORD *v506;
  char *v507;
  _QWORD *v508;
  char *v509;
  _QWORD *v510;
  char *v511;
  _QWORD *v512;
  char *v513;
  unint64_t v514;
  _QWORD *v515;
  char *v516;
  _QWORD *v517;
  char *v518;
  _QWORD *v519;
  char *v520;
  _QWORD *v521;
  char *v522;
  _QWORD *v523;
  char *v524;
  _QWORD *v525;
  char *v526;
  _QWORD *v527;
  char *v528;
  _QWORD *v529;
  char *v530;
  _QWORD *v531;
  char *v532;
  _QWORD *v533;
  char *v534;
  _QWORD *v535;
  char *v536;
  _QWORD *v537;
  char *v538;
  _QWORD *v539;
  char *v540;
  _QWORD *v541;
  char *v542;
  _QWORD *v543;
  char *v544;
  _QWORD *v545;
  char *v546;
  _QWORD *v547;
  char *v548;
  _QWORD *v549;
  char *v550;
  _QWORD *v551;
  char *v552;
  _QWORD *v553;
  char *v554;
  _QWORD *v555;
  char *v556;
  _QWORD *v557;
  char *v558;
  _QWORD *v559;
  char *v560;
  _QWORD *v561;
  char *v562;
  _QWORD *v563;
  char *v564;
  _QWORD *v565;
  char *v566;
  _QWORD *v567;
  char *v568;
  _QWORD *v569;
  char *v570;
  _QWORD *v571;
  char *v572;
  _QWORD *v573;
  char *v574;
  _QWORD *v575;
  char *v576;
  _QWORD *v577;
  char *v578;
  _QWORD *v579;
  char *v580;
  _QWORD *v581;
  char *v582;
  _QWORD *v583;
  char *v584;
  _QWORD *v585;
  char *v586;
  _QWORD *v587;
  char *v588;
  _QWORD *v589;
  char *v590;
  _QWORD *v591;
  char *v592;
  _QWORD *v593;
  char *v594;
  _QWORD *v595;
  char *v596;
  _QWORD *v597;
  char *v598;
  _QWORD *v599;
  char *v600;
  _QWORD *v601;
  char *v602;
  _QWORD *v603;
  char *v604;
  _QWORD *v605;
  char *v606;
  _QWORD *v607;
  char *v608;
  _QWORD *v609;
  char *v610;
  _QWORD *v611;
  char *v612;
  _QWORD *v613;
  char *v614;
  _QWORD *v615;
  char *v616;
  _QWORD *v617;
  char *v618;
  _QWORD *v619;
  char *v620;
  _QWORD *v621;
  char *v622;
  _QWORD *v623;
  char *v624;
  _QWORD *v625;
  char *v626;
  _QWORD *v627;
  char *v628;
  _QWORD *v629;
  char *v630;
  _QWORD *v631;
  char *v632;
  _QWORD *v633;
  char *v634;
  _QWORD *v635;
  char *v636;
  _QWORD *v637;
  char *v638;
  _QWORD *v639;
  char *v640;
  _QWORD *v641;
  char *v642;
  _QWORD *v643;
  char *v644;
  _QWORD *v645;
  char *v646;
  _QWORD *v647;
  char *v648;
  _QWORD *v649;
  char *v650;
  _QWORD *v651;
  char *v652;
  _QWORD *v653;
  char *v654;
  _QWORD *v655;
  char *v656;
  _QWORD *v657;
  char *v658;
  _QWORD *v659;
  char *v660;
  _QWORD *v661;
  char *v662;
  _QWORD *v663;
  char *v664;
  _QWORD *v665;
  char *v666;
  _QWORD *v667;
  char *v668;
  _QWORD *v669;
  char *v670;
  _QWORD *v671;
  char *v672;
  _QWORD *v673;
  char *v674;
  _QWORD *v675;
  char *v676;
  _QWORD *v677;
  char *v678;
  _QWORD *v679;
  char *v680;
  _QWORD *v681;
  char *v682;
  _QWORD *v683;
  char *v684;
  _QWORD *v685;
  char *v686;
  _QWORD *v687;
  char *v688;
  _QWORD *v689;
  char *v690;
  _QWORD *v691;
  char *v692;
  _QWORD *v693;
  char *v694;
  _QWORD *v695;
  char *v696;
  _QWORD *v697;
  char *v698;
  _QWORD *v699;
  char *v700;
  _QWORD *v701;
  char *v702;
  _QWORD *v703;
  char *v704;
  _QWORD *v705;
  char *v706;
  _QWORD *v707;
  char *v708;
  _QWORD *v709;
  char *v710;
  _QWORD *v711;
  char *v712;
  _QWORD *v713;
  char *v714;
  _QWORD *v715;
  char *v716;
  _QWORD *v717;
  char *v718;
  _QWORD *v719;
  char *v720;
  _QWORD *v721;
  char *v722;
  _QWORD *v723;
  char *v724;
  _QWORD *v725;
  char *v726;
  _QWORD *v727;
  char *v728;
  _QWORD *v729;
  char *v730;
  _QWORD *v731;
  char *v732;
  _QWORD *v733;
  char *v734;
  _QWORD *v735;
  char *v736;
  _QWORD *v737;
  char *v738;
  _QWORD *v739;
  char *v740;
  _QWORD *v741;
  char *v742;
  _QWORD *v743;
  char *v744;
  _QWORD *v745;
  char *v746;
  _QWORD *v747;
  char *v748;
  _QWORD *v749;
  char *v750;
  _QWORD *v751;
  char *v752;
  _QWORD *v753;
  char *v754;
  _QWORD *v755;
  char *v756;
  _QWORD *v757;
  char *v758;
  _QWORD *v759;
  char *v760;
  _QWORD *v761;
  char *v762;
  _QWORD *v763;
  char *v764;
  _QWORD *v765;
  char *v766;
  _QWORD *v767;
  char *v768;
  _QWORD *v769;
  char *v770;
  _QWORD *v771;
  char *v772;
  _QWORD *v773;
  char *v774;
  _QWORD *v775;
  char *v776;
  _QWORD *v777;
  char *v778;
  _QWORD *v779;
  char *v780;
  _QWORD *v781;
  char *v782;
  _QWORD *v783;
  char *v784;
  _QWORD *v785;
  char *v786;
  _QWORD *v787;
  char *v788;
  _QWORD *v789;
  char *v790;
  _QWORD *v791;
  char *v792;
  _QWORD *v793;
  char *v794;
  _QWORD *v795;
  char *v796;
  _QWORD *v797;
  char *v798;
  _QWORD *v799;
  char *v800;
  _QWORD *v801;
  char *v802;
  _QWORD *v803;
  char *v804;
  _QWORD *v805;
  char *v806;
  _QWORD *v807;
  char *v808;
  _QWORD *v809;
  char *v810;
  _QWORD *v811;
  char *v812;
  _QWORD *v813;
  char *v814;
  _QWORD *v815;
  char *v816;
  _QWORD *v817;
  char *v818;
  _QWORD *v819;
  char *v820;
  _QWORD *v821;
  char *v822;
  _QWORD *v823;
  char *v824;
  _QWORD *v825;
  char *v826;
  _QWORD *v827;
  char *v828;
  _QWORD *v829;
  char *v830;
  _QWORD *v831;
  char *v832;
  _QWORD *v833;
  char *v834;
  _QWORD *v835;
  char *v836;
  _QWORD *v837;
  char *v838;
  _QWORD *v839;
  char *v840;
  _QWORD *v841;
  char *v842;
  _QWORD *v843;
  char *v844;
  _QWORD *v845;
  char *v846;
  _QWORD *v847;
  char *v848;
  _QWORD *v849;
  char *v850;
  _QWORD *v851;
  char *v852;
  _QWORD *v853;
  char *v854;
  _QWORD *v855;
  char *v856;
  _QWORD *v857;
  char *v858;
  _QWORD *v859;
  char *v860;
  _QWORD *v861;
  char *v862;
  _QWORD *v863;
  char *v864;
  _QWORD *v865;
  char *v866;
  _QWORD *v867;
  char *v868;
  _QWORD *v869;
  char *v870;
  _QWORD *v871;
  char *v872;
  _QWORD *v873;
  char *v874;
  _QWORD *v875;
  char *v876;
  _QWORD *v877;
  char *v878;
  _QWORD *v879;
  char *v880;
  _QWORD *v881;
  char *v882;
  _QWORD *v883;
  char *v884;
  _QWORD *v885;
  char *v886;
  _QWORD *v887;
  char *v888;
  _QWORD *v889;
  char *v890;
  _QWORD *v891;
  char *v892;
  _QWORD *v893;
  char *v894;
  _QWORD *v895;
  char *v896;
  _QWORD *v897;
  char *v898;
  _QWORD *v899;
  char *v900;
  _QWORD *v901;
  char *v902;
  _QWORD *v903;
  char *v904;
  _QWORD *v905;
  char *v906;
  _QWORD *v907;
  char *v908;
  _QWORD *v909;
  char *v910;
  _QWORD *v911;
  char *v912;
  _QWORD *v913;
  char *v914;
  _QWORD *v915;
  char *v916;
  _QWORD *v917;
  char *v918;
  _QWORD *v919;
  char *v920;
  _QWORD *v921;
  char *v922;
  _QWORD *v923;
  char *v924;
  _QWORD *v925;
  char *v926;
  _QWORD *v927;
  char *v928;
  _QWORD *v929;
  char *v930;
  _QWORD *v931;
  char *v932;
  _QWORD *v933;
  char *v934;
  _QWORD *v935;
  char *v936;
  _QWORD *v937;
  char *v938;
  _QWORD *v939;
  char *v940;
  _QWORD *v941;
  char *v942;
  _QWORD *v943;
  char *v944;
  _QWORD *v945;
  char *v946;
  _QWORD *v947;
  char *v948;
  _QWORD *v949;
  char *v950;
  _QWORD *v951;
  char *v952;
  _QWORD *v953;
  char *v954;
  _QWORD *v955;
  char *v956;
  _QWORD *v957;
  char *v958;
  _QWORD *v959;
  char *v960;
  _QWORD *v961;
  char *v962;
  _QWORD *v963;
  char *v964;
  _QWORD *v965;
  char *v966;
  _QWORD *v967;
  char *v968;
  _QWORD *v969;
  char *v970;
  _QWORD *v971;
  char *v972;
  _QWORD *v973;
  char *v974;
  _QWORD *v975;
  char *v976;
  _QWORD *v977;
  char *v978;
  _QWORD *v979;
  char *v980;
  _QWORD *v981;
  char *v982;
  _QWORD *v983;
  char *v984;
  _QWORD *v985;
  char *v986;
  _QWORD *v987;
  char *v988;
  uint64_t v990;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_Token._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_Token._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v990 = swift_allocObject();
  *(_OWORD *)(v990 + 16) = xmmword_18DC0D990;
  v5 = v990 + v4;
  v6 = v990 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v990 + v4) = 0;
  *(_QWORD *)v6 = "NUL";
  *(_QWORD *)(v6 + 8) = 3;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v990 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 37;
  *(_QWORD *)v10 = "ASCII_37";
  *(_QWORD *)(v10 + 8) = 8;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v990 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 40;
  *(_QWORD *)v12 = "ASCII_40";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v990 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 41;
  *(_QWORD *)v14 = "ASCII_41";
  *((_QWORD *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v990 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 42;
  *(_QWORD *)v16 = "ASCII_42";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v990 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 43;
  *(_QWORD *)v18 = "ASCII_43";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v990 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 44;
  *(_QWORD *)v20 = "ASCII_44";
  *((_QWORD *)v20 + 1) = 8;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v990 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 45;
  *(_QWORD *)v22 = "ASCII_45";
  *((_QWORD *)v22 + 1) = 8;
  v22[16] = 2;
  v9();
  v23 = v990 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 46;
  *(_QWORD *)v23 = "ASCII_46";
  *(_QWORD *)(v23 + 8) = 8;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v990 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 47;
  *(_QWORD *)v25 = "ASCII_47";
  *((_QWORD *)v25 + 1) = 8;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v990 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 58;
  *(_QWORD *)v27 = "ASCII_58";
  *((_QWORD *)v27 + 1) = 8;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v990 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 59;
  *(_QWORD *)v29 = "ASCII_59";
  *((_QWORD *)v29 + 1) = 8;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v990 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 60;
  *(_QWORD *)v31 = "ASCII_60";
  *((_QWORD *)v31 + 1) = 8;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v990 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 61;
  *(_QWORD *)v33 = "ASCII_61";
  *((_QWORD *)v33 + 1) = 8;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v990 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 62;
  *(_QWORD *)v35 = "ASCII_62";
  *((_QWORD *)v35 + 1) = 8;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v990 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 63;
  *(_QWORD *)v37 = "ASCII_63";
  *((_QWORD *)v37 + 1) = 8;
  v37[16] = 2;
  v9();
  v38 = v990 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 91;
  *(_QWORD *)v38 = "ASCII_91";
  *(_QWORD *)(v38 + 8) = 8;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v990 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 92;
  *(_QWORD *)v40 = "ASCII_92";
  *((_QWORD *)v40 + 1) = 8;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v990 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 93;
  *(_QWORD *)v42 = "ASCII_93";
  *((_QWORD *)v42 + 1) = 8;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v990 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 94;
  *(_QWORD *)v44 = "ASCII_94";
  *((_QWORD *)v44 + 1) = 8;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v990 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 258;
  *(_QWORD *)v46 = "IDENT";
  *((_QWORD *)v46 + 1) = 5;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v990 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 259;
  *(_QWORD *)v48 = "UIDENT";
  *((_QWORD *)v48 + 1) = 6;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v990 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 260;
  *(_QWORD *)v50 = "FCONST";
  *((_QWORD *)v50 + 1) = 6;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v990 + v4 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 261;
  *(_QWORD *)v52 = "SCONST";
  *((_QWORD *)v52 + 1) = 6;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v990 + v4 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 262;
  *(_QWORD *)v54 = "USCONST";
  *((_QWORD *)v54 + 1) = 7;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v990 + v4 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 263;
  *(_QWORD *)v56 = "BCONST";
  *((_QWORD *)v56 + 1) = 6;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v990 + v4 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 264;
  *(_QWORD *)v58 = "XCONST";
  *((_QWORD *)v58 + 1) = 6;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v990 + v4 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 265;
  *(_QWORD *)v60 = "Op";
  *((_QWORD *)v60 + 1) = 2;
  v60[16] = 2;
  v9();
  v61 = (_QWORD *)(v990 + v4 + 28 * v3);
  v62 = (char *)v61 + *(int *)(v1 + 48);
  *v61 = 266;
  *(_QWORD *)v62 = "ICONST";
  *((_QWORD *)v62 + 1) = 6;
  v62[16] = 2;
  v9();
  v63 = (_QWORD *)(v990 + v4 + 29 * v3);
  v64 = (char *)v63 + *(int *)(v1 + 48);
  *v63 = 267;
  *(_QWORD *)v64 = "PARAM";
  *((_QWORD *)v64 + 1) = 5;
  v64[16] = 2;
  v9();
  v65 = (_QWORD *)(v990 + v4 + 30 * v3);
  v66 = (char *)v65 + *(int *)(v1 + 48);
  *v65 = 268;
  *(_QWORD *)v66 = "TYPECAST";
  *((_QWORD *)v66 + 1) = 8;
  v66[16] = 2;
  v9();
  v67 = (_QWORD *)(v990 + v4 + 31 * v3);
  v68 = (char *)v67 + *(int *)(v1 + 48);
  *v67 = 269;
  *(_QWORD *)v68 = "DOT_DOT";
  *((_QWORD *)v68 + 1) = 7;
  v68[16] = 2;
  v9();
  v69 = v990 + v4 + 32 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 32 * v3) = 270;
  *(_QWORD *)v69 = "COLON_EQUALS";
  *(_QWORD *)(v69 + 8) = 12;
  *(_BYTE *)(v69 + 16) = 2;
  v9();
  v70 = (_QWORD *)(v990 + v4 + 33 * v3);
  v71 = (char *)v70 + *(int *)(v1 + 48);
  *v70 = 271;
  *(_QWORD *)v71 = "EQUALS_GREATER";
  *((_QWORD *)v71 + 1) = 14;
  v71[16] = 2;
  v9();
  v72 = (_QWORD *)(v990 + v4 + 34 * v3);
  v73 = (char *)v72 + *(int *)(v1 + 48);
  *v72 = 272;
  *(_QWORD *)v73 = "LESS_EQUALS";
  *((_QWORD *)v73 + 1) = 11;
  v73[16] = 2;
  v9();
  v74 = (_QWORD *)(v990 + v4 + 35 * v3);
  v75 = (char *)v74 + *(int *)(v1 + 48);
  *v74 = 273;
  *(_QWORD *)v75 = "GREATER_EQUALS";
  *((_QWORD *)v75 + 1) = 14;
  v75[16] = 2;
  v9();
  v76 = (_QWORD *)(v990 + v4 + 36 * v3);
  v77 = (char *)v76 + *(int *)(v1 + 48);
  *v76 = 274;
  *(_QWORD *)v77 = "NOT_EQUALS";
  *((_QWORD *)v77 + 1) = 10;
  v77[16] = 2;
  v9();
  v78 = (_QWORD *)(v990 + v4 + 37 * v3);
  v79 = (char *)v78 + *(int *)(v1 + 48);
  *v78 = 275;
  *(_QWORD *)v79 = "SQL_COMMENT";
  *((_QWORD *)v79 + 1) = 11;
  v79[16] = 2;
  v9();
  v80 = (_QWORD *)(v990 + v4 + 38 * v3);
  v81 = (char *)v80 + *(int *)(v1 + 48);
  *v80 = 276;
  *(_QWORD *)v81 = "C_COMMENT";
  *((_QWORD *)v81 + 1) = 9;
  v81[16] = 2;
  v9();
  v82 = (_QWORD *)(v990 + v4 + 39 * v3);
  v83 = (char *)v82 + *(int *)(v1 + 48);
  *v82 = 277;
  *(_QWORD *)v83 = "ABORT_P";
  *((_QWORD *)v83 + 1) = 7;
  v83[16] = 2;
  v9();
  v84 = (_QWORD *)(v990 + v4 + 40 * v3);
  v85 = (char *)v84 + *(int *)(v1 + 48);
  *v84 = 278;
  *(_QWORD *)v85 = "ABSOLUTE_P";
  *((_QWORD *)v85 + 1) = 10;
  v85[16] = 2;
  v9();
  v86 = (_QWORD *)(v990 + v4 + 41 * v3);
  v87 = (char *)v86 + *(int *)(v1 + 48);
  *v86 = 279;
  *(_QWORD *)v87 = "ACCESS";
  *((_QWORD *)v87 + 1) = 6;
  v87[16] = 2;
  v9();
  v88 = (_QWORD *)(v990 + v4 + 42 * v3);
  v89 = (char *)v88 + *(int *)(v1 + 48);
  *v88 = 280;
  *(_QWORD *)v89 = "ACTION";
  *((_QWORD *)v89 + 1) = 6;
  v89[16] = 2;
  v9();
  v90 = (_QWORD *)(v990 + v4 + 43 * v3);
  v91 = (char *)v90 + *(int *)(v1 + 48);
  *v90 = 281;
  *(_QWORD *)v91 = "ADD_P";
  *((_QWORD *)v91 + 1) = 5;
  v91[16] = 2;
  v9();
  v92 = (_QWORD *)(v990 + v4 + 44 * v3);
  v93 = (char *)v92 + *(int *)(v1 + 48);
  *v92 = 282;
  *(_QWORD *)v93 = "ADMIN";
  *((_QWORD *)v93 + 1) = 5;
  v93[16] = 2;
  v9();
  v94 = (_QWORD *)(v990 + v4 + 45 * v3);
  v95 = (char *)v94 + *(int *)(v1 + 48);
  *v94 = 283;
  *(_QWORD *)v95 = "AFTER";
  *((_QWORD *)v95 + 1) = 5;
  v95[16] = 2;
  v9();
  v96 = (_QWORD *)(v990 + v4 + 46 * v3);
  v97 = (char *)v96 + *(int *)(v1 + 48);
  *v96 = 284;
  *(_QWORD *)v97 = "AGGREGATE";
  *((_QWORD *)v97 + 1) = 9;
  v97[16] = 2;
  v9();
  v98 = (_QWORD *)(v990 + v4 + 47 * v3);
  v99 = (char *)v98 + *(int *)(v1 + 48);
  *v98 = 285;
  *(_QWORD *)v99 = "ALL";
  *((_QWORD *)v99 + 1) = 3;
  v99[16] = 2;
  v9();
  v100 = (_QWORD *)(v990 + v4 + 48 * v3);
  v101 = (char *)v100 + *(int *)(v1 + 48);
  *v100 = 286;
  *(_QWORD *)v101 = "ALSO";
  *((_QWORD *)v101 + 1) = 4;
  v101[16] = 2;
  v9();
  v102 = (_QWORD *)(v990 + v4 + 49 * v3);
  v103 = (char *)v102 + *(int *)(v1 + 48);
  *v102 = 287;
  *(_QWORD *)v103 = "ALTER";
  *((_QWORD *)v103 + 1) = 5;
  v103[16] = 2;
  v9();
  v104 = (_QWORD *)(v990 + v4 + 50 * v3);
  v105 = (char *)v104 + *(int *)(v1 + 48);
  *v104 = 288;
  *(_QWORD *)v105 = "ALWAYS";
  *((_QWORD *)v105 + 1) = 6;
  v105[16] = 2;
  v9();
  v106 = (_QWORD *)(v990 + v4 + 51 * v3);
  v107 = (char *)v106 + *(int *)(v1 + 48);
  *v106 = 289;
  *(_QWORD *)v107 = "ANALYSE";
  *((_QWORD *)v107 + 1) = 7;
  v107[16] = 2;
  v9();
  v108 = (_QWORD *)(v990 + v4 + 52 * v3);
  v109 = (char *)v108 + *(int *)(v1 + 48);
  *v108 = 290;
  *(_QWORD *)v109 = "ANALYZE";
  *((_QWORD *)v109 + 1) = 7;
  v109[16] = 2;
  v9();
  v110 = (_QWORD *)(v990 + v4 + 53 * v3);
  v111 = (char *)v110 + *(int *)(v1 + 48);
  *v110 = 291;
  *(_QWORD *)v111 = "AND";
  *((_QWORD *)v111 + 1) = 3;
  v111[16] = 2;
  v9();
  v112 = (_QWORD *)(v990 + v4 + 54 * v3);
  v113 = (char *)v112 + *(int *)(v1 + 48);
  *v112 = 292;
  *(_QWORD *)v113 = "ANY";
  *((_QWORD *)v113 + 1) = 3;
  v113[16] = 2;
  v9();
  v114 = (_QWORD *)(v990 + v4 + 55 * v3);
  v115 = (char *)v114 + *(int *)(v1 + 48);
  *v114 = 293;
  *(_QWORD *)v115 = "ARRAY";
  *((_QWORD *)v115 + 1) = 5;
  v115[16] = 2;
  v9();
  v116 = (_QWORD *)(v990 + v4 + 56 * v3);
  v117 = (char *)v116 + *(int *)(v1 + 48);
  *v116 = 294;
  *(_QWORD *)v117 = "AS";
  *((_QWORD *)v117 + 1) = 2;
  v117[16] = 2;
  v9();
  v118 = (_QWORD *)(v990 + v4 + 57 * v3);
  v119 = (char *)v118 + *(int *)(v1 + 48);
  *v118 = 295;
  *(_QWORD *)v119 = "ASC";
  *((_QWORD *)v119 + 1) = 3;
  v119[16] = 2;
  v9();
  v120 = (_QWORD *)(v990 + v4 + 58 * v3);
  v121 = (char *)v120 + *(int *)(v1 + 48);
  *v120 = 296;
  *(_QWORD *)v121 = "ASSERTION";
  *((_QWORD *)v121 + 1) = 9;
  v121[16] = 2;
  v9();
  v122 = (_QWORD *)(v990 + v4 + 59 * v3);
  v123 = (char *)v122 + *(int *)(v1 + 48);
  *v122 = 297;
  *(_QWORD *)v123 = "ASSIGNMENT";
  *((_QWORD *)v123 + 1) = 10;
  v123[16] = 2;
  v9();
  v124 = (_QWORD *)(v990 + v4 + 60 * v3);
  v125 = (char *)v124 + *(int *)(v1 + 48);
  *v124 = 298;
  *(_QWORD *)v125 = "ASYMMETRIC";
  *((_QWORD *)v125 + 1) = 10;
  v125[16] = 2;
  v9();
  v126 = (_QWORD *)(v990 + v4 + 61 * v3);
  v127 = (char *)v126 + *(int *)(v1 + 48);
  *v126 = 299;
  *(_QWORD *)v127 = "AT";
  *((_QWORD *)v127 + 1) = 2;
  v127[16] = 2;
  v9();
  v128 = (_QWORD *)(v990 + v4 + 62 * v3);
  v129 = (char *)v128 + *(int *)(v1 + 48);
  *v128 = 300;
  *(_QWORD *)v129 = "ATTACH";
  *((_QWORD *)v129 + 1) = 6;
  v129[16] = 2;
  v9();
  v130 = (_QWORD *)(v990 + v4 + 63 * v3);
  v131 = (char *)v130 + *(int *)(v1 + 48);
  *v130 = 301;
  *(_QWORD *)v131 = "ATTRIBUTE";
  *((_QWORD *)v131 + 1) = 9;
  v131[16] = 2;
  v9();
  v132 = v990 + v4 + (v3 << 6) + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + (v3 << 6)) = 302;
  *(_QWORD *)v132 = "AUTHORIZATION";
  *(_QWORD *)(v132 + 8) = 13;
  *(_BYTE *)(v132 + 16) = 2;
  v9();
  v133 = (_QWORD *)(v990 + v4 + 65 * v3);
  v134 = (char *)v133 + *(int *)(v1 + 48);
  *v133 = 303;
  *(_QWORD *)v134 = "BACKWARD";
  *((_QWORD *)v134 + 1) = 8;
  v134[16] = 2;
  v9();
  v135 = (_QWORD *)(v990 + v4 + 66 * v3);
  v136 = (char *)v135 + *(int *)(v1 + 48);
  *v135 = 304;
  *(_QWORD *)v136 = "BEFORE";
  *((_QWORD *)v136 + 1) = 6;
  v136[16] = 2;
  v9();
  v137 = (_QWORD *)(v990 + v4 + 67 * v3);
  v138 = (char *)v137 + *(int *)(v1 + 48);
  *v137 = 305;
  *(_QWORD *)v138 = "BEGIN_P";
  *((_QWORD *)v138 + 1) = 7;
  v138[16] = 2;
  v9();
  v139 = (_QWORD *)(v990 + v4 + 68 * v3);
  v140 = (char *)v139 + *(int *)(v1 + 48);
  *v139 = 306;
  *(_QWORD *)v140 = "BETWEEN";
  *((_QWORD *)v140 + 1) = 7;
  v140[16] = 2;
  v9();
  v141 = (_QWORD *)(v990 + v4 + 69 * v3);
  v142 = (char *)v141 + *(int *)(v1 + 48);
  *v141 = 307;
  *(_QWORD *)v142 = "BIGINT";
  *((_QWORD *)v142 + 1) = 6;
  v142[16] = 2;
  v9();
  v143 = (_QWORD *)(v990 + v4 + 70 * v3);
  v144 = (char *)v143 + *(int *)(v1 + 48);
  *v143 = 308;
  *(_QWORD *)v144 = "BINARY";
  *((_QWORD *)v144 + 1) = 6;
  v144[16] = 2;
  v9();
  v145 = (_QWORD *)(v990 + v4 + 71 * v3);
  v146 = (char *)v145 + *(int *)(v1 + 48);
  *v145 = 309;
  *(_QWORD *)v146 = "BIT";
  *((_QWORD *)v146 + 1) = 3;
  v146[16] = 2;
  v9();
  v147 = (_QWORD *)(v990 + v4 + 72 * v3);
  v148 = (char *)v147 + *(int *)(v1 + 48);
  *v147 = 310;
  *(_QWORD *)v148 = "BOOLEAN_P";
  *((_QWORD *)v148 + 1) = 9;
  v148[16] = 2;
  v9();
  v149 = (_QWORD *)(v990 + v4 + 73 * v3);
  v150 = (char *)v149 + *(int *)(v1 + 48);
  *v149 = 311;
  *(_QWORD *)v150 = "BOTH";
  *((_QWORD *)v150 + 1) = 4;
  v150[16] = 2;
  v9();
  v151 = (_QWORD *)(v990 + v4 + 74 * v3);
  v152 = (char *)v151 + *(int *)(v1 + 48);
  *v151 = 312;
  *(_QWORD *)v152 = "BY";
  *((_QWORD *)v152 + 1) = 2;
  v152[16] = 2;
  v9();
  v153 = (_QWORD *)(v990 + v4 + 75 * v3);
  v154 = (char *)v153 + *(int *)(v1 + 48);
  *v153 = 313;
  *(_QWORD *)v154 = "CACHE";
  *((_QWORD *)v154 + 1) = 5;
  v154[16] = 2;
  v9();
  v155 = (_QWORD *)(v990 + v4 + 76 * v3);
  v156 = (char *)v155 + *(int *)(v1 + 48);
  *v155 = 314;
  *(_QWORD *)v156 = "CALL";
  *((_QWORD *)v156 + 1) = 4;
  v156[16] = 2;
  v9();
  v157 = (_QWORD *)(v990 + v4 + 77 * v3);
  v158 = (char *)v157 + *(int *)(v1 + 48);
  *v157 = 315;
  *(_QWORD *)v158 = "CALLED";
  *((_QWORD *)v158 + 1) = 6;
  v158[16] = 2;
  v9();
  v159 = (_QWORD *)(v990 + v4 + 78 * v3);
  v160 = (char *)v159 + *(int *)(v1 + 48);
  *v159 = 316;
  *(_QWORD *)v160 = "CASCADE";
  *((_QWORD *)v160 + 1) = 7;
  v160[16] = 2;
  v9();
  v161 = (_QWORD *)(v990 + v4 + 79 * v3);
  v162 = (char *)v161 + *(int *)(v1 + 48);
  *v161 = 317;
  *(_QWORD *)v162 = "CASCADED";
  *((_QWORD *)v162 + 1) = 8;
  v162[16] = 2;
  v9();
  v163 = (_QWORD *)(v990 + v4 + 80 * v3);
  v164 = (char *)v163 + *(int *)(v1 + 48);
  *v163 = 318;
  *(_QWORD *)v164 = "CASE";
  *((_QWORD *)v164 + 1) = 4;
  v164[16] = 2;
  v9();
  v165 = (_QWORD *)(v990 + v4 + 81 * v3);
  v166 = (char *)v165 + *(int *)(v1 + 48);
  *v165 = 319;
  *(_QWORD *)v166 = "CAST";
  *((_QWORD *)v166 + 1) = 4;
  v166[16] = 2;
  v9();
  v167 = (_QWORD *)(v990 + v4 + 82 * v3);
  v168 = (char *)v167 + *(int *)(v1 + 48);
  *v167 = 320;
  *(_QWORD *)v168 = "CATALOG_P";
  *((_QWORD *)v168 + 1) = 9;
  v168[16] = 2;
  v9();
  v169 = (_QWORD *)(v990 + v4 + 83 * v3);
  v170 = (char *)v169 + *(int *)(v1 + 48);
  *v169 = 321;
  *(_QWORD *)v170 = "CHAIN";
  *((_QWORD *)v170 + 1) = 5;
  v170[16] = 2;
  v9();
  v171 = (_QWORD *)(v990 + v4 + 84 * v3);
  v172 = (char *)v171 + *(int *)(v1 + 48);
  *v171 = 322;
  *(_QWORD *)v172 = "CHAR_P";
  *((_QWORD *)v172 + 1) = 6;
  v172[16] = 2;
  v9();
  v173 = (_QWORD *)(v990 + v4 + 85 * v3);
  v174 = (char *)v173 + *(int *)(v1 + 48);
  *v173 = 323;
  *(_QWORD *)v174 = "CHARACTER";
  *((_QWORD *)v174 + 1) = 9;
  v174[16] = 2;
  v9();
  v175 = (_QWORD *)(v990 + v4 + 86 * v3);
  v176 = (char *)v175 + *(int *)(v1 + 48);
  *v175 = 324;
  *(_QWORD *)v176 = "CHARACTERISTICS";
  *((_QWORD *)v176 + 1) = 15;
  v176[16] = 2;
  v9();
  v177 = (_QWORD *)(v990 + v4 + 87 * v3);
  v178 = (char *)v177 + *(int *)(v1 + 48);
  *v177 = 325;
  *(_QWORD *)v178 = "CHECK";
  *((_QWORD *)v178 + 1) = 5;
  v178[16] = 2;
  v9();
  v179 = (_QWORD *)(v990 + v4 + 88 * v3);
  v180 = (char *)v179 + *(int *)(v1 + 48);
  *v179 = 326;
  *(_QWORD *)v180 = "CHECKPOINT";
  *((_QWORD *)v180 + 1) = 10;
  v180[16] = 2;
  v9();
  v181 = (_QWORD *)(v990 + v4 + 89 * v3);
  v182 = (char *)v181 + *(int *)(v1 + 48);
  *v181 = 327;
  *(_QWORD *)v182 = "CLASS";
  *((_QWORD *)v182 + 1) = 5;
  v182[16] = 2;
  v9();
  v183 = (_QWORD *)(v990 + v4 + 90 * v3);
  v184 = (char *)v183 + *(int *)(v1 + 48);
  *v183 = 328;
  *(_QWORD *)v184 = "CLOSE";
  *((_QWORD *)v184 + 1) = 5;
  v184[16] = 2;
  v9();
  v185 = (_QWORD *)(v990 + v4 + 91 * v3);
  v186 = (char *)v185 + *(int *)(v1 + 48);
  *v185 = 329;
  *(_QWORD *)v186 = "CLUSTER";
  *((_QWORD *)v186 + 1) = 7;
  v186[16] = 2;
  v9();
  v187 = (_QWORD *)(v990 + v4 + 92 * v3);
  v188 = (char *)v187 + *(int *)(v1 + 48);
  *v187 = 330;
  *(_QWORD *)v188 = "COALESCE";
  *((_QWORD *)v188 + 1) = 8;
  v188[16] = 2;
  v9();
  v189 = (_QWORD *)(v990 + v4 + 93 * v3);
  v190 = (char *)v189 + *(int *)(v1 + 48);
  *v189 = 331;
  *(_QWORD *)v190 = "COLLATE";
  *((_QWORD *)v190 + 1) = 7;
  v190[16] = 2;
  v9();
  v191 = (_QWORD *)(v990 + v4 + 94 * v3);
  v192 = (char *)v191 + *(int *)(v1 + 48);
  *v191 = 332;
  *(_QWORD *)v192 = "COLLATION";
  *((_QWORD *)v192 + 1) = 9;
  v192[16] = 2;
  v9();
  v193 = (_QWORD *)(v990 + v4 + 95 * v3);
  v194 = (char *)v193 + *(int *)(v1 + 48);
  *v193 = 333;
  *(_QWORD *)v194 = "COLUMN";
  *((_QWORD *)v194 + 1) = 6;
  v194[16] = 2;
  v9();
  v195 = (_QWORD *)(v990 + v4 + 96 * v3);
  v196 = (char *)v195 + *(int *)(v1 + 48);
  *v195 = 334;
  *(_QWORD *)v196 = "COLUMNS";
  *((_QWORD *)v196 + 1) = 7;
  v196[16] = 2;
  v9();
  v197 = (_QWORD *)(v990 + v4 + 97 * v3);
  v198 = (char *)v197 + *(int *)(v1 + 48);
  *v197 = 335;
  *(_QWORD *)v198 = "COMMENT";
  *((_QWORD *)v198 + 1) = 7;
  v198[16] = 2;
  v9();
  v199 = (_QWORD *)(v990 + v4 + 98 * v3);
  v200 = (char *)v199 + *(int *)(v1 + 48);
  *v199 = 336;
  *(_QWORD *)v200 = "COMMENTS";
  *((_QWORD *)v200 + 1) = 8;
  v200[16] = 2;
  v9();
  v201 = (_QWORD *)(v990 + v4 + 99 * v3);
  v202 = (char *)v201 + *(int *)(v1 + 48);
  *v201 = 337;
  *(_QWORD *)v202 = "COMMIT";
  *((_QWORD *)v202 + 1) = 6;
  v202[16] = 2;
  v9();
  v203 = (_QWORD *)(v990 + v4 + 100 * v3);
  v204 = (char *)v203 + *(int *)(v1 + 48);
  *v203 = 338;
  *(_QWORD *)v204 = "COMMITTED";
  *((_QWORD *)v204 + 1) = 9;
  v204[16] = 2;
  v9();
  v205 = (_QWORD *)(v990 + v4 + 101 * v3);
  v206 = (char *)v205 + *(int *)(v1 + 48);
  *v205 = 339;
  *(_QWORD *)v206 = "CONCURRENTLY";
  *((_QWORD *)v206 + 1) = 12;
  v206[16] = 2;
  v9();
  v207 = (_QWORD *)(v990 + v4 + 102 * v3);
  v208 = (char *)v207 + *(int *)(v1 + 48);
  *v207 = 340;
  *(_QWORD *)v208 = "CONFIGURATION";
  *((_QWORD *)v208 + 1) = 13;
  v208[16] = 2;
  v9();
  v209 = (_QWORD *)(v990 + v4 + 103 * v3);
  v210 = (char *)v209 + *(int *)(v1 + 48);
  *v209 = 341;
  *(_QWORD *)v210 = "CONFLICT";
  *((_QWORD *)v210 + 1) = 8;
  v210[16] = 2;
  v9();
  v211 = (_QWORD *)(v990 + v4 + 104 * v3);
  v212 = (char *)v211 + *(int *)(v1 + 48);
  *v211 = 342;
  *(_QWORD *)v212 = "CONNECTION";
  *((_QWORD *)v212 + 1) = 10;
  v212[16] = 2;
  v9();
  v213 = (_QWORD *)(v990 + v4 + 105 * v3);
  v214 = (char *)v213 + *(int *)(v1 + 48);
  *v213 = 343;
  *(_QWORD *)v214 = "CONSTRAINT";
  *((_QWORD *)v214 + 1) = 10;
  v214[16] = 2;
  v9();
  v215 = (_QWORD *)(v990 + v4 + 106 * v3);
  v216 = (char *)v215 + *(int *)(v1 + 48);
  *v215 = 344;
  *(_QWORD *)v216 = "CONSTRAINTS";
  *((_QWORD *)v216 + 1) = 11;
  v216[16] = 2;
  v9();
  v217 = (_QWORD *)(v990 + v4 + 107 * v3);
  v218 = (char *)v217 + *(int *)(v1 + 48);
  *v217 = 345;
  *(_QWORD *)v218 = "CONTENT_P";
  *((_QWORD *)v218 + 1) = 9;
  v218[16] = 2;
  v9();
  v219 = (_QWORD *)(v990 + v4 + 108 * v3);
  v220 = (char *)v219 + *(int *)(v1 + 48);
  *v219 = 346;
  *(_QWORD *)v220 = "CONTINUE_P";
  *((_QWORD *)v220 + 1) = 10;
  v220[16] = 2;
  v9();
  v221 = (_QWORD *)(v990 + v4 + 109 * v3);
  v222 = (char *)v221 + *(int *)(v1 + 48);
  *v221 = 347;
  *(_QWORD *)v222 = "CONVERSION_P";
  *((_QWORD *)v222 + 1) = 12;
  v222[16] = 2;
  v9();
  v223 = (_QWORD *)(v990 + v4 + 110 * v3);
  v224 = (char *)v223 + *(int *)(v1 + 48);
  *v223 = 348;
  *(_QWORD *)v224 = "COPY";
  *((_QWORD *)v224 + 1) = 4;
  v224[16] = 2;
  v9();
  v225 = (_QWORD *)(v990 + v4 + 111 * v3);
  v226 = (char *)v225 + *(int *)(v1 + 48);
  *v225 = 349;
  *(_QWORD *)v226 = "COST";
  *((_QWORD *)v226 + 1) = 4;
  v226[16] = 2;
  v9();
  v227 = (_QWORD *)(v990 + v4 + 112 * v3);
  v228 = (char *)v227 + *(int *)(v1 + 48);
  *v227 = 350;
  *(_QWORD *)v228 = "CREATE";
  *((_QWORD *)v228 + 1) = 6;
  v228[16] = 2;
  v9();
  v229 = (_QWORD *)(v990 + v4 + 113 * v3);
  v230 = (char *)v229 + *(int *)(v1 + 48);
  *v229 = 351;
  *(_QWORD *)v230 = "CROSS";
  *((_QWORD *)v230 + 1) = 5;
  v230[16] = 2;
  v9();
  v231 = (_QWORD *)(v990 + v4 + 114 * v3);
  v232 = (char *)v231 + *(int *)(v1 + 48);
  *v231 = 352;
  *(_QWORD *)v232 = "CSV";
  *((_QWORD *)v232 + 1) = 3;
  v232[16] = 2;
  v9();
  v233 = (_QWORD *)(v990 + v4 + 115 * v3);
  v234 = (char *)v233 + *(int *)(v1 + 48);
  *v233 = 353;
  *(_QWORD *)v234 = "CUBE";
  *((_QWORD *)v234 + 1) = 4;
  v234[16] = 2;
  v9();
  v235 = (_QWORD *)(v990 + v4 + 116 * v3);
  v236 = (char *)v235 + *(int *)(v1 + 48);
  *v235 = 354;
  *(_QWORD *)v236 = "CURRENT_P";
  *((_QWORD *)v236 + 1) = 9;
  v236[16] = 2;
  v9();
  v237 = (_QWORD *)(v990 + v4 + 117 * v3);
  v238 = (char *)v237 + *(int *)(v1 + 48);
  *v237 = 355;
  *(_QWORD *)v238 = "CURRENT_CATALOG";
  *((_QWORD *)v238 + 1) = 15;
  v238[16] = 2;
  v9();
  v239 = (_QWORD *)(v990 + v4 + 118 * v3);
  v240 = (char *)v239 + *(int *)(v1 + 48);
  *v239 = 356;
  *(_QWORD *)v240 = "CURRENT_DATE";
  *((_QWORD *)v240 + 1) = 12;
  v240[16] = 2;
  v9();
  v241 = (_QWORD *)(v990 + v4 + 119 * v3);
  v242 = (char *)v241 + *(int *)(v1 + 48);
  *v241 = 357;
  *(_QWORD *)v242 = "CURRENT_ROLE";
  *((_QWORD *)v242 + 1) = 12;
  v242[16] = 2;
  v9();
  v243 = (_QWORD *)(v990 + v4 + 120 * v3);
  v244 = (char *)v243 + *(int *)(v1 + 48);
  *v243 = 358;
  *(_QWORD *)v244 = "CURRENT_SCHEMA";
  *((_QWORD *)v244 + 1) = 14;
  v244[16] = 2;
  v9();
  v245 = (_QWORD *)(v990 + v4 + 121 * v3);
  v246 = (char *)v245 + *(int *)(v1 + 48);
  *v245 = 359;
  *(_QWORD *)v246 = "CURRENT_TIME";
  *((_QWORD *)v246 + 1) = 12;
  v246[16] = 2;
  v9();
  v247 = (_QWORD *)(v990 + v4 + 122 * v3);
  v248 = (char *)v247 + *(int *)(v1 + 48);
  *v247 = 360;
  *(_QWORD *)v248 = "CURRENT_TIMESTAMP";
  *((_QWORD *)v248 + 1) = 17;
  v248[16] = 2;
  v9();
  v249 = (_QWORD *)(v990 + v4 + 123 * v3);
  v250 = (char *)v249 + *(int *)(v1 + 48);
  *v249 = 361;
  *(_QWORD *)v250 = "CURRENT_USER";
  *((_QWORD *)v250 + 1) = 12;
  v250[16] = 2;
  v9();
  v251 = (_QWORD *)(v990 + v4 + 124 * v3);
  v252 = (char *)v251 + *(int *)(v1 + 48);
  *v251 = 362;
  *(_QWORD *)v252 = "CURSOR";
  *((_QWORD *)v252 + 1) = 6;
  v252[16] = 2;
  v9();
  v253 = (_QWORD *)(v990 + v4 + 125 * v3);
  v254 = (char *)v253 + *(int *)(v1 + 48);
  *v253 = 363;
  *(_QWORD *)v254 = "CYCLE";
  *((_QWORD *)v254 + 1) = 5;
  v254[16] = 2;
  v9();
  v255 = (_QWORD *)(v990 + v4 + 126 * v3);
  v256 = (char *)v255 + *(int *)(v1 + 48);
  *v255 = 364;
  *(_QWORD *)v256 = "DATA_P";
  *((_QWORD *)v256 + 1) = 6;
  v256[16] = 2;
  v9();
  v257 = (_QWORD *)(v990 + v4 + 127 * v3);
  v258 = (char *)v257 + *(int *)(v1 + 48);
  *v257 = 365;
  *(_QWORD *)v258 = "DATABASE";
  *((_QWORD *)v258 + 1) = 8;
  v258[16] = 2;
  v9();
  v259 = v990 + v4 + (v3 << 7) + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + (v3 << 7)) = 366;
  *(_QWORD *)v259 = "DAY_P";
  *(_QWORD *)(v259 + 8) = 5;
  *(_BYTE *)(v259 + 16) = 2;
  v9();
  v260 = (_QWORD *)(v990 + v4 + 129 * v3);
  v261 = (char *)v260 + *(int *)(v1 + 48);
  *v260 = 367;
  *(_QWORD *)v261 = "DEALLOCATE";
  *((_QWORD *)v261 + 1) = 10;
  v261[16] = 2;
  v9();
  v262 = (_QWORD *)(v990 + v4 + 130 * v3);
  v263 = (char *)v262 + *(int *)(v1 + 48);
  *v262 = 368;
  *(_QWORD *)v263 = "DEC";
  *((_QWORD *)v263 + 1) = 3;
  v263[16] = 2;
  v9();
  v264 = (_QWORD *)(v990 + v4 + 131 * v3);
  v265 = (char *)v264 + *(int *)(v1 + 48);
  *v264 = 369;
  *(_QWORD *)v265 = "DECIMAL_P";
  *((_QWORD *)v265 + 1) = 9;
  v265[16] = 2;
  v9();
  v266 = (_QWORD *)(v990 + v4 + 132 * v3);
  v267 = (char *)v266 + *(int *)(v1 + 48);
  *v266 = 370;
  *(_QWORD *)v267 = "DECLARE";
  *((_QWORD *)v267 + 1) = 7;
  v267[16] = 2;
  v9();
  v268 = (_QWORD *)(v990 + v4 + 133 * v3);
  v269 = (char *)v268 + *(int *)(v1 + 48);
  *v268 = 371;
  *(_QWORD *)v269 = "DEFAULT";
  *((_QWORD *)v269 + 1) = 7;
  v269[16] = 2;
  v9();
  v270 = (_QWORD *)(v990 + v4 + 134 * v3);
  v271 = (char *)v270 + *(int *)(v1 + 48);
  *v270 = 372;
  *(_QWORD *)v271 = "DEFAULTS";
  *((_QWORD *)v271 + 1) = 8;
  v271[16] = 2;
  v9();
  v272 = (_QWORD *)(v990 + v4 + 135 * v3);
  v273 = (char *)v272 + *(int *)(v1 + 48);
  *v272 = 373;
  *(_QWORD *)v273 = "DEFERRABLE";
  *((_QWORD *)v273 + 1) = 10;
  v273[16] = 2;
  v9();
  v274 = (_QWORD *)(v990 + v4 + 136 * v3);
  v275 = (char *)v274 + *(int *)(v1 + 48);
  *v274 = 374;
  *(_QWORD *)v275 = "DEFERRED";
  *((_QWORD *)v275 + 1) = 8;
  v275[16] = 2;
  v9();
  v276 = (_QWORD *)(v990 + v4 + 137 * v3);
  v277 = (char *)v276 + *(int *)(v1 + 48);
  *v276 = 375;
  *(_QWORD *)v277 = "DEFINER";
  *((_QWORD *)v277 + 1) = 7;
  v277[16] = 2;
  v9();
  v278 = (_QWORD *)(v990 + v4 + 138 * v3);
  v279 = (char *)v278 + *(int *)(v1 + 48);
  *v278 = 376;
  *(_QWORD *)v279 = "DELETE_P";
  *((_QWORD *)v279 + 1) = 8;
  v279[16] = 2;
  v9();
  v280 = (_QWORD *)(v990 + v4 + 139 * v3);
  v281 = (char *)v280 + *(int *)(v1 + 48);
  *v280 = 377;
  *(_QWORD *)v281 = "DELIMITER";
  *((_QWORD *)v281 + 1) = 9;
  v281[16] = 2;
  v9();
  v282 = (_QWORD *)(v990 + v4 + 140 * v3);
  v283 = (char *)v282 + *(int *)(v1 + 48);
  *v282 = 378;
  *(_QWORD *)v283 = "DELIMITERS";
  *((_QWORD *)v283 + 1) = 10;
  v283[16] = 2;
  v9();
  v284 = (_QWORD *)(v990 + v4 + 141 * v3);
  v285 = (char *)v284 + *(int *)(v1 + 48);
  *v284 = 379;
  *(_QWORD *)v285 = "DEPENDS";
  *((_QWORD *)v285 + 1) = 7;
  v285[16] = 2;
  v9();
  v286 = (_QWORD *)(v990 + v4 + 142 * v3);
  v287 = (char *)v286 + *(int *)(v1 + 48);
  *v286 = 380;
  *(_QWORD *)v287 = "DESC";
  *((_QWORD *)v287 + 1) = 4;
  v287[16] = 2;
  v9();
  v288 = (_QWORD *)(v990 + v4 + 143 * v3);
  v289 = (char *)v288 + *(int *)(v1 + 48);
  *v288 = 381;
  *(_QWORD *)v289 = "DETACH";
  *((_QWORD *)v289 + 1) = 6;
  v289[16] = 2;
  v9();
  v290 = (_QWORD *)(v990 + v4 + 144 * v3);
  v291 = (char *)v290 + *(int *)(v1 + 48);
  *v290 = 382;
  *(_QWORD *)v291 = "DICTIONARY";
  *((_QWORD *)v291 + 1) = 10;
  v291[16] = 2;
  v9();
  v292 = (_QWORD *)(v990 + v4 + 145 * v3);
  v293 = (char *)v292 + *(int *)(v1 + 48);
  *v292 = 383;
  *(_QWORD *)v293 = "DISABLE_P";
  *((_QWORD *)v293 + 1) = 9;
  v293[16] = 2;
  v9();
  v294 = (_QWORD *)(v990 + v4 + 146 * v3);
  v295 = (char *)v294 + *(int *)(v1 + 48);
  *v294 = 384;
  *(_QWORD *)v295 = "DISCARD";
  *((_QWORD *)v295 + 1) = 7;
  v295[16] = 2;
  v9();
  v296 = (_QWORD *)(v990 + v4 + 147 * v3);
  v297 = (char *)v296 + *(int *)(v1 + 48);
  *v296 = 385;
  *(_QWORD *)v297 = "DISTINCT";
  *((_QWORD *)v297 + 1) = 8;
  v297[16] = 2;
  v9();
  v298 = (_QWORD *)(v990 + v4 + 148 * v3);
  v299 = (char *)v298 + *(int *)(v1 + 48);
  *v298 = 386;
  *(_QWORD *)v299 = "DO";
  *((_QWORD *)v299 + 1) = 2;
  v299[16] = 2;
  v9();
  v300 = (_QWORD *)(v990 + v4 + 149 * v3);
  v301 = (char *)v300 + *(int *)(v1 + 48);
  *v300 = 387;
  *(_QWORD *)v301 = "DOCUMENT_P";
  *((_QWORD *)v301 + 1) = 10;
  v301[16] = 2;
  v9();
  v302 = (_QWORD *)(v990 + v4 + 150 * v3);
  v303 = (char *)v302 + *(int *)(v1 + 48);
  *v302 = 388;
  *(_QWORD *)v303 = "DOMAIN_P";
  *((_QWORD *)v303 + 1) = 8;
  v303[16] = 2;
  v9();
  v304 = (_QWORD *)(v990 + v4 + 151 * v3);
  v305 = (char *)v304 + *(int *)(v1 + 48);
  *v304 = 389;
  *(_QWORD *)v305 = "DOUBLE_P";
  *((_QWORD *)v305 + 1) = 8;
  v305[16] = 2;
  v9();
  v306 = (_QWORD *)(v990 + v4 + 152 * v3);
  v307 = (char *)v306 + *(int *)(v1 + 48);
  *v306 = 390;
  *(_QWORD *)v307 = "DROP";
  *((_QWORD *)v307 + 1) = 4;
  v307[16] = 2;
  v9();
  v308 = (_QWORD *)(v990 + v4 + 153 * v3);
  v309 = (char *)v308 + *(int *)(v1 + 48);
  *v308 = 391;
  *(_QWORD *)v309 = "EACH";
  *((_QWORD *)v309 + 1) = 4;
  v309[16] = 2;
  v9();
  v310 = (_QWORD *)(v990 + v4 + 154 * v3);
  v311 = (char *)v310 + *(int *)(v1 + 48);
  *v310 = 392;
  *(_QWORD *)v311 = "ELSE";
  *((_QWORD *)v311 + 1) = 4;
  v311[16] = 2;
  v9();
  v312 = (_QWORD *)(v990 + v4 + 155 * v3);
  v313 = (char *)v312 + *(int *)(v1 + 48);
  *v312 = 393;
  *(_QWORD *)v313 = "ENABLE_P";
  *((_QWORD *)v313 + 1) = 8;
  v313[16] = 2;
  v9();
  v314 = (_QWORD *)(v990 + v4 + 156 * v3);
  v315 = (char *)v314 + *(int *)(v1 + 48);
  *v314 = 394;
  *(_QWORD *)v315 = "ENCODING";
  *((_QWORD *)v315 + 1) = 8;
  v315[16] = 2;
  v9();
  v316 = (_QWORD *)(v990 + v4 + 157 * v3);
  v317 = (char *)v316 + *(int *)(v1 + 48);
  *v316 = 395;
  *(_QWORD *)v317 = "ENCRYPTED";
  *((_QWORD *)v317 + 1) = 9;
  v317[16] = 2;
  v9();
  v318 = (_QWORD *)(v990 + v4 + 158 * v3);
  v319 = (char *)v318 + *(int *)(v1 + 48);
  *v318 = 396;
  *(_QWORD *)v319 = "END_P";
  *((_QWORD *)v319 + 1) = 5;
  v319[16] = 2;
  v9();
  v320 = (_QWORD *)(v990 + v4 + 159 * v3);
  v321 = (char *)v320 + *(int *)(v1 + 48);
  *v320 = 397;
  *(_QWORD *)v321 = "ENUM_P";
  *((_QWORD *)v321 + 1) = 6;
  v321[16] = 2;
  v9();
  v322 = (_QWORD *)(v990 + v4 + 160 * v3);
  v323 = (char *)v322 + *(int *)(v1 + 48);
  *v322 = 398;
  *(_QWORD *)v323 = "ESCAPE";
  *((_QWORD *)v323 + 1) = 6;
  v323[16] = 2;
  v9();
  v324 = (_QWORD *)(v990 + v4 + 161 * v3);
  v325 = (char *)v324 + *(int *)(v1 + 48);
  *v324 = 399;
  *(_QWORD *)v325 = "EVENT";
  *((_QWORD *)v325 + 1) = 5;
  v325[16] = 2;
  v9();
  v326 = (_QWORD *)(v990 + v4 + 162 * v3);
  v327 = (char *)v326 + *(int *)(v1 + 48);
  *v326 = 400;
  *(_QWORD *)v327 = "EXCEPT";
  *((_QWORD *)v327 + 1) = 6;
  v327[16] = 2;
  v9();
  v328 = (_QWORD *)(v990 + v4 + 163 * v3);
  v329 = (char *)v328 + *(int *)(v1 + 48);
  *v328 = 401;
  *(_QWORD *)v329 = "EXCLUDE";
  *((_QWORD *)v329 + 1) = 7;
  v329[16] = 2;
  v9();
  v330 = (_QWORD *)(v990 + v4 + 164 * v3);
  v331 = (char *)v330 + *(int *)(v1 + 48);
  *v330 = 402;
  *(_QWORD *)v331 = "EXCLUDING";
  *((_QWORD *)v331 + 1) = 9;
  v331[16] = 2;
  v9();
  v332 = (_QWORD *)(v990 + v4 + 165 * v3);
  v333 = (char *)v332 + *(int *)(v1 + 48);
  *v332 = 403;
  *(_QWORD *)v333 = "EXCLUSIVE";
  *((_QWORD *)v333 + 1) = 9;
  v333[16] = 2;
  v9();
  v334 = (_QWORD *)(v990 + v4 + 166 * v3);
  v335 = (char *)v334 + *(int *)(v1 + 48);
  *v334 = 404;
  *(_QWORD *)v335 = "EXECUTE";
  *((_QWORD *)v335 + 1) = 7;
  v335[16] = 2;
  v9();
  v336 = (_QWORD *)(v990 + v4 + 167 * v3);
  v337 = (char *)v336 + *(int *)(v1 + 48);
  *v336 = 405;
  *(_QWORD *)v337 = "EXISTS";
  *((_QWORD *)v337 + 1) = 6;
  v337[16] = 2;
  v9();
  v338 = (_QWORD *)(v990 + v4 + 168 * v3);
  v339 = (char *)v338 + *(int *)(v1 + 48);
  *v338 = 406;
  *(_QWORD *)v339 = "EXPLAIN";
  *((_QWORD *)v339 + 1) = 7;
  v339[16] = 2;
  v9();
  v340 = (_QWORD *)(v990 + v4 + 169 * v3);
  v341 = (char *)v340 + *(int *)(v1 + 48);
  *v340 = 407;
  *(_QWORD *)v341 = "EXPRESSION";
  *((_QWORD *)v341 + 1) = 10;
  v341[16] = 2;
  v9();
  v342 = (_QWORD *)(v990 + v4 + 170 * v3);
  v343 = (char *)v342 + *(int *)(v1 + 48);
  *v342 = 408;
  *(_QWORD *)v343 = "EXTENSION";
  *((_QWORD *)v343 + 1) = 9;
  v343[16] = 2;
  v9();
  v344 = (_QWORD *)(v990 + v4 + 171 * v3);
  v345 = (char *)v344 + *(int *)(v1 + 48);
  *v344 = 409;
  *(_QWORD *)v345 = "EXTERNAL";
  *((_QWORD *)v345 + 1) = 8;
  v345[16] = 2;
  v9();
  v346 = (_QWORD *)(v990 + v4 + 172 * v3);
  v347 = (char *)v346 + *(int *)(v1 + 48);
  *v346 = 410;
  *(_QWORD *)v347 = "EXTRACT";
  *((_QWORD *)v347 + 1) = 7;
  v347[16] = 2;
  v9();
  v348 = (_QWORD *)(v990 + v4 + 173 * v3);
  v349 = (char *)v348 + *(int *)(v1 + 48);
  *v348 = 411;
  *(_QWORD *)v349 = "FALSE_P";
  *((_QWORD *)v349 + 1) = 7;
  v349[16] = 2;
  v9();
  v350 = (_QWORD *)(v990 + v4 + 174 * v3);
  v351 = (char *)v350 + *(int *)(v1 + 48);
  *v350 = 412;
  *(_QWORD *)v351 = "FAMILY";
  *((_QWORD *)v351 + 1) = 6;
  v351[16] = 2;
  v9();
  v352 = (_QWORD *)(v990 + v4 + 175 * v3);
  v353 = (char *)v352 + *(int *)(v1 + 48);
  *v352 = 413;
  *(_QWORD *)v353 = "FETCH";
  *((_QWORD *)v353 + 1) = 5;
  v353[16] = 2;
  v9();
  v354 = (_QWORD *)(v990 + v4 + 176 * v3);
  v355 = (char *)v354 + *(int *)(v1 + 48);
  *v354 = 414;
  *(_QWORD *)v355 = "FILTER";
  *((_QWORD *)v355 + 1) = 6;
  v355[16] = 2;
  v9();
  v356 = (_QWORD *)(v990 + v4 + 177 * v3);
  v357 = (char *)v356 + *(int *)(v1 + 48);
  *v356 = 415;
  *(_QWORD *)v357 = "FIRST_P";
  *((_QWORD *)v357 + 1) = 7;
  v357[16] = 2;
  v9();
  v358 = (_QWORD *)(v990 + v4 + 178 * v3);
  v359 = (char *)v358 + *(int *)(v1 + 48);
  *v358 = 416;
  *(_QWORD *)v359 = "FLOAT_P";
  *((_QWORD *)v359 + 1) = 7;
  v359[16] = 2;
  v9();
  v360 = (_QWORD *)(v990 + v4 + 179 * v3);
  v361 = (char *)v360 + *(int *)(v1 + 48);
  *v360 = 417;
  *(_QWORD *)v361 = "FOLLOWING";
  *((_QWORD *)v361 + 1) = 9;
  v361[16] = 2;
  v9();
  v362 = (_QWORD *)(v990 + v4 + 180 * v3);
  v363 = (char *)v362 + *(int *)(v1 + 48);
  *v362 = 418;
  *(_QWORD *)v363 = "FOR";
  *((_QWORD *)v363 + 1) = 3;
  v363[16] = 2;
  v9();
  v364 = (_QWORD *)(v990 + v4 + 181 * v3);
  v365 = (char *)v364 + *(int *)(v1 + 48);
  *v364 = 419;
  *(_QWORD *)v365 = "FORCE";
  *((_QWORD *)v365 + 1) = 5;
  v365[16] = 2;
  v9();
  v366 = (_QWORD *)(v990 + v4 + 182 * v3);
  v367 = (char *)v366 + *(int *)(v1 + 48);
  *v366 = 420;
  *(_QWORD *)v367 = "FOREIGN";
  *((_QWORD *)v367 + 1) = 7;
  v367[16] = 2;
  v9();
  v368 = (_QWORD *)(v990 + v4 + 183 * v3);
  v369 = (char *)v368 + *(int *)(v1 + 48);
  *v368 = 421;
  *(_QWORD *)v369 = "FORWARD";
  *((_QWORD *)v369 + 1) = 7;
  v369[16] = 2;
  v9();
  v370 = (_QWORD *)(v990 + v4 + 184 * v3);
  v371 = (char *)v370 + *(int *)(v1 + 48);
  *v370 = 422;
  *(_QWORD *)v371 = "FREEZE";
  *((_QWORD *)v371 + 1) = 6;
  v371[16] = 2;
  v9();
  v372 = (_QWORD *)(v990 + v4 + 185 * v3);
  v373 = (char *)v372 + *(int *)(v1 + 48);
  *v372 = 423;
  *(_QWORD *)v373 = "FROM";
  *((_QWORD *)v373 + 1) = 4;
  v373[16] = 2;
  v9();
  v374 = (_QWORD *)(v990 + v4 + 186 * v3);
  v375 = (char *)v374 + *(int *)(v1 + 48);
  *v374 = 424;
  *(_QWORD *)v375 = "FULL";
  *((_QWORD *)v375 + 1) = 4;
  v375[16] = 2;
  v9();
  v376 = (_QWORD *)(v990 + v4 + 187 * v3);
  v377 = (char *)v376 + *(int *)(v1 + 48);
  *v376 = 425;
  *(_QWORD *)v377 = "FUNCTION";
  *((_QWORD *)v377 + 1) = 8;
  v377[16] = 2;
  v9();
  v378 = (_QWORD *)(v990 + v4 + 188 * v3);
  v379 = (char *)v378 + *(int *)(v1 + 48);
  *v378 = 426;
  *(_QWORD *)v379 = "FUNCTIONS";
  *((_QWORD *)v379 + 1) = 9;
  v379[16] = 2;
  v9();
  v380 = (_QWORD *)(v990 + v4 + 189 * v3);
  v381 = (char *)v380 + *(int *)(v1 + 48);
  *v380 = 427;
  *(_QWORD *)v381 = "GENERATED";
  *((_QWORD *)v381 + 1) = 9;
  v381[16] = 2;
  v9();
  v382 = (_QWORD *)(v990 + v4 + 190 * v3);
  v383 = (char *)v382 + *(int *)(v1 + 48);
  *v382 = 428;
  *(_QWORD *)v383 = "GLOBAL";
  *((_QWORD *)v383 + 1) = 6;
  v383[16] = 2;
  v9();
  v384 = (_QWORD *)(v990 + v4 + 191 * v3);
  v385 = (char *)v384 + *(int *)(v1 + 48);
  *v384 = 429;
  *(_QWORD *)v385 = "GRANT";
  *((_QWORD *)v385 + 1) = 5;
  v385[16] = 2;
  v9();
  v386 = (_QWORD *)(v990 + v4 + 192 * v3);
  v387 = (char *)v386 + *(int *)(v1 + 48);
  *v386 = 430;
  *(_QWORD *)v387 = "GRANTED";
  *((_QWORD *)v387 + 1) = 7;
  v387[16] = 2;
  v9();
  v388 = (_QWORD *)(v990 + v4 + 193 * v3);
  v389 = (char *)v388 + *(int *)(v1 + 48);
  *v388 = 431;
  *(_QWORD *)v389 = "GREATEST";
  *((_QWORD *)v389 + 1) = 8;
  v389[16] = 2;
  v9();
  v390 = (_QWORD *)(v990 + v4 + 194 * v3);
  v391 = (char *)v390 + *(int *)(v1 + 48);
  *v390 = 432;
  *(_QWORD *)v391 = "GROUP_P";
  *((_QWORD *)v391 + 1) = 7;
  v391[16] = 2;
  v9();
  v392 = (_QWORD *)(v990 + v4 + 195 * v3);
  v393 = (char *)v392 + *(int *)(v1 + 48);
  *v392 = 433;
  *(_QWORD *)v393 = "GROUPING";
  *((_QWORD *)v393 + 1) = 8;
  v393[16] = 2;
  v9();
  v394 = (_QWORD *)(v990 + v4 + 196 * v3);
  v395 = (char *)v394 + *(int *)(v1 + 48);
  *v394 = 434;
  *(_QWORD *)v395 = "GROUPS";
  *((_QWORD *)v395 + 1) = 6;
  v395[16] = 2;
  v9();
  v396 = (_QWORD *)(v990 + v4 + 197 * v3);
  v397 = (char *)v396 + *(int *)(v1 + 48);
  *v396 = 435;
  *(_QWORD *)v397 = "HANDLER";
  *((_QWORD *)v397 + 1) = 7;
  v397[16] = 2;
  v9();
  v398 = (_QWORD *)(v990 + v4 + 198 * v3);
  v399 = (char *)v398 + *(int *)(v1 + 48);
  *v398 = 436;
  *(_QWORD *)v399 = "HAVING";
  *((_QWORD *)v399 + 1) = 6;
  v399[16] = 2;
  v9();
  v400 = (_QWORD *)(v990 + v4 + 199 * v3);
  v401 = (char *)v400 + *(int *)(v1 + 48);
  *v400 = 437;
  *(_QWORD *)v401 = "HEADER_P";
  *((_QWORD *)v401 + 1) = 8;
  v401[16] = 2;
  v9();
  v402 = (_QWORD *)(v990 + v4 + 200 * v3);
  v403 = (char *)v402 + *(int *)(v1 + 48);
  *v402 = 438;
  *(_QWORD *)v403 = "HOLD";
  *((_QWORD *)v403 + 1) = 4;
  v403[16] = 2;
  v9();
  v404 = (_QWORD *)(v990 + v4 + 201 * v3);
  v405 = (char *)v404 + *(int *)(v1 + 48);
  *v404 = 439;
  *(_QWORD *)v405 = "HOUR_P";
  *((_QWORD *)v405 + 1) = 6;
  v405[16] = 2;
  v9();
  v406 = (_QWORD *)(v990 + v4 + 202 * v3);
  v407 = (char *)v406 + *(int *)(v1 + 48);
  *v406 = 440;
  *(_QWORD *)v407 = "IDENTITY_P";
  *((_QWORD *)v407 + 1) = 10;
  v407[16] = 2;
  v9();
  v408 = (_QWORD *)(v990 + v4 + 203 * v3);
  v409 = (char *)v408 + *(int *)(v1 + 48);
  *v408 = 441;
  *(_QWORD *)v409 = "IF_P";
  *((_QWORD *)v409 + 1) = 4;
  v409[16] = 2;
  v9();
  v410 = (_QWORD *)(v990 + v4 + 204 * v3);
  v411 = (char *)v410 + *(int *)(v1 + 48);
  *v410 = 442;
  *(_QWORD *)v411 = "ILIKE";
  *((_QWORD *)v411 + 1) = 5;
  v411[16] = 2;
  v9();
  v412 = (_QWORD *)(v990 + v4 + 205 * v3);
  v413 = (char *)v412 + *(int *)(v1 + 48);
  *v412 = 443;
  *(_QWORD *)v413 = "IMMEDIATE";
  *((_QWORD *)v413 + 1) = 9;
  v413[16] = 2;
  v9();
  v414 = (_QWORD *)(v990 + v4 + 206 * v3);
  v415 = (char *)v414 + *(int *)(v1 + 48);
  *v414 = 444;
  *(_QWORD *)v415 = "IMMUTABLE";
  *((_QWORD *)v415 + 1) = 9;
  v415[16] = 2;
  v9();
  v416 = (_QWORD *)(v990 + v4 + 207 * v3);
  v417 = (char *)v416 + *(int *)(v1 + 48);
  *v416 = 445;
  *(_QWORD *)v417 = "IMPLICIT_P";
  *((_QWORD *)v417 + 1) = 10;
  v417[16] = 2;
  v9();
  v418 = (_QWORD *)(v990 + v4 + 208 * v3);
  v419 = (char *)v418 + *(int *)(v1 + 48);
  *v418 = 446;
  *(_QWORD *)v419 = "IMPORT_P";
  *((_QWORD *)v419 + 1) = 8;
  v419[16] = 2;
  v9();
  v420 = (_QWORD *)(v990 + v4 + 209 * v3);
  v421 = (char *)v420 + *(int *)(v1 + 48);
  *v420 = 447;
  *(_QWORD *)v421 = "IN_P";
  *((_QWORD *)v421 + 1) = 4;
  v421[16] = 2;
  v9();
  v422 = (_QWORD *)(v990 + v4 + 210 * v3);
  v423 = (char *)v422 + *(int *)(v1 + 48);
  *v422 = 448;
  *(_QWORD *)v423 = "INCLUDE";
  *((_QWORD *)v423 + 1) = 7;
  v423[16] = 2;
  v9();
  v424 = (_QWORD *)(v990 + v4 + 211 * v3);
  v425 = (char *)v424 + *(int *)(v1 + 48);
  *v424 = 449;
  *(_QWORD *)v425 = "INCLUDING";
  *((_QWORD *)v425 + 1) = 9;
  v425[16] = 2;
  v9();
  v426 = (_QWORD *)(v990 + v4 + 212 * v3);
  v427 = (char *)v426 + *(int *)(v1 + 48);
  *v426 = 450;
  *(_QWORD *)v427 = "INCREMENT";
  *((_QWORD *)v427 + 1) = 9;
  v427[16] = 2;
  v9();
  v428 = (_QWORD *)(v990 + v4 + 213 * v3);
  v429 = (char *)v428 + *(int *)(v1 + 48);
  *v428 = 451;
  *(_QWORD *)v429 = "INDEX";
  *((_QWORD *)v429 + 1) = 5;
  v429[16] = 2;
  v9();
  v430 = (_QWORD *)(v990 + v4 + 214 * v3);
  v431 = (char *)v430 + *(int *)(v1 + 48);
  *v430 = 452;
  *(_QWORD *)v431 = "INDEXES";
  *((_QWORD *)v431 + 1) = 7;
  v431[16] = 2;
  v9();
  v432 = (_QWORD *)(v990 + v4 + 215 * v3);
  v433 = (char *)v432 + *(int *)(v1 + 48);
  *v432 = 453;
  *(_QWORD *)v433 = "INHERIT";
  *((_QWORD *)v433 + 1) = 7;
  v433[16] = 2;
  v9();
  v434 = (_QWORD *)(v990 + v4 + 216 * v3);
  v435 = (char *)v434 + *(int *)(v1 + 48);
  *v434 = 454;
  *(_QWORD *)v435 = "INHERITS";
  *((_QWORD *)v435 + 1) = 8;
  v435[16] = 2;
  v9();
  v436 = (_QWORD *)(v990 + v4 + 217 * v3);
  v437 = (char *)v436 + *(int *)(v1 + 48);
  *v436 = 455;
  *(_QWORD *)v437 = "INITIALLY";
  *((_QWORD *)v437 + 1) = 9;
  v437[16] = 2;
  v9();
  v438 = (_QWORD *)(v990 + v4 + 218 * v3);
  v439 = (char *)v438 + *(int *)(v1 + 48);
  *v438 = 456;
  *(_QWORD *)v439 = "INLINE_P";
  *((_QWORD *)v439 + 1) = 8;
  v439[16] = 2;
  v9();
  v440 = (_QWORD *)(v990 + v4 + 219 * v3);
  v441 = (char *)v440 + *(int *)(v1 + 48);
  *v440 = 457;
  *(_QWORD *)v441 = "INNER_P";
  *((_QWORD *)v441 + 1) = 7;
  v441[16] = 2;
  v9();
  v442 = (_QWORD *)(v990 + v4 + 220 * v3);
  v443 = (char *)v442 + *(int *)(v1 + 48);
  *v442 = 458;
  *(_QWORD *)v443 = "INOUT";
  *((_QWORD *)v443 + 1) = 5;
  v443[16] = 2;
  v9();
  v444 = (_QWORD *)(v990 + v4 + 221 * v3);
  v445 = (char *)v444 + *(int *)(v1 + 48);
  *v444 = 459;
  *(_QWORD *)v445 = "INPUT_P";
  *((_QWORD *)v445 + 1) = 7;
  v445[16] = 2;
  v9();
  v446 = (_QWORD *)(v990 + v4 + 222 * v3);
  v447 = (char *)v446 + *(int *)(v1 + 48);
  *v446 = 460;
  *(_QWORD *)v447 = "INSENSITIVE";
  *((_QWORD *)v447 + 1) = 11;
  v447[16] = 2;
  v9();
  v448 = (_QWORD *)(v990 + v4 + 223 * v3);
  v449 = (char *)v448 + *(int *)(v1 + 48);
  *v448 = 461;
  *(_QWORD *)v449 = "INSERT";
  *((_QWORD *)v449 + 1) = 6;
  v449[16] = 2;
  v9();
  v450 = (_QWORD *)(v990 + v4 + 224 * v3);
  v451 = (char *)v450 + *(int *)(v1 + 48);
  *v450 = 462;
  *(_QWORD *)v451 = "INSTEAD";
  *((_QWORD *)v451 + 1) = 7;
  v451[16] = 2;
  v9();
  v452 = (_QWORD *)(v990 + v4 + 225 * v3);
  v453 = (char *)v452 + *(int *)(v1 + 48);
  *v452 = 463;
  *(_QWORD *)v453 = "INT_P";
  *((_QWORD *)v453 + 1) = 5;
  v453[16] = 2;
  v9();
  v454 = (_QWORD *)(v990 + v4 + 226 * v3);
  v455 = (char *)v454 + *(int *)(v1 + 48);
  *v454 = 464;
  *(_QWORD *)v455 = "INTEGER";
  *((_QWORD *)v455 + 1) = 7;
  v455[16] = 2;
  v9();
  v456 = (_QWORD *)(v990 + v4 + 227 * v3);
  v457 = (char *)v456 + *(int *)(v1 + 48);
  *v456 = 465;
  *(_QWORD *)v457 = "INTERSECT";
  *((_QWORD *)v457 + 1) = 9;
  v457[16] = 2;
  v9();
  v458 = (_QWORD *)(v990 + v4 + 228 * v3);
  v459 = (char *)v458 + *(int *)(v1 + 48);
  *v458 = 466;
  *(_QWORD *)v459 = "INTERVAL";
  *((_QWORD *)v459 + 1) = 8;
  v459[16] = 2;
  v9();
  v460 = (_QWORD *)(v990 + v4 + 229 * v3);
  v461 = (char *)v460 + *(int *)(v1 + 48);
  *v460 = 467;
  *(_QWORD *)v461 = "INTO";
  *((_QWORD *)v461 + 1) = 4;
  v461[16] = 2;
  v9();
  v462 = (_QWORD *)(v990 + v4 + 230 * v3);
  v463 = (char *)v462 + *(int *)(v1 + 48);
  *v462 = 468;
  *(_QWORD *)v463 = "INVOKER";
  *((_QWORD *)v463 + 1) = 7;
  v463[16] = 2;
  v9();
  v464 = (_QWORD *)(v990 + v4 + 231 * v3);
  v465 = (char *)v464 + *(int *)(v1 + 48);
  *v464 = 469;
  *(_QWORD *)v465 = "IS";
  *((_QWORD *)v465 + 1) = 2;
  v465[16] = 2;
  v9();
  v466 = (_QWORD *)(v990 + v4 + 232 * v3);
  v467 = (char *)v466 + *(int *)(v1 + 48);
  *v466 = 470;
  *(_QWORD *)v467 = "ISNULL";
  *((_QWORD *)v467 + 1) = 6;
  v467[16] = 2;
  v9();
  v468 = (_QWORD *)(v990 + v4 + 233 * v3);
  v469 = (char *)v468 + *(int *)(v1 + 48);
  *v468 = 471;
  *(_QWORD *)v469 = "ISOLATION";
  *((_QWORD *)v469 + 1) = 9;
  v469[16] = 2;
  v9();
  v470 = (_QWORD *)(v990 + v4 + 234 * v3);
  v471 = (char *)v470 + *(int *)(v1 + 48);
  *v470 = 472;
  *(_QWORD *)v471 = "JOIN";
  *((_QWORD *)v471 + 1) = 4;
  v471[16] = 2;
  v9();
  v472 = (_QWORD *)(v990 + v4 + 235 * v3);
  v473 = (char *)v472 + *(int *)(v1 + 48);
  *v472 = 473;
  *(_QWORD *)v473 = "KEY";
  *((_QWORD *)v473 + 1) = 3;
  v473[16] = 2;
  v9();
  v474 = (_QWORD *)(v990 + v4 + 236 * v3);
  v475 = (char *)v474 + *(int *)(v1 + 48);
  *v474 = 474;
  *(_QWORD *)v475 = "LABEL";
  *((_QWORD *)v475 + 1) = 5;
  v475[16] = 2;
  v9();
  v476 = (_QWORD *)(v990 + v4 + 237 * v3);
  v477 = (char *)v476 + *(int *)(v1 + 48);
  *v476 = 475;
  *(_QWORD *)v477 = "LANGUAGE";
  *((_QWORD *)v477 + 1) = 8;
  v477[16] = 2;
  v9();
  v478 = (_QWORD *)(v990 + v4 + 238 * v3);
  v479 = (char *)v478 + *(int *)(v1 + 48);
  *v478 = 476;
  *(_QWORD *)v479 = "LARGE_P";
  *((_QWORD *)v479 + 1) = 7;
  v479[16] = 2;
  v9();
  v480 = (_QWORD *)(v990 + v4 + 239 * v3);
  v481 = (char *)v480 + *(int *)(v1 + 48);
  *v480 = 477;
  *(_QWORD *)v481 = "LAST_P";
  *((_QWORD *)v481 + 1) = 6;
  v481[16] = 2;
  v9();
  v482 = (_QWORD *)(v990 + v4 + 240 * v3);
  v483 = (char *)v482 + *(int *)(v1 + 48);
  *v482 = 478;
  *(_QWORD *)v483 = "LATERAL_P";
  *((_QWORD *)v483 + 1) = 9;
  v483[16] = 2;
  v9();
  v484 = (_QWORD *)(v990 + v4 + 241 * v3);
  v485 = (char *)v484 + *(int *)(v1 + 48);
  *v484 = 479;
  *(_QWORD *)v485 = "LEADING";
  *((_QWORD *)v485 + 1) = 7;
  v485[16] = 2;
  v9();
  v486 = (_QWORD *)(v990 + v4 + 242 * v3);
  v487 = (char *)v486 + *(int *)(v1 + 48);
  *v486 = 480;
  *(_QWORD *)v487 = "LEAKPROOF";
  *((_QWORD *)v487 + 1) = 9;
  v487[16] = 2;
  v9();
  v488 = (_QWORD *)(v990 + v4 + 243 * v3);
  v489 = (char *)v488 + *(int *)(v1 + 48);
  *v488 = 481;
  *(_QWORD *)v489 = "LEAST";
  *((_QWORD *)v489 + 1) = 5;
  v489[16] = 2;
  v9();
  v490 = (_QWORD *)(v990 + v4 + 244 * v3);
  v491 = (char *)v490 + *(int *)(v1 + 48);
  *v490 = 482;
  *(_QWORD *)v491 = "LEFT";
  *((_QWORD *)v491 + 1) = 4;
  v491[16] = 2;
  v9();
  v492 = (_QWORD *)(v990 + v4 + 245 * v3);
  v493 = (char *)v492 + *(int *)(v1 + 48);
  *v492 = 483;
  *(_QWORD *)v493 = "LEVEL";
  *((_QWORD *)v493 + 1) = 5;
  v493[16] = 2;
  v9();
  v494 = (_QWORD *)(v990 + v4 + 246 * v3);
  v495 = (char *)v494 + *(int *)(v1 + 48);
  *v494 = 484;
  *(_QWORD *)v495 = "LIKE";
  *((_QWORD *)v495 + 1) = 4;
  v495[16] = 2;
  v9();
  v496 = (_QWORD *)(v990 + v4 + 247 * v3);
  v497 = (char *)v496 + *(int *)(v1 + 48);
  *v496 = 485;
  *(_QWORD *)v497 = "LIMIT";
  *((_QWORD *)v497 + 1) = 5;
  v497[16] = 2;
  v9();
  v498 = (_QWORD *)(v990 + v4 + 248 * v3);
  v499 = (char *)v498 + *(int *)(v1 + 48);
  *v498 = 486;
  *(_QWORD *)v499 = "LISTEN";
  *((_QWORD *)v499 + 1) = 6;
  v499[16] = 2;
  v9();
  v500 = (_QWORD *)(v990 + v4 + 249 * v3);
  v501 = (char *)v500 + *(int *)(v1 + 48);
  *v500 = 487;
  *(_QWORD *)v501 = "LOAD";
  *((_QWORD *)v501 + 1) = 4;
  v501[16] = 2;
  v9();
  v502 = (_QWORD *)(v990 + v4 + 250 * v3);
  v503 = (char *)v502 + *(int *)(v1 + 48);
  *v502 = 488;
  *(_QWORD *)v503 = "LOCAL";
  *((_QWORD *)v503 + 1) = 5;
  v503[16] = 2;
  v9();
  v504 = (_QWORD *)(v990 + v4 + 251 * v3);
  v505 = (char *)v504 + *(int *)(v1 + 48);
  *v504 = 489;
  *(_QWORD *)v505 = "LOCALTIME";
  *((_QWORD *)v505 + 1) = 9;
  v505[16] = 2;
  v9();
  v506 = (_QWORD *)(v990 + v4 + 252 * v3);
  v507 = (char *)v506 + *(int *)(v1 + 48);
  *v506 = 490;
  *(_QWORD *)v507 = "LOCALTIMESTAMP";
  *((_QWORD *)v507 + 1) = 14;
  v507[16] = 2;
  v9();
  v508 = (_QWORD *)(v990 + v4 + 253 * v3);
  v509 = (char *)v508 + *(int *)(v1 + 48);
  *v508 = 491;
  *(_QWORD *)v509 = "LOCATION";
  *((_QWORD *)v509 + 1) = 8;
  v509[16] = 2;
  v9();
  v510 = (_QWORD *)(v990 + v4 + 254 * v3);
  v511 = (char *)v510 + *(int *)(v1 + 48);
  *v510 = 492;
  *(_QWORD *)v511 = "LOCK_P";
  *((_QWORD *)v511 + 1) = 6;
  v511[16] = 2;
  v9();
  v512 = (_QWORD *)(v990 + v4 + 255 * v3);
  v513 = (char *)v512 + *(int *)(v1 + 48);
  *v512 = 493;
  *(_QWORD *)v513 = "LOCKED";
  *((_QWORD *)v513 + 1) = 6;
  v513[16] = 2;
  v9();
  v514 = v990 + v4 + (v3 << 8) + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + (v3 << 8)) = 494;
  *(_QWORD *)v514 = "LOGGED";
  *(_QWORD *)(v514 + 8) = 6;
  *(_BYTE *)(v514 + 16) = 2;
  v9();
  v515 = (_QWORD *)(v990 + v4 + 257 * v3);
  v516 = (char *)v515 + *(int *)(v1 + 48);
  *v515 = 495;
  *(_QWORD *)v516 = "MAPPING";
  *((_QWORD *)v516 + 1) = 7;
  v516[16] = 2;
  v9();
  v517 = (_QWORD *)(v990 + v4 + 258 * v3);
  v518 = (char *)v517 + *(int *)(v1 + 48);
  *v517 = 496;
  *(_QWORD *)v518 = "MATCH";
  *((_QWORD *)v518 + 1) = 5;
  v518[16] = 2;
  v9();
  v519 = (_QWORD *)(v990 + v4 + 259 * v3);
  v520 = (char *)v519 + *(int *)(v1 + 48);
  *v519 = 497;
  *(_QWORD *)v520 = "MATERIALIZED";
  *((_QWORD *)v520 + 1) = 12;
  v520[16] = 2;
  v9();
  v521 = (_QWORD *)(v990 + v4 + 260 * v3);
  v522 = (char *)v521 + *(int *)(v1 + 48);
  *v521 = 498;
  *(_QWORD *)v522 = "MAXVALUE";
  *((_QWORD *)v522 + 1) = 8;
  v522[16] = 2;
  v9();
  v523 = (_QWORD *)(v990 + v4 + 261 * v3);
  v524 = (char *)v523 + *(int *)(v1 + 48);
  *v523 = 499;
  *(_QWORD *)v524 = "METHOD";
  *((_QWORD *)v524 + 1) = 6;
  v524[16] = 2;
  v9();
  v525 = (_QWORD *)(v990 + v4 + 262 * v3);
  v526 = (char *)v525 + *(int *)(v1 + 48);
  *v525 = 500;
  *(_QWORD *)v526 = "MINUTE_P";
  *((_QWORD *)v526 + 1) = 8;
  v526[16] = 2;
  v9();
  v527 = (_QWORD *)(v990 + v4 + 263 * v3);
  v528 = (char *)v527 + *(int *)(v1 + 48);
  *v527 = 501;
  *(_QWORD *)v528 = "MINVALUE";
  *((_QWORD *)v528 + 1) = 8;
  v528[16] = 2;
  v9();
  v529 = (_QWORD *)(v990 + v4 + 264 * v3);
  v530 = (char *)v529 + *(int *)(v1 + 48);
  *v529 = 502;
  *(_QWORD *)v530 = "MODE";
  *((_QWORD *)v530 + 1) = 4;
  v530[16] = 2;
  v9();
  v531 = (_QWORD *)(v990 + v4 + 265 * v3);
  v532 = (char *)v531 + *(int *)(v1 + 48);
  *v531 = 503;
  *(_QWORD *)v532 = "MONTH_P";
  *((_QWORD *)v532 + 1) = 7;
  v532[16] = 2;
  v9();
  v533 = (_QWORD *)(v990 + v4 + 266 * v3);
  v534 = (char *)v533 + *(int *)(v1 + 48);
  *v533 = 504;
  *(_QWORD *)v534 = "MOVE";
  *((_QWORD *)v534 + 1) = 4;
  v534[16] = 2;
  v9();
  v535 = (_QWORD *)(v990 + v4 + 267 * v3);
  v536 = (char *)v535 + *(int *)(v1 + 48);
  *v535 = 505;
  *(_QWORD *)v536 = "NAME_P";
  *((_QWORD *)v536 + 1) = 6;
  v536[16] = 2;
  v9();
  v537 = (_QWORD *)(v990 + v4 + 268 * v3);
  v538 = (char *)v537 + *(int *)(v1 + 48);
  *v537 = 506;
  *(_QWORD *)v538 = "NAMES";
  *((_QWORD *)v538 + 1) = 5;
  v538[16] = 2;
  v9();
  v539 = (_QWORD *)(v990 + v4 + 269 * v3);
  v540 = (char *)v539 + *(int *)(v1 + 48);
  *v539 = 507;
  *(_QWORD *)v540 = "NATIONAL";
  *((_QWORD *)v540 + 1) = 8;
  v540[16] = 2;
  v9();
  v541 = (_QWORD *)(v990 + v4 + 270 * v3);
  v542 = (char *)v541 + *(int *)(v1 + 48);
  *v541 = 508;
  *(_QWORD *)v542 = "NATURAL";
  *((_QWORD *)v542 + 1) = 7;
  v542[16] = 2;
  v9();
  v543 = (_QWORD *)(v990 + v4 + 271 * v3);
  v544 = (char *)v543 + *(int *)(v1 + 48);
  *v543 = 509;
  *(_QWORD *)v544 = "NCHAR";
  *((_QWORD *)v544 + 1) = 5;
  v544[16] = 2;
  v9();
  v545 = (_QWORD *)(v990 + v4 + 272 * v3);
  v546 = (char *)v545 + *(int *)(v1 + 48);
  *v545 = 510;
  *(_QWORD *)v546 = "NEW";
  *((_QWORD *)v546 + 1) = 3;
  v546[16] = 2;
  v9();
  v547 = (_QWORD *)(v990 + v4 + 273 * v3);
  v548 = (char *)v547 + *(int *)(v1 + 48);
  *v547 = 511;
  *(_QWORD *)v548 = "NEXT";
  *((_QWORD *)v548 + 1) = 4;
  v548[16] = 2;
  v9();
  v549 = (_QWORD *)(v990 + v4 + 274 * v3);
  v550 = (char *)v549 + *(int *)(v1 + 48);
  *v549 = 512;
  *(_QWORD *)v550 = "NFC";
  *((_QWORD *)v550 + 1) = 3;
  v550[16] = 2;
  v9();
  v551 = (_QWORD *)(v990 + v4 + 275 * v3);
  v552 = (char *)v551 + *(int *)(v1 + 48);
  *v551 = 513;
  *(_QWORD *)v552 = "NFD";
  *((_QWORD *)v552 + 1) = 3;
  v552[16] = 2;
  v9();
  v553 = (_QWORD *)(v990 + v4 + 276 * v3);
  v554 = (char *)v553 + *(int *)(v1 + 48);
  *v553 = 514;
  *(_QWORD *)v554 = "NFKC";
  *((_QWORD *)v554 + 1) = 4;
  v554[16] = 2;
  v9();
  v555 = (_QWORD *)(v990 + v4 + 277 * v3);
  v556 = (char *)v555 + *(int *)(v1 + 48);
  *v555 = 515;
  *(_QWORD *)v556 = "NFKD";
  *((_QWORD *)v556 + 1) = 4;
  v556[16] = 2;
  v9();
  v557 = (_QWORD *)(v990 + v4 + 278 * v3);
  v558 = (char *)v557 + *(int *)(v1 + 48);
  *v557 = 516;
  *(_QWORD *)v558 = "NO";
  *((_QWORD *)v558 + 1) = 2;
  v558[16] = 2;
  v9();
  v559 = (_QWORD *)(v990 + v4 + 279 * v3);
  v560 = (char *)v559 + *(int *)(v1 + 48);
  *v559 = 517;
  *(_QWORD *)v560 = "NONE";
  *((_QWORD *)v560 + 1) = 4;
  v560[16] = 2;
  v9();
  v561 = (_QWORD *)(v990 + v4 + 280 * v3);
  v562 = (char *)v561 + *(int *)(v1 + 48);
  *v561 = 518;
  *(_QWORD *)v562 = "NORMALIZE";
  *((_QWORD *)v562 + 1) = 9;
  v562[16] = 2;
  v9();
  v563 = (_QWORD *)(v990 + v4 + 281 * v3);
  v564 = (char *)v563 + *(int *)(v1 + 48);
  *v563 = 519;
  *(_QWORD *)v564 = "NORMALIZED";
  *((_QWORD *)v564 + 1) = 10;
  v564[16] = 2;
  v9();
  v565 = (_QWORD *)(v990 + v4 + 282 * v3);
  v566 = (char *)v565 + *(int *)(v1 + 48);
  *v565 = 520;
  *(_QWORD *)v566 = "NOT";
  *((_QWORD *)v566 + 1) = 3;
  v566[16] = 2;
  v9();
  v567 = (_QWORD *)(v990 + v4 + 283 * v3);
  v568 = (char *)v567 + *(int *)(v1 + 48);
  *v567 = 521;
  *(_QWORD *)v568 = "NOTHING";
  *((_QWORD *)v568 + 1) = 7;
  v568[16] = 2;
  v9();
  v569 = (_QWORD *)(v990 + v4 + 284 * v3);
  v570 = (char *)v569 + *(int *)(v1 + 48);
  *v569 = 522;
  *(_QWORD *)v570 = "NOTIFY";
  *((_QWORD *)v570 + 1) = 6;
  v570[16] = 2;
  v9();
  v571 = (_QWORD *)(v990 + v4 + 285 * v3);
  v572 = (char *)v571 + *(int *)(v1 + 48);
  *v571 = 523;
  *(_QWORD *)v572 = "NOTNULL";
  *((_QWORD *)v572 + 1) = 7;
  v572[16] = 2;
  v9();
  v573 = (_QWORD *)(v990 + v4 + 286 * v3);
  v574 = (char *)v573 + *(int *)(v1 + 48);
  *v573 = 524;
  *(_QWORD *)v574 = "NOWAIT";
  *((_QWORD *)v574 + 1) = 6;
  v574[16] = 2;
  v9();
  v575 = (_QWORD *)(v990 + v4 + 287 * v3);
  v576 = (char *)v575 + *(int *)(v1 + 48);
  *v575 = 525;
  *(_QWORD *)v576 = "NULL_P";
  *((_QWORD *)v576 + 1) = 6;
  v576[16] = 2;
  v9();
  v577 = (_QWORD *)(v990 + v4 + 288 * v3);
  v578 = (char *)v577 + *(int *)(v1 + 48);
  *v577 = 526;
  *(_QWORD *)v578 = "NULLIF";
  *((_QWORD *)v578 + 1) = 6;
  v578[16] = 2;
  v9();
  v579 = (_QWORD *)(v990 + v4 + 289 * v3);
  v580 = (char *)v579 + *(int *)(v1 + 48);
  *v579 = 527;
  *(_QWORD *)v580 = "NULLS_P";
  *((_QWORD *)v580 + 1) = 7;
  v580[16] = 2;
  v9();
  v581 = (_QWORD *)(v990 + v4 + 290 * v3);
  v582 = (char *)v581 + *(int *)(v1 + 48);
  *v581 = 528;
  *(_QWORD *)v582 = "NUMERIC";
  *((_QWORD *)v582 + 1) = 7;
  v582[16] = 2;
  v9();
  v583 = (_QWORD *)(v990 + v4 + 291 * v3);
  v584 = (char *)v583 + *(int *)(v1 + 48);
  *v583 = 529;
  *(_QWORD *)v584 = "OBJECT_P";
  *((_QWORD *)v584 + 1) = 8;
  v584[16] = 2;
  v9();
  v585 = (_QWORD *)(v990 + v4 + 292 * v3);
  v586 = (char *)v585 + *(int *)(v1 + 48);
  *v585 = 530;
  *(_QWORD *)v586 = "OF";
  *((_QWORD *)v586 + 1) = 2;
  v586[16] = 2;
  v9();
  v587 = (_QWORD *)(v990 + v4 + 293 * v3);
  v588 = (char *)v587 + *(int *)(v1 + 48);
  *v587 = 531;
  *(_QWORD *)v588 = "OFF";
  *((_QWORD *)v588 + 1) = 3;
  v588[16] = 2;
  v9();
  v589 = (_QWORD *)(v990 + v4 + 294 * v3);
  v590 = (char *)v589 + *(int *)(v1 + 48);
  *v589 = 532;
  *(_QWORD *)v590 = "OFFSET";
  *((_QWORD *)v590 + 1) = 6;
  v590[16] = 2;
  v9();
  v591 = (_QWORD *)(v990 + v4 + 295 * v3);
  v592 = (char *)v591 + *(int *)(v1 + 48);
  *v591 = 533;
  *(_QWORD *)v592 = "OIDS";
  *((_QWORD *)v592 + 1) = 4;
  v592[16] = 2;
  v9();
  v593 = (_QWORD *)(v990 + v4 + 296 * v3);
  v594 = (char *)v593 + *(int *)(v1 + 48);
  *v593 = 534;
  *(_QWORD *)v594 = "OLD";
  *((_QWORD *)v594 + 1) = 3;
  v594[16] = 2;
  v9();
  v595 = (_QWORD *)(v990 + v4 + 297 * v3);
  v596 = (char *)v595 + *(int *)(v1 + 48);
  *v595 = 535;
  *(_QWORD *)v596 = "ON";
  *((_QWORD *)v596 + 1) = 2;
  v596[16] = 2;
  v9();
  v597 = (_QWORD *)(v990 + v4 + 298 * v3);
  v598 = (char *)v597 + *(int *)(v1 + 48);
  *v597 = 536;
  *(_QWORD *)v598 = "ONLY";
  *((_QWORD *)v598 + 1) = 4;
  v598[16] = 2;
  v9();
  v599 = (_QWORD *)(v990 + v4 + 299 * v3);
  v600 = (char *)v599 + *(int *)(v1 + 48);
  *v599 = 537;
  *(_QWORD *)v600 = "OPERATOR";
  *((_QWORD *)v600 + 1) = 8;
  v600[16] = 2;
  v9();
  v601 = (_QWORD *)(v990 + v4 + 300 * v3);
  v602 = (char *)v601 + *(int *)(v1 + 48);
  *v601 = 538;
  *(_QWORD *)v602 = "OPTION";
  *((_QWORD *)v602 + 1) = 6;
  v602[16] = 2;
  v9();
  v603 = (_QWORD *)(v990 + v4 + 301 * v3);
  v604 = (char *)v603 + *(int *)(v1 + 48);
  *v603 = 539;
  *(_QWORD *)v604 = "OPTIONS";
  *((_QWORD *)v604 + 1) = 7;
  v604[16] = 2;
  v9();
  v605 = (_QWORD *)(v990 + v4 + 302 * v3);
  v606 = (char *)v605 + *(int *)(v1 + 48);
  *v605 = 540;
  *(_QWORD *)v606 = "OR";
  *((_QWORD *)v606 + 1) = 2;
  v606[16] = 2;
  v9();
  v607 = (_QWORD *)(v990 + v4 + 303 * v3);
  v608 = (char *)v607 + *(int *)(v1 + 48);
  *v607 = 541;
  *(_QWORD *)v608 = "ORDER";
  *((_QWORD *)v608 + 1) = 5;
  v608[16] = 2;
  v9();
  v609 = (_QWORD *)(v990 + v4 + 304 * v3);
  v610 = (char *)v609 + *(int *)(v1 + 48);
  *v609 = 542;
  *(_QWORD *)v610 = "ORDINALITY";
  *((_QWORD *)v610 + 1) = 10;
  v610[16] = 2;
  v9();
  v611 = (_QWORD *)(v990 + v4 + 305 * v3);
  v612 = (char *)v611 + *(int *)(v1 + 48);
  *v611 = 543;
  *(_QWORD *)v612 = "OTHERS";
  *((_QWORD *)v612 + 1) = 6;
  v612[16] = 2;
  v9();
  v613 = (_QWORD *)(v990 + v4 + 306 * v3);
  v614 = (char *)v613 + *(int *)(v1 + 48);
  *v613 = 544;
  *(_QWORD *)v614 = "OUT_P";
  *((_QWORD *)v614 + 1) = 5;
  v614[16] = 2;
  v9();
  v615 = (_QWORD *)(v990 + v4 + 307 * v3);
  v616 = (char *)v615 + *(int *)(v1 + 48);
  *v615 = 545;
  *(_QWORD *)v616 = "OUTER_P";
  *((_QWORD *)v616 + 1) = 7;
  v616[16] = 2;
  v9();
  v617 = (_QWORD *)(v990 + v4 + 308 * v3);
  v618 = (char *)v617 + *(int *)(v1 + 48);
  *v617 = 546;
  *(_QWORD *)v618 = "OVER";
  *((_QWORD *)v618 + 1) = 4;
  v618[16] = 2;
  v9();
  v619 = (_QWORD *)(v990 + v4 + 309 * v3);
  v620 = (char *)v619 + *(int *)(v1 + 48);
  *v619 = 547;
  *(_QWORD *)v620 = "OVERLAPS";
  *((_QWORD *)v620 + 1) = 8;
  v620[16] = 2;
  v9();
  v621 = (_QWORD *)(v990 + v4 + 310 * v3);
  v622 = (char *)v621 + *(int *)(v1 + 48);
  *v621 = 548;
  *(_QWORD *)v622 = "OVERLAY";
  *((_QWORD *)v622 + 1) = 7;
  v622[16] = 2;
  v9();
  v623 = (_QWORD *)(v990 + v4 + 311 * v3);
  v624 = (char *)v623 + *(int *)(v1 + 48);
  *v623 = 549;
  *(_QWORD *)v624 = "OVERRIDING";
  *((_QWORD *)v624 + 1) = 10;
  v624[16] = 2;
  v9();
  v625 = (_QWORD *)(v990 + v4 + 312 * v3);
  v626 = (char *)v625 + *(int *)(v1 + 48);
  *v625 = 550;
  *(_QWORD *)v626 = "OWNED";
  *((_QWORD *)v626 + 1) = 5;
  v626[16] = 2;
  v9();
  v627 = (_QWORD *)(v990 + v4 + 313 * v3);
  v628 = (char *)v627 + *(int *)(v1 + 48);
  *v627 = 551;
  *(_QWORD *)v628 = "OWNER";
  *((_QWORD *)v628 + 1) = 5;
  v628[16] = 2;
  v9();
  v629 = (_QWORD *)(v990 + v4 + 314 * v3);
  v630 = (char *)v629 + *(int *)(v1 + 48);
  *v629 = 552;
  *(_QWORD *)v630 = "PARALLEL";
  *((_QWORD *)v630 + 1) = 8;
  v630[16] = 2;
  v9();
  v631 = (_QWORD *)(v990 + v4 + 315 * v3);
  v632 = (char *)v631 + *(int *)(v1 + 48);
  *v631 = 553;
  *(_QWORD *)v632 = "PARSER";
  *((_QWORD *)v632 + 1) = 6;
  v632[16] = 2;
  v9();
  v633 = (_QWORD *)(v990 + v4 + 316 * v3);
  v634 = (char *)v633 + *(int *)(v1 + 48);
  *v633 = 554;
  *(_QWORD *)v634 = "PARTIAL";
  *((_QWORD *)v634 + 1) = 7;
  v634[16] = 2;
  v9();
  v635 = (_QWORD *)(v990 + v4 + 317 * v3);
  v636 = (char *)v635 + *(int *)(v1 + 48);
  *v635 = 555;
  *(_QWORD *)v636 = "PARTITION";
  *((_QWORD *)v636 + 1) = 9;
  v636[16] = 2;
  v9();
  v637 = (_QWORD *)(v990 + v4 + 318 * v3);
  v638 = (char *)v637 + *(int *)(v1 + 48);
  *v637 = 556;
  *(_QWORD *)v638 = "PASSING";
  *((_QWORD *)v638 + 1) = 7;
  v638[16] = 2;
  v9();
  v639 = (_QWORD *)(v990 + v4 + 319 * v3);
  v640 = (char *)v639 + *(int *)(v1 + 48);
  *v639 = 557;
  *(_QWORD *)v640 = "PASSWORD";
  *((_QWORD *)v640 + 1) = 8;
  v640[16] = 2;
  v9();
  v641 = (_QWORD *)(v990 + v4 + 320 * v3);
  v642 = (char *)v641 + *(int *)(v1 + 48);
  *v641 = 558;
  *(_QWORD *)v642 = "PLACING";
  *((_QWORD *)v642 + 1) = 7;
  v642[16] = 2;
  v9();
  v643 = (_QWORD *)(v990 + v4 + 321 * v3);
  v644 = (char *)v643 + *(int *)(v1 + 48);
  *v643 = 559;
  *(_QWORD *)v644 = "PLANS";
  *((_QWORD *)v644 + 1) = 5;
  v644[16] = 2;
  v9();
  v645 = (_QWORD *)(v990 + v4 + 322 * v3);
  v646 = (char *)v645 + *(int *)(v1 + 48);
  *v645 = 560;
  *(_QWORD *)v646 = "POLICY";
  *((_QWORD *)v646 + 1) = 6;
  v646[16] = 2;
  v9();
  v647 = (_QWORD *)(v990 + v4 + 323 * v3);
  v648 = (char *)v647 + *(int *)(v1 + 48);
  *v647 = 561;
  *(_QWORD *)v648 = "POSITION";
  *((_QWORD *)v648 + 1) = 8;
  v648[16] = 2;
  v9();
  v649 = (_QWORD *)(v990 + v4 + 324 * v3);
  v650 = (char *)v649 + *(int *)(v1 + 48);
  *v649 = 562;
  *(_QWORD *)v650 = "PRECEDING";
  *((_QWORD *)v650 + 1) = 9;
  v650[16] = 2;
  v9();
  v651 = (_QWORD *)(v990 + v4 + 325 * v3);
  v652 = (char *)v651 + *(int *)(v1 + 48);
  *v651 = 563;
  *(_QWORD *)v652 = "PRECISION";
  *((_QWORD *)v652 + 1) = 9;
  v652[16] = 2;
  v9();
  v653 = (_QWORD *)(v990 + v4 + 326 * v3);
  v654 = (char *)v653 + *(int *)(v1 + 48);
  *v653 = 564;
  *(_QWORD *)v654 = "PRESERVE";
  *((_QWORD *)v654 + 1) = 8;
  v654[16] = 2;
  v9();
  v655 = (_QWORD *)(v990 + v4 + 327 * v3);
  v656 = (char *)v655 + *(int *)(v1 + 48);
  *v655 = 565;
  *(_QWORD *)v656 = "PREPARE";
  *((_QWORD *)v656 + 1) = 7;
  v656[16] = 2;
  v9();
  v657 = (_QWORD *)(v990 + v4 + 328 * v3);
  v658 = (char *)v657 + *(int *)(v1 + 48);
  *v657 = 566;
  *(_QWORD *)v658 = "PREPARED";
  *((_QWORD *)v658 + 1) = 8;
  v658[16] = 2;
  v9();
  v659 = (_QWORD *)(v990 + v4 + 329 * v3);
  v660 = (char *)v659 + *(int *)(v1 + 48);
  *v659 = 567;
  *(_QWORD *)v660 = "PRIMARY";
  *((_QWORD *)v660 + 1) = 7;
  v660[16] = 2;
  v9();
  v661 = (_QWORD *)(v990 + v4 + 330 * v3);
  v662 = (char *)v661 + *(int *)(v1 + 48);
  *v661 = 568;
  *(_QWORD *)v662 = "PRIOR";
  *((_QWORD *)v662 + 1) = 5;
  v662[16] = 2;
  v9();
  v663 = (_QWORD *)(v990 + v4 + 331 * v3);
  v664 = (char *)v663 + *(int *)(v1 + 48);
  *v663 = 569;
  *(_QWORD *)v664 = "PRIVILEGES";
  *((_QWORD *)v664 + 1) = 10;
  v664[16] = 2;
  v9();
  v665 = (_QWORD *)(v990 + v4 + 332 * v3);
  v666 = (char *)v665 + *(int *)(v1 + 48);
  *v665 = 570;
  *(_QWORD *)v666 = "PROCEDURAL";
  *((_QWORD *)v666 + 1) = 10;
  v666[16] = 2;
  v9();
  v667 = (_QWORD *)(v990 + v4 + 333 * v3);
  v668 = (char *)v667 + *(int *)(v1 + 48);
  *v667 = 571;
  *(_QWORD *)v668 = "PROCEDURE";
  *((_QWORD *)v668 + 1) = 9;
  v668[16] = 2;
  v9();
  v669 = (_QWORD *)(v990 + v4 + 334 * v3);
  v670 = (char *)v669 + *(int *)(v1 + 48);
  *v669 = 572;
  *(_QWORD *)v670 = "PROCEDURES";
  *((_QWORD *)v670 + 1) = 10;
  v670[16] = 2;
  v9();
  v671 = (_QWORD *)(v990 + v4 + 335 * v3);
  v672 = (char *)v671 + *(int *)(v1 + 48);
  *v671 = 573;
  *(_QWORD *)v672 = "PROGRAM";
  *((_QWORD *)v672 + 1) = 7;
  v672[16] = 2;
  v9();
  v673 = (_QWORD *)(v990 + v4 + 336 * v3);
  v674 = (char *)v673 + *(int *)(v1 + 48);
  *v673 = 574;
  *(_QWORD *)v674 = "PUBLICATION";
  *((_QWORD *)v674 + 1) = 11;
  v674[16] = 2;
  v9();
  v675 = (_QWORD *)(v990 + v4 + 337 * v3);
  v676 = (char *)v675 + *(int *)(v1 + 48);
  *v675 = 575;
  *(_QWORD *)v676 = "QUOTE";
  *((_QWORD *)v676 + 1) = 5;
  v676[16] = 2;
  v9();
  v677 = (_QWORD *)(v990 + v4 + 338 * v3);
  v678 = (char *)v677 + *(int *)(v1 + 48);
  *v677 = 576;
  *(_QWORD *)v678 = "RANGE";
  *((_QWORD *)v678 + 1) = 5;
  v678[16] = 2;
  v9();
  v679 = (_QWORD *)(v990 + v4 + 339 * v3);
  v680 = (char *)v679 + *(int *)(v1 + 48);
  *v679 = 577;
  *(_QWORD *)v680 = "READ";
  *((_QWORD *)v680 + 1) = 4;
  v680[16] = 2;
  v9();
  v681 = (_QWORD *)(v990 + v4 + 340 * v3);
  v682 = (char *)v681 + *(int *)(v1 + 48);
  *v681 = 578;
  *(_QWORD *)v682 = "REAL";
  *((_QWORD *)v682 + 1) = 4;
  v682[16] = 2;
  v9();
  v683 = (_QWORD *)(v990 + v4 + 341 * v3);
  v684 = (char *)v683 + *(int *)(v1 + 48);
  *v683 = 579;
  *(_QWORD *)v684 = "REASSIGN";
  *((_QWORD *)v684 + 1) = 8;
  v684[16] = 2;
  v9();
  v685 = (_QWORD *)(v990 + v4 + 342 * v3);
  v686 = (char *)v685 + *(int *)(v1 + 48);
  *v685 = 580;
  *(_QWORD *)v686 = "RECHECK";
  *((_QWORD *)v686 + 1) = 7;
  v686[16] = 2;
  v9();
  v687 = (_QWORD *)(v990 + v4 + 343 * v3);
  v688 = (char *)v687 + *(int *)(v1 + 48);
  *v687 = 581;
  *(_QWORD *)v688 = "RECURSIVE";
  *((_QWORD *)v688 + 1) = 9;
  v688[16] = 2;
  v9();
  v689 = (_QWORD *)(v990 + v4 + 344 * v3);
  v690 = (char *)v689 + *(int *)(v1 + 48);
  *v689 = 582;
  *(_QWORD *)v690 = "REF";
  *((_QWORD *)v690 + 1) = 3;
  v690[16] = 2;
  v9();
  v691 = (_QWORD *)(v990 + v4 + 345 * v3);
  v692 = (char *)v691 + *(int *)(v1 + 48);
  *v691 = 583;
  *(_QWORD *)v692 = "REFERENCES";
  *((_QWORD *)v692 + 1) = 10;
  v692[16] = 2;
  v9();
  v693 = (_QWORD *)(v990 + v4 + 346 * v3);
  v694 = (char *)v693 + *(int *)(v1 + 48);
  *v693 = 584;
  *(_QWORD *)v694 = "REFERENCING";
  *((_QWORD *)v694 + 1) = 11;
  v694[16] = 2;
  v9();
  v695 = (_QWORD *)(v990 + v4 + 347 * v3);
  v696 = (char *)v695 + *(int *)(v1 + 48);
  *v695 = 585;
  *(_QWORD *)v696 = "REFRESH";
  *((_QWORD *)v696 + 1) = 7;
  v696[16] = 2;
  v9();
  v697 = (_QWORD *)(v990 + v4 + 348 * v3);
  v698 = (char *)v697 + *(int *)(v1 + 48);
  *v697 = 586;
  *(_QWORD *)v698 = "REINDEX";
  *((_QWORD *)v698 + 1) = 7;
  v698[16] = 2;
  v9();
  v699 = (_QWORD *)(v990 + v4 + 349 * v3);
  v700 = (char *)v699 + *(int *)(v1 + 48);
  *v699 = 587;
  *(_QWORD *)v700 = "RELATIVE_P";
  *((_QWORD *)v700 + 1) = 10;
  v700[16] = 2;
  v9();
  v701 = (_QWORD *)(v990 + v4 + 350 * v3);
  v702 = (char *)v701 + *(int *)(v1 + 48);
  *v701 = 588;
  *(_QWORD *)v702 = "RELEASE";
  *((_QWORD *)v702 + 1) = 7;
  v702[16] = 2;
  v9();
  v703 = (_QWORD *)(v990 + v4 + 351 * v3);
  v704 = (char *)v703 + *(int *)(v1 + 48);
  *v703 = 589;
  *(_QWORD *)v704 = "RENAME";
  *((_QWORD *)v704 + 1) = 6;
  v704[16] = 2;
  v9();
  v705 = (_QWORD *)(v990 + v4 + 352 * v3);
  v706 = (char *)v705 + *(int *)(v1 + 48);
  *v705 = 590;
  *(_QWORD *)v706 = "REPEATABLE";
  *((_QWORD *)v706 + 1) = 10;
  v706[16] = 2;
  v9();
  v707 = (_QWORD *)(v990 + v4 + 353 * v3);
  v708 = (char *)v707 + *(int *)(v1 + 48);
  *v707 = 591;
  *(_QWORD *)v708 = "REPLACE";
  *((_QWORD *)v708 + 1) = 7;
  v708[16] = 2;
  v9();
  v709 = (_QWORD *)(v990 + v4 + 354 * v3);
  v710 = (char *)v709 + *(int *)(v1 + 48);
  *v709 = 592;
  *(_QWORD *)v710 = "REPLICA";
  *((_QWORD *)v710 + 1) = 7;
  v710[16] = 2;
  v9();
  v711 = (_QWORD *)(v990 + v4 + 355 * v3);
  v712 = (char *)v711 + *(int *)(v1 + 48);
  *v711 = 593;
  *(_QWORD *)v712 = "RESET";
  *((_QWORD *)v712 + 1) = 5;
  v712[16] = 2;
  v9();
  v713 = (_QWORD *)(v990 + v4 + 356 * v3);
  v714 = (char *)v713 + *(int *)(v1 + 48);
  *v713 = 594;
  *(_QWORD *)v714 = "RESTART";
  *((_QWORD *)v714 + 1) = 7;
  v714[16] = 2;
  v9();
  v715 = (_QWORD *)(v990 + v4 + 357 * v3);
  v716 = (char *)v715 + *(int *)(v1 + 48);
  *v715 = 595;
  *(_QWORD *)v716 = "RESTRICT";
  *((_QWORD *)v716 + 1) = 8;
  v716[16] = 2;
  v9();
  v717 = (_QWORD *)(v990 + v4 + 358 * v3);
  v718 = (char *)v717 + *(int *)(v1 + 48);
  *v717 = 596;
  *(_QWORD *)v718 = "RETURNING";
  *((_QWORD *)v718 + 1) = 9;
  v718[16] = 2;
  v9();
  v719 = (_QWORD *)(v990 + v4 + 359 * v3);
  v720 = (char *)v719 + *(int *)(v1 + 48);
  *v719 = 597;
  *(_QWORD *)v720 = "RETURNS";
  *((_QWORD *)v720 + 1) = 7;
  v720[16] = 2;
  v9();
  v721 = (_QWORD *)(v990 + v4 + 360 * v3);
  v722 = (char *)v721 + *(int *)(v1 + 48);
  *v721 = 598;
  *(_QWORD *)v722 = "REVOKE";
  *((_QWORD *)v722 + 1) = 6;
  v722[16] = 2;
  v9();
  v723 = (_QWORD *)(v990 + v4 + 361 * v3);
  v724 = (char *)v723 + *(int *)(v1 + 48);
  *v723 = 599;
  *(_QWORD *)v724 = "RIGHT";
  *((_QWORD *)v724 + 1) = 5;
  v724[16] = 2;
  v9();
  v725 = (_QWORD *)(v990 + v4 + 362 * v3);
  v726 = (char *)v725 + *(int *)(v1 + 48);
  *v725 = 600;
  *(_QWORD *)v726 = "ROLE";
  *((_QWORD *)v726 + 1) = 4;
  v726[16] = 2;
  v9();
  v727 = (_QWORD *)(v990 + v4 + 363 * v3);
  v728 = (char *)v727 + *(int *)(v1 + 48);
  *v727 = 601;
  *(_QWORD *)v728 = "ROLLBACK";
  *((_QWORD *)v728 + 1) = 8;
  v728[16] = 2;
  v9();
  v729 = (_QWORD *)(v990 + v4 + 364 * v3);
  v730 = (char *)v729 + *(int *)(v1 + 48);
  *v729 = 602;
  *(_QWORD *)v730 = "ROLLUP";
  *((_QWORD *)v730 + 1) = 6;
  v730[16] = 2;
  v9();
  v731 = (_QWORD *)(v990 + v4 + 365 * v3);
  v732 = (char *)v731 + *(int *)(v1 + 48);
  *v731 = 603;
  *(_QWORD *)v732 = "ROUTINE";
  *((_QWORD *)v732 + 1) = 7;
  v732[16] = 2;
  v9();
  v733 = (_QWORD *)(v990 + v4 + 366 * v3);
  v734 = (char *)v733 + *(int *)(v1 + 48);
  *v733 = 604;
  *(_QWORD *)v734 = "ROUTINES";
  *((_QWORD *)v734 + 1) = 8;
  v734[16] = 2;
  v9();
  v735 = (_QWORD *)(v990 + v4 + 367 * v3);
  v736 = (char *)v735 + *(int *)(v1 + 48);
  *v735 = 605;
  *(_QWORD *)v736 = "ROW";
  *((_QWORD *)v736 + 1) = 3;
  v736[16] = 2;
  v9();
  v737 = (_QWORD *)(v990 + v4 + 368 * v3);
  v738 = (char *)v737 + *(int *)(v1 + 48);
  *v737 = 606;
  *(_QWORD *)v738 = "ROWS";
  *((_QWORD *)v738 + 1) = 4;
  v738[16] = 2;
  v9();
  v739 = (_QWORD *)(v990 + v4 + 369 * v3);
  v740 = (char *)v739 + *(int *)(v1 + 48);
  *v739 = 607;
  *(_QWORD *)v740 = "RULE";
  *((_QWORD *)v740 + 1) = 4;
  v740[16] = 2;
  v9();
  v741 = (_QWORD *)(v990 + v4 + 370 * v3);
  v742 = (char *)v741 + *(int *)(v1 + 48);
  *v741 = 608;
  *(_QWORD *)v742 = "SAVEPOINT";
  *((_QWORD *)v742 + 1) = 9;
  v742[16] = 2;
  v9();
  v743 = (_QWORD *)(v990 + v4 + 371 * v3);
  v744 = (char *)v743 + *(int *)(v1 + 48);
  *v743 = 609;
  *(_QWORD *)v744 = "SCHEMA";
  *((_QWORD *)v744 + 1) = 6;
  v744[16] = 2;
  v9();
  v745 = (_QWORD *)(v990 + v4 + 372 * v3);
  v746 = (char *)v745 + *(int *)(v1 + 48);
  *v745 = 610;
  *(_QWORD *)v746 = "SCHEMAS";
  *((_QWORD *)v746 + 1) = 7;
  v746[16] = 2;
  v9();
  v747 = (_QWORD *)(v990 + v4 + 373 * v3);
  v748 = (char *)v747 + *(int *)(v1 + 48);
  *v747 = 611;
  *(_QWORD *)v748 = "SCROLL";
  *((_QWORD *)v748 + 1) = 6;
  v748[16] = 2;
  v9();
  v749 = (_QWORD *)(v990 + v4 + 374 * v3);
  v750 = (char *)v749 + *(int *)(v1 + 48);
  *v749 = 612;
  *(_QWORD *)v750 = "SEARCH";
  *((_QWORD *)v750 + 1) = 6;
  v750[16] = 2;
  v9();
  v751 = (_QWORD *)(v990 + v4 + 375 * v3);
  v752 = (char *)v751 + *(int *)(v1 + 48);
  *v751 = 613;
  *(_QWORD *)v752 = "SECOND_P";
  *((_QWORD *)v752 + 1) = 8;
  v752[16] = 2;
  v9();
  v753 = (_QWORD *)(v990 + v4 + 376 * v3);
  v754 = (char *)v753 + *(int *)(v1 + 48);
  *v753 = 614;
  *(_QWORD *)v754 = "SECURITY";
  *((_QWORD *)v754 + 1) = 8;
  v754[16] = 2;
  v9();
  v755 = (_QWORD *)(v990 + v4 + 377 * v3);
  v756 = (char *)v755 + *(int *)(v1 + 48);
  *v755 = 615;
  *(_QWORD *)v756 = "SELECT";
  *((_QWORD *)v756 + 1) = 6;
  v756[16] = 2;
  v9();
  v757 = (_QWORD *)(v990 + v4 + 378 * v3);
  v758 = (char *)v757 + *(int *)(v1 + 48);
  *v757 = 616;
  *(_QWORD *)v758 = "SEQUENCE";
  *((_QWORD *)v758 + 1) = 8;
  v758[16] = 2;
  v9();
  v759 = (_QWORD *)(v990 + v4 + 379 * v3);
  v760 = (char *)v759 + *(int *)(v1 + 48);
  *v759 = 617;
  *(_QWORD *)v760 = "SEQUENCES";
  *((_QWORD *)v760 + 1) = 9;
  v760[16] = 2;
  v9();
  v761 = (_QWORD *)(v990 + v4 + 380 * v3);
  v762 = (char *)v761 + *(int *)(v1 + 48);
  *v761 = 618;
  *(_QWORD *)v762 = "SERIALIZABLE";
  *((_QWORD *)v762 + 1) = 12;
  v762[16] = 2;
  v9();
  v763 = (_QWORD *)(v990 + v4 + 381 * v3);
  v764 = (char *)v763 + *(int *)(v1 + 48);
  *v763 = 619;
  *(_QWORD *)v764 = "SERVER";
  *((_QWORD *)v764 + 1) = 6;
  v764[16] = 2;
  v9();
  v765 = (_QWORD *)(v990 + v4 + 382 * v3);
  v766 = (char *)v765 + *(int *)(v1 + 48);
  *v765 = 620;
  *(_QWORD *)v766 = "SESSION";
  *((_QWORD *)v766 + 1) = 7;
  v766[16] = 2;
  v9();
  v767 = (_QWORD *)(v990 + v4 + 383 * v3);
  v768 = (char *)v767 + *(int *)(v1 + 48);
  *v767 = 621;
  *(_QWORD *)v768 = "SESSION_USER";
  *((_QWORD *)v768 + 1) = 12;
  v768[16] = 2;
  v9();
  v769 = (_QWORD *)(v990 + v4 + 384 * v3);
  v770 = (char *)v769 + *(int *)(v1 + 48);
  *v769 = 622;
  *(_QWORD *)v770 = "SET";
  *((_QWORD *)v770 + 1) = 3;
  v770[16] = 2;
  v9();
  v771 = (_QWORD *)(v990 + v4 + 385 * v3);
  v772 = (char *)v771 + *(int *)(v1 + 48);
  *v771 = 623;
  *(_QWORD *)v772 = "SETS";
  *((_QWORD *)v772 + 1) = 4;
  v772[16] = 2;
  v9();
  v773 = (_QWORD *)(v990 + v4 + 386 * v3);
  v774 = (char *)v773 + *(int *)(v1 + 48);
  *v773 = 624;
  *(_QWORD *)v774 = "SETOF";
  *((_QWORD *)v774 + 1) = 5;
  v774[16] = 2;
  v9();
  v775 = (_QWORD *)(v990 + v4 + 387 * v3);
  v776 = (char *)v775 + *(int *)(v1 + 48);
  *v775 = 625;
  *(_QWORD *)v776 = "SHARE";
  *((_QWORD *)v776 + 1) = 5;
  v776[16] = 2;
  v9();
  v777 = (_QWORD *)(v990 + v4 + 388 * v3);
  v778 = (char *)v777 + *(int *)(v1 + 48);
  *v777 = 626;
  *(_QWORD *)v778 = "SHOW";
  *((_QWORD *)v778 + 1) = 4;
  v778[16] = 2;
  v9();
  v779 = (_QWORD *)(v990 + v4 + 389 * v3);
  v780 = (char *)v779 + *(int *)(v1 + 48);
  *v779 = 627;
  *(_QWORD *)v780 = "SIMILAR";
  *((_QWORD *)v780 + 1) = 7;
  v780[16] = 2;
  v9();
  v781 = (_QWORD *)(v990 + v4 + 390 * v3);
  v782 = (char *)v781 + *(int *)(v1 + 48);
  *v781 = 628;
  *(_QWORD *)v782 = "SIMPLE";
  *((_QWORD *)v782 + 1) = 6;
  v782[16] = 2;
  v9();
  v783 = (_QWORD *)(v990 + v4 + 391 * v3);
  v784 = (char *)v783 + *(int *)(v1 + 48);
  *v783 = 629;
  *(_QWORD *)v784 = "SKIP";
  *((_QWORD *)v784 + 1) = 4;
  v784[16] = 2;
  v9();
  v785 = (_QWORD *)(v990 + v4 + 392 * v3);
  v786 = (char *)v785 + *(int *)(v1 + 48);
  *v785 = 630;
  *(_QWORD *)v786 = "SMALLINT";
  *((_QWORD *)v786 + 1) = 8;
  v786[16] = 2;
  v9();
  v787 = (_QWORD *)(v990 + v4 + 393 * v3);
  v788 = (char *)v787 + *(int *)(v1 + 48);
  *v787 = 631;
  *(_QWORD *)v788 = "SNAPSHOT";
  *((_QWORD *)v788 + 1) = 8;
  v788[16] = 2;
  v9();
  v789 = (_QWORD *)(v990 + v4 + 394 * v3);
  v790 = (char *)v789 + *(int *)(v1 + 48);
  *v789 = 632;
  *(_QWORD *)v790 = "SOME";
  *((_QWORD *)v790 + 1) = 4;
  v790[16] = 2;
  v9();
  v791 = (_QWORD *)(v990 + v4 + 395 * v3);
  v792 = (char *)v791 + *(int *)(v1 + 48);
  *v791 = 633;
  *(_QWORD *)v792 = "SQL_P";
  *((_QWORD *)v792 + 1) = 5;
  v792[16] = 2;
  v9();
  v793 = (_QWORD *)(v990 + v4 + 396 * v3);
  v794 = (char *)v793 + *(int *)(v1 + 48);
  *v793 = 634;
  *(_QWORD *)v794 = "STABLE";
  *((_QWORD *)v794 + 1) = 6;
  v794[16] = 2;
  v9();
  v795 = (_QWORD *)(v990 + v4 + 397 * v3);
  v796 = (char *)v795 + *(int *)(v1 + 48);
  *v795 = 635;
  *(_QWORD *)v796 = "STANDALONE_P";
  *((_QWORD *)v796 + 1) = 12;
  v796[16] = 2;
  v9();
  v797 = (_QWORD *)(v990 + v4 + 398 * v3);
  v798 = (char *)v797 + *(int *)(v1 + 48);
  *v797 = 636;
  *(_QWORD *)v798 = "START";
  *((_QWORD *)v798 + 1) = 5;
  v798[16] = 2;
  v9();
  v799 = (_QWORD *)(v990 + v4 + 399 * v3);
  v800 = (char *)v799 + *(int *)(v1 + 48);
  *v799 = 637;
  *(_QWORD *)v800 = "STATEMENT";
  *((_QWORD *)v800 + 1) = 9;
  v800[16] = 2;
  v9();
  v801 = (_QWORD *)(v990 + v4 + 400 * v3);
  v802 = (char *)v801 + *(int *)(v1 + 48);
  *v801 = 638;
  *(_QWORD *)v802 = "STATISTICS";
  *((_QWORD *)v802 + 1) = 10;
  v802[16] = 2;
  v9();
  v803 = (_QWORD *)(v990 + v4 + 401 * v3);
  v804 = (char *)v803 + *(int *)(v1 + 48);
  *v803 = 639;
  *(_QWORD *)v804 = "STDIN";
  *((_QWORD *)v804 + 1) = 5;
  v804[16] = 2;
  v9();
  v805 = (_QWORD *)(v990 + v4 + 402 * v3);
  v806 = (char *)v805 + *(int *)(v1 + 48);
  *v805 = 640;
  *(_QWORD *)v806 = "STDOUT";
  *((_QWORD *)v806 + 1) = 6;
  v806[16] = 2;
  v9();
  v807 = (_QWORD *)(v990 + v4 + 403 * v3);
  v808 = (char *)v807 + *(int *)(v1 + 48);
  *v807 = 641;
  *(_QWORD *)v808 = "STORAGE";
  *((_QWORD *)v808 + 1) = 7;
  v808[16] = 2;
  v9();
  v809 = (_QWORD *)(v990 + v4 + 404 * v3);
  v810 = (char *)v809 + *(int *)(v1 + 48);
  *v809 = 642;
  *(_QWORD *)v810 = "STORED";
  *((_QWORD *)v810 + 1) = 6;
  v810[16] = 2;
  v9();
  v811 = (_QWORD *)(v990 + v4 + 405 * v3);
  v812 = (char *)v811 + *(int *)(v1 + 48);
  *v811 = 643;
  *(_QWORD *)v812 = "STRICT_P";
  *((_QWORD *)v812 + 1) = 8;
  v812[16] = 2;
  v9();
  v813 = (_QWORD *)(v990 + v4 + 406 * v3);
  v814 = (char *)v813 + *(int *)(v1 + 48);
  *v813 = 644;
  *(_QWORD *)v814 = "STRIP_P";
  *((_QWORD *)v814 + 1) = 7;
  v814[16] = 2;
  v9();
  v815 = (_QWORD *)(v990 + v4 + 407 * v3);
  v816 = (char *)v815 + *(int *)(v1 + 48);
  *v815 = 645;
  *(_QWORD *)v816 = "SUBSCRIPTION";
  *((_QWORD *)v816 + 1) = 12;
  v816[16] = 2;
  v9();
  v817 = (_QWORD *)(v990 + v4 + 408 * v3);
  v818 = (char *)v817 + *(int *)(v1 + 48);
  *v817 = 646;
  *(_QWORD *)v818 = "SUBSTRING";
  *((_QWORD *)v818 + 1) = 9;
  v818[16] = 2;
  v9();
  v819 = (_QWORD *)(v990 + v4 + 409 * v3);
  v820 = (char *)v819 + *(int *)(v1 + 48);
  *v819 = 647;
  *(_QWORD *)v820 = "SUPPORT";
  *((_QWORD *)v820 + 1) = 7;
  v820[16] = 2;
  v9();
  v821 = (_QWORD *)(v990 + v4 + 410 * v3);
  v822 = (char *)v821 + *(int *)(v1 + 48);
  *v821 = 648;
  *(_QWORD *)v822 = "SYMMETRIC";
  *((_QWORD *)v822 + 1) = 9;
  v822[16] = 2;
  v9();
  v823 = (_QWORD *)(v990 + v4 + 411 * v3);
  v824 = (char *)v823 + *(int *)(v1 + 48);
  *v823 = 649;
  *(_QWORD *)v824 = "SYSID";
  *((_QWORD *)v824 + 1) = 5;
  v824[16] = 2;
  v9();
  v825 = (_QWORD *)(v990 + v4 + 412 * v3);
  v826 = (char *)v825 + *(int *)(v1 + 48);
  *v825 = 650;
  *(_QWORD *)v826 = "SYSTEM_P";
  *((_QWORD *)v826 + 1) = 8;
  v826[16] = 2;
  v9();
  v827 = (_QWORD *)(v990 + v4 + 413 * v3);
  v828 = (char *)v827 + *(int *)(v1 + 48);
  *v827 = 651;
  *(_QWORD *)v828 = "TABLE";
  *((_QWORD *)v828 + 1) = 5;
  v828[16] = 2;
  v9();
  v829 = (_QWORD *)(v990 + v4 + 414 * v3);
  v830 = (char *)v829 + *(int *)(v1 + 48);
  *v829 = 652;
  *(_QWORD *)v830 = "TABLES";
  *((_QWORD *)v830 + 1) = 6;
  v830[16] = 2;
  v9();
  v831 = (_QWORD *)(v990 + v4 + 415 * v3);
  v832 = (char *)v831 + *(int *)(v1 + 48);
  *v831 = 653;
  *(_QWORD *)v832 = "TABLESAMPLE";
  *((_QWORD *)v832 + 1) = 11;
  v832[16] = 2;
  v9();
  v833 = (_QWORD *)(v990 + v4 + 416 * v3);
  v834 = (char *)v833 + *(int *)(v1 + 48);
  *v833 = 654;
  *(_QWORD *)v834 = "TABLESPACE";
  *((_QWORD *)v834 + 1) = 10;
  v834[16] = 2;
  v9();
  v835 = (_QWORD *)(v990 + v4 + 417 * v3);
  v836 = (char *)v835 + *(int *)(v1 + 48);
  *v835 = 655;
  *(_QWORD *)v836 = "TEMP";
  *((_QWORD *)v836 + 1) = 4;
  v836[16] = 2;
  v9();
  v837 = (_QWORD *)(v990 + v4 + 418 * v3);
  v838 = (char *)v837 + *(int *)(v1 + 48);
  *v837 = 656;
  *(_QWORD *)v838 = "TEMPLATE";
  *((_QWORD *)v838 + 1) = 8;
  v838[16] = 2;
  v9();
  v839 = (_QWORD *)(v990 + v4 + 419 * v3);
  v840 = (char *)v839 + *(int *)(v1 + 48);
  *v839 = 657;
  *(_QWORD *)v840 = "TEMPORARY";
  *((_QWORD *)v840 + 1) = 9;
  v840[16] = 2;
  v9();
  v841 = (_QWORD *)(v990 + v4 + 420 * v3);
  v842 = (char *)v841 + *(int *)(v1 + 48);
  *v841 = 658;
  *(_QWORD *)v842 = "TEXT_P";
  *((_QWORD *)v842 + 1) = 6;
  v842[16] = 2;
  v9();
  v843 = (_QWORD *)(v990 + v4 + 421 * v3);
  v844 = (char *)v843 + *(int *)(v1 + 48);
  *v843 = 659;
  *(_QWORD *)v844 = "THEN";
  *((_QWORD *)v844 + 1) = 4;
  v844[16] = 2;
  v9();
  v845 = (_QWORD *)(v990 + v4 + 422 * v3);
  v846 = (char *)v845 + *(int *)(v1 + 48);
  *v845 = 660;
  *(_QWORD *)v846 = "TIES";
  *((_QWORD *)v846 + 1) = 4;
  v846[16] = 2;
  v9();
  v847 = (_QWORD *)(v990 + v4 + 423 * v3);
  v848 = (char *)v847 + *(int *)(v1 + 48);
  *v847 = 661;
  *(_QWORD *)v848 = "TIME";
  *((_QWORD *)v848 + 1) = 4;
  v848[16] = 2;
  v9();
  v849 = (_QWORD *)(v990 + v4 + 424 * v3);
  v850 = (char *)v849 + *(int *)(v1 + 48);
  *v849 = 662;
  *(_QWORD *)v850 = "TIMESTAMP";
  *((_QWORD *)v850 + 1) = 9;
  v850[16] = 2;
  v9();
  v851 = (_QWORD *)(v990 + v4 + 425 * v3);
  v852 = (char *)v851 + *(int *)(v1 + 48);
  *v851 = 663;
  *(_QWORD *)v852 = "TO";
  *((_QWORD *)v852 + 1) = 2;
  v852[16] = 2;
  v9();
  v853 = (_QWORD *)(v990 + v4 + 426 * v3);
  v854 = (char *)v853 + *(int *)(v1 + 48);
  *v853 = 664;
  *(_QWORD *)v854 = "TRAILING";
  *((_QWORD *)v854 + 1) = 8;
  v854[16] = 2;
  v9();
  v855 = (_QWORD *)(v990 + v4 + 427 * v3);
  v856 = (char *)v855 + *(int *)(v1 + 48);
  *v855 = 665;
  *(_QWORD *)v856 = "TRANSACTION";
  *((_QWORD *)v856 + 1) = 11;
  v856[16] = 2;
  v9();
  v857 = (_QWORD *)(v990 + v4 + 428 * v3);
  v858 = (char *)v857 + *(int *)(v1 + 48);
  *v857 = 666;
  *(_QWORD *)v858 = "TRANSFORM";
  *((_QWORD *)v858 + 1) = 9;
  v858[16] = 2;
  v9();
  v859 = (_QWORD *)(v990 + v4 + 429 * v3);
  v860 = (char *)v859 + *(int *)(v1 + 48);
  *v859 = 667;
  *(_QWORD *)v860 = "TREAT";
  *((_QWORD *)v860 + 1) = 5;
  v860[16] = 2;
  v9();
  v861 = (_QWORD *)(v990 + v4 + 430 * v3);
  v862 = (char *)v861 + *(int *)(v1 + 48);
  *v861 = 668;
  *(_QWORD *)v862 = "TRIGGER";
  *((_QWORD *)v862 + 1) = 7;
  v862[16] = 2;
  v9();
  v863 = (_QWORD *)(v990 + v4 + 431 * v3);
  v864 = (char *)v863 + *(int *)(v1 + 48);
  *v863 = 669;
  *(_QWORD *)v864 = "TRIM";
  *((_QWORD *)v864 + 1) = 4;
  v864[16] = 2;
  v9();
  v865 = (_QWORD *)(v990 + v4 + 432 * v3);
  v866 = (char *)v865 + *(int *)(v1 + 48);
  *v865 = 670;
  *(_QWORD *)v866 = "TRUE_P";
  *((_QWORD *)v866 + 1) = 6;
  v866[16] = 2;
  v9();
  v867 = (_QWORD *)(v990 + v4 + 433 * v3);
  v868 = (char *)v867 + *(int *)(v1 + 48);
  *v867 = 671;
  *(_QWORD *)v868 = "TRUNCATE";
  *((_QWORD *)v868 + 1) = 8;
  v868[16] = 2;
  v9();
  v869 = (_QWORD *)(v990 + v4 + 434 * v3);
  v870 = (char *)v869 + *(int *)(v1 + 48);
  *v869 = 672;
  *(_QWORD *)v870 = "TRUSTED";
  *((_QWORD *)v870 + 1) = 7;
  v870[16] = 2;
  v9();
  v871 = (_QWORD *)(v990 + v4 + 435 * v3);
  v872 = (char *)v871 + *(int *)(v1 + 48);
  *v871 = 673;
  *(_QWORD *)v872 = "TYPE_P";
  *((_QWORD *)v872 + 1) = 6;
  v872[16] = 2;
  v9();
  v873 = (_QWORD *)(v990 + v4 + 436 * v3);
  v874 = (char *)v873 + *(int *)(v1 + 48);
  *v873 = 674;
  *(_QWORD *)v874 = "TYPES_P";
  *((_QWORD *)v874 + 1) = 7;
  v874[16] = 2;
  v9();
  v875 = (_QWORD *)(v990 + v4 + 437 * v3);
  v876 = (char *)v875 + *(int *)(v1 + 48);
  *v875 = 675;
  *(_QWORD *)v876 = "UESCAPE";
  *((_QWORD *)v876 + 1) = 7;
  v876[16] = 2;
  v9();
  v877 = (_QWORD *)(v990 + v4 + 438 * v3);
  v878 = (char *)v877 + *(int *)(v1 + 48);
  *v877 = 676;
  *(_QWORD *)v878 = "UNBOUNDED";
  *((_QWORD *)v878 + 1) = 9;
  v878[16] = 2;
  v9();
  v879 = (_QWORD *)(v990 + v4 + 439 * v3);
  v880 = (char *)v879 + *(int *)(v1 + 48);
  *v879 = 677;
  *(_QWORD *)v880 = "UNCOMMITTED";
  *((_QWORD *)v880 + 1) = 11;
  v880[16] = 2;
  v9();
  v881 = (_QWORD *)(v990 + v4 + 440 * v3);
  v882 = (char *)v881 + *(int *)(v1 + 48);
  *v881 = 678;
  *(_QWORD *)v882 = "UNENCRYPTED";
  *((_QWORD *)v882 + 1) = 11;
  v882[16] = 2;
  v9();
  v883 = (_QWORD *)(v990 + v4 + 441 * v3);
  v884 = (char *)v883 + *(int *)(v1 + 48);
  *v883 = 679;
  *(_QWORD *)v884 = "UNION";
  *((_QWORD *)v884 + 1) = 5;
  v884[16] = 2;
  v9();
  v885 = (_QWORD *)(v990 + v4 + 442 * v3);
  v886 = (char *)v885 + *(int *)(v1 + 48);
  *v885 = 680;
  *(_QWORD *)v886 = "UNIQUE";
  *((_QWORD *)v886 + 1) = 6;
  v886[16] = 2;
  v9();
  v887 = (_QWORD *)(v990 + v4 + 443 * v3);
  v888 = (char *)v887 + *(int *)(v1 + 48);
  *v887 = 681;
  *(_QWORD *)v888 = "UNKNOWN";
  *((_QWORD *)v888 + 1) = 7;
  v888[16] = 2;
  v9();
  v889 = (_QWORD *)(v990 + v4 + 444 * v3);
  v890 = (char *)v889 + *(int *)(v1 + 48);
  *v889 = 682;
  *(_QWORD *)v890 = "UNLISTEN";
  *((_QWORD *)v890 + 1) = 8;
  v890[16] = 2;
  v9();
  v891 = (_QWORD *)(v990 + v4 + 445 * v3);
  v892 = (char *)v891 + *(int *)(v1 + 48);
  *v891 = 683;
  *(_QWORD *)v892 = "UNLOGGED";
  *((_QWORD *)v892 + 1) = 8;
  v892[16] = 2;
  v9();
  v893 = (_QWORD *)(v990 + v4 + 446 * v3);
  v894 = (char *)v893 + *(int *)(v1 + 48);
  *v893 = 684;
  *(_QWORD *)v894 = "UNTIL";
  *((_QWORD *)v894 + 1) = 5;
  v894[16] = 2;
  v9();
  v895 = (_QWORD *)(v990 + v4 + 447 * v3);
  v896 = (char *)v895 + *(int *)(v1 + 48);
  *v895 = 685;
  *(_QWORD *)v896 = "UPDATE";
  *((_QWORD *)v896 + 1) = 6;
  v896[16] = 2;
  v9();
  v897 = (_QWORD *)(v990 + v4 + 448 * v3);
  v898 = (char *)v897 + *(int *)(v1 + 48);
  *v897 = 686;
  *(_QWORD *)v898 = "USER";
  *((_QWORD *)v898 + 1) = 4;
  v898[16] = 2;
  v9();
  v899 = (_QWORD *)(v990 + v4 + 449 * v3);
  v900 = (char *)v899 + *(int *)(v1 + 48);
  *v899 = 687;
  *(_QWORD *)v900 = "USING";
  *((_QWORD *)v900 + 1) = 5;
  v900[16] = 2;
  v9();
  v901 = (_QWORD *)(v990 + v4 + 450 * v3);
  v902 = (char *)v901 + *(int *)(v1 + 48);
  *v901 = 688;
  *(_QWORD *)v902 = "VACUUM";
  *((_QWORD *)v902 + 1) = 6;
  v902[16] = 2;
  v9();
  v903 = (_QWORD *)(v990 + v4 + 451 * v3);
  v904 = (char *)v903 + *(int *)(v1 + 48);
  *v903 = 689;
  *(_QWORD *)v904 = "VALID";
  *((_QWORD *)v904 + 1) = 5;
  v904[16] = 2;
  v9();
  v905 = (_QWORD *)(v990 + v4 + 452 * v3);
  v906 = (char *)v905 + *(int *)(v1 + 48);
  *v905 = 690;
  *(_QWORD *)v906 = "VALIDATE";
  *((_QWORD *)v906 + 1) = 8;
  v906[16] = 2;
  v9();
  v907 = (_QWORD *)(v990 + v4 + 453 * v3);
  v908 = (char *)v907 + *(int *)(v1 + 48);
  *v907 = 691;
  *(_QWORD *)v908 = "VALIDATOR";
  *((_QWORD *)v908 + 1) = 9;
  v908[16] = 2;
  v9();
  v909 = (_QWORD *)(v990 + v4 + 454 * v3);
  v910 = (char *)v909 + *(int *)(v1 + 48);
  *v909 = 692;
  *(_QWORD *)v910 = "VALUE_P";
  *((_QWORD *)v910 + 1) = 7;
  v910[16] = 2;
  v9();
  v911 = (_QWORD *)(v990 + v4 + 455 * v3);
  v912 = (char *)v911 + *(int *)(v1 + 48);
  *v911 = 693;
  *(_QWORD *)v912 = "VALUES";
  *((_QWORD *)v912 + 1) = 6;
  v912[16] = 2;
  v9();
  v913 = (_QWORD *)(v990 + v4 + 456 * v3);
  v914 = (char *)v913 + *(int *)(v1 + 48);
  *v913 = 694;
  *(_QWORD *)v914 = "VARCHAR";
  *((_QWORD *)v914 + 1) = 7;
  v914[16] = 2;
  v9();
  v915 = (_QWORD *)(v990 + v4 + 457 * v3);
  v916 = (char *)v915 + *(int *)(v1 + 48);
  *v915 = 695;
  *(_QWORD *)v916 = "VARIADIC";
  *((_QWORD *)v916 + 1) = 8;
  v916[16] = 2;
  v9();
  v917 = (_QWORD *)(v990 + v4 + 458 * v3);
  v918 = (char *)v917 + *(int *)(v1 + 48);
  *v917 = 696;
  *(_QWORD *)v918 = "VARYING";
  *((_QWORD *)v918 + 1) = 7;
  v918[16] = 2;
  v9();
  v919 = (_QWORD *)(v990 + v4 + 459 * v3);
  v920 = (char *)v919 + *(int *)(v1 + 48);
  *v919 = 697;
  *(_QWORD *)v920 = "VERBOSE";
  *((_QWORD *)v920 + 1) = 7;
  v920[16] = 2;
  v9();
  v921 = (_QWORD *)(v990 + v4 + 460 * v3);
  v922 = (char *)v921 + *(int *)(v1 + 48);
  *v921 = 698;
  *(_QWORD *)v922 = "VERSION_P";
  *((_QWORD *)v922 + 1) = 9;
  v922[16] = 2;
  v9();
  v923 = (_QWORD *)(v990 + v4 + 461 * v3);
  v924 = (char *)v923 + *(int *)(v1 + 48);
  *v923 = 699;
  *(_QWORD *)v924 = "VIEW";
  *((_QWORD *)v924 + 1) = 4;
  v924[16] = 2;
  v9();
  v925 = (_QWORD *)(v990 + v4 + 462 * v3);
  v926 = (char *)v925 + *(int *)(v1 + 48);
  *v925 = 700;
  *(_QWORD *)v926 = "VIEWS";
  *((_QWORD *)v926 + 1) = 5;
  v926[16] = 2;
  v9();
  v927 = (_QWORD *)(v990 + v4 + 463 * v3);
  v928 = (char *)v927 + *(int *)(v1 + 48);
  *v927 = 701;
  *(_QWORD *)v928 = "VOLATILE";
  *((_QWORD *)v928 + 1) = 8;
  v928[16] = 2;
  v9();
  v929 = (_QWORD *)(v990 + v4 + 464 * v3);
  v930 = (char *)v929 + *(int *)(v1 + 48);
  *v929 = 702;
  *(_QWORD *)v930 = "WHEN";
  *((_QWORD *)v930 + 1) = 4;
  v930[16] = 2;
  v9();
  v931 = (_QWORD *)(v990 + v4 + 465 * v3);
  v932 = (char *)v931 + *(int *)(v1 + 48);
  *v931 = 703;
  *(_QWORD *)v932 = "WHERE";
  *((_QWORD *)v932 + 1) = 5;
  v932[16] = 2;
  v9();
  v933 = (_QWORD *)(v990 + v4 + 466 * v3);
  v934 = (char *)v933 + *(int *)(v1 + 48);
  *v933 = 704;
  *(_QWORD *)v934 = "WHITESPACE_P";
  *((_QWORD *)v934 + 1) = 12;
  v934[16] = 2;
  v9();
  v935 = (_QWORD *)(v990 + v4 + 467 * v3);
  v936 = (char *)v935 + *(int *)(v1 + 48);
  *v935 = 705;
  *(_QWORD *)v936 = "WINDOW";
  *((_QWORD *)v936 + 1) = 6;
  v936[16] = 2;
  v9();
  v937 = (_QWORD *)(v990 + v4 + 468 * v3);
  v938 = (char *)v937 + *(int *)(v1 + 48);
  *v937 = 706;
  *(_QWORD *)v938 = "WITH";
  *((_QWORD *)v938 + 1) = 4;
  v938[16] = 2;
  v9();
  v939 = (_QWORD *)(v990 + v4 + 469 * v3);
  v940 = (char *)v939 + *(int *)(v1 + 48);
  *v939 = 707;
  *(_QWORD *)v940 = "WITHIN";
  *((_QWORD *)v940 + 1) = 6;
  v940[16] = 2;
  v9();
  v941 = (_QWORD *)(v990 + v4 + 470 * v3);
  v942 = (char *)v941 + *(int *)(v1 + 48);
  *v941 = 708;
  *(_QWORD *)v942 = "WITHOUT";
  *((_QWORD *)v942 + 1) = 7;
  v942[16] = 2;
  v9();
  v943 = (_QWORD *)(v990 + v4 + 471 * v3);
  v944 = (char *)v943 + *(int *)(v1 + 48);
  *v943 = 709;
  *(_QWORD *)v944 = "WORK";
  *((_QWORD *)v944 + 1) = 4;
  v944[16] = 2;
  v9();
  v945 = (_QWORD *)(v990 + v4 + 472 * v3);
  v946 = (char *)v945 + *(int *)(v1 + 48);
  *v945 = 710;
  *(_QWORD *)v946 = "WRAPPER";
  *((_QWORD *)v946 + 1) = 7;
  v946[16] = 2;
  v9();
  v947 = (_QWORD *)(v990 + v4 + 473 * v3);
  v948 = (char *)v947 + *(int *)(v1 + 48);
  *v947 = 711;
  *(_QWORD *)v948 = "WRITE";
  *((_QWORD *)v948 + 1) = 5;
  v948[16] = 2;
  v9();
  v949 = (_QWORD *)(v990 + v4 + 474 * v3);
  v950 = (char *)v949 + *(int *)(v1 + 48);
  *v949 = 712;
  *(_QWORD *)v950 = "XML_P";
  *((_QWORD *)v950 + 1) = 5;
  v950[16] = 2;
  v9();
  v951 = (_QWORD *)(v990 + v4 + 475 * v3);
  v952 = (char *)v951 + *(int *)(v1 + 48);
  *v951 = 713;
  *(_QWORD *)v952 = "XMLATTRIBUTES";
  *((_QWORD *)v952 + 1) = 13;
  v952[16] = 2;
  v9();
  v953 = (_QWORD *)(v990 + v4 + 476 * v3);
  v954 = (char *)v953 + *(int *)(v1 + 48);
  *v953 = 714;
  *(_QWORD *)v954 = "XMLCONCAT";
  *((_QWORD *)v954 + 1) = 9;
  v954[16] = 2;
  v9();
  v955 = (_QWORD *)(v990 + v4 + 477 * v3);
  v956 = (char *)v955 + *(int *)(v1 + 48);
  *v955 = 715;
  *(_QWORD *)v956 = "XMLELEMENT";
  *((_QWORD *)v956 + 1) = 10;
  v956[16] = 2;
  v9();
  v957 = (_QWORD *)(v990 + v4 + 478 * v3);
  v958 = (char *)v957 + *(int *)(v1 + 48);
  *v957 = 716;
  *(_QWORD *)v958 = "XMLEXISTS";
  *((_QWORD *)v958 + 1) = 9;
  v958[16] = 2;
  v9();
  v959 = (_QWORD *)(v990 + v4 + 479 * v3);
  v960 = (char *)v959 + *(int *)(v1 + 48);
  *v959 = 717;
  *(_QWORD *)v960 = "XMLFOREST";
  *((_QWORD *)v960 + 1) = 9;
  v960[16] = 2;
  v9();
  v961 = (_QWORD *)(v990 + v4 + 480 * v3);
  v962 = (char *)v961 + *(int *)(v1 + 48);
  *v961 = 718;
  *(_QWORD *)v962 = "XMLNAMESPACES";
  *((_QWORD *)v962 + 1) = 13;
  v962[16] = 2;
  v9();
  v963 = (_QWORD *)(v990 + v4 + 481 * v3);
  v964 = (char *)v963 + *(int *)(v1 + 48);
  *v963 = 719;
  *(_QWORD *)v964 = "XMLPARSE";
  *((_QWORD *)v964 + 1) = 8;
  v964[16] = 2;
  v9();
  v965 = (_QWORD *)(v990 + v4 + 482 * v3);
  v966 = (char *)v965 + *(int *)(v1 + 48);
  *v965 = 720;
  *(_QWORD *)v966 = "XMLPI";
  *((_QWORD *)v966 + 1) = 5;
  v966[16] = 2;
  v9();
  v967 = (_QWORD *)(v990 + v4 + 483 * v3);
  v968 = (char *)v967 + *(int *)(v1 + 48);
  *v967 = 721;
  *(_QWORD *)v968 = "XMLROOT";
  *((_QWORD *)v968 + 1) = 7;
  v968[16] = 2;
  v9();
  v969 = (_QWORD *)(v990 + v4 + 484 * v3);
  v970 = (char *)v969 + *(int *)(v1 + 48);
  *v969 = 722;
  *(_QWORD *)v970 = "XMLSERIALIZE";
  *((_QWORD *)v970 + 1) = 12;
  v970[16] = 2;
  v9();
  v971 = (_QWORD *)(v990 + v4 + 485 * v3);
  v972 = (char *)v971 + *(int *)(v1 + 48);
  *v971 = 723;
  *(_QWORD *)v972 = "XMLTABLE";
  *((_QWORD *)v972 + 1) = 8;
  v972[16] = 2;
  v9();
  v973 = (_QWORD *)(v990 + v4 + 486 * v3);
  v974 = (char *)v973 + *(int *)(v1 + 48);
  *v973 = 724;
  *(_QWORD *)v974 = "YEAR_P";
  *((_QWORD *)v974 + 1) = 6;
  v974[16] = 2;
  v9();
  v975 = (_QWORD *)(v990 + v4 + 487 * v3);
  v976 = (char *)v975 + *(int *)(v1 + 48);
  *v975 = 725;
  *(_QWORD *)v976 = "YES_P";
  *((_QWORD *)v976 + 1) = 5;
  v976[16] = 2;
  v9();
  v977 = (_QWORD *)(v990 + v4 + 488 * v3);
  v978 = (char *)v977 + *(int *)(v1 + 48);
  *v977 = 726;
  *(_QWORD *)v978 = "ZONE";
  *((_QWORD *)v978 + 1) = 4;
  v978[16] = 2;
  v9();
  v979 = (_QWORD *)(v990 + v4 + 489 * v3);
  v980 = (char *)v979 + *(int *)(v1 + 48);
  *v979 = 727;
  *(_QWORD *)v980 = "NOT_LA";
  *((_QWORD *)v980 + 1) = 6;
  v980[16] = 2;
  v9();
  v981 = (_QWORD *)(v990 + v4 + 490 * v3);
  v982 = (char *)v981 + *(int *)(v1 + 48);
  *v981 = 728;
  *(_QWORD *)v982 = "NULLS_LA";
  *((_QWORD *)v982 + 1) = 8;
  v982[16] = 2;
  v9();
  v983 = (_QWORD *)(v990 + v4 + 491 * v3);
  v984 = (char *)v983 + *(int *)(v1 + 48);
  *v983 = 729;
  *(_QWORD *)v984 = "WITH_LA";
  *((_QWORD *)v984 + 1) = 7;
  v984[16] = 2;
  v9();
  v985 = (_QWORD *)(v990 + v4 + 492 * v3);
  v986 = (char *)v985 + *(int *)(v1 + 48);
  *v985 = 730;
  *(_QWORD *)v986 = "POSTFIXOP";
  *((_QWORD *)v986 + 1) = 9;
  v986[16] = 2;
  v9();
  v987 = (_QWORD *)(v990 + v4 + 493 * v3);
  v988 = (char *)v987 + *(int *)(v1 + 48);
  *v987 = 731;
  *(_QWORD *)v988 = "UMINUS";
  *((_QWORD *)v988 + 1) = 6;
  v988[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ParseResult._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ParseResult._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "stmts";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ScanResult._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ScanResult._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "tokens";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  _QWORD *v90;
  char *v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  char *v98;
  uint64_t v99;
  _QWORD *v100;
  char *v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  _QWORD *v109;
  char *v110;
  uint64_t v111;
  _QWORD *v112;
  char *v113;
  uint64_t v114;
  _QWORD *v115;
  char *v116;
  uint64_t v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  _QWORD *v121;
  char *v122;
  uint64_t v123;
  _QWORD *v124;
  char *v125;
  uint64_t v126;
  _QWORD *v127;
  char *v128;
  uint64_t v129;
  _QWORD *v130;
  char *v131;
  uint64_t v132;
  _QWORD *v133;
  char *v134;
  uint64_t v135;
  _QWORD *v136;
  char *v137;
  uint64_t v138;
  _QWORD *v139;
  char *v140;
  uint64_t v141;
  _QWORD *v142;
  char *v143;
  uint64_t v144;
  _QWORD *v145;
  char *v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  _QWORD *v151;
  char *v152;
  uint64_t v153;
  _QWORD *v154;
  char *v155;
  uint64_t v156;
  _QWORD *v157;
  char *v158;
  uint64_t v159;
  _QWORD *v160;
  char *v161;
  uint64_t v162;
  _QWORD *v163;
  char *v164;
  uint64_t v165;
  _QWORD *v166;
  char *v167;
  uint64_t v168;
  _QWORD *v169;
  char *v170;
  uint64_t v171;
  _QWORD *v172;
  char *v173;
  uint64_t v174;
  _QWORD *v175;
  char *v176;
  uint64_t v177;
  _QWORD *v178;
  char *v179;
  uint64_t v180;
  _QWORD *v181;
  char *v182;
  uint64_t v183;
  _QWORD *v184;
  char *v185;
  uint64_t v186;
  _QWORD *v187;
  char *v188;
  unint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  char *v192;
  uint64_t v193;
  _QWORD *v194;
  char *v195;
  uint64_t v196;
  _QWORD *v197;
  char *v198;
  uint64_t v199;
  _QWORD *v200;
  char *v201;
  uint64_t v202;
  _QWORD *v203;
  char *v204;
  uint64_t v205;
  _QWORD *v206;
  char *v207;
  uint64_t v208;
  _QWORD *v209;
  char *v210;
  uint64_t v211;
  _QWORD *v212;
  char *v213;
  uint64_t v214;
  _QWORD *v215;
  char *v216;
  uint64_t v217;
  _QWORD *v218;
  char *v219;
  uint64_t v220;
  _QWORD *v221;
  char *v222;
  uint64_t v223;
  _QWORD *v224;
  char *v225;
  uint64_t v226;
  _QWORD *v227;
  char *v228;
  uint64_t v229;
  _QWORD *v230;
  char *v231;
  uint64_t v232;
  _QWORD *v233;
  char *v234;
  uint64_t v235;
  _QWORD *v236;
  char *v237;
  uint64_t v238;
  _QWORD *v239;
  char *v240;
  uint64_t v241;
  _QWORD *v242;
  char *v243;
  uint64_t v244;
  _QWORD *v245;
  char *v246;
  uint64_t v247;
  _QWORD *v248;
  char *v249;
  uint64_t v250;
  _QWORD *v251;
  char *v252;
  uint64_t v253;
  _QWORD *v254;
  char *v255;
  uint64_t v256;
  _QWORD *v257;
  char *v258;
  uint64_t v259;
  _QWORD *v260;
  char *v261;
  uint64_t v262;
  _QWORD *v263;
  char *v264;
  uint64_t v265;
  _QWORD *v266;
  char *v267;
  uint64_t v268;
  _QWORD *v269;
  char *v270;
  uint64_t v271;
  _QWORD *v272;
  char *v273;
  uint64_t v274;
  _QWORD *v275;
  char *v276;
  uint64_t v277;
  _QWORD *v278;
  char *v279;
  uint64_t v280;
  _QWORD *v281;
  char *v282;
  uint64_t v283;
  _QWORD *v284;
  char *v285;
  uint64_t v286;
  _QWORD *v287;
  char *v288;
  uint64_t v289;
  _QWORD *v290;
  char *v291;
  uint64_t v292;
  _QWORD *v293;
  char *v294;
  uint64_t v295;
  _QWORD *v296;
  char *v297;
  uint64_t v298;
  _QWORD *v299;
  char *v300;
  uint64_t v301;
  _QWORD *v302;
  char *v303;
  uint64_t v304;
  _QWORD *v305;
  char *v306;
  uint64_t v307;
  _QWORD *v308;
  char *v309;
  uint64_t v310;
  _QWORD *v311;
  char *v312;
  uint64_t v313;
  _QWORD *v314;
  char *v315;
  uint64_t v316;
  _QWORD *v317;
  char *v318;
  uint64_t v319;
  _QWORD *v320;
  char *v321;
  uint64_t v322;
  _QWORD *v323;
  char *v324;
  uint64_t v325;
  _QWORD *v326;
  char *v327;
  uint64_t v328;
  _QWORD *v329;
  char *v330;
  uint64_t v331;
  _QWORD *v332;
  char *v333;
  uint64_t v334;
  _QWORD *v335;
  char *v336;
  uint64_t v337;
  _QWORD *v338;
  char *v339;
  uint64_t v340;
  _QWORD *v341;
  char *v342;
  uint64_t v343;
  _QWORD *v344;
  char *v345;
  uint64_t v346;
  _QWORD *v347;
  char *v348;
  uint64_t v349;
  _QWORD *v350;
  char *v351;
  uint64_t v352;
  _QWORD *v353;
  char *v354;
  uint64_t v355;
  _QWORD *v356;
  char *v357;
  uint64_t v358;
  _QWORD *v359;
  char *v360;
  uint64_t v361;
  _QWORD *v362;
  char *v363;
  uint64_t v364;
  _QWORD *v365;
  char *v366;
  uint64_t v367;
  _QWORD *v368;
  char *v369;
  uint64_t v370;
  _QWORD *v371;
  char *v372;
  uint64_t v373;
  _QWORD *v374;
  char *v375;
  uint64_t v376;
  _QWORD *v377;
  char *v378;
  unint64_t v379;
  uint64_t v380;
  _QWORD *v381;
  char *v382;
  uint64_t v383;
  _QWORD *v384;
  char *v385;
  uint64_t v386;
  _QWORD *v387;
  char *v388;
  uint64_t v389;
  _QWORD *v390;
  char *v391;
  uint64_t v392;
  _QWORD *v393;
  char *v394;
  uint64_t v395;
  _QWORD *v396;
  char *v397;
  uint64_t v398;
  _QWORD *v399;
  char *v400;
  uint64_t v401;
  _QWORD *v402;
  char *v403;
  uint64_t v404;
  _QWORD *v405;
  char *v406;
  uint64_t v407;
  _QWORD *v408;
  char *v409;
  uint64_t v410;
  _QWORD *v411;
  char *v412;
  uint64_t v413;
  _QWORD *v414;
  char *v415;
  uint64_t v416;
  _QWORD *v417;
  char *v418;
  uint64_t v419;
  _QWORD *v420;
  char *v421;
  uint64_t v422;
  _QWORD *v423;
  char *v424;
  uint64_t v425;
  _QWORD *v426;
  char *v427;
  uint64_t v428;
  _QWORD *v429;
  char *v430;
  uint64_t v431;
  _QWORD *v432;
  char *v433;
  uint64_t v434;
  _QWORD *v435;
  char *v436;
  uint64_t v437;
  _QWORD *v438;
  char *v439;
  uint64_t v440;
  _QWORD *v441;
  char *v442;
  uint64_t v443;
  _QWORD *v444;
  char *v445;
  uint64_t v446;
  _QWORD *v447;
  char *v448;
  uint64_t v449;
  _QWORD *v450;
  char *v451;
  uint64_t v452;
  _QWORD *v453;
  char *v454;
  uint64_t v455;
  _QWORD *v456;
  char *v457;
  uint64_t v458;
  _QWORD *v459;
  char *v460;
  uint64_t v461;
  _QWORD *v462;
  char *v463;
  uint64_t v464;
  _QWORD *v465;
  char *v466;
  uint64_t v467;
  _QWORD *v468;
  char *v469;
  uint64_t v470;
  _QWORD *v471;
  char *v472;
  uint64_t v473;
  _QWORD *v474;
  char *v475;
  uint64_t v476;
  _QWORD *v477;
  char *v478;
  uint64_t v479;
  _QWORD *v480;
  char *v481;
  uint64_t v482;
  _QWORD *v483;
  char *v484;
  uint64_t v485;
  _QWORD *v486;
  char *v487;
  uint64_t v488;
  _QWORD *v489;
  char *v490;
  uint64_t v491;
  _QWORD *v492;
  char *v493;
  uint64_t v494;
  _QWORD *v495;
  char *v496;
  uint64_t v497;
  _QWORD *v498;
  char *v499;
  uint64_t v500;
  _QWORD *v501;
  char *v502;
  uint64_t v503;
  _QWORD *v504;
  char *v505;
  uint64_t v506;
  _QWORD *v507;
  char *v508;
  uint64_t v509;
  _QWORD *v510;
  char *v511;
  uint64_t v512;
  _QWORD *v513;
  char *v514;
  uint64_t v515;
  _QWORD *v516;
  char *v517;
  uint64_t v518;
  _QWORD *v519;
  char *v520;
  uint64_t v521;
  _QWORD *v522;
  char *v523;
  uint64_t v524;
  _QWORD *v525;
  char *v526;
  uint64_t v527;
  _QWORD *v528;
  char *v529;
  uint64_t v530;
  _QWORD *v531;
  char *v532;
  uint64_t v533;
  _QWORD *v534;
  char *v535;
  uint64_t v536;
  _QWORD *v537;
  char *v538;
  uint64_t v539;
  _QWORD *v540;
  char *v541;
  uint64_t v542;
  _QWORD *v543;
  char *v544;
  uint64_t v545;
  _QWORD *v546;
  char *v547;
  uint64_t v548;
  _QWORD *v549;
  char *v550;
  uint64_t v551;
  _QWORD *v552;
  char *v553;
  uint64_t v554;
  _QWORD *v555;
  char *v556;
  uint64_t v557;
  _QWORD *v558;
  char *v559;
  uint64_t v560;
  _QWORD *v561;
  char *v562;
  uint64_t v563;
  _QWORD *v564;
  char *v565;
  uint64_t v566;
  _QWORD *v567;
  char *v568;
  uint64_t v569;
  _QWORD *v570;
  char *v571;
  uint64_t v572;
  _QWORD *v573;
  char *v574;
  uint64_t v575;
  _QWORD *v576;
  char *v577;
  uint64_t v578;
  _QWORD *v579;
  char *v580;
  uint64_t v581;
  _QWORD *v582;
  char *v583;
  uint64_t v584;
  _QWORD *v585;
  char *v586;
  uint64_t v587;
  _QWORD *v588;
  char *v589;
  uint64_t v590;
  _QWORD *v591;
  char *v592;
  uint64_t v593;
  _QWORD *v594;
  char *v595;
  uint64_t v596;
  _QWORD *v597;
  char *v598;
  uint64_t v599;
  _QWORD *v600;
  char *v601;
  uint64_t v602;
  _QWORD *v603;
  char *v604;
  uint64_t v605;
  _QWORD *v606;
  char *v607;
  uint64_t v608;
  _QWORD *v609;
  char *v610;
  uint64_t v611;
  _QWORD *v612;
  char *v613;
  uint64_t v614;
  _QWORD *v615;
  char *v616;
  uint64_t v617;
  _QWORD *v618;
  char *v619;
  uint64_t v620;
  _QWORD *v621;
  char *v622;
  uint64_t v623;
  _QWORD *v624;
  char *v625;
  uint64_t v626;
  _QWORD *v627;
  char *v628;
  uint64_t v629;
  _QWORD *v630;
  char *v631;
  uint64_t v632;
  _QWORD *v633;
  char *v634;
  uint64_t v635;
  _QWORD *v636;
  char *v637;
  uint64_t v638;
  _QWORD *v639;
  char *v640;
  uint64_t v641;
  _QWORD *v642;
  char *v643;
  uint64_t v644;
  _QWORD *v645;
  char *v646;
  uint64_t v647;
  _QWORD *v648;
  char *v649;
  uint64_t v650;
  _QWORD *v651;
  char *v652;
  uint64_t v653;
  _QWORD *v654;
  char *v655;
  uint64_t v656;
  _QWORD *v657;
  char *v658;
  uint64_t v659;
  _QWORD *v660;
  char *v661;
  uint64_t v662;
  _QWORD *v663;
  char *v664;
  uint64_t v665;
  _QWORD *v666;
  char *v667;
  uint64_t v668;
  _QWORD *v669;
  char *v670;
  uint64_t v671;
  _QWORD *v672;
  char *v673;
  uint64_t v674;
  _QWORD *v675;
  char *v676;
  uint64_t v678;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_Node._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_Node._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v678 = swift_allocObject();
  *(_OWORD *)(v678 + 16) = xmmword_18DC0D9A0;
  v5 = v678 + v4;
  v6 = v678 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v678 + v4) = 1;
  *(_QWORD *)v6 = "alias";
  *(_QWORD *)(v6 + 8) = 5;
  *(_BYTE *)(v6 + 16) = 2;
  *(_QWORD *)(v6 + 24) = "Alias";
  *(_QWORD *)(v6 + 32) = 5;
  *(_BYTE *)(v6 + 40) = 2;
  v7 = *MEMORY[0x1E0D3EF10];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v678 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "range_var";
  *(_QWORD *)(v10 + 8) = 9;
  *(_BYTE *)(v10 + 16) = 2;
  *(_QWORD *)(v10 + 24) = "RangeVar";
  *(_QWORD *)(v10 + 32) = 8;
  *(_BYTE *)(v10 + 40) = 2;
  v9();
  v11 = *(int *)(v1 + 48);
  v12 = (_QWORD *)(v678 + v4 + 2 * v3);
  *v12 = 3;
  v13 = (char *)v12 + v11;
  *(_QWORD *)v13 = "table_func";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  *((_QWORD *)v13 + 3) = "TableFunc";
  *((_QWORD *)v13 + 4) = 9;
  v13[40] = 2;
  v9();
  v14 = *(int *)(v1 + 48);
  v15 = (_QWORD *)(v678 + v4 + 3 * v3);
  *v15 = 4;
  v16 = (char *)v15 + v14;
  *(_QWORD *)v16 = "expr";
  *((_QWORD *)v16 + 1) = 4;
  v16[16] = 2;
  *((_QWORD *)v16 + 3) = "Expr";
  *((_QWORD *)v16 + 4) = 4;
  v16[40] = 2;
  v9();
  v17 = (_QWORD *)(v678 + v4 + 4 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "var";
  *((_QWORD *)v18 + 1) = 3;
  v18[16] = 2;
  *((_QWORD *)v18 + 3) = "Var";
  *((_QWORD *)v18 + 4) = 3;
  v18[40] = 2;
  v9();
  v19 = *(int *)(v1 + 48);
  v20 = (_QWORD *)(v678 + v4 + 5 * v3);
  *v20 = 6;
  v21 = (char *)v20 + v19;
  *(_QWORD *)v21 = "param";
  *((_QWORD *)v21 + 1) = 5;
  v21[16] = 2;
  *((_QWORD *)v21 + 3) = "Param";
  *((_QWORD *)v21 + 4) = 5;
  v21[40] = 2;
  v9();
  v22 = *(int *)(v1 + 48);
  v23 = (_QWORD *)(v678 + v4 + 6 * v3);
  *v23 = 7;
  v24 = (char *)v23 + v22;
  *(_QWORD *)v24 = "aggref";
  *((_QWORD *)v24 + 1) = 6;
  v24[16] = 2;
  *((_QWORD *)v24 + 3) = "Aggref";
  *((_QWORD *)v24 + 4) = 6;
  v24[40] = 2;
  v9();
  v25 = *(int *)(v1 + 48);
  v26 = (_QWORD *)(v678 + v4 + 7 * v3);
  *v26 = 8;
  v27 = (char *)v26 + v25;
  *(_QWORD *)v27 = "grouping_func";
  *((_QWORD *)v27 + 1) = 13;
  v27[16] = 2;
  *((_QWORD *)v27 + 3) = "GroupingFunc";
  *((_QWORD *)v27 + 4) = 12;
  v27[40] = 2;
  v9();
  v28 = v678 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v28 = "window_func";
  *(_QWORD *)(v28 + 8) = 11;
  *(_BYTE *)(v28 + 16) = 2;
  *(_QWORD *)(v28 + 24) = "WindowFunc";
  *(_QWORD *)(v28 + 32) = 10;
  *(_BYTE *)(v28 + 40) = 2;
  v9();
  v29 = (_QWORD *)(v678 + v4 + 9 * v3);
  v30 = (char *)v29 + *(int *)(v1 + 48);
  *v29 = 10;
  *(_QWORD *)v30 = "subscripting_ref";
  *((_QWORD *)v30 + 1) = 16;
  v30[16] = 2;
  *((_QWORD *)v30 + 3) = "SubscriptingRef";
  *((_QWORD *)v30 + 4) = 15;
  v30[40] = 2;
  v9();
  v31 = *(int *)(v1 + 48);
  v32 = (_QWORD *)(v678 + v4 + 10 * v3);
  *v32 = 11;
  v33 = (char *)v32 + v31;
  *(_QWORD *)v33 = "func_expr";
  *((_QWORD *)v33 + 1) = 9;
  v33[16] = 2;
  *((_QWORD *)v33 + 3) = "FuncExpr";
  *((_QWORD *)v33 + 4) = 8;
  v33[40] = 2;
  v9();
  v34 = *(int *)(v1 + 48);
  v35 = (_QWORD *)(v678 + v4 + 11 * v3);
  *v35 = 12;
  v36 = (char *)v35 + v34;
  *(_QWORD *)v36 = "named_arg_expr";
  *((_QWORD *)v36 + 1) = 14;
  v36[16] = 2;
  *((_QWORD *)v36 + 3) = "NamedArgExpr";
  *((_QWORD *)v36 + 4) = 12;
  v36[40] = 2;
  v9();
  v37 = *(int *)(v1 + 48);
  v38 = (_QWORD *)(v678 + v4 + 12 * v3);
  *v38 = 13;
  v39 = (char *)v38 + v37;
  *(_QWORD *)v39 = "op_expr";
  *((_QWORD *)v39 + 1) = 7;
  v39[16] = 2;
  *((_QWORD *)v39 + 3) = "OpExpr";
  *((_QWORD *)v39 + 4) = 6;
  v39[40] = 2;
  v9();
  v40 = *(int *)(v1 + 48);
  v41 = (_QWORD *)(v678 + v4 + 13 * v3);
  *v41 = 14;
  v42 = (char *)v41 + v40;
  *(_QWORD *)v42 = "distinct_expr";
  *((_QWORD *)v42 + 1) = 13;
  v42[16] = 2;
  *((_QWORD *)v42 + 3) = "DistinctExpr";
  *((_QWORD *)v42 + 4) = 12;
  v42[40] = 2;
  v9();
  v43 = *(int *)(v1 + 48);
  v44 = (_QWORD *)(v678 + v4 + 14 * v3);
  *v44 = 15;
  v45 = (char *)v44 + v43;
  *(_QWORD *)v45 = "null_if_expr";
  *((_QWORD *)v45 + 1) = 12;
  v45[16] = 2;
  *((_QWORD *)v45 + 3) = "NullIfExpr";
  *((_QWORD *)v45 + 4) = 10;
  v45[40] = 2;
  v9();
  v46 = *(int *)(v1 + 48);
  v47 = (_QWORD *)(v678 + v4 + 15 * v3);
  *v47 = 16;
  v48 = (char *)v47 + v46;
  *(_QWORD *)v48 = "scalar_array_op_expr";
  *((_QWORD *)v48 + 1) = 20;
  v48[16] = 2;
  *((_QWORD *)v48 + 3) = "ScalarArrayOpExpr";
  *((_QWORD *)v48 + 4) = 17;
  v48[40] = 2;
  v9();
  v49 = v678 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v49 = "BOOL_expr";
  *(_QWORD *)(v49 + 8) = 9;
  *(_BYTE *)(v49 + 16) = 2;
  *(_QWORD *)(v49 + 24) = "BoolExpr";
  *(_QWORD *)(v49 + 32) = 8;
  *(_BYTE *)(v49 + 40) = 2;
  v9();
  v50 = *(int *)(v1 + 48);
  v51 = (_QWORD *)(v678 + v4 + 17 * v3);
  *v51 = 18;
  v52 = (char *)v51 + v50;
  *(_QWORD *)v52 = "sub_link";
  *((_QWORD *)v52 + 1) = 8;
  v52[16] = 2;
  *((_QWORD *)v52 + 3) = "SubLink";
  *((_QWORD *)v52 + 4) = 7;
  v52[40] = 2;
  v9();
  v53 = *(int *)(v1 + 48);
  v54 = (_QWORD *)(v678 + v4 + 18 * v3);
  *v54 = 19;
  v55 = (char *)v54 + v53;
  *(_QWORD *)v55 = "sub_plan";
  *((_QWORD *)v55 + 1) = 8;
  v55[16] = 2;
  *((_QWORD *)v55 + 3) = "SubPlan";
  *((_QWORD *)v55 + 4) = 7;
  v55[40] = 2;
  v9();
  v56 = *(int *)(v1 + 48);
  v57 = (_QWORD *)(v678 + v4 + 19 * v3);
  *v57 = 20;
  v58 = (char *)v57 + v56;
  *(_QWORD *)v58 = "alternative_sub_plan";
  *((_QWORD *)v58 + 1) = 20;
  v58[16] = 2;
  *((_QWORD *)v58 + 3) = "AlternativeSubPlan";
  *((_QWORD *)v58 + 4) = 18;
  v58[40] = 2;
  v9();
  v59 = *(int *)(v1 + 48);
  v60 = (_QWORD *)(v678 + v4 + 20 * v3);
  *v60 = 21;
  v61 = (char *)v60 + v59;
  *(_QWORD *)v61 = "field_select";
  *((_QWORD *)v61 + 1) = 12;
  v61[16] = 2;
  *((_QWORD *)v61 + 3) = "FieldSelect";
  *((_QWORD *)v61 + 4) = 11;
  v61[40] = 2;
  v9();
  v62 = *(int *)(v1 + 48);
  v63 = (_QWORD *)(v678 + v4 + 21 * v3);
  *v63 = 22;
  v64 = (char *)v63 + v62;
  *(_QWORD *)v64 = "field_store";
  *((_QWORD *)v64 + 1) = 11;
  v64[16] = 2;
  *((_QWORD *)v64 + 3) = "FieldStore";
  *((_QWORD *)v64 + 4) = 10;
  v64[40] = 2;
  v9();
  v65 = *(int *)(v1 + 48);
  v66 = (_QWORD *)(v678 + v4 + 22 * v3);
  *v66 = 23;
  v67 = (char *)v66 + v65;
  *(_QWORD *)v67 = "relabel_type";
  *((_QWORD *)v67 + 1) = 12;
  v67[16] = 2;
  *((_QWORD *)v67 + 3) = "RelabelType";
  *((_QWORD *)v67 + 4) = 11;
  v67[40] = 2;
  v9();
  v68 = *(int *)(v1 + 48);
  v69 = (_QWORD *)(v678 + v4 + 23 * v3);
  *v69 = 24;
  v70 = (char *)v69 + v68;
  *(_QWORD *)v70 = "coerce_via_io";
  *((_QWORD *)v70 + 1) = 13;
  v70[16] = 2;
  *((_QWORD *)v70 + 3) = "CoerceViaIO";
  *((_QWORD *)v70 + 4) = 11;
  v70[40] = 2;
  v9();
  v71 = *(int *)(v1 + 48);
  v72 = (_QWORD *)(v678 + v4 + 24 * v3);
  *v72 = 25;
  v73 = (char *)v72 + v71;
  *(_QWORD *)v73 = "array_coerce_expr";
  *((_QWORD *)v73 + 1) = 17;
  v73[16] = 2;
  *((_QWORD *)v73 + 3) = "ArrayCoerceExpr";
  *((_QWORD *)v73 + 4) = 15;
  v73[40] = 2;
  v9();
  v74 = *(int *)(v1 + 48);
  v75 = (_QWORD *)(v678 + v4 + 25 * v3);
  *v75 = 26;
  v76 = (char *)v75 + v74;
  *(_QWORD *)v76 = "convert_rowtype_expr";
  *((_QWORD *)v76 + 1) = 20;
  v76[16] = 2;
  *((_QWORD *)v76 + 3) = "ConvertRowtypeExpr";
  *((_QWORD *)v76 + 4) = 18;
  v76[40] = 2;
  v9();
  v77 = *(int *)(v1 + 48);
  v78 = (_QWORD *)(v678 + v4 + 26 * v3);
  *v78 = 27;
  v79 = (char *)v78 + v77;
  *(_QWORD *)v79 = "collate_expr";
  *((_QWORD *)v79 + 1) = 12;
  v79[16] = 2;
  *((_QWORD *)v79 + 3) = "CollateExpr";
  *((_QWORD *)v79 + 4) = 11;
  v79[40] = 2;
  v9();
  v80 = *(int *)(v1 + 48);
  v81 = (_QWORD *)(v678 + v4 + 27 * v3);
  *v81 = 28;
  v82 = (char *)v81 + v80;
  *(_QWORD *)v82 = "case_expr";
  *((_QWORD *)v82 + 1) = 9;
  v82[16] = 2;
  *((_QWORD *)v82 + 3) = "CaseExpr";
  *((_QWORD *)v82 + 4) = 8;
  v82[40] = 2;
  v9();
  v83 = *(int *)(v1 + 48);
  v84 = (_QWORD *)(v678 + v4 + 28 * v3);
  *v84 = 29;
  v85 = (char *)v84 + v83;
  *(_QWORD *)v85 = "case_when";
  *((_QWORD *)v85 + 1) = 9;
  v85[16] = 2;
  *((_QWORD *)v85 + 3) = "CaseWhen";
  *((_QWORD *)v85 + 4) = 8;
  v85[40] = 2;
  v9();
  v86 = *(int *)(v1 + 48);
  v87 = (_QWORD *)(v678 + v4 + 29 * v3);
  *v87 = 30;
  v88 = (char *)v87 + v86;
  *(_QWORD *)v88 = "case_test_expr";
  *((_QWORD *)v88 + 1) = 14;
  v88[16] = 2;
  *((_QWORD *)v88 + 3) = "CaseTestExpr";
  *((_QWORD *)v88 + 4) = 12;
  v88[40] = 2;
  v9();
  v89 = *(int *)(v1 + 48);
  v90 = (_QWORD *)(v678 + v4 + 30 * v3);
  *v90 = 31;
  v91 = (char *)v90 + v89;
  *(_QWORD *)v91 = "array_expr";
  *((_QWORD *)v91 + 1) = 10;
  v91[16] = 2;
  *((_QWORD *)v91 + 3) = "ArrayExpr";
  *((_QWORD *)v91 + 4) = 9;
  v91[40] = 2;
  v9();
  v92 = *(int *)(v1 + 48);
  v93 = (_QWORD *)(v678 + v4 + 31 * v3);
  *v93 = 32;
  v94 = (char *)v93 + v92;
  *(_QWORD *)v94 = "row_expr";
  *((_QWORD *)v94 + 1) = 8;
  v94[16] = 2;
  *((_QWORD *)v94 + 3) = "RowExpr";
  *((_QWORD *)v94 + 4) = 7;
  v94[40] = 2;
  v9();
  v95 = v678 + v4 + 32 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 32 * v3) = 33;
  *(_QWORD *)v95 = "row_compare_expr";
  *(_QWORD *)(v95 + 8) = 16;
  *(_BYTE *)(v95 + 16) = 2;
  *(_QWORD *)(v95 + 24) = "RowCompareExpr";
  *(_QWORD *)(v95 + 32) = 14;
  *(_BYTE *)(v95 + 40) = 2;
  v9();
  v96 = *(int *)(v1 + 48);
  v97 = (_QWORD *)(v678 + v4 + 33 * v3);
  *v97 = 34;
  v98 = (char *)v97 + v96;
  *(_QWORD *)v98 = "coalesce_expr";
  *((_QWORD *)v98 + 1) = 13;
  v98[16] = 2;
  *((_QWORD *)v98 + 3) = "CoalesceExpr";
  *((_QWORD *)v98 + 4) = 12;
  v98[40] = 2;
  v9();
  v99 = *(int *)(v1 + 48);
  v100 = (_QWORD *)(v678 + v4 + 34 * v3);
  *v100 = 35;
  v101 = (char *)v100 + v99;
  *(_QWORD *)v101 = "min_max_expr";
  *((_QWORD *)v101 + 1) = 12;
  v101[16] = 2;
  *((_QWORD *)v101 + 3) = "MinMaxExpr";
  *((_QWORD *)v101 + 4) = 10;
  v101[40] = 2;
  v9();
  v102 = *(int *)(v1 + 48);
  v103 = (_QWORD *)(v678 + v4 + 35 * v3);
  *v103 = 36;
  v104 = (char *)v103 + v102;
  *(_QWORD *)v104 = "sqlvalue_function";
  *((_QWORD *)v104 + 1) = 17;
  v104[16] = 2;
  *((_QWORD *)v104 + 3) = "SQLValueFunction";
  *((_QWORD *)v104 + 4) = 16;
  v104[40] = 2;
  v9();
  v105 = *(int *)(v1 + 48);
  v106 = (_QWORD *)(v678 + v4 + 36 * v3);
  *v106 = 37;
  v107 = (char *)v106 + v105;
  *(_QWORD *)v107 = "xml_expr";
  *((_QWORD *)v107 + 1) = 8;
  v107[16] = 2;
  *((_QWORD *)v107 + 3) = "XmlExpr";
  *((_QWORD *)v107 + 4) = 7;
  v107[40] = 2;
  v9();
  v108 = *(int *)(v1 + 48);
  v109 = (_QWORD *)(v678 + v4 + 37 * v3);
  *v109 = 38;
  v110 = (char *)v109 + v108;
  *(_QWORD *)v110 = "null_test";
  *((_QWORD *)v110 + 1) = 9;
  v110[16] = 2;
  *((_QWORD *)v110 + 3) = "NullTest";
  *((_QWORD *)v110 + 4) = 8;
  v110[40] = 2;
  v9();
  v111 = *(int *)(v1 + 48);
  v112 = (_QWORD *)(v678 + v4 + 38 * v3);
  *v112 = 39;
  v113 = (char *)v112 + v111;
  *(_QWORD *)v113 = "BOOLean_test";
  *((_QWORD *)v113 + 1) = 12;
  v113[16] = 2;
  *((_QWORD *)v113 + 3) = "BooleanTest";
  *((_QWORD *)v113 + 4) = 11;
  v113[40] = 2;
  v9();
  v114 = *(int *)(v1 + 48);
  v115 = (_QWORD *)(v678 + v4 + 39 * v3);
  *v115 = 40;
  v116 = (char *)v115 + v114;
  *(_QWORD *)v116 = "coerce_to_domain";
  *((_QWORD *)v116 + 1) = 16;
  v116[16] = 2;
  *((_QWORD *)v116 + 3) = "CoerceToDomain";
  *((_QWORD *)v116 + 4) = 14;
  v116[40] = 2;
  v9();
  v117 = *(int *)(v1 + 48);
  v118 = (_QWORD *)(v678 + v4 + 40 * v3);
  *v118 = 41;
  v119 = (char *)v118 + v117;
  *(_QWORD *)v119 = "coerce_to_domain_value";
  *((_QWORD *)v119 + 1) = 22;
  v119[16] = 2;
  *((_QWORD *)v119 + 3) = "CoerceToDomainValue";
  *((_QWORD *)v119 + 4) = 19;
  v119[40] = 2;
  v9();
  v120 = *(int *)(v1 + 48);
  v121 = (_QWORD *)(v678 + v4 + 41 * v3);
  *v121 = 42;
  v122 = (char *)v121 + v120;
  *(_QWORD *)v122 = "set_to_default";
  *((_QWORD *)v122 + 1) = 14;
  v122[16] = 2;
  *((_QWORD *)v122 + 3) = "SetToDefault";
  *((_QWORD *)v122 + 4) = 12;
  v122[40] = 2;
  v9();
  v123 = *(int *)(v1 + 48);
  v124 = (_QWORD *)(v678 + v4 + 42 * v3);
  *v124 = 43;
  v125 = (char *)v124 + v123;
  *(_QWORD *)v125 = "current_of_expr";
  *((_QWORD *)v125 + 1) = 15;
  v125[16] = 2;
  *((_QWORD *)v125 + 3) = "CurrentOfExpr";
  *((_QWORD *)v125 + 4) = 13;
  v125[40] = 2;
  v9();
  v126 = *(int *)(v1 + 48);
  v127 = (_QWORD *)(v678 + v4 + 43 * v3);
  *v127 = 44;
  v128 = (char *)v127 + v126;
  *(_QWORD *)v128 = "next_value_expr";
  *((_QWORD *)v128 + 1) = 15;
  v128[16] = 2;
  *((_QWORD *)v128 + 3) = "NextValueExpr";
  *((_QWORD *)v128 + 4) = 13;
  v128[40] = 2;
  v9();
  v129 = *(int *)(v1 + 48);
  v130 = (_QWORD *)(v678 + v4 + 44 * v3);
  *v130 = 45;
  v131 = (char *)v130 + v129;
  *(_QWORD *)v131 = "inference_elem";
  *((_QWORD *)v131 + 1) = 14;
  v131[16] = 2;
  *((_QWORD *)v131 + 3) = "InferenceElem";
  *((_QWORD *)v131 + 4) = 13;
  v131[40] = 2;
  v9();
  v132 = *(int *)(v1 + 48);
  v133 = (_QWORD *)(v678 + v4 + 45 * v3);
  *v133 = 46;
  v134 = (char *)v133 + v132;
  *(_QWORD *)v134 = "target_entry";
  *((_QWORD *)v134 + 1) = 12;
  v134[16] = 2;
  *((_QWORD *)v134 + 3) = "TargetEntry";
  *((_QWORD *)v134 + 4) = 11;
  v134[40] = 2;
  v9();
  v135 = *(int *)(v1 + 48);
  v136 = (_QWORD *)(v678 + v4 + 46 * v3);
  *v136 = 47;
  v137 = (char *)v136 + v135;
  *(_QWORD *)v137 = "range_tbl_ref";
  *((_QWORD *)v137 + 1) = 13;
  v137[16] = 2;
  *((_QWORD *)v137 + 3) = "RangeTblRef";
  *((_QWORD *)v137 + 4) = 11;
  v137[40] = 2;
  v9();
  v138 = *(int *)(v1 + 48);
  v139 = (_QWORD *)(v678 + v4 + 47 * v3);
  *v139 = 48;
  v140 = (char *)v139 + v138;
  *(_QWORD *)v140 = "join_expr";
  *((_QWORD *)v140 + 1) = 9;
  v140[16] = 2;
  *((_QWORD *)v140 + 3) = "JoinExpr";
  *((_QWORD *)v140 + 4) = 8;
  v140[40] = 2;
  v9();
  v141 = *(int *)(v1 + 48);
  v142 = (_QWORD *)(v678 + v4 + 48 * v3);
  *v142 = 49;
  v143 = (char *)v142 + v141;
  *(_QWORD *)v143 = "from_expr";
  *((_QWORD *)v143 + 1) = 9;
  v143[16] = 2;
  *((_QWORD *)v143 + 3) = "FromExpr";
  *((_QWORD *)v143 + 4) = 8;
  v143[40] = 2;
  v9();
  v144 = *(int *)(v1 + 48);
  v145 = (_QWORD *)(v678 + v4 + 49 * v3);
  *v145 = 50;
  v146 = (char *)v145 + v144;
  *(_QWORD *)v146 = "on_conflict_expr";
  *((_QWORD *)v146 + 1) = 16;
  v146[16] = 2;
  *((_QWORD *)v146 + 3) = "OnConflictExpr";
  *((_QWORD *)v146 + 4) = 14;
  v146[40] = 2;
  v9();
  v147 = *(int *)(v1 + 48);
  v148 = (_QWORD *)(v678 + v4 + 50 * v3);
  *v148 = 51;
  v149 = (char *)v148 + v147;
  *(_QWORD *)v149 = "into_clause";
  *((_QWORD *)v149 + 1) = 11;
  v149[16] = 2;
  *((_QWORD *)v149 + 3) = "IntoClause";
  *((_QWORD *)v149 + 4) = 10;
  v149[40] = 2;
  v9();
  v150 = *(int *)(v1 + 48);
  v151 = (_QWORD *)(v678 + v4 + 51 * v3);
  *v151 = 52;
  v152 = (char *)v151 + v150;
  *(_QWORD *)v152 = "raw_stmt";
  *((_QWORD *)v152 + 1) = 8;
  v152[16] = 2;
  *((_QWORD *)v152 + 3) = "RawStmt";
  *((_QWORD *)v152 + 4) = 7;
  v152[40] = 2;
  v9();
  v153 = *(int *)(v1 + 48);
  v154 = (_QWORD *)(v678 + v4 + 52 * v3);
  *v154 = 53;
  v155 = (char *)v154 + v153;
  *(_QWORD *)v155 = "query";
  *((_QWORD *)v155 + 1) = 5;
  v155[16] = 2;
  *((_QWORD *)v155 + 3) = "Query";
  *((_QWORD *)v155 + 4) = 5;
  v155[40] = 2;
  v9();
  v156 = *(int *)(v1 + 48);
  v157 = (_QWORD *)(v678 + v4 + 53 * v3);
  *v157 = 54;
  v158 = (char *)v157 + v156;
  *(_QWORD *)v158 = "insert_stmt";
  *((_QWORD *)v158 + 1) = 11;
  v158[16] = 2;
  *((_QWORD *)v158 + 3) = "InsertStmt";
  *((_QWORD *)v158 + 4) = 10;
  v158[40] = 2;
  v9();
  v159 = *(int *)(v1 + 48);
  v160 = (_QWORD *)(v678 + v4 + 54 * v3);
  *v160 = 55;
  v161 = (char *)v160 + v159;
  *(_QWORD *)v161 = "delete_stmt";
  *((_QWORD *)v161 + 1) = 11;
  v161[16] = 2;
  *((_QWORD *)v161 + 3) = "DeleteStmt";
  *((_QWORD *)v161 + 4) = 10;
  v161[40] = 2;
  v9();
  v162 = *(int *)(v1 + 48);
  v163 = (_QWORD *)(v678 + v4 + 55 * v3);
  *v163 = 56;
  v164 = (char *)v163 + v162;
  *(_QWORD *)v164 = "update_stmt";
  *((_QWORD *)v164 + 1) = 11;
  v164[16] = 2;
  *((_QWORD *)v164 + 3) = "UpdateStmt";
  *((_QWORD *)v164 + 4) = 10;
  v164[40] = 2;
  v9();
  v165 = *(int *)(v1 + 48);
  v166 = (_QWORD *)(v678 + v4 + 56 * v3);
  *v166 = 57;
  v167 = (char *)v166 + v165;
  *(_QWORD *)v167 = "select_stmt";
  *((_QWORD *)v167 + 1) = 11;
  v167[16] = 2;
  *((_QWORD *)v167 + 3) = "SelectStmt";
  *((_QWORD *)v167 + 4) = 10;
  v167[40] = 2;
  v9();
  v168 = *(int *)(v1 + 48);
  v169 = (_QWORD *)(v678 + v4 + 57 * v3);
  *v169 = 58;
  v170 = (char *)v169 + v168;
  *(_QWORD *)v170 = "alter_table_stmt";
  *((_QWORD *)v170 + 1) = 16;
  v170[16] = 2;
  *((_QWORD *)v170 + 3) = "AlterTableStmt";
  *((_QWORD *)v170 + 4) = 14;
  v170[40] = 2;
  v9();
  v171 = *(int *)(v1 + 48);
  v172 = (_QWORD *)(v678 + v4 + 58 * v3);
  *v172 = 59;
  v173 = (char *)v172 + v171;
  *(_QWORD *)v173 = "alter_table_cmd";
  *((_QWORD *)v173 + 1) = 15;
  v173[16] = 2;
  *((_QWORD *)v173 + 3) = "AlterTableCmd";
  *((_QWORD *)v173 + 4) = 13;
  v173[40] = 2;
  v9();
  v174 = *(int *)(v1 + 48);
  v175 = (_QWORD *)(v678 + v4 + 59 * v3);
  *v175 = 60;
  v176 = (char *)v175 + v174;
  *(_QWORD *)v176 = "alter_domain_stmt";
  *((_QWORD *)v176 + 1) = 17;
  v176[16] = 2;
  *((_QWORD *)v176 + 3) = "AlterDomainStmt";
  *((_QWORD *)v176 + 4) = 15;
  v176[40] = 2;
  v9();
  v177 = *(int *)(v1 + 48);
  v178 = (_QWORD *)(v678 + v4 + 60 * v3);
  *v178 = 61;
  v179 = (char *)v178 + v177;
  *(_QWORD *)v179 = "set_operation_stmt";
  *((_QWORD *)v179 + 1) = 18;
  v179[16] = 2;
  *((_QWORD *)v179 + 3) = "SetOperationStmt";
  *((_QWORD *)v179 + 4) = 16;
  v179[40] = 2;
  v9();
  v180 = *(int *)(v1 + 48);
  v181 = (_QWORD *)(v678 + v4 + 61 * v3);
  *v181 = 62;
  v182 = (char *)v181 + v180;
  *(_QWORD *)v182 = "grant_stmt";
  *((_QWORD *)v182 + 1) = 10;
  v182[16] = 2;
  *((_QWORD *)v182 + 3) = "GrantStmt";
  *((_QWORD *)v182 + 4) = 9;
  v182[40] = 2;
  v9();
  v183 = *(int *)(v1 + 48);
  v184 = (_QWORD *)(v678 + v4 + 62 * v3);
  *v184 = 63;
  v185 = (char *)v184 + v183;
  *(_QWORD *)v185 = "grant_role_stmt";
  *((_QWORD *)v185 + 1) = 15;
  v185[16] = 2;
  *((_QWORD *)v185 + 3) = "GrantRoleStmt";
  *((_QWORD *)v185 + 4) = 13;
  v185[40] = 2;
  v9();
  v186 = *(int *)(v1 + 48);
  v187 = (_QWORD *)(v678 + v4 + 63 * v3);
  *v187 = 64;
  v188 = (char *)v187 + v186;
  *(_QWORD *)v188 = "alter_default_privileges_stmt";
  *((_QWORD *)v188 + 1) = 29;
  v188[16] = 2;
  *((_QWORD *)v188 + 3) = "AlterDefaultPrivilegesStmt";
  *((_QWORD *)v188 + 4) = 26;
  v188[40] = 2;
  v9();
  v189 = v678 + v4 + (v3 << 6) + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + (v3 << 6)) = 65;
  *(_QWORD *)v189 = "close_portal_stmt";
  *(_QWORD *)(v189 + 8) = 17;
  *(_BYTE *)(v189 + 16) = 2;
  *(_QWORD *)(v189 + 24) = "ClosePortalStmt";
  *(_QWORD *)(v189 + 32) = 15;
  *(_BYTE *)(v189 + 40) = 2;
  v9();
  v190 = *(int *)(v1 + 48);
  v191 = (_QWORD *)(v678 + v4 + 65 * v3);
  *v191 = 66;
  v192 = (char *)v191 + v190;
  *(_QWORD *)v192 = "cluster_stmt";
  *((_QWORD *)v192 + 1) = 12;
  v192[16] = 2;
  *((_QWORD *)v192 + 3) = "ClusterStmt";
  *((_QWORD *)v192 + 4) = 11;
  v192[40] = 2;
  v9();
  v193 = *(int *)(v1 + 48);
  v194 = (_QWORD *)(v678 + v4 + 66 * v3);
  *v194 = 67;
  v195 = (char *)v194 + v193;
  *(_QWORD *)v195 = "copy_stmt";
  *((_QWORD *)v195 + 1) = 9;
  v195[16] = 2;
  *((_QWORD *)v195 + 3) = "CopyStmt";
  *((_QWORD *)v195 + 4) = 8;
  v195[40] = 2;
  v9();
  v196 = *(int *)(v1 + 48);
  v197 = (_QWORD *)(v678 + v4 + 67 * v3);
  *v197 = 68;
  v198 = (char *)v197 + v196;
  *(_QWORD *)v198 = "create_stmt";
  *((_QWORD *)v198 + 1) = 11;
  v198[16] = 2;
  *((_QWORD *)v198 + 3) = "CreateStmt";
  *((_QWORD *)v198 + 4) = 10;
  v198[40] = 2;
  v9();
  v199 = *(int *)(v1 + 48);
  v200 = (_QWORD *)(v678 + v4 + 68 * v3);
  *v200 = 69;
  v201 = (char *)v200 + v199;
  *(_QWORD *)v201 = "define_stmt";
  *((_QWORD *)v201 + 1) = 11;
  v201[16] = 2;
  *((_QWORD *)v201 + 3) = "DefineStmt";
  *((_QWORD *)v201 + 4) = 10;
  v201[40] = 2;
  v9();
  v202 = *(int *)(v1 + 48);
  v203 = (_QWORD *)(v678 + v4 + 69 * v3);
  *v203 = 70;
  v204 = (char *)v203 + v202;
  *(_QWORD *)v204 = "drop_stmt";
  *((_QWORD *)v204 + 1) = 9;
  v204[16] = 2;
  *((_QWORD *)v204 + 3) = "DropStmt";
  *((_QWORD *)v204 + 4) = 8;
  v204[40] = 2;
  v9();
  v205 = *(int *)(v1 + 48);
  v206 = (_QWORD *)(v678 + v4 + 70 * v3);
  *v206 = 71;
  v207 = (char *)v206 + v205;
  *(_QWORD *)v207 = "truncate_stmt";
  *((_QWORD *)v207 + 1) = 13;
  v207[16] = 2;
  *((_QWORD *)v207 + 3) = "TruncateStmt";
  *((_QWORD *)v207 + 4) = 12;
  v207[40] = 2;
  v9();
  v208 = *(int *)(v1 + 48);
  v209 = (_QWORD *)(v678 + v4 + 71 * v3);
  *v209 = 72;
  v210 = (char *)v209 + v208;
  *(_QWORD *)v210 = "comment_stmt";
  *((_QWORD *)v210 + 1) = 12;
  v210[16] = 2;
  *((_QWORD *)v210 + 3) = "CommentStmt";
  *((_QWORD *)v210 + 4) = 11;
  v210[40] = 2;
  v9();
  v211 = *(int *)(v1 + 48);
  v212 = (_QWORD *)(v678 + v4 + 72 * v3);
  *v212 = 73;
  v213 = (char *)v212 + v211;
  *(_QWORD *)v213 = "fetch_stmt";
  *((_QWORD *)v213 + 1) = 10;
  v213[16] = 2;
  *((_QWORD *)v213 + 3) = "FetchStmt";
  *((_QWORD *)v213 + 4) = 9;
  v213[40] = 2;
  v9();
  v214 = *(int *)(v1 + 48);
  v215 = (_QWORD *)(v678 + v4 + 73 * v3);
  *v215 = 74;
  v216 = (char *)v215 + v214;
  *(_QWORD *)v216 = "index_stmt";
  *((_QWORD *)v216 + 1) = 10;
  v216[16] = 2;
  *((_QWORD *)v216 + 3) = "IndexStmt";
  *((_QWORD *)v216 + 4) = 9;
  v216[40] = 2;
  v9();
  v217 = *(int *)(v1 + 48);
  v218 = (_QWORD *)(v678 + v4 + 74 * v3);
  *v218 = 75;
  v219 = (char *)v218 + v217;
  *(_QWORD *)v219 = "create_function_stmt";
  *((_QWORD *)v219 + 1) = 20;
  v219[16] = 2;
  *((_QWORD *)v219 + 3) = "CreateFunctionStmt";
  *((_QWORD *)v219 + 4) = 18;
  v219[40] = 2;
  v9();
  v220 = *(int *)(v1 + 48);
  v221 = (_QWORD *)(v678 + v4 + 75 * v3);
  *v221 = 76;
  v222 = (char *)v221 + v220;
  *(_QWORD *)v222 = "alter_function_stmt";
  *((_QWORD *)v222 + 1) = 19;
  v222[16] = 2;
  *((_QWORD *)v222 + 3) = "AlterFunctionStmt";
  *((_QWORD *)v222 + 4) = 17;
  v222[40] = 2;
  v9();
  v223 = *(int *)(v1 + 48);
  v224 = (_QWORD *)(v678 + v4 + 76 * v3);
  *v224 = 77;
  v225 = (char *)v224 + v223;
  *(_QWORD *)v225 = "do_stmt";
  *((_QWORD *)v225 + 1) = 7;
  v225[16] = 2;
  *((_QWORD *)v225 + 3) = "DoStmt";
  *((_QWORD *)v225 + 4) = 6;
  v225[40] = 2;
  v9();
  v226 = *(int *)(v1 + 48);
  v227 = (_QWORD *)(v678 + v4 + 77 * v3);
  *v227 = 78;
  v228 = (char *)v227 + v226;
  *(_QWORD *)v228 = "rename_stmt";
  *((_QWORD *)v228 + 1) = 11;
  v228[16] = 2;
  *((_QWORD *)v228 + 3) = "RenameStmt";
  *((_QWORD *)v228 + 4) = 10;
  v228[40] = 2;
  v9();
  v229 = *(int *)(v1 + 48);
  v230 = (_QWORD *)(v678 + v4 + 78 * v3);
  *v230 = 79;
  v231 = (char *)v230 + v229;
  *(_QWORD *)v231 = "rule_stmt";
  *((_QWORD *)v231 + 1) = 9;
  v231[16] = 2;
  *((_QWORD *)v231 + 3) = "RuleStmt";
  *((_QWORD *)v231 + 4) = 8;
  v231[40] = 2;
  v9();
  v232 = *(int *)(v1 + 48);
  v233 = (_QWORD *)(v678 + v4 + 79 * v3);
  *v233 = 80;
  v234 = (char *)v233 + v232;
  *(_QWORD *)v234 = "notify_stmt";
  *((_QWORD *)v234 + 1) = 11;
  v234[16] = 2;
  *((_QWORD *)v234 + 3) = "NotifyStmt";
  *((_QWORD *)v234 + 4) = 10;
  v234[40] = 2;
  v9();
  v235 = *(int *)(v1 + 48);
  v236 = (_QWORD *)(v678 + v4 + 80 * v3);
  *v236 = 81;
  v237 = (char *)v236 + v235;
  *(_QWORD *)v237 = "listen_stmt";
  *((_QWORD *)v237 + 1) = 11;
  v237[16] = 2;
  *((_QWORD *)v237 + 3) = "ListenStmt";
  *((_QWORD *)v237 + 4) = 10;
  v237[40] = 2;
  v9();
  v238 = *(int *)(v1 + 48);
  v239 = (_QWORD *)(v678 + v4 + 81 * v3);
  *v239 = 82;
  v240 = (char *)v239 + v238;
  *(_QWORD *)v240 = "unlisten_stmt";
  *((_QWORD *)v240 + 1) = 13;
  v240[16] = 2;
  *((_QWORD *)v240 + 3) = "UnlistenStmt";
  *((_QWORD *)v240 + 4) = 12;
  v240[40] = 2;
  v9();
  v241 = *(int *)(v1 + 48);
  v242 = (_QWORD *)(v678 + v4 + 82 * v3);
  *v242 = 83;
  v243 = (char *)v242 + v241;
  *(_QWORD *)v243 = "transaction_stmt";
  *((_QWORD *)v243 + 1) = 16;
  v243[16] = 2;
  *((_QWORD *)v243 + 3) = "TransactionStmt";
  *((_QWORD *)v243 + 4) = 15;
  v243[40] = 2;
  v9();
  v244 = *(int *)(v1 + 48);
  v245 = (_QWORD *)(v678 + v4 + 83 * v3);
  *v245 = 84;
  v246 = (char *)v245 + v244;
  *(_QWORD *)v246 = "view_stmt";
  *((_QWORD *)v246 + 1) = 9;
  v246[16] = 2;
  *((_QWORD *)v246 + 3) = "ViewStmt";
  *((_QWORD *)v246 + 4) = 8;
  v246[40] = 2;
  v9();
  v247 = *(int *)(v1 + 48);
  v248 = (_QWORD *)(v678 + v4 + 84 * v3);
  *v248 = 85;
  v249 = (char *)v248 + v247;
  *(_QWORD *)v249 = "load_stmt";
  *((_QWORD *)v249 + 1) = 9;
  v249[16] = 2;
  *((_QWORD *)v249 + 3) = "LoadStmt";
  *((_QWORD *)v249 + 4) = 8;
  v249[40] = 2;
  v9();
  v250 = *(int *)(v1 + 48);
  v251 = (_QWORD *)(v678 + v4 + 85 * v3);
  *v251 = 86;
  v252 = (char *)v251 + v250;
  *(_QWORD *)v252 = "create_domain_stmt";
  *((_QWORD *)v252 + 1) = 18;
  v252[16] = 2;
  *((_QWORD *)v252 + 3) = "CreateDomainStmt";
  *((_QWORD *)v252 + 4) = 16;
  v252[40] = 2;
  v9();
  v253 = *(int *)(v1 + 48);
  v254 = (_QWORD *)(v678 + v4 + 86 * v3);
  *v254 = 87;
  v255 = (char *)v254 + v253;
  *(_QWORD *)v255 = "createdb_stmt";
  *((_QWORD *)v255 + 1) = 13;
  v255[16] = 2;
  *((_QWORD *)v255 + 3) = "CreatedbStmt";
  *((_QWORD *)v255 + 4) = 12;
  v255[40] = 2;
  v9();
  v256 = *(int *)(v1 + 48);
  v257 = (_QWORD *)(v678 + v4 + 87 * v3);
  *v257 = 88;
  v258 = (char *)v257 + v256;
  *(_QWORD *)v258 = "dropdb_stmt";
  *((_QWORD *)v258 + 1) = 11;
  v258[16] = 2;
  *((_QWORD *)v258 + 3) = "DropdbStmt";
  *((_QWORD *)v258 + 4) = 10;
  v258[40] = 2;
  v9();
  v259 = *(int *)(v1 + 48);
  v260 = (_QWORD *)(v678 + v4 + 88 * v3);
  *v260 = 89;
  v261 = (char *)v260 + v259;
  *(_QWORD *)v261 = "vacuum_stmt";
  *((_QWORD *)v261 + 1) = 11;
  v261[16] = 2;
  *((_QWORD *)v261 + 3) = "VacuumStmt";
  *((_QWORD *)v261 + 4) = 10;
  v261[40] = 2;
  v9();
  v262 = *(int *)(v1 + 48);
  v263 = (_QWORD *)(v678 + v4 + 89 * v3);
  *v263 = 90;
  v264 = (char *)v263 + v262;
  *(_QWORD *)v264 = "explain_stmt";
  *((_QWORD *)v264 + 1) = 12;
  v264[16] = 2;
  *((_QWORD *)v264 + 3) = "ExplainStmt";
  *((_QWORD *)v264 + 4) = 11;
  v264[40] = 2;
  v9();
  v265 = *(int *)(v1 + 48);
  v266 = (_QWORD *)(v678 + v4 + 90 * v3);
  *v266 = 91;
  v267 = (char *)v266 + v265;
  *(_QWORD *)v267 = "create_table_as_stmt";
  *((_QWORD *)v267 + 1) = 20;
  v267[16] = 2;
  *((_QWORD *)v267 + 3) = "CreateTableAsStmt";
  *((_QWORD *)v267 + 4) = 17;
  v267[40] = 2;
  v9();
  v268 = *(int *)(v1 + 48);
  v269 = (_QWORD *)(v678 + v4 + 91 * v3);
  *v269 = 92;
  v270 = (char *)v269 + v268;
  *(_QWORD *)v270 = "create_seq_stmt";
  *((_QWORD *)v270 + 1) = 15;
  v270[16] = 2;
  *((_QWORD *)v270 + 3) = "CreateSeqStmt";
  *((_QWORD *)v270 + 4) = 13;
  v270[40] = 2;
  v9();
  v271 = *(int *)(v1 + 48);
  v272 = (_QWORD *)(v678 + v4 + 92 * v3);
  *v272 = 93;
  v273 = (char *)v272 + v271;
  *(_QWORD *)v273 = "alter_seq_stmt";
  *((_QWORD *)v273 + 1) = 14;
  v273[16] = 2;
  *((_QWORD *)v273 + 3) = "AlterSeqStmt";
  *((_QWORD *)v273 + 4) = 12;
  v273[40] = 2;
  v9();
  v274 = *(int *)(v1 + 48);
  v275 = (_QWORD *)(v678 + v4 + 93 * v3);
  *v275 = 94;
  v276 = (char *)v275 + v274;
  *(_QWORD *)v276 = "variable_set_stmt";
  *((_QWORD *)v276 + 1) = 17;
  v276[16] = 2;
  *((_QWORD *)v276 + 3) = "VariableSetStmt";
  *((_QWORD *)v276 + 4) = 15;
  v276[40] = 2;
  v9();
  v277 = *(int *)(v1 + 48);
  v278 = (_QWORD *)(v678 + v4 + 94 * v3);
  *v278 = 95;
  v279 = (char *)v278 + v277;
  *(_QWORD *)v279 = "variable_show_stmt";
  *((_QWORD *)v279 + 1) = 18;
  v279[16] = 2;
  *((_QWORD *)v279 + 3) = "VariableShowStmt";
  *((_QWORD *)v279 + 4) = 16;
  v279[40] = 2;
  v9();
  v280 = *(int *)(v1 + 48);
  v281 = (_QWORD *)(v678 + v4 + 95 * v3);
  *v281 = 96;
  v282 = (char *)v281 + v280;
  *(_QWORD *)v282 = "discard_stmt";
  *((_QWORD *)v282 + 1) = 12;
  v282[16] = 2;
  *((_QWORD *)v282 + 3) = "DiscardStmt";
  *((_QWORD *)v282 + 4) = 11;
  v282[40] = 2;
  v9();
  v283 = *(int *)(v1 + 48);
  v284 = (_QWORD *)(v678 + v4 + 96 * v3);
  *v284 = 97;
  v285 = (char *)v284 + v283;
  *(_QWORD *)v285 = "create_trig_stmt";
  *((_QWORD *)v285 + 1) = 16;
  v285[16] = 2;
  *((_QWORD *)v285 + 3) = "CreateTrigStmt";
  *((_QWORD *)v285 + 4) = 14;
  v285[40] = 2;
  v9();
  v286 = *(int *)(v1 + 48);
  v287 = (_QWORD *)(v678 + v4 + 97 * v3);
  *v287 = 98;
  v288 = (char *)v287 + v286;
  *(_QWORD *)v288 = "create_plang_stmt";
  *((_QWORD *)v288 + 1) = 17;
  v288[16] = 2;
  *((_QWORD *)v288 + 3) = "CreatePLangStmt";
  *((_QWORD *)v288 + 4) = 15;
  v288[40] = 2;
  v9();
  v289 = *(int *)(v1 + 48);
  v290 = (_QWORD *)(v678 + v4 + 98 * v3);
  *v290 = 99;
  v291 = (char *)v290 + v289;
  *(_QWORD *)v291 = "create_role_stmt";
  *((_QWORD *)v291 + 1) = 16;
  v291[16] = 2;
  *((_QWORD *)v291 + 3) = "CreateRoleStmt";
  *((_QWORD *)v291 + 4) = 14;
  v291[40] = 2;
  v9();
  v292 = *(int *)(v1 + 48);
  v293 = (_QWORD *)(v678 + v4 + 99 * v3);
  *v293 = 100;
  v294 = (char *)v293 + v292;
  *(_QWORD *)v294 = "alter_role_stmt";
  *((_QWORD *)v294 + 1) = 15;
  v294[16] = 2;
  *((_QWORD *)v294 + 3) = "AlterRoleStmt";
  *((_QWORD *)v294 + 4) = 13;
  v294[40] = 2;
  v9();
  v295 = *(int *)(v1 + 48);
  v296 = (_QWORD *)(v678 + v4 + 100 * v3);
  *v296 = 101;
  v297 = (char *)v296 + v295;
  *(_QWORD *)v297 = "drop_role_stmt";
  *((_QWORD *)v297 + 1) = 14;
  v297[16] = 2;
  *((_QWORD *)v297 + 3) = "DropRoleStmt";
  *((_QWORD *)v297 + 4) = 12;
  v297[40] = 2;
  v9();
  v298 = *(int *)(v1 + 48);
  v299 = (_QWORD *)(v678 + v4 + 101 * v3);
  *v299 = 102;
  v300 = (char *)v299 + v298;
  *(_QWORD *)v300 = "lock_stmt";
  *((_QWORD *)v300 + 1) = 9;
  v300[16] = 2;
  *((_QWORD *)v300 + 3) = "LockStmt";
  *((_QWORD *)v300 + 4) = 8;
  v300[40] = 2;
  v9();
  v301 = *(int *)(v1 + 48);
  v302 = (_QWORD *)(v678 + v4 + 102 * v3);
  *v302 = 103;
  v303 = (char *)v302 + v301;
  *(_QWORD *)v303 = "constraints_set_stmt";
  *((_QWORD *)v303 + 1) = 20;
  v303[16] = 2;
  *((_QWORD *)v303 + 3) = "ConstraintsSetStmt";
  *((_QWORD *)v303 + 4) = 18;
  v303[40] = 2;
  v9();
  v304 = *(int *)(v1 + 48);
  v305 = (_QWORD *)(v678 + v4 + 103 * v3);
  *v305 = 104;
  v306 = (char *)v305 + v304;
  *(_QWORD *)v306 = "reindex_stmt";
  *((_QWORD *)v306 + 1) = 12;
  v306[16] = 2;
  *((_QWORD *)v306 + 3) = "ReindexStmt";
  *((_QWORD *)v306 + 4) = 11;
  v306[40] = 2;
  v9();
  v307 = *(int *)(v1 + 48);
  v308 = (_QWORD *)(v678 + v4 + 104 * v3);
  *v308 = 105;
  v309 = (char *)v308 + v307;
  *(_QWORD *)v309 = "check_point_stmt";
  *((_QWORD *)v309 + 1) = 16;
  v309[16] = 2;
  *((_QWORD *)v309 + 3) = "CheckPointStmt";
  *((_QWORD *)v309 + 4) = 14;
  v309[40] = 2;
  v9();
  v310 = *(int *)(v1 + 48);
  v311 = (_QWORD *)(v678 + v4 + 105 * v3);
  *v311 = 106;
  v312 = (char *)v311 + v310;
  *(_QWORD *)v312 = "create_schema_stmt";
  *((_QWORD *)v312 + 1) = 18;
  v312[16] = 2;
  *((_QWORD *)v312 + 3) = "CreateSchemaStmt";
  *((_QWORD *)v312 + 4) = 16;
  v312[40] = 2;
  v9();
  v313 = *(int *)(v1 + 48);
  v314 = (_QWORD *)(v678 + v4 + 106 * v3);
  *v314 = 107;
  v315 = (char *)v314 + v313;
  *(_QWORD *)v315 = "alter_database_stmt";
  *((_QWORD *)v315 + 1) = 19;
  v315[16] = 2;
  *((_QWORD *)v315 + 3) = "AlterDatabaseStmt";
  *((_QWORD *)v315 + 4) = 17;
  v315[40] = 2;
  v9();
  v316 = *(int *)(v1 + 48);
  v317 = (_QWORD *)(v678 + v4 + 107 * v3);
  *v317 = 108;
  v318 = (char *)v317 + v316;
  *(_QWORD *)v318 = "alter_database_set_stmt";
  *((_QWORD *)v318 + 1) = 23;
  v318[16] = 2;
  *((_QWORD *)v318 + 3) = "AlterDatabaseSetStmt";
  *((_QWORD *)v318 + 4) = 20;
  v318[40] = 2;
  v9();
  v319 = *(int *)(v1 + 48);
  v320 = (_QWORD *)(v678 + v4 + 108 * v3);
  *v320 = 109;
  v321 = (char *)v320 + v319;
  *(_QWORD *)v321 = "alter_role_set_stmt";
  *((_QWORD *)v321 + 1) = 19;
  v321[16] = 2;
  *((_QWORD *)v321 + 3) = "AlterRoleSetStmt";
  *((_QWORD *)v321 + 4) = 16;
  v321[40] = 2;
  v9();
  v322 = *(int *)(v1 + 48);
  v323 = (_QWORD *)(v678 + v4 + 109 * v3);
  *v323 = 110;
  v324 = (char *)v323 + v322;
  *(_QWORD *)v324 = "create_conversion_stmt";
  *((_QWORD *)v324 + 1) = 22;
  v324[16] = 2;
  *((_QWORD *)v324 + 3) = "CreateConversionStmt";
  *((_QWORD *)v324 + 4) = 20;
  v324[40] = 2;
  v9();
  v325 = *(int *)(v1 + 48);
  v326 = (_QWORD *)(v678 + v4 + 110 * v3);
  *v326 = 111;
  v327 = (char *)v326 + v325;
  *(_QWORD *)v327 = "create_cast_stmt";
  *((_QWORD *)v327 + 1) = 16;
  v327[16] = 2;
  *((_QWORD *)v327 + 3) = "CreateCastStmt";
  *((_QWORD *)v327 + 4) = 14;
  v327[40] = 2;
  v9();
  v328 = *(int *)(v1 + 48);
  v329 = (_QWORD *)(v678 + v4 + 111 * v3);
  *v329 = 112;
  v330 = (char *)v329 + v328;
  *(_QWORD *)v330 = "create_op_class_stmt";
  *((_QWORD *)v330 + 1) = 20;
  v330[16] = 2;
  *((_QWORD *)v330 + 3) = "CreateOpClassStmt";
  *((_QWORD *)v330 + 4) = 17;
  v330[40] = 2;
  v9();
  v331 = *(int *)(v1 + 48);
  v332 = (_QWORD *)(v678 + v4 + 112 * v3);
  *v332 = 113;
  v333 = (char *)v332 + v331;
  *(_QWORD *)v333 = "create_op_family_stmt";
  *((_QWORD *)v333 + 1) = 21;
  v333[16] = 2;
  *((_QWORD *)v333 + 3) = "CreateOpFamilyStmt";
  *((_QWORD *)v333 + 4) = 18;
  v333[40] = 2;
  v9();
  v334 = *(int *)(v1 + 48);
  v335 = (_QWORD *)(v678 + v4 + 113 * v3);
  *v335 = 114;
  v336 = (char *)v335 + v334;
  *(_QWORD *)v336 = "alter_op_family_stmt";
  *((_QWORD *)v336 + 1) = 20;
  v336[16] = 2;
  *((_QWORD *)v336 + 3) = "AlterOpFamilyStmt";
  *((_QWORD *)v336 + 4) = 17;
  v336[40] = 2;
  v9();
  v337 = *(int *)(v1 + 48);
  v338 = (_QWORD *)(v678 + v4 + 114 * v3);
  *v338 = 115;
  v339 = (char *)v338 + v337;
  *(_QWORD *)v339 = "prepare_stmt";
  *((_QWORD *)v339 + 1) = 12;
  v339[16] = 2;
  *((_QWORD *)v339 + 3) = "PrepareStmt";
  *((_QWORD *)v339 + 4) = 11;
  v339[40] = 2;
  v9();
  v340 = *(int *)(v1 + 48);
  v341 = (_QWORD *)(v678 + v4 + 115 * v3);
  *v341 = 116;
  v342 = (char *)v341 + v340;
  *(_QWORD *)v342 = "execute_stmt";
  *((_QWORD *)v342 + 1) = 12;
  v342[16] = 2;
  *((_QWORD *)v342 + 3) = "ExecuteStmt";
  *((_QWORD *)v342 + 4) = 11;
  v342[40] = 2;
  v9();
  v343 = *(int *)(v1 + 48);
  v344 = (_QWORD *)(v678 + v4 + 116 * v3);
  *v344 = 117;
  v345 = (char *)v344 + v343;
  *(_QWORD *)v345 = "deallocate_stmt";
  *((_QWORD *)v345 + 1) = 15;
  v345[16] = 2;
  *((_QWORD *)v345 + 3) = "DeallocateStmt";
  *((_QWORD *)v345 + 4) = 14;
  v345[40] = 2;
  v9();
  v346 = *(int *)(v1 + 48);
  v347 = (_QWORD *)(v678 + v4 + 117 * v3);
  *v347 = 118;
  v348 = (char *)v347 + v346;
  *(_QWORD *)v348 = "declare_cursor_stmt";
  *((_QWORD *)v348 + 1) = 19;
  v348[16] = 2;
  *((_QWORD *)v348 + 3) = "DeclareCursorStmt";
  *((_QWORD *)v348 + 4) = 17;
  v348[40] = 2;
  v9();
  v349 = *(int *)(v1 + 48);
  v350 = (_QWORD *)(v678 + v4 + 118 * v3);
  *v350 = 119;
  v351 = (char *)v350 + v349;
  *(_QWORD *)v351 = "create_table_space_stmt";
  *((_QWORD *)v351 + 1) = 23;
  v351[16] = 2;
  *((_QWORD *)v351 + 3) = "CreateTableSpaceStmt";
  *((_QWORD *)v351 + 4) = 20;
  v351[40] = 2;
  v9();
  v352 = *(int *)(v1 + 48);
  v353 = (_QWORD *)(v678 + v4 + 119 * v3);
  *v353 = 120;
  v354 = (char *)v353 + v352;
  *(_QWORD *)v354 = "drop_table_space_stmt";
  *((_QWORD *)v354 + 1) = 21;
  v354[16] = 2;
  *((_QWORD *)v354 + 3) = "DropTableSpaceStmt";
  *((_QWORD *)v354 + 4) = 18;
  v354[40] = 2;
  v9();
  v355 = *(int *)(v1 + 48);
  v356 = (_QWORD *)(v678 + v4 + 120 * v3);
  *v356 = 121;
  v357 = (char *)v356 + v355;
  *(_QWORD *)v357 = "alter_object_depends_stmt";
  *((_QWORD *)v357 + 1) = 25;
  v357[16] = 2;
  *((_QWORD *)v357 + 3) = "AlterObjectDependsStmt";
  *((_QWORD *)v357 + 4) = 22;
  v357[40] = 2;
  v9();
  v358 = *(int *)(v1 + 48);
  v359 = (_QWORD *)(v678 + v4 + 121 * v3);
  *v359 = 122;
  v360 = (char *)v359 + v358;
  *(_QWORD *)v360 = "alter_object_schema_stmt";
  *((_QWORD *)v360 + 1) = 24;
  v360[16] = 2;
  *((_QWORD *)v360 + 3) = "AlterObjectSchemaStmt";
  *((_QWORD *)v360 + 4) = 21;
  v360[40] = 2;
  v9();
  v361 = *(int *)(v1 + 48);
  v362 = (_QWORD *)(v678 + v4 + 122 * v3);
  *v362 = 123;
  v363 = (char *)v362 + v361;
  *(_QWORD *)v363 = "alter_owner_stmt";
  *((_QWORD *)v363 + 1) = 16;
  v363[16] = 2;
  *((_QWORD *)v363 + 3) = "AlterOwnerStmt";
  *((_QWORD *)v363 + 4) = 14;
  v363[40] = 2;
  v9();
  v364 = *(int *)(v1 + 48);
  v365 = (_QWORD *)(v678 + v4 + 123 * v3);
  *v365 = 124;
  v366 = (char *)v365 + v364;
  *(_QWORD *)v366 = "alter_operator_stmt";
  *((_QWORD *)v366 + 1) = 19;
  v366[16] = 2;
  *((_QWORD *)v366 + 3) = "AlterOperatorStmt";
  *((_QWORD *)v366 + 4) = 17;
  v366[40] = 2;
  v9();
  v367 = *(int *)(v1 + 48);
  v368 = (_QWORD *)(v678 + v4 + 124 * v3);
  *v368 = 125;
  v369 = (char *)v368 + v367;
  *(_QWORD *)v369 = "alter_type_stmt";
  *((_QWORD *)v369 + 1) = 15;
  v369[16] = 2;
  *((_QWORD *)v369 + 3) = "AlterTypeStmt";
  *((_QWORD *)v369 + 4) = 13;
  v369[40] = 2;
  v9();
  v370 = *(int *)(v1 + 48);
  v371 = (_QWORD *)(v678 + v4 + 125 * v3);
  *v371 = 126;
  v372 = (char *)v371 + v370;
  *(_QWORD *)v372 = "drop_owned_stmt";
  *((_QWORD *)v372 + 1) = 15;
  v372[16] = 2;
  *((_QWORD *)v372 + 3) = "DropOwnedStmt";
  *((_QWORD *)v372 + 4) = 13;
  v372[40] = 2;
  v9();
  v373 = *(int *)(v1 + 48);
  v374 = (_QWORD *)(v678 + v4 + 126 * v3);
  *v374 = 127;
  v375 = (char *)v374 + v373;
  *(_QWORD *)v375 = "reassign_owned_stmt";
  *((_QWORD *)v375 + 1) = 19;
  v375[16] = 2;
  *((_QWORD *)v375 + 3) = "ReassignOwnedStmt";
  *((_QWORD *)v375 + 4) = 17;
  v375[40] = 2;
  v9();
  v376 = *(int *)(v1 + 48);
  v377 = (_QWORD *)(v678 + v4 + 127 * v3);
  *v377 = 128;
  v378 = (char *)v377 + v376;
  *(_QWORD *)v378 = "composite_type_stmt";
  *((_QWORD *)v378 + 1) = 19;
  v378[16] = 2;
  *((_QWORD *)v378 + 3) = "CompositeTypeStmt";
  *((_QWORD *)v378 + 4) = 17;
  v378[40] = 2;
  v9();
  v379 = v678 + v4 + (v3 << 7) + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + (v3 << 7)) = 129;
  *(_QWORD *)v379 = "create_enum_stmt";
  *(_QWORD *)(v379 + 8) = 16;
  *(_BYTE *)(v379 + 16) = 2;
  *(_QWORD *)(v379 + 24) = "CreateEnumStmt";
  *(_QWORD *)(v379 + 32) = 14;
  *(_BYTE *)(v379 + 40) = 2;
  v9();
  v380 = *(int *)(v1 + 48);
  v381 = (_QWORD *)(v678 + v4 + 129 * v3);
  *v381 = 130;
  v382 = (char *)v381 + v380;
  *(_QWORD *)v382 = "create_range_stmt";
  *((_QWORD *)v382 + 1) = 17;
  v382[16] = 2;
  *((_QWORD *)v382 + 3) = "CreateRangeStmt";
  *((_QWORD *)v382 + 4) = 15;
  v382[40] = 2;
  v9();
  v383 = *(int *)(v1 + 48);
  v384 = (_QWORD *)(v678 + v4 + 130 * v3);
  *v384 = 131;
  v385 = (char *)v384 + v383;
  *(_QWORD *)v385 = "alter_enum_stmt";
  *((_QWORD *)v385 + 1) = 15;
  v385[16] = 2;
  *((_QWORD *)v385 + 3) = "AlterEnumStmt";
  *((_QWORD *)v385 + 4) = 13;
  v385[40] = 2;
  v9();
  v386 = *(int *)(v1 + 48);
  v387 = (_QWORD *)(v678 + v4 + 131 * v3);
  *v387 = 132;
  v388 = (char *)v387 + v386;
  *(_QWORD *)v388 = "alter_tsdictionary_stmt";
  *((_QWORD *)v388 + 1) = 23;
  v388[16] = 2;
  *((_QWORD *)v388 + 3) = "AlterTSDictionaryStmt";
  *((_QWORD *)v388 + 4) = 21;
  v388[40] = 2;
  v9();
  v389 = *(int *)(v1 + 48);
  v390 = (_QWORD *)(v678 + v4 + 132 * v3);
  *v390 = 133;
  v391 = (char *)v390 + v389;
  *(_QWORD *)v391 = "alter_tsconfiguration_stmt";
  *((_QWORD *)v391 + 1) = 26;
  v391[16] = 2;
  *((_QWORD *)v391 + 3) = "AlterTSConfigurationStmt";
  *((_QWORD *)v391 + 4) = 24;
  v391[40] = 2;
  v9();
  v392 = *(int *)(v1 + 48);
  v393 = (_QWORD *)(v678 + v4 + 133 * v3);
  *v393 = 134;
  v394 = (char *)v393 + v392;
  *(_QWORD *)v394 = "create_fdw_stmt";
  *((_QWORD *)v394 + 1) = 15;
  v394[16] = 2;
  *((_QWORD *)v394 + 3) = "CreateFdwStmt";
  *((_QWORD *)v394 + 4) = 13;
  v394[40] = 2;
  v9();
  v395 = *(int *)(v1 + 48);
  v396 = (_QWORD *)(v678 + v4 + 134 * v3);
  *v396 = 135;
  v397 = (char *)v396 + v395;
  *(_QWORD *)v397 = "alter_fdw_stmt";
  *((_QWORD *)v397 + 1) = 14;
  v397[16] = 2;
  *((_QWORD *)v397 + 3) = "AlterFdwStmt";
  *((_QWORD *)v397 + 4) = 12;
  v397[40] = 2;
  v9();
  v398 = *(int *)(v1 + 48);
  v399 = (_QWORD *)(v678 + v4 + 135 * v3);
  *v399 = 136;
  v400 = (char *)v399 + v398;
  *(_QWORD *)v400 = "create_foreign_server_stmt";
  *((_QWORD *)v400 + 1) = 26;
  v400[16] = 2;
  *((_QWORD *)v400 + 3) = "CreateForeignServerStmt";
  *((_QWORD *)v400 + 4) = 23;
  v400[40] = 2;
  v9();
  v401 = *(int *)(v1 + 48);
  v402 = (_QWORD *)(v678 + v4 + 136 * v3);
  *v402 = 137;
  v403 = (char *)v402 + v401;
  *(_QWORD *)v403 = "alter_foreign_server_stmt";
  *((_QWORD *)v403 + 1) = 25;
  v403[16] = 2;
  *((_QWORD *)v403 + 3) = "AlterForeignServerStmt";
  *((_QWORD *)v403 + 4) = 22;
  v403[40] = 2;
  v9();
  v404 = *(int *)(v1 + 48);
  v405 = (_QWORD *)(v678 + v4 + 137 * v3);
  *v405 = 138;
  v406 = (char *)v405 + v404;
  *(_QWORD *)v406 = 0x18DCCD000;
  *((_QWORD *)v406 + 1) = 24;
  v406[16] = 2;
  *((_QWORD *)v406 + 3) = "CreateUserMappingStmt";
  *((_QWORD *)v406 + 4) = 21;
  v406[40] = 2;
  v9();
  v407 = *(int *)(v1 + 48);
  v408 = (_QWORD *)(v678 + v4 + 138 * v3);
  *v408 = 139;
  v409 = (char *)v408 + v407;
  *(_QWORD *)v409 = "alter_user_mapping_stmt";
  *((_QWORD *)v409 + 1) = 23;
  v409[16] = 2;
  *((_QWORD *)v409 + 3) = "AlterUserMappingStmt";
  *((_QWORD *)v409 + 4) = 20;
  v409[40] = 2;
  v9();
  v410 = *(int *)(v1 + 48);
  v411 = (_QWORD *)(v678 + v4 + 139 * v3);
  *v411 = 140;
  v412 = (char *)v411 + v410;
  *(_QWORD *)v412 = "drop_user_mapping_stmt";
  *((_QWORD *)v412 + 1) = 22;
  v412[16] = 2;
  *((_QWORD *)v412 + 3) = "DropUserMappingStmt";
  *((_QWORD *)v412 + 4) = 19;
  v412[40] = 2;
  v9();
  v413 = *(int *)(v1 + 48);
  v414 = (_QWORD *)(v678 + v4 + 140 * v3);
  *v414 = 141;
  v415 = (char *)v414 + v413;
  *(_QWORD *)v415 = "alter_table_space_options_stmt";
  *((_QWORD *)v415 + 1) = 30;
  v415[16] = 2;
  *((_QWORD *)v415 + 3) = "AlterTableSpaceOptionsStmt";
  *((_QWORD *)v415 + 4) = 26;
  v415[40] = 2;
  v9();
  v416 = *(int *)(v1 + 48);
  v417 = (_QWORD *)(v678 + v4 + 141 * v3);
  *v417 = 142;
  v418 = (char *)v417 + v416;
  *(_QWORD *)v418 = "alter_table_move_all_stmt";
  *((_QWORD *)v418 + 1) = 25;
  v418[16] = 2;
  *((_QWORD *)v418 + 3) = "AlterTableMoveAllStmt";
  *((_QWORD *)v418 + 4) = 21;
  v418[40] = 2;
  v9();
  v419 = *(int *)(v1 + 48);
  v420 = (_QWORD *)(v678 + v4 + 142 * v3);
  *v420 = 143;
  v421 = (char *)v420 + v419;
  *(_QWORD *)v421 = "sec_label_stmt";
  *((_QWORD *)v421 + 1) = 14;
  v421[16] = 2;
  *((_QWORD *)v421 + 3) = "SecLabelStmt";
  *((_QWORD *)v421 + 4) = 12;
  v421[40] = 2;
  v9();
  v422 = *(int *)(v1 + 48);
  v423 = (_QWORD *)(v678 + v4 + 143 * v3);
  *v423 = 144;
  v424 = (char *)v423 + v422;
  *(_QWORD *)v424 = "create_foreign_table_stmt";
  *((_QWORD *)v424 + 1) = 25;
  v424[16] = 2;
  *((_QWORD *)v424 + 3) = "CreateForeignTableStmt";
  *((_QWORD *)v424 + 4) = 22;
  v424[40] = 2;
  v9();
  v425 = *(int *)(v1 + 48);
  v426 = (_QWORD *)(v678 + v4 + 144 * v3);
  *v426 = 145;
  v427 = (char *)v426 + v425;
  *(_QWORD *)v427 = "import_foreign_schema_stmt";
  *((_QWORD *)v427 + 1) = 26;
  v427[16] = 2;
  *((_QWORD *)v427 + 3) = "ImportForeignSchemaStmt";
  *((_QWORD *)v427 + 4) = 23;
  v427[40] = 2;
  v9();
  v428 = *(int *)(v1 + 48);
  v429 = (_QWORD *)(v678 + v4 + 145 * v3);
  *v429 = 146;
  v430 = (char *)v429 + v428;
  *(_QWORD *)v430 = "create_extension_stmt";
  *((_QWORD *)v430 + 1) = 21;
  v430[16] = 2;
  *((_QWORD *)v430 + 3) = "CreateExtensionStmt";
  *((_QWORD *)v430 + 4) = 19;
  v430[40] = 2;
  v9();
  v431 = *(int *)(v1 + 48);
  v432 = (_QWORD *)(v678 + v4 + 146 * v3);
  *v432 = 147;
  v433 = (char *)v432 + v431;
  *(_QWORD *)v433 = "alter_extension_stmt";
  *((_QWORD *)v433 + 1) = 20;
  v433[16] = 2;
  *((_QWORD *)v433 + 3) = "AlterExtensionStmt";
  *((_QWORD *)v433 + 4) = 18;
  v433[40] = 2;
  v9();
  v434 = *(int *)(v1 + 48);
  v435 = (_QWORD *)(v678 + v4 + 147 * v3);
  *v435 = 148;
  v436 = (char *)v435 + v434;
  *(_QWORD *)v436 = "alter_extension_contents_stmt";
  *((_QWORD *)v436 + 1) = 29;
  v436[16] = 2;
  *((_QWORD *)v436 + 3) = "AlterExtensionContentsStmt";
  *((_QWORD *)v436 + 4) = 26;
  v436[40] = 2;
  v9();
  v437 = *(int *)(v1 + 48);
  v438 = (_QWORD *)(v678 + v4 + 148 * v3);
  *v438 = 149;
  v439 = (char *)v438 + v437;
  *(_QWORD *)v439 = "create_event_trig_stmt";
  *((_QWORD *)v439 + 1) = 22;
  v439[16] = 2;
  *((_QWORD *)v439 + 3) = "CreateEventTrigStmt";
  *((_QWORD *)v439 + 4) = 19;
  v439[40] = 2;
  v9();
  v440 = *(int *)(v1 + 48);
  v441 = (_QWORD *)(v678 + v4 + 149 * v3);
  *v441 = 150;
  v442 = (char *)v441 + v440;
  *(_QWORD *)v442 = "alter_event_trig_stmt";
  *((_QWORD *)v442 + 1) = 21;
  v442[16] = 2;
  *((_QWORD *)v442 + 3) = "AlterEventTrigStmt";
  *((_QWORD *)v442 + 4) = 18;
  v442[40] = 2;
  v9();
  v443 = *(int *)(v1 + 48);
  v444 = (_QWORD *)(v678 + v4 + 150 * v3);
  *v444 = 151;
  v445 = (char *)v444 + v443;
  *(_QWORD *)v445 = "refresh_mat_view_stmt";
  *((_QWORD *)v445 + 1) = 21;
  v445[16] = 2;
  *((_QWORD *)v445 + 3) = "RefreshMatViewStmt";
  *((_QWORD *)v445 + 4) = 18;
  v445[40] = 2;
  v9();
  v446 = *(int *)(v1 + 48);
  v447 = (_QWORD *)(v678 + v4 + 151 * v3);
  *v447 = 152;
  v448 = (char *)v447 + v446;
  *(_QWORD *)v448 = "replica_identity_stmt";
  *((_QWORD *)v448 + 1) = 21;
  v448[16] = 2;
  *((_QWORD *)v448 + 3) = "ReplicaIdentityStmt";
  *((_QWORD *)v448 + 4) = 19;
  v448[40] = 2;
  v9();
  v449 = *(int *)(v1 + 48);
  v450 = (_QWORD *)(v678 + v4 + 152 * v3);
  *v450 = 153;
  v451 = (char *)v450 + v449;
  *(_QWORD *)v451 = "alter_system_stmt";
  *((_QWORD *)v451 + 1) = 17;
  v451[16] = 2;
  *((_QWORD *)v451 + 3) = "AlterSystemStmt";
  *((_QWORD *)v451 + 4) = 15;
  v451[40] = 2;
  v9();
  v452 = *(int *)(v1 + 48);
  v453 = (_QWORD *)(v678 + v4 + 153 * v3);
  *v453 = 154;
  v454 = (char *)v453 + v452;
  *(_QWORD *)v454 = "create_policy_stmt";
  *((_QWORD *)v454 + 1) = 18;
  v454[16] = 2;
  *((_QWORD *)v454 + 3) = "CreatePolicyStmt";
  *((_QWORD *)v454 + 4) = 16;
  v454[40] = 2;
  v9();
  v455 = *(int *)(v1 + 48);
  v456 = (_QWORD *)(v678 + v4 + 154 * v3);
  *v456 = 155;
  v457 = (char *)v456 + v455;
  *(_QWORD *)v457 = "alter_policy_stmt";
  *((_QWORD *)v457 + 1) = 17;
  v457[16] = 2;
  *((_QWORD *)v457 + 3) = "AlterPolicyStmt";
  *((_QWORD *)v457 + 4) = 15;
  v457[40] = 2;
  v9();
  v458 = *(int *)(v1 + 48);
  v459 = (_QWORD *)(v678 + v4 + 155 * v3);
  *v459 = 156;
  v460 = (char *)v459 + v458;
  *(_QWORD *)v460 = "create_transform_stmt";
  *((_QWORD *)v460 + 1) = 21;
  v460[16] = 2;
  *((_QWORD *)v460 + 3) = "CreateTransformStmt";
  *((_QWORD *)v460 + 4) = 19;
  v460[40] = 2;
  v9();
  v461 = *(int *)(v1 + 48);
  v462 = (_QWORD *)(v678 + v4 + 156 * v3);
  *v462 = 157;
  v463 = (char *)v462 + v461;
  *(_QWORD *)v463 = "create_am_stmt";
  *((_QWORD *)v463 + 1) = 14;
  v463[16] = 2;
  *((_QWORD *)v463 + 3) = "CreateAmStmt";
  *((_QWORD *)v463 + 4) = 12;
  v463[40] = 2;
  v9();
  v464 = *(int *)(v1 + 48);
  v465 = (_QWORD *)(v678 + v4 + 157 * v3);
  *v465 = 158;
  v466 = (char *)v465 + v464;
  *(_QWORD *)v466 = "create_publication_stmt";
  *((_QWORD *)v466 + 1) = 23;
  v466[16] = 2;
  *((_QWORD *)v466 + 3) = "CreatePublicationStmt";
  *((_QWORD *)v466 + 4) = 21;
  v466[40] = 2;
  v9();
  v467 = *(int *)(v1 + 48);
  v468 = (_QWORD *)(v678 + v4 + 158 * v3);
  *v468 = 159;
  v469 = (char *)v468 + v467;
  *(_QWORD *)v469 = "alter_publication_stmt";
  *((_QWORD *)v469 + 1) = 22;
  v469[16] = 2;
  *((_QWORD *)v469 + 3) = "AlterPublicationStmt";
  *((_QWORD *)v469 + 4) = 20;
  v469[40] = 2;
  v9();
  v470 = *(int *)(v1 + 48);
  v471 = (_QWORD *)(v678 + v4 + 159 * v3);
  *v471 = 160;
  v472 = (char *)v471 + v470;
  *(_QWORD *)v472 = "create_subscription_stmt";
  *((_QWORD *)v472 + 1) = 24;
  v472[16] = 2;
  *((_QWORD *)v472 + 3) = "CreateSubscriptionStmt";
  *((_QWORD *)v472 + 4) = 22;
  v472[40] = 2;
  v9();
  v473 = *(int *)(v1 + 48);
  v474 = (_QWORD *)(v678 + v4 + 160 * v3);
  *v474 = 161;
  v475 = (char *)v474 + v473;
  *(_QWORD *)v475 = "alter_subscription_stmt";
  *((_QWORD *)v475 + 1) = 23;
  v475[16] = 2;
  *((_QWORD *)v475 + 3) = "AlterSubscriptionStmt";
  *((_QWORD *)v475 + 4) = 21;
  v475[40] = 2;
  v9();
  v476 = *(int *)(v1 + 48);
  v477 = (_QWORD *)(v678 + v4 + 161 * v3);
  *v477 = 162;
  v478 = (char *)v477 + v476;
  *(_QWORD *)v478 = "drop_subscription_stmt";
  *((_QWORD *)v478 + 1) = 22;
  v478[16] = 2;
  *((_QWORD *)v478 + 3) = "DropSubscriptionStmt";
  *((_QWORD *)v478 + 4) = 20;
  v478[40] = 2;
  v9();
  v479 = *(int *)(v1 + 48);
  v480 = (_QWORD *)(v678 + v4 + 162 * v3);
  *v480 = 163;
  v481 = (char *)v480 + v479;
  *(_QWORD *)v481 = "create_stats_stmt";
  *((_QWORD *)v481 + 1) = 17;
  v481[16] = 2;
  *((_QWORD *)v481 + 3) = "CreateStatsStmt";
  *((_QWORD *)v481 + 4) = 15;
  v481[40] = 2;
  v9();
  v482 = *(int *)(v1 + 48);
  v483 = (_QWORD *)(v678 + v4 + 163 * v3);
  *v483 = 164;
  v484 = (char *)v483 + v482;
  *(_QWORD *)v484 = "alter_collation_stmt";
  *((_QWORD *)v484 + 1) = 20;
  v484[16] = 2;
  *((_QWORD *)v484 + 3) = "AlterCollationStmt";
  *((_QWORD *)v484 + 4) = 18;
  v484[40] = 2;
  v9();
  v485 = *(int *)(v1 + 48);
  v486 = (_QWORD *)(v678 + v4 + 164 * v3);
  *v486 = 165;
  v487 = (char *)v486 + v485;
  *(_QWORD *)v487 = "call_stmt";
  *((_QWORD *)v487 + 1) = 9;
  v487[16] = 2;
  *((_QWORD *)v487 + 3) = "CallStmt";
  *((_QWORD *)v487 + 4) = 8;
  v487[40] = 2;
  v9();
  v488 = *(int *)(v1 + 48);
  v489 = (_QWORD *)(v678 + v4 + 165 * v3);
  *v489 = 166;
  v490 = (char *)v489 + v488;
  *(_QWORD *)v490 = "alter_stats_stmt";
  *((_QWORD *)v490 + 1) = 16;
  v490[16] = 2;
  *((_QWORD *)v490 + 3) = "AlterStatsStmt";
  *((_QWORD *)v490 + 4) = 14;
  v490[40] = 2;
  v9();
  v491 = *(int *)(v1 + 48);
  v492 = (_QWORD *)(v678 + v4 + 166 * v3);
  *v492 = 167;
  v493 = (char *)v492 + v491;
  *(_QWORD *)v493 = "a_expr";
  *((_QWORD *)v493 + 1) = 6;
  v493[16] = 2;
  *((_QWORD *)v493 + 3) = "A_Expr";
  *((_QWORD *)v493 + 4) = 6;
  v493[40] = 2;
  v9();
  v494 = *(int *)(v1 + 48);
  v495 = (_QWORD *)(v678 + v4 + 167 * v3);
  *v495 = 168;
  v496 = (char *)v495 + v494;
  *(_QWORD *)v496 = "column_ref";
  *((_QWORD *)v496 + 1) = 10;
  v496[16] = 2;
  *((_QWORD *)v496 + 3) = "ColumnRef";
  *((_QWORD *)v496 + 4) = 9;
  v496[40] = 2;
  v9();
  v497 = *(int *)(v1 + 48);
  v498 = (_QWORD *)(v678 + v4 + 168 * v3);
  *v498 = 169;
  v499 = (char *)v498 + v497;
  *(_QWORD *)v499 = "param_ref";
  *((_QWORD *)v499 + 1) = 9;
  v499[16] = 2;
  *((_QWORD *)v499 + 3) = "ParamRef";
  *((_QWORD *)v499 + 4) = 8;
  v499[40] = 2;
  v9();
  v500 = *(int *)(v1 + 48);
  v501 = (_QWORD *)(v678 + v4 + 169 * v3);
  *v501 = 170;
  v502 = (char *)v501 + v500;
  *(_QWORD *)v502 = "a_const";
  *((_QWORD *)v502 + 1) = 7;
  v502[16] = 2;
  *((_QWORD *)v502 + 3) = "A_Const";
  *((_QWORD *)v502 + 4) = 7;
  v502[40] = 2;
  v9();
  v503 = *(int *)(v1 + 48);
  v504 = (_QWORD *)(v678 + v4 + 170 * v3);
  *v504 = 171;
  v505 = (char *)v504 + v503;
  *(_QWORD *)v505 = "func_call";
  *((_QWORD *)v505 + 1) = 9;
  v505[16] = 2;
  *((_QWORD *)v505 + 3) = "FuncCall";
  *((_QWORD *)v505 + 4) = 8;
  v505[40] = 2;
  v9();
  v506 = *(int *)(v1 + 48);
  v507 = (_QWORD *)(v678 + v4 + 171 * v3);
  *v507 = 172;
  v508 = (char *)v507 + v506;
  *(_QWORD *)v508 = "a_star";
  *((_QWORD *)v508 + 1) = 6;
  v508[16] = 2;
  *((_QWORD *)v508 + 3) = "A_Star";
  *((_QWORD *)v508 + 4) = 6;
  v508[40] = 2;
  v9();
  v509 = *(int *)(v1 + 48);
  v510 = (_QWORD *)(v678 + v4 + 172 * v3);
  *v510 = 173;
  v511 = (char *)v510 + v509;
  *(_QWORD *)v511 = "a_indices";
  *((_QWORD *)v511 + 1) = 9;
  v511[16] = 2;
  *((_QWORD *)v511 + 3) = "A_Indices";
  *((_QWORD *)v511 + 4) = 9;
  v511[40] = 2;
  v9();
  v512 = *(int *)(v1 + 48);
  v513 = (_QWORD *)(v678 + v4 + 173 * v3);
  *v513 = 174;
  v514 = (char *)v513 + v512;
  *(_QWORD *)v514 = "a_indirection";
  *((_QWORD *)v514 + 1) = 13;
  v514[16] = 2;
  *((_QWORD *)v514 + 3) = "A_Indirection";
  *((_QWORD *)v514 + 4) = 13;
  v514[40] = 2;
  v9();
  v515 = *(int *)(v1 + 48);
  v516 = (_QWORD *)(v678 + v4 + 174 * v3);
  *v516 = 175;
  v517 = (char *)v516 + v515;
  *(_QWORD *)v517 = "a_array_expr";
  *((_QWORD *)v517 + 1) = 12;
  v517[16] = 2;
  *((_QWORD *)v517 + 3) = "A_ArrayExpr";
  *((_QWORD *)v517 + 4) = 11;
  v517[40] = 2;
  v9();
  v518 = *(int *)(v1 + 48);
  v519 = (_QWORD *)(v678 + v4 + 175 * v3);
  *v519 = 176;
  v520 = (char *)v519 + v518;
  *(_QWORD *)v520 = "res_target";
  *((_QWORD *)v520 + 1) = 10;
  v520[16] = 2;
  *((_QWORD *)v520 + 3) = "ResTarget";
  *((_QWORD *)v520 + 4) = 9;
  v520[40] = 2;
  v9();
  v521 = *(int *)(v1 + 48);
  v522 = (_QWORD *)(v678 + v4 + 176 * v3);
  *v522 = 177;
  v523 = (char *)v522 + v521;
  *(_QWORD *)v523 = "multi_assign_ref";
  *((_QWORD *)v523 + 1) = 16;
  v523[16] = 2;
  *((_QWORD *)v523 + 3) = "MultiAssignRef";
  *((_QWORD *)v523 + 4) = 14;
  v523[40] = 2;
  v9();
  v524 = *(int *)(v1 + 48);
  v525 = (_QWORD *)(v678 + v4 + 177 * v3);
  *v525 = 178;
  v526 = (char *)v525 + v524;
  *(_QWORD *)v526 = "type_cast";
  *((_QWORD *)v526 + 1) = 9;
  v526[16] = 2;
  *((_QWORD *)v526 + 3) = "TypeCast";
  *((_QWORD *)v526 + 4) = 8;
  v526[40] = 2;
  v9();
  v527 = *(int *)(v1 + 48);
  v528 = (_QWORD *)(v678 + v4 + 178 * v3);
  *v528 = 179;
  v529 = (char *)v528 + v527;
  *(_QWORD *)v529 = "collate_clause";
  *((_QWORD *)v529 + 1) = 14;
  v529[16] = 2;
  *((_QWORD *)v529 + 3) = "CollateClause";
  *((_QWORD *)v529 + 4) = 13;
  v529[40] = 2;
  v9();
  v530 = *(int *)(v1 + 48);
  v531 = (_QWORD *)(v678 + v4 + 179 * v3);
  *v531 = 180;
  v532 = (char *)v531 + v530;
  *(_QWORD *)v532 = "sort_by";
  *((_QWORD *)v532 + 1) = 7;
  v532[16] = 2;
  *((_QWORD *)v532 + 3) = "SortBy";
  *((_QWORD *)v532 + 4) = 6;
  v532[40] = 2;
  v9();
  v533 = *(int *)(v1 + 48);
  v534 = (_QWORD *)(v678 + v4 + 180 * v3);
  *v534 = 181;
  v535 = (char *)v534 + v533;
  *(_QWORD *)v535 = "window_def";
  *((_QWORD *)v535 + 1) = 10;
  v535[16] = 2;
  *((_QWORD *)v535 + 3) = "WindowDef";
  *((_QWORD *)v535 + 4) = 9;
  v535[40] = 2;
  v9();
  v536 = *(int *)(v1 + 48);
  v537 = (_QWORD *)(v678 + v4 + 181 * v3);
  *v537 = 182;
  v538 = (char *)v537 + v536;
  *(_QWORD *)v538 = "range_subselect";
  *((_QWORD *)v538 + 1) = 15;
  v538[16] = 2;
  *((_QWORD *)v538 + 3) = "RangeSubselect";
  *((_QWORD *)v538 + 4) = 14;
  v538[40] = 2;
  v9();
  v539 = *(int *)(v1 + 48);
  v540 = (_QWORD *)(v678 + v4 + 182 * v3);
  *v540 = 183;
  v541 = (char *)v540 + v539;
  *(_QWORD *)v541 = "range_function";
  *((_QWORD *)v541 + 1) = 14;
  v541[16] = 2;
  *((_QWORD *)v541 + 3) = "RangeFunction";
  *((_QWORD *)v541 + 4) = 13;
  v541[40] = 2;
  v9();
  v542 = *(int *)(v1 + 48);
  v543 = (_QWORD *)(v678 + v4 + 183 * v3);
  *v543 = 184;
  v544 = (char *)v543 + v542;
  *(_QWORD *)v544 = "range_table_sample";
  *((_QWORD *)v544 + 1) = 18;
  v544[16] = 2;
  *((_QWORD *)v544 + 3) = "RangeTableSample";
  *((_QWORD *)v544 + 4) = 16;
  v544[40] = 2;
  v9();
  v545 = *(int *)(v1 + 48);
  v546 = (_QWORD *)(v678 + v4 + 184 * v3);
  *v546 = 185;
  v547 = (char *)v546 + v545;
  *(_QWORD *)v547 = "range_table_func";
  *((_QWORD *)v547 + 1) = 16;
  v547[16] = 2;
  *((_QWORD *)v547 + 3) = "RangeTableFunc";
  *((_QWORD *)v547 + 4) = 14;
  v547[40] = 2;
  v9();
  v548 = *(int *)(v1 + 48);
  v549 = (_QWORD *)(v678 + v4 + 185 * v3);
  *v549 = 186;
  v550 = (char *)v549 + v548;
  *(_QWORD *)v550 = "range_table_func_col";
  *((_QWORD *)v550 + 1) = 20;
  v550[16] = 2;
  *((_QWORD *)v550 + 3) = "RangeTableFuncCol";
  *((_QWORD *)v550 + 4) = 17;
  v550[40] = 2;
  v9();
  v551 = *(int *)(v1 + 48);
  v552 = (_QWORD *)(v678 + v4 + 186 * v3);
  *v552 = 187;
  v553 = (char *)v552 + v551;
  *(_QWORD *)v553 = "type_name";
  *((_QWORD *)v553 + 1) = 9;
  v553[16] = 2;
  *((_QWORD *)v553 + 3) = "TypeName";
  *((_QWORD *)v553 + 4) = 8;
  v553[40] = 2;
  v9();
  v554 = *(int *)(v1 + 48);
  v555 = (_QWORD *)(v678 + v4 + 187 * v3);
  *v555 = 188;
  v556 = (char *)v555 + v554;
  *(_QWORD *)v556 = "column_def";
  *((_QWORD *)v556 + 1) = 10;
  v556[16] = 2;
  *((_QWORD *)v556 + 3) = "ColumnDef";
  *((_QWORD *)v556 + 4) = 9;
  v556[40] = 2;
  v9();
  v557 = *(int *)(v1 + 48);
  v558 = (_QWORD *)(v678 + v4 + 188 * v3);
  *v558 = 189;
  v559 = (char *)v558 + v557;
  *(_QWORD *)v559 = "index_elem";
  *((_QWORD *)v559 + 1) = 10;
  v559[16] = 2;
  *((_QWORD *)v559 + 3) = "IndexElem";
  *((_QWORD *)v559 + 4) = 9;
  v559[40] = 2;
  v9();
  v560 = *(int *)(v1 + 48);
  v561 = (_QWORD *)(v678 + v4 + 189 * v3);
  *v561 = 190;
  v562 = (char *)v561 + v560;
  *(_QWORD *)v562 = "constraint";
  *((_QWORD *)v562 + 1) = 10;
  v562[16] = 2;
  *((_QWORD *)v562 + 3) = "Constraint";
  *((_QWORD *)v562 + 4) = 10;
  v562[40] = 2;
  v9();
  v563 = *(int *)(v1 + 48);
  v564 = (_QWORD *)(v678 + v4 + 190 * v3);
  *v564 = 191;
  v565 = (char *)v564 + v563;
  *(_QWORD *)v565 = "def_elem";
  *((_QWORD *)v565 + 1) = 8;
  v565[16] = 2;
  *((_QWORD *)v565 + 3) = "DefElem";
  *((_QWORD *)v565 + 4) = 7;
  v565[40] = 2;
  v9();
  v566 = *(int *)(v1 + 48);
  v567 = (_QWORD *)(v678 + v4 + 191 * v3);
  *v567 = 192;
  v568 = (char *)v567 + v566;
  *(_QWORD *)v568 = "range_tbl_entry";
  *((_QWORD *)v568 + 1) = 15;
  v568[16] = 2;
  *((_QWORD *)v568 + 3) = "RangeTblEntry";
  *((_QWORD *)v568 + 4) = 13;
  v568[40] = 2;
  v9();
  v569 = *(int *)(v1 + 48);
  v570 = (_QWORD *)(v678 + v4 + 192 * v3);
  *v570 = 193;
  v571 = (char *)v570 + v569;
  *(_QWORD *)v571 = "range_tbl_function";
  *((_QWORD *)v571 + 1) = 18;
  v571[16] = 2;
  *((_QWORD *)v571 + 3) = "RangeTblFunction";
  *((_QWORD *)v571 + 4) = 16;
  v571[40] = 2;
  v9();
  v572 = *(int *)(v1 + 48);
  v573 = (_QWORD *)(v678 + v4 + 193 * v3);
  *v573 = 194;
  v574 = (char *)v573 + v572;
  *(_QWORD *)v574 = "table_sample_clause";
  *((_QWORD *)v574 + 1) = 19;
  v574[16] = 2;
  *((_QWORD *)v574 + 3) = "TableSampleClause";
  *((_QWORD *)v574 + 4) = 17;
  v574[40] = 2;
  v9();
  v575 = *(int *)(v1 + 48);
  v576 = (_QWORD *)(v678 + v4 + 194 * v3);
  *v576 = 195;
  v577 = (char *)v576 + v575;
  *(_QWORD *)v577 = "with_check_option";
  *((_QWORD *)v577 + 1) = 17;
  v577[16] = 2;
  *((_QWORD *)v577 + 3) = "WithCheckOption";
  *((_QWORD *)v577 + 4) = 15;
  v577[40] = 2;
  v9();
  v578 = *(int *)(v1 + 48);
  v579 = (_QWORD *)(v678 + v4 + 195 * v3);
  *v579 = 196;
  v580 = (char *)v579 + v578;
  *(_QWORD *)v580 = "sort_group_clause";
  *((_QWORD *)v580 + 1) = 17;
  v580[16] = 2;
  *((_QWORD *)v580 + 3) = "SortGroupClause";
  *((_QWORD *)v580 + 4) = 15;
  v580[40] = 2;
  v9();
  v581 = *(int *)(v1 + 48);
  v582 = (_QWORD *)(v678 + v4 + 196 * v3);
  *v582 = 197;
  v583 = (char *)v582 + v581;
  *(_QWORD *)v583 = "grouping_set";
  *((_QWORD *)v583 + 1) = 12;
  v583[16] = 2;
  *((_QWORD *)v583 + 3) = "GroupingSet";
  *((_QWORD *)v583 + 4) = 11;
  v583[40] = 2;
  v9();
  v584 = *(int *)(v1 + 48);
  v585 = (_QWORD *)(v678 + v4 + 197 * v3);
  *v585 = 198;
  v586 = (char *)v585 + v584;
  *(_QWORD *)v586 = "window_clause";
  *((_QWORD *)v586 + 1) = 13;
  v586[16] = 2;
  *((_QWORD *)v586 + 3) = "WindowClause";
  *((_QWORD *)v586 + 4) = 12;
  v586[40] = 2;
  v9();
  v587 = *(int *)(v1 + 48);
  v588 = (_QWORD *)(v678 + v4 + 198 * v3);
  *v588 = 199;
  v589 = (char *)v588 + v587;
  *(_QWORD *)v589 = "object_with_args";
  *((_QWORD *)v589 + 1) = 16;
  v589[16] = 2;
  *((_QWORD *)v589 + 3) = "ObjectWithArgs";
  *((_QWORD *)v589 + 4) = 14;
  v589[40] = 2;
  v9();
  v590 = *(int *)(v1 + 48);
  v591 = (_QWORD *)(v678 + v4 + 199 * v3);
  *v591 = 200;
  v592 = (char *)v591 + v590;
  *(_QWORD *)v592 = "access_priv";
  *((_QWORD *)v592 + 1) = 11;
  v592[16] = 2;
  *((_QWORD *)v592 + 3) = "AccessPriv";
  *((_QWORD *)v592 + 4) = 10;
  v592[40] = 2;
  v9();
  v593 = *(int *)(v1 + 48);
  v594 = (_QWORD *)(v678 + v4 + 200 * v3);
  *v594 = 201;
  v595 = (char *)v594 + v593;
  *(_QWORD *)v595 = "create_op_class_item";
  *((_QWORD *)v595 + 1) = 20;
  v595[16] = 2;
  *((_QWORD *)v595 + 3) = "CreateOpClassItem";
  *((_QWORD *)v595 + 4) = 17;
  v595[40] = 2;
  v9();
  v596 = *(int *)(v1 + 48);
  v597 = (_QWORD *)(v678 + v4 + 201 * v3);
  *v597 = 202;
  v598 = (char *)v597 + v596;
  *(_QWORD *)v598 = "table_like_clause";
  *((_QWORD *)v598 + 1) = 17;
  v598[16] = 2;
  *((_QWORD *)v598 + 3) = "TableLikeClause";
  *((_QWORD *)v598 + 4) = 15;
  v598[40] = 2;
  v9();
  v599 = *(int *)(v1 + 48);
  v600 = (_QWORD *)(v678 + v4 + 202 * v3);
  *v600 = 203;
  v601 = (char *)v600 + v599;
  *(_QWORD *)v601 = "function_parameter";
  *((_QWORD *)v601 + 1) = 18;
  v601[16] = 2;
  *((_QWORD *)v601 + 3) = "FunctionParameter";
  *((_QWORD *)v601 + 4) = 17;
  v601[40] = 2;
  v9();
  v602 = *(int *)(v1 + 48);
  v603 = (_QWORD *)(v678 + v4 + 203 * v3);
  *v603 = 204;
  v604 = (char *)v603 + v602;
  *(_QWORD *)v604 = "locking_clause";
  *((_QWORD *)v604 + 1) = 14;
  v604[16] = 2;
  *((_QWORD *)v604 + 3) = "LockingClause";
  *((_QWORD *)v604 + 4) = 13;
  v604[40] = 2;
  v9();
  v605 = *(int *)(v1 + 48);
  v606 = (_QWORD *)(v678 + v4 + 204 * v3);
  *v606 = 205;
  v607 = (char *)v606 + v605;
  *(_QWORD *)v607 = "row_mark_clause";
  *((_QWORD *)v607 + 1) = 15;
  v607[16] = 2;
  *((_QWORD *)v607 + 3) = "RowMarkClause";
  *((_QWORD *)v607 + 4) = 13;
  v607[40] = 2;
  v9();
  v608 = *(int *)(v1 + 48);
  v609 = (_QWORD *)(v678 + v4 + 205 * v3);
  *v609 = 206;
  v610 = (char *)v609 + v608;
  *(_QWORD *)v610 = "xml_serialize";
  *((_QWORD *)v610 + 1) = 13;
  v610[16] = 2;
  *((_QWORD *)v610 + 3) = "XmlSerialize";
  *((_QWORD *)v610 + 4) = 12;
  v610[40] = 2;
  v9();
  v611 = *(int *)(v1 + 48);
  v612 = (_QWORD *)(v678 + v4 + 206 * v3);
  *v612 = 207;
  v613 = (char *)v612 + v611;
  *(_QWORD *)v613 = "with_clause";
  *((_QWORD *)v613 + 1) = 11;
  v613[16] = 2;
  *((_QWORD *)v613 + 3) = "WithClause";
  *((_QWORD *)v613 + 4) = 10;
  v613[40] = 2;
  v9();
  v614 = *(int *)(v1 + 48);
  v615 = (_QWORD *)(v678 + v4 + 207 * v3);
  *v615 = 208;
  v616 = (char *)v615 + v614;
  *(_QWORD *)v616 = "infer_clause";
  *((_QWORD *)v616 + 1) = 12;
  v616[16] = 2;
  *((_QWORD *)v616 + 3) = "InferClause";
  *((_QWORD *)v616 + 4) = 11;
  v616[40] = 2;
  v9();
  v617 = *(int *)(v1 + 48);
  v618 = (_QWORD *)(v678 + v4 + 208 * v3);
  *v618 = 209;
  v619 = (char *)v618 + v617;
  *(_QWORD *)v619 = "on_conflict_clause";
  *((_QWORD *)v619 + 1) = 18;
  v619[16] = 2;
  *((_QWORD *)v619 + 3) = "OnConflictClause";
  *((_QWORD *)v619 + 4) = 16;
  v619[40] = 2;
  v9();
  v620 = *(int *)(v1 + 48);
  v621 = (_QWORD *)(v678 + v4 + 209 * v3);
  *v621 = 210;
  v622 = (char *)v621 + v620;
  *(_QWORD *)v622 = "common_table_expr";
  *((_QWORD *)v622 + 1) = 17;
  v622[16] = 2;
  *((_QWORD *)v622 + 3) = "CommonTableExpr";
  *((_QWORD *)v622 + 4) = 15;
  v622[40] = 2;
  v9();
  v623 = *(int *)(v1 + 48);
  v624 = (_QWORD *)(v678 + v4 + 210 * v3);
  *v624 = 211;
  v625 = (char *)v624 + v623;
  *(_QWORD *)v625 = "role_spec";
  *((_QWORD *)v625 + 1) = 9;
  v625[16] = 2;
  *((_QWORD *)v625 + 3) = "RoleSpec";
  *((_QWORD *)v625 + 4) = 8;
  v625[40] = 2;
  v9();
  v626 = *(int *)(v1 + 48);
  v627 = (_QWORD *)(v678 + v4 + 211 * v3);
  *v627 = 212;
  v628 = (char *)v627 + v626;
  *(_QWORD *)v628 = "trigger_transition";
  *((_QWORD *)v628 + 1) = 18;
  v628[16] = 2;
  *((_QWORD *)v628 + 3) = "TriggerTransition";
  *((_QWORD *)v628 + 4) = 17;
  v628[40] = 2;
  v9();
  v629 = *(int *)(v1 + 48);
  v630 = (_QWORD *)(v678 + v4 + 212 * v3);
  *v630 = 213;
  v631 = (char *)v630 + v629;
  *(_QWORD *)v631 = "partition_elem";
  *((_QWORD *)v631 + 1) = 14;
  v631[16] = 2;
  *((_QWORD *)v631 + 3) = "PartitionElem";
  *((_QWORD *)v631 + 4) = 13;
  v631[40] = 2;
  v9();
  v632 = *(int *)(v1 + 48);
  v633 = (_QWORD *)(v678 + v4 + 213 * v3);
  *v633 = 214;
  v634 = (char *)v633 + v632;
  *(_QWORD *)v634 = "partition_spec";
  *((_QWORD *)v634 + 1) = 14;
  v634[16] = 2;
  *((_QWORD *)v634 + 3) = "PartitionSpec";
  *((_QWORD *)v634 + 4) = 13;
  v634[40] = 2;
  v9();
  v635 = *(int *)(v1 + 48);
  v636 = (_QWORD *)(v678 + v4 + 214 * v3);
  *v636 = 215;
  v637 = (char *)v636 + v635;
  *(_QWORD *)v637 = "partition_bound_spec";
  *((_QWORD *)v637 + 1) = 20;
  v637[16] = 2;
  *((_QWORD *)v637 + 3) = "PartitionBoundSpec";
  *((_QWORD *)v637 + 4) = 18;
  v637[40] = 2;
  v9();
  v638 = *(int *)(v1 + 48);
  v639 = (_QWORD *)(v678 + v4 + 215 * v3);
  *v639 = 216;
  v640 = (char *)v639 + v638;
  *(_QWORD *)v640 = "partition_range_datum";
  *((_QWORD *)v640 + 1) = 21;
  v640[16] = 2;
  *((_QWORD *)v640 + 3) = "PartitionRangeDatum";
  *((_QWORD *)v640 + 4) = 19;
  v640[40] = 2;
  v9();
  v641 = *(int *)(v1 + 48);
  v642 = (_QWORD *)(v678 + v4 + 216 * v3);
  *v642 = 217;
  v643 = (char *)v642 + v641;
  *(_QWORD *)v643 = "partition_cmd";
  *((_QWORD *)v643 + 1) = 13;
  v643[16] = 2;
  *((_QWORD *)v643 + 3) = "PartitionCmd";
  *((_QWORD *)v643 + 4) = 12;
  v643[40] = 2;
  v9();
  v644 = *(int *)(v1 + 48);
  v645 = (_QWORD *)(v678 + v4 + 217 * v3);
  *v645 = 218;
  v646 = (char *)v645 + v644;
  *(_QWORD *)v646 = "vacuum_relation";
  *((_QWORD *)v646 + 1) = 15;
  v646[16] = 2;
  *((_QWORD *)v646 + 3) = "VacuumRelation";
  *((_QWORD *)v646 + 4) = 14;
  v646[40] = 2;
  v9();
  v647 = *(int *)(v1 + 48);
  v648 = (_QWORD *)(v678 + v4 + 218 * v3);
  *v648 = 219;
  v649 = (char *)v648 + v647;
  *(_QWORD *)v649 = "inline_code_block";
  *((_QWORD *)v649 + 1) = 17;
  v649[16] = 2;
  *((_QWORD *)v649 + 3) = "InlineCodeBlock";
  *((_QWORD *)v649 + 4) = 15;
  v649[40] = 2;
  v9();
  v650 = *(int *)(v1 + 48);
  v651 = (_QWORD *)(v678 + v4 + 219 * v3);
  *v651 = 220;
  v652 = (char *)v651 + v650;
  *(_QWORD *)v652 = "call_context";
  *((_QWORD *)v652 + 1) = 12;
  v652[16] = 2;
  *((_QWORD *)v652 + 3) = "CallContext";
  *((_QWORD *)v652 + 4) = 11;
  v652[40] = 2;
  v9();
  v653 = *(int *)(v1 + 48);
  v654 = (_QWORD *)(v678 + v4 + 220 * v3);
  *v654 = 221;
  v655 = (char *)v654 + v653;
  *(_QWORD *)v655 = "integer";
  *((_QWORD *)v655 + 1) = 7;
  v655[16] = 2;
  *((_QWORD *)v655 + 3) = "Integer";
  *((_QWORD *)v655 + 4) = 7;
  v655[40] = 2;
  v9();
  v656 = *(int *)(v1 + 48);
  v657 = (_QWORD *)(v678 + v4 + 221 * v3);
  *v657 = 222;
  v658 = (char *)v657 + v656;
  *(_QWORD *)v658 = "float";
  *((_QWORD *)v658 + 1) = 5;
  v658[16] = 2;
  *((_QWORD *)v658 + 3) = "Float";
  *((_QWORD *)v658 + 4) = 5;
  v658[40] = 2;
  v9();
  v659 = *(int *)(v1 + 48);
  v660 = (_QWORD *)(v678 + v4 + 222 * v3);
  *v660 = 223;
  v661 = (char *)v660 + v659;
  *(_QWORD *)v661 = "string";
  *((_QWORD *)v661 + 1) = 6;
  v661[16] = 2;
  *((_QWORD *)v661 + 3) = "String";
  *((_QWORD *)v661 + 4) = 6;
  v661[40] = 2;
  v9();
  v662 = *(int *)(v1 + 48);
  v663 = (_QWORD *)(v678 + v4 + 223 * v3);
  *v663 = 224;
  v664 = (char *)v663 + v662;
  *(_QWORD *)v664 = "bit_string";
  *((_QWORD *)v664 + 1) = 10;
  v664[16] = 2;
  *((_QWORD *)v664 + 3) = "BitString";
  *((_QWORD *)v664 + 4) = 9;
  v664[40] = 2;
  v9();
  v665 = *(int *)(v1 + 48);
  v666 = (_QWORD *)(v678 + v4 + 224 * v3);
  *v666 = 225;
  v667 = (char *)v666 + v665;
  *(_QWORD *)v667 = "null";
  *((_QWORD *)v667 + 1) = 4;
  v667[16] = 2;
  *((_QWORD *)v667 + 3) = "Null";
  *((_QWORD *)v667 + 4) = 4;
  v667[40] = 2;
  v9();
  v668 = *(int *)(v1 + 48);
  v669 = (_QWORD *)(v678 + v4 + 225 * v3);
  *v669 = 226;
  v670 = (char *)v669 + v668;
  *(_QWORD *)v670 = "list";
  *((_QWORD *)v670 + 1) = 4;
  v670[16] = 2;
  *((_QWORD *)v670 + 3) = "List";
  *((_QWORD *)v670 + 4) = 4;
  v670[40] = 2;
  v9();
  v671 = *(int *)(v1 + 48);
  v672 = (_QWORD *)(v678 + v4 + 226 * v3);
  *v672 = 227;
  v673 = (char *)v672 + v671;
  *(_QWORD *)v673 = "int_list";
  *((_QWORD *)v673 + 1) = 8;
  v673[16] = 2;
  *((_QWORD *)v673 + 3) = "IntList";
  *((_QWORD *)v673 + 4) = 7;
  v673[40] = 2;
  v9();
  v674 = *(int *)(v1 + 48);
  v675 = (_QWORD *)(v678 + v4 + 227 * v3);
  *v675 = 228;
  v676 = (char *)v675 + v674;
  *(_QWORD *)v676 = "oid_list";
  *((_QWORD *)v676 + 1) = 8;
  v676[16] = 2;
  *((_QWORD *)v676 + 3) = "OidList";
  *((_QWORD *)v676 + 4) = 7;
  v676[40] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_Alias._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_Alias._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "aliasname";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "colnames";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RangeVar._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RangeVar._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "catalogname";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "schemaname";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "relname";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "inh";
  *((_QWORD *)v15 + 1) = 3;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "relpersistence";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "alias";
  *((_QWORD *)v19 + 1) = 5;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "location";
  *((_QWORD *)v21 + 1) = 8;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v33;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TableFunc._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TableFunc._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_18DC0D9B0;
  v5 = v33 + v4;
  v6 = v33 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v33 + v4) = 1;
  *(_QWORD *)v6 = "ns_uris";
  *(_QWORD *)(v6 + 8) = 7;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "ns_names";
  *(_QWORD *)(v10 + 8) = 8;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "docexpr";
  *((_QWORD *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "rowexpr";
  *((_QWORD *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "colnames";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "coltypes";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "coltypmods";
  *((_QWORD *)v20 + 1) = 10;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "colcollations";
  *((_QWORD *)v22 + 1) = 13;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "colexprs";
  *(_QWORD *)(v23 + 8) = 8;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "coldefexprs";
  *((_QWORD *)v25 + 1) = 11;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "notnulls";
  *((_QWORD *)v27 + 1) = 8;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "ordinalitycol";
  *((_QWORD *)v29 + 1) = 13;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "location";
  *((_QWORD *)v31 + 1) = 8;
  v31[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v27;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_Var._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_Var._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_18DC0D900;
  v5 = v27 + v4;
  v6 = v27 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v27 + v4) = 1;
  *(_QWORD *)v6 = "xpr";
  *(_QWORD *)(v6 + 8) = 3;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v27 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "varno";
  *(_QWORD *)(v10 + 8) = 5;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v27 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "varattno";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v27 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "vartype";
  *((_QWORD *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v27 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "vartypmod";
  *((_QWORD *)v16 + 1) = 9;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v27 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "varcollid";
  *((_QWORD *)v18 + 1) = 9;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v27 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "varlevelsup";
  *((_QWORD *)v20 + 1) = 11;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v27 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "varnosyn";
  *((_QWORD *)v22 + 1) = 8;
  v22[16] = 2;
  v9();
  v23 = v27 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "varattnosyn";
  *(_QWORD *)(v23 + 8) = 11;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v27 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "location";
  *((_QWORD *)v25 + 1) = 8;
  v25[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_Param._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_Param._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "paramkind";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "paramid";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "paramtype";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "paramtypmod";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "paramcollid";
  *((_QWORD *)v19 + 1) = 11;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "location";
  *((_QWORD *)v21 + 1) = 8;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v42;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_Aggref._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_Aggref._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_18DC0D9C0;
  v5 = v42 + v4;
  v6 = v42 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v42 + v4) = 1;
  *(_QWORD *)v6 = "xpr";
  *(_QWORD *)(v6 + 8) = 3;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v42 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "aggfnoid";
  *(_QWORD *)(v10 + 8) = 8;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v42 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "aggtype";
  *((_QWORD *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v42 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "aggcollid";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v42 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "inputcollid";
  *((_QWORD *)v16 + 1) = 11;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v42 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "aggtranstype";
  *((_QWORD *)v18 + 1) = 12;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v42 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "aggargtypes";
  *((_QWORD *)v20 + 1) = 11;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v42 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "aggdirectargs";
  *((_QWORD *)v22 + 1) = 13;
  v22[16] = 2;
  v9();
  v23 = v42 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "args";
  *(_QWORD *)(v23 + 8) = 4;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v42 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "aggorder";
  *((_QWORD *)v25 + 1) = 8;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v42 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "aggdistinct";
  *((_QWORD *)v27 + 1) = 11;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v42 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "aggfilter";
  *((_QWORD *)v29 + 1) = 9;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v42 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "aggstar";
  *((_QWORD *)v31 + 1) = 7;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v42 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "aggvariadic";
  *((_QWORD *)v33 + 1) = 11;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v42 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "aggkind";
  *((_QWORD *)v35 + 1) = 7;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v42 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "agglevelsup";
  *((_QWORD *)v37 + 1) = 11;
  v37[16] = 2;
  v9();
  v38 = v42 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "aggsplit";
  *(_QWORD *)(v38 + 8) = 8;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v42 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "location";
  *((_QWORD *)v40 + 1) = 8;
  v40[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_GroupingFunc._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_GroupingFunc._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "args";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "refs";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "cols";
  *((_QWORD *)v15 + 1) = 4;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "agglevelsup";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "location";
  *((_QWORD *)v19 + 1) = 8;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v29;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_WindowFunc._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_WindowFunc._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_18DC0D950;
  v5 = v29 + v4;
  v6 = v29 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v29 + v4) = 1;
  *(_QWORD *)v6 = "xpr";
  *(_QWORD *)(v6 + 8) = 3;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "winfnoid";
  *(_QWORD *)(v10 + 8) = 8;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "wintype";
  *((_QWORD *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "wincollid";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "inputcollid";
  *((_QWORD *)v16 + 1) = 11;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "args";
  *((_QWORD *)v18 + 1) = 4;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "aggfilter";
  *((_QWORD *)v20 + 1) = 9;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "winref";
  *((_QWORD *)v22 + 1) = 6;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "winstar";
  *(_QWORD *)(v23 + 8) = 7;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "winagg";
  *((_QWORD *)v25 + 1) = 6;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "location";
  *((_QWORD *)v27 + 1) = 8;
  v27[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SubscriptingRef._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SubscriptingRef._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_18DC0D960;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "xpr";
  *(_QWORD *)(v6 + 8) = 3;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "refcontainertype";
  *(_QWORD *)(v10 + 8) = 16;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "refelemtype";
  *((_QWORD *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "reftypmod";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "refcollid";
  *((_QWORD *)v16 + 1) = 9;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "refupperindexpr";
  *((_QWORD *)v18 + 1) = 15;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "reflowerindexpr";
  *((_QWORD *)v20 + 1) = 15;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "refexpr";
  *((_QWORD *)v22 + 1) = 7;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "refassgnexpr";
  *(_QWORD *)(v23 + 8) = 12;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v27;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_FuncExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_FuncExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_18DC0D900;
  v5 = v27 + v4;
  v6 = v27 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v27 + v4) = 1;
  *(_QWORD *)v6 = "xpr";
  *(_QWORD *)(v6 + 8) = 3;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "funcid";
  *(_QWORD *)(v10 + 8) = 6;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "funcresulttype";
  *((_QWORD *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "funcretset";
  *((_QWORD *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "funcvariadic";
  *((_QWORD *)v16 + 1) = 12;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "funcformat";
  *((_QWORD *)v18 + 1) = 10;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "funccollid";
  *((_QWORD *)v20 + 1) = 10;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "inputcollid";
  *((_QWORD *)v22 + 1) = 11;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "args";
  *(_QWORD *)(v23 + 8) = 4;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "location";
  *((_QWORD *)v25 + 1) = 8;
  v25[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_NamedArgExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_NamedArgExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "arg";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "name";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "argnumber";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "location";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_OpExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_OpExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_18DC0D960;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "xpr";
  *(_QWORD *)(v6 + 8) = 3;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "opno";
  *(_QWORD *)(v10 + 8) = 4;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "opfuncid";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "opresulttype";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "opretset";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "opcollid";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "inputcollid";
  *((_QWORD *)v20 + 1) = 11;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "args";
  *((_QWORD *)v22 + 1) = 4;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "location";
  *(_QWORD *)(v23 + 8) = 8;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DistinctExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DistinctExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_18DC0D960;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "xpr";
  *(_QWORD *)(v6 + 8) = 3;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "opno";
  *(_QWORD *)(v10 + 8) = 4;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "opfuncid";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "opresulttype";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "opretset";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "opcollid";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "inputcollid";
  *((_QWORD *)v20 + 1) = 11;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "args";
  *((_QWORD *)v22 + 1) = 4;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "location";
  *(_QWORD *)(v23 + 8) = 8;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_NullIfExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_NullIfExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_18DC0D960;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "xpr";
  *(_QWORD *)(v6 + 8) = 3;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "opno";
  *(_QWORD *)(v10 + 8) = 4;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "opfuncid";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "opresulttype";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "opretset";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "opcollid";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "inputcollid";
  *((_QWORD *)v20 + 1) = 11;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "args";
  *((_QWORD *)v22 + 1) = 4;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "location";
  *(_QWORD *)(v23 + 8) = 8;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ScalarArrayOpExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ScalarArrayOpExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "opno";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "opfuncid";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "use_or";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "inputcollid";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "args";
  *((_QWORD *)v19 + 1) = 4;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "location";
  *((_QWORD *)v21 + 1) = 8;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_BoolExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_BoolExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "BOOLop";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "args";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "location";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v22;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SubLink._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SubLink._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_18DC0D930;
  v5 = v22 + v4;
  v6 = v22 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v22 + v4) = 1;
  *(_QWORD *)v6 = "xpr";
  *(_QWORD *)(v6 + 8) = 3;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "sub_link_type";
  *(_QWORD *)(v10 + 8) = 13;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "sub_link_id";
  *((_QWORD *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "testexpr";
  *((_QWORD *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "oper_name";
  *((_QWORD *)v16 + 1) = 9;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "subselect";
  *((_QWORD *)v18 + 1) = 9;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "location";
  *((_QWORD *)v20 + 1) = 8;
  v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v40;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SubPlan._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SubPlan._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_18DC0D8F0;
  v5 = v40 + v4;
  v6 = v40 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v40 + v4) = 1;
  *(_QWORD *)v6 = "xpr";
  *(_QWORD *)(v6 + 8) = 3;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "sub_link_type";
  *(_QWORD *)(v10 + 8) = 13;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "testexpr";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "param_ids";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "plan_id";
  *((_QWORD *)v16 + 1) = 7;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "plan_name";
  *((_QWORD *)v18 + 1) = 9;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "first_col_type";
  *((_QWORD *)v20 + 1) = 14;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "first_col_typmod";
  *((_QWORD *)v22 + 1) = 16;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "first_col_collation";
  *(_QWORD *)(v23 + 8) = 19;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "use_hash_table";
  *((_QWORD *)v25 + 1) = 14;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "unknown_eq_false";
  *((_QWORD *)v27 + 1) = 16;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "parallel_safe";
  *((_QWORD *)v29 + 1) = 13;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "set_param";
  *((_QWORD *)v31 + 1) = 9;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "par_param";
  *((_QWORD *)v33 + 1) = 9;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "args";
  *((_QWORD *)v35 + 1) = 4;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "startup_cost";
  *((_QWORD *)v37 + 1) = 12;
  v37[16] = 2;
  v9();
  v38 = v5 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "per_call_cost";
  *(_QWORD *)(v38 + 8) = 13;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlternativeSubPlan._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlternativeSubPlan._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "subplans";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_FieldSelect._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_FieldSelect._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "arg";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "fieldnum";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "resulttype";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "resulttypmod";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "resultcollid";
  *((_QWORD *)v19 + 1) = 12;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_FieldStore._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_FieldStore._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "arg";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "newvals";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "fieldnums";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "resulttype";
  *(_QWORD *)(v16 + 8) = 10;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RelabelType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RelabelType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "arg";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "resulttype";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "resulttypmod";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "resultcollid";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "relabelformat";
  *((_QWORD *)v19 + 1) = 13;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "location";
  *((_QWORD *)v21 + 1) = 8;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CoerceViaIO._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CoerceViaIO._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "arg";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "resulttype";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "resultcollid";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "coerceformat";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "location";
  *((_QWORD *)v19 + 1) = 8;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ArrayCoerceExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ArrayCoerceExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D980;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "arg";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "elemexpr";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "resulttype";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "resulttypmod";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "resultcollid";
  *((_QWORD *)v19 + 1) = 12;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "coerceformat";
  *((_QWORD *)v21 + 1) = 12;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "location";
  *((_QWORD *)v23 + 1) = 8;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ConvertRowtypeExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ConvertRowtypeExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "arg";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "resulttype";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "convertformat";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "location";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CollateExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CollateExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "arg";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "coll_oid";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "location";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CaseExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CaseExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "casetype";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "casecollid";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "arg";
  *((_QWORD *)v15 + 1) = 3;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "args";
  *((_QWORD *)v17 + 1) = 4;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "defresult";
  *((_QWORD *)v19 + 1) = 9;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "location";
  *((_QWORD *)v21 + 1) = 8;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CaseWhen._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CaseWhen._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "expr";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "result";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "location";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CaseTestExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CaseTestExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "type_id";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "type_mod";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "collation";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ArrayExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ArrayExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "array_typeid";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "array_collid";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "element_typeid";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "elements";
  *((_QWORD *)v17 + 1) = 8;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "multidims";
  *((_QWORD *)v19 + 1) = 9;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "location";
  *((_QWORD *)v21 + 1) = 8;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RowExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RowExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "args";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "row_typeid";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "row_format";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "colnames";
  *((_QWORD *)v17 + 1) = 8;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "location";
  *((_QWORD *)v19 + 1) = 8;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RowCompareExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RowCompareExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "rctype";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "opnos";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "opfamilies";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "inputcollids";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "largs";
  *((_QWORD *)v19 + 1) = 5;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "rargs";
  *((_QWORD *)v21 + 1) = 5;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CoalesceExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CoalesceExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "coalescetype";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "coalescecollid";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "args";
  *((_QWORD *)v15 + 1) = 4;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "location";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_MinMaxExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_MinMaxExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "minmaxtype";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "minmaxcollid";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "inputcollid";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "op";
  *((_QWORD *)v17 + 1) = 2;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "args";
  *((_QWORD *)v19 + 1) = 4;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "location";
  *((_QWORD *)v21 + 1) = 8;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SQLValueFunction._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SQLValueFunction._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "op";
  *(_QWORD *)(v11 + 8) = 2;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "type";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "typmod";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "location";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v27;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_XmlExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_XmlExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_18DC0D900;
  v5 = v27 + v4;
  v6 = v27 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v27 + v4) = 1;
  *(_QWORD *)v6 = "xpr";
  *(_QWORD *)(v6 + 8) = 3;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "op";
  *(_QWORD *)(v10 + 8) = 2;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "name";
  *((_QWORD *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "named_args";
  *((_QWORD *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "arg_names";
  *((_QWORD *)v16 + 1) = 9;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "args";
  *((_QWORD *)v18 + 1) = 4;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "xmloption";
  *((_QWORD *)v20 + 1) = 9;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "type";
  *((_QWORD *)v22 + 1) = 4;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "typmod";
  *(_QWORD *)(v23 + 8) = 6;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "location";
  *((_QWORD *)v25 + 1) = 8;
  v25[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_NullTest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_NullTest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "arg";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "nulltesttype";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "argisrow";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "location";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_BooleanTest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_BooleanTest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "arg";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "BOOLtesttype";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "location";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CoerceToDomain._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CoerceToDomain._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "arg";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "resulttype";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "resulttypmod";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "resultcollid";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "coercionformat";
  *((_QWORD *)v19 + 1) = 14;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "location";
  *((_QWORD *)v21 + 1) = 8;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CurrentOfExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CurrentOfExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "cvarno";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "cursor_name";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "cursor_param";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_NextValueExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_NextValueExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "seqid";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "type_id";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_InferenceElem._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_InferenceElem._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xpr";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "expr";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "infercollid";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "inferopclass";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v24;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TargetEntry._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TargetEntry._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_18DC0D980;
  v5 = v24 + v4;
  v6 = v24 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v24 + v4) = 1;
  *(_QWORD *)v6 = "xpr";
  *(_QWORD *)(v6 + 8) = 3;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "expr";
  *(_QWORD *)(v10 + 8) = 4;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "resno";
  *((_QWORD *)v12 + 1) = 5;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "resname";
  *((_QWORD *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "ressortgroupref";
  *((_QWORD *)v16 + 1) = 15;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "resorigtbl";
  *((_QWORD *)v18 + 1) = 10;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "resorigcol";
  *((_QWORD *)v20 + 1) = 10;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "resjunk";
  *((_QWORD *)v22 + 1) = 7;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v24;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_JoinExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_JoinExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_18DC0D980;
  v5 = v24 + v4;
  v6 = v24 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v24 + v4) = 1;
  *(_QWORD *)v6 = "jointype";
  *(_QWORD *)(v6 + 8) = 8;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "is_natural";
  *(_QWORD *)(v10 + 8) = 10;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "larg";
  *((_QWORD *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "rarg";
  *((_QWORD *)v14 + 1) = 4;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "using_clause";
  *((_QWORD *)v16 + 1) = 12;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "quals";
  *((_QWORD *)v18 + 1) = 5;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "alias";
  *((_QWORD *)v20 + 1) = 5;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "rtindex";
  *((_QWORD *)v22 + 1) = 7;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_FromExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_FromExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "fromlist";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "quals";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v24;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_OnConflictExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_OnConflictExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_18DC0D980;
  v5 = v24 + v4;
  v6 = v24 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v24 + v4) = 1;
  *(_QWORD *)v6 = "action";
  *(_QWORD *)(v6 + 8) = 6;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "arbiter_elems";
  *(_QWORD *)(v10 + 8) = 13;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "arbiter_where";
  *((_QWORD *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "constraint";
  *((_QWORD *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "on_conflict_set";
  *((_QWORD *)v16 + 1) = 15;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "on_conflict_where";
  *((_QWORD *)v18 + 1) = 17;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "excl_rel_index";
  *((_QWORD *)v20 + 1) = 14;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "excl_rel_tlist";
  *((_QWORD *)v22 + 1) = 14;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_IntoClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_IntoClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D980;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "rel";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "col_names";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "access_method";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "options";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "on_commit";
  *((_QWORD *)v17 + 1) = 9;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "table_space_name";
  *((_QWORD *)v19 + 1) = 16;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "view_query";
  *((_QWORD *)v21 + 1) = 10;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "skip_data";
  *((_QWORD *)v23 + 1) = 9;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RawStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RawStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "stmt";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "stmt_location";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "stmt_len";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  _QWORD *v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  _QWORD *v62;
  char *v63;
  _QWORD *v64;
  char *v65;
  _QWORD *v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  _QWORD *v73;
  char *v74;
  _QWORD *v75;
  char *v76;
  uint64_t v78;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_Query._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_Query._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v78 = swift_allocObject();
  *(_OWORD *)(v78 + 16) = xmmword_18DC0D9D0;
  v5 = v78 + v4;
  v6 = v78 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v78 + v4) = 1;
  *(_QWORD *)v6 = "command_type";
  *(_QWORD *)(v6 + 8) = 12;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF20];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v78 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "query_source";
  *(_QWORD *)(v10 + 8) = 12;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v78 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "can_set_tag";
  *((_QWORD *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v78 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "utility_stmt";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v78 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "result_relation";
  *((_QWORD *)v16 + 1) = 15;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v78 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "has_aggs";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v78 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "has_window_funcs";
  *((_QWORD *)v20 + 1) = 16;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v78 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "has_target_srfs";
  *((_QWORD *)v22 + 1) = 15;
  v22[16] = 2;
  *((_QWORD *)v22 + 3) = "hasTargetSRFs";
  *((_QWORD *)v22 + 4) = 13;
  v22[40] = 2;
  v9();
  v23 = v78 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "has_sub_links";
  *(_QWORD *)(v23 + 8) = 13;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v78 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "has_distinct_on";
  *((_QWORD *)v25 + 1) = 15;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v78 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "has_recursive";
  *((_QWORD *)v27 + 1) = 13;
  v27[16] = 2;
  v9();
  v28 = *(int *)(v1 + 48);
  v29 = (_QWORD *)(v78 + v4 + 11 * v3);
  *v29 = 12;
  v30 = (char *)v29 + v28;
  *(_QWORD *)v30 = "has_modifying_cte";
  *((_QWORD *)v30 + 1) = 17;
  v30[16] = 2;
  *((_QWORD *)v30 + 3) = "hasModifyingCTE";
  *((_QWORD *)v30 + 4) = 15;
  v30[40] = 2;
  v9();
  v31 = (_QWORD *)(v78 + v4 + 12 * v3);
  v32 = (char *)v31 + *(int *)(v1 + 48);
  *v31 = 13;
  *(_QWORD *)v32 = "has_for_update";
  *((_QWORD *)v32 + 1) = 14;
  v32[16] = 2;
  v9();
  v33 = (_QWORD *)(v78 + v4 + 13 * v3);
  v34 = (char *)v33 + *(int *)(v1 + 48);
  *v33 = 14;
  *(_QWORD *)v34 = "has_row_security";
  *((_QWORD *)v34 + 1) = 16;
  v34[16] = 2;
  v9();
  v35 = (_QWORD *)(v78 + v4 + 14 * v3);
  v36 = (char *)v35 + *(int *)(v1 + 48);
  *v35 = 15;
  *(_QWORD *)v36 = "cte_list";
  *((_QWORD *)v36 + 1) = 8;
  v36[16] = 2;
  v9();
  v37 = (_QWORD *)(v78 + v4 + 15 * v3);
  v38 = (char *)v37 + *(int *)(v1 + 48);
  *v37 = 16;
  *(_QWORD *)v38 = "rtable";
  *((_QWORD *)v38 + 1) = 6;
  v38[16] = 2;
  v9();
  v39 = v78 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v39 = "jointree";
  *(_QWORD *)(v39 + 8) = 8;
  *(_BYTE *)(v39 + 16) = 2;
  v9();
  v40 = (_QWORD *)(v78 + v4 + 17 * v3);
  v41 = (char *)v40 + *(int *)(v1 + 48);
  *v40 = 18;
  *(_QWORD *)v41 = "target_list";
  *((_QWORD *)v41 + 1) = 11;
  v41[16] = 2;
  v9();
  v42 = (_QWORD *)(v78 + v4 + 18 * v3);
  v43 = (char *)v42 + *(int *)(v1 + 48);
  *v42 = 19;
  *(_QWORD *)v43 = "override";
  *((_QWORD *)v43 + 1) = 8;
  v43[16] = 2;
  v9();
  v44 = (_QWORD *)(v78 + v4 + 19 * v3);
  v45 = (char *)v44 + *(int *)(v1 + 48);
  *v44 = 20;
  *(_QWORD *)v45 = "on_conflict";
  *((_QWORD *)v45 + 1) = 11;
  v45[16] = 2;
  v9();
  v46 = (_QWORD *)(v78 + v4 + 20 * v3);
  v47 = (char *)v46 + *(int *)(v1 + 48);
  *v46 = 21;
  *(_QWORD *)v47 = "returning_list";
  *((_QWORD *)v47 + 1) = 14;
  v47[16] = 2;
  v9();
  v48 = (_QWORD *)(v78 + v4 + 21 * v3);
  v49 = (char *)v48 + *(int *)(v1 + 48);
  *v48 = 22;
  *(_QWORD *)v49 = "group_clause";
  *((_QWORD *)v49 + 1) = 12;
  v49[16] = 2;
  v9();
  v50 = (_QWORD *)(v78 + v4 + 22 * v3);
  v51 = (char *)v50 + *(int *)(v1 + 48);
  *v50 = 23;
  *(_QWORD *)v51 = "grouping_sets";
  *((_QWORD *)v51 + 1) = 13;
  v51[16] = 2;
  v9();
  v52 = (_QWORD *)(v78 + v4 + 23 * v3);
  v53 = (char *)v52 + *(int *)(v1 + 48);
  *v52 = 24;
  *(_QWORD *)v53 = "having_qual";
  *((_QWORD *)v53 + 1) = 11;
  v53[16] = 2;
  v9();
  v54 = (_QWORD *)(v78 + v4 + 24 * v3);
  v55 = (char *)v54 + *(int *)(v1 + 48);
  *v54 = 25;
  *(_QWORD *)v55 = "window_clause";
  *((_QWORD *)v55 + 1) = 13;
  v55[16] = 2;
  v9();
  v56 = (_QWORD *)(v78 + v4 + 25 * v3);
  v57 = (char *)v56 + *(int *)(v1 + 48);
  *v56 = 26;
  *(_QWORD *)v57 = "distinct_clause";
  *((_QWORD *)v57 + 1) = 15;
  v57[16] = 2;
  v9();
  v58 = (_QWORD *)(v78 + v4 + 26 * v3);
  v59 = (char *)v58 + *(int *)(v1 + 48);
  *v58 = 27;
  *(_QWORD *)v59 = "sort_clause";
  *((_QWORD *)v59 + 1) = 11;
  v59[16] = 2;
  v9();
  v60 = (_QWORD *)(v78 + v4 + 27 * v3);
  v61 = (char *)v60 + *(int *)(v1 + 48);
  *v60 = 28;
  *(_QWORD *)v61 = "limit_offset";
  *((_QWORD *)v61 + 1) = 12;
  v61[16] = 2;
  v9();
  v62 = (_QWORD *)(v78 + v4 + 28 * v3);
  v63 = (char *)v62 + *(int *)(v1 + 48);
  *v62 = 29;
  *(_QWORD *)v63 = "limit_count";
  *((_QWORD *)v63 + 1) = 11;
  v63[16] = 2;
  v9();
  v64 = (_QWORD *)(v78 + v4 + 29 * v3);
  v65 = (char *)v64 + *(int *)(v1 + 48);
  *v64 = 30;
  *(_QWORD *)v65 = "limit_option";
  *((_QWORD *)v65 + 1) = 12;
  v65[16] = 2;
  v9();
  v66 = (_QWORD *)(v78 + v4 + 30 * v3);
  v67 = (char *)v66 + *(int *)(v1 + 48);
  *v66 = 31;
  *(_QWORD *)v67 = "row_marks";
  *((_QWORD *)v67 + 1) = 9;
  v67[16] = 2;
  v9();
  v68 = (_QWORD *)(v78 + v4 + 31 * v3);
  v69 = (char *)v68 + *(int *)(v1 + 48);
  *v68 = 32;
  *(_QWORD *)v69 = "set_operations";
  *((_QWORD *)v69 + 1) = 14;
  v69[16] = 2;
  v9();
  v70 = v78 + v4 + 32 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 32 * v3) = 33;
  *(_QWORD *)v70 = "constraint_deps";
  *(_QWORD *)(v70 + 8) = 15;
  *(_BYTE *)(v70 + 16) = 2;
  v9();
  v71 = (_QWORD *)(v78 + v4 + 33 * v3);
  v72 = (char *)v71 + *(int *)(v1 + 48);
  *v71 = 34;
  *(_QWORD *)v72 = "with_check_options";
  *((_QWORD *)v72 + 1) = 18;
  v72[16] = 2;
  v9();
  v73 = (_QWORD *)(v78 + v4 + 34 * v3);
  v74 = (char *)v73 + *(int *)(v1 + 48);
  *v73 = 35;
  *(_QWORD *)v74 = "stmt_location";
  *((_QWORD *)v74 + 1) = 13;
  v74[16] = 2;
  v9();
  v75 = (_QWORD *)(v78 + v4 + 35 * v3);
  v76 = (char *)v75 + *(int *)(v1 + 48);
  *v75 = 36;
  *(_QWORD *)v76 = "stmt_len";
  *((_QWORD *)v76 + 1) = 8;
  v76[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v22;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_InsertStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_InsertStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_18DC0D930;
  v5 = v22 + v4;
  v6 = v22 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v22 + v4) = 1;
  *(_QWORD *)v6 = "relation";
  *(_QWORD *)(v6 + 8) = 8;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "cols";
  *(_QWORD *)(v10 + 8) = 4;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "select_stmt";
  *((_QWORD *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "on_conflict_clause";
  *((_QWORD *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "returning_list";
  *((_QWORD *)v16 + 1) = 14;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "with_clause";
  *((_QWORD *)v18 + 1) = 11;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "override";
  *((_QWORD *)v20 + 1) = 8;
  v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DeleteStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DeleteStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "relation";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "using_clause";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "where_clause";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "returning_list";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "with_clause";
  *(_QWORD *)(v16 + 8) = 11;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_UpdateStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_UpdateStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "relation";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "target_list";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "where_clause";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "from_clause";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "returning_list";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "with_clause";
  *((_QWORD *)v19 + 1) = 11;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v44;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SelectStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SelectStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_18DC0D540;
  v5 = v44 + v4;
  v6 = v44 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v44 + v4) = 1;
  *(_QWORD *)v6 = "distinct_clause";
  *(_QWORD *)(v6 + 8) = 15;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF20];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v44 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "into_clause";
  *(_QWORD *)(v10 + 8) = 11;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v44 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "target_list";
  *((_QWORD *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v44 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "from_clause";
  *((_QWORD *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v44 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "where_clause";
  *((_QWORD *)v16 + 1) = 12;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v44 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "group_clause";
  *((_QWORD *)v18 + 1) = 12;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v44 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "having_clause";
  *((_QWORD *)v20 + 1) = 13;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v44 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "window_clause";
  *((_QWORD *)v22 + 1) = 13;
  v22[16] = 2;
  v9();
  v23 = v44 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "values_lists";
  *(_QWORD *)(v23 + 8) = 12;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v44 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "sort_clause";
  *((_QWORD *)v25 + 1) = 11;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v44 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "limit_offset";
  *((_QWORD *)v27 + 1) = 12;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v44 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "limit_count";
  *((_QWORD *)v29 + 1) = 11;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v44 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "limit_option";
  *((_QWORD *)v31 + 1) = 12;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v44 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "locking_clause";
  *((_QWORD *)v33 + 1) = 14;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v44 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "with_clause";
  *((_QWORD *)v35 + 1) = 11;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v44 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "op";
  *((_QWORD *)v37 + 1) = 2;
  v37[16] = 2;
  v9();
  v38 = v44 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "all";
  *(_QWORD *)(v38 + 8) = 3;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v44 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "larg";
  *((_QWORD *)v40 + 1) = 4;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v44 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "rarg";
  *((_QWORD *)v42 + 1) = 4;
  v42[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterTableStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterTableStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "relation";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "cmds";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "relkind";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "missing_ok";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v22;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterTableCmd._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterTableCmd._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_18DC0D930;
  v5 = v22 + v4;
  v6 = v22 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v22 + v4) = 1;
  *(_QWORD *)v6 = "subtype";
  *(_QWORD *)(v6 + 8) = 7;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "name";
  *(_QWORD *)(v10 + 8) = 4;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "num";
  *((_QWORD *)v12 + 1) = 3;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "newowner";
  *((_QWORD *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "def";
  *((_QWORD *)v16 + 1) = 3;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "behavior";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "missing_ok";
  *((_QWORD *)v20 + 1) = 10;
  v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v20;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterDomainStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterDomainStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18DC0D8D0;
  v5 = v20 + v4;
  v6 = v20 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v20 + v4) = 1;
  *(_QWORD *)v6 = "subtype";
  *(_QWORD *)(v6 + 8) = 7;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "type_name";
  *(_QWORD *)(v10 + 8) = 9;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "name";
  *((_QWORD *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "def";
  *((_QWORD *)v14 + 1) = 3;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "behavior";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "missing_ok";
  *((_QWORD *)v18 + 1) = 10;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SetOperationStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SetOperationStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D980;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "op";
  *(_QWORD *)(v7 + 8) = 2;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "all";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "larg";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "rarg";
  *((_QWORD *)v15 + 1) = 4;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "col_types";
  *((_QWORD *)v17 + 1) = 9;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "col_typmods";
  *((_QWORD *)v19 + 1) = 11;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "col_collations";
  *((_QWORD *)v21 + 1) = 14;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "group_clauses";
  *((_QWORD *)v23 + 1) = 13;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_GrantStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_GrantStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D980;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "is_grant";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "targtype";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "objtype";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "objects";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "privileges";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "grantees";
  *((_QWORD *)v19 + 1) = 8;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "grant_option";
  *((_QWORD *)v21 + 1) = 12;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "behavior";
  *((_QWORD *)v23 + 1) = 8;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_GrantRoleStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_GrantRoleStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "granted_roles";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "grantee_roles";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "is_grant";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "admin_opt";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "grantor";
  *((_QWORD *)v17 + 1) = 7;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "behavior";
  *((_QWORD *)v19 + 1) = 8;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterDefaultPrivilegesStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterDefaultPrivilegesStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "options";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "action";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ClusterStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ClusterStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "relation";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "indexname";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "options";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v24;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CopyStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CopyStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_18DC0D980;
  v5 = v24 + v4;
  v6 = v24 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v24 + v4) = 1;
  *(_QWORD *)v6 = "relation";
  *(_QWORD *)(v6 + 8) = 8;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "query";
  *(_QWORD *)(v10 + 8) = 5;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "attlist";
  *((_QWORD *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "is_from";
  *((_QWORD *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "is_program";
  *((_QWORD *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "filename";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "options";
  *((_QWORD *)v20 + 1) = 7;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "where_clause";
  *((_QWORD *)v22 + 1) = 12;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v31;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_18DC0D9E0;
  v5 = v31 + v4;
  v6 = v31 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v31 + v4) = 1;
  *(_QWORD *)v6 = "relation";
  *(_QWORD *)(v6 + 8) = 8;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v31 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "table_elts";
  *(_QWORD *)(v10 + 8) = 10;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v31 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "inh_relations";
  *((_QWORD *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v31 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "partbound";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v31 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "partspec";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v31 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "of_typename";
  *((_QWORD *)v18 + 1) = 11;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v31 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "constraints";
  *((_QWORD *)v20 + 1) = 11;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v31 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "options";
  *((_QWORD *)v22 + 1) = 7;
  v22[16] = 2;
  v9();
  v23 = v31 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "oncommit";
  *(_QWORD *)(v23 + 8) = 8;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v31 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "tablespacename";
  *((_QWORD *)v25 + 1) = 14;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v31 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "access_method";
  *((_QWORD *)v27 + 1) = 13;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v31 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "if_not_exists";
  *((_QWORD *)v29 + 1) = 13;
  v29[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DefineStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DefineStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "kind";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "oldstyle";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "defnames";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "args";
  *((_QWORD *)v15 + 1) = 4;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "definition";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "if_not_exists";
  *((_QWORD *)v19 + 1) = 13;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "replace";
  *((_QWORD *)v21 + 1) = 7;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DropStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DropStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "objects";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "remove_type";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "behavior";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "missing_ok";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "concurrent";
  *(_QWORD *)(v16 + 8) = 10;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TruncateStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TruncateStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "relations";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "restart_seqs";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "behavior";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CommentStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CommentStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "objtype";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "object";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "comment";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_FetchStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_FetchStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "direction";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "how_many";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "portalname";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "ismove";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  uint64_t v52;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_IndexStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_IndexStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_18DC0D9F0;
  v5 = v52 + v4;
  v6 = v52 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v52 + v4) = 1;
  *(_QWORD *)v6 = "idxname";
  *(_QWORD *)(v6 + 8) = 7;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v52 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "relation";
  *(_QWORD *)(v10 + 8) = 8;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v52 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "access_method";
  *((_QWORD *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v52 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "table_space";
  *((_QWORD *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v52 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "index_params";
  *((_QWORD *)v16 + 1) = 12;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v52 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "index_including_params";
  *((_QWORD *)v18 + 1) = 22;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v52 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "options";
  *((_QWORD *)v20 + 1) = 7;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v52 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "where_clause";
  *((_QWORD *)v22 + 1) = 12;
  v22[16] = 2;
  v9();
  v23 = v52 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "exclude_op_names";
  *(_QWORD *)(v23 + 8) = 16;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v52 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "idxcomment";
  *((_QWORD *)v25 + 1) = 10;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v52 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "index_oid";
  *((_QWORD *)v27 + 1) = 9;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v52 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "old_node";
  *((_QWORD *)v29 + 1) = 8;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v52 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "old_create_subid";
  *((_QWORD *)v31 + 1) = 16;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v52 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "old_first_relfilenode_subid";
  *((_QWORD *)v33 + 1) = 27;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v52 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "unique";
  *((_QWORD *)v35 + 1) = 6;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v52 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "primary";
  *((_QWORD *)v37 + 1) = 7;
  v37[16] = 2;
  v9();
  v38 = v52 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "isconstraint";
  *(_QWORD *)(v38 + 8) = 12;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v52 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "deferrable";
  *((_QWORD *)v40 + 1) = 10;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v52 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "initdeferred";
  *((_QWORD *)v42 + 1) = 12;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v52 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 20;
  *(_QWORD *)v44 = "transformed";
  *((_QWORD *)v44 + 1) = 11;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v52 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 21;
  *(_QWORD *)v46 = "concurrent";
  *((_QWORD *)v46 + 1) = 10;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v52 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 22;
  *(_QWORD *)v48 = "if_not_exists";
  *((_QWORD *)v48 + 1) = 13;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v52 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 23;
  *(_QWORD *)v50 = "reset_default_tblspc";
  *((_QWORD *)v50 + 1) = 20;
  v50[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateFunctionStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateFunctionStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "is_procedure";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "replace";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "funcname";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "parameters";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "return_type";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "options";
  *((_QWORD *)v19 + 1) = 7;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterFunctionStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterFunctionStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "objtype";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "func";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "actions";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v24;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RenameStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RenameStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_18DC0D980;
  v5 = v24 + v4;
  v6 = v24 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v24 + v4) = 1;
  *(_QWORD *)v6 = "rename_type";
  *(_QWORD *)(v6 + 8) = 11;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF20];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "relation_type";
  *(_QWORD *)(v10 + 8) = 13;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "relation";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "object";
  *((_QWORD *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "subname";
  *((_QWORD *)v16 + 1) = 7;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "newname";
  *((_QWORD *)v18 + 1) = 7;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "behavior";
  *((_QWORD *)v20 + 1) = 8;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "missing_ok";
  *((_QWORD *)v22 + 1) = 10;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RuleStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RuleStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "relation";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "rulename";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "where_clause";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "event";
  *((_QWORD *)v15 + 1) = 5;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "instead";
  *((_QWORD *)v17 + 1) = 7;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "actions";
  *((_QWORD *)v19 + 1) = 7;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "replace";
  *((_QWORD *)v21 + 1) = 7;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_NotifyStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_NotifyStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "conditionname";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "payload";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TransactionStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TransactionStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "kind";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "options";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "savepoint_name";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "gid";
  *((_QWORD *)v15 + 1) = 3;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "chain";
  *(_QWORD *)(v16 + 8) = 5;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ViewStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ViewStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "view";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "aliases";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "query";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "replace";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "options";
  *((_QWORD *)v17 + 1) = 7;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "with_check_option";
  *((_QWORD *)v19 + 1) = 17;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateDomainStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateDomainStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "domainname";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "type_name";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "coll_clause";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "constraints";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreatedbStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreatedbStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "dbname";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "options";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DropdbStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DropdbStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "dbname";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "missing_ok";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "options";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_VacuumStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_VacuumStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "options";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "rels";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "is_vacuumcmd";
  *(_QWORD *)(v12 + 8) = 12;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ExplainStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ExplainStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "query";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "options";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateTableAsStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateTableAsStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "query";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "into";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "relkind";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "is_select_into";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "if_not_exists";
  *(_QWORD *)(v16 + 8) = 13;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateSeqStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateSeqStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "sequence";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "options";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "owner_id";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "for_identity";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "if_not_exists";
  *(_QWORD *)(v16 + 8) = 13;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterSeqStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterSeqStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "sequence";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "options";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "for_identity";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "missing_ok";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_VariableSetStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_VariableSetStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "kind";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "name";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "args";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "is_local";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v35;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateTrigStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateTrigStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_18DC0DA00;
  v5 = v35 + v4;
  v6 = v35 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v35 + v4) = 1;
  *(_QWORD *)v6 = "trigname";
  *(_QWORD *)(v6 + 8) = 8;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v35 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "relation";
  *(_QWORD *)(v10 + 8) = 8;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v35 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "funcname";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v35 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "args";
  *((_QWORD *)v14 + 1) = 4;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v35 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "row";
  *((_QWORD *)v16 + 1) = 3;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v35 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "timing";
  *((_QWORD *)v18 + 1) = 6;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v35 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "events";
  *((_QWORD *)v20 + 1) = 6;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v35 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "columns";
  *((_QWORD *)v22 + 1) = 7;
  v22[16] = 2;
  v9();
  v23 = v35 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "when_clause";
  *(_QWORD *)(v23 + 8) = 11;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v35 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "isconstraint";
  *((_QWORD *)v25 + 1) = 12;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v35 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "transition_rels";
  *((_QWORD *)v27 + 1) = 15;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v35 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "deferrable";
  *((_QWORD *)v29 + 1) = 10;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v35 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "initdeferred";
  *((_QWORD *)v31 + 1) = 12;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v35 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "constrrel";
  *((_QWORD *)v33 + 1) = 9;
  v33[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreatePLangStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreatePLangStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "replace";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "plname";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "plhandler";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "plinline";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "plvalidator";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "pltrusted";
  *((_QWORD *)v19 + 1) = 9;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateRoleStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateRoleStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "stmt_type";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "role";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "options";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterRoleStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterRoleStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "role";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "options";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "action";
  *(_QWORD *)(v12 + 8) = 6;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DropRoleStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DropRoleStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "roles";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "missing_ok";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_LockStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_LockStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "relations";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "mode";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "nowait";
  *(_QWORD *)(v12 + 8) = 6;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ConstraintsSetStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ConstraintsSetStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "constraints";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "deferred";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ReindexStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ReindexStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "kind";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "relation";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "name";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "options";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "concurrent";
  *(_QWORD *)(v16 + 8) = 10;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateSchemaStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateSchemaStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "schemaname";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "authrole";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "schema_elts";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "if_not_exists";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterDatabaseStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterDatabaseStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "dbname";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "options";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterDatabaseSetStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterDatabaseSetStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "dbname";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "setstmt";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterRoleSetStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterRoleSetStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "role";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "database";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "setstmt";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateConversionStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateConversionStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "conversion_name";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "for_encoding_name";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "to_encoding_name";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "func_name";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "def";
  *(_QWORD *)(v16 + 8) = 3;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateCastStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateCastStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "sourcetype";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "targettype";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "func";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "context";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "inout";
  *(_QWORD *)(v16 + 8) = 5;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateOpClassStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateOpClassStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "opclassname";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "opfamilyname";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "amname";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "datatype";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "items";
  *((_QWORD *)v17 + 1) = 5;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "is_default";
  *((_QWORD *)v19 + 1) = 10;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateOpFamilyStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateOpFamilyStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "opfamilyname";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "amname";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterOpFamilyStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterOpFamilyStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "opfamilyname";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "amname";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "is_drop";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "items";
  *((_QWORD *)v15 + 1) = 5;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_PrepareStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_PrepareStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "name";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "argtypes";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "query";
  *(_QWORD *)(v12 + 8) = 5;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ExecuteStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ExecuteStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "name";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "params";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DeclareCursorStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DeclareCursorStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "portalname";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "options";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "query";
  *(_QWORD *)(v12 + 8) = 5;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateTableSpaceStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateTableSpaceStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "tablespacename";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "owner";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "location";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "options";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DropTableSpaceStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DropTableSpaceStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "tablespacename";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "missing_ok";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterObjectDependsStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterObjectDependsStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "object_type";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "relation";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "object";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "extname";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "remove";
  *(_QWORD *)(v16 + 8) = 6;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterObjectSchemaStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterObjectSchemaStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "object_type";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "relation";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "object";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "newschema";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "missing_ok";
  *(_QWORD *)(v16 + 8) = 10;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterOwnerStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterOwnerStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "object_type";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "relation";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "object";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "newowner";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterOperatorStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterOperatorStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "opername";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "options";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DropOwnedStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DropOwnedStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "roles";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "behavior";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ReassignOwnedStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ReassignOwnedStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "roles";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "newrole";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CompositeTypeStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CompositeTypeStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "typevar";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "coldeflist";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterEnumStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterEnumStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "type_name";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "old_val";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "new_val";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "new_val_neighbor";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "new_val_is_after";
  *((_QWORD *)v17 + 1) = 16;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "skip_if_new_val_exists";
  *((_QWORD *)v19 + 1) = 22;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterTSDictionaryStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterTSDictionaryStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "dictname";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "options";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterTSConfigurationStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterTSConfigurationStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "kind";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "cfgname";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "tokentype";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "dicts";
  *((_QWORD *)v15 + 1) = 5;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "override";
  *((_QWORD *)v17 + 1) = 8;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "replace";
  *((_QWORD *)v19 + 1) = 7;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "missing_ok";
  *((_QWORD *)v21 + 1) = 10;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateFdwStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateFdwStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "fdwname";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "func_options";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "options";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterFdwStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterFdwStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "fdwname";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "func_options";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "options";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateForeignServerStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateForeignServerStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "servername";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "servertype";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "version";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "fdwname";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "if_not_exists";
  *((_QWORD *)v17 + 1) = 13;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "options";
  *((_QWORD *)v19 + 1) = 7;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterForeignServerStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterForeignServerStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "servername";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "version";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "options";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "has_version";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateUserMappingStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateUserMappingStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "user";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "servername";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "if_not_exists";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "options";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterUserMappingStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterUserMappingStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "user";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "servername";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "options";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DropUserMappingStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DropUserMappingStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "user";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "servername";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "missing_ok";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterTableSpaceOptionsStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterTableSpaceOptionsStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "tablespacename";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "options";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "is_reset";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterTableMoveAllStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterTableMoveAllStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "orig_tablespacename";
  *(_QWORD *)(v7 + 8) = 19;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "objtype";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "roles";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "new_tablespacename";
  *((_QWORD *)v15 + 1) = 18;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "nowait";
  *(_QWORD *)(v16 + 8) = 6;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SecLabelStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SecLabelStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "objtype";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "object";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "provider";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "label";
  *((_QWORD *)v15 + 1) = 5;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateForeignTableStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateForeignTableStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "base_stmt";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  *(_QWORD *)(v7 + 24) = "base";
  *(_QWORD *)(v7 + 32) = 4;
  *(_BYTE *)(v7 + 40) = 2;
  v8 = *MEMORY[0x1E0D3EF10];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "servername";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "options";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ImportForeignSchemaStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ImportForeignSchemaStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "server_name";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "remote_schema";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "local_schema";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "list_type";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "table_list";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "options";
  *((_QWORD *)v19 + 1) = 7;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateExtensionStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateExtensionStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "extname";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "if_not_exists";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "options";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterExtensionStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterExtensionStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "extname";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "options";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterExtensionContentsStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterExtensionContentsStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "extname";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "action";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "objtype";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "object";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateEventTrigStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateEventTrigStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "trigname";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "eventname";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "whenclause";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "funcname";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterEventTrigStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterEventTrigStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "trigname";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "tgenabled";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RefreshMatViewStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RefreshMatViewStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "concurrent";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "skip_data";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "relation";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ReplicaIdentityStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ReplicaIdentityStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "identity_type";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "name";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreatePolicyStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreatePolicyStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "policy_name";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "table";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "cmd_name";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "permissive";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "roles";
  *((_QWORD *)v17 + 1) = 5;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "qual";
  *((_QWORD *)v19 + 1) = 4;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "with_check";
  *((_QWORD *)v21 + 1) = 10;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterPolicyStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterPolicyStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "policy_name";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "table";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "roles";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "qual";
  *((_QWORD *)v15 + 1) = 4;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "with_check";
  *(_QWORD *)(v16 + 8) = 10;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateTransformStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateTransformStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "replace";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "type_name";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "lang";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "fromsql";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "tosql";
  *(_QWORD *)(v16 + 8) = 5;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateAmStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateAmStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "amname";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "handler_name";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "amtype";
  *(_QWORD *)(v12 + 8) = 6;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreatePublicationStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreatePublicationStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "pubname";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "options";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "tables";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "for_all_tables";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterPublicationStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterPublicationStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "pubname";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "options";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "tables";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "for_all_tables";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "table_action";
  *(_QWORD *)(v16 + 8) = 12;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateSubscriptionStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateSubscriptionStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "subname";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "conninfo";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "publication";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "options";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterSubscriptionStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterSubscriptionStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "kind";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "subname";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "conninfo";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "publication";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "options";
  *(_QWORD *)(v16 + 8) = 7;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DropSubscriptionStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DropSubscriptionStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "subname";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "missing_ok";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "behavior";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateStatsStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateStatsStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "defnames";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "stat_types";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "exprs";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "relations";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "stxcomment";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "if_not_exists";
  *((_QWORD *)v19 + 1) = 13;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CallStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CallStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "funccall";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "funcexpr";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterStatsStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterStatsStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "defnames";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "stxstattarget";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "missing_ok";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_A_Expr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_A_Expr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "kind";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "name";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "lexpr";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "rexpr";
  *((_QWORD *)v15 + 1) = 5;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "location";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ColumnRef._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ColumnRef._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "fields";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "location";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ParamRef._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ParamRef._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "number";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "location";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_A_Const._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_A_Const._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "val";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "location";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_FuncCall._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_FuncCall._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D900;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "funcname";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "args";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "agg_order";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "agg_filter";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "agg_within_group";
  *((_QWORD *)v17 + 1) = 16;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "agg_star";
  *((_QWORD *)v19 + 1) = 8;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "agg_distinct";
  *((_QWORD *)v21 + 1) = 12;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "func_variadic";
  *((_QWORD *)v23 + 1) = 13;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 9;
  *(_QWORD *)v24 = "over";
  *(_QWORD *)(v24 + 8) = 4;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 10;
  *(_QWORD *)v26 = "location";
  *((_QWORD *)v26 + 1) = 8;
  v26[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_A_Indices._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_A_Indices._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "is_slice";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "lidx";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "uidx";
  *(_QWORD *)(v12 + 8) = 4;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_A_Indirection._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_A_Indirection._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "arg";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "indirection";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_A_ArrayExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_A_ArrayExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "elements";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "location";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ResTarget._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ResTarget._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "name";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "indirection";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "val";
  *((_QWORD *)v13 + 1) = 3;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "location";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_MultiAssignRef._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_MultiAssignRef._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "source";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "colno";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "ncolumns";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TypeCast._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TypeCast._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "arg";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "type_name";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "location";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CollateClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CollateClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "arg";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "collname";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "location";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SortBy._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SortBy._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "node";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "sortby_dir";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "sortby_nulls";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "use_op";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "location";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v24;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_WindowDef._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_WindowDef._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_18DC0D980;
  v5 = v24 + v4;
  v6 = v24 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v24 + v4) = 1;
  *(_QWORD *)v6 = "name";
  *(_QWORD *)(v6 + 8) = 4;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "refname";
  *(_QWORD *)(v10 + 8) = 7;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "partition_clause";
  *((_QWORD *)v12 + 1) = 16;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "order_clause";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "frame_options";
  *((_QWORD *)v16 + 1) = 13;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "start_offset";
  *((_QWORD *)v18 + 1) = 12;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "end_offset";
  *((_QWORD *)v20 + 1) = 10;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "location";
  *((_QWORD *)v22 + 1) = 8;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RangeSubselect._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RangeSubselect._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "lateral";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "subquery";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "alias";
  *(_QWORD *)(v12 + 8) = 5;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RangeFunction._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RangeFunction._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "lateral";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ordinality";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "is_rowsfrom";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "functions";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "alias";
  *((_QWORD *)v17 + 1) = 5;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "coldeflist";
  *((_QWORD *)v19 + 1) = 10;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RangeTableSample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RangeTableSample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "relation";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "method";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "args";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "repeatable";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "location";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RangeTableFunc._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RangeTableFunc._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "lateral";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "docexpr";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "rowexpr";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "namespaces";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "columns";
  *((_QWORD *)v17 + 1) = 7;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "alias";
  *((_QWORD *)v19 + 1) = 5;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "location";
  *((_QWORD *)v21 + 1) = 8;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RangeTableFuncCol._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RangeTableFuncCol._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "colname";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "type_name";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "for_ordinality";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "is_not_null";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "colexpr";
  *((_QWORD *)v17 + 1) = 7;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "coldefexpr";
  *((_QWORD *)v19 + 1) = 10;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "location";
  *((_QWORD *)v21 + 1) = 8;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v24;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TypeName._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TypeName._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_18DC0D980;
  v5 = v24 + v4;
  v6 = v24 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v24 + v4) = 1;
  *(_QWORD *)v6 = "names";
  *(_QWORD *)(v6 + 8) = 5;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "type_oid";
  *(_QWORD *)(v10 + 8) = 8;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "setof";
  *((_QWORD *)v12 + 1) = 5;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "pct_type";
  *((_QWORD *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "typmods";
  *((_QWORD *)v16 + 1) = 7;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "typemod";
  *((_QWORD *)v18 + 1) = 7;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "array_bounds";
  *((_QWORD *)v20 + 1) = 12;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "location";
  *((_QWORD *)v22 + 1) = 8;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v40;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ColumnDef._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ColumnDef._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_18DC0D8F0;
  v5 = v40 + v4;
  v6 = v40 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v40 + v4) = 1;
  *(_QWORD *)v6 = "colname";
  *(_QWORD *)(v6 + 8) = 7;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "type_name";
  *(_QWORD *)(v10 + 8) = 9;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "inhcount";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "is_local";
  *((_QWORD *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "is_not_null";
  *((_QWORD *)v16 + 1) = 11;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "is_from_type";
  *((_QWORD *)v18 + 1) = 12;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "storage";
  *((_QWORD *)v20 + 1) = 7;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "raw_default";
  *((_QWORD *)v22 + 1) = 11;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "cooked_default";
  *(_QWORD *)(v23 + 8) = 14;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "identity";
  *((_QWORD *)v25 + 1) = 8;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "identity_sequence";
  *((_QWORD *)v27 + 1) = 17;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "generated";
  *((_QWORD *)v29 + 1) = 9;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "coll_clause";
  *((_QWORD *)v31 + 1) = 11;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "coll_oid";
  *((_QWORD *)v33 + 1) = 8;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "constraints";
  *((_QWORD *)v35 + 1) = 11;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "fdwoptions";
  *((_QWORD *)v37 + 1) = 10;
  v37[16] = 2;
  v9();
  v38 = v5 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "location";
  *(_QWORD *)(v38 + 8) = 8;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_IndexElem._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_IndexElem._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D980;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "name";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "expr";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "indexcolname";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "collation";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "opclass";
  *((_QWORD *)v17 + 1) = 7;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "opclassopts";
  *((_QWORD *)v19 + 1) = 11;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "ordering";
  *((_QWORD *)v21 + 1) = 8;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "nulls_ordering";
  *((_QWORD *)v23 + 1) = 14;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v62;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_Constraint._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_Constraint._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v62 = swift_allocObject();
  *(_OWORD *)(v62 + 16) = xmmword_18DC0DA10;
  v5 = v62 + v4;
  v6 = v62 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v62 + v4) = 1;
  *(_QWORD *)v6 = "contype";
  *(_QWORD *)(v6 + 8) = 7;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v62 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "conname";
  *(_QWORD *)(v10 + 8) = 7;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v62 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "deferrable";
  *((_QWORD *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v62 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "initdeferred";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v62 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "location";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v62 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "is_no_inherit";
  *((_QWORD *)v18 + 1) = 13;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v62 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "raw_expr";
  *((_QWORD *)v20 + 1) = 8;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v62 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "cooked_expr";
  *((_QWORD *)v22 + 1) = 11;
  v22[16] = 2;
  v9();
  v23 = v62 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "generated_when";
  *(_QWORD *)(v23 + 8) = 14;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v62 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "keys";
  *((_QWORD *)v25 + 1) = 4;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v62 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "including";
  *((_QWORD *)v27 + 1) = 9;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v62 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "exclusions";
  *((_QWORD *)v29 + 1) = 10;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v62 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "options";
  *((_QWORD *)v31 + 1) = 7;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v62 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "indexname";
  *((_QWORD *)v33 + 1) = 9;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v62 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "indexspace";
  *((_QWORD *)v35 + 1) = 10;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v62 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "reset_default_tblspc";
  *((_QWORD *)v37 + 1) = 20;
  v37[16] = 2;
  v9();
  v38 = v62 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "access_method";
  *(_QWORD *)(v38 + 8) = 13;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v62 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "where_clause";
  *((_QWORD *)v40 + 1) = 12;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v62 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "pktable";
  *((_QWORD *)v42 + 1) = 7;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v62 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 20;
  *(_QWORD *)v44 = "fk_attrs";
  *((_QWORD *)v44 + 1) = 8;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v62 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 21;
  *(_QWORD *)v46 = "pk_attrs";
  *((_QWORD *)v46 + 1) = 8;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v62 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 22;
  *(_QWORD *)v48 = "fk_matchtype";
  *((_QWORD *)v48 + 1) = 12;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v62 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 23;
  *(_QWORD *)v50 = "fk_upd_action";
  *((_QWORD *)v50 + 1) = 13;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v62 + v4 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 24;
  *(_QWORD *)v52 = "fk_del_action";
  *((_QWORD *)v52 + 1) = 13;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v62 + v4 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 25;
  *(_QWORD *)v54 = "old_conpfeqop";
  *((_QWORD *)v54 + 1) = 13;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v62 + v4 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 26;
  *(_QWORD *)v56 = "old_pktable_oid";
  *((_QWORD *)v56 + 1) = 15;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v62 + v4 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 27;
  *(_QWORD *)v58 = "skip_validation";
  *((_QWORD *)v58 + 1) = 15;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v62 + v4 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 28;
  *(_QWORD *)v60 = "initially_valid";
  *((_QWORD *)v60 + 1) = 15;
  v60[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DefElem._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DefElem._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "defnamespace";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "defname";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "arg";
  *((_QWORD *)v13 + 1) = 3;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "defaction";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "location";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  _QWORD *v74;
  char *v75;
  uint64_t v77;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RangeTblEntry._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RangeTblEntry._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v77 = swift_allocObject();
  *(_OWORD *)(v77 + 16) = xmmword_18DC0D9D0;
  v5 = v77 + v4;
  v6 = v77 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v77 + v4) = 1;
  *(_QWORD *)v6 = "rtekind";
  *(_QWORD *)(v6 + 8) = 7;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v77 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "relid";
  *(_QWORD *)(v10 + 8) = 5;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v77 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "relkind";
  *((_QWORD *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v77 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "rellockmode";
  *((_QWORD *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v77 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "tablesample";
  *((_QWORD *)v16 + 1) = 11;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v77 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "subquery";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v77 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "security_barrier";
  *((_QWORD *)v20 + 1) = 16;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v77 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "jointype";
  *((_QWORD *)v22 + 1) = 8;
  v22[16] = 2;
  v9();
  v23 = v77 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "joinmergedcols";
  *(_QWORD *)(v23 + 8) = 14;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v77 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "joinaliasvars";
  *((_QWORD *)v25 + 1) = 13;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v77 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "joinleftcols";
  *((_QWORD *)v27 + 1) = 12;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v77 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "joinrightcols";
  *((_QWORD *)v29 + 1) = 13;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v77 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "functions";
  *((_QWORD *)v31 + 1) = 9;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v77 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "funcordinality";
  *((_QWORD *)v33 + 1) = 14;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v77 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "tablefunc";
  *((_QWORD *)v35 + 1) = 9;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v77 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "values_lists";
  *((_QWORD *)v37 + 1) = 12;
  v37[16] = 2;
  v9();
  v38 = v77 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "ctename";
  *(_QWORD *)(v38 + 8) = 7;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v77 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "ctelevelsup";
  *((_QWORD *)v40 + 1) = 11;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v77 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "self_reference";
  *((_QWORD *)v42 + 1) = 14;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v77 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 20;
  *(_QWORD *)v44 = "coltypes";
  *((_QWORD *)v44 + 1) = 8;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v77 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 21;
  *(_QWORD *)v46 = "coltypmods";
  *((_QWORD *)v46 + 1) = 10;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v77 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 22;
  *(_QWORD *)v48 = "colcollations";
  *((_QWORD *)v48 + 1) = 13;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v77 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 23;
  *(_QWORD *)v50 = "enrname";
  *((_QWORD *)v50 + 1) = 7;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v77 + v4 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 24;
  *(_QWORD *)v52 = "enrtuples";
  *((_QWORD *)v52 + 1) = 9;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v77 + v4 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 25;
  *(_QWORD *)v54 = "alias";
  *((_QWORD *)v54 + 1) = 5;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v77 + v4 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 26;
  *(_QWORD *)v56 = "eref";
  *((_QWORD *)v56 + 1) = 4;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v77 + v4 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 27;
  *(_QWORD *)v58 = "lateral";
  *((_QWORD *)v58 + 1) = 7;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v77 + v4 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 28;
  *(_QWORD *)v60 = "inh";
  *((_QWORD *)v60 + 1) = 3;
  v60[16] = 2;
  v9();
  v61 = (_QWORD *)(v77 + v4 + 28 * v3);
  v62 = (char *)v61 + *(int *)(v1 + 48);
  *v61 = 29;
  *(_QWORD *)v62 = "in_from_cl";
  *((_QWORD *)v62 + 1) = 10;
  v62[16] = 2;
  v9();
  v63 = (_QWORD *)(v77 + v4 + 29 * v3);
  v64 = (char *)v63 + *(int *)(v1 + 48);
  *v63 = 30;
  *(_QWORD *)v64 = "required_perms";
  *((_QWORD *)v64 + 1) = 14;
  v64[16] = 2;
  v9();
  v65 = (_QWORD *)(v77 + v4 + 30 * v3);
  v66 = (char *)v65 + *(int *)(v1 + 48);
  *v65 = 31;
  *(_QWORD *)v66 = "check_as_user";
  *((_QWORD *)v66 + 1) = 13;
  v66[16] = 2;
  v9();
  v67 = (_QWORD *)(v77 + v4 + 31 * v3);
  v68 = (char *)v67 + *(int *)(v1 + 48);
  *v67 = 32;
  *(_QWORD *)v68 = "selected_cols";
  *((_QWORD *)v68 + 1) = 13;
  v68[16] = 2;
  v9();
  v69 = v77 + v4 + 32 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 32 * v3) = 33;
  *(_QWORD *)v69 = "inserted_cols";
  *(_QWORD *)(v69 + 8) = 13;
  *(_BYTE *)(v69 + 16) = 2;
  v9();
  v70 = (_QWORD *)(v77 + v4 + 33 * v3);
  v71 = (char *)v70 + *(int *)(v1 + 48);
  *v70 = 34;
  *(_QWORD *)v71 = "updated_cols";
  *((_QWORD *)v71 + 1) = 12;
  v71[16] = 2;
  v9();
  v72 = (_QWORD *)(v77 + v4 + 34 * v3);
  v73 = (char *)v72 + *(int *)(v1 + 48);
  *v72 = 35;
  *(_QWORD *)v73 = "extra_updated_cols";
  *((_QWORD *)v73 + 1) = 18;
  v73[16] = 2;
  v9();
  v74 = (_QWORD *)(v77 + v4 + 35 * v3);
  v75 = (char *)v74 + *(int *)(v1 + 48);
  *v74 = 36;
  *(_QWORD *)v75 = "security_quals";
  *((_QWORD *)v75 + 1) = 14;
  v75[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RangeTblFunction._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RangeTblFunction._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D930;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "funcexpr";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "funccolcount";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "funccolnames";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "funccoltypes";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "funccoltypmods";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "funccolcollations";
  *((_QWORD *)v19 + 1) = 17;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "funcparams";
  *((_QWORD *)v21 + 1) = 10;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TableSampleClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TableSampleClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "tsmhandler";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "args";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "repeatable";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_WithCheckOption._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_WithCheckOption._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "kind";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "relname";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "polname";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "qual";
  *((_QWORD *)v15 + 1) = 4;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "cascaded";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SortGroupClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SortGroupClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "tle_sort_group_ref";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "eqop";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "sortop";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "nulls_first";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "hashable";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_GroupingSet._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_GroupingSet._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "kind";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "content";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "location";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v35;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_WindowClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_WindowClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_18DC0DA00;
  v5 = v35 + v4;
  v6 = v35 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v35 + v4) = 1;
  *(_QWORD *)v6 = "name";
  *(_QWORD *)(v6 + 8) = 4;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v35 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "refname";
  *(_QWORD *)(v10 + 8) = 7;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v35 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "partition_clause";
  *((_QWORD *)v12 + 1) = 16;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v35 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "order_clause";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v35 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "frame_options";
  *((_QWORD *)v16 + 1) = 13;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v35 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "start_offset";
  *((_QWORD *)v18 + 1) = 12;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v35 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "end_offset";
  *((_QWORD *)v20 + 1) = 10;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v35 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "start_in_range_func";
  *((_QWORD *)v22 + 1) = 19;
  v22[16] = 2;
  v9();
  v23 = v35 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "end_in_range_func";
  *(_QWORD *)(v23 + 8) = 17;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v35 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "in_range_coll";
  *((_QWORD *)v25 + 1) = 13;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v35 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "in_range_asc";
  *((_QWORD *)v27 + 1) = 12;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v35 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "in_range_nulls_first";
  *((_QWORD *)v29 + 1) = 20;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v35 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "winref";
  *((_QWORD *)v31 + 1) = 6;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v35 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "copied_order";
  *((_QWORD *)v33 + 1) = 12;
  v33[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ObjectWithArgs._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ObjectWithArgs._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "objname";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "objargs";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "args_unspecified";
  *(_QWORD *)(v12 + 8) = 16;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AccessPriv._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AccessPriv._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "priv_name";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "cols";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateOpClassItem._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateOpClassItem._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "itemtype";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "name";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "number";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "order_family";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "class_args";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "storedtype";
  *((_QWORD *)v19 + 1) = 10;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TableLikeClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TableLikeClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "relation";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "options";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "relation_oid";
  *(_QWORD *)(v12 + 8) = 12;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_FunctionParameter._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_FunctionParameter._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "name";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "arg_type";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "mode";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "defexpr";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_LockingClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_LockingClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "locked_rels";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "strength";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "wait_policy";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RowMarkClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RowMarkClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "rti";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "strength";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "wait_policy";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "pushed_down";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_XmlSerialize._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_XmlSerialize._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "xmloption";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "expr";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "type_name";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "location";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_WithClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_WithClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "ctes";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "recursive";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "location";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_InferClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_InferClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "index_elems";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "where_clause";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "conname";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "location";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_OnConflictClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_OnConflictClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "action";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "infer";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "target_list";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "where_clause";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "location";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v29;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CommonTableExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CommonTableExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_18DC0D950;
  v5 = v29 + v4;
  v6 = v29 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v29 + v4) = 1;
  *(_QWORD *)v6 = "ctename";
  *(_QWORD *)(v6 + 8) = 7;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "aliascolnames";
  *(_QWORD *)(v10 + 8) = 13;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "ctematerialized";
  *((_QWORD *)v12 + 1) = 15;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "ctequery";
  *((_QWORD *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "location";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "cterecursive";
  *((_QWORD *)v18 + 1) = 12;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "cterefcount";
  *((_QWORD *)v20 + 1) = 11;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "ctecolnames";
  *((_QWORD *)v22 + 1) = 11;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "ctecoltypes";
  *(_QWORD *)(v23 + 8) = 11;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "ctecoltypmods";
  *((_QWORD *)v25 + 1) = 13;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "ctecolcollations";
  *((_QWORD *)v27 + 1) = 16;
  v27[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RoleSpec._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RoleSpec._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "roletype";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "rolename";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "location";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TriggerTransition._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TriggerTransition._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "name";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "is_new";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "is_table";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_PartitionElem._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_PartitionElem._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "name";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "expr";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "collation";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "opclass";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "location";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_PartitionSpec._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_PartitionSpec._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "strategy";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "part_params";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "location";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_PartitionBoundSpec._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_PartitionBoundSpec._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D980;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "strategy";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "is_default";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "modulus";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "remainder";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "listdatums";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "lowerdatums";
  *((_QWORD *)v19 + 1) = 11;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "upperdatums";
  *((_QWORD *)v21 + 1) = 11;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "location";
  *((_QWORD *)v23 + 1) = 8;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_PartitionRangeDatum._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_PartitionRangeDatum._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "kind";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "value";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "location";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_PartitionCmd._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_PartitionCmd._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0CE10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "name";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "bound";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_VacuumRelation._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_VacuumRelation._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D020;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "relation";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "oid";
  *((_QWORD *)v11 + 1) = 3;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "va_cols";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_InlineCodeBlock._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_InlineCodeBlock._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "source_text";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "lang_oid";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "lang_is_trusted";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "atomic";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ScanToken._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ScanToken._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18DC0D8C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "start";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "end";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 4;
  *(_QWORD *)v13 = "token";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 5;
  *(_QWORD *)v15 = "keyword_kind";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

