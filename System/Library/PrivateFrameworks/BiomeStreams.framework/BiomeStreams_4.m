char *_outColumnDef_0(uint64_t a1, uint64_t a2)
{
  char *result;
  uint64_t v5;
  uint64_t v6;
  double node__init;
  uint64_t v8;
  double v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  double v23;

  result = *(char **)(a2 + 8);
  if (result)
  {
    result = (char *)pstrdup(result);
    *(_QWORD *)(a1 + 24) = result;
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v5 = palloc(0x68uLL);
    pg_query__type_name__init(v5);
    result = (char *)_outTypeName_0(v5, *(_QWORD *)(a2 + 16));
    *(_QWORD *)(a1 + 32) = v5;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 44) = *(unsigned __int8 *)(a2 + 28);
  *(_DWORD *)(a1 + 48) = *(unsigned __int8 *)(a2 + 29);
  *(_DWORD *)(a1 + 52) = *(unsigned __int8 *)(a2 + 30);
  if (*(_BYTE *)(a2 + 31))
  {
    result = (char *)palloc(2uLL);
    *(_QWORD *)(a1 + 56) = result;
    *result = *(_BYTE *)(a2 + 31);
    *(_BYTE *)(*(_QWORD *)(a1 + 56) + 1) = 0;
  }
  if (*(_QWORD *)(a2 + 32))
  {
    v6 = palloc(0x28uLL);
    node__init = pg_query__node__init(v6);
    *(_QWORD *)(a1 + 64) = v6;
    result = (char *)_outNode_0(v6, *(_QWORD *)(a2 + 32), node__init);
  }
  if (*(_QWORD *)(a2 + 40))
  {
    v8 = palloc(0x28uLL);
    v9 = pg_query__node__init(v8);
    *(_QWORD *)(a1 + 72) = v8;
    result = (char *)_outNode_0(v8, *(_QWORD *)(a2 + 40), v9);
  }
  if (*(_BYTE *)(a2 + 48))
  {
    result = (char *)palloc(2uLL);
    *(_QWORD *)(a1 + 80) = result;
    *result = *(_BYTE *)(a2 + 48);
    *(_BYTE *)(*(_QWORD *)(a1 + 80) + 1) = 0;
  }
  if (*(_QWORD *)(a2 + 56))
  {
    v10 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v10);
    result = _outRangeVar_0((uint64_t)v10, *(_QWORD *)(a2 + 56));
    *(_QWORD *)(a1 + 88) = v10;
  }
  if (*(_BYTE *)(a2 + 64))
  {
    result = (char *)palloc(2uLL);
    *(_QWORD *)(a1 + 96) = result;
    *result = *(_BYTE *)(a2 + 64);
    *(_BYTE *)(*(_QWORD *)(a1 + 96) + 1) = 0;
  }
  if (*(_QWORD *)(a2 + 72))
  {
    v11 = palloc(0x38uLL);
    pg_query__collate_clause__init(v11);
    result = (char *)_outCollateClause_0(v11, *(_QWORD *)(a2 + 72));
    *(_QWORD *)(a1 + 104) = v11;
  }
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  if (v12)
  {
    v13 = *(int *)(v12 + 4);
    *(_QWORD *)(a1 + 120) = v13;
    result = (char *)palloc(8 * v13);
    *(_QWORD *)(a1 + 128) = result;
    if (*(_QWORD *)(a1 + 120))
    {
      v14 = 0;
      v15 = 1;
      do
      {
        v16 = palloc(0x28uLL);
        v17 = pg_query__node__init(v16);
        *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v14) = v16;
        result = (char *)_outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v14), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 16) + 8 * v14), v17);
        v14 = v15++;
      }
      while (*(_QWORD *)(a1 + 120) > v14);
    }
  }
  v18 = *(_QWORD *)(a2 + 96);
  if (v18)
  {
    v19 = *(int *)(v18 + 4);
    *(_QWORD *)(a1 + 136) = v19;
    result = (char *)palloc(8 * v19);
    *(_QWORD *)(a1 + 144) = result;
    if (*(_QWORD *)(a1 + 136))
    {
      v20 = 0;
      v21 = 1;
      do
      {
        v22 = palloc(0x28uLL);
        v23 = pg_query__node__init(v22);
        *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v20) = v22;
        result = (char *)_outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v20), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 96) + 16) + 8 * v20), v23);
        v20 = v21++;
      }
      while (*(_QWORD *)(a1 + 136) > v20);
    }
  }
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 104);
  return result;
}

const char *_outIndexElem_0(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  double node__init;
  const char *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  double v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;

  v4 = *(const char **)(a2 + 8);
  if (v4)
    *(_QWORD *)(a1 + 24) = pstrdup(v4);
  if (*(_QWORD *)(a2 + 16))
  {
    v5 = palloc(0x28uLL);
    node__init = pg_query__node__init(v5);
    *(_QWORD *)(a1 + 32) = v5;
    _outNode_0(v5, *(_QWORD *)(a2 + 16), node__init);
  }
  result = *(const char **)(a2 + 24);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(_QWORD *)(a1 + 40) = result;
  }
  v8 = *(_QWORD *)(a2 + 32);
  if (v8)
  {
    v9 = *(int *)(v8 + 4);
    *(_QWORD *)(a1 + 48) = v9;
    result = (const char *)palloc(8 * v9);
    *(_QWORD *)(a1 + 56) = result;
    if (*(_QWORD *)(a1 + 48))
    {
      v10 = 0;
      v11 = 1;
      do
      {
        v12 = palloc(0x28uLL);
        v13 = pg_query__node__init(v12);
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10) = v12;
        result = (const char *)_outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 16) + 8 * v10), v13);
        v10 = v11++;
      }
      while (*(_QWORD *)(a1 + 48) > v10);
    }
  }
  v14 = *(_QWORD *)(a2 + 40);
  if (v14)
  {
    v15 = *(int *)(v14 + 4);
    *(_QWORD *)(a1 + 64) = v15;
    result = (const char *)palloc(8 * v15);
    *(_QWORD *)(a1 + 72) = result;
    if (*(_QWORD *)(a1 + 64))
    {
      v16 = 0;
      v17 = 1;
      do
      {
        v18 = palloc(0x28uLL);
        v19 = pg_query__node__init(v18);
        *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v16) = v18;
        result = (const char *)_outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v16), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 16) + 8 * v16), v19);
        v16 = v17++;
      }
      while (*(_QWORD *)(a1 + 64) > v16);
    }
  }
  v20 = *(_QWORD *)(a2 + 48);
  if (v20)
  {
    v21 = *(int *)(v20 + 4);
    *(_QWORD *)(a1 + 80) = v21;
    result = (const char *)palloc(8 * v21);
    *(_QWORD *)(a1 + 88) = result;
    if (*(_QWORD *)(a1 + 80))
    {
      v22 = 0;
      v23 = 1;
      do
      {
        v24 = palloc(0x28uLL);
        v25 = pg_query__node__init(v24);
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v22) = v24;
        result = (const char *)_outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v22), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 16) + 8 * v22), v25);
        v22 = v23++;
      }
      while (*(_QWORD *)(a1 + 80) > v22);
    }
  }
  v26 = *(_DWORD *)(a2 + 56);
  if (v26 < 4)
    v27 = v26 + 1;
  else
    v27 = -1;
  *(_DWORD *)(a1 + 96) = v27;
  v28 = *(_DWORD *)(a2 + 60);
  if (v28 < 3)
    v29 = v28 + 1;
  else
    v29 = -1;
  *(_DWORD *)(a1 + 100) = v29;
  return result;
}

char *_outConstraint_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  const char *v6;
  uint64_t v7;
  double node__init;
  const char *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  double v34;
  const char *v35;
  const char *v36;
  char *result;
  uint64_t v38;
  double v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  double v58;

  v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 0xE)
    v5 = v4 + 1;
  else
    v5 = -1;
  *(_DWORD *)(a1 + 24) = v5;
  v6 = *(const char **)(a2 + 8);
  if (v6)
    *(_QWORD *)(a1 + 32) = pstrdup(v6);
  *(_DWORD *)(a1 + 40) = *(unsigned __int8 *)(a2 + 16);
  *(_DWORD *)(a1 + 44) = *(unsigned __int8 *)(a2 + 17);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 52) = *(unsigned __int8 *)(a2 + 24);
  if (*(_QWORD *)(a2 + 32))
  {
    v7 = palloc(0x28uLL);
    node__init = pg_query__node__init(v7);
    *(_QWORD *)(a1 + 56) = v7;
    _outNode_0(v7, *(_QWORD *)(a2 + 32), node__init);
  }
  v9 = *(const char **)(a2 + 40);
  if (v9)
    *(_QWORD *)(a1 + 64) = pstrdup(v9);
  if (*(_BYTE *)(a2 + 48))
  {
    v10 = (_BYTE *)palloc(2uLL);
    *(_QWORD *)(a1 + 72) = v10;
    *v10 = *(_BYTE *)(a2 + 48);
    *(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) = 0;
  }
  v11 = *(_QWORD *)(a2 + 56);
  if (v11)
  {
    v12 = *(int *)(v11 + 4);
    *(_QWORD *)(a1 + 80) = v12;
    *(_QWORD *)(a1 + 88) = palloc(8 * v12);
    if (*(_QWORD *)(a1 + 80))
    {
      v13 = 0;
      v14 = 1;
      do
      {
        v15 = palloc(0x28uLL);
        v16 = pg_query__node__init(v15);
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v13) = v15;
        _outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v13), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 16) + 8 * v13), v16);
        v13 = v14++;
      }
      while (*(_QWORD *)(a1 + 80) > v13);
    }
  }
  v17 = *(_QWORD *)(a2 + 64);
  if (v17)
  {
    v18 = *(int *)(v17 + 4);
    *(_QWORD *)(a1 + 96) = v18;
    *(_QWORD *)(a1 + 104) = palloc(8 * v18);
    if (*(_QWORD *)(a1 + 96))
    {
      v19 = 0;
      v20 = 1;
      do
      {
        v21 = palloc(0x28uLL);
        v22 = pg_query__node__init(v21);
        *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v19) = v21;
        _outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v19), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 16) + 8 * v19), v22);
        v19 = v20++;
      }
      while (*(_QWORD *)(a1 + 96) > v19);
    }
  }
  v23 = *(_QWORD *)(a2 + 72);
  if (v23)
  {
    v24 = *(int *)(v23 + 4);
    *(_QWORD *)(a1 + 112) = v24;
    *(_QWORD *)(a1 + 120) = palloc(8 * v24);
    if (*(_QWORD *)(a1 + 112))
    {
      v25 = 0;
      v26 = 1;
      do
      {
        v27 = palloc(0x28uLL);
        v28 = pg_query__node__init(v27);
        *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v25) = v27;
        _outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v25), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 16) + 8 * v25), v28);
        v25 = v26++;
      }
      while (*(_QWORD *)(a1 + 112) > v25);
    }
  }
  v29 = *(_QWORD *)(a2 + 80);
  if (v29)
  {
    v30 = *(int *)(v29 + 4);
    *(_QWORD *)(a1 + 128) = v30;
    *(_QWORD *)(a1 + 136) = palloc(8 * v30);
    if (*(_QWORD *)(a1 + 128))
    {
      v31 = 0;
      v32 = 1;
      do
      {
        v33 = palloc(0x28uLL);
        v34 = pg_query__node__init(v33);
        *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v31) = v33;
        _outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v31), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 16) + 8 * v31), v34);
        v31 = v32++;
      }
      while (*(_QWORD *)(a1 + 128) > v31);
    }
  }
  v35 = *(const char **)(a2 + 88);
  if (v35)
    *(_QWORD *)(a1 + 144) = pstrdup(v35);
  v36 = *(const char **)(a2 + 96);
  if (v36)
    *(_QWORD *)(a1 + 152) = pstrdup(v36);
  *(_DWORD *)(a1 + 160) = *(unsigned __int8 *)(a2 + 104);
  result = *(char **)(a2 + 112);
  if (result)
  {
    result = (char *)pstrdup(result);
    *(_QWORD *)(a1 + 168) = result;
  }
  if (*(_QWORD *)(a2 + 120))
  {
    v38 = palloc(0x28uLL);
    v39 = pg_query__node__init(v38);
    *(_QWORD *)(a1 + 176) = v38;
    result = (char *)_outNode_0(v38, *(_QWORD *)(a2 + 120), v39);
  }
  if (*(_QWORD *)(a2 + 128))
  {
    v40 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v40);
    result = _outRangeVar_0((uint64_t)v40, *(_QWORD *)(a2 + 128));
    *(_QWORD *)(a1 + 184) = v40;
  }
  v41 = *(_QWORD *)(a2 + 136);
  if (v41)
  {
    v42 = *(int *)(v41 + 4);
    *(_QWORD *)(a1 + 192) = v42;
    result = (char *)palloc(8 * v42);
    *(_QWORD *)(a1 + 200) = result;
    if (*(_QWORD *)(a1 + 192))
    {
      v43 = 0;
      v44 = 1;
      do
      {
        v45 = palloc(0x28uLL);
        v46 = pg_query__node__init(v45);
        *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v43) = v45;
        result = (char *)_outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v43), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 16) + 8 * v43), v46);
        v43 = v44++;
      }
      while (*(_QWORD *)(a1 + 192) > v43);
    }
  }
  v47 = *(_QWORD *)(a2 + 144);
  if (v47)
  {
    v48 = *(int *)(v47 + 4);
    *(_QWORD *)(a1 + 208) = v48;
    result = (char *)palloc(8 * v48);
    *(_QWORD *)(a1 + 216) = result;
    if (*(_QWORD *)(a1 + 208))
    {
      v49 = 0;
      v50 = 1;
      do
      {
        v51 = palloc(0x28uLL);
        v52 = pg_query__node__init(v51);
        *(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * v49) = v51;
        result = (char *)_outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * v49), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 16) + 8 * v49), v52);
        v49 = v50++;
      }
      while (*(_QWORD *)(a1 + 208) > v49);
    }
  }
  if (*(_BYTE *)(a2 + 152))
  {
    result = (char *)palloc(2uLL);
    *(_QWORD *)(a1 + 224) = result;
    *result = *(_BYTE *)(a2 + 152);
    *(_BYTE *)(*(_QWORD *)(a1 + 224) + 1) = 0;
  }
  if (*(_BYTE *)(a2 + 153))
  {
    result = (char *)palloc(2uLL);
    *(_QWORD *)(a1 + 232) = result;
    *result = *(_BYTE *)(a2 + 153);
    *(_BYTE *)(*(_QWORD *)(a1 + 232) + 1) = 0;
  }
  if (*(_BYTE *)(a2 + 154))
  {
    result = (char *)palloc(2uLL);
    *(_QWORD *)(a1 + 240) = result;
    *result = *(_BYTE *)(a2 + 154);
    *(_BYTE *)(*(_QWORD *)(a1 + 240) + 1) = 0;
  }
  v53 = *(_QWORD *)(a2 + 160);
  if (v53)
  {
    v54 = *(int *)(v53 + 4);
    *(_QWORD *)(a1 + 248) = v54;
    result = (char *)palloc(8 * v54);
    *(_QWORD *)(a1 + 256) = result;
    if (*(_QWORD *)(a1 + 248))
    {
      v55 = 0;
      v56 = 1;
      do
      {
        v57 = palloc(0x28uLL);
        v58 = pg_query__node__init(v57);
        *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * v55) = v57;
        result = (char *)_outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * v55), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 160) + 16) + 8 * v55), v58);
        v55 = v56++;
      }
      while (*(_QWORD *)(a1 + 248) > v55);
    }
  }
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 268) = *(unsigned __int8 *)(a2 + 172);
  *(_DWORD *)(a1 + 272) = *(unsigned __int8 *)(a2 + 173);
  return result;
}

const char *_outDefElem_0(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *result;
  uint64_t v6;
  double node__init;
  unsigned int v8;
  int v9;

  v4 = *(const char **)(a2 + 8);
  if (v4)
    *(_QWORD *)(a1 + 24) = pstrdup(v4);
  result = *(const char **)(a2 + 16);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(_QWORD *)(a1 + 32) = result;
  }
  if (*(_QWORD *)(a2 + 24))
  {
    v6 = palloc(0x28uLL);
    node__init = pg_query__node__init(v6);
    *(_QWORD *)(a1 + 40) = v6;
    result = (const char *)_outNode_0(v6, *(_QWORD *)(a2 + 24), node__init);
  }
  v8 = *(_DWORD *)(a2 + 32);
  if (v8 < 4)
    v9 = v8 + 1;
  else
    v9 = -1;
  *(_DWORD *)(a1 + 48) = v9;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 36);
  return result;
}

uint64_t _outRangeTblEntry_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  _BYTE *v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  double node__init;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  double v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  double v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  double v60;
  const char *v61;
  _OWORD *v62;
  _OWORD *v63;
  int v64;
  unsigned int member;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  uint64_t result;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  double v85;

  v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 9)
    v5 = v4 + 1;
  else
    v5 = -1;
  *(_DWORD *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 12))
  {
    v6 = (_BYTE *)palloc(2uLL);
    *(_QWORD *)(a1 + 32) = v6;
    *v6 = *(_BYTE *)(a2 + 12);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1) = 0;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 16);
  if (*(_QWORD *)(a2 + 24))
  {
    v7 = palloc(0x38uLL);
    pg_query__table_sample_clause__init(v7);
    _outTableSampleClause_0(v7, *(_QWORD *)(a2 + 24));
    *(_QWORD *)(a1 + 48) = v7;
  }
  if (*(_QWORD *)(a2 + 32))
  {
    v8 = (_DWORD *)palloc(0x160uLL);
    pg_query__query__init(v8);
    _outQuery_0(v8, *(_QWORD *)(a2 + 32));
    *(_QWORD *)(a1 + 56) = v8;
  }
  *(_DWORD *)(a1 + 64) = *(unsigned __int8 *)(a2 + 40);
  v9 = *(_DWORD *)(a2 + 44);
  if (v9 < 8)
    v10 = v9 + 1;
  else
    v10 = -1;
  *(_DWORD *)(a1 + 68) = v10;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  if (v11)
  {
    v12 = *(int *)(v11 + 4);
    *(_QWORD *)(a1 + 80) = v12;
    *(_QWORD *)(a1 + 88) = palloc(8 * v12);
    if (*(_QWORD *)(a1 + 80))
    {
      v13 = 0;
      v14 = 1;
      do
      {
        v15 = palloc(0x28uLL);
        node__init = pg_query__node__init(v15);
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v13) = v15;
        _outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v13), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 16) + 8 * v13), node__init);
        v13 = v14++;
      }
      while (*(_QWORD *)(a1 + 80) > v13);
    }
  }
  v17 = *(_QWORD *)(a2 + 64);
  if (v17)
  {
    v18 = *(int *)(v17 + 4);
    *(_QWORD *)(a1 + 96) = v18;
    *(_QWORD *)(a1 + 104) = palloc(8 * v18);
    if (*(_QWORD *)(a1 + 96))
    {
      v19 = 0;
      v20 = 1;
      do
      {
        v21 = palloc(0x28uLL);
        v22 = pg_query__node__init(v21);
        *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v19) = v21;
        _outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v19), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 16) + 8 * v19), v22);
        v19 = v20++;
      }
      while (*(_QWORD *)(a1 + 96) > v19);
    }
  }
  v23 = *(_QWORD *)(a2 + 72);
  if (v23)
  {
    v24 = *(int *)(v23 + 4);
    *(_QWORD *)(a1 + 112) = v24;
    *(_QWORD *)(a1 + 120) = palloc(8 * v24);
    if (*(_QWORD *)(a1 + 112))
    {
      v25 = 0;
      v26 = 1;
      do
      {
        v27 = palloc(0x28uLL);
        v28 = pg_query__node__init(v27);
        *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v25) = v27;
        _outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v25), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 16) + 8 * v25), v28);
        v25 = v26++;
      }
      while (*(_QWORD *)(a1 + 112) > v25);
    }
  }
  v29 = *(_QWORD *)(a2 + 80);
  if (v29)
  {
    v30 = *(int *)(v29 + 4);
    *(_QWORD *)(a1 + 128) = v30;
    *(_QWORD *)(a1 + 136) = palloc(8 * v30);
    if (*(_QWORD *)(a1 + 128))
    {
      v31 = 0;
      v32 = 1;
      do
      {
        v33 = palloc(0x28uLL);
        v34 = pg_query__node__init(v33);
        *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v31) = v33;
        _outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v31), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 16) + 8 * v31), v34);
        v31 = v32++;
      }
      while (*(_QWORD *)(a1 + 128) > v31);
    }
  }
  *(_DWORD *)(a1 + 144) = *(unsigned __int8 *)(a2 + 88);
  if (*(_QWORD *)(a2 + 96))
  {
    v35 = (_OWORD *)palloc(0xC0uLL);
    pg_query__table_func__init(v35);
    _outTableFunc_0((uint64_t)v35, *(_QWORD *)(a2 + 96));
    *(_QWORD *)(a1 + 152) = v35;
  }
  v36 = *(_QWORD *)(a2 + 104);
  if (v36)
  {
    v37 = *(int *)(v36 + 4);
    *(_QWORD *)(a1 + 160) = v37;
    *(_QWORD *)(a1 + 168) = palloc(8 * v37);
    if (*(_QWORD *)(a1 + 160))
    {
      v38 = 0;
      v39 = 1;
      do
      {
        v40 = palloc(0x28uLL);
        v41 = pg_query__node__init(v40);
        *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v38) = v40;
        _outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v38), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 104) + 16) + 8 * v38), v41);
        v38 = v39++;
      }
      while (*(_QWORD *)(a1 + 160) > v38);
    }
  }
  v42 = *(const char **)(a2 + 112);
  if (v42)
    *(_QWORD *)(a1 + 176) = pstrdup(v42);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 188) = *(unsigned __int8 *)(a2 + 124);
  v43 = *(_QWORD *)(a2 + 128);
  if (v43)
  {
    v44 = *(int *)(v43 + 4);
    *(_QWORD *)(a1 + 192) = v44;
    *(_QWORD *)(a1 + 200) = palloc(8 * v44);
    if (*(_QWORD *)(a1 + 192))
    {
      v45 = 0;
      v46 = 1;
      do
      {
        v47 = palloc(0x28uLL);
        v48 = pg_query__node__init(v47);
        *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v45) = v47;
        _outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v45), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 128) + 16) + 8 * v45), v48);
        v45 = v46++;
      }
      while (*(_QWORD *)(a1 + 192) > v45);
    }
  }
  v49 = *(_QWORD *)(a2 + 136);
  if (v49)
  {
    v50 = *(int *)(v49 + 4);
    *(_QWORD *)(a1 + 208) = v50;
    *(_QWORD *)(a1 + 216) = palloc(8 * v50);
    if (*(_QWORD *)(a1 + 208))
    {
      v51 = 0;
      v52 = 1;
      do
      {
        v53 = palloc(0x28uLL);
        v54 = pg_query__node__init(v53);
        *(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * v51) = v53;
        _outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * v51), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 16) + 8 * v51), v54);
        v51 = v52++;
      }
      while (*(_QWORD *)(a1 + 208) > v51);
    }
  }
  v55 = *(_QWORD *)(a2 + 144);
  if (v55)
  {
    v56 = *(int *)(v55 + 4);
    *(_QWORD *)(a1 + 224) = v56;
    *(_QWORD *)(a1 + 232) = palloc(8 * v56);
    if (*(_QWORD *)(a1 + 224))
    {
      v57 = 0;
      v58 = 1;
      do
      {
        v59 = palloc(0x28uLL);
        v60 = pg_query__node__init(v59);
        *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v57) = v59;
        _outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v57), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 16) + 8 * v57), v60);
        v57 = v58++;
      }
      while (*(_QWORD *)(a1 + 224) > v57);
    }
  }
  v61 = *(const char **)(a2 + 152);
  if (v61)
    *(_QWORD *)(a1 + 240) = pstrdup(v61);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 160);
  if (*(_QWORD *)(a2 + 168))
  {
    v62 = (_OWORD *)palloc(0x30uLL);
    pg_query__alias__init(v62);
    _outAlias_0(v62, *(_QWORD *)(a2 + 168));
    *(_QWORD *)(a1 + 256) = v62;
  }
  if (*(_QWORD *)(a2 + 176))
  {
    v63 = (_OWORD *)palloc(0x30uLL);
    pg_query__alias__init(v63);
    _outAlias_0(v63, *(_QWORD *)(a2 + 176));
    *(_QWORD *)(a1 + 264) = v63;
  }
  *(_DWORD *)(a1 + 272) = *(unsigned __int8 *)(a2 + 184);
  *(_DWORD *)(a1 + 276) = *(unsigned __int8 *)(a2 + 185);
  *(_DWORD *)(a1 + 280) = *(unsigned __int8 *)(a2 + 186);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 192);
  if (!bms_is_empty(*(unsigned int **)(a2 + 200)))
  {
    v64 = bms_num_members(*(unsigned int **)(a2 + 200));
    *(_QWORD *)(a1 + 296) = v64;
    *(_QWORD *)(a1 + 304) = palloc(8 * v64);
    member = bms_first_member(*(_DWORD **)(a2 + 200));
    if ((member & 0x80000000) == 0)
    {
      v66 = 0;
      do
      {
        v67 = v66 + 1;
        *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * v66) = member;
        member = bms_first_member(*(_DWORD **)(a2 + 200));
        v66 = v67;
      }
      while ((member & 0x80000000) == 0);
    }
  }
  if (!bms_is_empty(*(unsigned int **)(a2 + 208)))
  {
    v68 = bms_num_members(*(unsigned int **)(a2 + 208));
    *(_QWORD *)(a1 + 312) = v68;
    *(_QWORD *)(a1 + 320) = palloc(8 * v68);
    v69 = bms_first_member(*(_DWORD **)(a2 + 208));
    if ((v69 & 0x80000000) == 0)
    {
      v70 = 0;
      do
      {
        v71 = v70 + 1;
        *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v70) = v69;
        v69 = bms_first_member(*(_DWORD **)(a2 + 208));
        v70 = v71;
      }
      while ((v69 & 0x80000000) == 0);
    }
  }
  if (!bms_is_empty(*(unsigned int **)(a2 + 216)))
  {
    v72 = bms_num_members(*(unsigned int **)(a2 + 216));
    *(_QWORD *)(a1 + 328) = v72;
    *(_QWORD *)(a1 + 336) = palloc(8 * v72);
    v73 = bms_first_member(*(_DWORD **)(a2 + 216));
    if ((v73 & 0x80000000) == 0)
    {
      v74 = 0;
      do
      {
        v75 = v74 + 1;
        *(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * v74) = v73;
        v73 = bms_first_member(*(_DWORD **)(a2 + 216));
        v74 = v75;
      }
      while ((v73 & 0x80000000) == 0);
    }
  }
  result = bms_is_empty(*(unsigned int **)(a2 + 224));
  if ((result & 1) == 0)
  {
    v77 = bms_num_members(*(unsigned int **)(a2 + 224));
    *(_QWORD *)(a1 + 344) = v77;
    *(_QWORD *)(a1 + 352) = palloc(8 * v77);
    result = bms_first_member(*(_DWORD **)(a2 + 224));
    if ((result & 0x80000000) == 0)
    {
      v78 = 0;
      do
      {
        v79 = v78 + 1;
        *(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * v78) = result;
        result = bms_first_member(*(_DWORD **)(a2 + 224));
        v78 = v79;
      }
      while ((result & 0x80000000) == 0);
    }
  }
  v80 = *(_QWORD *)(a2 + 232);
  if (v80)
  {
    v81 = *(int *)(v80 + 4);
    *(_QWORD *)(a1 + 360) = v81;
    result = palloc(8 * v81);
    *(_QWORD *)(a1 + 368) = result;
    if (*(_QWORD *)(a1 + 360))
    {
      v82 = 0;
      v83 = 1;
      do
      {
        v84 = palloc(0x28uLL);
        v85 = pg_query__node__init(v84);
        *(_QWORD *)(*(_QWORD *)(a1 + 368) + 8 * v82) = v84;
        result = _outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 368) + 8 * v82), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 232) + 16) + 8 * v82), v85);
        v82 = v83++;
      }
      while (*(_QWORD *)(a1 + 360) > v82);
    }
  }
  return result;
}

uint64_t _outRangeTblFunction_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double node__init;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  double v29;
  uint64_t result;
  int v31;
  int v32;
  int v33;

  if (*(_QWORD *)(a2 + 8))
  {
    v4 = palloc(0x28uLL);
    node__init = pg_query__node__init(v4);
    *(_QWORD *)(a1 + 24) = v4;
    _outNode_0(v4, *(_QWORD *)(a2 + 8), node__init);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    v7 = *(int *)(v6 + 4);
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = palloc(8 * v7);
    if (*(_QWORD *)(a1 + 40))
    {
      v8 = 0;
      v9 = 1;
      do
      {
        v10 = palloc(0x28uLL);
        v11 = pg_query__node__init(v10);
        *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v8) = v10;
        _outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) + 8 * v8), v11);
        v8 = v9++;
      }
      while (*(_QWORD *)(a1 + 40) > v8);
    }
  }
  v12 = *(_QWORD *)(a2 + 32);
  if (v12)
  {
    v13 = *(int *)(v12 + 4);
    *(_QWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 64) = palloc(8 * v13);
    if (*(_QWORD *)(a1 + 56))
    {
      v14 = 0;
      v15 = 1;
      do
      {
        v16 = palloc(0x28uLL);
        v17 = pg_query__node__init(v16);
        *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v14) = v16;
        _outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v14), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 16) + 8 * v14), v17);
        v14 = v15++;
      }
      while (*(_QWORD *)(a1 + 56) > v14);
    }
  }
  v18 = *(_QWORD *)(a2 + 40);
  if (v18)
  {
    v19 = *(int *)(v18 + 4);
    *(_QWORD *)(a1 + 72) = v19;
    *(_QWORD *)(a1 + 80) = palloc(8 * v19);
    if (*(_QWORD *)(a1 + 72))
    {
      v20 = 0;
      v21 = 1;
      do
      {
        v22 = palloc(0x28uLL);
        v23 = pg_query__node__init(v22);
        *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v20) = v22;
        _outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v20), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 16) + 8 * v20), v23);
        v20 = v21++;
      }
      while (*(_QWORD *)(a1 + 72) > v20);
    }
  }
  v24 = *(_QWORD *)(a2 + 48);
  if (v24)
  {
    v25 = *(int *)(v24 + 4);
    *(_QWORD *)(a1 + 88) = v25;
    *(_QWORD *)(a1 + 96) = palloc(8 * v25);
    if (*(_QWORD *)(a1 + 88))
    {
      v26 = 0;
      v27 = 1;
      do
      {
        v28 = palloc(0x28uLL);
        v29 = pg_query__node__init(v28);
        *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v26) = v28;
        _outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v26), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 16) + 8 * v26), v29);
        v26 = v27++;
      }
      while (*(_QWORD *)(a1 + 88) > v26);
    }
  }
  result = bms_is_empty(*(unsigned int **)(a2 + 56));
  if ((result & 1) == 0)
  {
    v31 = bms_num_members(*(unsigned int **)(a2 + 56));
    *(_QWORD *)(a1 + 104) = v31;
    *(_QWORD *)(a1 + 112) = palloc(8 * v31);
    result = bms_first_member(*(_DWORD **)(a2 + 56));
    if ((result & 0x80000000) == 0)
    {
      v32 = 0;
      do
      {
        v33 = v32 + 1;
        *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v32) = result;
        result = bms_first_member(*(_DWORD **)(a2 + 56));
        v32 = v33;
      }
      while ((result & 0x80000000) == 0);
    }
  }
  return result;
}

uint64_t _outTableSampleClause_0(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  double node__init;
  uint64_t v10;
  double v11;

  v3 = (_QWORD *)result;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 4);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(int *)(v4 + 4);
    *(_QWORD *)(result + 32) = v5;
    result = palloc(8 * v5);
    v3[5] = result;
    if (v3[4])
    {
      v6 = 0;
      v7 = 1;
      do
      {
        v8 = palloc(0x28uLL);
        node__init = pg_query__node__init(v8);
        *(_QWORD *)(v3[5] + 8 * v6) = v8;
        result = _outNode_0(*(_QWORD *)(v3[5] + 8 * v6), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 8 * v6), node__init);
        v6 = v7++;
      }
      while (v3[4] > v6);
    }
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v10 = palloc(0x28uLL);
    v11 = pg_query__node__init(v10);
    v3[6] = v10;
    return _outNode_0(v10, *(_QWORD *)(a2 + 16), v11);
  }
  return result;
}

const char *_outWithCheckOption_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  const char *v6;
  const char *result;
  uint64_t v8;
  double node__init;

  v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 4)
    v5 = v4 + 1;
  else
    v5 = -1;
  *(_DWORD *)(a1 + 24) = v5;
  v6 = *(const char **)(a2 + 8);
  if (v6)
    *(_QWORD *)(a1 + 32) = pstrdup(v6);
  result = *(const char **)(a2 + 16);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(_QWORD *)(a1 + 40) = result;
  }
  if (*(_QWORD *)(a2 + 24))
  {
    v8 = palloc(0x28uLL);
    node__init = pg_query__node__init(v8);
    *(_QWORD *)(a1 + 48) = v8;
    result = (const char *)_outNode_0(v8, *(_QWORD *)(a2 + 24), node__init);
  }
  *(_DWORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 32);
  return result;
}

uint64_t _outGroupingSet_0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  double node__init;

  v3 = result;
  v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 5)
    v5 = v4 + 1;
  else
    v5 = -1;
  *(_DWORD *)(result + 24) = v5;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v7 = *(int *)(v6 + 4);
    *(_QWORD *)(result + 32) = v7;
    result = palloc(8 * v7);
    *(_QWORD *)(v3 + 40) = result;
    if (*(_QWORD *)(v3 + 32))
    {
      v8 = 0;
      v9 = 1;
      do
      {
        v10 = palloc(0x28uLL);
        node__init = pg_query__node__init(v10);
        *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8 * v8) = v10;
        result = _outNode_0(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8 * v8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 8 * v8), node__init);
        v8 = v9++;
      }
      while (*(_QWORD *)(v3 + 32) > v8);
    }
  }
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a2 + 16);
  return result;
}

const char *_outWindowClause_0(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  double node__init;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;

  v4 = *(const char **)(a2 + 8);
  if (v4)
    *(_QWORD *)(a1 + 24) = pstrdup(v4);
  result = *(const char **)(a2 + 16);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(_QWORD *)(a1 + 32) = result;
  }
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    v7 = *(int *)(v6 + 4);
    *(_QWORD *)(a1 + 40) = v7;
    result = (const char *)palloc(8 * v7);
    *(_QWORD *)(a1 + 48) = result;
    if (*(_QWORD *)(a1 + 40))
    {
      v8 = 0;
      v9 = 1;
      do
      {
        v10 = palloc(0x28uLL);
        node__init = pg_query__node__init(v10);
        *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v8) = v10;
        result = (const char *)_outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) + 8 * v8), node__init);
        v8 = v9++;
      }
      while (*(_QWORD *)(a1 + 40) > v8);
    }
  }
  v12 = *(_QWORD *)(a2 + 32);
  if (v12)
  {
    v13 = *(int *)(v12 + 4);
    *(_QWORD *)(a1 + 56) = v13;
    result = (const char *)palloc(8 * v13);
    *(_QWORD *)(a1 + 64) = result;
    if (*(_QWORD *)(a1 + 56))
    {
      v14 = 0;
      v15 = 1;
      do
      {
        v16 = palloc(0x28uLL);
        v17 = pg_query__node__init(v16);
        *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v14) = v16;
        result = (const char *)_outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v14), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 16) + 8 * v14), v17);
        v14 = v15++;
      }
      while (*(_QWORD *)(a1 + 56) > v14);
    }
  }
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 40);
  if (*(_QWORD *)(a2 + 48))
  {
    v18 = palloc(0x28uLL);
    v19 = pg_query__node__init(v18);
    *(_QWORD *)(a1 + 80) = v18;
    result = (const char *)_outNode_0(v18, *(_QWORD *)(a2 + 48), v19);
  }
  if (*(_QWORD *)(a2 + 56))
  {
    v20 = palloc(0x28uLL);
    v21 = pg_query__node__init(v20);
    *(_QWORD *)(a1 + 88) = v20;
    result = (const char *)_outNode_0(v20, *(_QWORD *)(a2 + 56), v21);
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 108) = *(unsigned __int8 *)(a2 + 76);
  *(_DWORD *)(a1 + 112) = *(unsigned __int8 *)(a2 + 77);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 120) = *(unsigned __int8 *)(a2 + 84);
  return result;
}

uint64_t _outCreateOpClassItem_0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  double node__init;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  double v16;
  uint64_t v17;

  v3 = result;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 4);
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = (_OWORD *)palloc(0x40uLL);
    pg_query__object_with_args__init(v4);
    result = _outVacuumStmt_0((uint64_t)v4, *(_QWORD *)(a2 + 8));
    *(_QWORD *)(v3 + 32) = v4;
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *(int *)(v5 + 4);
    *(_QWORD *)(v3 + 48) = v6;
    result = palloc(8 * v6);
    *(_QWORD *)(v3 + 56) = result;
    if (*(_QWORD *)(v3 + 48))
    {
      v7 = 0;
      v8 = 1;
      do
      {
        v9 = palloc(0x28uLL);
        node__init = pg_query__node__init(v9);
        *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v7) = v9;
        result = _outNode_0(*(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v7), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) + 8 * v7), node__init);
        v7 = v8++;
      }
      while (*(_QWORD *)(v3 + 48) > v7);
    }
  }
  v11 = *(_QWORD *)(a2 + 32);
  if (v11)
  {
    v12 = *(int *)(v11 + 4);
    *(_QWORD *)(v3 + 64) = v12;
    result = palloc(8 * v12);
    *(_QWORD *)(v3 + 72) = result;
    if (*(_QWORD *)(v3 + 64))
    {
      v13 = 0;
      v14 = 1;
      do
      {
        v15 = palloc(0x28uLL);
        v16 = pg_query__node__init(v15);
        *(_QWORD *)(*(_QWORD *)(v3 + 72) + 8 * v13) = v15;
        result = _outNode_0(*(_QWORD *)(*(_QWORD *)(v3 + 72) + 8 * v13), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 16) + 8 * v13), v16);
        v13 = v14++;
      }
      while (*(_QWORD *)(v3 + 64) > v13);
    }
  }
  if (*(_QWORD *)(a2 + 40))
  {
    v17 = palloc(0x68uLL);
    pg_query__type_name__init(v17);
    result = _outTypeName_0(v17, *(_QWORD *)(a2 + 40));
    *(_QWORD *)(v3 + 80) = v17;
  }
  return result;
}

char *_outTableLikeClause_0(char *result, uint64_t a2)
{
  char *v3;
  _OWORD *v4;

  v3 = result;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    result = _outRangeVar_0((uint64_t)v4, *(_QWORD *)(a2 + 8));
    *((_QWORD *)v3 + 3) = v4;
  }
  *((_DWORD *)v3 + 8) = *(_DWORD *)(a2 + 16);
  *((_DWORD *)v3 + 9) = *(_DWORD *)(a2 + 20);
  return result;
}

const char *_outFunctionParameter_0(uint64_t a1, uint64_t a2)
{
  const char *result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  double node__init;

  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(_QWORD *)(a1 + 24) = result;
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v5 = palloc(0x68uLL);
    pg_query__type_name__init(v5);
    result = (const char *)_outTypeName_0(v5, *(_QWORD *)(a2 + 16));
    *(_QWORD *)(a1 + 32) = v5;
  }
  v6 = 1;
  switch(*(_DWORD *)(a2 + 24))
  {
    case 'b':
      *(_DWORD *)(a1 + 40) = 3;
      if (*(_QWORD *)(a2 + 32))
        goto LABEL_14;
      return result;
    case 'i':
      goto LABEL_13;
    case 'o':
      *(_DWORD *)(a1 + 40) = 2;
      if (!*(_QWORD *)(a2 + 32))
        return result;
      goto LABEL_14;
    case 't':
      v6 = 5;
LABEL_13:
      *(_DWORD *)(a1 + 40) = v6;
      if (*(_QWORD *)(a2 + 32))
        goto LABEL_14;
      return result;
    case 'v':
      *(_DWORD *)(a1 + 40) = 4;
      if (!*(_QWORD *)(a2 + 32))
        return result;
      goto LABEL_14;
    default:
      *(_DWORD *)(a1 + 40) = -1;
      if (!*(_QWORD *)(a2 + 32))
        return result;
LABEL_14:
      v7 = palloc(0x28uLL);
      node__init = pg_query__node__init(v7);
      *(_QWORD *)(a1 + 48) = v7;
      return (const char *)_outNode_0(v7, *(_QWORD *)(a2 + 32), node__init);
  }
}

uint64_t _outLockingClause_0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  double node__init;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(int *)(v4 + 4);
    *(_QWORD *)(result + 24) = v5;
    result = palloc(8 * v5);
    *(_QWORD *)(v3 + 32) = result;
    if (*(_QWORD *)(v3 + 24))
    {
      v6 = 0;
      v7 = 1;
      do
      {
        v8 = palloc(0x28uLL);
        node__init = pg_query__node__init(v8);
        *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * v6) = v8;
        result = _outNode_0(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * v6), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 8 * v6), node__init);
        v6 = v7++;
      }
      while (*(_QWORD *)(v3 + 24) > v6);
    }
  }
  v10 = *(_DWORD *)(a2 + 16);
  if (v10 < 5)
    v11 = v10 + 1;
  else
    v11 = -1;
  *(_DWORD *)(v3 + 40) = v11;
  v12 = *(_DWORD *)(a2 + 20);
  if (v12 < 3)
    v13 = v12 + 1;
  else
    v13 = -1;
  *(_DWORD *)(v3 + 44) = v13;
  return result;
}

_DWORD *_outRowMarkClause_0(_DWORD *result, uint64_t a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;

  result[6] = *(_DWORD *)(a2 + 4);
  v2 = *(_DWORD *)(a2 + 8);
  if (v2 < 5)
    v3 = v2 + 1;
  else
    v3 = -1;
  result[7] = v3;
  v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 3)
    v5 = v4 + 1;
  else
    v5 = -1;
  result[8] = v5;
  result[9] = *(unsigned __int8 *)(a2 + 16);
  return result;
}

uint64_t _outXmlSerialize_0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  double node__init;
  uint64_t v9;

  v3 = result;
  v4 = *(_DWORD *)(a2 + 4);
  if (v4 == 1)
    v5 = 2;
  else
    v5 = -1;
  if (v4)
    v6 = v5;
  else
    v6 = 1;
  *(_DWORD *)(result + 24) = v6;
  if (*(_QWORD *)(a2 + 8))
  {
    v7 = palloc(0x28uLL);
    node__init = pg_query__node__init(v7);
    *(_QWORD *)(v3 + 32) = v7;
    result = _outNode_0(v7, *(_QWORD *)(a2 + 8), node__init);
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v9 = palloc(0x68uLL);
    pg_query__type_name__init(v9);
    result = _outTypeName_0(v9, *(_QWORD *)(a2 + 16));
    *(_QWORD *)(v3 + 40) = v9;
  }
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t _outWithClause_0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  double node__init;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(int *)(v4 + 4);
    *(_QWORD *)(result + 24) = v5;
    result = palloc(8 * v5);
    *(_QWORD *)(v3 + 32) = result;
    if (*(_QWORD *)(v3 + 24))
    {
      v6 = 0;
      v7 = 1;
      do
      {
        v8 = palloc(0x28uLL);
        node__init = pg_query__node__init(v8);
        *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * v6) = v8;
        result = _outNode_0(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * v6), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 8 * v6), node__init);
        v6 = v7++;
      }
      while (*(_QWORD *)(v3 + 24) > v6);
    }
  }
  *(_DWORD *)(v3 + 40) = *(unsigned __int8 *)(a2 + 16);
  *(_DWORD *)(v3 + 44) = *(_DWORD *)(a2 + 20);
  return result;
}

const char *_outInferClause_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  double node__init;
  uint64_t v10;
  double v11;
  const char *result;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(int *)(v4 + 4);
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = palloc(8 * v5);
    if (*(_QWORD *)(a1 + 24))
    {
      v6 = 0;
      v7 = 1;
      do
      {
        v8 = palloc(0x28uLL);
        node__init = pg_query__node__init(v8);
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v8;
        _outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 8 * v6), node__init);
        v6 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v6);
    }
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v10 = palloc(0x28uLL);
    v11 = pg_query__node__init(v10);
    *(_QWORD *)(a1 + 40) = v10;
    _outNode_0(v10, *(_QWORD *)(a2 + 16), v11);
  }
  result = *(const char **)(a2 + 24);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(_QWORD *)(a1 + 48) = result;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t _outOnConflictClause_0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  double node__init;
  uint64_t v13;
  double v14;

  v3 = result;
  v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 3)
    v5 = v4 + 1;
  else
    v5 = -1;
  *(_DWORD *)(result + 24) = v5;
  if (*(_QWORD *)(a2 + 8))
  {
    v6 = (_OWORD *)palloc(0x40uLL);
    pg_query__infer_clause__init(v6);
    result = (uint64_t)_outInferClause_0((uint64_t)v6, *(_QWORD *)(a2 + 8));
    *(_QWORD *)(v3 + 32) = v6;
  }
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    v8 = *(int *)(v7 + 4);
    *(_QWORD *)(v3 + 40) = v8;
    result = palloc(8 * v8);
    *(_QWORD *)(v3 + 48) = result;
    if (*(_QWORD *)(v3 + 40))
    {
      v9 = 0;
      v10 = 1;
      do
      {
        v11 = palloc(0x28uLL);
        node__init = pg_query__node__init(v11);
        *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v9) = v11;
        result = _outNode_0(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v9), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16) + 8 * v9), node__init);
        v9 = v10++;
      }
      while (*(_QWORD *)(v3 + 40) > v9);
    }
  }
  if (*(_QWORD *)(a2 + 24))
  {
    v13 = palloc(0x28uLL);
    v14 = pg_query__node__init(v13);
    *(_QWORD *)(v3 + 56) = v13;
    result = _outNode_0(v13, *(_QWORD *)(a2 + 24), v14);
  }
  *(_DWORD *)(v3 + 64) = *(_DWORD *)(a2 + 32);
  return result;
}

const char *_outCommonTableExpr_0(uint64_t a1, uint64_t a2)
{
  const char *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  double node__init;
  unsigned int v11;
  int v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  double v38;

  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(_QWORD *)(a1 + 24) = result;
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = *(int *)(v5 + 4);
    *(_QWORD *)(a1 + 32) = v6;
    result = (const char *)palloc(8 * v6);
    *(_QWORD *)(a1 + 40) = result;
    if (*(_QWORD *)(a1 + 32))
    {
      v7 = 0;
      v8 = 1;
      do
      {
        v9 = palloc(0x28uLL);
        node__init = pg_query__node__init(v9);
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v7) = v9;
        result = (const char *)_outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v7), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16) + 8 * v7), node__init);
        v7 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v7);
    }
  }
  v11 = *(_DWORD *)(a2 + 24);
  if (v11 < 3)
    v12 = v11 + 1;
  else
    v12 = -1;
  *(_DWORD *)(a1 + 48) = v12;
  if (*(_QWORD *)(a2 + 32))
  {
    v13 = palloc(0x28uLL);
    v14 = pg_query__node__init(v13);
    *(_QWORD *)(a1 + 56) = v13;
    result = (const char *)_outNode_0(v13, *(_QWORD *)(a2 + 32), v14);
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 68) = *(unsigned __int8 *)(a2 + 44);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  if (v15)
  {
    v16 = *(int *)(v15 + 4);
    *(_QWORD *)(a1 + 80) = v16;
    result = (const char *)palloc(8 * v16);
    *(_QWORD *)(a1 + 88) = result;
    if (*(_QWORD *)(a1 + 80))
    {
      v17 = 0;
      v18 = 1;
      do
      {
        v19 = palloc(0x28uLL);
        v20 = pg_query__node__init(v19);
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v17) = v19;
        result = (const char *)_outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v17), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 16) + 8 * v17), v20);
        v17 = v18++;
      }
      while (*(_QWORD *)(a1 + 80) > v17);
    }
  }
  v21 = *(_QWORD *)(a2 + 64);
  if (v21)
  {
    v22 = *(int *)(v21 + 4);
    *(_QWORD *)(a1 + 96) = v22;
    result = (const char *)palloc(8 * v22);
    *(_QWORD *)(a1 + 104) = result;
    if (*(_QWORD *)(a1 + 96))
    {
      v23 = 0;
      v24 = 1;
      do
      {
        v25 = palloc(0x28uLL);
        v26 = pg_query__node__init(v25);
        *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v23) = v25;
        result = (const char *)_outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v23), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 16) + 8 * v23), v26);
        v23 = v24++;
      }
      while (*(_QWORD *)(a1 + 96) > v23);
    }
  }
  v27 = *(_QWORD *)(a2 + 72);
  if (v27)
  {
    v28 = *(int *)(v27 + 4);
    *(_QWORD *)(a1 + 112) = v28;
    result = (const char *)palloc(8 * v28);
    *(_QWORD *)(a1 + 120) = result;
    if (*(_QWORD *)(a1 + 112))
    {
      v29 = 0;
      v30 = 1;
      do
      {
        v31 = palloc(0x28uLL);
        v32 = pg_query__node__init(v31);
        *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v29) = v31;
        result = (const char *)_outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v29), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 16) + 8 * v29), v32);
        v29 = v30++;
      }
      while (*(_QWORD *)(a1 + 112) > v29);
    }
  }
  v33 = *(_QWORD *)(a2 + 80);
  if (v33)
  {
    v34 = *(int *)(v33 + 4);
    *(_QWORD *)(a1 + 128) = v34;
    result = (const char *)palloc(8 * v34);
    *(_QWORD *)(a1 + 136) = result;
    if (*(_QWORD *)(a1 + 128))
    {
      v35 = 0;
      v36 = 1;
      do
      {
        v37 = palloc(0x28uLL);
        v38 = pg_query__node__init(v37);
        *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v35) = v37;
        result = (const char *)_outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v35), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 16) + 8 * v35), v38);
        v35 = v36++;
      }
      while (*(_QWORD *)(a1 + 128) > v35);
    }
  }
  return result;
}

const char *_outRoleSpec_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  const char *result;

  v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 4)
    v5 = v4 + 1;
  else
    v5 = -1;
  *(_DWORD *)(a1 + 24) = v5;
  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(_QWORD *)(a1 + 32) = result;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 16);
  return result;
}

const char *_outPartitionElem_0(uint64_t a1, uint64_t a2)
{
  const char *result;
  uint64_t v5;
  double node__init;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  double v18;

  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(_QWORD *)(a1 + 24) = result;
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v5 = palloc(0x28uLL);
    node__init = pg_query__node__init(v5);
    *(_QWORD *)(a1 + 32) = v5;
    result = (const char *)_outNode_0(v5, *(_QWORD *)(a2 + 16), node__init);
  }
  v7 = *(_QWORD *)(a2 + 24);
  if (v7)
  {
    v8 = *(int *)(v7 + 4);
    *(_QWORD *)(a1 + 40) = v8;
    result = (const char *)palloc(8 * v8);
    *(_QWORD *)(a1 + 48) = result;
    if (*(_QWORD *)(a1 + 40))
    {
      v9 = 0;
      v10 = 1;
      do
      {
        v11 = palloc(0x28uLL);
        v12 = pg_query__node__init(v11);
        *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v9) = v11;
        result = (const char *)_outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v9), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) + 8 * v9), v12);
        v9 = v10++;
      }
      while (*(_QWORD *)(a1 + 40) > v9);
    }
  }
  v13 = *(_QWORD *)(a2 + 32);
  if (v13)
  {
    v14 = *(int *)(v13 + 4);
    *(_QWORD *)(a1 + 56) = v14;
    result = (const char *)palloc(8 * v14);
    *(_QWORD *)(a1 + 64) = result;
    if (*(_QWORD *)(a1 + 56))
    {
      v15 = 0;
      v16 = 1;
      do
      {
        v17 = palloc(0x28uLL);
        v18 = pg_query__node__init(v17);
        *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15) = v17;
        result = (const char *)_outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 16) + 8 * v15), v18);
        v15 = v16++;
      }
      while (*(_QWORD *)(a1 + 56) > v15);
    }
  }
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 40);
  return result;
}

const char *_outPartitionSpec_0(uint64_t a1, uint64_t a2)
{
  const char *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  double node__init;

  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(_QWORD *)(a1 + 24) = result;
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = *(int *)(v5 + 4);
    *(_QWORD *)(a1 + 32) = v6;
    result = (const char *)palloc(8 * v6);
    *(_QWORD *)(a1 + 40) = result;
    if (*(_QWORD *)(a1 + 32))
    {
      v7 = 0;
      v8 = 1;
      do
      {
        v9 = palloc(0x28uLL);
        node__init = pg_query__node__init(v9);
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v7) = v9;
        result = (const char *)_outNode_0(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v7), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16) + 8 * v7), node__init);
        v7 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v7);
    }
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 24);
  return result;
}

_BYTE *_outPartitionBoundSpec_0(_BYTE *result, uint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  double node__init;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  double v21;

  v3 = result;
  if (*(_BYTE *)(a2 + 4))
  {
    result = (_BYTE *)palloc(2uLL);
    *((_QWORD *)v3 + 3) = result;
    *result = *(_BYTE *)(a2 + 4);
    *(_BYTE *)(*((_QWORD *)v3 + 3) + 1) = 0;
  }
  *((_DWORD *)v3 + 8) = *(unsigned __int8 *)(a2 + 5);
  *((_DWORD *)v3 + 9) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v3 + 10) = *(_DWORD *)(a2 + 12);
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(int *)(v4 + 4);
    *((_QWORD *)v3 + 6) = v5;
    result = (_BYTE *)palloc(8 * v5);
    *((_QWORD *)v3 + 7) = result;
    if (*((_QWORD *)v3 + 6))
    {
      v6 = 0;
      v7 = 1;
      do
      {
        v8 = palloc(0x28uLL);
        node__init = pg_query__node__init(v8);
        *(_QWORD *)(*((_QWORD *)v3 + 7) + 8 * v6) = v8;
        result = (_BYTE *)_outNode_0(*(_QWORD *)(*((_QWORD *)v3 + 7) + 8 * v6), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16) + 8 * v6), node__init);
        v6 = v7++;
      }
      while (*((_QWORD *)v3 + 6) > v6);
    }
  }
  v10 = *(_QWORD *)(a2 + 24);
  if (v10)
  {
    v11 = *(int *)(v10 + 4);
    *((_QWORD *)v3 + 8) = v11;
    result = (_BYTE *)palloc(8 * v11);
    *((_QWORD *)v3 + 9) = result;
    if (*((_QWORD *)v3 + 8))
    {
      v12 = 0;
      v13 = 1;
      do
      {
        v14 = palloc(0x28uLL);
        v15 = pg_query__node__init(v14);
        *(_QWORD *)(*((_QWORD *)v3 + 9) + 8 * v12) = v14;
        result = (_BYTE *)_outNode_0(*(_QWORD *)(*((_QWORD *)v3 + 9) + 8 * v12), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) + 8 * v12), v15);
        v12 = v13++;
      }
      while (*((_QWORD *)v3 + 8) > v12);
    }
  }
  v16 = *(_QWORD *)(a2 + 32);
  if (v16)
  {
    v17 = *(int *)(v16 + 4);
    *((_QWORD *)v3 + 10) = v17;
    result = (_BYTE *)palloc(8 * v17);
    *((_QWORD *)v3 + 11) = result;
    if (*((_QWORD *)v3 + 10))
    {
      v18 = 0;
      v19 = 1;
      do
      {
        v20 = palloc(0x28uLL);
        v21 = pg_query__node__init(v20);
        *(_QWORD *)(*((_QWORD *)v3 + 11) + 8 * v18) = v20;
        result = (_BYTE *)_outNode_0(*(_QWORD *)(*((_QWORD *)v3 + 11) + 8 * v18), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 16) + 8 * v18), v21);
        v18 = v19++;
      }
      while (*((_QWORD *)v3 + 10) > v18);
    }
  }
  *((_DWORD *)v3 + 24) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t _outPartitionRangeDatum_0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  double node__init;

  v3 = result;
  v4 = *(_DWORD *)(a2 + 4);
  v5 = v4 + 1;
  v6 = v4 + 2;
  if (v5 >= 3)
    v6 = -1;
  *(_DWORD *)(result + 24) = v6;
  if (*(_QWORD *)(a2 + 8))
  {
    v7 = palloc(0x28uLL);
    node__init = pg_query__node__init(v7);
    *(_QWORD *)(v3 + 32) = v7;
    result = _outNode_0(v7, *(_QWORD *)(a2 + 8), node__init);
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a2 + 16);
  return result;
}

char *_outPartitionCmd_0(char *result, uint64_t a2)
{
  char *v3;
  _OWORD *v4;
  _BYTE *v5;

  v3 = result;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    result = _outRangeVar_0((uint64_t)v4, *(_QWORD *)(a2 + 8));
    *((_QWORD *)v3 + 3) = v4;
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v5 = (_BYTE *)palloc(0x68uLL);
    pg_query__partition_bound_spec__init((uint64_t)v5);
    result = _outPartitionBoundSpec_0(v5, *(_QWORD *)(a2 + 16));
    *((_QWORD *)v3 + 4) = v5;
  }
  return result;
}

uint64_t _outVacuumRelation_0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  double node__init;

  v3 = result;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    result = (uint64_t)_outRangeVar_0((uint64_t)v4, *(_QWORD *)(a2 + 8));
    *(_QWORD *)(v3 + 24) = v4;
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *(int *)(v5 + 4);
    *(_QWORD *)(v3 + 40) = v6;
    result = palloc(8 * v6);
    *(_QWORD *)(v3 + 48) = result;
    if (*(_QWORD *)(v3 + 40))
    {
      v7 = 0;
      v8 = 1;
      do
      {
        v9 = palloc(0x28uLL);
        node__init = pg_query__node__init(v9);
        *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v7) = v9;
        result = _outNode_0(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v7), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) + 8 * v7), node__init);
        v7 = v8++;
      }
      while (*(_QWORD *)(v3 + 40) > v7);
    }
  }
  return result;
}

const char *_outInlineCodeBlock_0(uint64_t a1, uint64_t a2)
{
  const char *result;

  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(_QWORD *)(a1 + 24) = result;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(unsigned __int8 *)(a2 + 20);
  *(_DWORD *)(a1 + 40) = *(unsigned __int8 *)(a2 + 21);
  return result;
}

uint64_t pg_query_raw_parse(uint64_t a1)
{
  const char *v1;
  uint64_t *v2;
  uint64_t *v3;
  double v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  _OWORD v16[12];
  int v17;
  char __s1[4097];
  uint64_t v19;

  v1 = (const char *)MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v19 = *MEMORY[0x1E0C80C00];
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  v5 = (uint64_t *)CurrentMemoryContext(v4);
  v6 = *v5;
  bzero(__s1, 0x1001uLL);
  v7 = (_QWORD *)PG_exception_stack();
  v8 = *v7;
  v9 = v7;
  v10 = (_QWORD *)error_context_stack();
  v11 = *v10;
  v12 = v10;
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  if (sigsetjmp((int *)v16, 0))
  {
    *v9 = v8;
    *v12 = v11;
    *v5 = v6;
    v13 = CopyErrorData();
    v14 = malloc_type_malloc(0x28uLL, 0x1010040E871EB1AuLL);
    *v14 = strdup(*(const char **)(v13 + 64));
    v14[2] = strdup(*(const char **)(v13 + 16));
    v14[1] = strdup(*(const char **)(v13 + 32));
    v14[4] = 0;
    *((_DWORD *)v14 + 6) = *(_DWORD *)(v13 + 24);
    *((_DWORD *)v14 + 7) = *(_DWORD *)(v13 + 160);
    v3[2] = (uint64_t)v14;
    result = FlushErrorState();
  }
  else
  {
    *v9 = v16;
    *v3 = raw_parser(v1);
    result = (uint64_t)strdup(__s1);
    v3[1] = result;
  }
  *v9 = v8;
  *v12 = v11;
  return result;
}

uint64_t pg_query_parse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const char *nodes_to_json;
  uint64_t v6;
  __int128 v7;

  pg_query_enter_memory_context();
  pg_query_raw_parse(a1);
  *(_OWORD *)(a2 + 8) = v7;
  nodes_to_json = (const char *)pg_query_nodes_to_json(v6);
  *(_QWORD *)a2 = strdup(nodes_to_json);
  pfree((uint64_t)nodes_to_json);
  return pg_query_exit_memory_context();
}

uint64_t pg_query_parse_protobuf@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;

  pg_query_enter_memory_context();
  pg_query_raw_parse(a1);
  *(_OWORD *)(a2 + 16) = v7;
  *(_QWORD *)a2 = pg_query_nodes_to_protobuf(v6);
  *(_QWORD *)(a2 + 8) = v4;
  return pg_query_exit_memory_context();
}

void pg_query_free_parse_result(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    pg_query_free_error(v2);
  free(*(void **)a1);
  free(*(void **)(a1 + 8));
}

void pg_query_free_protobuf_parse_result(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    pg_query_free_error(v2);
  free(*(void **)(a1 + 8));
  free(*(void **)(a1 + 16));
}

uint64_t pg_query_protobuf_to_nodes(unsigned int a1, unsigned __int8 *a2)
{
  void **parse_result__unpack;
  void **v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  parse_result__unpack = (void **)pg_query__parse_result__unpack(0, a1, a2);
  v3 = parse_result__unpack;
  if (parse_result__unpack[4])
  {
    v4 = *(_QWORD *)parse_result__unpack[5];
    v5 = (uint64_t *)CurrentMemoryContext();
    v6 = MemoryContextAllocZeroAligned(*v5, 0x18uLL);
    *(_DWORD *)v6 = 230;
    v7 = *(_QWORD *)(v4 + 24);
    if (v7)
      *(_QWORD *)(v6 + 8) = _readNode(v7);
    *(_DWORD *)(v6 + 16) = *(_DWORD *)(v4 + 32);
    *(_DWORD *)(v6 + 20) = *(_DWORD *)(v4 + 36);
    list_make1_impl(226, v6);
    v9 = v8;
    if ((unint64_t)v3[4] >= 2)
    {
      v10 = 1;
      do
      {
        v11 = *((_QWORD *)v3[5] + v10);
        v12 = MemoryContextAllocZeroAligned(*v5, 0x18uLL);
        *(_DWORD *)v12 = 230;
        v13 = *(_QWORD *)(v11 + 24);
        if (v13)
          *(_QWORD *)(v12 + 8) = _readNode(v13);
        *(_DWORD *)(v12 + 16) = *(_DWORD *)(v11 + 32);
        *(_DWORD *)(v12 + 20) = *(_DWORD *)(v11 + 36);
        v9 = lappend(v9, v12);
        ++v10;
      }
      while (v10 < (unint64_t)v3[4]);
    }
  }
  else
  {
    v9 = 0;
  }
  pg_query__parse_result__free_unpacked(v3, 0);
  return v9;
}

unint64_t _readRawStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 230;
  if (*(_QWORD *)(a1 + 24))
    *(_QWORD *)(v3 + 8) = _readNode();
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 36);
  return v3;
}

_DWORD *_readNode(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *result;
  uint64_t *v3;
  _DWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;

  v1 = 0;
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      goto LABEL_177;
    case 1:
      return (_DWORD *)_readAlias(*(_QWORD *)(a1 + 32));
    case 2:
      return (_DWORD *)_readRangeVar(*(_QWORD *)(a1 + 32));
    case 3:
      return (_DWORD *)_readTableFunc(*(_QWORD *)(a1 + 32));
    case 4:
      v3 = (uint64_t *)CurrentMemoryContext();
      v4 = (_DWORD *)MemoryContextAllocZero(*v3, 4uLL);
      v1 = v4;
      v5 = 105;
      goto LABEL_176;
    case 5:
      return (_DWORD *)_readVar(*(_DWORD **)(a1 + 32));
    case 6:
      return _readParam(*(_DWORD **)(a1 + 32));
    case 7:
      return (_DWORD *)_readAggref(*(_QWORD *)(a1 + 32));
    case 8:
      return (_DWORD *)_readGroupingFunc(*(_QWORD *)(a1 + 32));
    case 9:
      return (_DWORD *)_readWindowFunc(*(_QWORD *)(a1 + 32));
    case 0xA:
      return (_DWORD *)_readSubscriptingRef(*(_QWORD *)(a1 + 32));
    case 0xB:
      return (_DWORD *)_readFuncExpr(*(_QWORD *)(a1 + 32));
    case 0xC:
      return (_DWORD *)_readNamedArgExpr(*(_QWORD *)(a1 + 32));
    case 0xD:
      return (_DWORD *)_readOpExpr(*(_QWORD *)(a1 + 32));
    case 0xE:
      return (_DWORD *)_readDistinctExpr(*(_QWORD *)(a1 + 32));
    case 0xF:
      return (_DWORD *)_readNullIfExpr(*(_QWORD *)(a1 + 32));
    case 0x10:
      return (_DWORD *)_readScalarArrayOpExpr(*(_QWORD *)(a1 + 32));
    case 0x11:
      return _readBoolExpr(*(_QWORD *)(a1 + 32));
    case 0x12:
      return _readSubLink(*(_QWORD *)(a1 + 32));
    case 0x13:
      return _readSubPlan(*(_QWORD *)(a1 + 32));
    case 0x14:
      return (_DWORD *)_readAlternativeSubPlan(*(_QWORD *)(a1 + 32));
    case 0x15:
      return (_DWORD *)_readFieldSelect(*(_QWORD *)(a1 + 32));
    case 0x16:
      return (_DWORD *)_readFieldStore(*(_QWORD *)(a1 + 32));
    case 0x17:
      return (_DWORD *)_readRelabelType(*(_QWORD *)(a1 + 32));
    case 0x18:
      return (_DWORD *)_readCoerceViaIO(*(_QWORD *)(a1 + 32));
    case 0x19:
      return (_DWORD *)_readArrayCoerceExpr(*(_QWORD *)(a1 + 32));
    case 0x1A:
      return (_DWORD *)_readConvertRowtypeExpr(*(_QWORD *)(a1 + 32));
    case 0x1B:
      return (_DWORD *)_readCollateExpr(*(_QWORD *)(a1 + 32));
    case 0x1C:
      return (_DWORD *)_readCaseExpr(*(_QWORD *)(a1 + 32));
    case 0x1D:
      return (_DWORD *)_readCaseWhen(*(_QWORD *)(a1 + 32));
    case 0x1E:
      return _readCaseTestExpr(*(_DWORD **)(a1 + 32));
    case 0x1F:
      return (_DWORD *)_readArrayExpr(*(_QWORD *)(a1 + 32));
    case 0x20:
      return (_DWORD *)_readRowExpr(*(_QWORD *)(a1 + 32));
    case 0x21:
      return _readRowCompareExpr(*(_QWORD *)(a1 + 32));
    case 0x22:
      return (_DWORD *)_readCoalesceExpr(*(_QWORD *)(a1 + 32));
    case 0x23:
      return (_DWORD *)_readMinMaxExpr(*(_QWORD *)(a1 + 32));
    case 0x24:
      return _readSQLValueFunction(*(_DWORD **)(a1 + 32));
    case 0x25:
      return _readXmlExpr(*(_QWORD *)(a1 + 32));
    case 0x26:
      return (_DWORD *)_readNullTest(*(_QWORD *)(a1 + 32));
    case 0x27:
      return (_DWORD *)_readBooleanTest(*(_QWORD *)(a1 + 32));
    case 0x28:
      return (_DWORD *)_readCoerceToDomain(*(_QWORD *)(a1 + 32));
    case 0x29:
      return _readCoerceToDomainValue(*(_DWORD **)(a1 + 32));
    case 0x2A:
      return _readSetToDefault(*(_DWORD **)(a1 + 32));
    case 0x2B:
      return (_DWORD *)_readCurrentOfExpr(*(_QWORD *)(a1 + 32));
    case 0x2C:
      v18 = *(_QWORD *)(a1 + 32);
      v19 = (uint64_t *)CurrentMemoryContext();
      result = (_DWORD *)MemoryContextAllocZero(*v19, 0xCuLL);
      *result = 146;
      result[1] = *(_DWORD *)(v18 + 32);
      result[2] = *(_DWORD *)(v18 + 36);
      return result;
    case 0x2D:
      return (_DWORD *)_readInferenceElem(*(_QWORD *)(a1 + 32));
    case 0x2E:
      return (_DWORD *)_readTargetEntry(*(_QWORD *)(a1 + 32));
    case 0x2F:
      v6 = *(_QWORD *)(a1 + 32);
      v7 = (uint64_t *)CurrentMemoryContext();
      result = (_DWORD *)MemoryContextAllocZeroAligned(*v7, 8uLL);
      *result = 149;
      result[1] = *(_DWORD *)(v6 + 24);
      return result;
    case 0x30:
      return (_DWORD *)_readJoinExpr(*(_QWORD *)(a1 + 32));
    case 0x31:
      return (_DWORD *)_readFromExpr(*(_QWORD *)(a1 + 32));
    case 0x32:
      return _readOnConflictExpr(*(_QWORD *)(a1 + 32));
    case 0x33:
      return (_DWORD *)_readIntoClause(*(_QWORD *)(a1 + 32));
    case 0x34:
      return (_DWORD *)_readRawStmt(*(_QWORD *)(a1 + 32));
    case 0x35:
      return (_DWORD *)_readQuery(*(_QWORD *)(a1 + 32));
    case 0x36:
      return (_DWORD *)_readInsertStmt(*(_QWORD *)(a1 + 32));
    case 0x37:
      return (_DWORD *)_readDeleteStmt(*(_QWORD *)(a1 + 32));
    case 0x38:
      return (_DWORD *)_readUpdateStmt(*(_QWORD *)(a1 + 32));
    case 0x39:
      return (_DWORD *)_readSelectStmt(*(_QWORD *)(a1 + 32));
    case 0x3A:
      return (_DWORD *)_readAlterTableStmt(*(_QWORD *)(a1 + 32));
    case 0x3B:
      return _readAlterTableCmd(*(_QWORD *)(a1 + 32));
    case 0x3C:
      return (_DWORD *)_readAlterDomainStmt(*(_QWORD *)(a1 + 32));
    case 0x3D:
      return _readSetOperationStmt(*(_QWORD *)(a1 + 32));
    case 0x3E:
      return (_DWORD *)_readGrantStmt(*(_QWORD *)(a1 + 32));
    case 0x3F:
      return (_DWORD *)_readGrantRoleStmt(*(_QWORD *)(a1 + 32));
    case 0x40:
      return (_DWORD *)_readAlterDefaultPrivilegesStmt(*(_QWORD *)(a1 + 32));
    case 0x41:
      return (_DWORD *)_readClosePortalStmt(*(_QWORD *)(a1 + 32));
    case 0x42:
      return (_DWORD *)_readClusterStmt(*(_QWORD *)(a1 + 32));
    case 0x43:
      return (_DWORD *)_readCopyStmt(*(_QWORD *)(a1 + 32));
    case 0x44:
      return (_DWORD *)_readCreateStmt(*(_QWORD *)(a1 + 32));
    case 0x45:
      return (_DWORD *)_readDefineStmt(*(_QWORD *)(a1 + 32));
    case 0x46:
      return (_DWORD *)_readDropStmt(*(_QWORD *)(a1 + 32));
    case 0x47:
      return (_DWORD *)_readTruncateStmt(*(_QWORD *)(a1 + 32));
    case 0x48:
      return _readCommentStmt(*(_QWORD *)(a1 + 32));
    case 0x49:
      return (_DWORD *)_readFetchStmt(*(_QWORD *)(a1 + 32));
    case 0x4A:
      return (_DWORD *)_readIndexStmt(*(_QWORD *)(a1 + 32));
    case 0x4B:
      return (_DWORD *)_readCreateFunctionStmt(*(_QWORD *)(a1 + 32));
    case 0x4C:
      return _readAlterFunctionStmt(*(_QWORD *)(a1 + 32));
    case 0x4D:
      return (_DWORD *)_readDoStmt(*(_QWORD *)(a1 + 32));
    case 0x4E:
      return _readRenameStmt(*(_QWORD *)(a1 + 32));
    case 0x4F:
      return (_DWORD *)_readRuleStmt(*(_QWORD *)(a1 + 32));
    case 0x50:
      return (_DWORD *)_readNotifyStmt(*(_QWORD *)(a1 + 32));
    case 0x51:
      return (_DWORD *)_readListenStmt(*(_QWORD *)(a1 + 32));
    case 0x52:
      return (_DWORD *)_readUnlistenStmt(*(_QWORD *)(a1 + 32));
    case 0x53:
      return _readTransactionStmt(*(_QWORD *)(a1 + 32));
    case 0x54:
      return (_DWORD *)_readViewStmt(*(_QWORD *)(a1 + 32));
    case 0x55:
      return (_DWORD *)_readLoadStmt(*(_QWORD *)(a1 + 32));
    case 0x56:
      return (_DWORD *)_readCreateDomainStmt(*(_QWORD *)(a1 + 32));
    case 0x57:
      return (_DWORD *)_readCreatedbStmt(*(_QWORD *)(a1 + 32));
    case 0x58:
      return (_DWORD *)_readDropdbStmt(*(_QWORD *)(a1 + 32));
    case 0x59:
      return (_DWORD *)_readVacuumStmt(*(_QWORD *)(a1 + 32));
    case 0x5A:
      return (_DWORD *)_readExplainStmt(*(_QWORD *)(a1 + 32));
    case 0x5B:
      return (_DWORD *)_readCreateTableAsStmt(*(_QWORD *)(a1 + 32));
    case 0x5C:
      return (_DWORD *)_readCreateSeqStmt(*(_QWORD *)(a1 + 32));
    case 0x5D:
      return (_DWORD *)_readAlterSeqStmt(*(_QWORD *)(a1 + 32));
    case 0x5E:
      return _readVariableSetStmt(*(_QWORD *)(a1 + 32));
    case 0x5F:
      return (_DWORD *)_readVariableShowStmt(*(_QWORD *)(a1 + 32));
    case 0x60:
      return _readDiscardStmt(*(_QWORD *)(a1 + 32));
    case 0x61:
      return (_DWORD *)_readCreateTrigStmt(*(_QWORD *)(a1 + 32));
    case 0x62:
      return (_DWORD *)_readCreatePLangStmt(*(_QWORD *)(a1 + 32));
    case 0x63:
      return _readCreateRoleStmt(*(_QWORD *)(a1 + 32));
    case 0x64:
      return (_DWORD *)_readAlterRoleStmt(*(_QWORD *)(a1 + 32));
    case 0x65:
      return (_DWORD *)_readDropRoleStmt(*(_QWORD *)(a1 + 32));
    case 0x66:
      return (_DWORD *)_readLockStmt(*(_QWORD *)(a1 + 32));
    case 0x67:
      return (_DWORD *)_readConstraintsSetStmt(*(_QWORD *)(a1 + 32));
    case 0x68:
      return _readReindexStmt(*(_QWORD *)(a1 + 32));
    case 0x69:
      v8 = (uint64_t *)CurrentMemoryContext();
      v4 = (_DWORD *)MemoryContextAllocZero(*v8, 4uLL);
      v1 = v4;
      v5 = 284;
      goto LABEL_176;
    case 0x6A:
      return (_DWORD *)_readCreateSchemaStmt(*(_QWORD *)(a1 + 32));
    case 0x6B:
      return (_DWORD *)_readAlterDatabaseStmt(*(_QWORD *)(a1 + 32));
    case 0x6C:
      return (_DWORD *)_readAlterDatabaseSetStmt(*(_QWORD *)(a1 + 32));
    case 0x6D:
      return (_DWORD *)_readAlterRoleSetStmt(*(_QWORD **)(a1 + 32));
    case 0x6E:
      return (_DWORD *)_readCreateConversionStmt(*(_QWORD *)(a1 + 32));
    case 0x6F:
      return (_DWORD *)_readCreateCastStmt(*(_QWORD *)(a1 + 32));
    case 0x70:
      return (_DWORD *)_readCreateOpClassStmt(*(_QWORD *)(a1 + 32));
    case 0x71:
      return (_DWORD *)_readCreateOpFamilyStmt(*(_QWORD *)(a1 + 32));
    case 0x72:
      return (_DWORD *)_readAlterOpFamilyStmt(*(_QWORD *)(a1 + 32));
    case 0x73:
      return (_DWORD *)_readPrepareStmt(*(_QWORD *)(a1 + 32));
    case 0x74:
      return (_DWORD *)_readExecuteStmt(*(_QWORD *)(a1 + 32));
    case 0x75:
      return (_DWORD *)_readDeallocateStmt(*(_QWORD *)(a1 + 32));
    case 0x76:
      return (_DWORD *)_readDeclareCursorStmt(*(_QWORD *)(a1 + 32));
    case 0x77:
      return (_DWORD *)_readCreateTableSpaceStmt(*(_QWORD *)(a1 + 32));
    case 0x78:
      return (_DWORD *)_readDropTableSpaceStmt(*(_QWORD *)(a1 + 32));
    case 0x79:
      return _readAlterObjectDependsStmt(*(_QWORD *)(a1 + 32));
    case 0x7A:
      return _readAlterObjectSchemaStmt(*(_QWORD *)(a1 + 32));
    case 0x7B:
      return _readAlterOwnerStmt(*(_QWORD *)(a1 + 32));
    case 0x7C:
      return (_DWORD *)_readAlterOperatorStmt(*(_QWORD *)(a1 + 32));
    case 0x7D:
      return (_DWORD *)_readAlterTypeStmt(*(_QWORD *)(a1 + 32));
    case 0x7E:
      return (_DWORD *)_readDropOwnedStmt(*(_QWORD *)(a1 + 32));
    case 0x7F:
      return (_DWORD *)_readReassignOwnedStmt(*(_QWORD *)(a1 + 32));
    case 0x80:
      return (_DWORD *)_readCompositeTypeStmt(*(_QWORD *)(a1 + 32));
    case 0x81:
      return (_DWORD *)_readCreateEnumStmt(*(_QWORD *)(a1 + 32));
    case 0x82:
      return (_DWORD *)_readCreateRangeStmt(*(_QWORD *)(a1 + 32));
    case 0x83:
      return (_DWORD *)_readAlterEnumStmt(*(_QWORD *)(a1 + 32));
    case 0x84:
      return (_DWORD *)_readAlterTSDictionaryStmt(*(_QWORD *)(a1 + 32));
    case 0x85:
      return _readAlterTSConfigurationStmt(*(_QWORD *)(a1 + 32));
    case 0x86:
      return (_DWORD *)_readCreateFdwStmt(*(_QWORD *)(a1 + 32));
    case 0x87:
      return (_DWORD *)_readAlterFdwStmt(*(_QWORD *)(a1 + 32));
    case 0x88:
      return (_DWORD *)_readCreateForeignServerStmt(*(_QWORD *)(a1 + 32));
    case 0x89:
      return (_DWORD *)_readAlterForeignServerStmt(*(_QWORD *)(a1 + 32));
    case 0x8A:
      return (_DWORD *)_readCreateUserMappingStmt(*(_QWORD *)(a1 + 32));
    case 0x8B:
      return (_DWORD *)_readAlterUserMappingStmt(*(_QWORD *)(a1 + 32));
    case 0x8C:
      return (_DWORD *)_readDropUserMappingStmt(*(_QWORD *)(a1 + 32));
    case 0x8D:
      return (_DWORD *)_readAlterTableSpaceOptionsStmt(*(_QWORD *)(a1 + 32));
    case 0x8E:
      return (_DWORD *)_readAlterTableMoveAllStmt(*(_QWORD *)(a1 + 32));
    case 0x8F:
      return _readSecLabelStmt(*(_QWORD *)(a1 + 32));
    case 0x90:
      return (_DWORD *)_readCreateForeignTableStmt(*(_QWORD *)(a1 + 32));
    case 0x91:
      return (_DWORD *)_readImportForeignSchemaStmt(*(_QWORD *)(a1 + 32));
    case 0x92:
      return (_DWORD *)_readCreateExtensionStmt(*(_QWORD *)(a1 + 32));
    case 0x93:
      return (_DWORD *)_readAlterExtensionStmt(*(_QWORD *)(a1 + 32));
    case 0x94:
      return (_DWORD *)_readAlterExtensionContentsStmt(*(_QWORD *)(a1 + 32));
    case 0x95:
      return (_DWORD *)_readCreateEventTrigStmt(*(_QWORD *)(a1 + 32));
    case 0x96:
      return (_DWORD *)_readAlterEventTrigStmt(*(_QWORD *)(a1 + 32));
    case 0x97:
      return (_DWORD *)_readRefreshMatViewStmt(*(_QWORD *)(a1 + 32));
    case 0x98:
      return (_DWORD *)_readReplicaIdentityStmt(*(_QWORD *)(a1 + 32));
    case 0x99:
      return (_DWORD *)_readAlterSystemStmt(*(_QWORD *)(a1 + 32));
    case 0x9A:
      return (_DWORD *)_readCreatePolicyStmt(*(_QWORD *)(a1 + 32));
    case 0x9B:
      return (_DWORD *)_readAlterPolicyStmt(*(_QWORD *)(a1 + 32));
    case 0x9C:
      return (_DWORD *)_readCreateTransformStmt(*(_QWORD *)(a1 + 32));
    case 0x9D:
      return (_DWORD *)_readCreateAmStmt(*(_QWORD *)(a1 + 32));
    case 0x9E:
      return (_DWORD *)_readCreatePublicationStmt(*(_QWORD *)(a1 + 32));
    case 0x9F:
      return (_DWORD *)_readAlterPublicationStmt(*(_QWORD *)(a1 + 32));
    case 0xA0:
      return (_DWORD *)_readCreateSubscriptionStmt(*(_QWORD *)(a1 + 32));
    case 0xA1:
      return _readAlterSubscriptionStmt(*(_QWORD *)(a1 + 32));
    case 0xA2:
      return (_DWORD *)_readDropSubscriptionStmt(*(_QWORD *)(a1 + 32));
    case 0xA3:
      return (_DWORD *)_readCreateStatsStmt(*(_QWORD *)(a1 + 32));
    case 0xA4:
      return (_DWORD *)_readAlterCollationStmt(*(_QWORD *)(a1 + 32));
    case 0xA5:
      return (_DWORD *)_readCallStmt(*(_QWORD *)(a1 + 32));
    case 0xA6:
      return (_DWORD *)_readAlterStatsStmt(*(_QWORD *)(a1 + 32));
    case 0xA7:
      return _readAExpr(*(_QWORD *)(a1 + 32));
    case 0xA8:
      return (_DWORD *)_readColumnRef(*(_QWORD *)(a1 + 32));
    case 0xA9:
      v9 = *(_QWORD *)(a1 + 32);
      v10 = (uint64_t *)CurrentMemoryContext();
      result = (_DWORD *)MemoryContextAllocZero(*v10, 0xCuLL);
      *result = 348;
      result[1] = *(_DWORD *)(v9 + 24);
      result[2] = *(_DWORD *)(v9 + 28);
      return result;
    case 0xAA:
      return (_DWORD *)_readAConst(*(_QWORD *)(a1 + 32));
    case 0xAB:
      return (_DWORD *)_readFuncCall(*(_QWORD *)(a1 + 32));
    case 0xAC:
      v11 = (uint64_t *)CurrentMemoryContext();
      v4 = (_DWORD *)MemoryContextAllocZero(*v11, 4uLL);
      v1 = v4;
      v5 = 351;
      goto LABEL_176;
    case 0xAD:
      return (_DWORD *)_readAIndices(*(_QWORD *)(a1 + 32));
    case 0xAE:
      return (_DWORD *)_readAIndirection(*(_QWORD *)(a1 + 32));
    case 0xAF:
      return (_DWORD *)_readAArrayExpr(*(_QWORD *)(a1 + 32));
    case 0xB0:
      return (_DWORD *)_readResTarget(*(_QWORD *)(a1 + 32));
    case 0xB1:
      return (_DWORD *)_readMultiAssignRef(*(_QWORD *)(a1 + 32));
    case 0xB2:
      return (_DWORD *)_readTypeCast(*(_QWORD *)(a1 + 32));
    case 0xB3:
      return (_DWORD *)_readCollateClause(*(_QWORD *)(a1 + 32));
    case 0xB4:
      return (_DWORD *)_readSortBy(*(_QWORD *)(a1 + 32));
    case 0xB5:
      return (_DWORD *)_readWindowDef(*(_QWORD *)(a1 + 32));
    case 0xB6:
      return (_DWORD *)_readRangeSubselect(*(_QWORD *)(a1 + 32));
    case 0xB7:
      return (_DWORD *)_readRangeFunction(*(_QWORD *)(a1 + 32));
    case 0xB8:
      return (_DWORD *)_readRangeTableSample(*(_QWORD *)(a1 + 32));
    case 0xB9:
      return (_DWORD *)_readRangeTableFunc(*(_QWORD *)(a1 + 32));
    case 0xBA:
      return (_DWORD *)_readRangeTableFuncCol(*(_QWORD *)(a1 + 32));
    case 0xBB:
      return (_DWORD *)_readTypeName(*(_QWORD *)(a1 + 32));
    case 0xBC:
      return (_DWORD *)_readColumnDef(*(_QWORD *)(a1 + 32));
    case 0xBD:
      return (_DWORD *)_readIndexElem(*(_QWORD *)(a1 + 32));
    case 0xBE:
      return _readConstraint(*(_QWORD *)(a1 + 32));
    case 0xBF:
      return (_DWORD *)_readDefElem(*(_QWORD *)(a1 + 32));
    case 0xC0:
      return (_DWORD *)_readRangeTblEntry(*(_QWORD *)(a1 + 32));
    case 0xC1:
      return (_DWORD *)_readRangeTblFunction(*(_QWORD *)(a1 + 32));
    case 0xC2:
      return (_DWORD *)_readTableSampleClause(*(_QWORD *)(a1 + 32));
    case 0xC3:
      return _readWithCheckOption(*(_QWORD *)(a1 + 32));
    case 0xC4:
      return (_DWORD *)_readSortGroupClause(*(_DWORD **)(a1 + 32));
    case 0xC5:
      return _readGroupingSet(*(_QWORD *)(a1 + 32));
    case 0xC6:
      return (_DWORD *)_readWindowClause(*(_QWORD *)(a1 + 32));
    case 0xC7:
      return (_DWORD *)_readObjectWithArgs(*(_QWORD *)(a1 + 32));
    case 0xC8:
      return (_DWORD *)_readAccessPriv(*(_QWORD *)(a1 + 32));
    case 0xC9:
      return (_DWORD *)_readCreateOpClassItem(*(_QWORD *)(a1 + 32));
    case 0xCA:
      return (_DWORD *)_readTableLikeClause(*(_QWORD *)(a1 + 32));
    case 0xCB:
      return (_DWORD *)_readFunctionParameter(*(_QWORD *)(a1 + 32));
    case 0xCC:
      return (_DWORD *)_readLockingClause(*(_QWORD *)(a1 + 32));
    case 0xCD:
      return (_DWORD *)_readRowMarkClause(*(_DWORD **)(a1 + 32));
    case 0xCE:
      return (_DWORD *)_readXmlSerialize(*(_QWORD *)(a1 + 32));
    case 0xCF:
      return (_DWORD *)_readWithClause(*(_QWORD *)(a1 + 32));
    case 0xD0:
      return (_DWORD *)_readInferClause(*(_QWORD *)(a1 + 32));
    case 0xD1:
      return _readOnConflictClause(*(_QWORD *)(a1 + 32));
    case 0xD2:
      return (_DWORD *)_readCommonTableExpr(*(_QWORD *)(a1 + 32));
    case 0xD3:
      return _readRoleSpec(*(_QWORD *)(a1 + 32));
    case 0xD4:
      return (_DWORD *)_readTriggerTransition(*(_QWORD *)(a1 + 32));
    case 0xD5:
      return (_DWORD *)_readPartitionElem(*(_QWORD *)(a1 + 32));
    case 0xD6:
      return (_DWORD *)_readPartitionSpec(*(_QWORD *)(a1 + 32));
    case 0xD7:
      return (_DWORD *)_readPartitionBoundSpec(*(_QWORD *)(a1 + 32));
    case 0xD8:
      return _readPartitionRangeDatum(*(_QWORD *)(a1 + 32));
    case 0xD9:
      return (_DWORD *)_readPartitionCmd(*(_QWORD *)(a1 + 32));
    case 0xDA:
      return (_DWORD *)_readVacuumRelation(*(_QWORD *)(a1 + 32));
    case 0xDB:
      return (_DWORD *)_readInlineCodeBlock(*(_QWORD *)(a1 + 32));
    case 0xDC:
      v12 = *(_QWORD *)(a1 + 32);
      v13 = (uint64_t *)CurrentMemoryContext();
      result = (_DWORD *)MemoryContextAllocZeroAligned(*v13, 8uLL);
      *result = 416;
      *((_BYTE *)result + 4) = *(_DWORD *)(v12 + 24) != 0;
      return result;
    case 0xDD:
      return makeInteger(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 24));
    case 0xDE:
      v14 = pstrdup(*(const char **)(*(_QWORD *)(a1 + 32) + 24));
      return (_DWORD *)makeFloat((uint64_t)v14);
    case 0xDF:
      v15 = pstrdup(*(const char **)(*(_QWORD *)(a1 + 32) + 24));
      return (_DWORD *)makeString((uint64_t)v15);
    case 0xE0:
      v16 = pstrdup(*(const char **)(*(_QWORD *)(a1 + 32) + 24));
      return (_DWORD *)makeBitString((uint64_t)v16);
    case 0xE1:
      v17 = (uint64_t *)CurrentMemoryContext();
      v4 = (_DWORD *)MemoryContextAllocZeroAligned(*v17, 0x10uLL);
      v1 = v4;
      v5 = 225;
LABEL_176:
      *v4 = v5;
LABEL_177:
      result = v1;
      break;
    case 0xE2:
      result = (_DWORD *)_readList(*(_QWORD *)(a1 + 32));
      break;
    default:
      _readNode_cold_1((_DWORD *)(a1 + 24));
  }
  return result;
}

unint64_t _readAlias(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 102;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readRangeVar(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  const char *v5;
  const char *v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)v3 = 103;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(const char **)(a1 + 32);
  if (v5 && *v5)
    *(_QWORD *)(v3 + 16) = pstrdup(v5);
  v6 = *(const char **)(a1 + 40);
  if (v6 && *v6)
    *(_QWORD *)(v3 + 24) = pstrdup(v6);
  *(_BYTE *)(v3 + 32) = *(_DWORD *)(a1 + 48) != 0;
  v7 = *(unsigned __int8 **)(a1 + 56);
  if (v7)
  {
    v8 = *v7;
    if (v8)
      *(_BYTE *)(v3 + 33) = v8;
  }
  v9 = *(_QWORD *)(a1 + 64);
  if (v9)
    *(_QWORD *)(v3 + 40) = _readAlias(v9);
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a1 + 72);
  return v3;
}

unint64_t _readTableFunc(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  uint64_t v53;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x68uLL);
  *(_DWORD *)v3 = 104;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, v10);
    *(_QWORD *)(v3 + 16) = v11;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v3 + 16) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 40) > v14);
    }
  }
  v16 = *(_QWORD *)(a1 + 56);
  if (v16)
    *(_QWORD *)(v3 + 24) = _readNode(v16);
  v17 = *(_QWORD *)(a1 + 64);
  if (v17)
    *(_QWORD *)(v3 + 32) = _readNode(v17);
  if (*(_QWORD *)(a1 + 72))
  {
    v18 = _readNode(**(_QWORD **)(a1 + 80));
    list_make1_impl(226, v18);
    *(_QWORD *)(v3 + 40) = v19;
    if (*(_QWORD *)(a1 + 72) >= 2uLL)
    {
      v20 = v19;
      v21 = 2;
      v22 = 1;
      do
      {
        v23 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v22));
        v20 = lappend(v20, v23);
        *(_QWORD *)(v3 + 40) = v20;
        v22 = v21++;
      }
      while (*(_QWORD *)(a1 + 72) > v22);
    }
  }
  if (*(_QWORD *)(a1 + 88))
  {
    v24 = _readNode(**(_QWORD **)(a1 + 96));
    list_make1_impl(226, v24);
    *(_QWORD *)(v3 + 48) = v25;
    if (*(_QWORD *)(a1 + 88) >= 2uLL)
    {
      v26 = v25;
      v27 = 2;
      v28 = 1;
      do
      {
        v29 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v28));
        v26 = lappend(v26, v29);
        *(_QWORD *)(v3 + 48) = v26;
        v28 = v27++;
      }
      while (*(_QWORD *)(a1 + 88) > v28);
    }
  }
  if (*(_QWORD *)(a1 + 104))
  {
    v30 = _readNode(**(_QWORD **)(a1 + 112));
    list_make1_impl(226, v30);
    *(_QWORD *)(v3 + 56) = v31;
    if (*(_QWORD *)(a1 + 104) >= 2uLL)
    {
      v32 = v31;
      v33 = 2;
      v34 = 1;
      do
      {
        v35 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v34));
        v32 = lappend(v32, v35);
        *(_QWORD *)(v3 + 56) = v32;
        v34 = v33++;
      }
      while (*(_QWORD *)(a1 + 104) > v34);
    }
  }
  if (*(_QWORD *)(a1 + 120))
  {
    v36 = _readNode(**(_QWORD **)(a1 + 128));
    list_make1_impl(226, v36);
    *(_QWORD *)(v3 + 64) = v37;
    if (*(_QWORD *)(a1 + 120) >= 2uLL)
    {
      v38 = v37;
      v39 = 2;
      v40 = 1;
      do
      {
        v41 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v40));
        v38 = lappend(v38, v41);
        *(_QWORD *)(v3 + 64) = v38;
        v40 = v39++;
      }
      while (*(_QWORD *)(a1 + 120) > v40);
    }
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v42 = _readNode(**(_QWORD **)(a1 + 144));
    list_make1_impl(226, v42);
    *(_QWORD *)(v3 + 72) = v43;
    if (*(_QWORD *)(a1 + 136) >= 2uLL)
    {
      v44 = v43;
      v45 = 2;
      v46 = 1;
      do
      {
        v47 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v46));
        v44 = lappend(v44, v47);
        *(_QWORD *)(v3 + 72) = v44;
        v46 = v45++;
      }
      while (*(_QWORD *)(a1 + 136) > v46);
    }
  }
  if (*(_QWORD *)(a1 + 152))
  {
    v48 = _readNode(**(_QWORD **)(a1 + 160));
    list_make1_impl(226, v48);
    *(_QWORD *)(v3 + 80) = v49;
    if (*(_QWORD *)(a1 + 152) >= 2uLL)
    {
      v50 = v49;
      v51 = 2;
      v52 = 1;
      do
      {
        v53 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v52));
        v50 = lappend(v50, v53);
        *(_QWORD *)(v3 + 80) = v50;
        v52 = v51++;
      }
      while (*(_QWORD *)(a1 + 152) > v52);
    }
  }
  *(_DWORD *)(v3 + 96) = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(v3 + 100) = *(_DWORD *)(a1 + 188);
  return v3;
}

unint64_t _readVar(_DWORD *a1)
{
  uint64_t *v2;
  unint64_t result;

  v2 = (uint64_t *)CurrentMemoryContext();
  result = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)result = 106;
  *(_DWORD *)(result + 4) = a1[8];
  *(_WORD *)(result + 8) = a1[9];
  *(_DWORD *)(result + 12) = a1[10];
  *(_DWORD *)(result + 16) = a1[11];
  *(_DWORD *)(result + 20) = a1[12];
  *(_DWORD *)(result + 24) = a1[13];
  *(_DWORD *)(result + 28) = a1[14];
  *(_WORD *)(result + 32) = a1[15];
  *(_DWORD *)(result + 36) = a1[16];
  return result;
}

_DWORD *_readParam(_DWORD *a1)
{
  uint64_t *v2;
  _DWORD *result;
  int v4;
  unsigned int v5;
  int v6;

  v2 = (uint64_t *)CurrentMemoryContext();
  result = (_DWORD *)MemoryContextAllocZero(*v2, 0x1CuLL);
  *result = 108;
  v4 = a1[8];
  v5 = v4 - 2;
  v6 = v4 - 1;
  if (v5 >= 3)
    v6 = 0;
  result[1] = v6;
  result[2] = a1[9];
  result[3] = a1[10];
  result[4] = a1[11];
  result[5] = a1[12];
  result[6] = a1[13];
  return result;
}

unint64_t _readAggref(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  int v38;
  int v39;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x58uLL);
  *(_DWORD *)v3 = 109;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56))
  {
    Node = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v5;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 24) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 56) > v8);
    }
  }
  if (*(_QWORD *)(a1 + 72))
  {
    v10 = _readNode(**(_QWORD **)(a1 + 80));
    list_make1_impl(226, v10);
    *(_QWORD *)(v3 + 32) = v11;
    if (*(_QWORD *)(a1 + 72) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v3 + 32) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 72) > v14);
    }
  }
  if (*(_QWORD *)(a1 + 88))
  {
    v16 = _readNode(**(_QWORD **)(a1 + 96));
    list_make1_impl(226, v16);
    *(_QWORD *)(v3 + 40) = v17;
    if (*(_QWORD *)(a1 + 88) >= 2uLL)
    {
      v18 = v17;
      v19 = 2;
      v20 = 1;
      do
      {
        v21 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v20));
        v18 = lappend(v18, v21);
        *(_QWORD *)(v3 + 40) = v18;
        v20 = v19++;
      }
      while (*(_QWORD *)(a1 + 88) > v20);
    }
  }
  if (*(_QWORD *)(a1 + 104))
  {
    v22 = _readNode(**(_QWORD **)(a1 + 112));
    list_make1_impl(226, v22);
    *(_QWORD *)(v3 + 48) = v23;
    if (*(_QWORD *)(a1 + 104) >= 2uLL)
    {
      v24 = v23;
      v25 = 2;
      v26 = 1;
      do
      {
        v27 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v26));
        v24 = lappend(v24, v27);
        *(_QWORD *)(v3 + 48) = v24;
        v26 = v25++;
      }
      while (*(_QWORD *)(a1 + 104) > v26);
    }
  }
  if (*(_QWORD *)(a1 + 120))
  {
    v28 = _readNode(**(_QWORD **)(a1 + 128));
    list_make1_impl(226, v28);
    *(_QWORD *)(v3 + 56) = v29;
    if (*(_QWORD *)(a1 + 120) >= 2uLL)
    {
      v30 = v29;
      v31 = 2;
      v32 = 1;
      do
      {
        v33 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v32));
        v30 = lappend(v30, v33);
        *(_QWORD *)(v3 + 56) = v30;
        v32 = v31++;
      }
      while (*(_QWORD *)(a1 + 120) > v32);
    }
  }
  v34 = *(_QWORD *)(a1 + 136);
  if (v34)
    *(_QWORD *)(v3 + 64) = _readNode(v34);
  *(_BYTE *)(v3 + 72) = *(_DWORD *)(a1 + 144) != 0;
  *(_BYTE *)(v3 + 73) = *(_DWORD *)(a1 + 148) != 0;
  v35 = *(unsigned __int8 **)(a1 + 152);
  if (v35)
  {
    v36 = *v35;
    if (v36)
      *(_BYTE *)(v3 + 74) = v36;
  }
  *(_DWORD *)(v3 + 76) = *(_DWORD *)(a1 + 160);
  v37 = *(_DWORD *)(a1 + 164);
  if (v37 == 2)
    v38 = 6;
  else
    v38 = 0;
  if (v37 == 3)
    v39 = 9;
  else
    v39 = v38;
  *(_DWORD *)(v3 + 80) = v39;
  *(_DWORD *)(v3 + 84) = *(_DWORD *)(a1 + 168);
  return v3;
}

unint64_t _readGroupingFunc(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 110;
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 32) > v8);
    }
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v10 = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, v10);
    *(_QWORD *)(v3 + 16) = v11;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v3 + 16) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 48) > v14);
    }
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v16 = _readNode(**(_QWORD **)(a1 + 72));
    list_make1_impl(226, v16);
    *(_QWORD *)(v3 + 24) = v17;
    if (*(_QWORD *)(a1 + 64) >= 2uLL)
    {
      v18 = v17;
      v19 = 2;
      v20 = 1;
      do
      {
        v21 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v20));
        v18 = lappend(v18, v21);
        *(_QWORD *)(v3 + 24) = v18;
        v20 = v19++;
      }
      while (*(_QWORD *)(a1 + 64) > v20);
    }
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(v3 + 36) = *(_DWORD *)(a1 + 84);
  return v3;
}

unint64_t _readWindowFunc(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)v3 = 111;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 44);
  if (*(_QWORD *)(a1 + 48))
  {
    Node = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v5;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 24) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 48) > v8);
    }
  }
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
    *(_QWORD *)(v3 + 32) = _readNode(v10);
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72);
  *(_BYTE *)(v3 + 44) = *(_DWORD *)(a1 + 76) != 0;
  *(_BYTE *)(v3 + 45) = *(_DWORD *)(a1 + 80) != 0;
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a1 + 84);
  return v3;
}

unint64_t _readSubscriptingRef(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)v3 = 112;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 44);
  if (*(_QWORD *)(a1 + 48))
  {
    Node = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v5;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 24) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 48) > v8);
    }
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v10 = _readNode(**(_QWORD **)(a1 + 72));
    list_make1_impl(226, v10);
    *(_QWORD *)(v3 + 32) = v11;
    if (*(_QWORD *)(a1 + 64) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v3 + 32) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 64) > v14);
    }
  }
  v16 = *(_QWORD *)(a1 + 80);
  if (v16)
    *(_QWORD *)(v3 + 40) = _readNode(v16);
  v17 = *(_QWORD *)(a1 + 88);
  if (v17)
    *(_QWORD *)(v3 + 48) = _readNode(v17);
  return v3;
}

unint64_t _readFuncExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t Node;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  v4 = v3;
  *(_DWORD *)v3 = 113;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_BYTE *)(v3 + 12) = *(_DWORD *)(a1 + 40) != 0;
  *(_BYTE *)(v3 + 13) = *(_DWORD *)(a1 + 44) != 0;
  v5 = *(_DWORD *)(a1 + 48);
  if (v5 == 3)
    v6 = 2;
  else
    v6 = v5 == 2;
  *(_DWORD *)(v3 + 16) = v6;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 64))
  {
    Node = _readNode(**(_QWORD **)(a1 + 72));
    list_make1_impl(226, Node);
    *(_QWORD *)(v4 + 32) = v8;
    if (*(_QWORD *)(a1 + 64) >= 2uLL)
    {
      v9 = v8;
      v10 = 2;
      v11 = 1;
      do
      {
        v12 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v11));
        v9 = lappend(v9, v12);
        *(_QWORD *)(v4 + 32) = v9;
        v11 = v10++;
      }
      while (*(_QWORD *)(a1 + 64) > v11);
    }
  }
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 80);
  return v4;
}

unint64_t _readNamedArgExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  const char *v5;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 114;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  v5 = *(const char **)(a1 + 40);
  if (v5 && *v5)
    *(_QWORD *)(v3 + 16) = pstrdup(v5);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v3 + 28) = *(_DWORD *)(a1 + 52);
  return v3;
}

unint64_t _readOpExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)v3 = 115;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(v3 + 16) = *(_DWORD *)(a1 + 44) != 0;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 52);
  if (*(_QWORD *)(a1 + 56))
  {
    Node = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 32) = v5;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 32) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 56) > v8);
    }
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72);
  return v3;
}

unint64_t _readDistinctExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)v3 = 116;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(v3 + 16) = *(_DWORD *)(a1 + 44) != 0;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 52);
  if (*(_QWORD *)(a1 + 56))
  {
    Node = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 32) = v5;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 32) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 56) > v8);
    }
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72);
  return v3;
}

unint64_t _readNullIfExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)v3 = 117;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(v3 + 16) = *(_DWORD *)(a1 + 44) != 0;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 52);
  if (*(_QWORD *)(a1 + 56))
  {
    Node = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 32) = v5;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 32) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 56) > v8);
    }
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72);
  return v3;
}

unint64_t _readScalarArrayOpExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 118;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_BYTE *)(v3 + 12) = *(_DWORD *)(a1 + 40) != 0;
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 44);
  if (*(_QWORD *)(a1 + 48))
  {
    Node = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v5;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 24) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 48) > v8);
    }
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 64);
  return v3;
}

_DWORD *_readBoolExpr(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  int v6;
  uint64_t Node;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  v4 = v3;
  *v3 = 119;
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 == 3)
    v6 = 2;
  else
    v6 = v5 == 2;
  v3[1] = v6;
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *((_QWORD *)v4 + 1) = v8;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v9 = v8;
      v10 = 2;
      v11 = 1;
      do
      {
        v12 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v11));
        v9 = lappend(v9, v12);
        *((_QWORD *)v4 + 1) = v9;
        v11 = v10++;
      }
      while (*(_QWORD *)(a1 + 40) > v11);
    }
  }
  v4[4] = *(_DWORD *)(a1 + 56);
  return v4;
}

_DWORD *_readSubLink(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  v4 = v3;
  *v3 = 120;
  v5 = *(_DWORD *)(a1 + 32);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 7)
    v7 = 0;
  v3[1] = v7;
  v3[2] = *(_DWORD *)(a1 + 36);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    *((_QWORD *)v4 + 2) = _readNode(v8);
  if (*(_QWORD *)(a1 + 48))
  {
    Node = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, Node);
    *((_QWORD *)v4 + 3) = v10;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v11 = v10;
      v12 = 2;
      v13 = 1;
      do
      {
        v14 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13));
        v11 = lappend(v11, v14);
        *((_QWORD *)v4 + 3) = v11;
        v13 = v12++;
      }
      while (*(_QWORD *)(a1 + 48) > v13);
    }
  }
  v15 = *(_QWORD *)(a1 + 64);
  if (v15)
    *((_QWORD *)v4 + 4) = _readNode(v15);
  v4[10] = *(_DWORD *)(a1 + 72);
  return v4;
}

_DWORD *_readSubPlan(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x60uLL);
  v4 = v3;
  *v3 = 121;
  v5 = *(_DWORD *)(a1 + 32);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 7)
    v7 = 0;
  v3[1] = v7;
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    *((_QWORD *)v4 + 1) = _readNode(v8);
  if (*(_QWORD *)(a1 + 48))
  {
    Node = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, Node);
    *((_QWORD *)v4 + 2) = v10;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v11 = v10;
      v12 = 2;
      v13 = 1;
      do
      {
        v14 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13));
        v11 = lappend(v11, v14);
        *((_QWORD *)v4 + 2) = v11;
        v13 = v12++;
      }
      while (*(_QWORD *)(a1 + 48) > v13);
    }
  }
  v4[6] = *(_DWORD *)(a1 + 64);
  v15 = *(const char **)(a1 + 72);
  if (v15 && *v15)
    *((_QWORD *)v4 + 4) = pstrdup(v15);
  v4[10] = *(_DWORD *)(a1 + 80);
  v4[11] = *(_DWORD *)(a1 + 84);
  v4[12] = *(_DWORD *)(a1 + 88);
  *((_BYTE *)v4 + 52) = *(_DWORD *)(a1 + 92) != 0;
  *((_BYTE *)v4 + 53) = *(_DWORD *)(a1 + 96) != 0;
  *((_BYTE *)v4 + 54) = *(_DWORD *)(a1 + 100) != 0;
  if (*(_QWORD *)(a1 + 104))
  {
    v16 = _readNode(**(_QWORD **)(a1 + 112));
    list_make1_impl(226, v16);
    *((_QWORD *)v4 + 7) = v17;
    if (*(_QWORD *)(a1 + 104) >= 2uLL)
    {
      v18 = v17;
      v19 = 2;
      v20 = 1;
      do
      {
        v21 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v20));
        v18 = lappend(v18, v21);
        *((_QWORD *)v4 + 7) = v18;
        v20 = v19++;
      }
      while (*(_QWORD *)(a1 + 104) > v20);
    }
  }
  if (*(_QWORD *)(a1 + 120))
  {
    v22 = _readNode(**(_QWORD **)(a1 + 128));
    list_make1_impl(226, v22);
    *((_QWORD *)v4 + 8) = v23;
    if (*(_QWORD *)(a1 + 120) >= 2uLL)
    {
      v24 = v23;
      v25 = 2;
      v26 = 1;
      do
      {
        v27 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v26));
        v24 = lappend(v24, v27);
        *((_QWORD *)v4 + 8) = v24;
        v26 = v25++;
      }
      while (*(_QWORD *)(a1 + 120) > v26);
    }
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v28 = _readNode(**(_QWORD **)(a1 + 144));
    list_make1_impl(226, v28);
    *((_QWORD *)v4 + 9) = v29;
    if (*(_QWORD *)(a1 + 136) >= 2uLL)
    {
      v30 = v29;
      v31 = 2;
      v32 = 1;
      do
      {
        v33 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v32));
        v30 = lappend(v30, v33);
        *((_QWORD *)v4 + 9) = v30;
        v32 = v31++;
      }
      while (*(_QWORD *)(a1 + 136) > v32);
    }
  }
  *((_QWORD *)v4 + 10) = *(_QWORD *)(a1 + 152);
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a1 + 160);
  return v4;
}

unint64_t _readAlternativeSubPlan(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)v3 = 122;
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 32) > v8);
    }
  }
  return v3;
}

unint64_t _readFieldSelect(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 123;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  *(_WORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v3 + 28) = *(_DWORD *)(a1 + 52);
  return v3;
}

unint64_t _readFieldStore(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 124;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 40) > v9);
    }
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v11 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v11);
    *(_QWORD *)(v3 + 24) = v12;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v13 = v12;
      v14 = 2;
      v15 = 1;
      do
      {
        v16 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15));
        v13 = lappend(v13, v16);
        *(_QWORD *)(v3 + 24) = v13;
        v15 = v14++;
      }
      while (*(_QWORD *)(a1 + 56) > v15);
    }
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 72);
  return v3;
}

unint64_t _readRelabelType(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 125;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 52);
  if (v5 == 3)
    v6 = 2;
  else
    v6 = v5 == 2;
  *(_DWORD *)(v3 + 28) = v6;
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 56);
  return v3;
}

unint64_t _readCoerceViaIO(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 126;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44);
  v5 = *(_DWORD *)(a1 + 48);
  if (v5 == 3)
    v6 = 2;
  else
    v6 = v5 == 2;
  *(_DWORD *)(v3 + 24) = v6;
  *(_DWORD *)(v3 + 28) = *(_DWORD *)(a1 + 52);
  return v3;
}

unint64_t _readArrayCoerceExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)v3 = 127;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readNode(v5);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v3 + 28) = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 56);
  v6 = *(_DWORD *)(a1 + 60);
  if (v6 == 3)
    v7 = 2;
  else
    v7 = v6 == 2;
  *(_DWORD *)(v3 + 36) = v7;
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 64);
  return v3;
}

unint64_t _readConvertRowtypeExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 128;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  v5 = *(_DWORD *)(a1 + 44);
  if (v5 == 3)
    v6 = 2;
  else
    v6 = v5 == 2;
  *(_DWORD *)(v3 + 20) = v6;
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  return v3;
}

unint64_t _readCollateExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 129;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44);
  return v3;
}

unint64_t _readCaseExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)v3 = 130;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    *(_QWORD *)(v3 + 16) = _readNode(v4);
  if (*(_QWORD *)(a1 + 48))
  {
    Node = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v6;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 24) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 48) > v9);
    }
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (v11)
    *(_QWORD *)(v3 + 32) = _readNode(v11);
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72);
  return v3;
}

unint64_t _readCaseWhen(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 131;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readNode(v5);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  return v3;
}

_DWORD *_readCaseTestExpr(_DWORD *a1)
{
  uint64_t *v2;
  _DWORD *result;

  v2 = (uint64_t *)CurrentMemoryContext();
  result = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *result = 132;
  result[1] = a1[8];
  result[2] = a1[9];
  result[3] = a1[10];
  return result;
}

unint64_t _readArrayExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 133;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 48))
  {
    Node = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v5;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 16) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 48) > v8);
    }
  }
  *(_BYTE *)(v3 + 24) = *(_DWORD *)(a1 + 64) != 0;
  *(_DWORD *)(v3 + 28) = *(_DWORD *)(a1 + 68);
  return v3;
}

unint64_t _readRowExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 134;
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 32) > v8);
    }
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 48);
  v10 = *(_DWORD *)(a1 + 52);
  if (v10 == 3)
    v11 = 2;
  else
    v11 = v10 == 2;
  *(_DWORD *)(v3 + 20) = v11;
  if (*(_QWORD *)(a1 + 56))
  {
    v12 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v12);
    *(_QWORD *)(v3 + 24) = v13;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v16));
        v14 = lappend(v14, v17);
        *(_QWORD *)(v3 + 24) = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 56) > v16);
    }
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 72);
  return v3;
}

_QWORD *_readRowCompareExpr(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t Node;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  v4 = v3;
  *v3 = 135;
  v5 = *(_DWORD *)(a1 + 32);
  if ((v5 - 2) >= 5)
    v5 = 1;
  v3[1] = v5;
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    v4[1] = v7;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v8 = v7;
      v9 = 2;
      v10 = 1;
      do
      {
        v11 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10));
        v8 = lappend(v8, v11);
        v4[1] = v8;
        v10 = v9++;
      }
      while (*(_QWORD *)(a1 + 40) > v10);
    }
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v12 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v12);
    v4[2] = v13;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v16));
        v14 = lappend(v14, v17);
        v4[2] = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 56) > v16);
    }
  }
  if (*(_QWORD *)(a1 + 72))
  {
    v18 = _readNode(**(_QWORD **)(a1 + 80));
    list_make1_impl(226, v18);
    v4[3] = v19;
    if (*(_QWORD *)(a1 + 72) >= 2uLL)
    {
      v20 = v19;
      v21 = 2;
      v22 = 1;
      do
      {
        v23 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v22));
        v20 = lappend(v20, v23);
        v4[3] = v20;
        v22 = v21++;
      }
      while (*(_QWORD *)(a1 + 72) > v22);
    }
  }
  if (*(_QWORD *)(a1 + 88))
  {
    v24 = _readNode(**(_QWORD **)(a1 + 96));
    list_make1_impl(226, v24);
    v4[4] = v25;
    if (*(_QWORD *)(a1 + 88) >= 2uLL)
    {
      v26 = v25;
      v27 = 2;
      v28 = 1;
      do
      {
        v29 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v28));
        v26 = lappend(v26, v29);
        v4[4] = v26;
        v28 = v27++;
      }
      while (*(_QWORD *)(a1 + 88) > v28);
    }
  }
  if (*(_QWORD *)(a1 + 104))
  {
    v30 = _readNode(**(_QWORD **)(a1 + 112));
    list_make1_impl(226, v30);
    v4[5] = v31;
    if (*(_QWORD *)(a1 + 104) >= 2uLL)
    {
      v32 = v31;
      v33 = 2;
      v34 = 1;
      do
      {
        v35 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v34));
        v32 = lappend(v32, v35);
        v4[5] = v32;
        v34 = v33++;
      }
      while (*(_QWORD *)(a1 + 104) > v34);
    }
  }
  return v4;
}

unint64_t _readCoalesceExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 136;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v5;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 16) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 40) > v8);
    }
  }
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 56);
  return v3;
}

unint64_t _readMinMaxExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 137;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 44) == 2;
  if (*(_QWORD *)(a1 + 48))
  {
    Node = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v5;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 24) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 48) > v8);
    }
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 64);
  return v3;
}

_DWORD *_readSQLValueFunction(_DWORD *a1)
{
  uint64_t *v2;
  _DWORD *result;
  int v4;
  unsigned int v5;
  int v6;

  v2 = (uint64_t *)CurrentMemoryContext();
  result = (_DWORD *)MemoryContextAllocZero(*v2, 0x14uLL);
  *result = 138;
  v4 = a1[8];
  v5 = v4 - 2;
  v6 = v4 - 1;
  if (v5 >= 0xE)
    v6 = 0;
  result[1] = v6;
  result[2] = a1[9];
  result[3] = a1[10];
  result[4] = a1[11];
  return result;
}

_DWORD *_readXmlExpr(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  const char *v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  v4 = v3;
  *v3 = 139;
  v5 = *(_DWORD *)(a1 + 32);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 7)
    v7 = 0;
  v3[1] = v7;
  v8 = *(const char **)(a1 + 40);
  if (v8 && *v8)
    *((_QWORD *)v4 + 1) = pstrdup(v8);
  if (*(_QWORD *)(a1 + 48))
  {
    Node = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, Node);
    *((_QWORD *)v4 + 2) = v10;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v11 = v10;
      v12 = 2;
      v13 = 1;
      do
      {
        v14 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13));
        v11 = lappend(v11, v14);
        *((_QWORD *)v4 + 2) = v11;
        v13 = v12++;
      }
      while (*(_QWORD *)(a1 + 48) > v13);
    }
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v15 = _readNode(**(_QWORD **)(a1 + 72));
    list_make1_impl(226, v15);
    *((_QWORD *)v4 + 3) = v16;
    if (*(_QWORD *)(a1 + 64) >= 2uLL)
    {
      v17 = v16;
      v18 = 2;
      v19 = 1;
      do
      {
        v20 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v19));
        v17 = lappend(v17, v20);
        *((_QWORD *)v4 + 3) = v17;
        v19 = v18++;
      }
      while (*(_QWORD *)(a1 + 64) > v19);
    }
  }
  if (*(_QWORD *)(a1 + 80))
  {
    v21 = _readNode(**(_QWORD **)(a1 + 88));
    list_make1_impl(226, v21);
    *((_QWORD *)v4 + 4) = v22;
    if (*(_QWORD *)(a1 + 80) >= 2uLL)
    {
      v23 = v22;
      v24 = 2;
      v25 = 1;
      do
      {
        v26 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v25));
        v23 = lappend(v23, v26);
        *((_QWORD *)v4 + 4) = v23;
        v25 = v24++;
      }
      while (*(_QWORD *)(a1 + 80) > v25);
    }
  }
  v4[10] = *(_DWORD *)(a1 + 96) == 2;
  v4[11] = *(_DWORD *)(a1 + 100);
  v4[12] = *(_DWORD *)(a1 + 104);
  v4[13] = *(_DWORD *)(a1 + 108);
  return v4;
}

unint64_t _readNullTest(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 140;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40) == 2;
  *(_BYTE *)(v3 + 20) = *(_DWORD *)(a1 + 44) != 0;
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  return v3;
}

unint64_t _readBooleanTest(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 141;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  v5 = *(_DWORD *)(a1 + 40);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 5)
    v7 = 0;
  *(_DWORD *)(v3 + 16) = v7;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44);
  return v3;
}

unint64_t _readCoerceToDomain(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 142;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 52);
  if (v5 == 3)
    v6 = 2;
  else
    v6 = v5 == 2;
  *(_DWORD *)(v3 + 28) = v6;
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 56);
  return v3;
}

_DWORD *_readCoerceToDomainValue(_DWORD *a1)
{
  uint64_t *v2;
  _DWORD *result;

  v2 = (uint64_t *)CurrentMemoryContext();
  result = (_DWORD *)MemoryContextAllocZero(*v2, 0x14uLL);
  *result = 143;
  result[1] = a1[8];
  result[2] = a1[9];
  result[3] = a1[10];
  result[4] = a1[11];
  return result;
}

_DWORD *_readSetToDefault(_DWORD *a1)
{
  uint64_t *v2;
  _DWORD *result;

  v2 = (uint64_t *)CurrentMemoryContext();
  result = (_DWORD *)MemoryContextAllocZero(*v2, 0x14uLL);
  *result = 144;
  result[1] = a1[8];
  result[2] = a1[9];
  result[3] = a1[10];
  result[4] = a1[11];
  return result;
}

unint64_t _readCurrentOfExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 145;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  v4 = *(const char **)(a1 + 40);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 48);
  return v3;
}

unint64_t _readInferenceElem(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 147;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44);
  return v3;
}

unint64_t _readTargetEntry(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  const char *v5;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)v3 = 148;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  *(_WORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  v5 = *(const char **)(a1 + 48);
  if (v5 && *v5)
    *(_QWORD *)(v3 + 24) = pstrdup(v5);
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(v3 + 36) = *(_DWORD *)(a1 + 60);
  *(_WORD *)(v3 + 40) = *(_DWORD *)(a1 + 64);
  *(_BYTE *)(v3 + 42) = *(_DWORD *)(a1 + 68) != 0;
  return v3;
}

unint64_t _readJoinExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Node;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x40uLL);
  v4 = v3;
  *(_DWORD *)v3 = 150;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 7)
    v7 = 0;
  *(_DWORD *)(v3 + 4) = v7;
  *(_BYTE *)(v3 + 8) = *(_DWORD *)(a1 + 28) != 0;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    *(_QWORD *)(v4 + 16) = _readNode(v8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    *(_QWORD *)(v4 + 24) = _readNode(v9);
  if (*(_QWORD *)(a1 + 48))
  {
    Node = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, Node);
    *(_QWORD *)(v4 + 32) = v11;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v4 + 32) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 48) > v14);
    }
  }
  v16 = *(_QWORD *)(a1 + 64);
  if (v16)
    *(_QWORD *)(v4 + 40) = _readNode(v16);
  v17 = *(_QWORD *)(a1 + 72);
  if (v17)
    *(_QWORD *)(v4 + 48) = _readAlias(v17);
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(a1 + 80);
  return v4;
}

unint64_t _readFromExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 151;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    *(_QWORD *)(v3 + 16) = _readNode(v10);
  return v3;
}

_DWORD *_readOnConflictExpr(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  int v6;
  uint64_t Node;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x40uLL);
  v4 = v3;
  *v3 = 152;
  v5 = *(_DWORD *)(a1 + 24);
  if (v5 == 3)
    v6 = 2;
  else
    v6 = v5 == 2;
  v3[1] = v6;
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *((_QWORD *)v4 + 1) = v8;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v9 = v8;
      v10 = 2;
      v11 = 1;
      do
      {
        v12 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v11));
        v9 = lappend(v9, v12);
        *((_QWORD *)v4 + 1) = v9;
        v11 = v10++;
      }
      while (*(_QWORD *)(a1 + 32) > v11);
    }
  }
  v13 = *(_QWORD *)(a1 + 48);
  if (v13)
    *((_QWORD *)v4 + 2) = _readNode(v13);
  v4[6] = *(_DWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 64))
  {
    v14 = _readNode(**(_QWORD **)(a1 + 72));
    list_make1_impl(226, v14);
    *((_QWORD *)v4 + 4) = v15;
    if (*(_QWORD *)(a1 + 64) >= 2uLL)
    {
      v16 = v15;
      v17 = 2;
      v18 = 1;
      do
      {
        v19 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v18));
        v16 = lappend(v16, v19);
        *((_QWORD *)v4 + 4) = v16;
        v18 = v17++;
      }
      while (*(_QWORD *)(a1 + 64) > v18);
    }
  }
  v20 = *(_QWORD *)(a1 + 80);
  if (v20)
    *((_QWORD *)v4 + 5) = _readNode(v20);
  v4[12] = *(_DWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96))
  {
    v21 = _readNode(**(_QWORD **)(a1 + 104));
    list_make1_impl(226, v21);
    *((_QWORD *)v4 + 7) = v22;
    if (*(_QWORD *)(a1 + 96) >= 2uLL)
    {
      v23 = v22;
      v24 = 2;
      v25 = 1;
      do
      {
        v26 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v25));
        v23 = lappend(v23, v26);
        *((_QWORD *)v4 + 7) = v23;
        v25 = v24++;
      }
      while (*(_QWORD *)(a1 + 96) > v25);
    }
  }
  return v4;
}

unint64_t _readIntoClause(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  const char *v21;
  uint64_t v22;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x48uLL);
  *(_DWORD *)v3 = 153;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readRangeVar(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  v11 = *(const char **)(a1 + 48);
  if (v11 && *v11)
    *(_QWORD *)(v3 + 24) = pstrdup(v11);
  if (*(_QWORD *)(a1 + 56))
  {
    v12 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v12);
    *(_QWORD *)(v3 + 32) = v13;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v16));
        v14 = lappend(v14, v17);
        *(_QWORD *)(v3 + 32) = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 56) > v16);
    }
  }
  v18 = *(_DWORD *)(a1 + 72);
  v19 = v18 - 2;
  v20 = v18 - 1;
  if (v19 >= 3)
    v20 = 0;
  *(_DWORD *)(v3 + 40) = v20;
  v21 = *(const char **)(a1 + 80);
  if (v21 && *v21)
    *(_QWORD *)(v3 + 48) = pstrdup(v21);
  v22 = *(_QWORD *)(a1 + 88);
  if (v22)
    *(_QWORD *)(v3 + 56) = _readNode(v22);
  *(_BYTE *)(v3 + 64) = *(_DWORD *)(a1 + 96) != 0;
  return v3;
}

unint64_t _readQuery(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t Node;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  uint64_t v93;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0xE0uLL);
  v4 = v3;
  *(_DWORD *)v3 = 231;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 6)
    v7 = 0;
  *(_DWORD *)(v3 + 4) = v7;
  v8 = *(_DWORD *)(a1 + 28);
  v9 = v8 - 2;
  v10 = v8 - 1;
  if (v9 >= 4)
    v10 = 0;
  *(_DWORD *)(v3 + 8) = v10;
  *(_BYTE *)(v3 + 24) = *(_DWORD *)(a1 + 32) != 0;
  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
    *(_QWORD *)(v4 + 32) = _readNode(v11);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 48);
  *(_BYTE *)(v4 + 44) = *(_DWORD *)(a1 + 52) != 0;
  *(_BYTE *)(v4 + 45) = *(_DWORD *)(a1 + 56) != 0;
  *(_BYTE *)(v4 + 46) = *(_DWORD *)(a1 + 60) != 0;
  *(_BYTE *)(v4 + 47) = *(_DWORD *)(a1 + 64) != 0;
  *(_BYTE *)(v4 + 48) = *(_DWORD *)(a1 + 68) != 0;
  *(_BYTE *)(v4 + 49) = *(_DWORD *)(a1 + 72) != 0;
  *(_BYTE *)(v4 + 50) = *(_DWORD *)(a1 + 76) != 0;
  *(_BYTE *)(v4 + 51) = *(_DWORD *)(a1 + 80) != 0;
  *(_BYTE *)(v4 + 52) = *(_DWORD *)(a1 + 84) != 0;
  if (*(_QWORD *)(a1 + 88))
  {
    Node = _readNode(**(_QWORD **)(a1 + 96));
    list_make1_impl(226, Node);
    *(_QWORD *)(v4 + 56) = v13;
    if (*(_QWORD *)(a1 + 88) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v16));
        v14 = lappend(v14, v17);
        *(_QWORD *)(v4 + 56) = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 88) > v16);
    }
  }
  if (*(_QWORD *)(a1 + 104))
  {
    v18 = _readNode(**(_QWORD **)(a1 + 112));
    list_make1_impl(226, v18);
    *(_QWORD *)(v4 + 64) = v19;
    if (*(_QWORD *)(a1 + 104) >= 2uLL)
    {
      v20 = v19;
      v21 = 2;
      v22 = 1;
      do
      {
        v23 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v22));
        v20 = lappend(v20, v23);
        *(_QWORD *)(v4 + 64) = v20;
        v22 = v21++;
      }
      while (*(_QWORD *)(a1 + 104) > v22);
    }
  }
  v24 = *(_QWORD *)(a1 + 120);
  if (v24)
    *(_QWORD *)(v4 + 72) = _readFromExpr(v24);
  if (*(_QWORD *)(a1 + 128))
  {
    v25 = _readNode(**(_QWORD **)(a1 + 136));
    list_make1_impl(226, v25);
    *(_QWORD *)(v4 + 80) = v26;
    if (*(_QWORD *)(a1 + 128) >= 2uLL)
    {
      v27 = v26;
      v28 = 2;
      v29 = 1;
      do
      {
        v30 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v29));
        v27 = lappend(v27, v30);
        *(_QWORD *)(v4 + 80) = v27;
        v29 = v28++;
      }
      while (*(_QWORD *)(a1 + 128) > v29);
    }
  }
  v31 = *(_DWORD *)(a1 + 144);
  if (v31 == 3)
    v32 = 2;
  else
    v32 = v31 == 2;
  *(_DWORD *)(v4 + 88) = v32;
  v33 = *(_QWORD *)(a1 + 152);
  if (v33)
    *(_QWORD *)(v4 + 96) = _readOnConflictExpr(v33);
  if (*(_QWORD *)(a1 + 160))
  {
    v34 = _readNode(**(_QWORD **)(a1 + 168));
    list_make1_impl(226, v34);
    *(_QWORD *)(v4 + 104) = v35;
    if (*(_QWORD *)(a1 + 160) >= 2uLL)
    {
      v36 = v35;
      v37 = 2;
      v38 = 1;
      do
      {
        v39 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v38));
        v36 = lappend(v36, v39);
        *(_QWORD *)(v4 + 104) = v36;
        v38 = v37++;
      }
      while (*(_QWORD *)(a1 + 160) > v38);
    }
  }
  if (*(_QWORD *)(a1 + 176))
  {
    v40 = _readNode(**(_QWORD **)(a1 + 184));
    list_make1_impl(226, v40);
    *(_QWORD *)(v4 + 112) = v41;
    if (*(_QWORD *)(a1 + 176) >= 2uLL)
    {
      v42 = v41;
      v43 = 2;
      v44 = 1;
      do
      {
        v45 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v44));
        v42 = lappend(v42, v45);
        *(_QWORD *)(v4 + 112) = v42;
        v44 = v43++;
      }
      while (*(_QWORD *)(a1 + 176) > v44);
    }
  }
  if (*(_QWORD *)(a1 + 192))
  {
    v46 = _readNode(**(_QWORD **)(a1 + 200));
    list_make1_impl(226, v46);
    *(_QWORD *)(v4 + 120) = v47;
    if (*(_QWORD *)(a1 + 192) >= 2uLL)
    {
      v48 = v47;
      v49 = 2;
      v50 = 1;
      do
      {
        v51 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v50));
        v48 = lappend(v48, v51);
        *(_QWORD *)(v4 + 120) = v48;
        v50 = v49++;
      }
      while (*(_QWORD *)(a1 + 192) > v50);
    }
  }
  v52 = *(_QWORD *)(a1 + 208);
  if (v52)
    *(_QWORD *)(v4 + 128) = _readNode(v52);
  if (*(_QWORD *)(a1 + 216))
  {
    v53 = _readNode(**(_QWORD **)(a1 + 224));
    list_make1_impl(226, v53);
    *(_QWORD *)(v4 + 136) = v54;
    if (*(_QWORD *)(a1 + 216) >= 2uLL)
    {
      v55 = v54;
      v56 = 2;
      v57 = 1;
      do
      {
        v58 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v57));
        v55 = lappend(v55, v58);
        *(_QWORD *)(v4 + 136) = v55;
        v57 = v56++;
      }
      while (*(_QWORD *)(a1 + 216) > v57);
    }
  }
  if (*(_QWORD *)(a1 + 232))
  {
    v59 = _readNode(**(_QWORD **)(a1 + 240));
    list_make1_impl(226, v59);
    *(_QWORD *)(v4 + 144) = v60;
    if (*(_QWORD *)(a1 + 232) >= 2uLL)
    {
      v61 = v60;
      v62 = 2;
      v63 = 1;
      do
      {
        v64 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * v63));
        v61 = lappend(v61, v64);
        *(_QWORD *)(v4 + 144) = v61;
        v63 = v62++;
      }
      while (*(_QWORD *)(a1 + 232) > v63);
    }
  }
  if (*(_QWORD *)(a1 + 248))
  {
    v65 = _readNode(**(_QWORD **)(a1 + 256));
    list_make1_impl(226, v65);
    *(_QWORD *)(v4 + 152) = v66;
    if (*(_QWORD *)(a1 + 248) >= 2uLL)
    {
      v67 = v66;
      v68 = 2;
      v69 = 1;
      do
      {
        v70 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * v69));
        v67 = lappend(v67, v70);
        *(_QWORD *)(v4 + 152) = v67;
        v69 = v68++;
      }
      while (*(_QWORD *)(a1 + 248) > v69);
    }
  }
  v71 = *(_QWORD *)(a1 + 264);
  if (v71)
    *(_QWORD *)(v4 + 160) = _readNode(v71);
  v72 = *(_QWORD *)(a1 + 272);
  if (v72)
    *(_QWORD *)(v4 + 168) = _readNode(v72);
  v73 = *(_DWORD *)(a1 + 280);
  if (v73 == 3)
    v74 = 2;
  else
    v74 = v73 == 2;
  *(_DWORD *)(v4 + 176) = v74;
  if (*(_QWORD *)(a1 + 288))
  {
    v75 = _readNode(**(_QWORD **)(a1 + 296));
    list_make1_impl(226, v75);
    *(_QWORD *)(v4 + 184) = v76;
    if (*(_QWORD *)(a1 + 288) >= 2uLL)
    {
      v77 = v76;
      v78 = 2;
      v79 = 1;
      do
      {
        v80 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * v79));
        v77 = lappend(v77, v80);
        *(_QWORD *)(v4 + 184) = v77;
        v79 = v78++;
      }
      while (*(_QWORD *)(a1 + 288) > v79);
    }
  }
  v81 = *(_QWORD *)(a1 + 304);
  if (v81)
    *(_QWORD *)(v4 + 192) = _readNode(v81);
  if (*(_QWORD *)(a1 + 312))
  {
    v82 = _readNode(**(_QWORD **)(a1 + 320));
    list_make1_impl(226, v82);
    *(_QWORD *)(v4 + 200) = v83;
    if (*(_QWORD *)(a1 + 312) >= 2uLL)
    {
      v84 = v83;
      v85 = 2;
      v86 = 1;
      do
      {
        v87 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v86));
        v84 = lappend(v84, v87);
        *(_QWORD *)(v4 + 200) = v84;
        v86 = v85++;
      }
      while (*(_QWORD *)(a1 + 312) > v86);
    }
  }
  if (*(_QWORD *)(a1 + 328))
  {
    v88 = _readNode(**(_QWORD **)(a1 + 336));
    list_make1_impl(226, v88);
    *(_QWORD *)(v4 + 208) = v89;
    if (*(_QWORD *)(a1 + 328) >= 2uLL)
    {
      v90 = v89;
      v91 = 2;
      v92 = 1;
      do
      {
        v93 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * v92));
        v90 = lappend(v90, v93);
        *(_QWORD *)(v4 + 208) = v90;
        v92 = v91++;
      }
      while (*(_QWORD *)(a1 + 328) > v92);
    }
  }
  *(_DWORD *)(v4 + 216) = *(_DWORD *)(a1 + 344);
  *(_DWORD *)(v4 + 220) = *(_DWORD *)(a1 + 348);
  return v4;
}

unint64_t _readInsertStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x40uLL);
  *(_DWORD *)v3 = 233;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readRangeVar(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
    *(_QWORD *)(v3 + 24) = _readNode(v11);
  v12 = *(_QWORD *)(a1 + 56);
  if (v12)
    *(_QWORD *)(v3 + 32) = _readOnConflictClause(v12);
  if (*(_QWORD *)(a1 + 64))
  {
    v13 = _readNode(**(_QWORD **)(a1 + 72));
    list_make1_impl(226, v13);
    *(_QWORD *)(v3 + 40) = v14;
    if (*(_QWORD *)(a1 + 64) >= 2uLL)
    {
      v15 = v14;
      v16 = 2;
      v17 = 1;
      do
      {
        v18 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v17));
        v15 = lappend(v15, v18);
        *(_QWORD *)(v3 + 40) = v15;
        v17 = v16++;
      }
      while (*(_QWORD *)(a1 + 64) > v17);
    }
  }
  v19 = *(_QWORD *)(a1 + 80);
  if (v19)
    *(_QWORD *)(v3 + 48) = _readWithClause(v19);
  v20 = *(_DWORD *)(a1 + 88);
  if (v20 == 3)
    v21 = 2;
  else
    v21 = v20 == 2;
  *(_DWORD *)(v3 + 56) = v21;
  return v3;
}

unint64_t _readDeleteStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)v3 = 234;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readRangeVar(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
    *(_QWORD *)(v3 + 24) = _readNode(v11);
  if (*(_QWORD *)(a1 + 56))
  {
    v12 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v12);
    *(_QWORD *)(v3 + 32) = v13;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v16));
        v14 = lappend(v14, v17);
        *(_QWORD *)(v3 + 32) = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 56) > v16);
    }
  }
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
    *(_QWORD *)(v3 + 40) = _readWithClause(v18);
  return v3;
}

unint64_t _readUpdateStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)v3 = 235;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readRangeVar(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
    *(_QWORD *)(v3 + 24) = _readNode(v11);
  if (*(_QWORD *)(a1 + 56))
  {
    v12 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v12);
    *(_QWORD *)(v3 + 32) = v13;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v16));
        v14 = lappend(v14, v17);
        *(_QWORD *)(v3 + 32) = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 56) > v16);
    }
  }
  if (*(_QWORD *)(a1 + 72))
  {
    v18 = _readNode(**(_QWORD **)(a1 + 80));
    list_make1_impl(226, v18);
    *(_QWORD *)(v3 + 40) = v19;
    if (*(_QWORD *)(a1 + 72) >= 2uLL)
    {
      v20 = v19;
      v21 = 2;
      v22 = 1;
      do
      {
        v23 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v22));
        v20 = lappend(v20, v23);
        *(_QWORD *)(v3 + 40) = v20;
        v22 = v21++;
      }
      while (*(_QWORD *)(a1 + 72) > v22);
    }
  }
  v24 = *(_QWORD *)(a1 + 88);
  if (v24)
    *(_QWORD *)(v3 + 48) = _readWithClause(v24);
  return v3;
}

unint64_t _readSelectStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int v62;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x98uLL);
  *(_DWORD *)v3 = 236;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    *(_QWORD *)(v3 + 16) = _readIntoClause(v10);
  if (*(_QWORD *)(a1 + 48))
  {
    v11 = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, v11);
    *(_QWORD *)(v3 + 24) = v12;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v13 = v12;
      v14 = 2;
      v15 = 1;
      do
      {
        v16 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15));
        v13 = lappend(v13, v16);
        *(_QWORD *)(v3 + 24) = v13;
        v15 = v14++;
      }
      while (*(_QWORD *)(a1 + 48) > v15);
    }
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v17 = _readNode(**(_QWORD **)(a1 + 72));
    list_make1_impl(226, v17);
    *(_QWORD *)(v3 + 32) = v18;
    if (*(_QWORD *)(a1 + 64) >= 2uLL)
    {
      v19 = v18;
      v20 = 2;
      v21 = 1;
      do
      {
        v22 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v21));
        v19 = lappend(v19, v22);
        *(_QWORD *)(v3 + 32) = v19;
        v21 = v20++;
      }
      while (*(_QWORD *)(a1 + 64) > v21);
    }
  }
  v23 = *(_QWORD *)(a1 + 80);
  if (v23)
    *(_QWORD *)(v3 + 40) = _readNode(v23);
  if (*(_QWORD *)(a1 + 88))
  {
    v24 = _readNode(**(_QWORD **)(a1 + 96));
    list_make1_impl(226, v24);
    *(_QWORD *)(v3 + 48) = v25;
    if (*(_QWORD *)(a1 + 88) >= 2uLL)
    {
      v26 = v25;
      v27 = 2;
      v28 = 1;
      do
      {
        v29 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v28));
        v26 = lappend(v26, v29);
        *(_QWORD *)(v3 + 48) = v26;
        v28 = v27++;
      }
      while (*(_QWORD *)(a1 + 88) > v28);
    }
  }
  v30 = *(_QWORD *)(a1 + 104);
  if (v30)
    *(_QWORD *)(v3 + 56) = _readNode(v30);
  if (*(_QWORD *)(a1 + 112))
  {
    v31 = _readNode(**(_QWORD **)(a1 + 120));
    list_make1_impl(226, v31);
    *(_QWORD *)(v3 + 64) = v32;
    if (*(_QWORD *)(a1 + 112) >= 2uLL)
    {
      v33 = v32;
      v34 = 2;
      v35 = 1;
      do
      {
        v36 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v35));
        v33 = lappend(v33, v36);
        *(_QWORD *)(v3 + 64) = v33;
        v35 = v34++;
      }
      while (*(_QWORD *)(a1 + 112) > v35);
    }
  }
  if (*(_QWORD *)(a1 + 128))
  {
    v37 = _readNode(**(_QWORD **)(a1 + 136));
    list_make1_impl(226, v37);
    *(_QWORD *)(v3 + 72) = v38;
    if (*(_QWORD *)(a1 + 128) >= 2uLL)
    {
      v39 = v38;
      v40 = 2;
      v41 = 1;
      do
      {
        v42 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v41));
        v39 = lappend(v39, v42);
        *(_QWORD *)(v3 + 72) = v39;
        v41 = v40++;
      }
      while (*(_QWORD *)(a1 + 128) > v41);
    }
  }
  if (*(_QWORD *)(a1 + 144))
  {
    v43 = _readNode(**(_QWORD **)(a1 + 152));
    list_make1_impl(226, v43);
    *(_QWORD *)(v3 + 80) = v44;
    if (*(_QWORD *)(a1 + 144) >= 2uLL)
    {
      v45 = v44;
      v46 = 2;
      v47 = 1;
      do
      {
        v48 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v47));
        v45 = lappend(v45, v48);
        *(_QWORD *)(v3 + 80) = v45;
        v47 = v46++;
      }
      while (*(_QWORD *)(a1 + 144) > v47);
    }
  }
  v49 = *(_QWORD *)(a1 + 160);
  if (v49)
    *(_QWORD *)(v3 + 88) = _readNode(v49);
  v50 = *(_QWORD *)(a1 + 168);
  if (v50)
    *(_QWORD *)(v3 + 96) = _readNode(v50);
  v51 = *(_DWORD *)(a1 + 176);
  if (v51 == 3)
    v52 = 2;
  else
    v52 = v51 == 2;
  *(_DWORD *)(v3 + 104) = v52;
  if (*(_QWORD *)(a1 + 184))
  {
    v53 = _readNode(**(_QWORD **)(a1 + 192));
    list_make1_impl(226, v53);
    *(_QWORD *)(v3 + 112) = v54;
    if (*(_QWORD *)(a1 + 184) >= 2uLL)
    {
      v55 = v54;
      v56 = 2;
      v57 = 1;
      do
      {
        v58 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v57));
        v55 = lappend(v55, v58);
        *(_QWORD *)(v3 + 112) = v55;
        v57 = v56++;
      }
      while (*(_QWORD *)(a1 + 184) > v57);
    }
  }
  v59 = *(_QWORD *)(a1 + 200);
  if (v59)
    *(_QWORD *)(v3 + 120) = _readWithClause(v59);
  v60 = *(_DWORD *)(a1 + 208);
  v61 = v60 - 2;
  v62 = v60 - 1;
  if (v61 >= 3)
    v62 = 0;
  *(_DWORD *)(v3 + 128) = v62;
  *(_BYTE *)(v3 + 132) = *(_DWORD *)(a1 + 212) != 0;
  if (*(_QWORD *)(a1 + 216))
    *(_QWORD *)(v3 + 136) = _readSelectStmt();
  if (*(_QWORD *)(a1 + 224))
    *(_QWORD *)(v3 + 144) = _readSelectStmt();
  return v3;
}

unint64_t _readAlterTableStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 237;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readRangeVar(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  v11 = *(_DWORD *)(a1 + 48);
  v12 = v11 - 2;
  v13 = v11 - 1;
  if (v12 >= 0x31)
    v13 = 0;
  *(_DWORD *)(v3 + 24) = v13;
  *(_BYTE *)(v3 + 28) = *(_DWORD *)(a1 + 52) != 0;
  return v3;
}

_DWORD *_readAlterTableCmd(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  const char *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  int v12;
  unsigned int v13;
  int v14;
  const char *v15;
  uint64_t v16;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  v4 = v3;
  *v3 = 238;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 0x42)
    v7 = 0;
  v3[1] = v7;
  v8 = *(const char **)(a1 + 32);
  if (v8 && *v8)
    *((_QWORD *)v4 + 1) = pstrdup(v8);
  *((_WORD *)v4 + 8) = *(_DWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  if (v9)
  {
    v10 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    v11 = v10;
    *v10 = 390;
    v12 = *(_DWORD *)(v9 + 24);
    v13 = v12 - 2;
    v14 = v12 - 1;
    if (v13 >= 3)
      v14 = 0;
    v10[1] = v14;
    v15 = *(const char **)(v9 + 32);
    if (v15 && *v15)
      *((_QWORD *)v11 + 1) = pstrdup(v15);
    v11[4] = *(_DWORD *)(v9 + 40);
    *((_QWORD *)v4 + 3) = v11;
  }
  v16 = *(_QWORD *)(a1 + 56);
  if (v16)
    *((_QWORD *)v4 + 4) = _readNode(v16);
  v4[10] = *(_DWORD *)(a1 + 64) == 2;
  *((_BYTE *)v4 + 44) = *(_DWORD *)(a1 + 68) != 0;
  return v4;
}

unint64_t _readAlterDomainStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t Node;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  v4 = v3;
  *(_DWORD *)v3 = 239;
  v5 = *(unsigned __int8 **)(a1 + 24);
  if (v5)
  {
    v6 = *v5;
    if (v6)
      *(_BYTE *)(v3 + 4) = v6;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v4 + 8) = v8;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v9 = v8;
      v10 = 2;
      v11 = 1;
      do
      {
        v12 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v11));
        v9 = lappend(v9, v12);
        *(_QWORD *)(v4 + 8) = v9;
        v11 = v10++;
      }
      while (*(_QWORD *)(a1 + 32) > v11);
    }
  }
  v13 = *(const char **)(a1 + 48);
  if (v13 && *v13)
    *(_QWORD *)(v4 + 16) = pstrdup(v13);
  v14 = *(_QWORD *)(a1 + 56);
  if (v14)
    *(_QWORD *)(v4 + 24) = _readNode(v14);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 64) == 2;
  *(_BYTE *)(v4 + 36) = *(_DWORD *)(a1 + 68) != 0;
  return v4;
}

_QWORD *_readSetOperationStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  _QWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Node;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x40uLL);
  v4 = (_QWORD *)v3;
  *(_DWORD *)v3 = 240;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 3)
    v7 = 0;
  *(_DWORD *)(v3 + 4) = v7;
  *(_BYTE *)(v3 + 8) = *(_DWORD *)(a1 + 28) != 0;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    v4[2] = _readNode(v8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    v4[3] = _readNode(v9);
  if (*(_QWORD *)(a1 + 48))
  {
    Node = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, Node);
    v4[4] = v11;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v14));
        v12 = lappend(v12, v15);
        v4[4] = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 48) > v14);
    }
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v16 = _readNode(**(_QWORD **)(a1 + 72));
    list_make1_impl(226, v16);
    v4[5] = v17;
    if (*(_QWORD *)(a1 + 64) >= 2uLL)
    {
      v18 = v17;
      v19 = 2;
      v20 = 1;
      do
      {
        v21 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v20));
        v18 = lappend(v18, v21);
        v4[5] = v18;
        v20 = v19++;
      }
      while (*(_QWORD *)(a1 + 64) > v20);
    }
  }
  if (*(_QWORD *)(a1 + 80))
  {
    v22 = _readNode(**(_QWORD **)(a1 + 88));
    list_make1_impl(226, v22);
    v4[6] = v23;
    if (*(_QWORD *)(a1 + 80) >= 2uLL)
    {
      v24 = v23;
      v25 = 2;
      v26 = 1;
      do
      {
        v27 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v26));
        v24 = lappend(v24, v27);
        v4[6] = v24;
        v26 = v25++;
      }
      while (*(_QWORD *)(a1 + 80) > v26);
    }
  }
  if (*(_QWORD *)(a1 + 96))
  {
    v28 = _readNode(**(_QWORD **)(a1 + 104));
    list_make1_impl(226, v28);
    v4[7] = v29;
    if (*(_QWORD *)(a1 + 96) >= 2uLL)
    {
      v30 = v29;
      v31 = 2;
      v32 = 1;
      do
      {
        v33 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v32));
        v30 = lappend(v30, v33);
        v4[7] = v30;
        v32 = v31++;
      }
      while (*(_QWORD *)(a1 + 96) > v32);
    }
  }
  return v4;
}

unint64_t _readGrantStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t Node;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  v4 = v3;
  *(_DWORD *)v3 = 241;
  *(_BYTE *)(v3 + 4) = *(_DWORD *)(a1 + 24) != 0;
  v5 = *(_DWORD *)(a1 + 28);
  if (v5 == 3)
    v6 = 2;
  else
    v6 = v5 == 2;
  *(_DWORD *)(v3 + 8) = v6;
  v7 = *(_DWORD *)(a1 + 32);
  v8 = v7 - 2;
  v9 = v7 - 1;
  if (v8 >= 0x31)
    v9 = 0;
  *(_DWORD *)(v3 + 12) = v9;
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v4 + 16) = v11;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v4 + 16) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 40) > v14);
    }
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v16 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v16);
    *(_QWORD *)(v4 + 24) = v17;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v18 = v17;
      v19 = 2;
      v20 = 1;
      do
      {
        v21 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v20));
        v18 = lappend(v18, v21);
        *(_QWORD *)(v4 + 24) = v18;
        v20 = v19++;
      }
      while (*(_QWORD *)(a1 + 56) > v20);
    }
  }
  if (*(_QWORD *)(a1 + 72))
  {
    v22 = _readNode(**(_QWORD **)(a1 + 80));
    list_make1_impl(226, v22);
    *(_QWORD *)(v4 + 32) = v23;
    if (*(_QWORD *)(a1 + 72) >= 2uLL)
    {
      v24 = v23;
      v25 = 2;
      v26 = 1;
      do
      {
        v27 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v26));
        v24 = lappend(v24, v27);
        *(_QWORD *)(v4 + 32) = v24;
        v26 = v25++;
      }
      while (*(_QWORD *)(a1 + 72) > v26);
    }
  }
  *(_BYTE *)(v4 + 40) = *(_DWORD *)(a1 + 88) != 0;
  *(_DWORD *)(v4 + 44) = *(_DWORD *)(a1 + 92) == 2;
  return v4;
}

unint64_t _readGrantRoleStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  unsigned int v20;
  int v21;
  const char *v22;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)v3 = 242;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, v10);
    *(_QWORD *)(v3 + 16) = v11;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v3 + 16) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 40) > v14);
    }
  }
  *(_BYTE *)(v3 + 24) = *(_DWORD *)(a1 + 56) != 0;
  *(_BYTE *)(v3 + 25) = *(_DWORD *)(a1 + 60) != 0;
  v16 = *(_QWORD *)(a1 + 64);
  if (v16)
  {
    v17 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    v18 = v17;
    *v17 = 390;
    v19 = *(_DWORD *)(v16 + 24);
    v20 = v19 - 2;
    v21 = v19 - 1;
    if (v20 >= 3)
      v21 = 0;
    v17[1] = v21;
    v22 = *(const char **)(v16 + 32);
    if (v22 && *v22)
      *((_QWORD *)v18 + 1) = pstrdup(v22);
    v18[4] = *(_DWORD *)(v16 + 40);
    *(_QWORD *)(v3 + 32) = v18;
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72) == 2;
  return v3;
}

unint64_t _readAlterDefaultPrivilegesStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 243;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    *(_QWORD *)(v3 + 16) = _readGrantStmt(v10);
  return v3;
}

unint64_t _readClosePortalStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)v3 = 244;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  return v3;
}

unint64_t _readClusterStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  const char *v5;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 245;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readRangeVar(v4);
  v5 = *(const char **)(a1 + 32);
  if (v5 && *v5)
    *(_QWORD *)(v3 + 16) = pstrdup(v5);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 40);
  return v3;
}

unint64_t _readCopyStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Node;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x40uLL);
  *(_DWORD *)v3 = 246;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readRangeVar(v4);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readNode(v5);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v7;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v8 = v7;
      v9 = 2;
      v10 = 1;
      do
      {
        v11 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10));
        v8 = lappend(v8, v11);
        *(_QWORD *)(v3 + 24) = v8;
        v10 = v9++;
      }
      while (*(_QWORD *)(a1 + 40) > v10);
    }
  }
  *(_BYTE *)(v3 + 32) = *(_DWORD *)(a1 + 56) != 0;
  *(_BYTE *)(v3 + 33) = *(_DWORD *)(a1 + 60) != 0;
  v12 = *(const char **)(a1 + 64);
  if (v12 && *v12)
    *(_QWORD *)(v3 + 40) = pstrdup(v12);
  if (*(_QWORD *)(a1 + 72))
  {
    v13 = _readNode(**(_QWORD **)(a1 + 80));
    list_make1_impl(226, v13);
    *(_QWORD *)(v3 + 48) = v14;
    if (*(_QWORD *)(a1 + 72) >= 2uLL)
    {
      v15 = v14;
      v16 = 2;
      v17 = 1;
      do
      {
        v18 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v17));
        v15 = lappend(v15, v18);
        *(_QWORD *)(v3 + 48) = v15;
        v17 = v16++;
      }
      while (*(_QWORD *)(a1 + 72) > v17);
    }
  }
  v19 = *(_QWORD *)(a1 + 88);
  if (v19)
    *(_QWORD *)(v3 + 56) = _readNode(v19);
  return v3;
}

unint64_t _readCreateStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  const char *v35;
  const char *v36;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x68uLL);
  *(_DWORD *)v3 = 247;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readRangeVar(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v11 = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, v11);
    *(_QWORD *)(v3 + 24) = v12;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v13 = v12;
      v14 = 2;
      v15 = 1;
      do
      {
        v16 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15));
        v13 = lappend(v13, v16);
        *(_QWORD *)(v3 + 24) = v13;
        v15 = v14++;
      }
      while (*(_QWORD *)(a1 + 48) > v15);
    }
  }
  v17 = *(_QWORD *)(a1 + 64);
  if (v17)
    *(_QWORD *)(v3 + 32) = _readPartitionBoundSpec(v17);
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
    *(_QWORD *)(v3 + 40) = _readPartitionSpec(v18);
  v19 = *(_QWORD *)(a1 + 80);
  if (v19)
    *(_QWORD *)(v3 + 48) = _readTypeName(v19);
  if (*(_QWORD *)(a1 + 88))
  {
    v20 = _readNode(**(_QWORD **)(a1 + 96));
    list_make1_impl(226, v20);
    *(_QWORD *)(v3 + 56) = v21;
    if (*(_QWORD *)(a1 + 88) >= 2uLL)
    {
      v22 = v21;
      v23 = 2;
      v24 = 1;
      do
      {
        v25 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v24));
        v22 = lappend(v22, v25);
        *(_QWORD *)(v3 + 56) = v22;
        v24 = v23++;
      }
      while (*(_QWORD *)(a1 + 88) > v24);
    }
  }
  if (*(_QWORD *)(a1 + 104))
  {
    v26 = _readNode(**(_QWORD **)(a1 + 112));
    list_make1_impl(226, v26);
    *(_QWORD *)(v3 + 64) = v27;
    if (*(_QWORD *)(a1 + 104) >= 2uLL)
    {
      v28 = v27;
      v29 = 2;
      v30 = 1;
      do
      {
        v31 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v30));
        v28 = lappend(v28, v31);
        *(_QWORD *)(v3 + 64) = v28;
        v30 = v29++;
      }
      while (*(_QWORD *)(a1 + 104) > v30);
    }
  }
  v32 = *(_DWORD *)(a1 + 120);
  v33 = v32 - 2;
  v34 = v32 - 1;
  if (v33 >= 3)
    v34 = 0;
  *(_DWORD *)(v3 + 72) = v34;
  v35 = *(const char **)(a1 + 128);
  if (v35 && *v35)
    *(_QWORD *)(v3 + 80) = pstrdup(v35);
  v36 = *(const char **)(a1 + 136);
  if (v36 && *v36)
    *(_QWORD *)(v3 + 88) = pstrdup(v36);
  *(_BYTE *)(v3 + 96) = *(_DWORD *)(a1 + 144) != 0;
  return v3;
}

unint64_t _readDefineStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  v4 = v3;
  *(_DWORD *)v3 = 248;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 0x31)
    v7 = 0;
  *(_DWORD *)(v3 + 4) = v7;
  *(_BYTE *)(v3 + 8) = *(_DWORD *)(a1 + 28) != 0;
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v4 + 16) = v9;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v10 = v9;
      v11 = 2;
      v12 = 1;
      do
      {
        v13 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v12));
        v10 = lappend(v10, v13);
        *(_QWORD *)(v4 + 16) = v10;
        v12 = v11++;
      }
      while (*(_QWORD *)(a1 + 32) > v12);
    }
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v14 = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, v14);
    *(_QWORD *)(v4 + 24) = v15;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v16 = v15;
      v17 = 2;
      v18 = 1;
      do
      {
        v19 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v18));
        v16 = lappend(v16, v19);
        *(_QWORD *)(v4 + 24) = v16;
        v18 = v17++;
      }
      while (*(_QWORD *)(a1 + 48) > v18);
    }
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v20 = _readNode(**(_QWORD **)(a1 + 72));
    list_make1_impl(226, v20);
    *(_QWORD *)(v4 + 32) = v21;
    if (*(_QWORD *)(a1 + 64) >= 2uLL)
    {
      v22 = v21;
      v23 = 2;
      v24 = 1;
      do
      {
        v25 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v24));
        v22 = lappend(v22, v25);
        *(_QWORD *)(v4 + 32) = v22;
        v24 = v23++;
      }
      while (*(_QWORD *)(a1 + 64) > v24);
    }
  }
  *(_BYTE *)(v4 + 40) = *(_DWORD *)(a1 + 80) != 0;
  *(_BYTE *)(v4 + 41) = *(_DWORD *)(a1 + 84) != 0;
  return v4;
}

unint64_t _readDropStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 249;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  v10 = *(_DWORD *)(a1 + 40);
  v11 = v10 - 2;
  v12 = v10 - 1;
  if (v11 >= 0x31)
    v12 = 0;
  *(_DWORD *)(v3 + 16) = v12;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44) == 2;
  *(_BYTE *)(v3 + 24) = *(_DWORD *)(a1 + 48) != 0;
  *(_BYTE *)(v3 + 25) = *(_DWORD *)(a1 + 52) != 0;
  return v3;
}

unint64_t _readTruncateStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 250;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  *(_BYTE *)(v3 + 16) = *(_DWORD *)(a1 + 40) != 0;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44) == 2;
  return v3;
}

_DWORD *_readCommentStmt(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  const char *v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  v4 = v3;
  *v3 = 251;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 0x31)
    v7 = 0;
  v3[1] = v7;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    *((_QWORD *)v4 + 1) = _readNode(v8);
  v9 = *(const char **)(a1 + 40);
  if (v9 && *v9)
    *((_QWORD *)v4 + 2) = pstrdup(v9);
  return v4;
}

unint64_t _readFetchStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  const char *v8;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  v4 = v3;
  *(_DWORD *)v3 = 252;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 3)
    v7 = 0;
  *(_DWORD *)(v3 + 4) = v7;
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(a1 + 32);
  v8 = *(const char **)(a1 + 40);
  if (v8 && *v8)
    *(_QWORD *)(v4 + 16) = pstrdup(v8);
  *(_BYTE *)(v4 + 24) = *(_DWORD *)(a1 + 48) != 0;
  return v4;
}

unint64_t _readIndexStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  const char *v33;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x78uLL);
  *(_DWORD *)v3 = 253;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readRangeVar(v5);
  v6 = *(const char **)(a1 + 40);
  if (v6 && *v6)
    *(_QWORD *)(v3 + 24) = pstrdup(v6);
  v7 = *(const char **)(a1 + 48);
  if (v7 && *v7)
    *(_QWORD *)(v3 + 32) = pstrdup(v7);
  if (*(_QWORD *)(a1 + 56))
  {
    Node = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 40) = v9;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v10 = v9;
      v11 = 2;
      v12 = 1;
      do
      {
        v13 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v12));
        v10 = lappend(v10, v13);
        *(_QWORD *)(v3 + 40) = v10;
        v12 = v11++;
      }
      while (*(_QWORD *)(a1 + 56) > v12);
    }
  }
  if (*(_QWORD *)(a1 + 72))
  {
    v14 = _readNode(**(_QWORD **)(a1 + 80));
    list_make1_impl(226, v14);
    *(_QWORD *)(v3 + 48) = v15;
    if (*(_QWORD *)(a1 + 72) >= 2uLL)
    {
      v16 = v15;
      v17 = 2;
      v18 = 1;
      do
      {
        v19 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v18));
        v16 = lappend(v16, v19);
        *(_QWORD *)(v3 + 48) = v16;
        v18 = v17++;
      }
      while (*(_QWORD *)(a1 + 72) > v18);
    }
  }
  if (*(_QWORD *)(a1 + 88))
  {
    v20 = _readNode(**(_QWORD **)(a1 + 96));
    list_make1_impl(226, v20);
    *(_QWORD *)(v3 + 56) = v21;
    if (*(_QWORD *)(a1 + 88) >= 2uLL)
    {
      v22 = v21;
      v23 = 2;
      v24 = 1;
      do
      {
        v25 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v24));
        v22 = lappend(v22, v25);
        *(_QWORD *)(v3 + 56) = v22;
        v24 = v23++;
      }
      while (*(_QWORD *)(a1 + 88) > v24);
    }
  }
  v26 = *(_QWORD *)(a1 + 104);
  if (v26)
    *(_QWORD *)(v3 + 64) = _readNode(v26);
  if (*(_QWORD *)(a1 + 112))
  {
    v27 = _readNode(**(_QWORD **)(a1 + 120));
    list_make1_impl(226, v27);
    *(_QWORD *)(v3 + 72) = v28;
    if (*(_QWORD *)(a1 + 112) >= 2uLL)
    {
      v29 = v28;
      v30 = 2;
      v31 = 1;
      do
      {
        v32 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v31));
        v29 = lappend(v29, v32);
        *(_QWORD *)(v3 + 72) = v29;
        v31 = v30++;
      }
      while (*(_QWORD *)(a1 + 112) > v31);
    }
  }
  v33 = *(const char **)(a1 + 128);
  if (v33 && *v33)
    *(_QWORD *)(v3 + 80) = pstrdup(v33);
  *(_DWORD *)(v3 + 88) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(v3 + 92) = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(v3 + 96) = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(v3 + 100) = *(_DWORD *)(a1 + 148);
  *(_BYTE *)(v3 + 104) = *(_DWORD *)(a1 + 152) != 0;
  *(_BYTE *)(v3 + 105) = *(_DWORD *)(a1 + 156) != 0;
  *(_BYTE *)(v3 + 106) = *(_DWORD *)(a1 + 160) != 0;
  *(_BYTE *)(v3 + 107) = *(_DWORD *)(a1 + 164) != 0;
  *(_BYTE *)(v3 + 108) = *(_DWORD *)(a1 + 168) != 0;
  *(_BYTE *)(v3 + 109) = *(_DWORD *)(a1 + 172) != 0;
  *(_BYTE *)(v3 + 110) = *(_DWORD *)(a1 + 176) != 0;
  *(_BYTE *)(v3 + 111) = *(_DWORD *)(a1 + 180) != 0;
  *(_BYTE *)(v3 + 112) = *(_DWORD *)(a1 + 184) != 0;
  return v3;
}

unint64_t _readCreateFunctionStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 254;
  *(_BYTE *)(v3 + 4) = *(_DWORD *)(a1 + 24) != 0;
  *(_BYTE *)(v3 + 5) = *(_DWORD *)(a1 + 28) != 0;
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 32) > v8);
    }
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v10 = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, v10);
    *(_QWORD *)(v3 + 16) = v11;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v3 + 16) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 48) > v14);
    }
  }
  v16 = *(_QWORD *)(a1 + 64);
  if (v16)
    *(_QWORD *)(v3 + 24) = _readTypeName(v16);
  if (*(_QWORD *)(a1 + 72))
  {
    v17 = _readNode(**(_QWORD **)(a1 + 80));
    list_make1_impl(226, v17);
    *(_QWORD *)(v3 + 32) = v18;
    if (*(_QWORD *)(a1 + 72) >= 2uLL)
    {
      v19 = v18;
      v20 = 2;
      v21 = 1;
      do
      {
        v22 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v21));
        v19 = lappend(v19, v22);
        *(_QWORD *)(v3 + 32) = v19;
        v21 = v20++;
      }
      while (*(_QWORD *)(a1 + 72) > v21);
    }
  }
  return v3;
}

_DWORD *_readAlterFunctionStmt(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  v4 = v3;
  *v3 = 255;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 0x31)
    v7 = 0;
  v3[1] = v7;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    *((_QWORD *)v4 + 1) = _readObjectWithArgs(v8);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *((_QWORD *)v4 + 2) = v10;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v11 = v10;
      v12 = 2;
      v13 = 1;
      do
      {
        v14 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v13));
        v11 = lappend(v11, v14);
        *((_QWORD *)v4 + 2) = v11;
        v13 = v12++;
      }
      while (*(_QWORD *)(a1 + 40) > v13);
    }
  }
  return v4;
}

unint64_t _readDoStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)v3 = 256;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  return v3;
}

_DWORD *_readRenameStmt(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  v4 = v3;
  *v3 = 257;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 0x31)
    v7 = 0;
  v3[1] = v7;
  v8 = *(_DWORD *)(a1 + 28);
  v9 = v8 - 2;
  v10 = v8 - 1;
  if (v9 >= 0x31)
    v10 = 0;
  v3[2] = v10;
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
    *((_QWORD *)v4 + 2) = _readRangeVar(v11);
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
    *((_QWORD *)v4 + 3) = _readNode(v12);
  v13 = *(const char **)(a1 + 48);
  if (v13 && *v13)
    *((_QWORD *)v4 + 4) = pstrdup(v13);
  v14 = *(const char **)(a1 + 56);
  if (v14 && *v14)
    *((_QWORD *)v4 + 5) = pstrdup(v14);
  v4[12] = *(_DWORD *)(a1 + 64) == 2;
  *((_BYTE *)v4 + 52) = *(_DWORD *)(a1 + 68) != 0;
  return v4;
}

unint64_t _readRuleStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t Node;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)v3 = 258;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readRangeVar(v4);
  v5 = *(const char **)(a1 + 32);
  if (v5 && *v5)
    *(_QWORD *)(v3 + 16) = pstrdup(v5);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    *(_QWORD *)(v3 + 24) = _readNode(v6);
  v7 = *(_DWORD *)(a1 + 48);
  v8 = v7 - 2;
  v9 = v7 - 1;
  if (v8 >= 6)
    v9 = 0;
  *(_DWORD *)(v3 + 32) = v9;
  *(_BYTE *)(v3 + 36) = *(_DWORD *)(a1 + 52) != 0;
  if (*(_QWORD *)(a1 + 56))
  {
    Node = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 40) = v11;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v3 + 40) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 56) > v14);
    }
  }
  *(_BYTE *)(v3 + 48) = *(_DWORD *)(a1 + 72) != 0;
  return v3;
}

unint64_t _readNotifyStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  const char *v5;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 259;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(const char **)(a1 + 32);
  if (v5 && *v5)
    *(_QWORD *)(v3 + 16) = pstrdup(v5);
  return v3;
}

unint64_t _readListenStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)v3 = 260;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  return v3;
}

unint64_t _readUnlistenStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)v3 = 261;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  return v3;
}

_DWORD *_readTransactionStmt(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  v4 = v3;
  *v3 = 262;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 9)
    v7 = 0;
  v3[1] = v7;
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *((_QWORD *)v4 + 1) = v9;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v10 = v9;
      v11 = 2;
      v12 = 1;
      do
      {
        v13 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v12));
        v10 = lappend(v10, v13);
        *((_QWORD *)v4 + 1) = v10;
        v12 = v11++;
      }
      while (*(_QWORD *)(a1 + 32) > v12);
    }
  }
  v14 = *(const char **)(a1 + 48);
  if (v14 && *v14)
    *((_QWORD *)v4 + 2) = pstrdup(v14);
  v15 = *(const char **)(a1 + 56);
  if (v15 && *v15)
    *((_QWORD *)v4 + 3) = pstrdup(v15);
  *((_BYTE *)v4 + 32) = *(_DWORD *)(a1 + 64) != 0;
  return v4;
}

unint64_t _readViewStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)v3 = 263;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readRangeVar(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
    *(_QWORD *)(v3 + 24) = _readNode(v11);
  *(_BYTE *)(v3 + 32) = *(_DWORD *)(a1 + 56) != 0;
  if (*(_QWORD *)(a1 + 64))
  {
    v12 = _readNode(**(_QWORD **)(a1 + 72));
    list_make1_impl(226, v12);
    *(_QWORD *)(v3 + 40) = v13;
    if (*(_QWORD *)(a1 + 64) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v16));
        v14 = lappend(v14, v17);
        *(_QWORD *)(v3 + 40) = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 64) > v16);
    }
  }
  v18 = *(_DWORD *)(a1 + 80);
  if (v18 == 3)
    v19 = 2;
  else
    v19 = v18 == 2;
  *(_DWORD *)(v3 + 48) = v19;
  return v3;
}

unint64_t _readLoadStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)v3 = 264;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  return v3;
}

unint64_t _readCreateDomainStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 265;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    *(_QWORD *)(v3 + 16) = _readTypeName(v10);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
    *(_QWORD *)(v3 + 24) = _readCollateClause(v11);
  if (*(_QWORD *)(a1 + 56))
  {
    v12 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v12);
    *(_QWORD *)(v3 + 32) = v13;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v16));
        v14 = lappend(v14, v17);
        *(_QWORD *)(v3 + 32) = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 56) > v16);
    }
  }
  return v3;
}

unint64_t _readCreatedbStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 266;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readDropdbStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 267;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  *(_BYTE *)(v3 + 16) = *(_DWORD *)(a1 + 32) != 0;
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v6;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 24) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 40) > v9);
    }
  }
  return v3;
}

unint64_t _readVacuumStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 268;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, v10);
    *(_QWORD *)(v3 + 16) = v11;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v3 + 16) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 40) > v14);
    }
  }
  *(_BYTE *)(v3 + 24) = *(_DWORD *)(a1 + 56) != 0;
  return v3;
}

unint64_t _readExplainStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 269;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readCreateTableAsStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 270;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readIntoClause(v5);
  v6 = *(_DWORD *)(a1 + 40);
  v7 = v6 - 2;
  v8 = v6 - 1;
  if (v7 >= 0x31)
    v8 = 0;
  *(_DWORD *)(v3 + 24) = v8;
  *(_BYTE *)(v3 + 28) = *(_DWORD *)(a1 + 44) != 0;
  *(_BYTE *)(v3 + 29) = *(_DWORD *)(a1 + 48) != 0;
  return v3;
}

unint64_t _readCreateSeqStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 271;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readRangeVar(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  *(_BYTE *)(v3 + 28) = *(_DWORD *)(a1 + 52) != 0;
  *(_BYTE *)(v3 + 29) = *(_DWORD *)(a1 + 56) != 0;
  return v3;
}

unint64_t _readAlterSeqStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 272;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readRangeVar(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  *(_BYTE *)(v3 + 24) = *(_DWORD *)(a1 + 48) != 0;
  *(_BYTE *)(v3 + 25) = *(_DWORD *)(a1 + 52) != 0;
  return v3;
}

_DWORD *_readVariableSetStmt(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  const char *v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  v4 = v3;
  *v3 = 273;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 5)
    v7 = 0;
  v3[1] = v7;
  v8 = *(const char **)(a1 + 32);
  if (v8 && *v8)
    *((_QWORD *)v4 + 1) = pstrdup(v8);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *((_QWORD *)v4 + 2) = v10;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v11 = v10;
      v12 = 2;
      v13 = 1;
      do
      {
        v14 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v13));
        v11 = lappend(v11, v14);
        *((_QWORD *)v4 + 2) = v11;
        v13 = v12++;
      }
      while (*(_QWORD *)(a1 + 40) > v13);
    }
  }
  *((_BYTE *)v4 + 24) = *(_DWORD *)(a1 + 56) != 0;
  return v4;
}

unint64_t _readVariableShowStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)v3 = 274;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  return v3;
}

_DWORD *_readDiscardStmt(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *result;
  int v4;
  unsigned int v5;
  int v6;

  v2 = (uint64_t *)CurrentMemoryContext();
  result = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 8uLL);
  *result = 275;
  v4 = *(_DWORD *)(a1 + 24);
  v5 = v4 - 2;
  v6 = v4 - 1;
  if (v5 >= 3)
    v6 = 0;
  result[1] = v6;
  return result;
}

unint64_t _readCreateTrigStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t Node;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x60uLL);
  *(_DWORD *)v3 = 276;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readRangeVar(v5);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v7;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v8 = v7;
      v9 = 2;
      v10 = 1;
      do
      {
        v11 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10));
        v8 = lappend(v8, v11);
        *(_QWORD *)(v3 + 24) = v8;
        v10 = v9++;
      }
      while (*(_QWORD *)(a1 + 40) > v10);
    }
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v12 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v12);
    *(_QWORD *)(v3 + 32) = v13;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v16));
        v14 = lappend(v14, v17);
        *(_QWORD *)(v3 + 32) = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 56) > v16);
    }
  }
  *(_BYTE *)(v3 + 40) = *(_DWORD *)(a1 + 72) != 0;
  *(_WORD *)(v3 + 42) = *(_DWORD *)(a1 + 76);
  *(_WORD *)(v3 + 44) = *(_DWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88))
  {
    v18 = _readNode(**(_QWORD **)(a1 + 96));
    list_make1_impl(226, v18);
    *(_QWORD *)(v3 + 48) = v19;
    if (*(_QWORD *)(a1 + 88) >= 2uLL)
    {
      v20 = v19;
      v21 = 2;
      v22 = 1;
      do
      {
        v23 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v22));
        v20 = lappend(v20, v23);
        *(_QWORD *)(v3 + 48) = v20;
        v22 = v21++;
      }
      while (*(_QWORD *)(a1 + 88) > v22);
    }
  }
  v24 = *(_QWORD *)(a1 + 104);
  if (v24)
    *(_QWORD *)(v3 + 56) = _readNode(v24);
  *(_BYTE *)(v3 + 64) = *(_DWORD *)(a1 + 112) != 0;
  if (*(_QWORD *)(a1 + 120))
  {
    v25 = _readNode(**(_QWORD **)(a1 + 128));
    list_make1_impl(226, v25);
    *(_QWORD *)(v3 + 72) = v26;
    if (*(_QWORD *)(a1 + 120) >= 2uLL)
    {
      v27 = v26;
      v28 = 2;
      v29 = 1;
      do
      {
        v30 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v29));
        v27 = lappend(v27, v30);
        *(_QWORD *)(v3 + 72) = v27;
        v29 = v28++;
      }
      while (*(_QWORD *)(a1 + 120) > v29);
    }
  }
  *(_BYTE *)(v3 + 80) = *(_DWORD *)(a1 + 136) != 0;
  *(_BYTE *)(v3 + 81) = *(_DWORD *)(a1 + 140) != 0;
  v31 = *(_QWORD *)(a1 + 144);
  if (v31)
    *(_QWORD *)(v3 + 88) = _readRangeVar(v31);
  return v3;
}

unint64_t _readCreatePLangStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)v3 = 277;
  *(_BYTE *)(v3 + 4) = *(_DWORD *)(a1 + 24) != 0;
  v4 = *(const char **)(a1 + 32);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 40) > v9);
    }
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v11 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v11);
    *(_QWORD *)(v3 + 24) = v12;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v13 = v12;
      v14 = 2;
      v15 = 1;
      do
      {
        v16 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15));
        v13 = lappend(v13, v16);
        *(_QWORD *)(v3 + 24) = v13;
        v15 = v14++;
      }
      while (*(_QWORD *)(a1 + 56) > v15);
    }
  }
  if (*(_QWORD *)(a1 + 72))
  {
    v17 = _readNode(**(_QWORD **)(a1 + 80));
    list_make1_impl(226, v17);
    *(_QWORD *)(v3 + 32) = v18;
    if (*(_QWORD *)(a1 + 72) >= 2uLL)
    {
      v19 = v18;
      v20 = 2;
      v21 = 1;
      do
      {
        v22 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v21));
        v19 = lappend(v19, v22);
        *(_QWORD *)(v3 + 32) = v19;
        v21 = v20++;
      }
      while (*(_QWORD *)(a1 + 72) > v21);
    }
  }
  *(_BYTE *)(v3 + 40) = *(_DWORD *)(a1 + 88) != 0;
  return v3;
}

_DWORD *_readCreateRoleStmt(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  int v6;
  const char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  v4 = v3;
  *v3 = 278;
  v5 = *(_DWORD *)(a1 + 24);
  if (v5 == 3)
    v6 = 2;
  else
    v6 = v5 == 2;
  v3[1] = v6;
  v7 = *(const char **)(a1 + 32);
  if (v7 && *v7)
    *((_QWORD *)v4 + 1) = pstrdup(v7);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *((_QWORD *)v4 + 2) = v9;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v10 = v9;
      v11 = 2;
      v12 = 1;
      do
      {
        v13 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v12));
        v10 = lappend(v10, v13);
        *((_QWORD *)v4 + 2) = v10;
        v12 = v11++;
      }
      while (*(_QWORD *)(a1 + 40) > v12);
    }
  }
  return v4;
}

unint64_t _readAlterRoleStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  unsigned int v8;
  int v9;
  const char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 279;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    v6 = v5;
    *v5 = 390;
    v7 = *(_DWORD *)(v4 + 24);
    v8 = v7 - 2;
    v9 = v7 - 1;
    if (v8 >= 3)
      v9 = 0;
    v5[1] = v9;
    v10 = *(const char **)(v4 + 32);
    if (v10 && *v10)
      *((_QWORD *)v6 + 1) = pstrdup(v10);
    v6[4] = *(_DWORD *)(v4 + 40);
    *(_QWORD *)(v3 + 8) = v6;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v12;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v13 = v12;
      v14 = 2;
      v15 = 1;
      do
      {
        v16 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v15));
        v13 = lappend(v13, v16);
        *(_QWORD *)(v3 + 16) = v13;
        v15 = v14++;
      }
      while (*(_QWORD *)(a1 + 32) > v15);
    }
  }
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  return v3;
}

unint64_t _readDropRoleStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 280;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  *(_BYTE *)(v3 + 16) = *(_DWORD *)(a1 + 40) != 0;
  return v3;
}

unint64_t _readLockStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 281;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(v3 + 20) = *(_DWORD *)(a1 + 44) != 0;
  return v3;
}

unint64_t _readConstraintsSetStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 282;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  *(_BYTE *)(v3 + 16) = *(_DWORD *)(a1 + 40) != 0;
  return v3;
}

_DWORD *_readReindexStmt(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  const char *v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  v4 = v3;
  *v3 = 283;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 4)
    v7 = 0;
  v3[1] = v7;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    *((_QWORD *)v4 + 1) = _readRangeVar(v8);
  v9 = *(const char **)(a1 + 40);
  if (v9 && *v9)
    *((_QWORD *)v4 + 2) = pstrdup(v9);
  v4[6] = *(_DWORD *)(a1 + 48);
  *((_BYTE *)v4 + 28) = *(_DWORD *)(a1 + 52) != 0;
  return v4;
}

unint64_t _readCreateSchemaStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  unsigned int v9;
  int v10;
  const char *v11;
  uint64_t Node;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 285;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    v7 = v6;
    *v6 = 390;
    v8 = *(_DWORD *)(v5 + 24);
    v9 = v8 - 2;
    v10 = v8 - 1;
    if (v9 >= 3)
      v10 = 0;
    v6[1] = v10;
    v11 = *(const char **)(v5 + 32);
    if (v11 && *v11)
      *((_QWORD *)v7 + 1) = pstrdup(v11);
    v7[4] = *(_DWORD *)(v5 + 40);
    *(_QWORD *)(v3 + 16) = v7;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v13;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v16));
        v14 = lappend(v14, v17);
        *(_QWORD *)(v3 + 24) = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 40) > v16);
    }
  }
  *(_BYTE *)(v3 + 32) = *(_DWORD *)(a1 + 56) != 0;
  return v3;
}

unint64_t _readAlterDatabaseStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 286;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readAlterDatabaseSetStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 287;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readVariableSetStmt(v5);
  return v3;
}

unint64_t _readAlterRoleSetStmt(_QWORD *a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  unsigned int v8;
  int v9;
  const char *v10;
  const char *v11;
  uint64_t v12;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 288;
  v4 = a1[3];
  if (v4)
  {
    v5 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    v6 = v5;
    *v5 = 390;
    v7 = *(_DWORD *)(v4 + 24);
    v8 = v7 - 2;
    v9 = v7 - 1;
    if (v8 >= 3)
      v9 = 0;
    v5[1] = v9;
    v10 = *(const char **)(v4 + 32);
    if (v10 && *v10)
      *((_QWORD *)v6 + 1) = pstrdup(v10);
    v6[4] = *(_DWORD *)(v4 + 40);
    *(_QWORD *)(v3 + 8) = v6;
  }
  v11 = (const char *)a1[4];
  if (v11 && *v11)
    *(_QWORD *)(v3 + 16) = pstrdup(v11);
  v12 = a1[5];
  if (v12)
    *(_QWORD *)(v3 + 24) = _readVariableSetStmt(v12);
  return v3;
}

unint64_t _readCreateConversionStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)v3 = 289;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  v10 = *(const char **)(a1 + 40);
  if (v10 && *v10)
    *(_QWORD *)(v3 + 16) = pstrdup(v10);
  v11 = *(const char **)(a1 + 48);
  if (v11 && *v11)
    *(_QWORD *)(v3 + 24) = pstrdup(v11);
  if (*(_QWORD *)(a1 + 56))
  {
    v12 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v12);
    *(_QWORD *)(v3 + 32) = v13;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v16));
        v14 = lappend(v14, v17);
        *(_QWORD *)(v3 + 32) = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 56) > v16);
    }
  }
  *(_BYTE *)(v3 + 40) = *(_DWORD *)(a1 + 72) != 0;
  return v3;
}

unint64_t _readCreateCastStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 290;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readTypeName(v4);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readTypeName(v5);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    *(_QWORD *)(v3 + 24) = _readObjectWithArgs(v6);
  v7 = *(_DWORD *)(a1 + 48);
  if (v7 == 3)
    v8 = 2;
  else
    v8 = v7 == 2;
  *(_DWORD *)(v3 + 32) = v8;
  *(_BYTE *)(v3 + 36) = *(_DWORD *)(a1 + 52) != 0;
  return v3;
}

unint64_t _readCreateOpClassStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)v3 = 291;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, v10);
    *(_QWORD *)(v3 + 16) = v11;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v3 + 16) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 40) > v14);
    }
  }
  v16 = *(const char **)(a1 + 56);
  if (v16 && *v16)
    *(_QWORD *)(v3 + 24) = pstrdup(v16);
  v17 = *(_QWORD *)(a1 + 64);
  if (v17)
    *(_QWORD *)(v3 + 32) = _readTypeName(v17);
  if (*(_QWORD *)(a1 + 72))
  {
    v18 = _readNode(**(_QWORD **)(a1 + 80));
    list_make1_impl(226, v18);
    *(_QWORD *)(v3 + 40) = v19;
    if (*(_QWORD *)(a1 + 72) >= 2uLL)
    {
      v20 = v19;
      v21 = 2;
      v22 = 1;
      do
      {
        v23 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v22));
        v20 = lappend(v20, v23);
        *(_QWORD *)(v3 + 40) = v20;
        v22 = v21++;
      }
      while (*(_QWORD *)(a1 + 72) > v22);
    }
  }
  *(_BYTE *)(v3 + 48) = *(_DWORD *)(a1 + 88) != 0;
  return v3;
}

unint64_t _readCreateOpFamilyStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 292;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  v10 = *(const char **)(a1 + 40);
  if (v10 && *v10)
    *(_QWORD *)(v3 + 16) = pstrdup(v10);
  return v3;
}

unint64_t _readAlterOpFamilyStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 293;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  v10 = *(const char **)(a1 + 40);
  if (v10 && *v10)
    *(_QWORD *)(v3 + 16) = pstrdup(v10);
  *(_BYTE *)(v3 + 24) = *(_DWORD *)(a1 + 48) != 0;
  if (*(_QWORD *)(a1 + 56))
  {
    v11 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v11);
    *(_QWORD *)(v3 + 32) = v12;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v13 = v12;
      v14 = 2;
      v15 = 1;
      do
      {
        v16 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15));
        v13 = lappend(v13, v16);
        *(_QWORD *)(v3 + 32) = v13;
        v15 = v14++;
      }
      while (*(_QWORD *)(a1 + 56) > v15);
    }
  }
  return v3;
}

unint64_t _readPrepareStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 294;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
    *(_QWORD *)(v3 + 24) = _readNode(v11);
  return v3;
}

unint64_t _readExecuteStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 295;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readDeallocateStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)v3 = 296;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  return v3;
}

unint64_t _readDeclareCursorStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 297;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    *(_QWORD *)(v3 + 24) = _readNode(v5);
  return v3;
}

unint64_t _readCreateTableSpaceStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  unsigned int v9;
  int v10;
  const char *v11;
  const char *v12;
  uint64_t Node;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 298;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    v7 = v6;
    *v6 = 390;
    v8 = *(_DWORD *)(v5 + 24);
    v9 = v8 - 2;
    v10 = v8 - 1;
    if (v9 >= 3)
      v10 = 0;
    v6[1] = v10;
    v11 = *(const char **)(v5 + 32);
    if (v11 && *v11)
      *((_QWORD *)v7 + 1) = pstrdup(v11);
    v7[4] = *(_DWORD *)(v5 + 40);
    *(_QWORD *)(v3 + 16) = v7;
  }
  v12 = *(const char **)(a1 + 40);
  if (v12 && *v12)
    *(_QWORD *)(v3 + 24) = pstrdup(v12);
  if (*(_QWORD *)(a1 + 48))
  {
    Node = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 32) = v14;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v15 = v14;
      v16 = 2;
      v17 = 1;
      do
      {
        v18 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v17));
        v15 = lappend(v15, v18);
        *(_QWORD *)(v3 + 32) = v15;
        v17 = v16++;
      }
      while (*(_QWORD *)(a1 + 48) > v17);
    }
  }
  return v3;
}

unint64_t _readDropTableSpaceStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 299;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  *(_BYTE *)(v3 + 16) = *(_DWORD *)(a1 + 32) != 0;
  return v3;
}

_DWORD *_readAlterObjectDependsStmt(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  v4 = v3;
  *v3 = 300;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 0x31)
    v7 = 0;
  v3[1] = v7;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    *((_QWORD *)v4 + 1) = _readRangeVar(v8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    *((_QWORD *)v4 + 2) = _readNode(v9);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
    *((_QWORD *)v4 + 3) = _readNode(v10);
  *((_BYTE *)v4 + 32) = *(_DWORD *)(a1 + 56) != 0;
  return v4;
}

_DWORD *_readAlterObjectSchemaStmt(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  v4 = v3;
  *v3 = 301;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 0x31)
    v7 = 0;
  v3[1] = v7;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    *((_QWORD *)v4 + 1) = _readRangeVar(v8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    *((_QWORD *)v4 + 2) = _readNode(v9);
  v10 = *(const char **)(a1 + 48);
  if (v10 && *v10)
    *((_QWORD *)v4 + 3) = pstrdup(v10);
  *((_BYTE *)v4 + 32) = *(_DWORD *)(a1 + 56) != 0;
  return v4;
}

_QWORD *_readAlterOwnerStmt(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _QWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  int v13;
  unsigned int v14;
  int v15;
  const char *v16;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  v4 = v3;
  *v3 = 302;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 0x31)
    v7 = 0;
  v3[1] = v7;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    v4[1] = _readRangeVar(v8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    v4[2] = _readNode(v9);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
  {
    v11 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    v12 = v11;
    *v11 = 390;
    v13 = *(_DWORD *)(v10 + 24);
    v14 = v13 - 2;
    v15 = v13 - 1;
    if (v14 >= 3)
      v15 = 0;
    v11[1] = v15;
    v16 = *(const char **)(v10 + 32);
    if (v16 && *v16)
      *((_QWORD *)v12 + 1) = pstrdup(v16);
    v12[4] = *(_DWORD *)(v10 + 40);
    v4[3] = v12;
  }
  return v4;
}

unint64_t _readAlterOperatorStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 303;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readObjectWithArgs(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readAlterTypeStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 304;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, v10);
    *(_QWORD *)(v3 + 16) = v11;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v3 + 16) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 40) > v14);
    }
  }
  return v3;
}

unint64_t _readDropOwnedStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 305;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40) == 2;
  return v3;
}

unint64_t _readReassignOwnedStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  int v13;
  unsigned int v14;
  int v15;
  const char *v16;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 306;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
  {
    v11 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    v12 = v11;
    *v11 = 390;
    v13 = *(_DWORD *)(v10 + 24);
    v14 = v13 - 2;
    v15 = v13 - 1;
    if (v14 >= 3)
      v15 = 0;
    v11[1] = v15;
    v16 = *(const char **)(v10 + 32);
    if (v16 && *v16)
      *((_QWORD *)v12 + 1) = pstrdup(v16);
    v12[4] = *(_DWORD *)(v10 + 40);
    *(_QWORD *)(v3 + 16) = v12;
  }
  return v3;
}

unint64_t _readCompositeTypeStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 307;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readRangeVar(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readCreateEnumStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 308;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, v10);
    *(_QWORD *)(v3 + 16) = v11;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v3 + 16) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 40) > v14);
    }
  }
  return v3;
}

unint64_t _readCreateRangeStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 309;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, v10);
    *(_QWORD *)(v3 + 16) = v11;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v3 + 16) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 40) > v14);
    }
  }
  return v3;
}

unint64_t _readAlterEnumStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  const char *v12;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)v3 = 310;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  v10 = *(const char **)(a1 + 40);
  if (v10 && *v10)
    *(_QWORD *)(v3 + 16) = pstrdup(v10);
  v11 = *(const char **)(a1 + 48);
  if (v11 && *v11)
    *(_QWORD *)(v3 + 24) = pstrdup(v11);
  v12 = *(const char **)(a1 + 56);
  if (v12 && *v12)
    *(_QWORD *)(v3 + 32) = pstrdup(v12);
  *(_BYTE *)(v3 + 40) = *(_DWORD *)(a1 + 64) != 0;
  *(_BYTE *)(v3 + 41) = *(_DWORD *)(a1 + 68) != 0;
  return v3;
}

unint64_t _readAlterTSDictionaryStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 311;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, v10);
    *(_QWORD *)(v3 + 16) = v11;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v3 + 16) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 40) > v14);
    }
  }
  return v3;
}

_DWORD *_readAlterTSConfigurationStmt(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  v4 = v3;
  *v3 = 312;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 4)
    v7 = 0;
  v3[1] = v7;
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *((_QWORD *)v4 + 1) = v9;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v10 = v9;
      v11 = 2;
      v12 = 1;
      do
      {
        v13 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v12));
        v10 = lappend(v10, v13);
        *((_QWORD *)v4 + 1) = v10;
        v12 = v11++;
      }
      while (*(_QWORD *)(a1 + 32) > v12);
    }
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v14 = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, v14);
    *((_QWORD *)v4 + 2) = v15;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v16 = v15;
      v17 = 2;
      v18 = 1;
      do
      {
        v19 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v18));
        v16 = lappend(v16, v19);
        *((_QWORD *)v4 + 2) = v16;
        v18 = v17++;
      }
      while (*(_QWORD *)(a1 + 48) > v18);
    }
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v20 = _readNode(**(_QWORD **)(a1 + 72));
    list_make1_impl(226, v20);
    *((_QWORD *)v4 + 3) = v21;
    if (*(_QWORD *)(a1 + 64) >= 2uLL)
    {
      v22 = v21;
      v23 = 2;
      v24 = 1;
      do
      {
        v25 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v24));
        v22 = lappend(v22, v25);
        *((_QWORD *)v4 + 3) = v22;
        v24 = v23++;
      }
      while (*(_QWORD *)(a1 + 64) > v24);
    }
  }
  *((_BYTE *)v4 + 32) = *(_DWORD *)(a1 + 80) != 0;
  *((_BYTE *)v4 + 33) = *(_DWORD *)(a1 + 84) != 0;
  *((_BYTE *)v4 + 34) = *(_DWORD *)(a1 + 88) != 0;
  return v4;
}

unint64_t _readCreateFdwStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 313;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v11 = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, v11);
    *(_QWORD *)(v3 + 24) = v12;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v13 = v12;
      v14 = 2;
      v15 = 1;
      do
      {
        v16 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15));
        v13 = lappend(v13, v16);
        *(_QWORD *)(v3 + 24) = v13;
        v15 = v14++;
      }
      while (*(_QWORD *)(a1 + 48) > v15);
    }
  }
  return v3;
}

unint64_t _readAlterFdwStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 314;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v11 = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, v11);
    *(_QWORD *)(v3 + 24) = v12;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v13 = v12;
      v14 = 2;
      v15 = 1;
      do
      {
        v16 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15));
        v13 = lappend(v13, v16);
        *(_QWORD *)(v3 + 24) = v13;
        v15 = v14++;
      }
      while (*(_QWORD *)(a1 + 48) > v15);
    }
  }
  return v3;
}

unint64_t _readCreateForeignServerStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)v3 = 315;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(const char **)(a1 + 32);
  if (v5 && *v5)
    *(_QWORD *)(v3 + 16) = pstrdup(v5);
  v6 = *(const char **)(a1 + 40);
  if (v6 && *v6)
    *(_QWORD *)(v3 + 24) = pstrdup(v6);
  v7 = *(const char **)(a1 + 48);
  if (v7 && *v7)
    *(_QWORD *)(v3 + 32) = pstrdup(v7);
  *(_BYTE *)(v3 + 40) = *(_DWORD *)(a1 + 56) != 0;
  if (*(_QWORD *)(a1 + 64))
  {
    Node = _readNode(**(_QWORD **)(a1 + 72));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 48) = v9;
    if (*(_QWORD *)(a1 + 64) >= 2uLL)
    {
      v10 = v9;
      v11 = 2;
      v12 = 1;
      do
      {
        v13 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v12));
        v10 = lappend(v10, v13);
        *(_QWORD *)(v3 + 48) = v10;
        v12 = v11++;
      }
      while (*(_QWORD *)(a1 + 64) > v12);
    }
  }
  return v3;
}

unint64_t _readAlterForeignServerStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  const char *v5;
  uint64_t Node;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 316;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(const char **)(a1 + 32);
  if (v5 && *v5)
    *(_QWORD *)(v3 + 16) = pstrdup(v5);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v7;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v8 = v7;
      v9 = 2;
      v10 = 1;
      do
      {
        v11 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10));
        v8 = lappend(v8, v11);
        *(_QWORD *)(v3 + 24) = v8;
        v10 = v9++;
      }
      while (*(_QWORD *)(a1 + 40) > v10);
    }
  }
  *(_BYTE *)(v3 + 32) = *(_DWORD *)(a1 + 56) != 0;
  return v3;
}

unint64_t _readCreateUserMappingStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  unsigned int v8;
  int v9;
  const char *v10;
  const char *v11;
  uint64_t Node;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 317;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    v6 = v5;
    *v5 = 390;
    v7 = *(_DWORD *)(v4 + 24);
    v8 = v7 - 2;
    v9 = v7 - 1;
    if (v8 >= 3)
      v9 = 0;
    v5[1] = v9;
    v10 = *(const char **)(v4 + 32);
    if (v10 && *v10)
      *((_QWORD *)v6 + 1) = pstrdup(v10);
    v6[4] = *(_DWORD *)(v4 + 40);
    *(_QWORD *)(v3 + 8) = v6;
  }
  v11 = *(const char **)(a1 + 32);
  if (v11 && *v11)
    *(_QWORD *)(v3 + 16) = pstrdup(v11);
  *(_BYTE *)(v3 + 24) = *(_DWORD *)(a1 + 40) != 0;
  if (*(_QWORD *)(a1 + 48))
  {
    Node = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 32) = v13;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v16));
        v14 = lappend(v14, v17);
        *(_QWORD *)(v3 + 32) = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 48) > v16);
    }
  }
  return v3;
}

unint64_t _readAlterUserMappingStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  unsigned int v8;
  int v9;
  const char *v10;
  const char *v11;
  uint64_t Node;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 318;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    v6 = v5;
    *v5 = 390;
    v7 = *(_DWORD *)(v4 + 24);
    v8 = v7 - 2;
    v9 = v7 - 1;
    if (v8 >= 3)
      v9 = 0;
    v5[1] = v9;
    v10 = *(const char **)(v4 + 32);
    if (v10 && *v10)
      *((_QWORD *)v6 + 1) = pstrdup(v10);
    v6[4] = *(_DWORD *)(v4 + 40);
    *(_QWORD *)(v3 + 8) = v6;
  }
  v11 = *(const char **)(a1 + 32);
  if (v11 && *v11)
    *(_QWORD *)(v3 + 16) = pstrdup(v11);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v13;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v16));
        v14 = lappend(v14, v17);
        *(_QWORD *)(v3 + 24) = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 40) > v16);
    }
  }
  return v3;
}

unint64_t _readDropUserMappingStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  unsigned int v8;
  int v9;
  const char *v10;
  const char *v11;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 319;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    v6 = v5;
    *v5 = 390;
    v7 = *(_DWORD *)(v4 + 24);
    v8 = v7 - 2;
    v9 = v7 - 1;
    if (v8 >= 3)
      v9 = 0;
    v5[1] = v9;
    v10 = *(const char **)(v4 + 32);
    if (v10 && *v10)
      *((_QWORD *)v6 + 1) = pstrdup(v10);
    v6[4] = *(_DWORD *)(v4 + 40);
    *(_QWORD *)(v3 + 8) = v6;
  }
  v11 = *(const char **)(a1 + 32);
  if (v11 && *v11)
    *(_QWORD *)(v3 + 16) = pstrdup(v11);
  *(_BYTE *)(v3 + 24) = *(_DWORD *)(a1 + 40) != 0;
  return v3;
}

unint64_t _readAlterTableSpaceOptionsStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 320;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  *(_BYTE *)(v3 + 24) = *(_DWORD *)(a1 + 48) != 0;
  return v3;
}

unint64_t _readAlterTableMoveAllStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)v3 = 321;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(_DWORD *)(a1 + 32);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 0x31)
    v7 = 0;
  *(_DWORD *)(v3 + 16) = v7;
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v9;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v10 = v9;
      v11 = 2;
      v12 = 1;
      do
      {
        v13 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v12));
        v10 = lappend(v10, v13);
        *(_QWORD *)(v3 + 24) = v10;
        v12 = v11++;
      }
      while (*(_QWORD *)(a1 + 40) > v12);
    }
  }
  v14 = *(const char **)(a1 + 56);
  if (v14 && *v14)
    *(_QWORD *)(v3 + 32) = pstrdup(v14);
  *(_BYTE *)(v3 + 40) = *(_DWORD *)(a1 + 64) != 0;
  return v3;
}

_QWORD *_readSecLabelStmt(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _QWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  const char *v9;
  const char *v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  v4 = v3;
  *v3 = 322;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 0x31)
    v7 = 0;
  v3[1] = v7;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    v4[1] = _readNode(v8);
  v9 = *(const char **)(a1 + 40);
  if (v9 && *v9)
    v4[2] = pstrdup(v9);
  v10 = *(const char **)(a1 + 48);
  if (v10 && *v10)
    v4[3] = pstrdup(v10);
  return v4;
}

unint64_t _readCreateForeignTableStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t Stmt;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  const char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x78uLL);
  *(_DWORD *)v3 = 323;
  Stmt = _readCreateStmt(*(_QWORD *)(a1 + 24));
  v5 = *(_OWORD *)Stmt;
  v6 = *(_OWORD *)(Stmt + 32);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(Stmt + 16);
  *(_OWORD *)(v3 + 32) = v6;
  *(_OWORD *)v3 = v5;
  v7 = *(_OWORD *)(Stmt + 48);
  v8 = *(_OWORD *)(Stmt + 64);
  v9 = *(_OWORD *)(Stmt + 80);
  *(_QWORD *)(v3 + 96) = *(_QWORD *)(Stmt + 96);
  *(_OWORD *)(v3 + 64) = v8;
  *(_OWORD *)(v3 + 80) = v9;
  *(_OWORD *)(v3 + 48) = v7;
  v10 = *(const char **)(a1 + 32);
  if (v10 && *v10)
    *(_QWORD *)(v3 + 104) = pstrdup(v10);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 112) = v12;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v13 = v12;
      v14 = 2;
      v15 = 1;
      do
      {
        v16 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v15));
        v13 = lappend(v13, v16);
        *(_QWORD *)(v3 + 112) = v13;
        v15 = v14++;
      }
      while (*(_QWORD *)(a1 + 40) > v15);
    }
  }
  *(_DWORD *)v3 = 323;
  return v3;
}

unint64_t _readImportForeignSchemaStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  const char *v5;
  const char *v6;
  int v7;
  int v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)v3 = 324;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(const char **)(a1 + 32);
  if (v5 && *v5)
    *(_QWORD *)(v3 + 16) = pstrdup(v5);
  v6 = *(const char **)(a1 + 40);
  if (v6 && *v6)
    *(_QWORD *)(v3 + 24) = pstrdup(v6);
  v7 = *(_DWORD *)(a1 + 48);
  if (v7 == 3)
    v8 = 2;
  else
    v8 = v7 == 2;
  *(_DWORD *)(v3 + 32) = v8;
  if (*(_QWORD *)(a1 + 56))
  {
    Node = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 40) = v10;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v11 = v10;
      v12 = 2;
      v13 = 1;
      do
      {
        v14 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13));
        v11 = lappend(v11, v14);
        *(_QWORD *)(v3 + 40) = v11;
        v13 = v12++;
      }
      while (*(_QWORD *)(a1 + 56) > v13);
    }
  }
  if (*(_QWORD *)(a1 + 72))
  {
    v15 = _readNode(**(_QWORD **)(a1 + 80));
    list_make1_impl(226, v15);
    *(_QWORD *)(v3 + 48) = v16;
    if (*(_QWORD *)(a1 + 72) >= 2uLL)
    {
      v17 = v16;
      v18 = 2;
      v19 = 1;
      do
      {
        v20 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19));
        v17 = lappend(v17, v20);
        *(_QWORD *)(v3 + 48) = v17;
        v19 = v18++;
      }
      while (*(_QWORD *)(a1 + 72) > v19);
    }
  }
  return v3;
}

unint64_t _readCreateExtensionStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 325;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  *(_BYTE *)(v3 + 16) = *(_DWORD *)(a1 + 32) != 0;
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v6;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 24) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 40) > v9);
    }
  }
  return v3;
}

unint64_t _readAlterExtensionStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 326;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readAlterExtensionContentsStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 327;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 36);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 0x31)
    v7 = 0;
  *(_DWORD *)(v3 + 20) = v7;
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    *(_QWORD *)(v3 + 24) = _readNode(v8);
  return v3;
}

unint64_t _readCreateEventTrigStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  const char *v5;
  uint64_t Node;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 328;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(const char **)(a1 + 32);
  if (v5 && *v5)
    *(_QWORD *)(v3 + 16) = pstrdup(v5);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v7;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v8 = v7;
      v9 = 2;
      v10 = 1;
      do
      {
        v11 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10));
        v8 = lappend(v8, v11);
        *(_QWORD *)(v3 + 24) = v8;
        v10 = v9++;
      }
      while (*(_QWORD *)(a1 + 40) > v10);
    }
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v12 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v12);
    *(_QWORD *)(v3 + 32) = v13;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v16));
        v14 = lappend(v14, v17);
        *(_QWORD *)(v3 + 32) = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 56) > v16);
    }
  }
  return v3;
}

unint64_t _readAlterEventTrigStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  unsigned __int8 *v5;
  int v6;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 329;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(unsigned __int8 **)(a1 + 32);
  if (v5)
  {
    v6 = *v5;
    if (v6)
      *(_BYTE *)(v3 + 16) = v6;
  }
  return v3;
}

unint64_t _readRefreshMatViewStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)v3 = 330;
  *(_BYTE *)(v3 + 4) = *(_DWORD *)(a1 + 24) != 0;
  *(_BYTE *)(v3 + 5) = *(_DWORD *)(a1 + 28) != 0;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readRangeVar(v4);
  return v3;
}

unint64_t _readReplicaIdentityStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  const char *v7;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  v4 = v3;
  *(_DWORD *)v3 = 331;
  v5 = *(unsigned __int8 **)(a1 + 24);
  if (v5)
  {
    v6 = *v5;
    if (v6)
      *(_BYTE *)(v3 + 4) = v6;
  }
  v7 = *(const char **)(a1 + 32);
  if (v7 && *v7)
    *(_QWORD *)(v4 + 8) = pstrdup(v7);
  return v4;
}

unint64_t _readAlterSystemStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)v3 = 332;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readVariableSetStmt(v4);
  return v3;
}

unint64_t _readCreatePolicyStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t Node;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x40uLL);
  *(_DWORD *)v3 = 333;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readRangeVar(v5);
  v6 = *(const char **)(a1 + 40);
  if (v6 && *v6)
    *(_QWORD *)(v3 + 24) = pstrdup(v6);
  *(_BYTE *)(v3 + 32) = *(_DWORD *)(a1 + 48) != 0;
  if (*(_QWORD *)(a1 + 56))
  {
    Node = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 40) = v8;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v9 = v8;
      v10 = 2;
      v11 = 1;
      do
      {
        v12 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v11));
        v9 = lappend(v9, v12);
        *(_QWORD *)(v3 + 40) = v9;
        v11 = v10++;
      }
      while (*(_QWORD *)(a1 + 56) > v11);
    }
  }
  v13 = *(_QWORD *)(a1 + 72);
  if (v13)
    *(_QWORD *)(v3 + 48) = _readNode(v13);
  v14 = *(_QWORD *)(a1 + 80);
  if (v14)
    *(_QWORD *)(v3 + 56) = _readNode(v14);
  return v3;
}

unint64_t _readAlterPolicyStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t Node;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)v3 = 334;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readRangeVar(v5);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v7;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v8 = v7;
      v9 = 2;
      v10 = 1;
      do
      {
        v11 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10));
        v8 = lappend(v8, v11);
        *(_QWORD *)(v3 + 24) = v8;
        v10 = v9++;
      }
      while (*(_QWORD *)(a1 + 40) > v10);
    }
  }
  v12 = *(_QWORD *)(a1 + 56);
  if (v12)
    *(_QWORD *)(v3 + 32) = _readNode(v12);
  v13 = *(_QWORD *)(a1 + 64);
  if (v13)
    *(_QWORD *)(v3 + 40) = _readNode(v13);
  return v3;
}

unint64_t _readCreateTransformStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 335;
  *(_BYTE *)(v3 + 4) = *(_DWORD *)(a1 + 24) != 0;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readTypeName(v4);
  v5 = *(const char **)(a1 + 40);
  if (v5 && *v5)
    *(_QWORD *)(v3 + 16) = pstrdup(v5);
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    *(_QWORD *)(v3 + 24) = _readObjectWithArgs(v6);
  v7 = *(_QWORD *)(a1 + 56);
  if (v7)
    *(_QWORD *)(v3 + 32) = _readObjectWithArgs(v7);
  return v3;
}

unint64_t _readCreateAmStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 336;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  v11 = *(unsigned __int8 **)(a1 + 48);
  if (v11)
  {
    v12 = *v11;
    if (v12)
      *(_BYTE *)(v3 + 24) = v12;
  }
  return v3;
}

unint64_t _readCreatePublicationStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 337;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v11 = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, v11);
    *(_QWORD *)(v3 + 24) = v12;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v13 = v12;
      v14 = 2;
      v15 = 1;
      do
      {
        v16 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15));
        v13 = lappend(v13, v16);
        *(_QWORD *)(v3 + 24) = v13;
        v15 = v14++;
      }
      while (*(_QWORD *)(a1 + 48) > v15);
    }
  }
  *(_BYTE *)(v3 + 32) = *(_DWORD *)(a1 + 64) != 0;
  return v3;
}

unint64_t _readAlterPublicationStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 338;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v11 = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, v11);
    *(_QWORD *)(v3 + 24) = v12;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v13 = v12;
      v14 = 2;
      v15 = 1;
      do
      {
        v16 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15));
        v13 = lappend(v13, v16);
        *(_QWORD *)(v3 + 24) = v13;
        v15 = v14++;
      }
      while (*(_QWORD *)(a1 + 48) > v15);
    }
  }
  *(_BYTE *)(v3 + 32) = *(_DWORD *)(a1 + 64) != 0;
  v17 = *(_DWORD *)(a1 + 68);
  v18 = v17 - 2;
  v19 = v17 - 1;
  if (v18 >= 3)
    v19 = 0;
  *(_DWORD *)(v3 + 36) = v19;
  return v3;
}

unint64_t _readCreateSubscriptionStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  const char *v5;
  uint64_t Node;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 339;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(const char **)(a1 + 32);
  if (v5 && *v5)
    *(_QWORD *)(v3 + 16) = pstrdup(v5);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v7;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v8 = v7;
      v9 = 2;
      v10 = 1;
      do
      {
        v11 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10));
        v8 = lappend(v8, v11);
        *(_QWORD *)(v3 + 24) = v8;
        v10 = v9++;
      }
      while (*(_QWORD *)(a1 + 40) > v10);
    }
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v12 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v12);
    *(_QWORD *)(v3 + 32) = v13;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v16));
        v14 = lappend(v14, v17);
        *(_QWORD *)(v3 + 32) = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 56) > v16);
    }
  }
  return v3;
}

_QWORD *_readAlterSubscriptionStmt(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _QWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  const char *v8;
  const char *v9;
  uint64_t Node;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  v4 = v3;
  *v3 = 340;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 4)
    v7 = 0;
  v3[1] = v7;
  v8 = *(const char **)(a1 + 32);
  if (v8 && *v8)
    v4[1] = pstrdup(v8);
  v9 = *(const char **)(a1 + 40);
  if (v9 && *v9)
    v4[2] = pstrdup(v9);
  if (*(_QWORD *)(a1 + 48))
  {
    Node = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, Node);
    v4[3] = v11;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v14));
        v12 = lappend(v12, v15);
        v4[3] = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 48) > v14);
    }
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v16 = _readNode(**(_QWORD **)(a1 + 72));
    list_make1_impl(226, v16);
    v4[4] = v17;
    if (*(_QWORD *)(a1 + 64) >= 2uLL)
    {
      v18 = v17;
      v19 = 2;
      v20 = 1;
      do
      {
        v21 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v20));
        v18 = lappend(v18, v21);
        v4[4] = v18;
        v20 = v19++;
      }
      while (*(_QWORD *)(a1 + 64) > v20);
    }
  }
  return v4;
}

unint64_t _readDropSubscriptionStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 341;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  *(_BYTE *)(v3 + 16) = *(_DWORD *)(a1 + 32) != 0;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 36) == 2;
  return v3;
}

unint64_t _readCreateStatsStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  const char *v28;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)v3 = 342;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, v10);
    *(_QWORD *)(v3 + 16) = v11;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v3 + 16) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 40) > v14);
    }
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v16 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v16);
    *(_QWORD *)(v3 + 24) = v17;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v18 = v17;
      v19 = 2;
      v20 = 1;
      do
      {
        v21 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v20));
        v18 = lappend(v18, v21);
        *(_QWORD *)(v3 + 24) = v18;
        v20 = v19++;
      }
      while (*(_QWORD *)(a1 + 56) > v20);
    }
  }
  if (*(_QWORD *)(a1 + 72))
  {
    v22 = _readNode(**(_QWORD **)(a1 + 80));
    list_make1_impl(226, v22);
    *(_QWORD *)(v3 + 32) = v23;
    if (*(_QWORD *)(a1 + 72) >= 2uLL)
    {
      v24 = v23;
      v25 = 2;
      v26 = 1;
      do
      {
        v27 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v26));
        v24 = lappend(v24, v27);
        *(_QWORD *)(v3 + 32) = v24;
        v26 = v25++;
      }
      while (*(_QWORD *)(a1 + 72) > v26);
    }
  }
  v28 = *(const char **)(a1 + 88);
  if (v28 && *v28)
    *(_QWORD *)(v3 + 40) = pstrdup(v28);
  *(_BYTE *)(v3 + 48) = *(_DWORD *)(a1 + 96) != 0;
  return v3;
}

unint64_t _readAlterCollationStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)v3 = 343;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  return v3;
}

unint64_t _readCallStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 344;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readFuncCall(v4);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readFuncExpr(v5);
  return v3;
}

unint64_t _readAlterStatsStmt(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 345;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(v3 + 20) = *(_DWORD *)(a1 + 44) != 0;
  return v3;
}

_DWORD *_readAExpr(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  v4 = v3;
  *v3 = 346;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 0xF)
    v7 = 0;
  v3[1] = v7;
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *((_QWORD *)v4 + 1) = v9;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v10 = v9;
      v11 = 2;
      v12 = 1;
      do
      {
        v13 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v12));
        v10 = lappend(v10, v13);
        *((_QWORD *)v4 + 1) = v10;
        v12 = v11++;
      }
      while (*(_QWORD *)(a1 + 32) > v12);
    }
  }
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
    *((_QWORD *)v4 + 2) = _readNode(v14);
  v15 = *(_QWORD *)(a1 + 56);
  if (v15)
    *((_QWORD *)v4 + 3) = _readNode(v15);
  v4[8] = *(_DWORD *)(a1 + 64);
  return v4;
}

unint64_t _readColumnRef(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 347;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  return v3;
}

unint64_t _readAConst(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 349;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_OWORD *)(v3 + 8) = *(_OWORD *)_readNode(v4);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 32);
  return v3;
}

unint64_t _readFuncCall(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x40uLL);
  *(_DWORD *)v3 = 350;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, v10);
    *(_QWORD *)(v3 + 16) = v11;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v3 + 16) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 40) > v14);
    }
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v16 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v16);
    *(_QWORD *)(v3 + 24) = v17;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v18 = v17;
      v19 = 2;
      v20 = 1;
      do
      {
        v21 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v20));
        v18 = lappend(v18, v21);
        *(_QWORD *)(v3 + 24) = v18;
        v20 = v19++;
      }
      while (*(_QWORD *)(a1 + 56) > v20);
    }
  }
  v22 = *(_QWORD *)(a1 + 72);
  if (v22)
    *(_QWORD *)(v3 + 32) = _readNode(v22);
  *(_BYTE *)(v3 + 40) = *(_DWORD *)(a1 + 80) != 0;
  *(_BYTE *)(v3 + 41) = *(_DWORD *)(a1 + 84) != 0;
  *(_BYTE *)(v3 + 42) = *(_DWORD *)(a1 + 88) != 0;
  *(_BYTE *)(v3 + 43) = *(_DWORD *)(a1 + 92) != 0;
  v23 = *(_QWORD *)(a1 + 96);
  if (v23)
    *(_QWORD *)(v3 + 48) = _readWindowDef(v23);
  *(_DWORD *)(v3 + 56) = *(_DWORD *)(a1 + 104);
  return v3;
}

unint64_t _readAIndices(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 352;
  *(_BYTE *)(v3 + 4) = *(_DWORD *)(a1 + 24) != 0;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readNode(v5);
  return v3;
}

unint64_t _readAIndirection(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 353;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readAArrayExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 354;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  return v3;
}

unint64_t _readResTarget(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 355;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
    *(_QWORD *)(v3 + 24) = _readNode(v11);
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 56);
  return v3;
}

unint64_t _readMultiAssignRef(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 356;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 36);
  return v3;
}

unint64_t _readTypeCast(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 357;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readTypeName(v5);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 40);
  return v3;
}

unint64_t _readCollateClause(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 358;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  return v3;
}

unint64_t _readSortBy(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  uint64_t Node;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 359;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  v5 = *(_DWORD *)(a1 + 32);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 3)
    v7 = 0;
  *(_DWORD *)(v3 + 16) = v7;
  v8 = *(_DWORD *)(a1 + 36);
  if (v8 == 3)
    v9 = 2;
  else
    v9 = v8 == 2;
  *(_DWORD *)(v3 + 20) = v9;
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v11;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v3 + 24) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 40) > v14);
    }
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 56);
  return v3;
}

unint64_t _readWindowDef(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  const char *v5;
  uint64_t Node;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x48uLL);
  *(_DWORD *)v3 = 360;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(const char **)(a1 + 32);
  if (v5 && *v5)
    *(_QWORD *)(v3 + 16) = pstrdup(v5);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v7;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v8 = v7;
      v9 = 2;
      v10 = 1;
      do
      {
        v11 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10));
        v8 = lappend(v8, v11);
        *(_QWORD *)(v3 + 24) = v8;
        v10 = v9++;
      }
      while (*(_QWORD *)(a1 + 40) > v10);
    }
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v12 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v12);
    *(_QWORD *)(v3 + 32) = v13;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v16));
        v14 = lappend(v14, v17);
        *(_QWORD *)(v3 + 32) = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 56) > v16);
    }
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72);
  v18 = *(_QWORD *)(a1 + 80);
  if (v18)
    *(_QWORD *)(v3 + 48) = _readNode(v18);
  v19 = *(_QWORD *)(a1 + 88);
  if (v19)
    *(_QWORD *)(v3 + 56) = _readNode(v19);
  *(_DWORD *)(v3 + 64) = *(_DWORD *)(a1 + 96);
  return v3;
}

unint64_t _readRangeSubselect(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 361;
  *(_BYTE *)(v3 + 4) = *(_DWORD *)(a1 + 24) != 0;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readAlias(v5);
  return v3;
}

unint64_t _readRangeFunction(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 362;
  *(_BYTE *)(v3 + 4) = *(_DWORD *)(a1 + 24) != 0;
  *(_BYTE *)(v3 + 5) = *(_DWORD *)(a1 + 28) != 0;
  *(_BYTE *)(v3 + 6) = *(_DWORD *)(a1 + 32) != 0;
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 40) > v8);
    }
  }
  v10 = *(_QWORD *)(a1 + 56);
  if (v10)
    *(_QWORD *)(v3 + 16) = _readAlias(v10);
  if (*(_QWORD *)(a1 + 64))
  {
    v11 = _readNode(**(_QWORD **)(a1 + 72));
    list_make1_impl(226, v11);
    *(_QWORD *)(v3 + 24) = v12;
    if (*(_QWORD *)(a1 + 64) >= 2uLL)
    {
      v13 = v12;
      v14 = 2;
      v15 = 1;
      do
      {
        v16 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v15));
        v13 = lappend(v13, v16);
        *(_QWORD *)(v3 + 24) = v13;
        v15 = v14++;
      }
      while (*(_QWORD *)(a1 + 64) > v15);
    }
  }
  return v3;
}

unint64_t _readRangeTableSample(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)v3 = 363;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v11 = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, v11);
    *(_QWORD *)(v3 + 24) = v12;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v13 = v12;
      v14 = 2;
      v15 = 1;
      do
      {
        v16 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15));
        v13 = lappend(v13, v16);
        *(_QWORD *)(v3 + 24) = v13;
        v15 = v14++;
      }
      while (*(_QWORD *)(a1 + 48) > v15);
    }
  }
  v17 = *(_QWORD *)(a1 + 64);
  if (v17)
    *(_QWORD *)(v3 + 32) = _readNode(v17);
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72);
  return v3;
}

unint64_t _readRangeTableFunc(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Node;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)v3 = 364;
  *(_BYTE *)(v3 + 4) = *(_DWORD *)(a1 + 24) != 0;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readNode(v5);
  if (*(_QWORD *)(a1 + 48))
  {
    Node = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v7;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v8 = v7;
      v9 = 2;
      v10 = 1;
      do
      {
        v11 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10));
        v8 = lappend(v8, v11);
        *(_QWORD *)(v3 + 24) = v8;
        v10 = v9++;
      }
      while (*(_QWORD *)(a1 + 48) > v10);
    }
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v12 = _readNode(**(_QWORD **)(a1 + 72));
    list_make1_impl(226, v12);
    *(_QWORD *)(v3 + 32) = v13;
    if (*(_QWORD *)(a1 + 64) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v16));
        v14 = lappend(v14, v17);
        *(_QWORD *)(v3 + 32) = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 64) > v16);
    }
  }
  v18 = *(_QWORD *)(a1 + 80);
  if (v18)
    *(_QWORD *)(v3 + 40) = _readAlias(v18);
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a1 + 88);
  return v3;
}

unint64_t _readRangeTableFuncCol(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)v3 = 365;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readTypeName(v5);
  *(_BYTE *)(v3 + 24) = *(_DWORD *)(a1 + 40) != 0;
  *(_BYTE *)(v3 + 25) = *(_DWORD *)(a1 + 44) != 0;
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    *(_QWORD *)(v3 + 32) = _readNode(v6);
  v7 = *(_QWORD *)(a1 + 56);
  if (v7)
    *(_QWORD *)(v3 + 40) = _readNode(v7);
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a1 + 64);
  return v3;
}

unint64_t _readTypeName(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)v3 = 366;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(v3 + 20) = *(_DWORD *)(a1 + 44) != 0;
  *(_BYTE *)(v3 + 21) = *(_DWORD *)(a1 + 48) != 0;
  if (*(_QWORD *)(a1 + 56))
  {
    v10 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v10);
    *(_QWORD *)(v3 + 24) = v11;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v3 + 24) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 56) > v14);
    }
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 80))
  {
    v16 = _readNode(**(_QWORD **)(a1 + 88));
    list_make1_impl(226, v16);
    *(_QWORD *)(v3 + 40) = v17;
    if (*(_QWORD *)(a1 + 80) >= 2uLL)
    {
      v18 = v17;
      v19 = 2;
      v20 = 1;
      do
      {
        v21 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v20));
        v18 = lappend(v18, v21);
        *(_QWORD *)(v3 + 40) = v18;
        v20 = v19++;
      }
      while (*(_QWORD *)(a1 + 80) > v20);
    }
  }
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a1 + 96);
  return v3;
}

unint64_t _readColumnDef(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t Node;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x70uLL);
  *(_DWORD *)v3 = 367;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readTypeName(v5);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(v3 + 28) = *(_DWORD *)(a1 + 44) != 0;
  *(_BYTE *)(v3 + 29) = *(_DWORD *)(a1 + 48) != 0;
  *(_BYTE *)(v3 + 30) = *(_DWORD *)(a1 + 52) != 0;
  v6 = *(unsigned __int8 **)(a1 + 56);
  if (v6)
  {
    v7 = *v6;
    if (v7)
      *(_BYTE *)(v3 + 31) = v7;
  }
  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
    *(_QWORD *)(v3 + 32) = _readNode(v8);
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
    *(_QWORD *)(v3 + 40) = _readNode(v9);
  v10 = *(unsigned __int8 **)(a1 + 80);
  if (v10)
  {
    v11 = *v10;
    if (v11)
      *(_BYTE *)(v3 + 48) = v11;
  }
  v12 = *(_QWORD *)(a1 + 88);
  if (v12)
    *(_QWORD *)(v3 + 56) = _readRangeVar(v12);
  v13 = *(unsigned __int8 **)(a1 + 96);
  if (v13)
  {
    v14 = *v13;
    if (v14)
      *(_BYTE *)(v3 + 64) = v14;
  }
  v15 = *(_QWORD *)(a1 + 104);
  if (v15)
    *(_QWORD *)(v3 + 72) = _readCollateClause(v15);
  *(_DWORD *)(v3 + 80) = *(_DWORD *)(a1 + 112);
  if (*(_QWORD *)(a1 + 120))
  {
    Node = _readNode(**(_QWORD **)(a1 + 128));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 88) = v17;
    if (*(_QWORD *)(a1 + 120) >= 2uLL)
    {
      v18 = v17;
      v19 = 2;
      v20 = 1;
      do
      {
        v21 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v20));
        v18 = lappend(v18, v21);
        *(_QWORD *)(v3 + 88) = v18;
        v20 = v19++;
      }
      while (*(_QWORD *)(a1 + 120) > v20);
    }
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v22 = _readNode(**(_QWORD **)(a1 + 144));
    list_make1_impl(226, v22);
    *(_QWORD *)(v3 + 96) = v23;
    if (*(_QWORD *)(a1 + 136) >= 2uLL)
    {
      v24 = v23;
      v25 = 2;
      v26 = 1;
      do
      {
        v27 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v26));
        v24 = lappend(v24, v27);
        *(_QWORD *)(v3 + 96) = v24;
        v26 = v25++;
      }
      while (*(_QWORD *)(a1 + 136) > v26);
    }
  }
  *(_DWORD *)(v3 + 104) = *(_DWORD *)(a1 + 152);
  return v3;
}

unint64_t _readIndexElem(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t Node;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x40uLL);
  *(_DWORD *)v3 = 368;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readNode(v5);
  v6 = *(const char **)(a1 + 40);
  if (v6 && *v6)
    *(_QWORD *)(v3 + 24) = pstrdup(v6);
  if (*(_QWORD *)(a1 + 48))
  {
    Node = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 32) = v8;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v9 = v8;
      v10 = 2;
      v11 = 1;
      do
      {
        v12 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11));
        v9 = lappend(v9, v12);
        *(_QWORD *)(v3 + 32) = v9;
        v11 = v10++;
      }
      while (*(_QWORD *)(a1 + 48) > v11);
    }
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v13 = _readNode(**(_QWORD **)(a1 + 72));
    list_make1_impl(226, v13);
    *(_QWORD *)(v3 + 40) = v14;
    if (*(_QWORD *)(a1 + 64) >= 2uLL)
    {
      v15 = v14;
      v16 = 2;
      v17 = 1;
      do
      {
        v18 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v17));
        v15 = lappend(v15, v18);
        *(_QWORD *)(v3 + 40) = v15;
        v17 = v16++;
      }
      while (*(_QWORD *)(a1 + 64) > v17);
    }
  }
  if (*(_QWORD *)(a1 + 80))
  {
    v19 = _readNode(**(_QWORD **)(a1 + 88));
    list_make1_impl(226, v19);
    *(_QWORD *)(v3 + 48) = v20;
    if (*(_QWORD *)(a1 + 80) >= 2uLL)
    {
      v21 = v20;
      v22 = 2;
      v23 = 1;
      do
      {
        v24 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v23));
        v21 = lappend(v21, v24);
        *(_QWORD *)(v3 + 48) = v21;
        v23 = v22++;
      }
      while (*(_QWORD *)(a1 + 80) > v23);
    }
  }
  v25 = *(_DWORD *)(a1 + 96);
  v26 = v25 - 2;
  v27 = v25 - 1;
  if (v26 >= 3)
    v27 = 0;
  *(_DWORD *)(v3 + 56) = v27;
  v28 = *(_DWORD *)(a1 + 100);
  if (v28 == 3)
    v29 = 2;
  else
    v29 = v28 == 2;
  *(_DWORD *)(v3 + 60) = v29;
  return v3;
}

_DWORD *_readConstraint(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t Node;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int v55;
  unsigned __int8 *v56;
  int v57;
  unsigned __int8 *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0xB0uLL);
  v4 = v3;
  *v3 = 369;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 0xD)
    v7 = 0;
  v3[1] = v7;
  v8 = *(const char **)(a1 + 32);
  if (v8 && *v8)
    *((_QWORD *)v4 + 1) = pstrdup(v8);
  *((_BYTE *)v4 + 16) = *(_DWORD *)(a1 + 40) != 0;
  *((_BYTE *)v4 + 17) = *(_DWORD *)(a1 + 44) != 0;
  v4[5] = *(_DWORD *)(a1 + 48);
  *((_BYTE *)v4 + 24) = *(_DWORD *)(a1 + 52) != 0;
  v9 = *(_QWORD *)(a1 + 56);
  if (v9)
    *((_QWORD *)v4 + 4) = _readNode(v9);
  v10 = *(const char **)(a1 + 64);
  if (v10 && *v10)
    *((_QWORD *)v4 + 5) = pstrdup(v10);
  v11 = *(unsigned __int8 **)(a1 + 72);
  if (v11)
  {
    v12 = *v11;
    if (v12)
      *((_BYTE *)v4 + 48) = v12;
  }
  if (*(_QWORD *)(a1 + 80))
  {
    Node = _readNode(**(_QWORD **)(a1 + 88));
    list_make1_impl(226, Node);
    *((_QWORD *)v4 + 7) = v14;
    if (*(_QWORD *)(a1 + 80) >= 2uLL)
    {
      v15 = v14;
      v16 = 2;
      v17 = 1;
      do
      {
        v18 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v17));
        v15 = lappend(v15, v18);
        *((_QWORD *)v4 + 7) = v15;
        v17 = v16++;
      }
      while (*(_QWORD *)(a1 + 80) > v17);
    }
  }
  if (*(_QWORD *)(a1 + 96))
  {
    v19 = _readNode(**(_QWORD **)(a1 + 104));
    list_make1_impl(226, v19);
    *((_QWORD *)v4 + 8) = v20;
    if (*(_QWORD *)(a1 + 96) >= 2uLL)
    {
      v21 = v20;
      v22 = 2;
      v23 = 1;
      do
      {
        v24 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v23));
        v21 = lappend(v21, v24);
        *((_QWORD *)v4 + 8) = v21;
        v23 = v22++;
      }
      while (*(_QWORD *)(a1 + 96) > v23);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v25 = _readNode(**(_QWORD **)(a1 + 120));
    list_make1_impl(226, v25);
    *((_QWORD *)v4 + 9) = v26;
    if (*(_QWORD *)(a1 + 112) >= 2uLL)
    {
      v27 = v26;
      v28 = 2;
      v29 = 1;
      do
      {
        v30 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v29));
        v27 = lappend(v27, v30);
        *((_QWORD *)v4 + 9) = v27;
        v29 = v28++;
      }
      while (*(_QWORD *)(a1 + 112) > v29);
    }
  }
  if (*(_QWORD *)(a1 + 128))
  {
    v31 = _readNode(**(_QWORD **)(a1 + 136));
    list_make1_impl(226, v31);
    *((_QWORD *)v4 + 10) = v32;
    if (*(_QWORD *)(a1 + 128) >= 2uLL)
    {
      v33 = v32;
      v34 = 2;
      v35 = 1;
      do
      {
        v36 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v35));
        v33 = lappend(v33, v36);
        *((_QWORD *)v4 + 10) = v33;
        v35 = v34++;
      }
      while (*(_QWORD *)(a1 + 128) > v35);
    }
  }
  v37 = *(const char **)(a1 + 144);
  if (v37 && *v37)
    *((_QWORD *)v4 + 11) = pstrdup(v37);
  v38 = *(const char **)(a1 + 152);
  if (v38 && *v38)
    *((_QWORD *)v4 + 12) = pstrdup(v38);
  *((_BYTE *)v4 + 104) = *(_DWORD *)(a1 + 160) != 0;
  v39 = *(const char **)(a1 + 168);
  if (v39 && *v39)
    *((_QWORD *)v4 + 14) = pstrdup(v39);
  v40 = *(_QWORD *)(a1 + 176);
  if (v40)
    *((_QWORD *)v4 + 15) = _readNode(v40);
  v41 = *(_QWORD *)(a1 + 184);
  if (v41)
    *((_QWORD *)v4 + 16) = _readRangeVar(v41);
  if (*(_QWORD *)(a1 + 192))
  {
    v42 = _readNode(**(_QWORD **)(a1 + 200));
    list_make1_impl(226, v42);
    *((_QWORD *)v4 + 17) = v43;
    if (*(_QWORD *)(a1 + 192) >= 2uLL)
    {
      v44 = v43;
      v45 = 2;
      v46 = 1;
      do
      {
        v47 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v46));
        v44 = lappend(v44, v47);
        *((_QWORD *)v4 + 17) = v44;
        v46 = v45++;
      }
      while (*(_QWORD *)(a1 + 192) > v46);
    }
  }
  if (*(_QWORD *)(a1 + 208))
  {
    v48 = _readNode(**(_QWORD **)(a1 + 216));
    list_make1_impl(226, v48);
    *((_QWORD *)v4 + 18) = v49;
    if (*(_QWORD *)(a1 + 208) >= 2uLL)
    {
      v50 = v49;
      v51 = 2;
      v52 = 1;
      do
      {
        v53 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * v52));
        v50 = lappend(v50, v53);
        *((_QWORD *)v4 + 18) = v50;
        v52 = v51++;
      }
      while (*(_QWORD *)(a1 + 208) > v52);
    }
  }
  v54 = *(unsigned __int8 **)(a1 + 224);
  if (v54)
  {
    v55 = *v54;
    if (v55)
      *((_BYTE *)v4 + 152) = v55;
  }
  v56 = *(unsigned __int8 **)(a1 + 232);
  if (v56)
  {
    v57 = *v56;
    if (v57)
      *((_BYTE *)v4 + 153) = v57;
  }
  v58 = *(unsigned __int8 **)(a1 + 240);
  if (v58)
  {
    v59 = *v58;
    if (v59)
      *((_BYTE *)v4 + 154) = v59;
  }
  if (*(_QWORD *)(a1 + 248))
  {
    v60 = _readNode(**(_QWORD **)(a1 + 256));
    list_make1_impl(226, v60);
    *((_QWORD *)v4 + 20) = v61;
    if (*(_QWORD *)(a1 + 248) >= 2uLL)
    {
      v62 = v61;
      v63 = 2;
      v64 = 1;
      do
      {
        v65 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * v64));
        v62 = lappend(v62, v65);
        *((_QWORD *)v4 + 20) = v62;
        v64 = v63++;
      }
      while (*(_QWORD *)(a1 + 248) > v64);
    }
  }
  v4[42] = *(_DWORD *)(a1 + 264);
  *((_BYTE *)v4 + 172) = *(_DWORD *)(a1 + 268) != 0;
  *((_BYTE *)v4 + 173) = *(_DWORD *)(a1 + 272) != 0;
  return v4;
}

unint64_t _readDefElem(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 370;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(const char **)(a1 + 32);
  if (v5 && *v5)
    *(_QWORD *)(v3 + 16) = pstrdup(v5);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    *(_QWORD *)(v3 + 24) = _readNode(v6);
  v7 = *(_DWORD *)(a1 + 48);
  v8 = v7 - 2;
  v9 = v7 - 1;
  if (v8 >= 3)
    v9 = 0;
  *(_DWORD *)(v3 + 32) = v9;
  *(_DWORD *)(v3 + 36) = *(_DWORD *)(a1 + 52);
  return v3;
}

unint64_t _readRangeTblEntry(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t Node;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  uint64_t v73;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0xF0uLL);
  v4 = v3;
  *(_DWORD *)v3 = 371;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 8)
    v7 = 0;
  *(_DWORD *)(v3 + 4) = v7;
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 28);
  v8 = *(unsigned __int8 **)(a1 + 32);
  if (v8)
  {
    v9 = *v8;
    if (v9)
      *(_BYTE *)(v3 + 12) = v9;
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
    *(_QWORD *)(v4 + 24) = _readTableSampleClause(v10);
  v11 = *(_QWORD *)(a1 + 56);
  if (v11)
    *(_QWORD *)(v4 + 32) = _readQuery(v11);
  *(_BYTE *)(v4 + 40) = *(_DWORD *)(a1 + 64) != 0;
  v12 = *(_DWORD *)(a1 + 68);
  v13 = v12 - 2;
  v14 = v12 - 1;
  if (v13 >= 7)
    v14 = 0;
  *(_DWORD *)(v4 + 44) = v14;
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 80))
  {
    Node = _readNode(**(_QWORD **)(a1 + 88));
    list_make1_impl(226, Node);
    *(_QWORD *)(v4 + 56) = v16;
    if (*(_QWORD *)(a1 + 80) >= 2uLL)
    {
      v17 = v16;
      v18 = 2;
      v19 = 1;
      do
      {
        v20 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v19));
        v17 = lappend(v17, v20);
        *(_QWORD *)(v4 + 56) = v17;
        v19 = v18++;
      }
      while (*(_QWORD *)(a1 + 80) > v19);
    }
  }
  if (*(_QWORD *)(a1 + 96))
  {
    v21 = _readNode(**(_QWORD **)(a1 + 104));
    list_make1_impl(226, v21);
    *(_QWORD *)(v4 + 64) = v22;
    if (*(_QWORD *)(a1 + 96) >= 2uLL)
    {
      v23 = v22;
      v24 = 2;
      v25 = 1;
      do
      {
        v26 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v25));
        v23 = lappend(v23, v26);
        *(_QWORD *)(v4 + 64) = v23;
        v25 = v24++;
      }
      while (*(_QWORD *)(a1 + 96) > v25);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v27 = _readNode(**(_QWORD **)(a1 + 120));
    list_make1_impl(226, v27);
    *(_QWORD *)(v4 + 72) = v28;
    if (*(_QWORD *)(a1 + 112) >= 2uLL)
    {
      v29 = v28;
      v30 = 2;
      v31 = 1;
      do
      {
        v32 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v31));
        v29 = lappend(v29, v32);
        *(_QWORD *)(v4 + 72) = v29;
        v31 = v30++;
      }
      while (*(_QWORD *)(a1 + 112) > v31);
    }
  }
  if (*(_QWORD *)(a1 + 128))
  {
    v33 = _readNode(**(_QWORD **)(a1 + 136));
    list_make1_impl(226, v33);
    *(_QWORD *)(v4 + 80) = v34;
    if (*(_QWORD *)(a1 + 128) >= 2uLL)
    {
      v35 = v34;
      v36 = 2;
      v37 = 1;
      do
      {
        v38 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v37));
        v35 = lappend(v35, v38);
        *(_QWORD *)(v4 + 80) = v35;
        v37 = v36++;
      }
      while (*(_QWORD *)(a1 + 128) > v37);
    }
  }
  *(_BYTE *)(v4 + 88) = *(_DWORD *)(a1 + 144) != 0;
  v39 = *(_QWORD *)(a1 + 152);
  if (v39)
    *(_QWORD *)(v4 + 96) = _readTableFunc(v39);
  if (*(_QWORD *)(a1 + 160))
  {
    v40 = _readNode(**(_QWORD **)(a1 + 168));
    list_make1_impl(226, v40);
    *(_QWORD *)(v4 + 104) = v41;
    if (*(_QWORD *)(a1 + 160) >= 2uLL)
    {
      v42 = v41;
      v43 = 2;
      v44 = 1;
      do
      {
        v45 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v44));
        v42 = lappend(v42, v45);
        *(_QWORD *)(v4 + 104) = v42;
        v44 = v43++;
      }
      while (*(_QWORD *)(a1 + 160) > v44);
    }
  }
  v46 = *(const char **)(a1 + 176);
  if (v46 && *v46)
    *(_QWORD *)(v4 + 112) = pstrdup(v46);
  *(_DWORD *)(v4 + 120) = *(_DWORD *)(a1 + 184);
  *(_BYTE *)(v4 + 124) = *(_DWORD *)(a1 + 188) != 0;
  if (*(_QWORD *)(a1 + 192))
  {
    v47 = _readNode(**(_QWORD **)(a1 + 200));
    list_make1_impl(226, v47);
    *(_QWORD *)(v4 + 128) = v48;
    if (*(_QWORD *)(a1 + 192) >= 2uLL)
    {
      v49 = v48;
      v50 = 2;
      v51 = 1;
      do
      {
        v52 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v51));
        v49 = lappend(v49, v52);
        *(_QWORD *)(v4 + 128) = v49;
        v51 = v50++;
      }
      while (*(_QWORD *)(a1 + 192) > v51);
    }
  }
  if (*(_QWORD *)(a1 + 208))
  {
    v53 = _readNode(**(_QWORD **)(a1 + 216));
    list_make1_impl(226, v53);
    *(_QWORD *)(v4 + 136) = v54;
    if (*(_QWORD *)(a1 + 208) >= 2uLL)
    {
      v55 = v54;
      v56 = 2;
      v57 = 1;
      do
      {
        v58 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * v57));
        v55 = lappend(v55, v58);
        *(_QWORD *)(v4 + 136) = v55;
        v57 = v56++;
      }
      while (*(_QWORD *)(a1 + 208) > v57);
    }
  }
  if (*(_QWORD *)(a1 + 224))
  {
    v59 = _readNode(**(_QWORD **)(a1 + 232));
    list_make1_impl(226, v59);
    *(_QWORD *)(v4 + 144) = v60;
    if (*(_QWORD *)(a1 + 224) >= 2uLL)
    {
      v61 = v60;
      v62 = 2;
      v63 = 1;
      do
      {
        v64 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v63));
        v61 = lappend(v61, v64);
        *(_QWORD *)(v4 + 144) = v61;
        v63 = v62++;
      }
      while (*(_QWORD *)(a1 + 224) > v63);
    }
  }
  v65 = *(const char **)(a1 + 240);
  if (v65 && *v65)
    *(_QWORD *)(v4 + 152) = pstrdup(v65);
  *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 248);
  v66 = *(_QWORD *)(a1 + 256);
  if (v66)
    *(_QWORD *)(v4 + 168) = _readAlias(v66);
  v67 = *(_QWORD *)(a1 + 264);
  if (v67)
    *(_QWORD *)(v4 + 176) = _readAlias(v67);
  *(_BYTE *)(v4 + 184) = *(_DWORD *)(a1 + 272) != 0;
  *(_BYTE *)(v4 + 185) = *(_DWORD *)(a1 + 276) != 0;
  *(_BYTE *)(v4 + 186) = *(_DWORD *)(a1 + 280) != 0;
  *(_DWORD *)(v4 + 188) = *(_DWORD *)(a1 + 284);
  *(_DWORD *)(v4 + 192) = *(_DWORD *)(a1 + 288);
  if (*(_QWORD *)(a1 + 360))
  {
    v68 = _readNode(**(_QWORD **)(a1 + 368));
    list_make1_impl(226, v68);
    *(_QWORD *)(v4 + 232) = v69;
    if (*(_QWORD *)(a1 + 360) >= 2uLL)
    {
      v70 = v69;
      v71 = 2;
      v72 = 1;
      do
      {
        v73 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 368) + 8 * v72));
        v70 = lappend(v70, v73);
        *(_QWORD *)(v4 + 232) = v70;
        v72 = v71++;
      }
      while (*(_QWORD *)(a1 + 360) > v72);
    }
  }
  return v4;
}

unint64_t _readRangeTblFunction(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x40uLL);
  *(_DWORD *)v3 = 372;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v6;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 24) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 40) > v9);
    }
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v11 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v11);
    *(_QWORD *)(v3 + 32) = v12;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v13 = v12;
      v14 = 2;
      v15 = 1;
      do
      {
        v16 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15));
        v13 = lappend(v13, v16);
        *(_QWORD *)(v3 + 32) = v13;
        v15 = v14++;
      }
      while (*(_QWORD *)(a1 + 56) > v15);
    }
  }
  if (*(_QWORD *)(a1 + 72))
  {
    v17 = _readNode(**(_QWORD **)(a1 + 80));
    list_make1_impl(226, v17);
    *(_QWORD *)(v3 + 40) = v18;
    if (*(_QWORD *)(a1 + 72) >= 2uLL)
    {
      v19 = v18;
      v20 = 2;
      v21 = 1;
      do
      {
        v22 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v21));
        v19 = lappend(v19, v22);
        *(_QWORD *)(v3 + 40) = v19;
        v21 = v20++;
      }
      while (*(_QWORD *)(a1 + 72) > v21);
    }
  }
  if (*(_QWORD *)(a1 + 88))
  {
    v23 = _readNode(**(_QWORD **)(a1 + 96));
    list_make1_impl(226, v23);
    *(_QWORD *)(v3 + 48) = v24;
    if (*(_QWORD *)(a1 + 88) >= 2uLL)
    {
      v25 = v24;
      v26 = 2;
      v27 = 1;
      do
      {
        v28 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v27));
        v25 = lappend(v25, v28);
        *(_QWORD *)(v3 + 48) = v25;
        v27 = v26++;
      }
      while (*(_QWORD *)(a1 + 88) > v27);
    }
  }
  return v3;
}

unint64_t _readTableSampleClause(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 373;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 32) > v8);
    }
  }
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
    *(_QWORD *)(v3 + 16) = _readNode(v10);
  return v3;
}

_DWORD *_readWithCheckOption(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  const char *v8;
  const char *v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  v4 = v3;
  *v3 = 374;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 3)
    v7 = 0;
  v3[1] = v7;
  v8 = *(const char **)(a1 + 32);
  if (v8 && *v8)
    *((_QWORD *)v4 + 1) = pstrdup(v8);
  v9 = *(const char **)(a1 + 40);
  if (v9 && *v9)
    *((_QWORD *)v4 + 2) = pstrdup(v9);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
    *((_QWORD *)v4 + 3) = _readNode(v10);
  *((_BYTE *)v4 + 32) = *(_DWORD *)(a1 + 56) != 0;
  return v4;
}

unint64_t _readSortGroupClause(_DWORD *a1)
{
  uint64_t *v2;
  unint64_t result;

  v2 = (uint64_t *)CurrentMemoryContext();
  result = MemoryContextAllocZero(*v2, 0x14uLL);
  *(_DWORD *)result = 375;
  *(_DWORD *)(result + 4) = a1[6];
  *(_DWORD *)(result + 8) = a1[7];
  *(_DWORD *)(result + 12) = a1[8];
  *(_BYTE *)(result + 16) = a1[9] != 0;
  *(_BYTE *)(result + 17) = a1[10] != 0;
  return result;
}

_DWORD *_readGroupingSet(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  v4 = v3;
  *v3 = 376;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 4)
    v7 = 0;
  v3[1] = v7;
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *((_QWORD *)v4 + 1) = v9;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v10 = v9;
      v11 = 2;
      v12 = 1;
      do
      {
        v13 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v12));
        v10 = lappend(v10, v13);
        *((_QWORD *)v4 + 1) = v10;
        v12 = v11++;
      }
      while (*(_QWORD *)(a1 + 32) > v12);
    }
  }
  v4[4] = *(_DWORD *)(a1 + 48);
  return v4;
}

unint64_t _readWindowClause(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  const char *v5;
  uint64_t Node;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x58uLL);
  *(_DWORD *)v3 = 377;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(const char **)(a1 + 32);
  if (v5 && *v5)
    *(_QWORD *)(v3 + 16) = pstrdup(v5);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v7;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v8 = v7;
      v9 = 2;
      v10 = 1;
      do
      {
        v11 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10));
        v8 = lappend(v8, v11);
        *(_QWORD *)(v3 + 24) = v8;
        v10 = v9++;
      }
      while (*(_QWORD *)(a1 + 40) > v10);
    }
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v12 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v12);
    *(_QWORD *)(v3 + 32) = v13;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v16));
        v14 = lappend(v14, v17);
        *(_QWORD *)(v3 + 32) = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 56) > v16);
    }
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72);
  v18 = *(_QWORD *)(a1 + 80);
  if (v18)
    *(_QWORD *)(v3 + 48) = _readNode(v18);
  v19 = *(_QWORD *)(a1 + 88);
  if (v19)
    *(_QWORD *)(v3 + 56) = _readNode(v19);
  *(_DWORD *)(v3 + 64) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(v3 + 68) = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(v3 + 72) = *(_DWORD *)(a1 + 104);
  *(_BYTE *)(v3 + 76) = *(_DWORD *)(a1 + 108) != 0;
  *(_BYTE *)(v3 + 77) = *(_DWORD *)(a1 + 112) != 0;
  *(_DWORD *)(v3 + 80) = *(_DWORD *)(a1 + 116);
  *(_BYTE *)(v3 + 84) = *(_DWORD *)(a1 + 120) != 0;
  return v3;
}

unint64_t _readObjectWithArgs(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 378;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, v10);
    *(_QWORD *)(v3 + 16) = v11;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v12 = v11;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14));
        v12 = lappend(v12, v15);
        *(_QWORD *)(v3 + 16) = v12;
        v14 = v13++;
      }
      while (*(_QWORD *)(a1 + 40) > v14);
    }
  }
  *(_BYTE *)(v3 + 24) = *(_DWORD *)(a1 + 56) != 0;
  return v3;
}

unint64_t _readAccessPriv(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 379;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readCreateOpClassItem(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)v3 = 380;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readObjectWithArgs(v4);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 48))
  {
    Node = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v6;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 24) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 48) > v9);
    }
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v11 = _readNode(**(_QWORD **)(a1 + 72));
    list_make1_impl(226, v11);
    *(_QWORD *)(v3 + 32) = v12;
    if (*(_QWORD *)(a1 + 64) >= 2uLL)
    {
      v13 = v12;
      v14 = 2;
      v15 = 1;
      do
      {
        v16 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v15));
        v13 = lappend(v13, v16);
        *(_QWORD *)(v3 + 32) = v13;
        v15 = v14++;
      }
      while (*(_QWORD *)(a1 + 64) > v15);
    }
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (v17)
    *(_QWORD *)(v3 + 40) = _readTypeName(v17);
  return v3;
}

unint64_t _readTableLikeClause(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 381;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readRangeVar(v4);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 36);
  return v3;
}

unint64_t _readFunctionParameter(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 382;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readTypeName(v5);
  v6 = *(_DWORD *)(a1 + 40) - 2;
  if (v6 <= 3)
  {
    *(_DWORD *)(v3 + 24) = dword_18DC2F340[v6];
    v7 = *(_QWORD *)(a1 + 48);
    if (!v7)
      return v3;
    goto LABEL_10;
  }
  *(_DWORD *)(v3 + 24) = 105;
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
LABEL_10:
    *(_QWORD *)(v3 + 32) = _readNode(v7);
  return v3;
}

unint64_t _readLockingClause(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 383;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  v10 = *(_DWORD *)(a1 + 40);
  v11 = v10 - 2;
  v12 = v10 - 1;
  if (v11 >= 4)
    v12 = 0;
  *(_DWORD *)(v3 + 16) = v12;
  v13 = *(_DWORD *)(a1 + 44);
  if (v13 == 3)
    v14 = 2;
  else
    v14 = v13 == 2;
  *(_DWORD *)(v3 + 20) = v14;
  return v3;
}

unint64_t _readRowMarkClause(_DWORD *a1)
{
  uint64_t *v2;
  unint64_t result;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;

  v2 = (uint64_t *)CurrentMemoryContext();
  result = MemoryContextAllocZero(*v2, 0x14uLL);
  *(_DWORD *)result = 384;
  *(_DWORD *)(result + 4) = a1[6];
  v4 = a1[7];
  v5 = v4 - 2;
  v6 = v4 - 1;
  if (v5 >= 4)
    v6 = 0;
  *(_DWORD *)(result + 8) = v6;
  v7 = a1[8];
  if (v7 == 3)
    v8 = 2;
  else
    v8 = v7 == 2;
  *(_DWORD *)(result + 12) = v8;
  *(_BYTE *)(result + 16) = a1[9] != 0;
  return result;
}

unint64_t _readXmlSerialize(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 385;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 24) == 2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readNode(v4);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readTypeName(v5);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  return v3;
}

unint64_t _readWithClause(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 386;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  *(_BYTE *)(v3 + 16) = *(_DWORD *)(a1 + 40) != 0;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44);
  return v3;
}

unint64_t _readInferClause(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)v3 = 387;
  if (*(_QWORD *)(a1 + 24))
  {
    Node = _readNode(**(_QWORD **)(a1 + 32));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 8) = v5;
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v6 = v5;
      v7 = 2;
      v8 = 1;
      do
      {
        v9 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8));
        v6 = lappend(v6, v9);
        *(_QWORD *)(v3 + 8) = v6;
        v8 = v7++;
      }
      while (*(_QWORD *)(a1 + 24) > v8);
    }
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    *(_QWORD *)(v3 + 16) = _readNode(v10);
  v11 = *(const char **)(a1 + 48);
  if (v11 && *v11)
    *(_QWORD *)(v3 + 24) = pstrdup(v11);
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 56);
  return v3;
}

_DWORD *_readOnConflictClause(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  v4 = v3;
  *v3 = 388;
  v5 = *(_DWORD *)(a1 + 24);
  if (v5 == 3)
    v6 = 2;
  else
    v6 = v5 == 2;
  v3[1] = v6;
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    *((_QWORD *)v4 + 1) = _readInferClause(v7);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *((_QWORD *)v4 + 2) = v9;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v10 = v9;
      v11 = 2;
      v12 = 1;
      do
      {
        v13 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v12));
        v10 = lappend(v10, v13);
        *((_QWORD *)v4 + 2) = v10;
        v12 = v11++;
      }
      while (*(_QWORD *)(a1 + 40) > v12);
    }
  }
  v14 = *(_QWORD *)(a1 + 56);
  if (v14)
    *((_QWORD *)v4 + 3) = _readNode(v14);
  v4[8] = *(_DWORD *)(a1 + 64);
  return v4;
}

unint64_t _readCommonTableExpr(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x58uLL);
  *(_DWORD *)v3 = 389;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  v11 = *(_DWORD *)(a1 + 48);
  if (v11 == 3)
    v12 = 2;
  else
    v12 = v11 == 2;
  *(_DWORD *)(v3 + 24) = v12;
  v13 = *(_QWORD *)(a1 + 56);
  if (v13)
    *(_QWORD *)(v3 + 32) = _readNode(v13);
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 64);
  *(_BYTE *)(v3 + 44) = *(_DWORD *)(a1 + 68) != 0;
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 80))
  {
    v14 = _readNode(**(_QWORD **)(a1 + 88));
    list_make1_impl(226, v14);
    *(_QWORD *)(v3 + 56) = v15;
    if (*(_QWORD *)(a1 + 80) >= 2uLL)
    {
      v16 = v15;
      v17 = 2;
      v18 = 1;
      do
      {
        v19 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v18));
        v16 = lappend(v16, v19);
        *(_QWORD *)(v3 + 56) = v16;
        v18 = v17++;
      }
      while (*(_QWORD *)(a1 + 80) > v18);
    }
  }
  if (*(_QWORD *)(a1 + 96))
  {
    v20 = _readNode(**(_QWORD **)(a1 + 104));
    list_make1_impl(226, v20);
    *(_QWORD *)(v3 + 64) = v21;
    if (*(_QWORD *)(a1 + 96) >= 2uLL)
    {
      v22 = v21;
      v23 = 2;
      v24 = 1;
      do
      {
        v25 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v24));
        v22 = lappend(v22, v25);
        *(_QWORD *)(v3 + 64) = v22;
        v24 = v23++;
      }
      while (*(_QWORD *)(a1 + 96) > v24);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v26 = _readNode(**(_QWORD **)(a1 + 120));
    list_make1_impl(226, v26);
    *(_QWORD *)(v3 + 72) = v27;
    if (*(_QWORD *)(a1 + 112) >= 2uLL)
    {
      v28 = v27;
      v29 = 2;
      v30 = 1;
      do
      {
        v31 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v30));
        v28 = lappend(v28, v31);
        *(_QWORD *)(v3 + 72) = v28;
        v30 = v29++;
      }
      while (*(_QWORD *)(a1 + 112) > v30);
    }
  }
  if (*(_QWORD *)(a1 + 128))
  {
    v32 = _readNode(**(_QWORD **)(a1 + 136));
    list_make1_impl(226, v32);
    *(_QWORD *)(v3 + 80) = v33;
    if (*(_QWORD *)(a1 + 128) >= 2uLL)
    {
      v34 = v33;
      v35 = 2;
      v36 = 1;
      do
      {
        v37 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v36));
        v34 = lappend(v34, v37);
        *(_QWORD *)(v3 + 80) = v34;
        v36 = v35++;
      }
      while (*(_QWORD *)(a1 + 128) > v36);
    }
  }
  return v3;
}

_DWORD *_readRoleSpec(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  const char *v8;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  v4 = v3;
  *v3 = 390;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = v5 - 2;
  v7 = v5 - 1;
  if (v6 >= 3)
    v7 = 0;
  v3[1] = v7;
  v8 = *(const char **)(a1 + 32);
  if (v8 && *v8)
    *((_QWORD *)v4 + 1) = pstrdup(v8);
  v4[4] = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _readTriggerTransition(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 391;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  *(_BYTE *)(v3 + 16) = *(_DWORD *)(a1 + 32) != 0;
  *(_BYTE *)(v3 + 17) = *(_DWORD *)(a1 + 36) != 0;
  return v3;
}

unint64_t _readPartitionElem(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t Node;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)v3 = 392;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readNode(v5);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v7;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v8 = v7;
      v9 = 2;
      v10 = 1;
      do
      {
        v11 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10));
        v8 = lappend(v8, v11);
        *(_QWORD *)(v3 + 24) = v8;
        v10 = v9++;
      }
      while (*(_QWORD *)(a1 + 40) > v10);
    }
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v12 = _readNode(**(_QWORD **)(a1 + 64));
    list_make1_impl(226, v12);
    *(_QWORD *)(v3 + 32) = v13;
    if (*(_QWORD *)(a1 + 56) >= 2uLL)
    {
      v14 = v13;
      v15 = 2;
      v16 = 1;
      do
      {
        v17 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v16));
        v14 = lappend(v14, v17);
        *(_QWORD *)(v3 + 32) = v14;
        v16 = v15++;
      }
      while (*(_QWORD *)(a1 + 56) > v16);
    }
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72);
  return v3;
}

unint64_t _readPartitionSpec(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 393;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    Node = _readNode(**(_QWORD **)(a1 + 40));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 16) = v6;
    if (*(_QWORD *)(a1 + 32) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 16) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 32) > v9);
    }
  }
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  return v3;
}

unint64_t _readPartitionBoundSpec(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t Node;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  v4 = v3;
  *(_DWORD *)v3 = 394;
  v5 = *(unsigned __int8 **)(a1 + 24);
  if (v5)
  {
    v6 = *v5;
    if (v6)
      *(_BYTE *)(v3 + 4) = v6;
  }
  *(_BYTE *)(v3 + 5) = *(_DWORD *)(a1 + 32) != 0;
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 48))
  {
    Node = _readNode(**(_QWORD **)(a1 + 56));
    list_make1_impl(226, Node);
    *(_QWORD *)(v4 + 16) = v8;
    if (*(_QWORD *)(a1 + 48) >= 2uLL)
    {
      v9 = v8;
      v10 = 2;
      v11 = 1;
      do
      {
        v12 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11));
        v9 = lappend(v9, v12);
        *(_QWORD *)(v4 + 16) = v9;
        v11 = v10++;
      }
      while (*(_QWORD *)(a1 + 48) > v11);
    }
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v13 = _readNode(**(_QWORD **)(a1 + 72));
    list_make1_impl(226, v13);
    *(_QWORD *)(v4 + 24) = v14;
    if (*(_QWORD *)(a1 + 64) >= 2uLL)
    {
      v15 = v14;
      v16 = 2;
      v17 = 1;
      do
      {
        v18 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v17));
        v15 = lappend(v15, v18);
        *(_QWORD *)(v4 + 24) = v15;
        v17 = v16++;
      }
      while (*(_QWORD *)(a1 + 64) > v17);
    }
  }
  if (*(_QWORD *)(a1 + 80))
  {
    v19 = _readNode(**(_QWORD **)(a1 + 88));
    list_make1_impl(226, v19);
    *(_QWORD *)(v4 + 32) = v20;
    if (*(_QWORD *)(a1 + 80) >= 2uLL)
    {
      v21 = v20;
      v22 = 2;
      v23 = 1;
      do
      {
        v24 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v23));
        v21 = lappend(v21, v24);
        *(_QWORD *)(v4 + 32) = v21;
        v23 = v22++;
      }
      while (*(_QWORD *)(a1 + 80) > v23);
    }
  }
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 96);
  return v4;
}

_DWORD *_readPartitionRangeDatum(uint64_t a1)
{
  uint64_t *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  v4 = v3;
  *v3 = 395;
  v5 = *(_DWORD *)(a1 + 24);
  if (v5 == 2)
    v6 = 0;
  else
    v6 = -1;
  if (v5 == 3)
    v7 = 1;
  else
    v7 = v6;
  v3[1] = v7;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    *((_QWORD *)v4 + 1) = _readNode(v8);
  v4[4] = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _readPartitionCmd(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 396;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readRangeVar(v4);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    *(_QWORD *)(v3 + 16) = _readPartitionBoundSpec(v5);
  return v3;
}

unint64_t _readVacuumRelation(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)v3 = 397;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    *(_QWORD *)(v3 + 8) = _readRangeVar(v4);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40))
  {
    Node = _readNode(**(_QWORD **)(a1 + 48));
    list_make1_impl(226, Node);
    *(_QWORD *)(v3 + 24) = v6;
    if (*(_QWORD *)(a1 + 40) >= 2uLL)
    {
      v7 = v6;
      v8 = 2;
      v9 = 1;
      do
      {
        v10 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v9));
        v7 = lappend(v7, v10);
        *(_QWORD *)(v3 + 24) = v7;
        v9 = v8++;
      }
      while (*(_QWORD *)(a1 + 40) > v9);
    }
  }
  return v3;
}

unint64_t _readInlineCodeBlock(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  const char *v4;

  v2 = (uint64_t *)CurrentMemoryContext();
  v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)v3 = 410;
  v4 = *(const char **)(a1 + 24);
  if (v4 && *v4)
    *(_QWORD *)(v3 + 8) = pstrdup(v4);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v3 + 20) = *(_DWORD *)(a1 + 36) != 0;
  *(_BYTE *)(v3 + 21) = *(_DWORD *)(a1 + 40) != 0;
  return v3;
}

uint64_t _readList(uint64_t a1)
{
  uint64_t Node;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  if (!*(_QWORD *)(a1 + 24))
    return 0;
  Node = _readNode(**(_QWORD **)(a1 + 32));
  list_make1_impl(226, Node);
  v4 = v3;
  if (*(_QWORD *)(a1 + 24) >= 2uLL)
  {
    v5 = 2;
    v6 = 1;
    do
    {
      v7 = _readNode(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6));
      v4 = lappend(v4, v7);
      v6 = v5++;
    }
    while (*(_QWORD *)(a1 + 24) > v6);
  }
  return v4;
}

void _readNode_cold_1(_DWORD *a1)
{
  errstart(20, 0);
  errmsg_internal("unsupported protobuf node type: %d", *a1);
  errfinish("src/pg_query_readfuncs_protobuf.c", 116, (uint64_t)"_readNode");
  __break(1u);
}

uint64_t pg_query_scan(uint64_t a1)
{
  const char *v1;
  _OWORD *v2;
  _OWORD *v3;
  double v4;
  uint64_t *v5;
  uint64_t v6;
  int **v7;
  int *v8;
  int **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _BYTE ***v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  int v24;
  int v25;
  void **v26;
  int v27;
  uint64_t v28;
  void *v29;
  int v30;
  int v31;
  unsigned int packed_size;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  _BYTE *v45;
  _OWORD v46[5];
  uint64_t v47;
  int v48[51];
  char __s1[4097];
  uint64_t v50;

  v1 = (const char *)MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v50 = *MEMORY[0x1E0C80C00];
  *v2 = 0u;
  v2[1] = 0u;
  v47 = 0;
  memset(v46, 0, sizeof(v46));
  v45 = 0;
  v44 = 0;
  v41 = xmmword_1E264B6D0;
  v42 = unk_1E264B6E0;
  v43 = xmmword_1E264B6F0;
  pg_query_enter_memory_context();
  v5 = (uint64_t *)CurrentMemoryContext(v4);
  v6 = *v5;
  bzero(__s1, 0x1001uLL);
  v7 = (int **)PG_exception_stack();
  v8 = *v7;
  v9 = v7;
  v10 = (_QWORD *)error_context_stack();
  v11 = *v10;
  memset(v48, 0, 196);
  if (sigsetjmp(v48, 0))
  {
    *v9 = v8;
    *v10 = v11;
    *v5 = v6;
    v12 = CopyErrorData();
    v13 = malloc_type_malloc(0x28uLL, 0x1010040E871EB1AuLL);
    *v13 = strdup(*(const char **)(v12 + 64));
    v13[2] = strdup(*(const char **)(v12 + 16));
    v13[1] = strdup(*(const char **)(v12 + 32));
    v13[4] = 0;
    *((_DWORD *)v13 + 6) = *(_DWORD *)(v12 + 24);
    *((_DWORD *)v13 + 7) = *(_DWORD *)(v12 + 160);
    *((_QWORD *)v3 + 3) = v13;
    FlushErrorState();
  }
  else
  {
    v38 = v10;
    v39 = v11;
    v40 = v3;
    *v9 = v48;
    v14 = (_BYTE ***)scanner_init(v1, (uint64_t)v46, (uint64_t)&ScanKeywords, (uint64_t)&ScanKeywordTokens);
    v15 = -1;
    v16 = -8;
    do
    {
      v17 = v15;
      v18 = v16;
      v19 = core_yylex(&v45, (_BYTE **)&v44, v14);
      v20 = v17 + 1;
      v21 = v18 + 8;
      v16 = v21;
      v15 = v17 + 1;
    }
    while (v19);
    scanner_finish((uint64_t)v14);
    v22 = (void **)malloc_type_malloc(v21, 0x2004093837F09uLL);
    v23 = scanner_init(v1, (uint64_t)v46, (uint64_t)&ScanKeywords, (uint64_t)&ScanKeywordTokens);
    v24 = core_yylex(&v45, (_BYTE **)&v44, (_BYTE ***)v23);
    if (v24)
    {
      v25 = v24;
      v26 = v22;
      do
      {
        v29 = malloc_type_malloc(0x28uLL, 0x10600401BE82CDFuLL);
        *v26 = v29;
        pg_query__scan_token__init((uint64_t)v29);
        v30 = v44;
        *((_DWORD *)*v26 + 6) = v44;
        if ((v25 - 258) <= 0x12 && ((1 << (v25 - 2)) & 0x40069) != 0)
          v31 = HIDWORD(v47);
        else
          v31 = v30 + *(_DWORD *)(v23 + 64);
        *((_DWORD *)*v26 + 7) = v31;
        *((_DWORD *)*v26 + 8) = v25;
        if ((v25 - 277) <= 0x1C1)
          v27 = dword_18DC2F350[v25 - 277];
        else
          v27 = 0;
        v28 = (uint64_t)*v26++;
        *(_DWORD *)(v28 + 36) = v27;
        v25 = core_yylex(&v45, (_BYTE **)&v44, (_BYTE ***)v23);
      }
      while (v25);
    }
    scanner_finish(v23);
    DWORD2(v42) = 130003;
    *(_QWORD *)&v43 = v20;
    *((_QWORD *)&v43 + 1) = v22;
    packed_size = pg_query__scan_result__get_packed_size((void **)&v41);
    *(_DWORD *)v40 = packed_size;
    v33 = malloc_type_malloc(packed_size, 0x1FB95764uLL);
    *((_QWORD *)v40 + 1) = v33;
    pg_query__scan_result__pack((void **)&v41, (uint64_t)v33, v34);
    if (v20)
    {
      v35 = 0;
      do
      {
        v36 = v35;
        free(v22[v35]);
        v35 = v36 + 1;
      }
      while (v20 != v36 + 1);
    }
    free(v22);
    *((_QWORD *)v40 + 2) = strdup(__s1);
    v10 = v38;
    v11 = v39;
  }
  *v9 = v8;
  *v10 = v11;
  return pg_query_exit_memory_context();
}

void pg_query_free_scan_result(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    pg_query_free_error(v2);
  free(*(void **)(a1 + 8));
  free(*(void **)(a1 + 16));
}

uint64_t pg_query_split_with_scanner(uint64_t a1)
{
  const char *v1;
  _OWORD *v2;
  _OWORD *v3;
  double v4;
  uint64_t *v5;
  uint64_t v6;
  int **v7;
  int *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int **v13;
  _BYTE ***v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  _BYTE ***v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  _DWORD *v28;
  int v29;
  _OWORD *v31;
  uint64_t v32;
  int **v33;
  int *v34;
  int v35;
  _BYTE *v36;
  _OWORD v37[5];
  uint64_t v38;
  sigjmp_buf v39;
  char __s1[4097];
  uint64_t v41;

  v1 = (const char *)MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v41 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  v36 = 0;
  *v2 = 0u;
  v2[1] = 0u;
  memset(v37, 0, sizeof(v37));
  v35 = 0;
  pg_query_enter_memory_context();
  v5 = (uint64_t *)CurrentMemoryContext(v4);
  v6 = *v5;
  bzero(__s1, 0x1001uLL);
  v7 = (int **)PG_exception_stack();
  v8 = *v7;
  v9 = (uint64_t *)error_context_stack();
  v10 = *v9;
  memset(v39, 0, sizeof(v39));
  if (sigsetjmp(v39, 0))
  {
    *v7 = v8;
    *v9 = v10;
    *v5 = v6;
    v11 = CopyErrorData();
    v12 = malloc_type_malloc(0x28uLL, 0x1010040E871EB1AuLL);
    *v12 = strdup(*(const char **)(v11 + 64));
    v12[2] = strdup(*(const char **)(v11 + 16));
    v12[1] = strdup(*(const char **)(v11 + 32));
    v12[4] = 0;
    *((_DWORD *)v12 + 6) = *(_DWORD *)(v11 + 24);
    *((_DWORD *)v12 + 7) = *(_DWORD *)(v11 + 160);
    *((_QWORD *)v3 + 3) = v12;
    FlushErrorState();
  }
  else
  {
    v31 = v3;
    v32 = v10;
    v34 = v8;
    v13 = v7;
    *v7 = v39;
    v14 = (_BYTE ***)scanner_init(v1, (uint64_t)v37, (uint64_t)&ScanKeywords, (uint64_t)&ScanKeywordTokens);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = v16;
      v19 = core_yylex(&v36, (_BYTE **)&v35, v14);
      if ((v19 - 277) < 0x1C2)
      {
        v15 = 1;
      }
      else if (v19 == 41)
      {
        --v17;
      }
      else if (v19 == 40)
      {
        ++v17;
      }
      else if ((v15 & (v17 == 0)) == 1)
      {
        if (v19 != 59 && v19)
        {
          v15 = 1;
        }
        else
        {
          *((_DWORD *)v3 + 2) = v18 + 1;
          v18 = (v18 + 1);
          v15 = 0;
        }
        v17 = 0;
      }
      v16 = v18;
    }
    while (v19);
    v33 = v13;
    scanner_finish((uint64_t)v14);
    v20 = malloc_type_malloc(8 * (int)v18, 0x2004093837F09uLL);
    *(_QWORD *)v3 = v20;
    v21 = (_BYTE ***)scanner_init(v1, (uint64_t)v37, (uint64_t)&ScanKeywords, (uint64_t)&ScanKeywordTokens);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    do
    {
      v26 = core_yylex(&v36, (_BYTE **)&v35, v21);
      v27 = v26;
      if ((v26 - 277) < 0x1C2)
      {
        v22 = 1;
      }
      else if (v26 == 41)
      {
        --v24;
      }
      else if (v26 == 40)
      {
        ++v24;
      }
      else if ((v22 & (v24 == 0)) == 1 && (v26 == 59 || !v26))
      {
        v28 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
        v24 = 0;
        v22 = 0;
        v20[v23] = v28;
        *v28 = v25;
        v29 = v35;
        *(_DWORD *)(v20[v23] + 4) = v35 - v25;
        v25 = v29 + 1;
        ++v23;
      }
      else if (!v24 && v26 == 59)
      {
        v24 = 0;
        v25 = v35 + 1;
      }
    }
    while (v27);
    scanner_finish((uint64_t)v21);
    v10 = v32;
    *((_QWORD *)v31 + 2) = strdup(__s1);
    v8 = v34;
    v7 = v33;
  }
  *v7 = v8;
  *v9 = v10;
  return pg_query_exit_memory_context();
}

uint64_t pg_query_split_with_parser@<X0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v12;
  __int128 v13;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  pg_query_enter_memory_context();
  pg_query_raw_parse((uint64_t)a1);
  *(_OWORD *)(a2 + 16) = v13;
  if (v12)
  {
    v4 = *(int *)(v12 + 4);
    *(_DWORD *)(a2 + 8) = v4;
    v5 = malloc_type_malloc(8 * v4, 0x2004093837F09uLL);
    *(_QWORD *)a2 = v5;
    if (*(int *)(v12 + 4) >= 1)
    {
      v6 = v5;
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * v7);
        v9 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
        v6[v7] = v9;
        *v9 = *(_DWORD *)(v8 + 16);
        v10 = *(_DWORD *)(v8 + 20);
        if (!v10)
          v10 = strlen(a1) - *(_DWORD *)(v8 + 16);
        *(_DWORD *)(v6[v7++] + 4) = v10;
      }
      while (v7 < *(int *)(v12 + 4));
    }
  }
  else
  {
    *(_DWORD *)(a2 + 8) = 0;
    *(_QWORD *)a2 = 0;
  }
  return pg_query_exit_memory_context();
}

void pg_query_free_split_result(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    pg_query_free_error(v2);
  free(*(void **)(a1 + 16));
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    if (*(int *)(a1 + 8) >= 1)
    {
      v4 = 0;
      do
        free(*(void **)(*(_QWORD *)a1 + 8 * v4++));
      while (v4 < *(int *)(a1 + 8));
      v3 = *(void **)a1;
    }
    free(v3);
  }
}

uint64_t NameListToString(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];

  memset(v5, 0, sizeof(v5));
  initStringInfo((uint64_t)v5);
  if (a1 && *(int *)(a1 + 4) >= 1)
  {
    v2 = **(_QWORD **)(a1 + 16);
    if (*(_DWORD *)v2 != 223)
    {
      if (*(_DWORD *)v2 != 351)
        goto LABEL_14;
      appendStringInfoChar((uint64_t)v5, 42);
      if (*(int *)(a1 + 4) < 2)
        return v5[0];
LABEL_8:
      v3 = 1;
      while (1)
      {
        while (1)
        {
          v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v3);
          appendStringInfoChar((uint64_t)v5, 46);
          if (*(_DWORD *)v2 != 351)
            break;
          appendStringInfoChar((uint64_t)v5, 42);
          if (++v3 >= *(int *)(a1 + 4))
            return v5[0];
        }
        if (*(_DWORD *)v2 != 223)
          break;
        appendStringInfoString((uint64_t)v5, *(char **)(v2 + 8));
        if (++v3 >= *(int *)(a1 + 4))
          return v5[0];
      }
LABEL_14:
      NameListToString_cold_1((_DWORD *)v2);
    }
    appendStringInfoString((uint64_t)v5, *(char **)(v2 + 8));
    if (*(int *)(a1 + 4) >= 2)
      goto LABEL_8;
  }
  return v5[0];
}

uint64_t get_collation_oid()
{
  return 0xFFFFFFFFLL;
}

void NameListToString_cold_1(_DWORD *a1)
{
  errstart(20, 0);
  errmsg_internal("unexpected node type in name list: %d", *a1);
  errfinish("src/postgres/src_backend_catalog_namespace.c", 736, (uint64_t)"NameListToString");
  __break(1u);
}

uint64_t defGetInt32(uint64_t a1)
{
  _DWORD *v1;

  v1 = *(_DWORD **)(a1 + 24);
  if (!v1)
    defGetInt32_cold_1();
  if (*v1 != 221)
    defGetInt32_cold_2();
  return v1[2];
}

void defGetInt32_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_0_23();
  OUTLINED_FUNCTION_1_16();
  errmsg("%s requires an integer value", v1, v2, v3, v4, v5, v6, v7, *(_QWORD *)(v0 + 16));
  errfinish("src/postgres/src_backend_commands_define.c", 76, (uint64_t)"defGetInt32");
  __break(1u);
}

void defGetInt32_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_0_23();
  OUTLINED_FUNCTION_1_16();
  errmsg("%s requires an integer value", v1, v2, v3, v4, v5, v6, v7, *(_QWORD *)(v0 + 16));
  errfinish("src/postgres/src_backend_commands_define.c", 85, (uint64_t)"defGetInt32");
  __break(1u);
}

void *bms_copy(int *a1)
{
  unint64_t v2;
  void *v3;

  if (!a1)
    return 0;
  v2 = 8 * *a1 + 8;
  v3 = (void *)palloc(v2);
  memcpy(v3, a1, v2);
  return v3;
}

BOOL bms_equal(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 result;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  if (a1)
  {
    v2 = *a1;
    if (a2)
    {
      v3 = *a2;
      if ((int)v2 >= (int)*a2)
        v4 = v3;
      else
        v4 = v2;
      if ((int)v2 <= v3)
        v5 = a1;
      else
        v5 = a2;
      if ((int)v2 > v3)
        v3 = *a1;
      if ((int)v2 <= (int)*a2)
        v6 = a2;
      else
        v6 = a1;
      if ((int)v4 >= 1)
      {
        v7 = (uint64_t *)(v6 + 2);
        v8 = (uint64_t *)(v5 + 2);
        v9 = v4;
        do
        {
          v11 = *v8++;
          v10 = v11;
          v12 = *v7++;
          if (v10 != v12)
            return 0;
          --v9;
        }
        while (v9);
        if ((int)v4 >= v3)
          return 1;
        goto LABEL_38;
      }
      LODWORD(v4) = 0;
      if (v3 > 0)
      {
LABEL_38:
        v26 = ~(unint64_t)v4 + v3;
        v27 = &v6[2 * v4 + 2];
        do
        {
          v29 = *(_QWORD *)v27;
          v27 += 2;
          v28 = v29;
          result = v29 == 0;
          v19 = v26-- != 0;
          v30 = v19;
        }
        while (!v28 && (v30 & 1) != 0);
        return result;
      }
      return 1;
    }
    if ((int)v2 < 1)
      return 1;
    v21 = v2 - 1;
    v22 = (uint64_t *)(a1 + 2);
    do
    {
      v24 = *v22++;
      v23 = v24;
      result = v24 == 0;
      v19 = v21-- != 0;
      v25 = v19;
    }
    while (!v23 && (v25 & 1) != 0);
  }
  else
  {
    if (!a2)
      return 1;
    v13 = *a2;
    if ((int)v13 < 1)
      return 1;
    v14 = v13 - 1;
    v15 = (uint64_t *)(a2 + 2);
    do
    {
      v17 = *v15++;
      v16 = v17;
      result = v17 == 0;
      v19 = v14-- != 0;
      v20 = v19;
    }
    while (!v16 && (v20 & 1) != 0);
  }
  return result;
}

BOOL bms_is_empty(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  BOOL v8;

  if (!a1)
    return 1;
  v1 = *a1;
  if ((int)v1 < 1)
    return 1;
  v2 = v1 - 1;
  v3 = (uint64_t *)(a1 + 2);
  do
  {
    v5 = *v3++;
    v4 = v5;
    result = v5 == 0;
    v8 = v2-- != 0;
  }
  while (!v4 && v8);
  return result;
}

uint64_t bms_free(uint64_t a1)
{
  if (a1)
    return pfree(a1);
  return a1;
}

uint64_t bms_num_members(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  if (!a1)
    return 0;
  v1 = *a1;
  if ((int)v1 >= 1)
  {
    v2 = 0;
    v3 = (uint64_t *)(a1 + 2);
    do
    {
      v5 = *v3++;
      v4 = v5;
      if (v5)
        v2 = pg_popcount64(v4) + v2;
      --v1;
    }
    while (v1);
    return v2;
  }
  return 0;
}

uint64_t bms_first_member(_DWORD *a1)
{
  int v1;
  int v2;
  unint64_t *i;
  unint64_t v4;

  if (!a1)
    return 0xFFFFFFFFLL;
  v1 = *a1;
  if ((int)*a1 < 1)
    return 0xFFFFFFFFLL;
  v2 = 0;
  for (i = (unint64_t *)(a1 + 2); ; ++i)
  {
    v4 = *i;
    if (*i)
      break;
    v2 -= 64;
    if (!--v1)
      return 0xFFFFFFFFLL;
  }
  *i = (v4 - 1) & v4;
  return __clz(__rbit64(v4)) - v2;
}

uint64_t bms_next_member(int *a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int v7;
  _DWORD *v8;
  unint64_t v9;

  if (!a1)
    return 4294967294;
  v2 = *a1;
  v3 = a2 + 64;
  if (a2 + 1 >= 0)
    v3 = a2 + 1;
  LODWORD(v4) = v3 >> 6;
  if ((int)v4 >= v2)
    return 4294967294;
  v5 = *(_QWORD *)&a1[2 * (int)v4 + 2] & (-1 << (a2 + 1 - ((_BYTE)v4 << 6)));
  if (v5)
    return __clz(__rbit64(v5)) | ((_DWORD)v4 << 6);
  if ((_DWORD)v4 + 1 == v2)
    return 4294967294;
  v4 = (int)v4;
  v7 = v2 - 1;
  v8 = a1 + 4;
  result = 4294967294;
  while (1)
  {
    v9 = *(_QWORD *)&v8[2 * v4];
    if (v9)
      break;
    if (v7 == (_DWORD)++v4)
      return result;
  }
  return __clz(__rbit64(v9)) | (((_DWORD)v4 + 1) << 6);
}

void copyObjectImpl(int *a1)
{
  double v2;
  uint64_t *v3;
  _DWORD *v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  _DWORD *v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  _DWORD *v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;

  if (a1)
  {
    check_stack_depth();
    switch(*a1)
    {
      case 9:
        _copyPlan((uint64_t)a1, v2);
        return;
      case 10:
        _copyResult((uint64_t)a1, v2);
        return;
      case 11:
        _copyProjectSet((uint64_t)a1, v2);
        return;
      case 12:
        _copyModifyTable((uint64_t)a1, v2);
        return;
      case 13:
        _copyAppend((uint64_t)a1, v2);
        return;
      case 14:
        _copyMergeAppend((uint64_t)a1, v2);
        return;
      case 15:
        _copyRecursiveUnion((uint64_t)a1, v2);
        return;
      case 16:
        _copyBitmapAnd((uint64_t)a1, v2);
        return;
      case 17:
        _copyBitmapOr((uint64_t)a1, v2);
        return;
      case 18:
        _copyScan((uint64_t)a1, v2);
        return;
      case 19:
        _copySeqScan((uint64_t)a1, v2);
        return;
      case 20:
        _copySampleScan((uint64_t)a1, v2);
        return;
      case 21:
        _copyIndexScan((uint64_t)a1, v2);
        return;
      case 22:
        _copyIndexOnlyScan((uint64_t)a1, v2);
        return;
      case 23:
        _copyBitmapIndexScan((uint64_t)a1, v2);
        return;
      case 24:
        _copyBitmapHeapScan((uint64_t)a1, v2);
        return;
      case 25:
        _copyTidScan((uint64_t)a1, v2);
        return;
      case 26:
        _copySubqueryScan((uint64_t)a1, v2);
        return;
      case 27:
        _copyFunctionScan((uint64_t)a1, v2);
        return;
      case 28:
        _copyValuesScan((uint64_t)a1, v2);
        return;
      case 29:
        _copyTableFuncScan((uint64_t)a1, v2);
        return;
      case 30:
        _copyCteScan((uint64_t)a1, v2);
        return;
      case 31:
        _copyNamedTuplestoreScan((uint64_t)a1, v2);
        return;
      case 32:
        _copyWorkTableScan((uint64_t)a1, v2);
        return;
      case 33:
        _copyForeignScan((uint64_t)a1, v2);
        return;
      case 34:
        _copyCustomScan((uint64_t)a1, v2);
        return;
      case 35:
        _copyJoin((uint64_t)a1, v2);
        return;
      case 36:
        _copyNestLoop((uint64_t)a1, v2);
        return;
      case 37:
        _copyMergeJoin((uint64_t)a1, v2);
        return;
      case 38:
        _copyHashJoin((uint64_t)a1, v2);
        return;
      case 39:
        _copyMaterial((uint64_t)a1, v2);
        return;
      case 40:
        _copySort((uint64_t)a1, v2);
        return;
      case 41:
        _copyIncrementalSort((uint64_t)a1, v2);
        return;
      case 42:
        _copyGroup((uint64_t)a1, v2);
        return;
      case 43:
        _copyAgg((uint64_t)a1, v2);
        return;
      case 44:
        _copyWindowAgg((uint64_t)a1, v2);
        return;
      case 45:
        _copyUnique((uint64_t)a1, v2);
        return;
      case 46:
        _copyGather((uint64_t)a1, v2);
        return;
      case 47:
        _copyGatherMerge((uint64_t)a1, v2);
        return;
      case 48:
        _copyHash((uint64_t)a1, v2);
        return;
      case 49:
        _copySetOp((uint64_t)a1, v2);
        return;
      case 50:
        _copyLockRows((uint64_t)a1, v2);
        return;
      case 51:
        _copyLimit((uint64_t)a1, v2);
        return;
      case 52:
        _copyNestLoopParam((uint64_t)a1, v2);
        return;
      case 53:
        _copyPlanRowMark((uint64_t)a1, v2);
        return;
      case 54:
        _copyPartitionPruneInfo((uint64_t)a1, v2);
        return;
      case 55:
        _copyPartitionedRelPruneInfo((uint64_t)a1, v2);
        return;
      case 56:
        _copyPartitionPruneStepOp((uint64_t)a1, v2);
        return;
      case 57:
        _copyPartitionPruneStepCombine((uint64_t)a1, v2);
        return;
      case 58:
        v3 = (uint64_t *)CurrentMemoryContext(v2);
        v4 = (_DWORD *)MemoryContextAllocZero(*v3, 0xCuLL);
        v5 = 58;
        goto LABEL_223;
      case 102:
        _copyAlias((uint64_t)a1, v2);
        return;
      case 103:
        _copyRangeVar((uint64_t)a1, v2);
        return;
      case 104:
        _copyTableFunc((uint64_t)a1, v2);
        return;
      case 106:
        _copyVar((uint64_t)a1, v2);
        return;
      case 107:
        _copyConst((uint64_t)a1, v2);
        return;
      case 108:
        _copyParam(a1, v2);
        return;
      case 109:
        _copyAggref((uint64_t)a1, v2);
        return;
      case 110:
        _copyGroupingFunc((uint64_t)a1, v2);
        return;
      case 111:
        _copyWindowFunc((uint64_t)a1, v2);
        return;
      case 112:
        _copySubscriptingRef((uint64_t)a1, v2);
        return;
      case 113:
        _copyFuncExpr((uint64_t)a1, v2);
        return;
      case 114:
        _copyNamedArgExpr((uint64_t)a1, v2);
        return;
      case 115:
        _copyOpExpr((uint64_t)a1, v2);
        return;
      case 116:
        _copyDistinctExpr((uint64_t)a1, v2);
        return;
      case 117:
        _copyNullIfExpr((uint64_t)a1, v2);
        return;
      case 118:
        _copyScalarArrayOpExpr((uint64_t)a1, v2);
        return;
      case 119:
        _copyBoolExpr((uint64_t)a1, v2);
        return;
      case 120:
        _copySubLink((uint64_t)a1, v2);
        return;
      case 121:
        _copySubPlan((uint64_t)a1, v2);
        return;
      case 122:
        _copyAlternativeSubPlan((uint64_t)a1, v2);
        return;
      case 123:
        _copyFieldSelect((uint64_t)a1, v2);
        return;
      case 124:
        _copyFieldStore((uint64_t)a1, v2);
        return;
      case 125:
        _copyRelabelType((uint64_t)a1, v2);
        return;
      case 126:
        _copyCoerceViaIO((uint64_t)a1, v2);
        return;
      case 127:
        _copyArrayCoerceExpr((uint64_t)a1, v2);
        return;
      case 128:
        _copyConvertRowtypeExpr((uint64_t)a1, v2);
        return;
      case 129:
        _copyCollateExpr((uint64_t)a1, v2);
        return;
      case 130:
        _copyCaseExpr((uint64_t)a1, v2);
        return;
      case 131:
        _copyCaseWhen((uint64_t)a1, v2);
        return;
      case 132:
        _copyCaseTestExpr(a1, v2);
        return;
      case 133:
        _copyArrayExpr((uint64_t)a1, v2);
        return;
      case 134:
        _copyRowExpr((uint64_t)a1, v2);
        return;
      case 135:
        _copyRowCompareExpr((uint64_t)a1, v2);
        return;
      case 136:
        _copyCoalesceExpr((uint64_t)a1, v2);
        return;
      case 137:
        _copyMinMaxExpr((uint64_t)a1, v2);
        return;
      case 138:
        _copySQLValueFunction(a1, v2);
        return;
      case 139:
        _copyXmlExpr((uint64_t)a1, v2);
        return;
      case 140:
        _copyNullTest((uint64_t)a1, v2);
        return;
      case 141:
        _copyBooleanTest((uint64_t)a1, v2);
        return;
      case 142:
        _copyCoerceToDomain((uint64_t)a1, v2);
        return;
      case 143:
        _copyCoerceToDomainValue(a1, v2);
        return;
      case 144:
        _copySetToDefault(a1, v2);
        return;
      case 145:
        _copyCurrentOfExpr((uint64_t)a1, v2);
        return;
      case 146:
        v6 = (uint64_t *)CurrentMemoryContext(v2);
        v4 = (_DWORD *)MemoryContextAllocZero(*v6, 0xCuLL);
        v5 = 146;
        goto LABEL_223;
      case 147:
        _copyInferenceElem((uint64_t)a1, v2);
        return;
      case 148:
        _copyTargetEntry((uint64_t)a1, v2);
        return;
      case 149:
        v7 = (uint64_t *)CurrentMemoryContext(v2);
        v8 = (_DWORD *)MemoryContextAllocZeroAligned(*v7, 8uLL);
        v9 = 149;
        goto LABEL_149;
      case 150:
        _copyJoinExpr((uint64_t)a1, v2);
        return;
      case 151:
        _copyFromExpr((uint64_t)a1, v2);
        return;
      case 152:
        _copyOnConflictExpr((uint64_t)a1, v2);
        return;
      case 153:
        _copyIntoClause((uint64_t)a1, v2);
        return;
      case 203:
        _copyPathKey((uint64_t)a1, v2);
        return;
      case 205:
        _copyRestrictInfo((uint64_t)a1, v2);
        return;
      case 207:
        _copyPlaceHolderVar((uint64_t)a1, v2);
        return;
      case 208:
        _copySpecialJoinInfo((uint64_t)a1, v2);
        return;
      case 209:
        _copyAppendRelInfo((uint64_t)a1, v2);
        return;
      case 210:
        _copyPlaceHolderInfo((uint64_t)a1, v2);
        return;
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
        _copyValue(a1, v2);
        return;
      case 226:
        list_copy_deep(a1);
        return;
      case 227:
      case 228:
        list_copy((const void **)a1);
        return;
      case 229:
        _copyExtensibleNode((uint64_t)a1);
        return;
      case 230:
        _copyRawStmt((uint64_t)a1, v2);
        return;
      case 231:
        _copyQuery((uint64_t)a1, v2);
        return;
      case 232:
        _copyPlannedStmt((uint64_t)a1, v2);
        return;
      case 233:
        _copyInsertStmt((uint64_t)a1, v2);
        return;
      case 234:
        _copyDeleteStmt(a1, v2);
        return;
      case 235:
        _copyUpdateStmt(a1, v2);
        return;
      case 236:
        _copySelectStmt((uint64_t)a1, v2);
        return;
      case 237:
        _copyAlterTableStmt((uint64_t)a1, v2);
        return;
      case 238:
        _copyAlterTableCmd((uint64_t)a1, v2);
        return;
      case 239:
        _copyAlterDomainStmt((uint64_t)a1, v2);
        return;
      case 240:
        _copySetOperationStmt((uint64_t)a1, v2);
        return;
      case 241:
        _copyGrantStmt((uint64_t)a1, v2);
        return;
      case 242:
        _copyGrantRoleStmt((uint64_t)a1, v2);
        return;
      case 243:
        _copyAlterDefaultPrivilegesStmt((uint64_t)a1, v2);
        return;
      case 244:
        _copyClosePortalStmt((uint64_t)a1, v2);
        return;
      case 245:
        _copyClusterStmt((uint64_t)a1, v2);
        return;
      case 246:
        _copyCopyStmt((uint64_t)a1, v2);
        return;
      case 247:
        _copyCreateStmt((uint64_t)a1, v2);
        return;
      case 248:
        _copyDefineStmt((uint64_t)a1, v2);
        return;
      case 249:
        _copyDropStmt((uint64_t)a1, v2);
        return;
      case 250:
        _copyTruncateStmt((uint64_t)a1, v2);
        return;
      case 251:
        _copyCommentStmt((uint64_t)a1, v2);
        return;
      case 252:
        _copyFetchStmt((uint64_t)a1, v2);
        return;
      case 253:
        _copyIndexStmt((uint64_t)a1, v2);
        return;
      case 254:
        _copyCreateFunctionStmt((uint64_t)a1, v2);
        return;
      case 255:
        _copyAlterFunctionStmt((uint64_t)a1, v2);
        return;
      case 256:
        _copyDoStmt((uint64_t)a1, v2);
        return;
      case 257:
        _copyRenameStmt((uint64_t)a1, v2);
        return;
      case 258:
        _copyRuleStmt((uint64_t)a1, v2);
        return;
      case 259:
        _copyNotifyStmt((uint64_t)a1, v2);
        return;
      case 260:
        _copyListenStmt((uint64_t)a1, v2);
        return;
      case 261:
        _copyUnlistenStmt((uint64_t)a1, v2);
        return;
      case 262:
        _copyTransactionStmt((uint64_t)a1, v2);
        return;
      case 263:
        _copyViewStmt((uint64_t)a1, v2);
        return;
      case 264:
        _copyLoadStmt((uint64_t)a1, v2);
        return;
      case 265:
        _copyCreateDomainStmt(a1, v2);
        return;
      case 266:
        _copyCreatedbStmt((uint64_t)a1, v2);
        return;
      case 267:
        _copyDropdbStmt((uint64_t)a1, v2);
        return;
      case 268:
        _copyVacuumStmt((uint64_t)a1, v2);
        return;
      case 269:
        _copyExplainStmt((uint64_t)a1, v2);
        return;
      case 270:
        _copyCreateTableAsStmt((uint64_t)a1, v2);
        return;
      case 271:
        _copyCreateSeqStmt((uint64_t)a1, v2);
        return;
      case 272:
        _copyAlterSeqStmt((uint64_t)a1, v2);
        return;
      case 273:
        _copyVariableSetStmt((uint64_t)a1, v2);
        return;
      case 274:
        _copyVariableShowStmt((uint64_t)a1, v2);
        return;
      case 275:
        v10 = (uint64_t *)CurrentMemoryContext(v2);
        v8 = (_DWORD *)MemoryContextAllocZeroAligned(*v10, 8uLL);
        v9 = 275;
LABEL_149:
        *v8 = v9;
        v8[1] = a1[1];
        return;
      case 276:
        _copyCreateTrigStmt((uint64_t)a1, v2);
        return;
      case 277:
        _copyCreatePLangStmt((uint64_t)a1, v2);
        return;
      case 278:
        _copyCreateRoleStmt((uint64_t)a1, v2);
        return;
      case 279:
        _copyAlterRoleStmt((uint64_t)a1, v2);
        return;
      case 280:
        _copyDropRoleStmt((uint64_t)a1, v2);
        return;
      case 281:
        _copyLockStmt((uint64_t)a1, v2);
        return;
      case 282:
        _copyConstraintsSetStmt((uint64_t)a1, v2);
        return;
      case 283:
        _copyReindexStmt((uint64_t)a1, v2);
        return;
      case 284:
        v11 = (uint64_t *)CurrentMemoryContext(v2);
        v12 = (_DWORD *)MemoryContextAllocZero(*v11, 4uLL);
        v13 = 284;
        goto LABEL_227;
      case 285:
        _copyCreateSchemaStmt((uint64_t)a1, v2);
        return;
      case 286:
        _copyAlterDatabaseStmt((uint64_t)a1, v2);
        return;
      case 287:
        _copyAlterDatabaseSetStmt((uint64_t)a1, v2);
        return;
      case 288:
        _copyAlterRoleSetStmt(a1, v2);
        return;
      case 289:
        _copyCreateConversionStmt((uint64_t)a1, v2);
        return;
      case 290:
        _copyCreateCastStmt((uint64_t)a1, v2);
        return;
      case 291:
        _copyCreateOpClassStmt((uint64_t)a1, v2);
        return;
      case 292:
        _copyCreateOpFamilyStmt((uint64_t)a1, v2);
        return;
      case 293:
        _copyAlterOpFamilyStmt((uint64_t)a1, v2);
        return;
      case 294:
        _copyPrepareStmt(a1, v2);
        return;
      case 295:
        _copyExecuteStmt((uint64_t)a1, v2);
        return;
      case 296:
        _copyDeallocateStmt((uint64_t)a1, v2);
        return;
      case 297:
        _copyDeclareCursorStmt((uint64_t)a1, v2);
        return;
      case 298:
        _copyCreateTableSpaceStmt(a1, v2);
        return;
      case 299:
        _copyDropTableSpaceStmt((uint64_t)a1, v2);
        return;
      case 300:
        _copyAlterObjectDependsStmt((uint64_t)a1, v2);
        return;
      case 301:
        _copyAlterObjectSchemaStmt((uint64_t)a1, v2);
        return;
      case 302:
        _copyAlterOwnerStmt((uint64_t)a1, v2);
        return;
      case 303:
        _copyAlterOperatorStmt((uint64_t)a1, v2);
        return;
      case 304:
        _copyAlterTypeStmt((uint64_t)a1, v2);
        return;
      case 305:
        _copyDropOwnedStmt((uint64_t)a1, v2);
        return;
      case 306:
        _copyReassignOwnedStmt((uint64_t)a1, v2);
        return;
      case 307:
        _copyCompositeTypeStmt((uint64_t)a1, v2);
        return;
      case 308:
        _copyCreateEnumStmt((uint64_t)a1, v2);
        return;
      case 309:
        _copyCreateRangeStmt((uint64_t)a1, v2);
        return;
      case 310:
        _copyAlterEnumStmt((uint64_t)a1, v2);
        return;
      case 311:
        _copyAlterTSDictionaryStmt((uint64_t)a1, v2);
        return;
      case 312:
        _copyAlterTSConfigurationStmt((uint64_t)a1, v2);
        return;
      case 313:
        _copyCreateFdwStmt(a1, v2);
        return;
      case 314:
        _copyAlterFdwStmt(a1, v2);
        return;
      case 315:
        _copyCreateForeignServerStmt((uint64_t)a1, v2);
        return;
      case 316:
        _copyAlterForeignServerStmt((uint64_t)a1, v2);
        return;
      case 317:
        _copyCreateUserMappingStmt((uint64_t)a1, v2);
        return;
      case 318:
        _copyAlterUserMappingStmt(a1, v2);
        return;
      case 319:
        _copyDropUserMappingStmt((uint64_t)a1, v2);
        return;
      case 320:
        _copyAlterTableSpaceOptionsStmt((uint64_t)a1, v2);
        return;
      case 321:
        _copyAlterTableMoveAllStmt((uint64_t)a1, v2);
        return;
      case 322:
        _copySecLabelStmt((uint64_t)a1, v2);
        return;
      case 323:
        _copyCreateForeignTableStmt((uint64_t)a1, v2);
        return;
      case 324:
        _copyImportForeignSchemaStmt((uint64_t)a1, v2);
        return;
      case 325:
        _copyCreateExtensionStmt((uint64_t)a1, v2);
        return;
      case 326:
        _copyAlterExtensionStmt((uint64_t)a1, v2);
        return;
      case 327:
        _copyAlterExtensionContentsStmt((uint64_t)a1, v2);
        return;
      case 328:
        _copyCreateEventTrigStmt(a1, v2);
        return;
      case 329:
        _copyAlterEventTrigStmt((uint64_t)a1, v2);
        return;
      case 330:
        _copyRefreshMatViewStmt((uint64_t)a1, v2);
        return;
      case 331:
        _copyReplicaIdentityStmt((uint64_t)a1, v2);
        return;
      case 332:
        _copyAlterSystemStmt((uint64_t)a1, v2);
        return;
      case 333:
        _copyCreatePolicyStmt((uint64_t)a1, v2);
        return;
      case 334:
        _copyAlterPolicyStmt(a1, v2);
        return;
      case 335:
        _copyCreateTransformStmt((uint64_t)a1, v2);
        return;
      case 336:
        _copyCreateAmStmt((uint64_t)a1, v2);
        return;
      case 337:
        _copyCreatePublicationStmt((uint64_t)a1, v2);
        return;
      case 338:
        _copyAlterPublicationStmt((uint64_t)a1, v2);
        return;
      case 339:
        _copyCreateSubscriptionStmt(a1, v2);
        return;
      case 340:
        _copyAlterSubscriptionStmt((uint64_t)a1, v2);
        return;
      case 341:
        _copyDropSubscriptionStmt((uint64_t)a1, v2);
        return;
      case 342:
        _copyCreateStatsStmt((uint64_t)a1, v2);
        return;
      case 343:
        _copyAlterCollationStmt((uint64_t)a1, v2);
        return;
      case 344:
        _copyCallStmt((uint64_t)a1, v2);
        return;
      case 345:
        _copyAlterStatsStmt((uint64_t)a1, v2);
        return;
      case 346:
        _copyAExpr((uint64_t)a1, v2);
        return;
      case 347:
        _copyColumnRef((uint64_t)a1, v2);
        return;
      case 348:
        v14 = (uint64_t *)CurrentMemoryContext(v2);
        v4 = (_DWORD *)MemoryContextAllocZero(*v14, 0xCuLL);
        v5 = 348;
LABEL_223:
        *v4 = v5;
        v4[1] = a1[1];
        v4[2] = a1[2];
        return;
      case 349:
        _copyAConst((uint64_t)a1, v2);
        return;
      case 350:
        _copyFuncCall((uint64_t)a1, v2);
        return;
      case 351:
        v15 = (uint64_t *)CurrentMemoryContext(v2);
        v12 = (_DWORD *)MemoryContextAllocZero(*v15, 4uLL);
        v13 = 351;
LABEL_227:
        *v12 = v13;
        break;
      case 352:
        _copyAIndices((uint64_t)a1, v2);
        break;
      case 353:
        _copyA_Indirection((uint64_t)a1, v2);
        break;
      case 354:
        _copyA_ArrayExpr((uint64_t)a1, v2);
        break;
      case 355:
        _copyResTarget((uint64_t)a1, v2);
        break;
      case 356:
        _copyMultiAssignRef((uint64_t)a1, v2);
        break;
      case 357:
        _copyTypeCast((uint64_t)a1, v2);
        break;
      case 358:
        _copyCollateClause((uint64_t)a1, v2);
        break;
      case 359:
        _copySortBy((uint64_t)a1, v2);
        break;
      case 360:
        _copyWindowDef((uint64_t)a1, v2);
        break;
      case 361:
        _copyRangeSubselect((uint64_t)a1, v2);
        break;
      case 362:
        _copyRangeFunction((uint64_t)a1, v2);
        break;
      case 363:
        _copyRangeTableSample((uint64_t)a1, v2);
        break;
      case 364:
        _copyRangeTableFunc((uint64_t)a1, v2);
        break;
      case 365:
        _copyRangeTableFuncCol((uint64_t)a1, v2);
        break;
      case 366:
        _copyTypeName((uint64_t)a1, v2);
        break;
      case 367:
        _copyColumnDef((uint64_t)a1, v2);
        break;
      case 368:
        _copyIndexElem((uint64_t)a1, v2);
        break;
      case 369:
        _copyConstraint((uint64_t)a1, v2);
        break;
      case 370:
        _copyDefElem((uint64_t)a1, v2);
        break;
      case 371:
        _copyRangeTblEntry((uint64_t)a1, v2);
        break;
      case 372:
        _copyRangeTblFunction((uint64_t)a1, v2);
        break;
      case 373:
        _copyTableSampleClause((uint64_t)a1, v2);
        break;
      case 374:
        _copyWithCheckOption((uint64_t)a1, v2);
        break;
      case 375:
        _copySortGroupClause((uint64_t)a1, v2);
        break;
      case 376:
        _copyGroupingSet((uint64_t)a1, v2);
        break;
      case 377:
        _copyWindowClause((uint64_t)a1, v2);
        break;
      case 378:
        _copyObjectWithArgs((uint64_t)a1, v2);
        break;
      case 379:
        _copyAccessPriv((uint64_t)a1, v2);
        break;
      case 380:
        _copyCreateOpClassItem((uint64_t)a1, v2);
        break;
      case 381:
        _copyTableLikeClause((uint64_t)a1, v2);
        break;
      case 382:
        _copyFunctionParameter((uint64_t)a1, v2);
        break;
      case 383:
        _copyLockingClause((uint64_t)a1, v2);
        break;
      case 384:
        _copyRowMarkClause((uint64_t)a1, v2);
        break;
      case 385:
        _copyXmlSerialize((uint64_t)a1, v2);
        break;
      case 386:
        _copyWithClause((uint64_t)a1, v2);
        break;
      case 387:
        _copyInferClause((uint64_t)a1, v2);
        break;
      case 388:
        _copyOnConflictClause((uint64_t)a1, v2);
        break;
      case 389:
        _copyCommonTableExpr((uint64_t)a1, v2);
        break;
      case 390:
        _copyRoleSpec((uint64_t)a1, v2);
        break;
      case 391:
        _copyTriggerTransition((uint64_t)a1, v2);
        break;
      case 392:
        _copyPartitionElem((uint64_t)a1, v2);
        break;
      case 393:
        _copyPartitionSpec((uint64_t)a1, v2);
        break;
      case 394:
        _copyPartitionBoundSpec((uint64_t)a1, v2);
        break;
      case 395:
        _copyPartitionRangeDatum((uint64_t)a1, v2);
        break;
      case 396:
        _copyPartitionCmd((uint64_t)a1, v2);
        break;
      case 397:
        _copyVacuumRelation((uint64_t)a1, v2);
        break;
      case 415:
        _copyForeignKeyCacheInfo((uint64_t)a1, v2);
        break;
      default:
        copyObjectImpl_cold_1();
    }
  }
}

unint64_t _copyPlannedStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x88uLL);
  *(_DWORD *)v4 = 232;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(v4 + 17) = *(_BYTE *)(a1 + 17);
  *(_BYTE *)(v4 + 18) = *(_BYTE *)(a1 + 18);
  *(_BYTE *)(v4 + 19) = *(_BYTE *)(a1 + 19);
  *(_BYTE *)(v4 + 20) = *(_BYTE *)(a1 + 20);
  *(_BYTE *)(v4 + 21) = *(_BYTE *)(a1 + 21);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = bms_copy(*(int **)(a1 + 80));
  *(_QWORD *)(v4 + 88) = copyObjectImpl(*(_QWORD *)(a1 + 88));
  *(_QWORD *)(v4 + 96) = copyObjectImpl(*(_QWORD *)(a1 + 96));
  *(_QWORD *)(v4 + 104) = copyObjectImpl(*(_QWORD *)(a1 + 104));
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  *(_QWORD *)(v4 + 120) = copyObjectImpl(*(_QWORD *)(a1 + 120));
  *(_DWORD *)(v4 + 128) = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(v4 + 132) = *(_DWORD *)(a1 + 132);
  return v4;
}

unint64_t _copyPlan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x68uLL);
  *(_DWORD *)v4 = 9;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  return v4;
}

unint64_t _copyResult(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x70uLL);
  *(_DWORD *)v4 = 10;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_QWORD *)(v4 + 104) = copyObjectImpl(*(_QWORD *)(a1 + 104));
  return v4;
}

unint64_t _copyProjectSet(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x68uLL);
  *(_DWORD *)v4 = 11;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  return v4;
}

unint64_t _copyModifyTable(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0xF0uLL);
  *(_DWORD *)v4 = 12;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_BYTE *)(v4 + 108) = *(_BYTE *)(a1 + 108);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(v4 + 116) = *(_DWORD *)(a1 + 116);
  *(_BYTE *)(v4 + 120) = *(_BYTE *)(a1 + 120);
  *(_QWORD *)(v4 + 128) = copyObjectImpl(*(_QWORD *)(a1 + 128));
  *(_DWORD *)(v4 + 136) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
  *(_QWORD *)(v4 + 144) = copyObjectImpl(*(_QWORD *)(a1 + 144));
  *(_QWORD *)(v4 + 152) = copyObjectImpl(*(_QWORD *)(a1 + 152));
  *(_QWORD *)(v4 + 160) = copyObjectImpl(*(_QWORD *)(a1 + 160));
  *(_QWORD *)(v4 + 168) = copyObjectImpl(*(_QWORD *)(a1 + 168));
  *(_QWORD *)(v4 + 176) = bms_copy(*(int **)(a1 + 176));
  *(_QWORD *)(v4 + 184) = copyObjectImpl(*(_QWORD *)(a1 + 184));
  *(_DWORD *)(v4 + 192) = *(_DWORD *)(a1 + 192);
  *(_DWORD *)(v4 + 196) = *(_DWORD *)(a1 + 196);
  *(_QWORD *)(v4 + 200) = copyObjectImpl(*(_QWORD *)(a1 + 200));
  *(_QWORD *)(v4 + 208) = copyObjectImpl(*(_QWORD *)(a1 + 208));
  *(_QWORD *)(v4 + 216) = copyObjectImpl(*(_QWORD *)(a1 + 216));
  *(_DWORD *)(v4 + 224) = *(_DWORD *)(a1 + 224);
  *(_QWORD *)(v4 + 232) = copyObjectImpl(*(_QWORD *)(a1 + 232));
  return v4;
}

unint64_t _copyAppend(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x88uLL);
  *(_DWORD *)v4 = 13;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_QWORD *)(v4 + 104) = bms_copy(*(int **)(a1 + 104));
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  *(_DWORD *)(v4 + 120) = *(_DWORD *)(a1 + 120);
  *(_QWORD *)(v4 + 128) = copyObjectImpl(*(_QWORD *)(a1 + 128));
  return v4;
}

unint64_t _copyMergeAppend(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  void *v12;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0xA8uLL);
  *(_DWORD *)v4 = 14;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_QWORD *)(v4 + 104) = bms_copy(*(int **)(a1 + 104));
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  *(_DWORD *)(v4 + 120) = *(_DWORD *)(a1 + 120);
  v5 = 2 * *(int *)(a1 + 120);
  v6 = (void *)palloc(v5);
  *(_QWORD *)(v4 + 128) = v6;
  memcpy(v6, *(const void **)(a1 + 128), v5);
  v7 = 4 * *(int *)(a1 + 120);
  v8 = (void *)palloc(v7);
  *(_QWORD *)(v4 + 136) = v8;
  memcpy(v8, *(const void **)(a1 + 136), v7);
  v9 = 4 * *(int *)(a1 + 120);
  v10 = (void *)palloc(v9);
  *(_QWORD *)(v4 + 144) = v10;
  memcpy(v10, *(const void **)(a1 + 144), v9);
  v11 = *(int *)(a1 + 120);
  v12 = (void *)palloc(v11);
  *(_QWORD *)(v4 + 152) = v12;
  memcpy(v12, *(const void **)(a1 + 152), v11);
  *(_QWORD *)(v4 + 160) = copyObjectImpl(*(_QWORD *)(a1 + 160));
  return v4;
}

unint64_t _copyRecursiveUnion(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x90uLL);
  *(_DWORD *)v4 = 15;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 108) = *(_DWORD *)(a1 + 108);
  v5 = *(unsigned int *)(a1 + 108);
  if ((int)v5 >= 1)
  {
    v6 = 2 * v5;
    v7 = (void *)palloc(2 * v5);
    *(_QWORD *)(v4 + 112) = v7;
    memcpy(v7, *(const void **)(a1 + 112), v6);
    v8 = 4 * *(int *)(a1 + 108);
    v9 = (void *)palloc(v8);
    *(_QWORD *)(v4 + 120) = v9;
    memcpy(v9, *(const void **)(a1 + 120), v8);
    v10 = 4 * *(int *)(a1 + 108);
    v11 = (void *)palloc(v10);
    *(_QWORD *)(v4 + 128) = v11;
    memcpy(v11, *(const void **)(a1 + 128), v10);
  }
  *(_QWORD *)(v4 + 136) = *(_QWORD *)(a1 + 136);
  return v4;
}

unint64_t _copyBitmapAnd(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x70uLL);
  *(_DWORD *)v4 = 16;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_QWORD *)(v4 + 104) = copyObjectImpl(*(_QWORD *)(a1 + 104));
  return v4;
}

unint64_t _copyBitmapOr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)v4 = 17;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_BYTE *)(v4 + 104) = *(_BYTE *)(a1 + 104);
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  return v4;
}

unint64_t _copyScan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x70uLL);
  *(_DWORD *)v4 = 18;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  return v4;
}

unint64_t _copyGather(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x80uLL);
  *(_DWORD *)v4 = 46;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 108) = *(_DWORD *)(a1 + 108);
  *(_BYTE *)(v4 + 112) = *(_BYTE *)(a1 + 112);
  *(_BYTE *)(v4 + 113) = *(_BYTE *)(a1 + 113);
  *(_QWORD *)(v4 + 120) = bms_copy(*(int **)(a1 + 120));
  return v4;
}

unint64_t _copyGatherMerge(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  void *v12;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0xA0uLL);
  *(_DWORD *)v4 = 47;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 108) = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  v5 = 2 * *(int *)(a1 + 112);
  v6 = (void *)palloc(v5);
  *(_QWORD *)(v4 + 120) = v6;
  memcpy(v6, *(const void **)(a1 + 120), v5);
  v7 = 4 * *(int *)(a1 + 112);
  v8 = (void *)palloc(v7);
  *(_QWORD *)(v4 + 128) = v8;
  memcpy(v8, *(const void **)(a1 + 128), v7);
  v9 = 4 * *(int *)(a1 + 112);
  v10 = (void *)palloc(v9);
  *(_QWORD *)(v4 + 136) = v10;
  memcpy(v10, *(const void **)(a1 + 136), v9);
  v11 = *(int *)(a1 + 112);
  v12 = (void *)palloc(v11);
  *(_QWORD *)(v4 + 144) = v12;
  memcpy(v12, *(const void **)(a1 + 144), v11);
  *(_QWORD *)(v4 + 152) = bms_copy(*(int **)(a1 + 152));
  return v4;
}

unint64_t _copySeqScan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x70uLL);
  *(_DWORD *)v4 = 19;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  return v4;
}

unint64_t _copySampleScan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)v4 = 20;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  return v4;
}

unint64_t _copyIndexScan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0xA8uLL);
  *(_DWORD *)v4 = 21;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 120) = copyObjectImpl(*(_QWORD *)(a1 + 120));
  *(_QWORD *)(v4 + 128) = copyObjectImpl(*(_QWORD *)(a1 + 128));
  *(_QWORD *)(v4 + 136) = copyObjectImpl(*(_QWORD *)(a1 + 136));
  *(_QWORD *)(v4 + 144) = copyObjectImpl(*(_QWORD *)(a1 + 144));
  *(_QWORD *)(v4 + 152) = copyObjectImpl(*(_QWORD *)(a1 + 152));
  *(_DWORD *)(v4 + 160) = *(_DWORD *)(a1 + 160);
  return v4;
}

unint64_t _copyIndexOnlyScan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x98uLL);
  *(_DWORD *)v4 = 22;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 120) = copyObjectImpl(*(_QWORD *)(a1 + 120));
  *(_QWORD *)(v4 + 128) = copyObjectImpl(*(_QWORD *)(a1 + 128));
  *(_QWORD *)(v4 + 136) = copyObjectImpl(*(_QWORD *)(a1 + 136));
  *(_DWORD *)(v4 + 144) = *(_DWORD *)(a1 + 144);
  return v4;
}

unint64_t _copyBitmapIndexScan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x88uLL);
  *(_DWORD *)v4 = 23;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  *(_BYTE *)(v4 + 116) = *(_BYTE *)(a1 + 116);
  *(_QWORD *)(v4 + 120) = copyObjectImpl(*(_QWORD *)(a1 + 120));
  *(_QWORD *)(v4 + 128) = copyObjectImpl(*(_QWORD *)(a1 + 128));
  return v4;
}

unint64_t _copyBitmapHeapScan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)v4 = 24;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  return v4;
}

unint64_t _copyTidScan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)v4 = 25;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  return v4;
}

unint64_t _copySubqueryScan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)v4 = 26;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  return v4;
}

unint64_t _copyFunctionScan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x80uLL);
  *(_DWORD *)v4 = 27;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  *(_BYTE *)(v4 + 120) = *(_BYTE *)(a1 + 120);
  return v4;
}

unint64_t _copyTableFuncScan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)v4 = 29;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  return v4;
}

unint64_t _copyValuesScan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)v4 = 28;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  return v4;
}

unint64_t _copyCteScan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)v4 = 30;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(v4 + 116) = *(_DWORD *)(a1 + 116);
  return v4;
}

unint64_t _copyNamedTuplestoreScan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)v4 = 31;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  v5 = *(const char **)(a1 + 112);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 112) = v5;
  return v4;
}

unint64_t _copyWorkTableScan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)v4 = 32;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  return v4;
}

unint64_t _copyForeignScan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0xA8uLL);
  *(_DWORD *)v4 = 33;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(v4 + 116) = *(_DWORD *)(a1 + 116);
  *(_QWORD *)(v4 + 120) = copyObjectImpl(*(_QWORD *)(a1 + 120));
  *(_QWORD *)(v4 + 128) = copyObjectImpl(*(_QWORD *)(a1 + 128));
  *(_QWORD *)(v4 + 136) = copyObjectImpl(*(_QWORD *)(a1 + 136));
  *(_QWORD *)(v4 + 144) = copyObjectImpl(*(_QWORD *)(a1 + 144));
  *(_QWORD *)(v4 + 152) = bms_copy(*(int **)(a1 + 152));
  *(_BYTE *)(v4 + 160) = *(_BYTE *)(a1 + 160);
  return v4;
}

unint64_t _copyCustomScan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0xA8uLL);
  *(_DWORD *)v4 = 34;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 120) = copyObjectImpl(*(_QWORD *)(a1 + 120));
  *(_QWORD *)(v4 + 128) = copyObjectImpl(*(_QWORD *)(a1 + 128));
  *(_QWORD *)(v4 + 136) = copyObjectImpl(*(_QWORD *)(a1 + 136));
  *(_QWORD *)(v4 + 144) = copyObjectImpl(*(_QWORD *)(a1 + 144));
  *(_QWORD *)(v4 + 152) = bms_copy(*(int **)(a1 + 152));
  *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
  return v4;
}

unint64_t _copyJoin(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)v4 = 35;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_BYTE *)(v4 + 108) = *(_BYTE *)(a1 + 108);
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  return v4;
}

unint64_t _copyNestLoop(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x80uLL);
  *(_DWORD *)v4 = 36;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_BYTE *)(v4 + 108) = *(_BYTE *)(a1 + 108);
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  *(_QWORD *)(v4 + 120) = copyObjectImpl(*(_QWORD *)(a1 + 120));
  return v4;
}

unint64_t _copyMergeJoin(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0xA8uLL);
  *(_DWORD *)v4 = 37;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_BYTE *)(v4 + 108) = *(_BYTE *)(a1 + 108);
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  *(_BYTE *)(v4 + 120) = *(_BYTE *)(a1 + 120);
  *(_QWORD *)(v4 + 128) = copyObjectImpl(*(_QWORD *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 128);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 + 4);
    if ((int)v6 >= 1)
    {
      v7 = (void *)palloc(4 * v6);
      *(_QWORD *)(v4 + 136) = v7;
      memcpy(v7, *(const void **)(a1 + 136), 4 * v6);
      v8 = (void *)palloc(4 * v6);
      *(_QWORD *)(v4 + 144) = v8;
      memcpy(v8, *(const void **)(a1 + 144), 4 * v6);
      v9 = (void *)palloc(4 * v6);
      *(_QWORD *)(v4 + 152) = v9;
      memcpy(v9, *(const void **)(a1 + 152), 4 * v6);
      v10 = (void *)palloc(v6);
      *(_QWORD *)(v4 + 160) = v10;
      memcpy(v10, *(const void **)(a1 + 160), v6);
    }
  }
  return v4;
}

unint64_t _copyHashJoin(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x98uLL);
  *(_DWORD *)v4 = 38;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_BYTE *)(v4 + 108) = *(_BYTE *)(a1 + 108);
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  *(_QWORD *)(v4 + 120) = copyObjectImpl(*(_QWORD *)(a1 + 120));
  *(_QWORD *)(v4 + 128) = copyObjectImpl(*(_QWORD *)(a1 + 128));
  *(_QWORD *)(v4 + 136) = copyObjectImpl(*(_QWORD *)(a1 + 136));
  *(_QWORD *)(v4 + 144) = copyObjectImpl(*(_QWORD *)(a1 + 144));
  return v4;
}

unint64_t _copyMaterial(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x68uLL);
  *(_DWORD *)v4 = 39;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  return v4;
}

_DWORD *_copySort(uint64_t a1, double a2)
{
  uint64_t *v3;
  _DWORD *v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = (_DWORD *)MemoryContextAllocZeroAligned(*v3, 0x90uLL);
  *v4 = 40;
  CopySortFields(a1, (uint64_t)v4);
  return v4;
}

_DWORD *_copyIncrementalSort(uint64_t a1, double a2)
{
  uint64_t *v3;
  _DWORD *v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = (_DWORD *)MemoryContextAllocZeroAligned(*v3, 0x98uLL);
  *v4 = 41;
  CopySortFields(a1, (uint64_t)v4);
  v4[36] = *(_DWORD *)(a1 + 144);
  return v4;
}

unint64_t _copyGroup(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x88uLL);
  *(_DWORD *)v4 = 42;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  v5 = 2 * *(int *)(a1 + 104);
  v6 = (void *)palloc(v5);
  *(_QWORD *)(v4 + 112) = v6;
  memcpy(v6, *(const void **)(a1 + 112), v5);
  v7 = 4 * *(int *)(a1 + 104);
  v8 = (void *)palloc(v7);
  *(_QWORD *)(v4 + 120) = v8;
  memcpy(v8, *(const void **)(a1 + 120), v7);
  v9 = 4 * *(int *)(a1 + 104);
  v10 = (void *)palloc(v9);
  *(_QWORD *)(v4 + 128) = v10;
  memcpy(v10, *(const void **)(a1 + 128), v9);
  return v4;
}

unint64_t _copyAgg(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0xB8uLL);
  *(_DWORD *)v4 = 43;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 108) = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  v5 = *(unsigned int *)(a1 + 112);
  if ((int)v5 >= 1)
  {
    v6 = 2 * v5;
    v7 = (void *)palloc(2 * v5);
    *(_QWORD *)(v4 + 120) = v7;
    memcpy(v7, *(const void **)(a1 + 120), v6);
    v8 = 4 * *(int *)(a1 + 112);
    v9 = (void *)palloc(v8);
    *(_QWORD *)(v4 + 128) = v9;
    memcpy(v9, *(const void **)(a1 + 128), v8);
    v10 = 4 * *(int *)(a1 + 112);
    v11 = (void *)palloc(v10);
    *(_QWORD *)(v4 + 136) = v11;
    memcpy(v11, *(const void **)(a1 + 136), v10);
  }
  *(_QWORD *)(v4 + 144) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(v4 + 152) = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(v4 + 160) = bms_copy(*(int **)(a1 + 160));
  *(_QWORD *)(v4 + 168) = copyObjectImpl(*(_QWORD *)(a1 + 168));
  *(_QWORD *)(v4 + 176) = copyObjectImpl(*(_QWORD *)(a1 + 176));
  return v4;
}

unint64_t _copyWindowAgg(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  void *v18;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0xD0uLL);
  *(_DWORD *)v4 = 44;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 108) = *(_DWORD *)(a1 + 108);
  v5 = *(unsigned int *)(a1 + 108);
  if ((int)v5 >= 1)
  {
    v6 = 2 * v5;
    v7 = (void *)palloc(2 * v5);
    *(_QWORD *)(v4 + 112) = v7;
    memcpy(v7, *(const void **)(a1 + 112), v6);
    v8 = 4 * *(int *)(a1 + 108);
    v9 = (void *)palloc(v8);
    *(_QWORD *)(v4 + 120) = v9;
    memcpy(v9, *(const void **)(a1 + 120), v8);
    v10 = 4 * *(int *)(a1 + 108);
    v11 = (void *)palloc(v10);
    *(_QWORD *)(v4 + 128) = v11;
    memcpy(v11, *(const void **)(a1 + 128), v10);
  }
  *(_DWORD *)(v4 + 136) = *(_DWORD *)(a1 + 136);
  v12 = *(unsigned int *)(a1 + 136);
  if ((int)v12 >= 1)
  {
    v13 = 2 * v12;
    v14 = (void *)palloc(2 * v12);
    *(_QWORD *)(v4 + 144) = v14;
    memcpy(v14, *(const void **)(a1 + 144), v13);
    v15 = 4 * *(int *)(a1 + 136);
    v16 = (void *)palloc(v15);
    *(_QWORD *)(v4 + 152) = v16;
    memcpy(v16, *(const void **)(a1 + 152), v15);
    v17 = 4 * *(int *)(a1 + 136);
    v18 = (void *)palloc(v17);
    *(_QWORD *)(v4 + 160) = v18;
    memcpy(v18, *(const void **)(a1 + 160), v17);
  }
  *(_DWORD *)(v4 + 168) = *(_DWORD *)(a1 + 168);
  *(_QWORD *)(v4 + 176) = copyObjectImpl(*(_QWORD *)(a1 + 176));
  *(_QWORD *)(v4 + 184) = copyObjectImpl(*(_QWORD *)(a1 + 184));
  *(_DWORD *)(v4 + 192) = *(_DWORD *)(a1 + 192);
  *(_DWORD *)(v4 + 196) = *(_DWORD *)(a1 + 196);
  *(_DWORD *)(v4 + 200) = *(_DWORD *)(a1 + 200);
  *(_BYTE *)(v4 + 204) = *(_BYTE *)(a1 + 204);
  *(_BYTE *)(v4 + 205) = *(_BYTE *)(a1 + 205);
  return v4;
}

unint64_t _copyUnique(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x88uLL);
  *(_DWORD *)v4 = 45;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  v5 = 2 * *(int *)(a1 + 104);
  v6 = (void *)palloc(v5);
  *(_QWORD *)(v4 + 112) = v6;
  memcpy(v6, *(const void **)(a1 + 112), v5);
  v7 = 4 * *(int *)(a1 + 104);
  v8 = (void *)palloc(v7);
  *(_QWORD *)(v4 + 120) = v8;
  memcpy(v8, *(const void **)(a1 + 120), v7);
  v9 = 4 * *(int *)(a1 + 104);
  v10 = (void *)palloc(v9);
  *(_QWORD *)(v4 + 128) = v10;
  memcpy(v10, *(const void **)(a1 + 128), v9);
  return v4;
}

unint64_t _copyHash(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x80uLL);
  *(_DWORD *)v4 = 48;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_QWORD *)(v4 + 104) = copyObjectImpl(*(_QWORD *)(a1 + 104));
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  *(_WORD *)(v4 + 116) = *(_WORD *)(a1 + 116);
  *(_BYTE *)(v4 + 118) = *(_BYTE *)(a1 + 118);
  *(_QWORD *)(v4 + 120) = *(_QWORD *)(a1 + 120);
  return v4;
}

unint64_t _copySetOp(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0xA0uLL);
  *(_DWORD *)v4 = 49;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 108) = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  v5 = 2 * *(int *)(a1 + 112);
  v6 = (void *)palloc(v5);
  *(_QWORD *)(v4 + 120) = v6;
  memcpy(v6, *(const void **)(a1 + 120), v5);
  v7 = 4 * *(int *)(a1 + 112);
  v8 = (void *)palloc(v7);
  *(_QWORD *)(v4 + 128) = v8;
  memcpy(v8, *(const void **)(a1 + 128), v7);
  v9 = 4 * *(int *)(a1 + 112);
  v10 = (void *)palloc(v9);
  *(_QWORD *)(v4 + 136) = v10;
  memcpy(v10, *(const void **)(a1 + 136), v9);
  *(_WORD *)(v4 + 144) = *(_WORD *)(a1 + 144);
  *(_DWORD *)(v4 + 148) = *(_DWORD *)(a1 + 148);
  *(_QWORD *)(v4 + 152) = *(_QWORD *)(a1 + 152);
  return v4;
}

unint64_t _copyLockRows(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)v4 = 50;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_QWORD *)(v4 + 104) = copyObjectImpl(*(_QWORD *)(a1 + 104));
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  return v4;
}

unint64_t _copyLimit(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x98uLL);
  *(_DWORD *)v4 = 51;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(v4 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_QWORD *)(v4 + 104) = copyObjectImpl(*(_QWORD *)(a1 + 104));
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  *(_DWORD *)(v4 + 120) = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(v4 + 124) = *(_DWORD *)(a1 + 124);
  v5 = 2 * *(int *)(a1 + 124);
  v6 = (void *)palloc(v5);
  *(_QWORD *)(v4 + 128) = v6;
  memcpy(v6, *(const void **)(a1 + 128), v5);
  v7 = 4 * *(int *)(a1 + 124);
  v8 = (void *)palloc(v7);
  *(_QWORD *)(v4 + 136) = v8;
  memcpy(v8, *(const void **)(a1 + 136), v7);
  v9 = 4 * *(int *)(a1 + 124);
  v10 = (void *)palloc(v9);
  *(_QWORD *)(v4 + 144) = v10;
  memcpy(v10, *(const void **)(a1 + 144), v9);
  return v4;
}

unint64_t _copyNestLoopParam(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)v4 = 52;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  return v4;
}

unint64_t _copyPlanRowMark(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t result;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  result = MemoryContextAllocZero(*v3, 0x24uLL);
  *(_DWORD *)result = 53;
  *(_DWORD *)(result + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a1 + 28);
  *(_BYTE *)(result + 32) = *(_BYTE *)(a1 + 32);
  return result;
}

unint64_t _copyPartitionPruneInfo(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 54;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = bms_copy(*(int **)(a1 + 16));
  return v4;
}

unint64_t _copyPartitionedRelPruneInfo(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x48uLL);
  *(_DWORD *)v4 = 55;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = bms_copy(*(int **)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  v5 = 4 * *(int *)(a1 + 16);
  v6 = (void *)palloc(v5);
  *(_QWORD *)(v4 + 24) = v6;
  memcpy(v6, *(const void **)(a1 + 24), v5);
  v7 = 4 * *(int *)(a1 + 16);
  v8 = (void *)palloc(v7);
  *(_QWORD *)(v4 + 32) = v8;
  memcpy(v8, *(const void **)(a1 + 32), v7);
  v9 = 4 * *(int *)(a1 + 16);
  v10 = (void *)palloc(v9);
  *(_QWORD *)(v4 + 40) = v10;
  memcpy(v10, *(const void **)(a1 + 40), v9);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = bms_copy(*(int **)(a1 + 64));
  return v4;
}

unint64_t _copyPartitionPruneStepOp(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 56;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_WORD *)(v4 + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = bms_copy(*(int **)(a1 + 32));
  return v4;
}

unint64_t _copyPartitionPruneStepCombine(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 57;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyAlias(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 102;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyRangeVar(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;
  const char *v7;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)v4 = 103;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  v6 = *(const char **)(a1 + 16);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 16) = v6;
  v7 = *(const char **)(a1 + 24);
  if (v7)
    v7 = (const char *)pstrdup(v7);
  *(_QWORD *)(v4 + 24) = v7;
  *(_BYTE *)(v4 + 32) = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(v4 + 33) = *(_BYTE *)(a1 + 33);
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  return v4;
}

unint64_t _copyTableFunc(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x68uLL);
  *(_DWORD *)v4 = 104;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_DWORD *)(v4 + 96) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(v4 + 100) = *(_DWORD *)(a1 + 100);
  return v4;
}

unint64_t _copyIntoClause(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x48uLL);
  *(_DWORD *)v4 = 153;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  v5 = *(const char **)(a1 + 24);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  v6 = *(const char **)(a1 + 48);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 48) = v6;
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_BYTE *)(v4 + 64) = *(_BYTE *)(a1 + 64);
  return v4;
}

unint64_t _copyVar(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t result;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  result = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)result = 106;
  *(_DWORD *)(result + 4) = *(_DWORD *)(a1 + 4);
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a1 + 28);
  *(_WORD *)(result + 32) = *(_WORD *)(a1 + 32);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a1 + 36);
  return result;
}

unint64_t _copyConst(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  unsigned __int8 *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 107;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 33) || *(_BYTE *)(a1 + 32))
    v5 = *(unsigned __int8 **)(a1 + 24);
  else
    v5 = datumCopy(*(unsigned __int8 **)(a1 + 24), 0, *(_DWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = v5;
  *(_BYTE *)(v4 + 32) = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(v4 + 33) = *(_BYTE *)(a1 + 33);
  *(_DWORD *)(v4 + 36) = *(_DWORD *)(a1 + 36);
  return v4;
}

_DWORD *_copyParam(_DWORD *a1, double a2)
{
  uint64_t *v3;
  _DWORD *result;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  result = (_DWORD *)MemoryContextAllocZero(*v3, 0x1CuLL);
  *result = 108;
  result[1] = a1[1];
  result[2] = a1[2];
  result[3] = a1[3];
  result[4] = a1[4];
  result[5] = a1[5];
  result[6] = a1[6];
  return result;
}

unint64_t _copyAggref(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x58uLL);
  *(_DWORD *)v4 = 109;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_BYTE *)(v4 + 72) = *(_BYTE *)(a1 + 72);
  *(_BYTE *)(v4 + 73) = *(_BYTE *)(a1 + 73);
  *(_BYTE *)(v4 + 74) = *(_BYTE *)(a1 + 74);
  *(_DWORD *)(v4 + 76) = *(_DWORD *)(a1 + 76);
  *(_DWORD *)(v4 + 80) = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(v4 + 84) = *(_DWORD *)(a1 + 84);
  return v4;
}

unint64_t _copyGroupingFunc(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 110;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v4 + 36) = *(_DWORD *)(a1 + 36);
  return v4;
}

unint64_t _copyWindowFunc(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)v4 = 111;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(v4 + 44) = *(_BYTE *)(a1 + 44);
  *(_BYTE *)(v4 + 45) = *(_BYTE *)(a1 + 45);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  return v4;
}

unint64_t _copySubscriptingRef(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)v4 = 112;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  return v4;
}

unint64_t _copyFuncExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 113;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_BYTE *)(v4 + 12) = *(_BYTE *)(a1 + 12);
  *(_BYTE *)(v4 + 13) = *(_BYTE *)(a1 + 13);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyNamedArgExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 114;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  v5 = *(const char **)(a1 + 16);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 16) = v5;
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a1 + 28);
  return v4;
}

unint64_t _copyOpExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 115;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyDistinctExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 116;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyNullIfExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 117;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyScalarArrayOpExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 118;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_BYTE *)(v4 + 12) = *(_BYTE *)(a1 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

unint64_t _copyBoolExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 119;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  return v4;
}

unint64_t _copySubLink(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 120;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copySubPlan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x60uLL);
  *(_DWORD *)v4 = 121;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  v5 = *(const char **)(a1 + 32);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 32) = v5;
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v4 + 44) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  *(_BYTE *)(v4 + 52) = *(_BYTE *)(a1 + 52);
  *(_BYTE *)(v4 + 53) = *(_BYTE *)(a1 + 53);
  *(_BYTE *)(v4 + 54) = *(_BYTE *)(a1 + 54);
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(v4 + 88) = *(_QWORD *)(a1 + 88);
  return v4;
}

unint64_t _copyAlternativeSubPlan(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)v4 = 122;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  return v4;
}

unint64_t _copyFieldSelect(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 123;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_WORD *)(v4 + 16) = *(_WORD *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a1 + 28);
  return v4;
}

unint64_t _copyFieldStore(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 124;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

unint64_t _copyRelabelType(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 125;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

unint64_t _copyCoerceViaIO(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 126;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a1 + 28);
  return v4;
}

unint64_t _copyArrayCoerceExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 127;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v4 + 36) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyConvertRowtypeExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 128;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

unint64_t _copyCollateExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 129;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyCaseExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 130;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyCaseWhen(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 131;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

_DWORD *_copyCaseTestExpr(_DWORD *a1, double a2)
{
  uint64_t *v3;
  _DWORD *result;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  result = (_DWORD *)MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *result = 132;
  result[1] = a1[1];
  result[2] = a1[2];
  result[3] = a1[3];
  return result;
}

unint64_t _copyArrayExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 133;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a1 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a1 + 28);
  return v4;
}

unint64_t _copyRowExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 134;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

unint64_t _copyRowCompareExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 135;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  return v4;
}

unint64_t _copyCoalesceExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 136;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

unint64_t _copyMinMaxExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 137;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

_DWORD *_copySQLValueFunction(_DWORD *a1, double a2)
{
  uint64_t *v3;
  _DWORD *result;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  result = (_DWORD *)MemoryContextAllocZero(*v3, 0x14uLL);
  *result = 138;
  result[1] = a1[1];
  result[2] = a1[2];
  result[3] = a1[3];
  result[4] = a1[4];
  return result;
}

unint64_t _copyXmlExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)v4 = 139;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v4 + 44) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 52) = *(_DWORD *)(a1 + 52);
  return v4;
}

unint64_t _copyNullTest(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 140;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_BYTE *)(v4 + 20) = *(_BYTE *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

unint64_t _copyBooleanTest(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 141;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyCoerceToDomain(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 142;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

_DWORD *_copyCoerceToDomainValue(_DWORD *a1, double a2)
{
  uint64_t *v3;
  _DWORD *result;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  result = (_DWORD *)MemoryContextAllocZero(*v3, 0x14uLL);
  *result = 143;
  result[1] = a1[1];
  result[2] = a1[2];
  result[3] = a1[3];
  result[4] = a1[4];
  return result;
}

_DWORD *_copySetToDefault(_DWORD *a1, double a2)
{
  uint64_t *v3;
  _DWORD *result;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  result = (_DWORD *)MemoryContextAllocZero(*v3, 0x14uLL);
  *result = 144;
  result[1] = a1[1];
  result[2] = a1[2];
  result[3] = a1[3];
  result[4] = a1[4];
  return result;
}

unint64_t _copyCurrentOfExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 145;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  return v4;
}

unint64_t _copyInferenceElem(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 147;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyTargetEntry(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 148;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_WORD *)(v4 + 16) = *(_WORD *)(a1 + 16);
  v5 = *(const char **)(a1 + 24);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 24) = v5;
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v4 + 36) = *(_DWORD *)(a1 + 36);
  *(_WORD *)(v4 + 40) = *(_WORD *)(a1 + 40);
  *(_BYTE *)(v4 + 42) = *(_BYTE *)(a1 + 42);
  return v4;
}

unint64_t _copyJoinExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)v4 = 150;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(a1 + 56);
  return v4;
}

unint64_t _copyFromExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 151;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyOnConflictExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)v4 = 152;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  return v4;
}

unint64_t _copyPathKey(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t result;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  result = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)result = 203;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a1 + 20);
  *(_BYTE *)(result + 24) = *(_BYTE *)(a1 + 24);
  return result;
}

unint64_t _copyRestrictInfo(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0xD8uLL);
  *(_DWORD *)v4 = 205;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(v4 + 17) = *(_BYTE *)(a1 + 17);
  *(_BYTE *)(v4 + 18) = *(_BYTE *)(a1 + 18);
  *(_BYTE *)(v4 + 19) = *(_BYTE *)(a1 + 19);
  *(_BYTE *)(v4 + 20) = *(_BYTE *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 32) = bms_copy(*(int **)(a1 + 32));
  *(_QWORD *)(v4 + 40) = bms_copy(*(int **)(a1 + 40));
  *(_QWORD *)(v4 + 48) = bms_copy(*(int **)(a1 + 48));
  *(_QWORD *)(v4 + 56) = bms_copy(*(int **)(a1 + 56));
  *(_QWORD *)(v4 + 64) = bms_copy(*(int **)(a1 + 64));
  *(_QWORD *)(v4 + 72) = bms_copy(*(int **)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(v4 + 112) = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 120) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(v4 + 128) = copyObjectImpl(*(_QWORD *)(a1 + 128));
  *(_QWORD *)(v4 + 136) = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(v4 + 144) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(v4 + 152) = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(v4 + 168) = 0;
  *(_BYTE *)(v4 + 176) = *(_BYTE *)(a1 + 176);
  *(_DWORD *)(v4 + 180) = *(_DWORD *)(a1 + 180);
  *(_QWORD *)(v4 + 184) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(v4 + 192) = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(v4 + 200) = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(v4 + 208) = *(_QWORD *)(a1 + 208);
  return v4;
}

unint64_t _copyPlaceHolderVar(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 207;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = bms_copy(*(int **)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a1 + 28);
  return v4;
}

unint64_t _copySpecialJoinInfo(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)v4 = 208;
  *(_QWORD *)(v4 + 8) = bms_copy(*(int **)(a1 + 8));
  *(_QWORD *)(v4 + 16) = bms_copy(*(int **)(a1 + 16));
  *(_QWORD *)(v4 + 24) = bms_copy(*(int **)(a1 + 24));
  *(_QWORD *)(v4 + 32) = bms_copy(*(int **)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(v4 + 44) = *(_BYTE *)(a1 + 44);
  *(_BYTE *)(v4 + 45) = *(_BYTE *)(a1 + 45);
  *(_BYTE *)(v4 + 46) = *(_BYTE *)(a1 + 46);
  *(_BYTE *)(v4 + 47) = *(_BYTE *)(a1 + 47);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  return v4;
}

unint64_t _copyAppendRelInfo(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)v4 = 209;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  v5 = 2 * *(int *)(a1 + 32);
  v6 = (void *)palloc(v5);
  *(_QWORD *)(v4 + 40) = v6;
  memcpy(v6, *(const void **)(a1 + 40), v5);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  return v4;
}

unint64_t _copyPlaceHolderInfo(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 210;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = bms_copy(*(int **)(a1 + 16));
  *(_QWORD *)(v4 + 24) = bms_copy(*(int **)(a1 + 24));
  *(_QWORD *)(v4 + 32) = bms_copy(*(int **)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  return v4;
}

_DWORD *_copyValue(int *a1, double a2)
{
  uint64_t *v3;
  _DWORD *result;
  _DWORD *v5;
  int v6;
  const char *v7;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  result = (_DWORD *)MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  v5 = result;
  *result = 220;
  *result = *a1;
  v6 = *a1;
  if ((*a1 - 222) < 3)
  {
    v7 = (const char *)*((_QWORD *)a1 + 1);
    if (v7)
      v7 = (const char *)pstrdup(v7);
    *((_QWORD *)v5 + 1) = v7;
    return v5;
  }
  if (v6 == 225)
    return v5;
  if (v6 != 221)
    _copyValue_cold_1();
  result[2] = a1[2];
  return result;
}

unint64_t _copyExtensibleNode(uint64_t a1)
{
  uint64_t ExtensibleNodeMethods;
  double v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v8;
  const char *v9;

  ExtensibleNodeMethods = GetExtensibleNodeMethods(*(char **)(a1 + 8), 0);
  v4 = *(_QWORD *)CurrentMemoryContext(v3);
  if (v5 > 0x400 || v6 != 0)
  {
    v8 = MemoryContextAllocZero(v4, v5);
    *(_DWORD *)v8 = 229;
    v9 = *(const char **)(a1 + 8);
    if (!v9)
      goto LABEL_9;
    goto LABEL_8;
  }
  v8 = MemoryContextAllocZeroAligned(v4, v5);
  *(_DWORD *)v8 = 229;
  v9 = *(const char **)(a1 + 8);
  if (v9)
LABEL_8:
    v9 = (const char *)pstrdup(v9);
LABEL_9:
  *(_QWORD *)(v8 + 8) = v9;
  (*(void (**)(unint64_t, uint64_t))(ExtensibleNodeMethods + 16))(v8, a1);
  return v8;
}

unint64_t _copyQuery(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0xE0uLL);
  *(_DWORD *)v4 = 231;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(v4 + 44) = *(_BYTE *)(a1 + 44);
  *(_BYTE *)(v4 + 45) = *(_BYTE *)(a1 + 45);
  *(_BYTE *)(v4 + 46) = *(_BYTE *)(a1 + 46);
  *(_BYTE *)(v4 + 47) = *(_BYTE *)(a1 + 47);
  *(_BYTE *)(v4 + 48) = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(v4 + 49) = *(_BYTE *)(a1 + 49);
  *(_BYTE *)(v4 + 50) = *(_BYTE *)(a1 + 50);
  *(_BYTE *)(v4 + 51) = *(_BYTE *)(a1 + 51);
  *(_BYTE *)(v4 + 52) = *(_BYTE *)(a1 + 52);
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_DWORD *)(v4 + 88) = *(_DWORD *)(a1 + 88);
  *(_QWORD *)(v4 + 96) = copyObjectImpl(*(_QWORD *)(a1 + 96));
  *(_QWORD *)(v4 + 104) = copyObjectImpl(*(_QWORD *)(a1 + 104));
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  *(_QWORD *)(v4 + 120) = copyObjectImpl(*(_QWORD *)(a1 + 120));
  *(_QWORD *)(v4 + 128) = copyObjectImpl(*(_QWORD *)(a1 + 128));
  *(_QWORD *)(v4 + 136) = copyObjectImpl(*(_QWORD *)(a1 + 136));
  *(_QWORD *)(v4 + 144) = copyObjectImpl(*(_QWORD *)(a1 + 144));
  *(_QWORD *)(v4 + 152) = copyObjectImpl(*(_QWORD *)(a1 + 152));
  *(_QWORD *)(v4 + 160) = copyObjectImpl(*(_QWORD *)(a1 + 160));
  *(_QWORD *)(v4 + 168) = copyObjectImpl(*(_QWORD *)(a1 + 168));
  *(_DWORD *)(v4 + 176) = *(_DWORD *)(a1 + 176);
  *(_QWORD *)(v4 + 184) = copyObjectImpl(*(_QWORD *)(a1 + 184));
  *(_QWORD *)(v4 + 192) = copyObjectImpl(*(_QWORD *)(a1 + 192));
  *(_QWORD *)(v4 + 200) = copyObjectImpl(*(_QWORD *)(a1 + 200));
  *(_QWORD *)(v4 + 208) = copyObjectImpl(*(_QWORD *)(a1 + 208));
  *(_DWORD *)(v4 + 216) = *(_DWORD *)(a1 + 216);
  *(_DWORD *)(v4 + 220) = *(_DWORD *)(a1 + 220);
  return v4;
}

unint64_t _copyRawStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 230;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyInsertStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)v4 = 233;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(a1 + 56);
  return v4;
}

unint64_t _copyDeleteStmt(_QWORD *a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 234;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(a1[1]);
  *(_QWORD *)(v4 + 16) = copyObjectImpl(a1[2]);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(a1[3]);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(a1[4]);
  *(_QWORD *)(v4 + 40) = copyObjectImpl(a1[5]);
  return v4;
}

unint64_t _copyUpdateStmt(_QWORD *a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)v4 = 235;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(a1[1]);
  *(_QWORD *)(v4 + 16) = copyObjectImpl(a1[2]);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(a1[3]);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(a1[4]);
  *(_QWORD *)(v4 + 40) = copyObjectImpl(a1[5]);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(a1[6]);
  return v4;
}

unint64_t _copySelectStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x98uLL);
  *(_DWORD *)v4 = 236;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(v4 + 88) = copyObjectImpl(*(_QWORD *)(a1 + 88));
  *(_QWORD *)(v4 + 96) = copyObjectImpl(*(_QWORD *)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  *(_QWORD *)(v4 + 120) = copyObjectImpl(*(_QWORD *)(a1 + 120));
  *(_DWORD *)(v4 + 128) = *(_DWORD *)(a1 + 128);
  *(_BYTE *)(v4 + 132) = *(_BYTE *)(a1 + 132);
  *(_QWORD *)(v4 + 136) = copyObjectImpl(*(_QWORD *)(a1 + 136));
  *(_QWORD *)(v4 + 144) = copyObjectImpl(*(_QWORD *)(a1 + 144));
  return v4;
}

unint64_t _copySetOperationStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)v4 = 240;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  return v4;
}

unint64_t _copyAlterTableStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 237;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_BYTE *)(v4 + 28) = *(_BYTE *)(a1 + 28);
  return v4;
}

unint64_t _copyAlterTableCmd(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 238;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_WORD *)(v4 + 16) = *(_WORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(v4 + 44) = *(_BYTE *)(a1 + 44);
  return v4;
}

unint64_t _copyAlterCollationStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)v4 = 343;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  return v4;
}

unint64_t _copyAlterDomainStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 239;
  *(_BYTE *)(v4 + 4) = *(_BYTE *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  v5 = *(const char **)(a1 + 16);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  return v4;
}

unint64_t _copyGrantStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 241;
  *(_BYTE *)(v4 + 4) = *(_BYTE *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_BYTE *)(v4 + 40) = *(_BYTE *)(a1 + 40);
  *(_DWORD *)(v4 + 44) = *(_DWORD *)(a1 + 44);
  return v4;
}

unint64_t _copyGrantRoleStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 242;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(v4 + 25) = *(_BYTE *)(a1 + 25);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyAlterDefaultPrivilegesStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 243;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyDeclareCursorStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 297;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  return v4;
}

unint64_t _copyClosePortalStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)v4 = 244;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  return v4;
}

unint64_t _copyCallStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 344;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyClusterStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 245;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  v5 = *(const char **)(a1 + 16);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 16) = v5;
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

unint64_t _copyCopyStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)v4 = 246;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_BYTE *)(v4 + 32) = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(v4 + 33) = *(_BYTE *)(a1 + 33);
  v5 = *(const char **)(a1 + 40);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 40) = v5;
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  return v4;
}

_DWORD *_copyCreateStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  _DWORD *v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = (_DWORD *)MemoryContextAllocZeroAligned(*v3, 0x68uLL);
  *v4 = 247;
  CopyCreateStmtFields(a1, (uint64_t)v4);
  return v4;
}

unint64_t _copyTableLikeClause(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 381;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyDefineStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 248;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_BYTE *)(v4 + 40) = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(v4 + 41) = *(_BYTE *)(a1 + 41);
  return v4;
}

unint64_t _copyDropStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 249;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(v4 + 25) = *(_BYTE *)(a1 + 25);
  return v4;
}

unint64_t _copyTruncateStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 250;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyCommentStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 251;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  v5 = *(const char **)(a1 + 16);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 16) = v5;
  return v4;
}

unint64_t _copySecLabelStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 322;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  v5 = *(const char **)(a1 + 16);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 16) = v5;
  v6 = *(const char **)(a1 + 24);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 24) = v6;
  return v4;
}

unint64_t _copyFetchStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 252;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 8);
  v5 = *(const char **)(a1 + 16);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 16) = v5;
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a1 + 24);
  return v4;
}

unint64_t _copyIndexStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)v4 = 253;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  v6 = *(const char **)(a1 + 24);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 24) = v6;
  v7 = *(const char **)(a1 + 32);
  if (v7)
    v7 = (const char *)pstrdup(v7);
  *(_QWORD *)(v4 + 32) = v7;
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  v8 = *(const char **)(a1 + 80);
  if (v8)
    v8 = (const char *)pstrdup(v8);
  *(_QWORD *)(v4 + 80) = v8;
  *(_DWORD *)(v4 + 88) = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(v4 + 92) = *(_DWORD *)(a1 + 92);
  *(_DWORD *)(v4 + 96) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(v4 + 100) = *(_DWORD *)(a1 + 100);
  *(_BYTE *)(v4 + 104) = *(_BYTE *)(a1 + 104);
  *(_BYTE *)(v4 + 105) = *(_BYTE *)(a1 + 105);
  *(_BYTE *)(v4 + 106) = *(_BYTE *)(a1 + 106);
  *(_BYTE *)(v4 + 107) = *(_BYTE *)(a1 + 107);
  *(_BYTE *)(v4 + 108) = *(_BYTE *)(a1 + 108);
  *(_BYTE *)(v4 + 109) = *(_BYTE *)(a1 + 109);
  *(_BYTE *)(v4 + 110) = *(_BYTE *)(a1 + 110);
  *(_BYTE *)(v4 + 111) = *(_BYTE *)(a1 + 111);
  *(_BYTE *)(v4 + 112) = *(_BYTE *)(a1 + 112);
  return v4;
}

unint64_t _copyCreateStatsStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)v4 = 342;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  v5 = *(const char **)(a1 + 40);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 40) = v5;
  *(_BYTE *)(v4 + 48) = *(_BYTE *)(a1 + 48);
  return v4;
}

unint64_t _copyAlterStatsStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 345;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_BYTE *)(v4 + 20) = *(_BYTE *)(a1 + 20);
  return v4;
}

unint64_t _copyCreateFunctionStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 254;
  *(_BYTE *)(v4 + 4) = *(_BYTE *)(a1 + 4);
  *(_BYTE *)(v4 + 5) = *(_BYTE *)(a1 + 5);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  return v4;
}

unint64_t _copyFunctionParameter(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 382;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  return v4;
}

unint64_t _copyAlterFunctionStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 255;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyDoStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)v4 = 256;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  return v4;
}

unint64_t _copyRenameStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)v4 = 257;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  v5 = *(const char **)(a1 + 32);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 32) = v5;
  v6 = *(const char **)(a1 + 40);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 40) = v6;
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  *(_BYTE *)(v4 + 52) = *(_BYTE *)(a1 + 52);
  return v4;
}

unint64_t _copyAlterObjectDependsStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 300;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_BYTE *)(v4 + 32) = *(_BYTE *)(a1 + 32);
  return v4;
}

unint64_t _copyAlterObjectSchemaStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 301;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  v5 = *(const char **)(a1 + 24);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 24) = v5;
  *(_BYTE *)(v4 + 32) = *(_BYTE *)(a1 + 32);
  return v4;
}

unint64_t _copyAlterOwnerStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 302;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  return v4;
}

unint64_t _copyAlterOperatorStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 303;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyAlterTypeStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 304;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyRuleStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)v4 = 258;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  v5 = *(const char **)(a1 + 16);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_BYTE *)(v4 + 48) = *(_BYTE *)(a1 + 48);
  return v4;
}

unint64_t _copyNotifyStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 259;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  v6 = *(const char **)(a1 + 16);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 16) = v6;
  return v4;
}

unint64_t _copyListenStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)v4 = 260;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  return v4;
}

unint64_t _copyUnlistenStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)v4 = 261;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  return v4;
}

unint64_t _copyTransactionStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 262;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  v5 = *(const char **)(a1 + 16);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 16) = v5;
  v6 = *(const char **)(a1 + 24);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 24) = v6;
  *(_BYTE *)(v4 + 32) = *(_BYTE *)(a1 + 32);
  return v4;
}

unint64_t _copyCompositeTypeStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 307;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyCreateEnumStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 308;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyCreateRangeStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 309;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyAlterEnumStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;
  const char *v7;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 310;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  v5 = *(const char **)(a1 + 16);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 16) = v5;
  v6 = *(const char **)(a1 + 24);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 24) = v6;
  v7 = *(const char **)(a1 + 32);
  if (v7)
    v7 = (const char *)pstrdup(v7);
  *(_QWORD *)(v4 + 32) = v7;
  *(_BYTE *)(v4 + 40) = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(v4 + 41) = *(_BYTE *)(a1 + 41);
  return v4;
}

unint64_t _copyViewStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)v4 = 263;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_BYTE *)(v4 + 32) = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  return v4;
}

unint64_t _copyLoadStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)v4 = 264;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  return v4;
}

unint64_t _copyCreateDomainStmt(_QWORD *a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 265;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(a1[1]);
  *(_QWORD *)(v4 + 16) = copyObjectImpl(a1[2]);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(a1[3]);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(a1[4]);
  return v4;
}

unint64_t _copyCreateOpClassStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)v4 = 291;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  v5 = *(const char **)(a1 + 24);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_BYTE *)(v4 + 48) = *(_BYTE *)(a1 + 48);
  return v4;
}

unint64_t _copyCreateOpClassItem(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 380;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  return v4;
}

unint64_t _copyCreateOpFamilyStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 292;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  v5 = *(const char **)(a1 + 16);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 16) = v5;
  return v4;
}

unint64_t _copyAlterOpFamilyStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 293;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  v5 = *(const char **)(a1 + 16);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 16) = v5;
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  return v4;
}

unint64_t _copyCreatedbStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 266;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyAlterDatabaseStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 286;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyAlterDatabaseSetStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 287;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyDropdbStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 267;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  return v4;
}

unint64_t _copyVacuumStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 268;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a1 + 24);
  return v4;
}

unint64_t _copyVacuumRelation(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 397;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  return v4;
}

unint64_t _copyExplainStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 269;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyCreateTableAsStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 270;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_BYTE *)(v4 + 28) = *(_BYTE *)(a1 + 28);
  *(_BYTE *)(v4 + 29) = *(_BYTE *)(a1 + 29);
  return v4;
}

unint64_t _copyRefreshMatViewStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)v4 = 330;
  *(_BYTE *)(v4 + 4) = *(_BYTE *)(a1 + 4);
  *(_BYTE *)(v4 + 5) = *(_BYTE *)(a1 + 5);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  return v4;
}

unint64_t _copyReplicaIdentityStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)v4 = 331;
  *(_BYTE *)(v4 + 4) = *(_BYTE *)(a1 + 4);
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  return v4;
}

unint64_t _copyAlterSystemStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)v4 = 332;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  return v4;
}

unint64_t _copyCreateSeqStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 271;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_BYTE *)(v4 + 28) = *(_BYTE *)(a1 + 28);
  *(_BYTE *)(v4 + 29) = *(_BYTE *)(a1 + 29);
  return v4;
}

unint64_t _copyAlterSeqStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 272;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(v4 + 25) = *(_BYTE *)(a1 + 25);
  return v4;
}

unint64_t _copyVariableSetStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 273;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a1 + 24);
  return v4;
}

unint64_t _copyVariableShowStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)v4 = 274;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  return v4;
}

unint64_t _copyCreateTableSpaceStmt(_QWORD *a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 298;
  v5 = (const char *)a1[1];
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(a1[2]);
  v6 = (const char *)a1[3];
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 24) = v6;
  *(_QWORD *)(v4 + 32) = copyObjectImpl(a1[4]);
  return v4;
}

unint64_t _copyDropTableSpaceStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 299;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(a1 + 16);
  return v4;
}

unint64_t _copyAlterTableSpaceOptionsStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 320;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a1 + 24);
  return v4;
}

unint64_t _copyAlterTableMoveAllStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 321;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  v6 = *(const char **)(a1 + 32);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 32) = v6;
  *(_BYTE *)(v4 + 40) = *(_BYTE *)(a1 + 40);
  return v4;
}

unint64_t _copyCreateExtensionStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 325;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  return v4;
}

unint64_t _copyAlterExtensionStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 326;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyAlterExtensionContentsStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 327;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  return v4;
}

unint64_t _copyCreateFdwStmt(_QWORD *a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 313;
  v5 = (const char *)a1[1];
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(a1[2]);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(a1[3]);
  return v4;
}

unint64_t _copyAlterFdwStmt(_QWORD *a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 314;
  v5 = (const char *)a1[1];
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(a1[2]);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(a1[3]);
  return v4;
}

unint64_t _copyCreateForeignServerStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)v4 = 315;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  v6 = *(const char **)(a1 + 16);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 16) = v6;
  v7 = *(const char **)(a1 + 24);
  if (v7)
    v7 = (const char *)pstrdup(v7);
  *(_QWORD *)(v4 + 24) = v7;
  v8 = *(const char **)(a1 + 32);
  if (v8)
    v8 = (const char *)pstrdup(v8);
  *(_QWORD *)(v4 + 32) = v8;
  *(_BYTE *)(v4 + 40) = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  return v4;
}

unint64_t _copyAlterForeignServerStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 316;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  v6 = *(const char **)(a1 + 16);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_BYTE *)(v4 + 32) = *(_BYTE *)(a1 + 32);
  return v4;
}

unint64_t _copyCreateUserMappingStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 317;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  v5 = *(const char **)(a1 + 16);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 16) = v5;
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  return v4;
}

unint64_t _copyAlterUserMappingStmt(_QWORD *a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 318;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(a1[1]);
  v5 = (const char *)a1[2];
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 24) = copyObjectImpl(a1[3]);
  return v4;
}

unint64_t _copyDropUserMappingStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 319;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  v5 = *(const char **)(a1 + 16);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 16) = v5;
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a1 + 24);
  return v4;
}

unint64_t _copyCreateForeignTableStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)v4 = 323;
  CopyCreateStmtFields(a1, v4);
  v5 = *(const char **)(a1 + 104);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 104) = v5;
  *(_QWORD *)(v4 + 112) = copyObjectImpl(*(_QWORD *)(a1 + 112));
  return v4;
}

unint64_t _copyImportForeignSchemaStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;
  const char *v7;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)v4 = 324;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  v6 = *(const char **)(a1 + 16);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 16) = v6;
  v7 = *(const char **)(a1 + 24);
  if (v7)
    v7 = (const char *)pstrdup(v7);
  *(_QWORD *)(v4 + 24) = v7;
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  return v4;
}

unint64_t _copyCreateTransformStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 335;
  *(_BYTE *)(v4 + 4) = *(_BYTE *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  v5 = *(const char **)(a1 + 16);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  return v4;
}

unint64_t _copyCreateAmStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 336;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a1 + 24);
  return v4;
}

unint64_t _copyCreateTrigStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x60uLL);
  *(_DWORD *)v4 = 276;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_BYTE *)(v4 + 40) = *(_BYTE *)(a1 + 40);
  *(_WORD *)(v4 + 42) = *(_WORD *)(a1 + 42);
  *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_BYTE *)(v4 + 64) = *(_BYTE *)(a1 + 64);
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_BYTE *)(v4 + 80) = *(_BYTE *)(a1 + 80);
  *(_BYTE *)(v4 + 81) = *(_BYTE *)(a1 + 81);
  *(_QWORD *)(v4 + 88) = copyObjectImpl(*(_QWORD *)(a1 + 88));
  return v4;
}

unint64_t _copyCreateEventTrigStmt(_QWORD *a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 328;
  v5 = (const char *)a1[1];
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  v6 = (const char *)a1[2];
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 24) = copyObjectImpl(a1[3]);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(a1[4]);
  return v4;
}

unint64_t _copyAlterEventTrigStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 329;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(a1 + 16);
  return v4;
}

unint64_t _copyCreatePLangStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 277;
  *(_BYTE *)(v4 + 4) = *(_BYTE *)(a1 + 4);
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_BYTE *)(v4 + 40) = *(_BYTE *)(a1 + 40);
  return v4;
}

unint64_t _copyCreateRoleStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 278;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyAlterRoleStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 279;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

unint64_t _copyAlterRoleSetStmt(_QWORD *a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 288;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(a1[1]);
  v5 = (const char *)a1[2];
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 24) = copyObjectImpl(a1[3]);
  return v4;
}

unint64_t _copyDropRoleStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 280;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(a1 + 16);
  return v4;
}

unint64_t _copyLockStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 281;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_BYTE *)(v4 + 20) = *(_BYTE *)(a1 + 20);
  return v4;
}

unint64_t _copyConstraintsSetStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 282;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(a1 + 16);
  return v4;
}

unint64_t _copyReindexStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 283;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  v5 = *(const char **)(a1 + 16);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 16) = v5;
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_BYTE *)(v4 + 28) = *(_BYTE *)(a1 + 28);
  return v4;
}

unint64_t _copyCreateSchemaStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 285;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_BYTE *)(v4 + 32) = *(_BYTE *)(a1 + 32);
  return v4;
}

unint64_t _copyCreateConversionStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 289;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  v5 = *(const char **)(a1 + 16);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 16) = v5;
  v6 = *(const char **)(a1 + 24);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 24) = v6;
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_BYTE *)(v4 + 40) = *(_BYTE *)(a1 + 40);
  return v4;
}

unint64_t _copyCreateCastStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 290;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 36) = *(_BYTE *)(a1 + 36);
  return v4;
}

unint64_t _copyPrepareStmt(_QWORD *a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 294;
  v5 = (const char *)a1[1];
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(a1[2]);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(a1[3]);
  return v4;
}

unint64_t _copyExecuteStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 295;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyDeallocateStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)v4 = 296;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  return v4;
}

unint64_t _copyDropOwnedStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 305;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  return v4;
}

unint64_t _copyReassignOwnedStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 306;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyAlterTSDictionaryStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 311;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyAlterTSConfigurationStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 312;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_BYTE *)(v4 + 32) = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(v4 + 33) = *(_BYTE *)(a1 + 33);
  *(_BYTE *)(v4 + 34) = *(_BYTE *)(a1 + 34);
  return v4;
}

unint64_t _copyCreatePolicyStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)v4 = 333;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  v6 = *(const char **)(a1 + 24);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 24) = v6;
  *(_BYTE *)(v4 + 32) = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  return v4;
}

unint64_t _copyAlterPolicyStmt(_QWORD *a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 334;
  v5 = (const char *)a1[1];
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(a1[2]);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(a1[3]);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(a1[4]);
  *(_QWORD *)(v4 + 40) = copyObjectImpl(a1[5]);
  return v4;
}

unint64_t _copyCreatePublicationStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 337;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_BYTE *)(v4 + 32) = *(_BYTE *)(a1 + 32);
  return v4;
}

unint64_t _copyAlterPublicationStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 338;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_BYTE *)(v4 + 32) = *(_BYTE *)(a1 + 32);
  *(_DWORD *)(v4 + 36) = *(_DWORD *)(a1 + 36);
  return v4;
}

unint64_t _copyCreateSubscriptionStmt(_QWORD *a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 339;
  v5 = (const char *)a1[1];
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  v6 = (const char *)a1[2];
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 24) = copyObjectImpl(a1[3]);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(a1[4]);
  return v4;
}

unint64_t _copyAlterSubscriptionStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 340;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  v6 = *(const char **)(a1 + 16);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  return v4;
}

unint64_t _copyDropSubscriptionStmt(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 341;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyAExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 346;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

unint64_t _copyColumnRef(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 347;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  return v4;
}

_DWORD *_copyAConst(uint64_t a1, double a2)
{
  uint64_t *v3;
  _DWORD *result;
  _DWORD *v5;
  int v6;
  const char *v7;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  result = (_DWORD *)MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  v5 = result;
  *result = 349;
  result[2] = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 8);
  if ((v6 - 222) < 3)
  {
    v7 = *(const char **)(a1 + 16);
    if (v7)
      v7 = (const char *)pstrdup(v7);
    *((_QWORD *)v5 + 2) = v7;
    goto LABEL_5;
  }
  if (v6 == 225)
  {
LABEL_5:
    v5[6] = *(_DWORD *)(a1 + 24);
    return v5;
  }
  if (v6 != 221)
    _copyAConst_cold_1();
  result[4] = *(_DWORD *)(a1 + 16);
  result[6] = *(_DWORD *)(a1 + 24);
  return result;
}

unint64_t _copyFuncCall(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)v4 = 350;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_BYTE *)(v4 + 40) = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(v4 + 41) = *(_BYTE *)(a1 + 41);
  *(_BYTE *)(v4 + 42) = *(_BYTE *)(a1 + 42);
  *(_BYTE *)(v4 + 43) = *(_BYTE *)(a1 + 43);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(a1 + 56);
  return v4;
}

unint64_t _copyAIndices(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 352;
  *(_BYTE *)(v4 + 4) = *(_BYTE *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyA_Indirection(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 353;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyA_ArrayExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 354;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  return v4;
}

unint64_t _copyResTarget(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 355;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

unint64_t _copyMultiAssignRef(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 356;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyTypeCast(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 357;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

unint64_t _copyCollateClause(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 358;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

unint64_t _copySortBy(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 359;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

unint64_t _copyWindowDef(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x48uLL);
  *(_DWORD *)v4 = 360;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  v6 = *(const char **)(a1 + 16);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_DWORD *)(v4 + 64) = *(_DWORD *)(a1 + 64);
  return v4;
}

unint64_t _copyRangeSubselect(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 361;
  *(_BYTE *)(v4 + 4) = *(_BYTE *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyRangeFunction(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 362;
  *(_BYTE *)(v4 + 4) = *(_BYTE *)(a1 + 4);
  *(_BYTE *)(v4 + 5) = *(_BYTE *)(a1 + 5);
  *(_BYTE *)(v4 + 6) = *(_BYTE *)(a1 + 6);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  return v4;
}

unint64_t _copyRangeTableSample(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 363;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyRangeTableFunc(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)v4 = 364;
  *(_BYTE *)(v4 + 4) = *(_BYTE *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  return v4;
}

unint64_t _copyRangeTableFuncCol(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)v4 = 365;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(v4 + 25) = *(_BYTE *)(a1 + 25);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  return v4;
}

unint64_t _copyTypeName(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)v4 = 366;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_BYTE *)(v4 + 20) = *(_BYTE *)(a1 + 20);
  *(_BYTE *)(v4 + 21) = *(_BYTE *)(a1 + 21);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  return v4;
}

unint64_t _copyIndexElem(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)v4 = 368;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  v6 = *(const char **)(a1 + 24);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 24) = v6;
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 60) = *(_DWORD *)(a1 + 60);
  return v4;
}

unint64_t _copyColumnDef(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x70uLL);
  *(_DWORD *)v4 = 367;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_BYTE *)(v4 + 28) = *(_BYTE *)(a1 + 28);
  *(_BYTE *)(v4 + 29) = *(_BYTE *)(a1 + 29);
  *(_BYTE *)(v4 + 30) = *(_BYTE *)(a1 + 30);
  *(_BYTE *)(v4 + 31) = *(_BYTE *)(a1 + 31);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_BYTE *)(v4 + 48) = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_BYTE *)(v4 + 64) = *(_BYTE *)(a1 + 64);
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_DWORD *)(v4 + 80) = *(_DWORD *)(a1 + 80);
  *(_QWORD *)(v4 + 88) = copyObjectImpl(*(_QWORD *)(a1 + 88));
  *(_QWORD *)(v4 + 96) = copyObjectImpl(*(_QWORD *)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  return v4;
}

unint64_t _copyConstraint(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0xB0uLL);
  *(_DWORD *)v4 = 369;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(v4 + 17) = *(_BYTE *)(a1 + 17);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  v6 = *(const char **)(a1 + 40);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 40) = v6;
  *(_BYTE *)(v4 + 48) = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  v7 = *(const char **)(a1 + 88);
  if (v7)
    v7 = (const char *)pstrdup(v7);
  *(_QWORD *)(v4 + 88) = v7;
  v8 = *(const char **)(a1 + 96);
  if (v8)
    v8 = (const char *)pstrdup(v8);
  *(_QWORD *)(v4 + 96) = v8;
  *(_BYTE *)(v4 + 104) = *(_BYTE *)(a1 + 104);
  v9 = *(const char **)(a1 + 112);
  if (v9)
    v9 = (const char *)pstrdup(v9);
  *(_QWORD *)(v4 + 112) = v9;
  *(_QWORD *)(v4 + 120) = copyObjectImpl(*(_QWORD *)(a1 + 120));
  *(_QWORD *)(v4 + 128) = copyObjectImpl(*(_QWORD *)(a1 + 128));
  *(_QWORD *)(v4 + 136) = copyObjectImpl(*(_QWORD *)(a1 + 136));
  *(_QWORD *)(v4 + 144) = copyObjectImpl(*(_QWORD *)(a1 + 144));
  *(_BYTE *)(v4 + 152) = *(_BYTE *)(a1 + 152);
  *(_BYTE *)(v4 + 153) = *(_BYTE *)(a1 + 153);
  *(_BYTE *)(v4 + 154) = *(_BYTE *)(a1 + 154);
  *(_QWORD *)(v4 + 160) = copyObjectImpl(*(_QWORD *)(a1 + 160));
  *(_DWORD *)(v4 + 168) = *(_DWORD *)(a1 + 168);
  *(_BYTE *)(v4 + 172) = *(_BYTE *)(a1 + 172);
  *(_BYTE *)(v4 + 173) = *(_BYTE *)(a1 + 173);
  return v4;
}

unint64_t _copyDefElem(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 370;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  v6 = *(const char **)(a1 + 16);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v4 + 36) = *(_DWORD *)(a1 + 36);
  return v4;
}

unint64_t _copyLockingClause(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 383;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyRangeTblEntry(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0xF0uLL);
  *(_DWORD *)v4 = 371;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_BYTE *)(v4 + 12) = *(_BYTE *)(a1 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_BYTE *)(v4 + 40) = *(_BYTE *)(a1 + 40);
  *(_DWORD *)(v4 + 44) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_BYTE *)(v4 + 88) = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(v4 + 96) = copyObjectImpl(*(_QWORD *)(a1 + 96));
  *(_QWORD *)(v4 + 104) = copyObjectImpl(*(_QWORD *)(a1 + 104));
  v5 = *(const char **)(a1 + 112);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 112) = v5;
  *(_DWORD *)(v4 + 120) = *(_DWORD *)(a1 + 120);
  *(_BYTE *)(v4 + 124) = *(_BYTE *)(a1 + 124);
  *(_QWORD *)(v4 + 128) = copyObjectImpl(*(_QWORD *)(a1 + 128));
  *(_QWORD *)(v4 + 136) = copyObjectImpl(*(_QWORD *)(a1 + 136));
  *(_QWORD *)(v4 + 144) = copyObjectImpl(*(_QWORD *)(a1 + 144));
  v6 = *(const char **)(a1 + 152);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 152) = v6;
  *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(v4 + 168) = copyObjectImpl(*(_QWORD *)(a1 + 168));
  *(_QWORD *)(v4 + 176) = copyObjectImpl(*(_QWORD *)(a1 + 176));
  *(_BYTE *)(v4 + 184) = *(_BYTE *)(a1 + 184);
  *(_BYTE *)(v4 + 185) = *(_BYTE *)(a1 + 185);
  *(_BYTE *)(v4 + 186) = *(_BYTE *)(a1 + 186);
  *(_DWORD *)(v4 + 188) = *(_DWORD *)(a1 + 188);
  *(_DWORD *)(v4 + 192) = *(_DWORD *)(a1 + 192);
  *(_QWORD *)(v4 + 200) = bms_copy(*(int **)(a1 + 200));
  *(_QWORD *)(v4 + 208) = bms_copy(*(int **)(a1 + 208));
  *(_QWORD *)(v4 + 216) = bms_copy(*(int **)(a1 + 216));
  *(_QWORD *)(v4 + 224) = bms_copy(*(int **)(a1 + 224));
  *(_QWORD *)(v4 + 232) = copyObjectImpl(*(_QWORD *)(a1 + 232));
  return v4;
}

unint64_t _copyRangeTblFunction(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)v4 = 372;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(v4 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = bms_copy(*(int **)(a1 + 56));
  return v4;
}

unint64_t _copyTableSampleClause(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 373;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyWithCheckOption(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 374;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  v6 = *(const char **)(a1 + 16);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_BYTE *)(v4 + 32) = *(_BYTE *)(a1 + 32);
  return v4;
}

unint64_t _copySortGroupClause(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t result;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  result = MemoryContextAllocZero(*v3, 0x14uLL);
  *(_DWORD *)result = 375;
  *(_DWORD *)(result + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(result + 17) = *(_BYTE *)(a1 + 17);
  return result;
}

unint64_t _copyGroupingSet(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 376;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  return v4;
}

unint64_t _copyWindowClause(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;
  const char *v6;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x58uLL);
  *(_DWORD *)v4 = 377;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  v6 = *(const char **)(a1 + 16);
  if (v6)
    v6 = (const char *)pstrdup(v6);
  *(_QWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_DWORD *)(v4 + 64) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(v4 + 68) = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(v4 + 72) = *(_DWORD *)(a1 + 72);
  *(_BYTE *)(v4 + 76) = *(_BYTE *)(a1 + 76);
  *(_BYTE *)(v4 + 77) = *(_BYTE *)(a1 + 77);
  *(_DWORD *)(v4 + 80) = *(_DWORD *)(a1 + 80);
  *(_BYTE *)(v4 + 84) = *(_BYTE *)(a1 + 84);
  return v4;
}

unint64_t _copyRowMarkClause(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t result;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  result = MemoryContextAllocZero(*v3, 0x14uLL);
  *(_DWORD *)result = 384;
  *(_DWORD *)(result + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a1 + 16);
  return result;
}

unint64_t _copyWithClause(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 386;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(a1 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyInferClause(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 387;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  v5 = *(const char **)(a1 + 24);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 24) = v5;
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

unint64_t _copyOnConflictClause(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)v4 = 388;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

unint64_t _copyCommonTableExpr(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x58uLL);
  *(_DWORD *)v4 = 389;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(v4 + 44) = *(_BYTE *)(a1 + 44);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  *(_QWORD *)(v4 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(v4 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(v4 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(v4 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  return v4;
}

unint64_t _copyObjectWithArgs(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 378;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a1 + 24);
  return v4;
}

unint64_t _copyAccessPriv(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 379;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

unint64_t _copyXmlSerialize(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 385;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

unint64_t _copyRoleSpec(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 390;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  return v4;
}

unint64_t _copyTriggerTransition(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 391;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(v4 + 17) = *(_BYTE *)(a1 + 17);
  return v4;
}

unint64_t _copyPartitionElem(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 392;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyPartitionSpec(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  const char *v5;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)v4 = 393;
  v5 = *(const char **)(a1 + 8);
  if (v5)
    v5 = (const char *)pstrdup(v5);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

unint64_t _copyPartitionBoundSpec(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)v4 = 394;
  *(_BYTE *)(v4 + 4) = *(_BYTE *)(a1 + 4);
  *(_BYTE *)(v4 + 5) = *(_BYTE *)(a1 + 5);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(v4 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v4 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyPartitionRangeDatum(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 395;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  return v4;
}

unint64_t _copyPartitionCmd(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)v4 = 396;
  *(_QWORD *)(v4 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v4 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  return v4;
}

__n128 _copyForeignKeyCacheInfo(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  v4 = MemoryContextAllocZero(*v3, 0x114uLL);
  *(_DWORD *)v4 = 415;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 20);
  v6 = *(_OWORD *)(a1 + 36);
  v7 = *(_OWORD *)(a1 + 52);
  *(_OWORD *)(v4 + 68) = *(_OWORD *)(a1 + 68);
  *(_OWORD *)(v4 + 52) = v7;
  *(_OWORD *)(v4 + 36) = v6;
  *(_OWORD *)(v4 + 20) = v5;
  v8 = *(_OWORD *)(a1 + 132);
  v9 = *(_OWORD *)(a1 + 116);
  v10 = *(_OWORD *)(a1 + 100);
  *(_OWORD *)(v4 + 84) = *(_OWORD *)(a1 + 84);
  *(_OWORD *)(v4 + 100) = v10;
  *(_OWORD *)(v4 + 116) = v9;
  *(_OWORD *)(v4 + 132) = v8;
  v11 = *(_OWORD *)(a1 + 196);
  v12 = *(_OWORD *)(a1 + 180);
  v13 = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(v4 + 148) = *(_OWORD *)(a1 + 148);
  *(_OWORD *)(v4 + 164) = v13;
  *(_OWORD *)(v4 + 180) = v12;
  *(_OWORD *)(v4 + 196) = v11;
  result = *(__n128 *)(a1 + 228);
  v15 = *(_OWORD *)(a1 + 244);
  v16 = *(_OWORD *)(a1 + 260);
  *(_OWORD *)(v4 + 212) = *(_OWORD *)(a1 + 212);
  *(_OWORD *)(v4 + 260) = v16;
  *(_OWORD *)(v4 + 244) = v15;
  *(__n128 *)(v4 + 228) = result;
  return result;
}

void *CopySortFields(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  void *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 36);
  *(_BYTE *)(a2 + 37) = *(_BYTE *)(a1 + 37);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(a2 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(a2 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(a2 + 72) = copyObjectImpl(*(_QWORD *)(a1 + 72));
  *(_QWORD *)(a2 + 80) = copyObjectImpl(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(a2 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_QWORD *)(a2 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a1 + 104);
  v4 = 2 * *(int *)(a1 + 104);
  v5 = (void *)palloc(v4);
  *(_QWORD *)(a2 + 112) = v5;
  memcpy(v5, *(const void **)(a1 + 112), v4);
  v6 = 4 * *(int *)(a1 + 104);
  v7 = (void *)palloc(v6);
  *(_QWORD *)(a2 + 120) = v7;
  memcpy(v7, *(const void **)(a1 + 120), v6);
  v8 = 4 * *(int *)(a1 + 104);
  v9 = (void *)palloc(v8);
  *(_QWORD *)(a2 + 128) = v9;
  memcpy(v9, *(const void **)(a1 + 128), v8);
  v10 = *(int *)(a1 + 104);
  v11 = (void *)palloc(v10);
  *(_QWORD *)(a2 + 136) = v11;
  return memcpy(v11, *(const void **)(a1 + 136), v10);
}

const char *CopyCreateStmtFields(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *result;

  *(_QWORD *)(a2 + 8) = copyObjectImpl(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 16) = copyObjectImpl(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(a2 + 24) = copyObjectImpl(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(a2 + 40) = copyObjectImpl(*(_QWORD *)(a1 + 40));
  *(_QWORD *)(a2 + 32) = copyObjectImpl(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(a2 + 48) = copyObjectImpl(*(_QWORD *)(a1 + 48));
  *(_QWORD *)(a2 + 56) = copyObjectImpl(*(_QWORD *)(a1 + 56));
  *(_QWORD *)(a2 + 64) = copyObjectImpl(*(_QWORD *)(a1 + 64));
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 72);
  v4 = *(const char **)(a1 + 80);
  if (v4)
    v4 = (const char *)pstrdup(v4);
  *(_QWORD *)(a2 + 80) = v4;
  result = *(const char **)(a1 + 88);
  if (result)
    result = (const char *)pstrdup(result);
  *(_QWORD *)(a2 + 88) = result;
  *(_BYTE *)(a2 + 96) = *(_BYTE *)(a1 + 96);
  return result;
}

void copyObjectImpl_cold_1()
{
  _DWORD *v0;

  OUTLINED_FUNCTION_0_23();
  errmsg_internal("unrecognized node type: %d", *v0);
  errfinish("src/postgres/src_backend_nodes_copyfuncs.c", 6007, (uint64_t)"copyObjectImpl");
  __break(1u);
}

void _copyValue_cold_1()
{
  _DWORD *v0;

  OUTLINED_FUNCTION_0_23();
  errmsg_internal("unrecognized node type: %d", *v0);
  errfinish("src/postgres/src_backend_nodes_copyfuncs.c", 5080, (uint64_t)"_copyValue");
  __break(1u);
}

void _copyAConst_cold_1()
{
  _DWORD *v0;

  OUTLINED_FUNCTION_0_23();
  errmsg_internal("unrecognized node type: %d", *v0);
  errfinish("src/postgres/src_backend_nodes_copyfuncs.c", 2957, (uint64_t)"_copyAConst");
  __break(1u);
}

uint64_t equal(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (a1 == a2)
    return 1;
  v2 = a2;
  v3 = a1;
  while (2)
  {
    result = 0;
    if (v3 && v2)
    {
      if (*(_DWORD *)v3 == *(_DWORD *)v2)
      {
        check_stack_depth();
        result = 1;
        switch(*(_DWORD *)v3)
        {
          case 0x66:
          case 0x10A:
          case 0x11E:
          case 0x11F:
          case 0x127:
          case 0x146:
          case 0x17B:
          case 0x189:
            return _equalAlias(v3, v2);
          case 0x67:
            return _equalRangeVar(v3, v2);
          case 0x68:
            return _equalTableFunc(v3, v2);
          case 0x6A:
            return _equalVar(v3, v2);
          case 0x6B:
            return _equalConst(v3, v2);
          case 0x6C:
            return _equalParam((_DWORD *)v3, (_DWORD *)v2);
          case 0x6D:
            return _equalAggref(v3, v2);
          case 0x6E:
            result = equal(*(_QWORD *)(v3 + 8), *(_QWORD *)(v2 + 8));
            if ((_DWORD)result)
              return *(_DWORD *)(v3 + 32) == *(_DWORD *)(v2 + 32);
            return result;
          case 0x6F:
            return _equalWindowFunc(v3, v2);
          case 0x70:
            return _equalSubscriptingRef(v3, v2);
          case 0x71:
            return _equalFuncExpr(v3, v2);
          case 0x72:
          case 0xF5:
            return _equalNamedArgExpr(v3, v2);
          case 0x73:
          case 0x74:
          case 0x75:
            return _equalOpExpr(v3, v2);
          case 0x76:
            return _equalScalarArrayOpExpr(v3, v2);
          case 0x77:
          case 0x178:
            if (*(_DWORD *)(v3 + 4) != *(_DWORD *)(v2 + 4))
              return 0;
            goto LABEL_12;
          case 0x78:
          case 0x82:
            return _equalSubLink(v3, v2);
          case 0x79:
            return _equalSubPlan(v3, v2);
          case 0x7A:
          case 0x100:
          case 0x14C:
          case 0x157:
          case 0x15B:
          case 0x162:
            goto LABEL_12;
          case 0x7B:
            return _equalFieldSelect(v3, v2);
          case 0x7C:
            return _equalFieldStore(v3, v2);
          case 0x7D:
          case 0x8E:
            return _equalRelabelType(v3, v2);
          case 0x7E:
          case 0x93:
          case 0x164:
          case 0x17D:
          case 0x17F:
            return _equalCoerceViaIO(v3, v2);
          case 0x7F:
            return _equalArrayCoerceExpr(v3, v2);
          case 0x80:
          case 0x81:
          case 0x8D:
          case 0x131:
            result = equal(*(_QWORD *)(v3 + 8), *(_QWORD *)(v2 + 8));
            if ((_DWORD)result)
              return *(_DWORD *)(v3 + 16) == *(_DWORD *)(v2 + 16);
            return result;
          case 0x83:
          case 0x97:
          case 0xF3:
          case 0x10D:
          case 0x12F:
          case 0x130:
          case 0x132:
          case 0x133:
          case 0x134:
          case 0x135:
          case 0x137:
          case 0x158:
          case 0x161:
          case 0x165:
          case 0x166:
          case 0x18C:
            return _equalCaseWhen(v3, v2);
          case 0x84:
          case 0x8A:
          case 0x8F:
            if (*(_DWORD *)(v3 + 4) != *(_DWORD *)(v2 + 4))
              return 0;
            if (*(_DWORD *)(v3 + 8) != *(_DWORD *)(v2 + 8))
              return 0;
            return *(_DWORD *)(v3 + 12) == *(_DWORD *)(v2 + 12);
          case 0x85:
            return _equalArrayExpr(v3, v2);
          case 0x86:
          case 0x18D:
            return _equalRowExpr(v3, v2);
          case 0x87:
            return _equalRowCompareExpr(v3, v2);
          case 0x88:
            return _equalCoalesceExpr(v3, v2);
          case 0x89:
            return _equalMinMaxExpr(v3, v2);
          case 0x8B:
            return _equalXmlExpr(v3, v2);
          case 0x8C:
          case 0x119:
          case 0x159:
            return _equalNullTest(v3, v2);
          case 0x90:
            if (*(_DWORD *)(v3 + 4) == *(_DWORD *)(v2 + 4) && *(_DWORD *)(v3 + 8) == *(_DWORD *)(v2 + 8))
              return *(_DWORD *)(v3 + 12) == *(_DWORD *)(v2 + 12);
            return 0;
          case 0x91:
            return _equalCurrentOfExpr(v3, v2);
          case 0x92:
            if (*(_DWORD *)(v3 + 4) != *(_DWORD *)(v2 + 4))
              return 0;
            return *(_DWORD *)(v3 + 8) == *(_DWORD *)(v2 + 8);
          case 0x94:
            return _equalTargetEntry(v3, v2);
          case 0x95:
          case 0x113:
          case 0x15C:
            return *(_DWORD *)(v3 + 4) == *(_DWORD *)(v2 + 4);
          case 0x96:
            return _equalJoinExpr(v3, v2);
          case 0x98:
            return _equalOnConflictExpr(v3, v2);
          case 0x99:
            return _equalIntoClause(v3, v2);
          case 0xCB:
            if (*(_QWORD *)(v3 + 8) != *(_QWORD *)(v2 + 8))
              return 0;
            return *(_DWORD *)(v3 + 16) == *(_DWORD *)(v2 + 16)
                && *(_DWORD *)(v3 + 20) == *(_DWORD *)(v2 + 20)
                && *(unsigned __int8 *)(v3 + 24) == *(unsigned __int8 *)(v2 + 24);
          case 0xCD:
            return _equalRestrictInfo(v3, v2);
          case 0xCF:
            if (*(_DWORD *)(v3 + 24) != *(_DWORD *)(v2 + 24))
              return 0;
            return *(_DWORD *)(v3 + 28) == *(_DWORD *)(v2 + 28);
          case 0xD0:
            return _equalSpecialJoinInfo(v3, v2);
          case 0xD1:
            return _equalAppendRelInfo(v3, v2);
          case 0xD2:
            return _equalPlaceHolderInfo(v3, v2);
          case 0xDD:
          case 0xDE:
          case 0xDF:
          case 0xE0:
          case 0xE1:
            return _equalValue((_DWORD *)v3, (_DWORD *)v2);
          case 0xE2:
          case 0xE3:
          case 0xE4:
            return _equalList((int *)v3, v2);
          case 0xE5:
            return _equalExtensibleNode(v3, v2);
          case 0xE6:
            result = equal(*(_QWORD *)(v3 + 8), *(_QWORD *)(v2 + 8));
            if ((_DWORD)result)
              return *(_DWORD *)(v3 + 20) == *(_DWORD *)(v2 + 20);
            return result;
          case 0xE7:
            return _equalQuery(v3, v2);
          case 0xE9:
            return _equalInsertStmt(v3, v2);
          case 0xEA:
            return _equalDeleteStmt((_QWORD *)v3, (_QWORD *)v2);
          case 0xEB:
            return _equalUpdateStmt((_QWORD *)v3, (_QWORD *)v2);
          case 0xEC:
            return _equalSelectStmt(v3, v2);
          case 0xED:
            return _equalAlterTableStmt(v3, v2);
          case 0xEE:
            return _equalAlterTableCmd(v3, v2);
          case 0xEF:
            return _equalAlterDomainStmt(v3, v2);
          case 0xF0:
            return _equalSetOperationStmt(v3, v2);
          case 0xF1:
            return _equalGrantStmt(v3, v2);
          case 0xF2:
            return _equalGrantRoleStmt(v3, v2);
          case 0xF4:
          case 0x104:
          case 0x105:
          case 0x108:
          case 0x112:
          case 0x128:
            return _equalClosePortalStmt(*(const char **)(v3 + 8), v2);
          case 0xF6:
            return _equalCopyStmt(v3, v2);
          case 0xF7:
            return _equalCreateStmt(v3, v2);
          case 0xF8:
            return _equalDefineStmt(v3, v2);
          case 0xF9:
            return _equalDropStmt(v3, v2);
          case 0xFA:
            return _equalTruncateStmt(v3, v2);
          case 0xFB:
            return _equalCommentStmt(v3, v2);
          case 0xFC:
            return _equalFetchStmt(v3, v2);
          case 0xFD:
            return _equalIndexStmt(v3, v2);
          case 0xFE:
            return _equalCreateFunctionStmt(v3, v2);
          case 0xFF:
          case 0x175:
          case 0x181:
            return _equalAlterFunctionStmt(v3, v2);
          case 0x101:
            return _equalRenameStmt(v3, v2);
          case 0x102:
            return _equalRuleStmt(v3, v2);
          case 0x103:
            return _equalNotifyStmt(v3, v2);
          case 0x106:
            return _equalTransactionStmt(v3, v2);
          case 0x107:
            return _equalViewStmt(v3, v2);
          case 0x109:
          case 0x16B:
            return _equalCreateDomainStmt((_QWORD *)v3, (_QWORD *)v2);
          case 0x10B:
          case 0x145:
            return _equalDropdbStmt(v3, v2);
          case 0x10C:
          case 0x17A:
            return _equalVacuumStmt(v3, v2);
          case 0x10E:
          case 0x10F:
            return _equalCreateTableAsStmt(v3, v2);
          case 0x110:
            return _equalAlterSeqStmt(v3, v2);
          case 0x111:
            return _equalVariableSetStmt(v3, v2);
          case 0x114:
            return _equalCreateTrigStmt(v3, v2);
          case 0x115:
            return _equalCreatePLangStmt(v3, v2);
          case 0x116:
            return _equalCreateRoleStmt(v3, v2);
          case 0x117:
            return _equalAlterRoleStmt(v3, v2);
          case 0x118:
          case 0x11A:
          case 0x182:
            result = equal(*(_QWORD *)(v3 + 8), *(_QWORD *)(v2 + 8));
            if ((_DWORD)result)
              return *(unsigned __int8 *)(v3 + 16) == *(unsigned __int8 *)(v2 + 16);
            return result;
          case 0x11B:
            return _equalReindexStmt(v3, v2);
          case 0x11C:
          case 0x15F:
            return result;
          case 0x11D:
          case 0x151:
            return _equalCreateSchemaStmt(v3, v2);
          case 0x120:
          case 0x13E:
            return _equalAlterUserMappingStmt((_QWORD *)v3, (_QWORD *)v2);
          case 0x121:
            return _equalCreateConversionStmt(v3, v2);
          case 0x122:
            return _equalCreateCastStmt(v3, v2);
          case 0x123:
            return _equalCreateOpClassStmt(v3, v2);
          case 0x124:
            return _equalCreateOpFamilyStmt(v3, v2);
          case 0x125:
          case 0x13D:
            return _equalAlterOpFamilyStmt(v3, v2);
          case 0x126:
          case 0x139:
          case 0x13A:
          case 0x163:
            return _equalCreateFdwStmt((_QWORD *)v3, (_QWORD *)v2);
          case 0x129:
            return _equalDeclareCursorStmt(v3, v2);
          case 0x12A:
            return _equalCreateTableSpaceStmt((_QWORD *)v3, (_QWORD *)v2);
          case 0x12B:
          case 0x149:
            return _equalDropTableSpaceStmt(v3, v2);
          case 0x12C:
            return _equalAlterObjectDependsStmt(v3, v2);
          case 0x12D:
            return _equalAlterObjectSchemaStmt(v3, v2);
          case 0x12E:
          case 0x15A:
          case 0x184:
            return _equalAlterOwnerStmt(v3, v2);
          case 0x136:
            return _equalAlterEnumStmt(v3, v2);
          case 0x138:
            return _equalAlterTSConfigurationStmt(v3, v2);
          case 0x13B:
            return _equalCreateForeignServerStmt(v3, v2);
          case 0x13C:
            return _equalAlterForeignServerStmt(v3, v2);
          case 0x13F:
            return _equalDropUserMappingStmt(v3, v2);
          case 0x140:
          case 0x150:
            return _equalAlterTableSpaceOptionsStmt(v3, v2);
          case 0x141:
            return _equalAlterTableMoveAllStmt(v3, v2);
          case 0x142:
            return _equalSecLabelStmt(v3, v2);
          case 0x143:
            return _equalCreateForeignTableStmt(v3, v2);
          case 0x144:
            return _equalImportForeignSchemaStmt(v3, v2);
          case 0x147:
            return _equalAlterExtensionContentsStmt(v3, v2);
          case 0x148:
          case 0x153:
            return _equalCreateEventTrigStmt((_QWORD *)v3, (_QWORD *)v2);
          case 0x14A:
            return _equalRefreshMatViewStmt(v3, v2);
          case 0x14B:
            return _equalReplicaIdentityStmt(v3, v2);
          case 0x14D:
            return _equalCreatePolicyStmt(v3, v2);
          case 0x14E:
            return _equalAlterPolicyStmt((_QWORD *)v3, (_QWORD *)v2);
          case 0x14F:
            return _equalCreateTransformStmt(v3, v2);
          case 0x152:
            return _equalAlterPublicationStmt(v3, v2);
          case 0x154:
            return _equalAlterSubscriptionStmt(v3, v2);
          case 0x155:
            return _equalDropSubscriptionStmt(v3, v2);
          case 0x156:
            return _equalCreateStatsStmt(v3, v2);
          case 0x15D:
            v3 += 8;
            v2 += 8;
            if (v3 == v2)
              return result;
            continue;
          case 0x15E:
            return _equalFuncCall(v3, v2);
          case 0x160:
          case 0x169:
            return _equalAIndices(v3, v2);
          case 0x167:
            return _equalSortBy(v3, v2);
          case 0x168:
            return _equalWindowDef(v3, v2);
          case 0x16A:
            return _equalRangeFunction(v3, v2);
          case 0x16C:
            return _equalRangeTableFunc(v3, v2);
          case 0x16D:
            return _equalRangeTableFuncCol(v3, v2);
          case 0x16E:
            return _equalTypeName(v3, v2);
          case 0x16F:
            return _equalColumnDef(v3, v2);
          case 0x170:
            return _equalIndexElem(v3, v2);
          case 0x171:
            return _equalConstraint(v3, v2);
          case 0x172:
            return _equalDefElem(v3, v2);
          case 0x173:
            return _equalRangeTblEntry(v3, v2);
          case 0x174:
            return _equalRangeTblFunction(v3, v2);
          case 0x176:
            return _equalWithCheckOption(v3, v2);
          case 0x177:
            return _equalSortGroupClause(v3, v2);
          case 0x179:
            return _equalWindowClause(v3, v2);
          case 0x17C:
            return _equalCreateOpClassItem(v3, v2);
          case 0x17E:
            return _equalFunctionParameter(v3, v2);
          case 0x180:
            if (*(_DWORD *)(v3 + 4) != *(_DWORD *)(v2 + 4)
              || *(_DWORD *)(v3 + 8) != *(_DWORD *)(v2 + 8)
              || *(_DWORD *)(v3 + 12) != *(_DWORD *)(v2 + 12))
            {
              return 0;
            }
            return *(unsigned __int8 *)(v3 + 16) == *(unsigned __int8 *)(v2 + 16);
          case 0x183:
            return _equalInferClause((_QWORD *)v3, (_QWORD *)v2);
          case 0x185:
            return _equalCommonTableExpr(v3, v2);
          case 0x186:
            return _equalRoleSpec(v3, v2);
          case 0x187:
            return _equalTriggerTransition(v3, v2);
          case 0x188:
            return _equalPartitionElem((_QWORD *)v3, (_QWORD *)v2);
          case 0x18A:
            return _equalPartitionBoundSpec(v3, v2);
          case 0x18B:
            if (*(_DWORD *)(v3 + 4) != *(_DWORD *)(v2 + 4))
              return 0;
LABEL_12:
            v3 = *(_QWORD *)(v3 + 8);
            v2 = *(_QWORD *)(v2 + 8);
            if (v3 == v2)
              return result;
            continue;
          default:
            equal_cold_1();
        }
      }
      return 0;
    }
    return result;
  }
}

uint64_t _equalAlias(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (v5 && !strcmp(v4, v5))
      return equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  }
  else if (!v5)
  {
    return equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  }
  return 0;
}

uint64_t _equalRangeVar(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(const char **)(a1 + 16);
  v7 = *(const char **)(a2 + 16);
  if (v6)
  {
    if (!v7 || strcmp(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(const char **)(a1 + 24);
  v9 = *(const char **)(a2 + 24);
  if (v8)
  {
    if (!v9 || strcmp(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
    && *(unsigned __int8 *)(a1 + 33) == *(unsigned __int8 *)(a2 + 33))
  {
    return equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
  }
  return 0;
}

uint64_t _equalTableFunc(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
      if ((_DWORD)result)
      {
        result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
        if ((_DWORD)result)
        {
          result = equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
          if ((_DWORD)result)
          {
            result = equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
            if ((_DWORD)result)
            {
              result = equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
              if ((_DWORD)result)
              {
                result = equal(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64));
                if ((_DWORD)result)
                {
                  result = equal(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72));
                  if ((_DWORD)result)
                  {
                    result = equal(*(_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80));
                    if ((_DWORD)result)
                    {
                      result = bms_equal(*(unsigned int **)(a1 + 88), *(unsigned int **)(a2 + 88));
                      if ((_DWORD)result)
                        return *(_DWORD *)(a1 + 96) == *(_DWORD *)(a2 + 96);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _equalIntoClause(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
    {
      v5 = *(const char **)(a1 + 24);
      v6 = *(const char **)(a2 + 24);
      if (v5)
      {
        if (!v6)
          return 0;
        if (strcmp(v5, v6))
          return 0;
      }
      else if (v6)
      {
        return 0;
      }
      result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
      if (!(_DWORD)result)
        return result;
      if (*(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
        return 0;
      v7 = *(const char **)(a1 + 48);
      v8 = *(const char **)(a2 + 48);
      if (v7)
      {
        if (!v8 || strcmp(v7, v8))
          return 0;
        goto LABEL_15;
      }
      if (!v8)
      {
LABEL_15:
        result = equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
        if ((_DWORD)result)
          return *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64);
        return result;
      }
      return 0;
    }
  }
  return result;
}

BOOL _equalVar(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(unsigned __int16 *)(a1 + 8) == *(unsigned __int16 *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
}

BOOL _equalConst(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
    return 0;
  if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
    return 0;
  v2 = *(_DWORD *)(a1 + 16);
  if (v2 != *(_DWORD *)(a2 + 16) || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
    return 0;
  v3 = *(unsigned __int8 *)(a1 + 33);
  if (*(_BYTE *)(a1 + 32) || v3 != *(unsigned __int8 *)(a2 + 33))
    return v3 == *(unsigned __int8 *)(a2 + 33);
  else
    return datumIsEqual(*(const char **)(a1 + 24), *(const char **)(a2 + 24), v3 != 0, v2);
}

BOOL _equalParam(_DWORD *a1, _DWORD *a2)
{
  return a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4] && a1[5] == a2[5];
}

uint64_t _equalAggref(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    return 0;
  }
  result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
      if ((_DWORD)result)
      {
        result = equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
        if ((_DWORD)result)
        {
          result = equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
          if ((_DWORD)result)
          {
            result = equal(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64));
            if ((_DWORD)result)
            {
              if (*(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72)
                && *(unsigned __int8 *)(a1 + 73) == *(unsigned __int8 *)(a2 + 73)
                && *(unsigned __int8 *)(a1 + 74) == *(unsigned __int8 *)(a2 + 74)
                && *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76))
              {
                return *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80);
              }
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _equalWindowFunc(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    return 0;
  }
  result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
    if ((_DWORD)result)
    {
      if (*(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
        && *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44))
      {
        return *(unsigned __int8 *)(a1 + 45) == *(unsigned __int8 *)(a2 + 45);
      }
      return 0;
    }
  }
  return result;
}

uint64_t _equalSubscriptingRef(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
    && equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24))
    && equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32))
    && equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40)))
  {
    return equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalFuncExpr(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int8 *)(a1 + 12) == *(unsigned __int8 *)(a2 + 12)
    && *(unsigned __int8 *)(a1 + 13) == *(unsigned __int8 *)(a2 + 13)
    && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24))
  {
    return equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalNamedArgExpr(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v5 = *(const char **)(a1 + 16);
    v6 = *(const char **)(a2 + 16);
    if (v5)
    {
      if (v6)
      {
        if (strcmp(v5, v6))
          return 0;
        return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
      }
    }
    else if (!v6)
    {
      return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
    }
    return 0;
  }
  return result;
}

uint64_t _equalOpExpr(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  BOOL v5;

  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && ((v2 = *(_DWORD *)(a1 + 8), (v3 = *(_DWORD *)(a2 + 8)) != 0) ? (v4 = v2 == 0) : (v4 = 1),
        !v4 ? (v5 = v2 == v3) : (v5 = 1),
        v5
     && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
     && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
     && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
     && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)))
  {
    return equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalScalarArrayOpExpr(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  BOOL v5;

  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && ((v2 = *(_DWORD *)(a1 + 8), (v3 = *(_DWORD *)(a2 + 8)) != 0) ? (v4 = v2 == 0) : (v4 = 1),
        !v4 ? (v5 = v2 == v3) : (v5 = 1),
        v5
     && *(unsigned __int8 *)(a1 + 12) == *(unsigned __int8 *)(a2 + 12)
     && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)))
  {
    return equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalSubLink(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16))
    && equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)))
  {
    return equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalSubPlan(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
    {
      if (*(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24))
      {
        v5 = *(const char **)(a1 + 32);
        v6 = *(const char **)(a2 + 32);
        if (v5)
        {
          if (!v6 || strcmp(v5, v6))
            return 0;
LABEL_12:
          if (*(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)
            || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)
            || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)
            || *(unsigned __int8 *)(a1 + 52) != *(unsigned __int8 *)(a2 + 52)
            || *(unsigned __int8 *)(a1 + 53) != *(unsigned __int8 *)(a2 + 53)
            || *(unsigned __int8 *)(a1 + 54) != *(unsigned __int8 *)(a2 + 54))
          {
            return 0;
          }
          result = equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
          if ((_DWORD)result)
          {
            result = equal(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64));
            if ((_DWORD)result)
            {
              result = equal(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72));
              if ((_DWORD)result)
              {
                if (*(double *)(a1 + 80) != *(double *)(a2 + 80))
                  return 0;
                return *(double *)(a1 + 88) == *(double *)(a2 + 88);
              }
            }
          }
          return result;
        }
        if (!v6)
          goto LABEL_12;
      }
      return 0;
    }
  }
  return result;
}

uint64_t _equalFieldSelect(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
    return *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
        && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
        && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
        && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  return result;
}

uint64_t _equalFieldStore(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
      if ((_DWORD)result)
        return *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
    }
  }
  return result;
}

uint64_t _equalRelabelType(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
    return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
        && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
        && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t _equalCoerceViaIO(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
    return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16) && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t _equalArrayCoerceExpr(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
      return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
          && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
          && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  }
  return result;
}

uint64_t _equalCaseWhen(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
    return equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  return result;
}

uint64_t _equalArrayExpr(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
  {
    return 0;
  }
  result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  if ((_DWORD)result)
    return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
  return result;
}

uint64_t _equalRowExpr(uint64_t a1, uint64_t a2)
{
  if (equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
    return equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  else
    return 0;
}

uint64_t _equalRowCompareExpr(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8))
    && equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16))
    && equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24))
    && equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32)))
  {
    return equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalCoalesceExpr(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4) && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
    return equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  else
    return 0;
}

uint64_t _equalMinMaxExpr(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    return equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalXmlExpr(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    if (strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
      if ((_DWORD)result)
      {
        if (*(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40) && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44))
          return *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
        return 0;
      }
    }
  }
  return result;
}

uint64_t _equalNullTest(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
    return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
        && *(unsigned __int8 *)(a1 + 20) == *(unsigned __int8 *)(a2 + 20);
  return result;
}

BOOL _equalCurrentOfExpr(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

uint64_t _equalTargetEntry(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    if (*(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16))
    {
      v5 = *(const char **)(a1 + 24);
      v6 = *(const char **)(a2 + 24);
      if (v5)
      {
        if (v6)
        {
          if (strcmp(v5, v6))
            return 0;
          goto LABEL_9;
        }
      }
      else if (!v6)
      {
LABEL_9:
        if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
          && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
          && *(unsigned __int16 *)(a1 + 40) == *(unsigned __int16 *)(a2 + 40))
        {
          return *(unsigned __int8 *)(a1 + 42) == *(unsigned __int8 *)(a2 + 42);
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t _equalOnConflictExpr(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8))
    && equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16))
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32))
    && equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40))
    && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48))
  {
    return equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalJoinExpr(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  if (*(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8))
    return 0;
  result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
      if ((_DWORD)result)
      {
        result = equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
        if ((_DWORD)result)
        {
          result = equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
          if ((_DWORD)result)
            return *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
        }
      }
    }
  }
  return result;
}

BOOL _equalRestrictInfo(uint64_t a1, uint64_t a2)
{
  return equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8))
      && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
      && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && bms_equal(*(unsigned int **)(a1 + 40), *(unsigned int **)(a2 + 40))
      && bms_equal(*(unsigned int **)(a1 + 48), *(unsigned int **)(a2 + 48))
      && bms_equal(*(unsigned int **)(a1 + 56), *(unsigned int **)(a2 + 56));
}

uint64_t _equalSpecialJoinInfo(uint64_t a1, uint64_t a2)
{
  if (bms_equal(*(unsigned int **)(a1 + 8), *(unsigned int **)(a2 + 8))
    && bms_equal(*(unsigned int **)(a1 + 16), *(unsigned int **)(a2 + 16))
    && bms_equal(*(unsigned int **)(a1 + 24), *(unsigned int **)(a2 + 24))
    && bms_equal(*(unsigned int **)(a1 + 32), *(unsigned int **)(a2 + 32))
    && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
    && *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44)
    && *(unsigned __int8 *)(a1 + 45) == *(unsigned __int8 *)(a2 + 45)
    && *(unsigned __int8 *)(a1 + 46) == *(unsigned __int8 *)(a2 + 46)
    && *(unsigned __int8 *)(a1 + 47) == *(unsigned __int8 *)(a2 + 47)
    && equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48)))
  {
    return equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalAppendRelInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    return 0;
  }
  result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  if ((_DWORD)result)
  {
    v5 = *(int *)(a1 + 32);
    if ((_DWORD)v5 != *(_DWORD *)(a2 + 32) || memcmp(*(const void **)(a1 + 40), *(const void **)(a2 + 40), 2 * v5))
      return 0;
    return *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
  }
  return result;
}

uint64_t _equalPlaceHolderInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = bms_equal(*(unsigned int **)(a1 + 16), *(unsigned int **)(a2 + 16));
    if ((_DWORD)result)
    {
      result = bms_equal(*(unsigned int **)(a1 + 24), *(unsigned int **)(a2 + 24));
      if ((_DWORD)result)
      {
        result = bms_equal(*(unsigned int **)(a1 + 32), *(unsigned int **)(a2 + 32));
        if ((_DWORD)result)
          return *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
      }
    }
  }
  return result;
}

uint64_t _equalList(int *a1, uint64_t a2)
{
  int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t result;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;

  v2 = *a1;
  if (*a1 != *(_DWORD *)a2)
    return 0;
  v5 = a1[1];
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 4))
    return 0;
  switch(v2)
  {
    case 226:
      v11 = 0;
      v12 = 0;
      do
      {
        if (v12 >= a1[1])
          v13 = 0;
        else
          v13 = (_QWORD *)(*((_QWORD *)a1 + 2) + v11);
        result = 1;
        if (v12 >= *(int *)(a2 + 4))
          break;
        if (!v13)
          break;
        v14 = (_QWORD *)(*(_QWORD *)(a2 + 16) + v11);
        if (!v14)
          break;
        v15 = equal(*v13, *v14);
        result = 0;
        ++v12;
        v11 += 8;
      }
      while ((v15 & 1) != 0);
      break;
    case 227:
      v16 = 0;
      v17 = 0;
      do
      {
        if (v17 >= v5)
          v18 = 0;
        else
          v18 = (_DWORD *)(*((_QWORD *)a1 + 2) + v16);
        ++v17;
        result = 1;
        if ((v5 & ~((int)v5 >> 31)) + 1 == v17)
          break;
        if (!v18)
          break;
        v19 = (_DWORD *)(*(_QWORD *)(a2 + 16) + v16);
        if (!v19)
          break;
        result = 0;
        v16 += 8;
      }
      while (*v18 == *v19);
      break;
    case 228:
      v6 = 0;
      v7 = 0;
      do
      {
        if (v7 >= v5)
          v8 = 0;
        else
          v8 = (_DWORD *)(*((_QWORD *)a1 + 2) + v6);
        ++v7;
        result = 1;
        if ((v5 & ~((int)v5 >> 31)) + 1 == v7)
          break;
        if (!v8)
          break;
        v10 = (_DWORD *)(*(_QWORD *)(a2 + 16) + v6);
        if (!v10)
          break;
        result = 0;
        v6 += 8;
      }
      while (*v8 == *v10);
      break;
    default:
      _equalList_cold_1();
  }
  return result;
}

uint64_t _equalValue(_DWORD *a1, _DWORD *a2)
{
  int v2;
  const char *v3;
  const char *v4;

  v2 = *a1;
  if (*a1 != *a2)
    return 0;
  if ((v2 - 222) >= 3)
  {
    if (v2 != 225)
    {
      if (v2 != 221)
        _equalValue_cold_1();
      if (a1[2] != a2[2])
        return 0;
    }
    return 1;
  }
  v3 = (const char *)*((_QWORD *)a1 + 1);
  v4 = (const char *)*((_QWORD *)a2 + 1);
  if (v3)
    return v4 && !strcmp(v3, v4);
  return !v4;
}

uint64_t _equalExtensibleNode(uint64_t a1, uint64_t a2)
{
  char *v4;
  const char *v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v4 = *(char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (v5 && !strcmp(*(const char **)(a1 + 8), v5))
      goto LABEL_4;
  }
  else if (!v5)
  {
LABEL_4:
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(GetExtensibleNodeMethods(v4, 0) + 24);
    return v6(a1, a2);
  }
  return 0;
}

uint64_t _equalQuery(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8) || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24))
    return 0;
  result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  if (!(_DWORD)result)
    return result;
  if (*(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)
    || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44)
    || *(unsigned __int8 *)(a1 + 45) != *(unsigned __int8 *)(a2 + 45)
    || *(unsigned __int8 *)(a1 + 46) != *(unsigned __int8 *)(a2 + 46)
    || *(unsigned __int8 *)(a1 + 47) != *(unsigned __int8 *)(a2 + 47)
    || *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)
    || *(unsigned __int8 *)(a1 + 49) != *(unsigned __int8 *)(a2 + 49)
    || *(unsigned __int8 *)(a1 + 50) != *(unsigned __int8 *)(a2 + 50)
    || *(unsigned __int8 *)(a1 + 51) != *(unsigned __int8 *)(a2 + 51)
    || *(unsigned __int8 *)(a1 + 52) != *(unsigned __int8 *)(a2 + 52))
  {
    return 0;
  }
  result = equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
  if (!(_DWORD)result)
    return result;
  result = equal(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64));
  if (!(_DWORD)result)
    return result;
  result = equal(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72));
  if (!(_DWORD)result)
    return result;
  result = equal(*(_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80));
  if (!(_DWORD)result)
    return result;
  if (*(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
    return 0;
  result = equal(*(_QWORD *)(a1 + 96), *(_QWORD *)(a2 + 96));
  if (!(_DWORD)result)
    return result;
  result = equal(*(_QWORD *)(a1 + 104), *(_QWORD *)(a2 + 104));
  if (!(_DWORD)result)
    return result;
  result = equal(*(_QWORD *)(a1 + 112), *(_QWORD *)(a2 + 112));
  if (!(_DWORD)result)
    return result;
  result = equal(*(_QWORD *)(a1 + 120), *(_QWORD *)(a2 + 120));
  if (!(_DWORD)result)
    return result;
  result = equal(*(_QWORD *)(a1 + 128), *(_QWORD *)(a2 + 128));
  if (!(_DWORD)result)
    return result;
  result = equal(*(_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136));
  if (!(_DWORD)result)
    return result;
  result = equal(*(_QWORD *)(a1 + 144), *(_QWORD *)(a2 + 144));
  if (!(_DWORD)result)
    return result;
  result = equal(*(_QWORD *)(a1 + 152), *(_QWORD *)(a2 + 152));
  if (!(_DWORD)result)
    return result;
  result = equal(*(_QWORD *)(a1 + 160), *(_QWORD *)(a2 + 160));
  if (!(_DWORD)result)
    return result;
  result = equal(*(_QWORD *)(a1 + 168), *(_QWORD *)(a2 + 168));
  if (!(_DWORD)result)
    return result;
  if (*(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176))
    return 0;
  result = equal(*(_QWORD *)(a1 + 184), *(_QWORD *)(a2 + 184));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 192), *(_QWORD *)(a2 + 192));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 200), *(_QWORD *)(a2 + 200));
      if ((_DWORD)result)
      {
        result = equal(*(_QWORD *)(a1 + 208), *(_QWORD *)(a2 + 208));
        if ((_DWORD)result)
          return *(_DWORD *)(a1 + 220) == *(_DWORD *)(a2 + 220);
      }
    }
  }
  return result;
}

uint64_t _equalInsertStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
      if ((_DWORD)result)
      {
        result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
        if ((_DWORD)result)
        {
          result = equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
          if ((_DWORD)result)
          {
            result = equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
            if ((_DWORD)result)
              return *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
          }
        }
      }
    }
  }
  return result;
}

uint64_t _equalDeleteStmt(_QWORD *a1, _QWORD *a2)
{
  if (equal(a1[1], a2[1])
    && equal(a1[2], a2[2])
    && equal(a1[3], a2[3])
    && equal(a1[4], a2[4]))
  {
    return equal(a1[5], a2[5]);
  }
  else
  {
    return 0;
  }
}

uint64_t _equalUpdateStmt(_QWORD *a1, _QWORD *a2)
{
  if (equal(a1[1], a2[1])
    && equal(a1[2], a2[2])
    && equal(a1[3], a2[3])
    && equal(a1[4], a2[4])
    && equal(a1[5], a2[5]))
  {
    return equal(a1[6], a2[6]);
  }
  else
  {
    return 0;
  }
}

uint64_t _equalSelectStmt(uint64_t a1, uint64_t a2)
{
  if (equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8))
    && equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16))
    && equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24))
    && equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32))
    && equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40))
    && equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48))
    && equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56))
    && equal(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64))
    && equal(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72))
    && equal(*(_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80))
    && equal(*(_QWORD *)(a1 + 88), *(_QWORD *)(a2 + 88))
    && equal(*(_QWORD *)(a1 + 96), *(_QWORD *)(a2 + 96))
    && *(_DWORD *)(a1 + 104) == *(_DWORD *)(a2 + 104)
    && equal(*(_QWORD *)(a1 + 112), *(_QWORD *)(a2 + 112))
    && equal(*(_QWORD *)(a1 + 120), *(_QWORD *)(a2 + 120))
    && *(_DWORD *)(a1 + 128) == *(_DWORD *)(a2 + 128)
    && *(unsigned __int8 *)(a1 + 132) == *(unsigned __int8 *)(a2 + 132)
    && equal(*(_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136)))
  {
    return equal(*(_QWORD *)(a1 + 144), *(_QWORD *)(a2 + 144));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalSetOperationStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
    && equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16))
    && equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24))
    && equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32))
    && equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40))
    && equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48)))
  {
    return equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalAlterTableStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
      return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
          && *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28);
  }
  return result;
}

uint64_t _equalAlterTableCmd(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (!v4)
  {
    if (!v5)
      goto LABEL_7;
    return 0;
  }
  if (!v5)
    return 0;
  if (strcmp(v4, v5))
    return 0;
LABEL_7:
  if (*(unsigned __int16 *)(a1 + 16) != *(unsigned __int16 *)(a2 + 16))
    return 0;
  result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
    if ((_DWORD)result)
    {
      if (*(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40))
        return *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44);
      return 0;
    }
  }
  return result;
}

uint64_t _equalAlterDomainStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;

  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 4))
    return 0;
  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if (!(_DWORD)result)
    return result;
  v5 = *(const char **)(a1 + 16);
  v6 = *(const char **)(a2 + 16);
  if (!v5)
  {
    if (!v6)
      goto LABEL_8;
    return 0;
  }
  if (!v6)
    return 0;
  if (strcmp(v5, v6))
    return 0;
LABEL_8:
  result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32))
      return *(unsigned __int8 *)(a1 + 36) == *(unsigned __int8 *)(a2 + 36);
    return 0;
  }
  return result;
}

uint64_t _equalGrantStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 4))
    return 0;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8) || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
    return 0;
  result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
      if ((_DWORD)result)
      {
        if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
          return *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44);
        return 0;
      }
    }
  }
  return result;
}

uint64_t _equalGrantRoleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
    {
      if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
        && *(unsigned __int8 *)(a1 + 25) == *(unsigned __int8 *)(a2 + 25))
      {
        result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
        if ((_DWORD)result)
          return *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t _equalDeclareCursorStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
    return equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  return 0;
}

uint64_t _equalClosePortalStmt(const char *a1, uint64_t a2)
{
  const char *v2;

  v2 = *(const char **)(a2 + 8);
  if (a1 && v2)
  {
    if (strcmp(a1, v2))
      return 0;
  }
  else if (v2 != a1)
  {
    return 0;
  }
  return 1;
}

uint64_t _equalCopyStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  if (!equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8))
    || !equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16))
    || !equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24))
    || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)
    || *(unsigned __int8 *)(a1 + 33) != *(unsigned __int8 *)(a2 + 33))
  {
    return 0;
  }
  v4 = *(const char **)(a1 + 40);
  v5 = *(const char **)(a2 + 40);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48)))
    return equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
  return 0;
}

uint64_t _equalCreateStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
      if ((_DWORD)result)
      {
        result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
        if ((_DWORD)result)
        {
          result = equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
          if ((_DWORD)result)
          {
            result = equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
            if ((_DWORD)result)
            {
              result = equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
              if ((_DWORD)result)
              {
                result = equal(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64));
                if ((_DWORD)result)
                {
                  if (*(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72))
                  {
                    v5 = *(const char **)(a1 + 80);
                    v6 = *(const char **)(a2 + 80);
                    if (v5)
                    {
                      if (!v6 || strcmp(v5, v6))
                        return 0;
                    }
                    else if (v6)
                    {
                      return 0;
                    }
                    v7 = *(const char **)(a1 + 88);
                    v8 = *(const char **)(a2 + 88);
                    if (v7)
                    {
                      if (!v8 || strcmp(v7, v8))
                        return 0;
                      return *(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96);
                    }
                    if (!v8)
                      return *(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96);
                    return 0;
                  }
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _equalDefineStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  if (*(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8))
    return 0;
  result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
      if ((_DWORD)result)
      {
        if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
          return *(unsigned __int8 *)(a1 + 41) == *(unsigned __int8 *)(a2 + 41);
        return 0;
      }
    }
  }
  return result;
}

uint64_t _equalDropStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
    return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
        && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
        && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
        && *(unsigned __int8 *)(a1 + 25) == *(unsigned __int8 *)(a2 + 25);
  return result;
}

uint64_t _equalTruncateStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
    return *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
        && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t _equalCommentStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if (!(_DWORD)result)
    return result;
  v5 = *(const char **)(a1 + 16);
  v6 = *(const char **)(a2 + 16);
  if (!v5)
    return !v6;
  if (!v6)
    return 0;
  return !strcmp(v5, v6);
}

uint64_t _equalSecLabelStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if (!(_DWORD)result)
    return result;
  v5 = *(const char **)(a1 + 16);
  v6 = *(const char **)(a2 + 16);
  if (!v5)
  {
    if (v6)
      return 0;
    goto LABEL_9;
  }
  if (!v6)
    return 0;
  if (!strcmp(v5, v6))
  {
LABEL_9:
    v7 = *(const char **)(a1 + 24);
    v8 = *(const char **)(a2 + 24);
    if (v7)
      return v8 && !strcmp(v7, v8);
    return !v8;
  }
  return 0;
}

BOOL _equalFetchStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4) || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  v4 = *(const char **)(a1 + 16);
  v5 = *(const char **)(a2 + 16);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
}

uint64_t _equalIndexStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    if (strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  if ((_DWORD)result)
  {
    v7 = *(const char **)(a1 + 24);
    v8 = *(const char **)(a2 + 24);
    if (v7)
    {
      if (!v8 || strcmp(v7, v8))
        return 0;
    }
    else if (v8)
    {
      return 0;
    }
    v9 = *(const char **)(a1 + 32);
    v10 = *(const char **)(a2 + 32);
    if (v9)
    {
      if (!v10 || strcmp(v9, v10))
        return 0;
    }
    else if (v10)
    {
      return 0;
    }
    result = equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
      if ((_DWORD)result)
      {
        result = equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
        if ((_DWORD)result)
        {
          result = equal(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64));
          if ((_DWORD)result)
          {
            result = equal(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72));
            if ((_DWORD)result)
            {
              v11 = *(const char **)(a1 + 80);
              v12 = *(const char **)(a2 + 80);
              if (v11)
              {
                if (!v12 || strcmp(v11, v12))
                  return 0;
              }
              else if (v12)
              {
                return 0;
              }
              if (*(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88)
                && *(_DWORD *)(a1 + 92) == *(_DWORD *)(a2 + 92)
                && *(_DWORD *)(a1 + 96) == *(_DWORD *)(a2 + 96)
                && *(_DWORD *)(a1 + 100) == *(_DWORD *)(a2 + 100)
                && *(unsigned __int8 *)(a1 + 104) == *(unsigned __int8 *)(a2 + 104)
                && *(unsigned __int8 *)(a1 + 105) == *(unsigned __int8 *)(a2 + 105)
                && *(unsigned __int8 *)(a1 + 106) == *(unsigned __int8 *)(a2 + 106)
                && *(unsigned __int8 *)(a1 + 107) == *(unsigned __int8 *)(a2 + 107)
                && *(unsigned __int8 *)(a1 + 108) == *(unsigned __int8 *)(a2 + 108)
                && *(unsigned __int8 *)(a1 + 109) == *(unsigned __int8 *)(a2 + 109)
                && *(unsigned __int8 *)(a1 + 110) == *(unsigned __int8 *)(a2 + 110)
                && *(unsigned __int8 *)(a1 + 111) == *(unsigned __int8 *)(a2 + 111))
              {
                return *(unsigned __int8 *)(a1 + 112) == *(unsigned __int8 *)(a2 + 112);
              }
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _equalCreateStatsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
      if ((_DWORD)result)
      {
        result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
        if ((_DWORD)result)
        {
          v5 = *(const char **)(a1 + 40);
          v6 = *(const char **)(a2 + 40);
          if (!v5)
          {
            if (v6)
              return 0;
            return *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48);
          }
          if (v6)
          {
            if (strcmp(v5, v6))
              return 0;
            return *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48);
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t _equalCreateFunctionStmt(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 4) == *(unsigned __int8 *)(a2 + 4)
    && *(unsigned __int8 *)(a1 + 5) == *(unsigned __int8 *)(a2 + 5)
    && equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8))
    && equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16))
    && equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)))
  {
    return equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalFunctionParameter(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24))
    return equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  return 0;
}

uint64_t _equalAlterFunctionStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4) && equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)))
    return equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  else
    return 0;
}

uint64_t _equalRenameStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
    return 0;
  result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
    if ((_DWORD)result)
    {
      v5 = *(const char **)(a1 + 32);
      v6 = *(const char **)(a2 + 32);
      if (v5)
      {
        if (!v6 || strcmp(v5, v6))
          return 0;
      }
      else if (v6)
      {
        return 0;
      }
      v7 = *(const char **)(a1 + 40);
      v8 = *(const char **)(a2 + 40);
      if (v7)
      {
        if (v8 && !strcmp(v7, v8))
        {
LABEL_17:
          if (*(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48))
            return *(unsigned __int8 *)(a1 + 52) == *(unsigned __int8 *)(a2 + 52);
        }
      }
      else if (!v8)
      {
        goto LABEL_17;
      }
      return 0;
    }
  }
  return result;
}

uint64_t _equalAlterObjectDependsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
      if ((_DWORD)result)
        return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
    }
  }
  return result;
}

uint64_t _equalAlterObjectSchemaStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
    {
      v5 = *(const char **)(a1 + 24);
      v6 = *(const char **)(a2 + 24);
      if (v5)
      {
        if (v6)
        {
          if (strcmp(v5, v6))
            return 0;
          return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
        }
      }
      else if (!v6)
      {
        return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
      }
      return 0;
    }
  }
  return result;
}

uint64_t _equalAlterOwnerStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8))
    && equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)))
  {
    return equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalRuleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v5 = *(const char **)(a1 + 16);
    v6 = *(const char **)(a2 + 16);
    if (v5)
    {
      if (!v6)
        return 0;
      if (strcmp(v5, v6))
        return 0;
    }
    else if (v6)
    {
      return 0;
    }
    result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
    if (!(_DWORD)result)
      return result;
    if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32) && *(unsigned __int8 *)(a1 + 36) == *(unsigned __int8 *)(a2 + 36))
    {
      result = equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
      if ((_DWORD)result)
        return *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48);
      return result;
    }
    return 0;
  }
  return result;
}

BOOL _equalNotifyStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(const char **)(a1 + 16);
  v7 = *(const char **)(a2 + 16);
  if (!v6)
    return !v7;
  return v7 && !strcmp(v6, v7);
}

uint64_t _equalTransactionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if (!(_DWORD)result)
    return result;
  v5 = *(const char **)(a1 + 16);
  v6 = *(const char **)(a2 + 16);
  if (!v5)
  {
    if (v6)
      return 0;
    goto LABEL_9;
  }
  if (!v6)
    return 0;
  if (!strcmp(v5, v6))
  {
LABEL_9:
    v7 = *(const char **)(a1 + 24);
    v8 = *(const char **)(a2 + 24);
    if (v7)
    {
      if (!v8 || strcmp(v7, v8))
        return 0;
      return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
    }
    if (!v8)
      return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
    return 0;
  }
  return 0;
}

uint64_t _equalAlterEnumStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v5 = *(const char **)(a1 + 16);
    v6 = *(const char **)(a2 + 16);
    if (v5)
    {
      if (!v6)
        return 0;
      if (strcmp(v5, v6))
        return 0;
    }
    else if (v6)
    {
      return 0;
    }
    v7 = *(const char **)(a1 + 24);
    v8 = *(const char **)(a2 + 24);
    if (v7)
    {
      if (!v8 || strcmp(v7, v8))
        return 0;
    }
    else if (v8)
    {
      return 0;
    }
    v9 = *(const char **)(a1 + 32);
    v10 = *(const char **)(a2 + 32);
    if (v9)
    {
      if (v10 && !strcmp(v9, v10))
      {
LABEL_18:
        if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
          return *(unsigned __int8 *)(a1 + 41) == *(unsigned __int8 *)(a2 + 41);
      }
    }
    else if (!v10)
    {
      goto LABEL_18;
    }
    return 0;
  }
  return result;
}

uint64_t _equalViewStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
      if ((_DWORD)result)
      {
        if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
        {
          result = equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
          if ((_DWORD)result)
            return *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t _equalCreateDomainStmt(_QWORD *a1, _QWORD *a2)
{
  if (equal(a1[1], a2[1]) && equal(a1[2], a2[2]) && equal(a1[3], a2[3]))
    return equal(a1[4], a2[4]);
  else
    return 0;
}

uint64_t _equalCreateOpClassStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if (!(_DWORD)result)
    return result;
  result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  if (!(_DWORD)result)
    return result;
  v5 = *(const char **)(a1 + 24);
  v6 = *(const char **)(a2 + 24);
  if (v5)
  {
    if (v6)
    {
      if (strcmp(v5, v6))
        return 0;
      goto LABEL_9;
    }
    return 0;
  }
  if (v6)
    return 0;
LABEL_9:
  result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
    if ((_DWORD)result)
      return *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48);
  }
  return result;
}

uint64_t _equalCreateOpClassItem(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8))
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
    && equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24))
    && equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32)))
  {
    return equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalCreateOpFamilyStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v5 = *(const char **)(a1 + 16);
    v6 = *(const char **)(a2 + 16);
    if (v5)
    {
      if (v6)
        return !strcmp(v5, v6);
    }
    else if (!v6)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t _equalAlterOpFamilyStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  if (!equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)))
    return 0;
  v4 = *(const char **)(a1 + 16);
  v5 = *(const char **)(a2 + 16);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
    return equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  return 0;
}

uint64_t _equalDropdbStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
    return equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  return 0;
}

uint64_t _equalVacuumStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
      return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
  }
  return result;
}

uint64_t _equalCreateTableAsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
      return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
          && *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28)
          && *(unsigned __int8 *)(a1 + 29) == *(unsigned __int8 *)(a2 + 29);
  }
  return result;
}

uint64_t _equalRefreshMatViewStmt(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 4) == *(unsigned __int8 *)(a2 + 4)
    && *(unsigned __int8 *)(a1 + 5) == *(unsigned __int8 *)(a2 + 5))
  {
    return equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalReplicaIdentityStmt(uint64_t a1, uint64_t a2)
{
  const char *v2;
  const char *v3;

  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 4))
    return 0;
  v2 = *(const char **)(a1 + 8);
  v3 = *(const char **)(a2 + 8);
  if (v2)
  {
    if (!v3 || strcmp(v2, v3))
      return 0;
  }
  else if (v3)
  {
    return 0;
  }
  return 1;
}

uint64_t _equalAlterSeqStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
      return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
          && *(unsigned __int8 *)(a1 + 25) == *(unsigned __int8 *)(a2 + 25);
  }
  return result;
}

uint64_t _equalVariableSetStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (v5)
    {
      if (strcmp(v4, v5))
        return 0;
      goto LABEL_8;
    }
    return 0;
  }
  if (v5)
    return 0;
LABEL_8:
  result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  if ((_DWORD)result)
    return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
  return result;
}

uint64_t _equalCreateTableSpaceStmt(_QWORD *a1, _QWORD *a2)
{
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  v4 = (const char *)a1[1];
  v5 = (const char *)a2[1];
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (equal(a1[2], a2[2]))
  {
    v6 = (const char *)a1[3];
    v7 = (const char *)a2[3];
    if (v6)
    {
      if (v7 && !strcmp(v6, v7))
        return equal(a1[4], a2[4]);
    }
    else if (!v7)
    {
      return equal(a1[4], a2[4]);
    }
  }
  return 0;
}

BOOL _equalDropTableSpaceStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  return *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

uint64_t _equalAlterTableSpaceOptionsStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (v5)
    {
      if (strcmp(v4, v5))
        return 0;
      goto LABEL_7;
    }
    return 0;
  }
  if (v5)
    return 0;
LABEL_7:
  result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  if ((_DWORD)result)
    return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
  return result;
}

uint64_t _equalAlterTableMoveAllStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;
  const char *v7;
  const char *v8;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    if (strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    return 0;
  result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  if ((_DWORD)result)
  {
    v7 = *(const char **)(a1 + 32);
    v8 = *(const char **)(a2 + 32);
    if (v7)
    {
      if (!v8 || strcmp(v7, v8))
        return 0;
      return *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
    }
    if (!v8)
      return *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
    return 0;
  }
  return result;
}

uint64_t _equalAlterExtensionContentsStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16) && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20))
    return equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  return 0;
}

uint64_t _equalCreateFdwStmt(_QWORD *a1, _QWORD *a2)
{
  const char *v4;
  const char *v5;

  v4 = (const char *)a1[1];
  v5 = (const char *)a2[1];
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (equal(a1[2], a2[2]))
    return equal(a1[3], a2[3]);
  return 0;
}

uint64_t _equalCreateForeignServerStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(const char **)(a1 + 16);
  v7 = *(const char **)(a2 + 16);
  if (v6)
  {
    if (!v7 || strcmp(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(const char **)(a1 + 24);
  v9 = *(const char **)(a2 + 24);
  if (v8)
  {
    if (!v9 || strcmp(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v10 = *(const char **)(a1 + 32);
  v11 = *(const char **)(a2 + 32);
  if (v10)
  {
    if (!v11 || strcmp(v10, v11))
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
    return equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
  return 0;
}

uint64_t _equalAlterForeignServerStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;
  const char *v7;
  const char *v8;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    if (strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(const char **)(a1 + 16);
  v8 = *(const char **)(a2 + 16);
  if (!v7)
  {
    if (!v8)
      goto LABEL_12;
    return 0;
  }
  if (!v8 || strcmp(v7, v8))
    return 0;
LABEL_12:
  result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  if ((_DWORD)result)
    return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
  return result;
}

uint64_t _equalAlterUserMappingStmt(_QWORD *a1, _QWORD *a2)
{
  const char *v4;
  const char *v5;

  if (equal(a1[1], a2[1]))
  {
    v4 = (const char *)a1[2];
    v5 = (const char *)a2[2];
    if (v4)
    {
      if (v5 && !strcmp(v4, v5))
        return equal(a1[3], a2[3]);
    }
    else if (!v5)
    {
      return equal(a1[3], a2[3]);
    }
  }
  return 0;
}

uint64_t _equalDropUserMappingStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v5 = *(const char **)(a1 + 16);
    v6 = *(const char **)(a2 + 16);
    if (v5)
    {
      if (v6)
      {
        if (strcmp(v5, v6))
          return 0;
        return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
      }
    }
    else if (!v6)
    {
      return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
    }
    return 0;
  }
  return result;
}

uint64_t _equalCreateForeignTableStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  if (_equalCreateStmt(a1, a2))
  {
    v4 = *(const char **)(a1 + 104);
    v5 = *(const char **)(a2 + 104);
    if (v4)
    {
      if (v5 && !strcmp(v4, v5))
        return equal(*(_QWORD *)(a1 + 112), *(_QWORD *)(a2 + 112));
    }
    else if (!v5)
    {
      return equal(*(_QWORD *)(a1 + 112), *(_QWORD *)(a2 + 112));
    }
  }
  return 0;
}

uint64_t _equalImportForeignSchemaStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(const char **)(a1 + 16);
  v7 = *(const char **)(a2 + 16);
  if (v6)
  {
    if (!v7 || strcmp(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(const char **)(a1 + 24);
  v9 = *(const char **)(a2 + 24);
  if (v8)
  {
    if (!v9 || strcmp(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32) && equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40)))
    return equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
  return 0;
}

uint64_t _equalCreateTransformStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 4)
    || !equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)))
  {
    return 0;
  }
  v4 = *(const char **)(a1 + 16);
  v5 = *(const char **)(a2 + 16);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)))
    return equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  return 0;
}

uint64_t _equalCreateTrigStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16))
    && equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24))
    && equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32))
    && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40)
    && *(unsigned __int16 *)(a1 + 42) == *(unsigned __int16 *)(a2 + 42)
    && *(unsigned __int16 *)(a1 + 44) == *(unsigned __int16 *)(a2 + 44)
    && equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48))
    && equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56))
    && *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64)
    && equal(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72))
    && *(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80)
    && *(unsigned __int8 *)(a1 + 81) == *(unsigned __int8 *)(a2 + 81))
  {
    return equal(*(_QWORD *)(a1 + 88), *(_QWORD *)(a2 + 88));
  }
  return 0;
}

uint64_t _equalCreateEventTrigStmt(_QWORD *a1, _QWORD *a2)
{
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  v4 = (const char *)a1[1];
  v5 = (const char *)a2[1];
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = (const char *)a1[2];
  v7 = (const char *)a2[2];
  if (v6)
  {
    if (!v7 || strcmp(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if (equal(a1[3], a2[3]))
    return equal(a1[4], a2[4]);
  return 0;
}

uint64_t _equalCreatePLangStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;

  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 4))
    return 0;
  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (v5)
    {
      if (strcmp(v4, v5))
        return 0;
      goto LABEL_8;
    }
    return 0;
  }
  if (v5)
    return 0;
LABEL_8:
  result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
      if ((_DWORD)result)
        return *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
    }
  }
  return result;
}

uint64_t _equalCreateRoleStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4))
  {
    v4 = *(const char **)(a1 + 8);
    v5 = *(const char **)(a2 + 8);
    if (v4)
    {
      if (v5 && !strcmp(v4, v5))
        return equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    }
    else if (!v5)
    {
      return equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    }
  }
  return 0;
}

uint64_t _equalAlterRoleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
      return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  }
  return result;
}

uint64_t _equalReindexStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if (!(_DWORD)result)
    return result;
  v5 = *(const char **)(a1 + 16);
  v6 = *(const char **)(a2 + 16);
  if (!v5)
  {
    if (!v6)
    {
LABEL_9:
      if (*(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24))
        return *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28);
    }
    return 0;
  }
  if (!v6)
    return 0;
  if (!strcmp(v5, v6))
    goto LABEL_9;
  return 0;
}

uint64_t _equalCreateSchemaStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (v5)
    {
      if (strcmp(v4, v5))
        return 0;
      goto LABEL_7;
    }
    return 0;
  }
  if (v5)
    return 0;
LABEL_7:
  result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
    if ((_DWORD)result)
      return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
  }
  return result;
}

uint64_t _equalCreateConversionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v5 = *(const char **)(a1 + 16);
    v6 = *(const char **)(a2 + 16);
    if (v5)
    {
      if (!v6)
        return 0;
      if (strcmp(v5, v6))
        return 0;
    }
    else if (v6)
    {
      return 0;
    }
    v7 = *(const char **)(a1 + 24);
    v8 = *(const char **)(a2 + 24);
    if (v7)
    {
      if (!v8 || strcmp(v7, v8))
        return 0;
      goto LABEL_13;
    }
    if (!v8)
    {
LABEL_13:
      result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
      if ((_DWORD)result)
        return *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t _equalCreateCastStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
      if ((_DWORD)result)
        return *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
            && *(unsigned __int8 *)(a1 + 36) == *(unsigned __int8 *)(a2 + 36);
    }
  }
  return result;
}

uint64_t _equalAlterTSConfigurationStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  result = equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
      if ((_DWORD)result)
        return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
            && *(unsigned __int8 *)(a1 + 33) == *(unsigned __int8 *)(a2 + 33)
            && *(unsigned __int8 *)(a1 + 34) == *(unsigned __int8 *)(a2 + 34);
    }
  }
  return result;
}

uint64_t _equalCreatePolicyStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)))
  {
    v6 = *(const char **)(a1 + 24);
    v7 = *(const char **)(a2 + 24);
    if (v6)
    {
      if (!v7 || strcmp(v6, v7))
        return 0;
    }
    else if (v7)
    {
      return 0;
    }
    if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
      && equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40))
      && equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48)))
    {
      return equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
    }
  }
  return 0;
}

uint64_t _equalAlterPolicyStmt(_QWORD *a1, _QWORD *a2)
{
  const char *v4;
  const char *v5;

  v4 = (const char *)a1[1];
  v5 = (const char *)a2[1];
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (equal(a1[2], a2[2]) && equal(a1[3], a2[3]) && equal(a1[4], a2[4]))
    return equal(a1[5], a2[5]);
  return 0;
}

uint64_t _equalAlterPublicationStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    if (strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
    if ((_DWORD)result)
    {
      if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
        return *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36);
      return 0;
    }
  }
  return result;
}

uint64_t _equalAlterSubscriptionStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(const char **)(a1 + 16);
  v7 = *(const char **)(a2 + 16);
  if (v6)
  {
    if (!v7 || strcmp(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if (equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)))
    return equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  return 0;
}

BOOL _equalDropSubscriptionStmt(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
    return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  return 0;
}

uint64_t _equalFuncCall(uint64_t a1, uint64_t a2)
{
  if (equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8))
    && equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16))
    && equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24))
    && equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32))
    && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40)
    && *(unsigned __int8 *)(a1 + 41) == *(unsigned __int8 *)(a2 + 41)
    && *(unsigned __int8 *)(a1 + 42) == *(unsigned __int8 *)(a2 + 42)
    && *(unsigned __int8 *)(a1 + 43) == *(unsigned __int8 *)(a2 + 43))
  {
    return equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalAIndices(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 4) == *(unsigned __int8 *)(a2 + 4)
    && equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)))
  {
    return equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalSortBy(uint64_t a1, uint64_t a2)
{
  if (equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8))
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
    && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20))
  {
    return equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalWindowDef(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(const char **)(a1 + 16);
  v7 = *(const char **)(a2 + 16);
  if (v6)
  {
    if (!v7 || strcmp(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if (equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24))
    && equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32))
    && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
    && equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48)))
  {
    return equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
  }
  return 0;
}

uint64_t _equalRangeFunction(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 4) == *(unsigned __int8 *)(a2 + 4)
    && *(unsigned __int8 *)(a1 + 5) == *(unsigned __int8 *)(a2 + 5)
    && *(unsigned __int8 *)(a1 + 6) == *(unsigned __int8 *)(a2 + 6)
    && equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8))
    && equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)))
  {
    return equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalRangeTableFunc(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 4) == *(unsigned __int8 *)(a2 + 4)
    && equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8))
    && equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16))
    && equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24))
    && equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32)))
  {
    return equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalRangeTableFuncCol(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16))
    && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
    && *(unsigned __int8 *)(a1 + 25) == *(unsigned __int8 *)(a2 + 25)
    && equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32)))
  {
    return equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
  }
  return 0;
}

uint64_t _equalTypeName(uint64_t a1, uint64_t a2)
{
  if (equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8))
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
    && *(unsigned __int8 *)(a1 + 20) == *(unsigned __int8 *)(a2 + 20)
    && *(unsigned __int8 *)(a1 + 21) == *(unsigned __int8 *)(a2 + 21)
    && equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24))
    && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32))
  {
    return equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalIndexElem(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;
  const char *v7;
  const char *v8;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    if (strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  if (!(_DWORD)result)
    return result;
  v7 = *(const char **)(a1 + 24);
  v8 = *(const char **)(a2 + 24);
  if (v7)
  {
    if (!v8 || strcmp(v7, v8))
      return 0;
  }
  else if (v8)
  {
    return 0;
  }
  result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
      if ((_DWORD)result)
      {
        if (*(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56))
          return *(_DWORD *)(a1 + 60) == *(_DWORD *)(a2 + 60);
        return 0;
      }
    }
  }
  return result;
}

uint64_t _equalColumnDef(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16))
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28)
    && *(unsigned __int8 *)(a1 + 29) == *(unsigned __int8 *)(a2 + 29)
    && *(unsigned __int8 *)(a1 + 30) == *(unsigned __int8 *)(a2 + 30)
    && *(unsigned __int8 *)(a1 + 31) == *(unsigned __int8 *)(a2 + 31)
    && equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32))
    && equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40))
    && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48)
    && equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56))
    && *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64)
    && equal(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72))
    && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80)
    && equal(*(_QWORD *)(a1 + 88), *(_QWORD *)(a2 + 88)))
  {
    return equal(*(_QWORD *)(a1 + 96), *(_QWORD *)(a2 + 96));
  }
  return 0;
}

uint64_t _equalConstraint(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    if (strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)
    || *(unsigned __int8 *)(a1 + 17) != *(unsigned __int8 *)(a2 + 17)
    || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24))
  {
    return 0;
  }
  result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  if ((_DWORD)result)
  {
    v7 = *(const char **)(a1 + 40);
    v8 = *(const char **)(a2 + 40);
    if (v7)
    {
      if (!v8 || strcmp(v7, v8))
        return 0;
    }
    else if (v8)
    {
      return 0;
    }
    if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48))
      return 0;
    result = equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
    if ((_DWORD)result)
    {
      result = equal(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64));
      if ((_DWORD)result)
      {
        result = equal(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72));
        if ((_DWORD)result)
        {
          result = equal(*(_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80));
          if ((_DWORD)result)
          {
            v9 = *(const char **)(a1 + 88);
            v10 = *(const char **)(a2 + 88);
            if (v9)
            {
              if (!v10 || strcmp(v9, v10))
                return 0;
            }
            else if (v10)
            {
              return 0;
            }
            v11 = *(const char **)(a1 + 96);
            v12 = *(const char **)(a2 + 96);
            if (v11)
            {
              if (!v12 || strcmp(v11, v12))
                return 0;
            }
            else if (v12)
            {
              return 0;
            }
            if (*(unsigned __int8 *)(a1 + 104) != *(unsigned __int8 *)(a2 + 104))
              return 0;
            v13 = *(const char **)(a1 + 112);
            v14 = *(const char **)(a2 + 112);
            if (v13)
            {
              if (!v14 || strcmp(v13, v14))
                return 0;
            }
            else if (v14)
            {
              return 0;
            }
            result = equal(*(_QWORD *)(a1 + 120), *(_QWORD *)(a2 + 120));
            if ((_DWORD)result)
            {
              result = equal(*(_QWORD *)(a1 + 128), *(_QWORD *)(a2 + 128));
              if ((_DWORD)result)
              {
                result = equal(*(_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136));
                if ((_DWORD)result)
                {
                  result = equal(*(_QWORD *)(a1 + 144), *(_QWORD *)(a2 + 144));
                  if ((_DWORD)result)
                  {
                    if (*(unsigned __int8 *)(a1 + 152) != *(unsigned __int8 *)(a2 + 152)
                      || *(unsigned __int8 *)(a1 + 153) != *(unsigned __int8 *)(a2 + 153)
                      || *(unsigned __int8 *)(a1 + 154) != *(unsigned __int8 *)(a2 + 154))
                    {
                      return 0;
                    }
                    result = equal(*(_QWORD *)(a1 + 160), *(_QWORD *)(a2 + 160));
                    if ((_DWORD)result)
                    {
                      if (*(_DWORD *)(a1 + 168) == *(_DWORD *)(a2 + 168)
                        && *(unsigned __int8 *)(a1 + 172) == *(unsigned __int8 *)(a2 + 172))
                      {
                        return *(unsigned __int8 *)(a1 + 173) == *(unsigned __int8 *)(a2 + 173);
                      }
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _equalDefElem(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;
  const char *v7;
  const char *v8;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    if (strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(const char **)(a1 + 16);
  v8 = *(const char **)(a2 + 16);
  if (!v7)
  {
    if (!v8)
      goto LABEL_12;
    return 0;
  }
  if (!v8 || strcmp(v7, v8))
    return 0;
LABEL_12:
  result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  if ((_DWORD)result)
    return *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t _equalRangeTblEntry(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
    || !equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24))
    || !equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32))
    || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)
    || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)
    || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)
    || !equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56))
    || !equal(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64))
    || !equal(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72))
    || !equal(*(_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80))
    || *(unsigned __int8 *)(a1 + 88) != *(unsigned __int8 *)(a2 + 88)
    || !equal(*(_QWORD *)(a1 + 96), *(_QWORD *)(a2 + 96))
    || !equal(*(_QWORD *)(a1 + 104), *(_QWORD *)(a2 + 104)))
  {
    return 0;
  }
  v4 = *(const char **)(a1 + 112);
  v5 = *(const char **)(a2 + 112);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)
    || *(unsigned __int8 *)(a1 + 124) != *(unsigned __int8 *)(a2 + 124)
    || !equal(*(_QWORD *)(a1 + 128), *(_QWORD *)(a2 + 128))
    || !equal(*(_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136))
    || !equal(*(_QWORD *)(a1 + 144), *(_QWORD *)(a2 + 144)))
  {
    return 0;
  }
  v6 = *(const char **)(a1 + 152);
  v7 = *(const char **)(a2 + 152);
  if (v6)
  {
    if (!v7 || strcmp(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if (*(double *)(a1 + 160) == *(double *)(a2 + 160)
    && equal(*(_QWORD *)(a1 + 168), *(_QWORD *)(a2 + 168))
    && equal(*(_QWORD *)(a1 + 176), *(_QWORD *)(a2 + 176))
    && *(unsigned __int8 *)(a1 + 184) == *(unsigned __int8 *)(a2 + 184)
    && *(unsigned __int8 *)(a1 + 185) == *(unsigned __int8 *)(a2 + 185)
    && *(unsigned __int8 *)(a1 + 186) == *(unsigned __int8 *)(a2 + 186)
    && *(_DWORD *)(a1 + 188) == *(_DWORD *)(a2 + 188)
    && *(_DWORD *)(a1 + 192) == *(_DWORD *)(a2 + 192)
    && bms_equal(*(unsigned int **)(a1 + 200), *(unsigned int **)(a2 + 200))
    && bms_equal(*(unsigned int **)(a1 + 208), *(unsigned int **)(a2 + 208))
    && bms_equal(*(unsigned int **)(a1 + 216), *(unsigned int **)(a2 + 216))
    && bms_equal(*(unsigned int **)(a1 + 224), *(unsigned int **)(a2 + 224)))
  {
    return equal(*(_QWORD *)(a1 + 232), *(_QWORD *)(a2 + 232));
  }
  return 0;
}

BOOL _equalRangeTblFunction(uint64_t a1, uint64_t a2)
{
  return equal(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8))
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24))
      && equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32))
      && equal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40))
      && equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48))
      && bms_equal(*(unsigned int **)(a1 + 56), *(unsigned int **)(a2 + 56));
}

uint64_t _equalWithCheckOption(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;
  const char *v7;
  const char *v8;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    if (strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(const char **)(a1 + 16);
  v8 = *(const char **)(a2 + 16);
  if (!v7)
  {
    if (!v8)
      goto LABEL_13;
    return 0;
  }
  if (!v8 || strcmp(v7, v8))
    return 0;
LABEL_13:
  result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  if ((_DWORD)result)
    return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
  return result;
}

BOOL _equalSortGroupClause(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
      && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17);
}

uint64_t _equalWindowClause(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;
  const char *v7;
  const char *v8;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    if (strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(const char **)(a1 + 16);
  v8 = *(const char **)(a2 + 16);
  if (v7)
  {
    if (!v8 || strcmp(v7, v8))
      return 0;
  }
  else if (v8)
  {
    return 0;
  }
  result = equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  if ((_DWORD)result)
  {
    result = equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
    if ((_DWORD)result)
    {
      if (*(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
        return 0;
      result = equal(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
      if ((_DWORD)result)
      {
        result = equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
        if ((_DWORD)result)
        {
          if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
            && *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 68)
            && *(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72)
            && *(unsigned __int8 *)(a1 + 76) == *(unsigned __int8 *)(a2 + 76)
            && *(unsigned __int8 *)(a1 + 77) == *(unsigned __int8 *)(a2 + 77)
            && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80))
          {
            return *(unsigned __int8 *)(a1 + 84) == *(unsigned __int8 *)(a2 + 84);
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t _equalInferClause(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;

  result = equal(a1[1], a2[1]);
  if ((_DWORD)result)
  {
    result = equal(a1[2], a2[2]);
    if ((_DWORD)result)
    {
      v5 = (const char *)a1[3];
      v6 = (const char *)a2[3];
      if (v5)
      {
        if (v6)
          return !strcmp(v5, v6);
      }
      else if (!v6)
      {
        return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t _equalCommonTableExpr(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16))
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32))
    && *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44)
    && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
    && equal(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56))
    && equal(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64))
    && equal(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72)))
  {
    return equal(*(_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80));
  }
  return 0;
}

uint64_t _equalRoleSpec(uint64_t a1, uint64_t a2)
{
  const char *v2;
  const char *v3;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  v2 = *(const char **)(a1 + 8);
  v3 = *(const char **)(a2 + 8);
  if (v2)
  {
    if (!v3 || strcmp(v2, v3))
      return 0;
  }
  else if (v3)
  {
    return 0;
  }
  return 1;
}

BOOL _equalTriggerTransition(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;

  v4 = *(const char **)(a1 + 8);
  v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
    return *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17);
  return 0;
}

uint64_t _equalPartitionElem(_QWORD *a1, _QWORD *a2)
{
  const char *v4;
  const char *v5;

  v4 = (const char *)a1[1];
  v5 = (const char *)a2[1];
  if (v4)
  {
    if (!v5 || strcmp(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (equal(a1[2], a2[2]) && equal(a1[3], a2[3]))
    return equal(a1[4], a2[4]);
  return 0;
}

uint64_t _equalPartitionBoundSpec(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 4) == *(unsigned __int8 *)(a2 + 4)
    && *(unsigned __int8 *)(a1 + 5) == *(unsigned __int8 *)(a2 + 5)
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && equal(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16))
    && equal(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)))
  {
    return equal(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  }
  else
  {
    return 0;
  }
}

void equal_cold_1()
{
  _DWORD *v0;

  OUTLINED_FUNCTION_0_23();
  errmsg_internal("unrecognized node type: %d", *v0);
  errfinish("src/postgres/src_backend_nodes_equalfuncs.c", 3997, (uint64_t)"equal");
  __break(1u);
}

void _equalList_cold_1()
{
  _DWORD *v0;

  OUTLINED_FUNCTION_0_23();
  errmsg_internal("unrecognized list node type: %d", *v0);
  errfinish("src/postgres/src_backend_nodes_equalfuncs.c", 3218, (uint64_t)"_equalList");
  __break(1u);
}

void _equalValue_cold_1()
{
  _DWORD *v0;

  OUTLINED_FUNCTION_0_23();
  errmsg_internal("unrecognized node type: %d", *v0);
  errfinish("src/postgres/src_backend_nodes_equalfuncs.c", 3254, (uint64_t)"_equalValue");
  __break(1u);
}

uint64_t GetExtensibleNodeMethods(char *a1, char a2)
{
  hash_table *v4;
  _QWORD *v5;

  v4 = *(hash_table **)extensible_node_methods();
  if (v4)
  {
    v5 = hash_search(v4, a1, 0, 0);
    if (v5)
      return v5[8];
  }
  if ((a2 & 1) == 0)
    GetExtensibleNodeMethods_cold_1((size_t)a1);
  return 0;
}

void GetExtensibleNodeMethods_cold_1(size_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  errstart(20, 0);
  errcode();
  errmsg("ExtensibleNodeMethods \"%s\" was not registered", v2, v3, v4, v5, v6, v7, v8, a1);
  errfinish("src/postgres/src_backend_nodes_extensible.c", 78, (uint64_t)"GetExtensibleNodeEntry");
  __break(1u);
}

double list_make1_impl(int a1, uint64_t a2)
{
  uint64_t v4;
  double result;

  v4 = palloc(0x40uLL);
  *(_DWORD *)v4 = a1;
  *(_QWORD *)&result = 0x500000001;
  *(_QWORD *)(v4 + 4) = 0x500000001;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 16) = v4 + 24;
  return result;
}

double list_make2_impl(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double result;

  v6 = palloc(0x40uLL);
  *(_DWORD *)v6 = a1;
  *(_QWORD *)&result = 0x500000002;
  *(_QWORD *)(v6 + 4) = 0x500000002;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 16) = v6 + 24;
  *(_QWORD *)(v6 + 32) = a3;
  return result;
}

double list_make3_impl(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  double result;

  v8 = palloc(0x40uLL);
  *(_DWORD *)v8 = a1;
  *(_QWORD *)&result = 0x500000003;
  *(_QWORD *)(v8 + 4) = 0x500000003;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 16) = v8 + 24;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a4;
  return result;
}

double list_make4_impl(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  double result;

  v10 = palloc(0x40uLL);
  *(_DWORD *)v10 = a1;
  *(_QWORD *)&result = 0x500000004;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)(v10 + 4) = 0x500000004;
  *(_QWORD *)(v10 + 16) = v10 + 24;
  *(_QWORD *)(v10 + 32) = a3;
  *(_QWORD *)(v10 + 40) = a4;
  *(_QWORD *)(v10 + 48) = a5;
  return result;
}

uint64_t lappend(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  signed int v7;
  const void *v8;
  uint64_t result;
  void *v10;

  if (a1)
  {
    v4 = *(_DWORD *)(a1 + 4);
    if (v4 >= *(_DWORD *)(a1 + 8))
    {
      if (v4 + 1 > 16)
        v5 = v4 + 1;
      else
        v5 = 16;
      v6 = 1 << -(char)__clz(v5);
      if ((v5 & (v5 - 1)) != 0)
        v7 = v6;
      else
        v7 = v5;
      v8 = *(const void **)(a1 + 16);
      if (v8 == (const void *)(a1 + 24))
      {
        v10 = (void *)MemoryContextAlloc(*(_QWORD *)(a1 - 8), 8 * v7);
        *(_QWORD *)(a1 + 16) = v10;
        memcpy(v10, v8, 8 * *(int *)(a1 + 4));
      }
      else
      {
        *(_QWORD *)(a1 + 16) = repalloc(*(_QWORD *)(a1 + 16), 8 * v7);
      }
      *(_DWORD *)(a1 + 8) = v7;
      v4 = *(_DWORD *)(a1 + 4);
    }
    *(_DWORD *)(a1 + 4) = v4 + 1;
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4) = a2;
    return a1;
  }
  else
  {
    result = palloc(0x40uLL);
    *(_QWORD *)result = 0x1000000E2;
    *(_DWORD *)(result + 8) = 5;
    *(_QWORD *)(result + 16) = result + 24;
    *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t lcons(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  signed int v7;
  const void *v8;
  uint64_t result;
  void *v10;

  if (a2)
  {
    v4 = *(_DWORD *)(a2 + 4);
    if (v4 >= *(_DWORD *)(a2 + 8))
    {
      if (v4 + 1 > 16)
        v5 = v4 + 1;
      else
        v5 = 16;
      v6 = 1 << -(char)__clz(v5);
      if ((v5 & (v5 - 1)) != 0)
        v7 = v6;
      else
        v7 = v5;
      v8 = *(const void **)(a2 + 16);
      if (v8 == (const void *)(a2 + 24))
      {
        v10 = (void *)MemoryContextAlloc(*(_QWORD *)(a2 - 8), 8 * v7);
        *(_QWORD *)(a2 + 16) = v10;
        memcpy(v10, v8, 8 * *(int *)(a2 + 4));
      }
      else
      {
        *(_QWORD *)(a2 + 16) = repalloc(*(_QWORD *)(a2 + 16), 8 * v7);
      }
      *(_DWORD *)(a2 + 8) = v7;
      v4 = *(_DWORD *)(a2 + 4);
    }
    memmove((void *)(*(_QWORD *)(a2 + 16) + 8), *(const void **)(a2 + 16), 8 * v4);
    ++*(_DWORD *)(a2 + 4);
    **(_QWORD **)(a2 + 16) = a1;
    return a2;
  }
  else
  {
    result = palloc(0x40uLL);
    *(_QWORD *)result = 0x1000000E2;
    *(_DWORD *)(result + 8) = 5;
    *(_QWORD *)(result + 16) = result + 24;
    *(_QWORD *)(result + 24) = a1;
  }
  return result;
}

uint64_t list_concat(uint64_t a1, const void **a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  signed int v9;
  const void *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  void *v17;

  if (!a1)
  {
    if (!a2)
      return 0;
    v11 = *(_DWORD *)a2;
    v12 = *((int *)a2 + 1);
    v13 = v12 + 3;
    if ((int)v12 + 3 <= 8)
      v13 = 8;
    v14 = 1 << -(char)__clz(v13);
    if ((v13 & (v13 - 1)) != 0)
      v13 = v14;
    v15 = v13 - 3;
    v3 = palloc(8 * (v13 - 3) + 24);
    *(_DWORD *)v3 = v11;
    *(_DWORD *)(v3 + 4) = v12;
    *(_DWORD *)(v3 + 8) = v15;
    *(_QWORD *)(v3 + 16) = v3 + 24;
    memcpy((void *)(v3 + 24), a2[2], 8 * v12);
    return v3;
  }
  v3 = a1;
  if (!a2)
    return v3;
  v4 = *((_DWORD *)a2 + 1);
  v5 = *(_DWORD *)(a1 + 4);
  v6 = v4 + v5;
  if (v4 + v5 > *(_DWORD *)(a1 + 8))
  {
    if (v6 <= 16)
      v7 = 16;
    else
      v7 = v4 + v5;
    v8 = 1 << -(char)__clz(v7);
    if ((v7 & (v7 - 1)) != 0)
      v9 = v8;
    else
      v9 = v7;
    v10 = *(const void **)(a1 + 16);
    if (v10 == (const void *)(a1 + 24))
    {
      v17 = (void *)MemoryContextAlloc(*(_QWORD *)(a1 - 8), 8 * v9);
      *(_QWORD *)(v3 + 16) = v17;
      memcpy(v17, v10, 8 * *(int *)(v3 + 4));
    }
    else
    {
      *(_QWORD *)(a1 + 16) = repalloc(*(_QWORD *)(a1 + 16), 8 * v9);
    }
    *(_DWORD *)(v3 + 8) = v9;
    v5 = *(_DWORD *)(v3 + 4);
    v4 = *((_DWORD *)a2 + 1);
  }
  memcpy((void *)(*(_QWORD *)(v3 + 16) + 8 * v5), a2[2], 8 * v4);
  *(_DWORD *)(v3 + 4) = v6;
  return v3;
}

uint64_t list_copy(const void **a1)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)a1;
  v3 = *((int *)a1 + 1);
  v4 = v3 + 3;
  if ((int)v3 + 3 <= 8)
    v4 = 8;
  v5 = 1 << -(char)__clz(v4);
  if ((v4 & (v4 - 1)) != 0)
    v4 = v5;
  v6 = v4 - 3;
  v7 = palloc(8 * (v4 - 3) + 24);
  *(_DWORD *)v7 = v2;
  *(_DWORD *)(v7 + 4) = v3;
  *(_DWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 16) = v7 + 24;
  memcpy((void *)(v7 + 24), a1[2], 8 * v3);
  return v7;
}

uint64_t list_truncate(uint64_t result, int a2)
{
  if (a2 < 1)
    return 0;
  if (result)
  {
    if (*(_DWORD *)(result + 4) > a2)
      *(_DWORD *)(result + 4) = a2;
  }
  return result;
}

uint64_t list_delete_nth_cell(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_QWORD *)(a1 + 16);
  if (v3 == 1)
  {
    if (v4 != a1 + 24)
      pfree(v4);
    pfree(a1);
    return 0;
  }
  else
  {
    memmove((void *)(v4 + 8 * a2), (const void *)(v4 + 8 * (a2 + 1)), 8 * (v3 + ~a2));
    --*(_DWORD *)(a1 + 4);
    return a1;
  }
}

uint64_t list_free(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 16);
    if (v2 != v1 + 24)
      pfree(v2);
    return pfree(v1);
  }
  return result;
}

uint64_t list_delete_cell(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 4);
  if (v4 == 1)
  {
    if (v3 != a1 + 24)
      pfree(v3);
    pfree(a1);
    return 0;
  }
  else
  {
    memmove((void *)(v3 + 8 * (int)((unint64_t)(a2 - v3) >> 3)), (const void *)(v3 + 8 * ((((a2 - v3) << 29) + 0x100000000) >> 32)), 8 * (int)(v4 + ~((unint64_t)(a2 - v3) >> 3)));
    --*(_DWORD *)(a1 + 4);
    return a1;
  }
}

uint64_t list_copy_tail(int *a1, int a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  if (!a1)
    return 0;
  v3 = a2 & ~(a2 >> 31);
  v4 = a1[1];
  v5 = v4 - v3;
  if (v4 <= v3)
    return 0;
  v6 = *a1;
  v7 = v5 + 3;
  if (v5 + 3 <= 8)
    v7 = 8;
  v8 = 1 << -(char)__clz(v7);
  if ((v7 & (v7 - 1)) != 0)
    v7 = v8;
  v9 = v7 - 3;
  v10 = palloc(8 * (v7 - 3) + 24);
  *(_DWORD *)v10 = v6;
  *(_DWORD *)(v10 + 4) = v5;
  *(_DWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 16) = v10 + 24;
  memcpy((void *)(v10 + 24), (const void *)(*((_QWORD *)a1 + 2) + 8 * v3), 8 * v5);
  return v10;
}

uint64_t list_copy_deep(int *a1)
{
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    return 0;
  v2 = *a1;
  v3 = a1[1];
  v4 = v3 + 3;
  if (v3 + 3 <= 8)
    v4 = 8;
  v5 = 1 << -(char)__clz(v4);
  if ((v4 & (v4 - 1)) != 0)
    v4 = v5;
  v6 = v4 - 3;
  v7 = palloc(8 * (v4 - 3) + 24);
  *(_DWORD *)v7 = v2;
  *(_DWORD *)(v7 + 4) = v3;
  *(_DWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 16) = v7 + 24;
  if (v3 >= 1)
  {
    v8 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * v8) = copyObjectImpl(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * v8));
      ++v8;
    }
    while (v8 < *(int *)(v7 + 4));
  }
  return v7;
}

unint64_t makeA_Expr(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t *v10;
  unint64_t result;

  v10 = (uint64_t *)CurrentMemoryContext();
  result = MemoryContextAllocZeroAligned(*v10, 0x28uLL);
  *(_DWORD *)result = 346;
  *(_DWORD *)(result + 4) = a1;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = a4;
  *(_DWORD *)(result + 32) = a5;
  return result;
}

unint64_t makeSimpleA_Expr(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t *v10;
  unint64_t v11;
  unint64_t String;
  uint64_t v13;

  v10 = (uint64_t *)CurrentMemoryContext();
  v11 = MemoryContextAllocZeroAligned(*v10, 0x28uLL);
  *(_DWORD *)v11 = 346;
  *(_DWORD *)(v11 + 4) = a1;
  String = makeString(a2);
  list_make1_impl(226, String);
  *(_QWORD *)(v11 + 8) = v13;
  *(_QWORD *)(v11 + 16) = a3;
  *(_QWORD *)(v11 + 24) = a4;
  *(_DWORD *)(v11 + 32) = a5;
  return v11;
}

unint64_t makeBoolExpr(int a1, uint64_t a2, int a3, double a4)
{
  uint64_t *v7;
  unint64_t result;

  v7 = (uint64_t *)CurrentMemoryContext(a4);
  result = MemoryContextAllocZeroAligned(*v7, 0x18uLL);
  *(_DWORD *)result = 119;
  *(_DWORD *)(result + 4) = a1;
  *(_QWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  return result;
}

unint64_t makeAlias(const char *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;

  v4 = (uint64_t *)CurrentMemoryContext();
  v5 = MemoryContextAllocZeroAligned(*v4, 0x18uLL);
  *(_DWORD *)v5 = 102;
  *(_QWORD *)(v5 + 8) = pstrdup(a1);
  *(_QWORD *)(v5 + 16) = a2;
  return v5;
}

unint64_t makeRangeVar(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  unint64_t result;

  v6 = (uint64_t *)CurrentMemoryContext();
  result = MemoryContextAllocZeroAligned(*v6, 0x38uLL);
  *(_DWORD *)result = 103;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_WORD *)(result + 32) = 28673;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = a3;
  return result;
}

unint64_t makeTypeName(uint64_t a1)
{
  unint64_t String;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t result;

  String = makeString(a1);
  v2 = list_make1_impl(226, String);
  v4 = v3;
  v5 = (uint64_t *)CurrentMemoryContext(v2);
  result = MemoryContextAllocZeroAligned(*v5, 0x38uLL);
  *(_DWORD *)result = 366;
  *(_QWORD *)(result + 8) = v4;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = -1;
  *(_DWORD *)(result + 48) = -1;
  return result;
}

unint64_t makeTypeNameFromNameList(uint64_t a1, double a2)
{
  uint64_t *v3;
  unint64_t result;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  result = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)result = 366;
  *(_QWORD *)(result + 8) = a1;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = -1;
  *(_DWORD *)(result + 48) = -1;
  return result;
}

unint64_t makeDefElem(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t *v7;
  unint64_t result;

  v7 = (uint64_t *)CurrentMemoryContext(a4);
  result = MemoryContextAllocZeroAligned(*v7, 0x28uLL);
  *(_DWORD *)result = 370;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_DWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 36) = a3;
  return result;
}

unint64_t makeDefElemExtended(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, double a6)
{
  uint64_t *v11;
  unint64_t result;

  v11 = (uint64_t *)CurrentMemoryContext(a6);
  result = MemoryContextAllocZeroAligned(*v11, 0x28uLL);
  *(_DWORD *)result = 370;
  *(_QWORD *)(result + 8) = a1;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_DWORD *)(result + 32) = a4;
  *(_DWORD *)(result + 36) = a5;
  return result;
}

unint64_t makeFuncCall(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t *v7;
  unint64_t result;

  v7 = (uint64_t *)CurrentMemoryContext(a4);
  result = MemoryContextAllocZeroAligned(*v7, 0x40uLL);
  *(_DWORD *)result = 350;
  *(_QWORD *)(result + 8) = a1;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 56) = a3;
  return result;
}

unint64_t makeGroupingSet(int a1, uint64_t a2, int a3, double a4)
{
  uint64_t *v7;
  unint64_t result;

  v7 = (uint64_t *)CurrentMemoryContext(a4);
  result = MemoryContextAllocZeroAligned(*v7, 0x18uLL);
  *(_DWORD *)result = 376;
  *(_DWORD *)(result + 4) = a1;
  *(_QWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  return result;
}

unint64_t makeVacuumRelation(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t *v7;
  unint64_t result;

  v7 = (uint64_t *)CurrentMemoryContext(a4);
  result = MemoryContextAllocZeroAligned(*v7, 0x20uLL);
  *(_DWORD *)result = 397;
  *(_QWORD *)(result + 8) = a1;
  *(_DWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  return result;
}

uint64_t exprLocation(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;

  if (a1)
  {
    v1 = a1;
    result = 0xFFFFFFFFLL;
    while (2)
    {
      switch(*(_DWORD *)v1)
      {
        case 0x67:
        case 0x6F:
        case 0x16E:
          return *(unsigned int *)(v1 + 48);
        case 0x68:
          return *(unsigned int *)(v1 + 100);
        case 0x6A:
        case 0x6B:
        case 0x6E:
          return *(unsigned int *)(v1 + 36);
        case 0x6C:
        case 0x83:
        case 0x88:
        case 0x15D:
        case 0x181:
        case 0x189:
          return *(unsigned int *)(v1 + 24);
        case 0x6D:
          return *(unsigned int *)(v1 + 84);
        case 0x70:
          v3 = (uint64_t *)(v1 + 40);
          goto LABEL_5;
        case 0x71:
        case 0x73:
        case 0x74:
        case 0x75:
          v4 = *(_DWORD *)(v1 + 40);
          goto LABEL_15;
        case 0x72:
        case 0x7E:
          v4 = *(_DWORD *)(v1 + 28);
          v5 = *(_QWORD *)(v1 + 8);
          goto LABEL_49;
        case 0x76:
          v4 = *(_DWORD *)(v1 + 32);
          v5 = *(_QWORD *)(v1 + 24);
          goto LABEL_49;
        case 0x77:
          v4 = *(_DWORD *)(v1 + 16);
          v5 = *(_QWORD *)(v1 + 8);
          goto LABEL_49;
        case 0x78:
          v6 = exprLocation(*(_QWORD *)(v1 + 16));
          v7 = *(_DWORD *)(v1 + 40);
          if (v6 >= v7)
            v8 = *(_DWORD *)(v1 + 40);
          else
            v8 = v6;
          if (v7 < 0)
            v8 = v6;
          if (v6 >= 0)
            return v8;
          else
            return v7;
        case 0x7B:
        case 0x7C:
        case 0x81:
        case 0x93:
        case 0x94:
        case 0x99:
        case 0xCF:
        case 0x164:
        case 0x166:
        case 0x167:
          v3 = (uint64_t *)(v1 + 8);
          goto LABEL_5;
        case 0x7D:
        case 0x8E:
          v4 = *(_DWORD *)(v1 + 32);
          v5 = *(_QWORD *)(v1 + 8);
          goto LABEL_49;
        case 0x7F:
          v4 = *(_DWORD *)(v1 + 40);
          v5 = *(_QWORD *)(v1 + 8);
          goto LABEL_49;
        case 0x80:
        case 0x8C:
          v4 = *(_DWORD *)(v1 + 24);
          v5 = *(_QWORD *)(v1 + 8);
          goto LABEL_49;
        case 0x82:
        case 0x16B:
        case 0x185:
        case 0x188:
        case 0x18A:
          return *(unsigned int *)(v1 + 40);
        case 0x85:
          return *(unsigned int *)(v1 + 28);
        case 0x86:
        case 0x89:
        case 0x163:
        case 0x183:
        case 0x184:
          return *(unsigned int *)(v1 + 32);
        case 0x87:
          v3 = (uint64_t *)(v1 + 32);
          goto LABEL_5;
        case 0x8A:
        case 0x8F:
        case 0x90:
        case 0x15B:
        case 0x162:
        case 0x178:
        case 0x18B:
          return *(unsigned int *)(v1 + 16);
        case 0x8B:
          v4 = *(_DWORD *)(v1 + 52);
LABEL_15:
          v5 = *(_QWORD *)(v1 + 32);
          goto LABEL_49;
        case 0x8D:
          v4 = *(_DWORD *)(v1 + 20);
          v5 = *(_QWORD *)(v1 + 8);
          goto LABEL_49;
        case 0xE2:
          v9 = *(unsigned int *)(v1 + 4);
          if ((int)v9 < 1)
            return 0xFFFFFFFFLL;
          v10 = *(uint64_t **)(v1 + 16);
          v11 = v9 - 1;
          do
          {
            v12 = v11;
            v13 = *v10++;
            result = exprLocation(v13);
            if ((result & 0x80000000) == 0)
              break;
            v11 = v12 - 1;
          }
          while (v12);
          return result;
        case 0x15A:
          v4 = *(_DWORD *)(v1 + 32);
          goto LABEL_48;
        case 0x15C:
          return *(unsigned int *)(v1 + 8);
        case 0x15E:
          v4 = *(_DWORD *)(v1 + 56);
LABEL_48:
          v5 = *(_QWORD *)(v1 + 16);
LABEL_49:
          LODWORD(result) = exprLocation(v5);
          if (v4 >= (int)result)
            v14 = result;
          else
            v14 = v4;
          if ((int)result < 0)
            v14 = v4;
          if (v4 >= 0)
            return v14;
          else
            return result;
        case 0x165:
          v15 = exprLocation(*(_QWORD *)(v1 + 8));
          v16 = *(_DWORD *)(*(_QWORD *)(v1 + 16) + 48);
          if (v15 >= v16)
            v17 = *(_DWORD *)(*(_QWORD *)(v1 + 16) + 48);
          else
            v17 = v15;
          if (v16 < 0)
            v17 = v15;
          if (v15 >= 0)
            v16 = v17;
          v18 = *(_DWORD *)(v1 + 24);
          if (v16 >= v18)
            v19 = *(_DWORD *)(v1 + 24);
          else
            v19 = v16;
          if (v18 < 0)
            v19 = v16;
          if (v16 >= 0)
            return v19;
          else
            return v18;
        case 0x168:
          return *(unsigned int *)(v1 + 64);
        case 0x16F:
          return *(unsigned int *)(v1 + 104);
        case 0x171:
        case 0x182:
          return *(unsigned int *)(v1 + 20);
        case 0x17E:
          v3 = (uint64_t *)(v1 + 16);
LABEL_5:
          v1 = *v3;
          if (!*v3)
            return 0xFFFFFFFFLL;
          continue;
        default:
          return result;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t raw_expression_tree_walker(uint64_t result, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result)
  {
    v4 = result;
    check_stack_depth();
    switch(*(_DWORD *)v4)
    {
      case 0x66:
      case 0x8A:
      case 0x90:
      case 0x91:
      case 0xDD:
      case 0xDE:
      case 0xDF:
      case 0xE0:
      case 0xE1:
      case 0x15B:
      case 0x15C:
      case 0x15D:
      case 0x15F:
        return 0;
      case 0x67:
        v5 = *(_QWORD *)(v4 + 40);
        return a2(v5, a3);
      case 0x6E:
      case 0x72:
      case 0x86:
      case 0x8C:
      case 0x8D:
      case 0x162:
      case 0x164:
      case 0x166:
      case 0x167:
      case 0x178:
      case 0x17F:
      case 0x182:
        v5 = *(_QWORD *)(v4 + 8);
        return a2(v5, a3);
      case 0x77:
        return (a2(*(_QWORD *)(v4 + 8), a3) & 1) != 0;
      case 0x78:
      case 0x8B:
        if ((a2(*(_QWORD *)(v4 + 16), a3) & 1) != 0)
          return 1;
        return (a2(*(_QWORD *)(v4 + 32), a3) & 1) != 0;
      case 0x82:
        if ((a2(*(_QWORD *)(v4 + 16), a3) & 1) != 0)
          return 1;
        v6 = *(_QWORD *)(v4 + 24);
        if (!v6 || *(int *)(v6 + 4) < 1)
          return (a2(*(_QWORD *)(v4 + 32), a3) & 1) != 0;
        v7 = 0;
        while (1)
        {
          v8 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v7);
          if ((a2(*(_QWORD *)(v8 + 8), a3) & 1) != 0 || (a2(*(_QWORD *)(v8 + 16), a3) & 1) != 0)
            break;
          if (++v7 >= *(int *)(v6 + 4))
            return (a2(*(_QWORD *)(v4 + 32), a3) & 1) != 0;
        }
        return 1;
      case 0x88:
        v5 = *(_QWORD *)(v4 + 16);
        return a2(v5, a3);
      case 0x89:
        v5 = *(_QWORD *)(v4 + 24);
        return a2(v5, a3);
      case 0x96:
        if ((a2(*(_QWORD *)(v4 + 16), a3) & 1) == 0 && (a2(*(_QWORD *)(v4 + 24), a3) & 1) == 0)
          goto LABEL_41;
        return 1;
      case 0x99:
        if ((a2(*(_QWORD *)(v4 + 8), a3) & 1) == 0)
          return (a2(*(_QWORD *)(v4 + 56), a3) & 1) != 0;
        return 1;
      case 0xE2:
        if (*(int *)(v4 + 4) < 1)
          return 0;
        v9 = 0;
        break;
      case 0xE9:
      case 0xEB:
        if ((a2(*(_QWORD *)(v4 + 8), a3) & 1) != 0
          || (a2(*(_QWORD *)(v4 + 16), a3) & 1) != 0
          || (a2(*(_QWORD *)(v4 + 24), a3) & 1) != 0
          || (a2(*(_QWORD *)(v4 + 32), a3) & 1) != 0)
        {
          return 1;
        }
LABEL_41:
        if ((a2(*(_QWORD *)(v4 + 40), a3) & 1) != 0)
          return 1;
        return (a2(*(_QWORD *)(v4 + 48), a3) & 1) != 0;
      case 0xEA:
      case 0x16C:
        if ((a2(*(_QWORD *)(v4 + 8), a3) & 1) == 0
          && (a2(*(_QWORD *)(v4 + 16), a3) & 1) == 0
          && (a2(*(_QWORD *)(v4 + 24), a3) & 1) == 0)
        {
          goto LABEL_24;
        }
        return 1;
      case 0xEC:
        return (a2(*(_QWORD *)(v4 + 8), a3) & 1) != 0
            || (a2(*(_QWORD *)(v4 + 16), a3) & 1) != 0
            || (a2(*(_QWORD *)(v4 + 24), a3) & 1) != 0
            || (a2(*(_QWORD *)(v4 + 32), a3) & 1) != 0
            || (a2(*(_QWORD *)(v4 + 40), a3) & 1) != 0
            || (a2(*(_QWORD *)(v4 + 48), a3) & 1) != 0
            || (a2(*(_QWORD *)(v4 + 56), a3) & 1) != 0
            || (a2(*(_QWORD *)(v4 + 64), a3) & 1) != 0
            || (a2(*(_QWORD *)(v4 + 72), a3) & 1) != 0
            || (a2(*(_QWORD *)(v4 + 80), a3) & 1) != 0
            || (a2(*(_QWORD *)(v4 + 88), a3) & 1) != 0
            || (a2(*(_QWORD *)(v4 + 96), a3) & 1) != 0
            || (a2(*(_QWORD *)(v4 + 112), a3) & 1) != 0
            || (a2(*(_QWORD *)(v4 + 120), a3) & 1) != 0
            || (a2(*(_QWORD *)(v4 + 136), a3) & 1) != 0
            || (a2(*(_QWORD *)(v4 + 144), a3) & 1) != 0;
      case 0x15A:
      case 0x163:
        return (a2(*(_QWORD *)(v4 + 16), a3) & 1) != 0 || (a2(*(_QWORD *)(v4 + 24), a3) & 1) != 0;
      case 0x15E:
        if ((a2(*(_QWORD *)(v4 + 16), a3) & 1) == 0
          && (a2(*(_QWORD *)(v4 + 24), a3) & 1) == 0
          && (a2(*(_QWORD *)(v4 + 32), a3) & 1) == 0)
        {
          return (a2(*(_QWORD *)(v4 + 48), a3) & 1) != 0;
        }
        return 1;
      case 0x160:
      case 0x161:
      case 0x165:
      case 0x169:
      case 0x181:
      case 0x183:
        if ((a2(*(_QWORD *)(v4 + 8), a3) & 1) == 0)
          return (a2(*(_QWORD *)(v4 + 16), a3) & 1) != 0;
        return 1;
      case 0x168:
        if ((a2(*(_QWORD *)(v4 + 24), a3) & 1) != 0
          || (a2(*(_QWORD *)(v4 + 32), a3) & 1) != 0
          || (a2(*(_QWORD *)(v4 + 48), a3) & 1) != 0)
        {
          return 1;
        }
        return (a2(*(_QWORD *)(v4 + 56), a3) & 1) != 0;
      case 0x16A:
      case 0x184:
        if ((a2(*(_QWORD *)(v4 + 8), a3) & 1) != 0)
          return 1;
        return (a2(*(_QWORD *)(v4 + 16), a3) & 1) != 0 || (a2(*(_QWORD *)(v4 + 24), a3) & 1) != 0;
      case 0x16B:
        if ((a2(*(_QWORD *)(v4 + 8), a3) & 1) == 0 && (a2(*(_QWORD *)(v4 + 24), a3) & 1) == 0)
          return (a2(*(_QWORD *)(v4 + 32), a3) & 1) != 0;
        return 1;
      case 0x16D:
LABEL_24:
        if ((a2(*(_QWORD *)(v4 + 32), a3) & 1) == 0)
          return (a2(*(_QWORD *)(v4 + 40), a3) & 1) != 0;
        return 1;
      case 0x16E:
        if ((a2(*(_QWORD *)(v4 + 24), a3) & 1) != 0)
          return 1;
        return (a2(*(_QWORD *)(v4 + 40), a3) & 1) != 0;
      case 0x16F:
        return (a2(*(_QWORD *)(v4 + 16), a3) & 1) != 0
            || (a2(*(_QWORD *)(v4 + 32), a3) & 1) != 0
            || (a2(*(_QWORD *)(v4 + 72), a3) & 1) != 0;
      case 0x170:
        return (a2(*(_QWORD *)(v4 + 16), a3) & 1) != 0;
      case 0x185:
        v5 = *(_QWORD *)(v4 + 32);
        return a2(v5, a3);
      default:
        raw_expression_tree_walker_cold_1((_DWORD *)v4);
    }
    while ((a2(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v9), a3) & 1) == 0)
    {
      if (++v9 >= *(int *)(v4 + 4))
        return 0;
    }
    return 1;
  }
  return result;
}

void raw_expression_tree_walker_cold_1(_DWORD *a1)
{
  errstart(20, 0);
  errmsg_internal("unrecognized node type: %d", *a1);
  errfinish("src/postgres/src_backend_nodes_nodeFuncs.c", 1340, (uint64_t)"raw_expression_tree_walker");
  __break(1u);
}

_DWORD *makeInteger(int a1)
{
  uint64_t *v2;
  _DWORD *result;

  v2 = (uint64_t *)CurrentMemoryContext();
  result = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *result = 221;
  result[2] = a1;
  return result;
}

unint64_t makeFloat(uint64_t a1)
{
  uint64_t *v2;
  unint64_t result;

  v2 = (uint64_t *)CurrentMemoryContext();
  result = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)result = 222;
  *(_QWORD *)(result + 8) = a1;
  return result;
}

unint64_t makeString(uint64_t a1)
{
  uint64_t *v2;
  unint64_t result;

  v2 = (uint64_t *)CurrentMemoryContext();
  result = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)result = 223;
  *(_QWORD *)(result + 8) = a1;
  return result;
}

unint64_t makeBitString(uint64_t a1)
{
  uint64_t *v2;
  unint64_t result;

  v2 = (uint64_t *)CurrentMemoryContext();
  result = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)result = 224;
  *(_QWORD *)(result + 8) = a1;
  return result;
}

uint64_t base_yyparse(_BYTE ***a1, double a2)
{
  const void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  int *v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t StringConstCast;
  int v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  unint64_t DefElem;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  void *v50;
  int v51;
  unint64_t v52;
  int v53;
  unint64_t TypeName;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  int v69;
  unint64_t v70;
  int v71;
  unint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  const char *v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  char *v108;
  int v109;
  const char *v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  int v118;
  int v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  int v131;
  int v132;
  int v133;
  char *v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  char *v143;
  int v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  int v152;
  unint64_t v153;
  int v154;
  int v155;
  int v156;
  uint64_t v157;
  int v158;
  int v159;
  unint64_t v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  double v164;
  int v165;
  int v166;
  int v167;
  int v168;
  char *v169;
  const char *v170;
  unint64_t v171;
  double v172;
  int v173;
  int v174;
  unint64_t v175;
  int v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  char *v180;
  const char *v181;
  int v182;
  unint64_t v183;
  int v184;
  unint64_t String;
  double v186;
  int v187;
  uint64_t *v188;
  _DWORD *v189;
  int v190;
  _BYTE *v191;
  int v192;
  uint64_t v193;
  _DWORD *v194;
  double v195;
  uint64_t v196;
  unint64_t v197;
  int v198;
  int v199;
  int v200;
  unint64_t v201;
  int v202;
  int v203;
  uint64_t v204;
  int v205;
  int v206;
  unint64_t v207;
  int v208;
  int v209;
  unint64_t v210;
  uint64_t *v211;
  int v212;
  uint64_t v213;
  unint64_t v214;
  int v215;
  char *v216;
  int v217;
  unint64_t v218;
  char v219;
  int v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  int v226;
  unint64_t v227;
  int v228;
  unint64_t v229;
  uint64_t v230;
  int v231;
  int v232;
  unint64_t v233;
  int v234;
  int v235;
  char *v236;
  int v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  _DWORD *v242;
  uint64_t v243;
  double v244;
  unint64_t v245;
  int v246;
  unint64_t v247;
  int v248;
  int v249;
  unint64_t v250;
  int v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  char *v255;
  const char *v256;
  int v257;
  uint64_t v258;
  int v259;
  int v260;
  unint64_t v261;
  int v262;
  unint64_t v263;
  int v264;
  int v265;
  int v266;
  int v267;
  unint64_t v268;
  int v269;
  int v270;
  int v271;
  unint64_t v272;
  int v273;
  unint64_t v274;
  int v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  _BYTE *v279;
  _BYTE *v280;
  const char *v281;
  _BYTE *v282;
  _BYTE *v283;
  int v284;
  int v285;
  int v286;
  int v287;
  _DWORD *v288;
  double v289;
  int v290;
  char *v291;
  int v292;
  int v293;
  unint64_t v294;
  int v295;
  int v296;
  unint64_t v297;
  double v298;
  int v299;
  uint64_t v300;
  _BYTE *v301;
  int v302;
  unint64_t v303;
  char *v304;
  int v305;
  int v306;
  int v307;
  unint64_t v308;
  uint64_t *v309;
  char *v310;
  const char *v311;
  int v312;
  char *v313;
  int v314;
  char *v315;
  uint64_t *v316;
  int v317;
  uint64_t v318;
  unint64_t v319;
  int v320;
  int v321;
  unint64_t v322;
  double v323;
  int v324;
  unint64_t v325;
  int v326;
  int v327;
  unint64_t v328;
  int v329;
  int v330;
  int v331;
  unint64_t v332;
  uint64_t *v333;
  int v334;
  uint64_t v335;
  unint64_t v336;
  int v337;
  int v338;
  int v339;
  char *v340;
  int v341;
  int v342;
  int v343;
  int v344;
  unint64_t v345;
  int v346;
  int v347;
  int v348;
  int v349;
  unint64_t v350;
  int v351;
  unint64_t v352;
  int v353;
  unint64_t v354;
  char *v355;
  uint64_t v356;
  int v357;
  uint64_t ArgTypes;
  int v359;
  unint64_t v360;
  int v361;
  int v362;
  int v363;
  unint64_t v364;
  int v365;
  int v366;
  unint64_t v367;
  int v368;
  int v369;
  int v370;
  int v371;
  unint64_t v372;
  int v373;
  unint64_t v374;
  int v375;
  int v376;
  unint64_t v377;
  double v378;
  uint64_t *v379;
  int v380;
  uint64_t v381;
  int v382;
  char *v383;
  int v384;
  int v385;
  unint64_t v386;
  int v387;
  int v388;
  int v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  int v393;
  int v394;
  unint64_t v395;
  int v396;
  uint64_t v397;
  int v398;
  int v399;
  int v400;
  int v401;
  _DWORD *v402;
  int v403;
  unint64_t v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  const char *v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  unint64_t v416;
  uint64_t v417;
  int v418;
  int v419;
  unint64_t v420;
  int v421;
  int v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  int v427;
  int v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;
  int v432;
  unint64_t v433;
  int v434;
  int v435;
  unint64_t v436;
  int v437;
  unint64_t v438;
  int v439;
  int v440;
  char *v441;
  uint64_t v442;
  int v443;
  unint64_t v444;
  unint64_t v445;
  double v446;
  int v447;
  uint64_t v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  unint64_t v454;
  int v455;
  unint64_t v456;
  double v457;
  char *v458;
  uint64_t v459;
  int v460;
  unint64_t v461;
  uint64_t v462;
  double v463;
  unint64_t v464;
  int v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  int v473;
  _DWORD *v474;
  double v475;
  int v476;
  unint64_t v477;
  uint64_t v478;
  int v479;
  uint64_t v480;
  int v481;
  _DWORD *v482;
  double v483;
  int v484;
  int v485;
  int v486;
  int v487;
  unint64_t v488;
  int v489;
  unint64_t v490;
  int v491;
  int v492;
  uint64_t v493;
  int v494;
  unint64_t v495;
  int v496;
  int v497;
  unint64_t v498;
  int v499;
  unint64_t v500;
  int v501;
  int v502;
  int v503;
  int v504;
  unint64_t v505;
  int v506;
  int v507;
  int v508;
  unint64_t v509;
  int v510;
  int v511;
  int v512;
  uint64_t v513;
  unint64_t v514;
  uint64_t v515;
  int v516;
  int v517;
  int v518;
  int v519;
  int v520;
  int v521;
  unint64_t v522;
  uint64_t v523;
  uint64_t v524;
  int v525;
  unint64_t v526;
  double v527;
  unint64_t v528;
  int v529;
  int v530;
  char *v531;
  uint64_t v532;
  int v533;
  int v534;
  unint64_t v535;
  int v536;
  unint64_t v537;
  int v538;
  char *v539;
  int v540;
  int v541;
  unint64_t v542;
  int v543;
  unint64_t v544;
  int v545;
  unint64_t v546;
  uint64_t v547;
  int v548;
  int v549;
  _DWORD *v550;
  double v551;
  int v552;
  int v553;
  unint64_t v554;
  int v555;
  unint64_t v556;
  int v557;
  char *v558;
  uint64_t v559;
  int v560;
  int v561;
  int v562;
  unint64_t v563;
  char *v564;
  uint64_t v565;
  int v566;
  int v567;
  int v568;
  int v569;
  int v570;
  uint64_t v571;
  uint64_t v572;
  double v573;
  unint64_t RecursiveViewSelect;
  int v575;
  int v576;
  int v577;
  double v578;
  unint64_t v579;
  uint64_t v580;
  int v581;
  unint64_t v582;
  unint64_t v583;
  double v584;
  int v585;
  int v586;
  unint64_t v587;
  int v588;
  int v589;
  char *v590;
  uint64_t v591;
  int v592;
  uint64_t v593;
  _DWORD *v594;
  double v595;
  int v596;
  _DWORD *v597;
  double v598;
  int v599;
  unint64_t v600;
  int v601;
  unint64_t v602;
  uint64_t v603;
  uint64_t v604;
  int v605;
  int v606;
  unint64_t v607;
  int v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  int v613;
  int v614;
  uint64_t v615;
  int v616;
  int v617;
  _DWORD *v618;
  double v619;
  int v620;
  int v621;
  unint64_t v622;
  int v623;
  int v624;
  unint64_t v625;
  int v626;
  int v627;
  int v628;
  int v629;
  int v630;
  unint64_t v631;
  int v632;
  int v633;
  char *v634;
  uint64_t v635;
  int v636;
  int v637;
  int v638;
  int v639;
  int v640;
  int v641;
  uint64_t v642;
  int v643;
  int v644;
  int v645;
  uint64_t v646;
  uint64_t v647;
  int v648;
  const char *v649;
  int v650;
  uint64_t v651;
  int v652;
  int v653;
  int v654;
  _DWORD *v655;
  double v656;
  int v657;
  int v658;
  int v659;
  unint64_t v660;
  char v661;
  int v662;
  unint64_t v663;
  int v664;
  int v665;
  unint64_t v666;
  int v667;
  unint64_t v668;
  int v669;
  int v670;
  unint64_t Alias;
  int v672;
  unint64_t v673;
  uint64_t v674;
  uint64_t v675;
  _BYTE *v676;
  int v677;
  unint64_t v678;
  uint64_t v679;
  int v680;
  uint64_t v681;
  int v682;
  unint64_t v683;
  int v684;
  unint64_t v685;
  uint64_t v686;
  int v687;
  int v688;
  _DWORD *v689;
  uint64_t v690;
  int v691;
  int v692;
  int v693;
  int v694;
  uint64_t v695;
  unint64_t v696;
  unint64_t v697;
  int v698;
  unint64_t v699;
  int v700;
  unint64_t v701;
  int v702;
  int v703;
  int v704;
  _DWORD *v705;
  int v706;
  int v707;
  int v708;
  int v709;
  int v710;
  unint64_t v711;
  int v712;
  const char *v713;
  const char *v714;
  int v715;
  unint64_t v716;
  int v717;
  const char *v718;
  const char *v719;
  int v720;
  _DWORD *v721;
  double v722;
  int v723;
  int v724;
  uint64_t v725;
  int v726;
  int v727;
  int v728;
  int v729;
  unint64_t v730;
  int v731;
  unint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  int v736;
  int v737;
  unint64_t v738;
  int v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  double v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  unint64_t v747;
  uint64_t v748;
  int v749;
  int v750;
  const char *v751;
  int v752;
  int v753;
  char *v754;
  int v755;
  unint64_t v756;
  unint64_t v757;
  int v758;
  int v759;
  unint64_t v760;
  uint64_t v761;
  const char *v762;
  char *v763;
  uint64_t v764;
  int v765;
  int v766;
  int v767;
  uint64_t v768;
  uint64_t v769;
  int v770;
  int v771;
  int v772;
  int v773;
  double v774;
  int v775;
  const char *v776;
  unint64_t v777;
  const char *v778;
  int v779;
  unint64_t v780;
  int v781;
  int v782;
  int v783;
  int v784;
  unint64_t v785;
  int v786;
  int v787;
  unint64_t v788;
  int v789;
  unint64_t v790;
  int v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  double v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  const char *v799;
  int v800;
  unint64_t v801;
  uint64_t v802;
  uint64_t v803;
  int v804;
  uint64_t v805;
  int v806;
  int v807;
  unint64_t v808;
  int v809;
  unint64_t v810;
  int v811;
  int v812;
  unint64_t v813;
  int v814;
  unint64_t v815;
  uint64_t v816;
  double v817;
  unint64_t v818;
  int v819;
  unint64_t v820;
  uint64_t v821;
  uint64_t v822;
  _BYTE *v823;
  uint64_t v824;
  uint64_t v825;
  int v826;
  unint64_t v827;
  double v828;
  uint64_t v829;
  uint64_t v830;
  int v831;
  int v832;
  unint64_t v833;
  int v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  double v838;
  uint64_t v839;
  uint64_t v840;
  int v841;
  const char *v842;
  int v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  _BYTE *v847;
  int v848;
  unint64_t v849;
  int v850;
  int v851;
  int v852;
  int v853;
  unint64_t v854;
  int v855;
  uint64_t v856;
  uint64_t v857;
  int v858;
  uint64_t v859;
  uint64_t v860;
  int v861;
  int v862;
  unint64_t v863;
  int v864;
  unint64_t v865;
  uint64_t v866;
  int v867;
  int v868;
  double v869;
  unint64_t v870;
  int v871;
  int v872;
  int v873;
  int v874;
  int v875;
  uint64_t v876;
  uint64_t v877;
  int v878;
  int v879;
  int v880;
  int v881;
  int v882;
  unint64_t v883;
  int v884;
  int v885;
  unint64_t v886;
  int v887;
  int v888;
  int v889;
  int v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  unint64_t v905;
  double v906;
  int v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  double v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  int v917;
  uint64_t v918;
  uint64_t v919;
  int v920;
  int v921;
  unint64_t v922;
  int v923;
  int v924;
  unint64_t v925;
  uint64_t v926;
  double v927;
  _DWORD *v928;
  double v929;
  int v930;
  const char *v931;
  int v932;
  int v933;
  int v934;
  unint64_t v935;
  const char *v936;
  uint64_t v937;
  int v938;
  unint64_t BoolAConst;
  uint64_t v940;
  uint64_t v941;
  int v942;
  unint64_t v943;
  int v944;
  int v945;
  int v946;
  int v947;
  uint64_t v948;
  uint64_t *v949;
  unint64_t v950;
  unint64_t v951;
  uint64_t v952;
  _DWORD *v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  int v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  int v961;
  unint64_t v962;
  unint64_t v963;
  double v964;
  const char *v965;
  int v966;
  double v967;
  unint64_t TypeNameFromNameList;
  int v969;
  unint64_t v970;
  int v971;
  int v972;
  int v973;
  char *v974;
  uint64_t v975;
  int v976;
  unint64_t v977;
  int v978;
  int v979;
  uint64_t v980;
  int v981;
  uint64_t v982;
  char v983;
  uint64_t v984;
  uint64_t v985;
  int v986;
  int v987;
  int v988;
  unint64_t v989;
  int v990;
  _DWORD *v991;
  uint64_t v992;
  int v993;
  int v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  double v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  int v1002;
  unint64_t v1003;
  int v1004;
  int v1005;
  unint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  int v1010;
  int v1011;
  uint64_t v1012;
  int v1013;
  int v1014;
  int v1015;
  unint64_t v1016;
  int v1017;
  int v1018;
  int v1019;
  int v1020;
  unint64_t v1021;
  int v1022;
  uint64_t v1023;
  int v1024;
  uint64_t v1025;
  uint64_t v1026;
  unint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  int v1031;
  int v1032;
  uint64_t v1033;
  uint64_t v1034;
  int v1035;
  unint64_t v1036;
  uint64_t v1037;
  int v1038;
  int v1039;
  int v1040;
  int v1041;
  int v1042;
  int v1043;
  int v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  int v1049;
  int v1050;
  char *v1051;
  int v1052;
  uint64_t v1053;
  int v1054;
  uint64_t v1055;
  uint64_t v1056;
  int v1057;
  unint64_t v1058;
  uint64_t v1059;
  unint64_t v1060;
  double v1061;
  int v1062;
  unint64_t v1063;
  int v1064;
  int v1065;
  unint64_t v1066;
  int v1067;
  uint64_t v1068;
  uint64_t v1069;
  const void **v1070;
  uint64_t v1071;
  int v1072;
  _DWORD *v1073;
  uint64_t v1074;
  int v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  double v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  int v1083;
  int v1084;
  uint64_t v1085;
  int v1086;
  int v1087;
  unint64_t v1088;
  uint64_t *v1089;
  int v1090;
  unint64_t v1091;
  _DWORD *v1092;
  uint64_t v1093;
  unint64_t v1094;
  double v1095;
  uint64_t v1096;
  uint64_t v1097;
  _DWORD **v1098;
  unint64_t NotExpr;
  unint64_t v1100;
  double v1101;
  unint64_t v1102;
  double v1103;
  uint64_t v1104;
  uint64_t v1105;
  _DWORD **v1106;
  uint64_t *v1107;
  _DWORD *v1108;
  int v1109;
  _BYTE *v1110;
  int v1111;
  uint64_t v1112;
  _DWORD *v1113;
  double v1114;
  uint64_t v1115;
  uint64_t v1116;
  int v1117;
  int v1118;
  uint64_t v1119;
  int v1120;
  int v1121;
  unint64_t v1122;
  int v1123;
  unint64_t v1124;
  int v1125;
  int v1126;
  int v1127;
  int v1128;
  int v1129;
  unint64_t v1130;
  int v1131;
  unint64_t v1132;
  uint64_t v1133;
  uint64_t *v1134;
  _DWORD *v1135;
  uint64_t v1136;
  int v1137;
  int v1138;
  _DWORD *v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  double v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  int v1149;
  unint64_t v1150;
  int v1151;
  unint64_t v1152;
  int v1153;
  int v1154;
  unint64_t v1155;
  int v1156;
  int v1157;
  int v1158;
  int v1159;
  int v1160;
  char *v1161;
  int v1162;
  unint64_t v1163;
  int v1164;
  uint64_t v1165;
  uint64_t v1166;
  int v1167;
  uint64_t *v1168;
  _DWORD *v1169;
  int v1170;
  _BYTE *v1171;
  int v1172;
  uint64_t v1173;
  _DWORD *v1174;
  double v1175;
  uint64_t v1176;
  const char *v1177;
  int v1178;
  int v1179;
  int v1180;
  unint64_t v1181;
  int v1182;
  unint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  unint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  int v1190;
  unint64_t v1191;
  int v1192;
  int v1193;
  int v1194;
  char *v1195;
  unint64_t v1196;
  unint64_t v1197;
  int v1198;
  int v1199;
  uint64_t v1200;
  uint64_t v1201;
  _DWORD *v1202;
  int v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  double v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  int v1211;
  int v1212;
  int v1213;
  int v1214;
  int v1215;
  uint64_t v1216;
  uint64_t v1217;
  int v1218;
  int v1219;
  int v1220;
  unint64_t v1221;
  int v1222;
  uint64_t *v1223;
  _DWORD *v1224;
  uint64_t v1225;
  uint64_t v1226;
  unint64_t v1227;
  uint64_t v1228;
  unint64_t v1229;
  int v1230;
  unint64_t v1231;
  int v1232;
  int v1233;
  int v1234;
  uint64_t v1235;
  uint64_t *v1236;
  _DWORD *v1237;
  int v1238;
  _BYTE *v1239;
  int v1240;
  uint64_t v1241;
  _DWORD *v1242;
  uint64_t v1243;
  int v1244;
  unint64_t v1245;
  int v1246;
  int v1247;
  int v1248;
  int v1249;
  int v1250;
  uint64_t v1251;
  int v1252;
  uint64_t v1253;
  int v1254;
  int v1255;
  unint64_t v1256;
  int v1257;
  unint64_t v1258;
  int v1259;
  unint64_t v1260;
  int v1261;
  int v1262;
  unint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  int v1266;
  int v1267;
  uint64_t v1268;
  int v1269;
  unint64_t v1270;
  int v1271;
  uint64_t v1272;
  int v1273;
  unint64_t v1274;
  int v1275;
  unint64_t v1276;
  int v1277;
  char *RangeVar;
  int v1279;
  uint64_t v1280;
  int v1281;
  int v1282;
  int v1283;
  int v1284;
  int v1285;
  unint64_t v1286;
  _DWORD *v1287;
  double v1288;
  int v1289;
  int v1290;
  unint64_t v1291;
  int v1292;
  unint64_t v1293;
  int v1294;
  unint64_t v1295;
  int v1296;
  int v1297;
  unint64_t v1298;
  int v1299;
  int v1300;
  int v1301;
  int v1302;
  uint64_t *v1303;
  int v1304;
  uint64_t v1305;
  unint64_t v1306;
  int v1307;
  int v1308;
  unint64_t v1309;
  double v1310;
  uint64_t v1311;
  int v1312;
  int v1313;
  unint64_t v1314;
  int v1315;
  int v1316;
  int v1317;
  int v1318;
  unint64_t v1319;
  int v1320;
  int v1321;
  int v1322;
  unint64_t v1323;
  int v1324;
  int v1325;
  int v1326;
  unint64_t v1327;
  unint64_t v1328;
  uint64_t *v1329;
  unint64_t v1330;
  uint64_t v1331;
  int v1332;
  int v1333;
  unint64_t v1334;
  int v1335;
  int v1336;
  uint64_t v1337;
  int v1338;
  int v1339;
  unint64_t v1340;
  int v1341;
  unint64_t v1342;
  int v1343;
  int v1344;
  int v1345;
  int v1346;
  unint64_t v1347;
  unint64_t v1348;
  int v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  double v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  unint64_t v1357;
  int v1358;
  unint64_t v1359;
  int v1360;
  uint64_t v1361;
  int v1362;
  unint64_t v1363;
  int v1364;
  int v1365;
  int v1366;
  int v1367;
  int v1368;
  int v1369;
  uint64_t v1370;
  int v1371;
  uint64_t v1372;
  uint64_t v1373;
  int v1374;
  unint64_t v1375;
  int v1376;
  unint64_t v1377;
  int v1378;
  int v1379;
  _DWORD *v1380;
  double v1381;
  unint64_t v1382;
  uint64_t v1383;
  int v1384;
  unint64_t v1385;
  int v1386;
  int v1387;
  unint64_t v1388;
  const char *v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  double v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  int v1397;
  unint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  double v1404;
  int v1405;
  uint64_t v1406;
  _BYTE *v1407;
  uint64_t v1408;
  uint64_t v1409;
  int v1410;
  unint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  int v1414;
  int v1415;
  int v1416;
  unint64_t v1417;
  int v1418;
  unint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  int v1422;
  int v1423;
  unint64_t v1424;
  uint64_t v1425;
  int v1426;
  int v1427;
  _DWORD *v1428;
  uint64_t v1429;
  int v1430;
  char *v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  int v1435;
  int v1436;
  int v1437;
  int v1438;
  int v1439;
  int v1440;
  int v1441;
  int v1442;
  int v1443;
  uint64_t v1444;
  int v1445;
  int v1446;
  unint64_t v1447;
  int v1448;
  unint64_t v1449;
  int v1450;
  unint64_t v1451;
  uint64_t v1452;
  int v1453;
  unint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  const char *v1459;
  _DWORD *v1460;
  double v1461;
  int v1462;
  int v1463;
  unint64_t v1464;
  int v1465;
  int v1466;
  _DWORD *v1467;
  uint64_t v1468;
  _DWORD *v1469;
  uint64_t v1470;
  int v1471;
  int v1472;
  int v1473;
  int v1474;
  int v1475;
  uint64_t v1476;
  uint64_t v1477;
  _BYTE *v1478;
  uint64_t v1479;
  uint64_t v1480;
  int v1481;
  unint64_t v1482;
  double v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t *v1486;
  char *v1487;
  double v1488;
  uint64_t v1489;
  int v1490;
  int v1491;
  int v1492;
  int v1493;
  int v1494;
  double v1495;
  unint64_t RangeVarFromAnyName;
  int v1497;
  int v1498;
  unint64_t v1499;
  int v1500;
  unint64_t v1501;
  int v1502;
  unint64_t v1503;
  int v1504;
  double v1505;
  unint64_t v1506;
  int v1507;
  uint64_t v1508;
  uint64_t v1509;
  unint64_t v1510;
  uint64_t v1511;
  int v1512;
  unint64_t v1513;
  double v1514;
  int v1515;
  int v1516;
  unint64_t v1517;
  int v1518;
  int v1519;
  int v1520;
  int v1521;
  unint64_t v1522;
  int v1523;
  uint64_t v1524;
  int v1525;
  _DWORD *v1526;
  uint64_t v1527;
  int v1528;
  unint64_t v1529;
  int v1530;
  unint64_t v1531;
  int v1532;
  _DWORD *v1533;
  int v1534;
  uint64_t *v1535;
  _DWORD *v1536;
  int v1537;
  int v1538;
  uint64_t v1539;
  _DWORD *v1540;
  uint64_t v1541;
  char *v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  unint64_t v1546;
  int v1547;
  unint64_t v1548;
  int v1549;
  uint64_t v1550;
  uint64_t v1551;
  int v1552;
  double v1553;
  uint64_t v1554;
  uint64_t v1555;
  int v1556;
  uint64_t v1557;
  int v1558;
  int v1559;
  int v1560;
  unint64_t v1561;
  int v1562;
  unint64_t v1563;
  _DWORD *v1564;
  uint64_t *v1565;
  int v1566;
  uint64_t v1567;
  unint64_t v1568;
  int v1569;
  unint64_t v1570;
  unint64_t v1571;
  uint64_t v1572;
  int v1573;
  int v1574;
  int v1575;
  int v1576;
  int v1577;
  unint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  double v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  int v1586;
  int v1587;
  int v1588;
  unint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  int v1592;
  int v1593;
  int v1594;
  unint64_t v1595;
  int v1596;
  unint64_t v1597;
  uint64_t v1598;
  _DWORD *v1599;
  int v1600;
  int v1601;
  _DWORD *v1602;
  uint64_t v1603;
  int v1604;
  unint64_t v1605;
  int v1606;
  int v1607;
  unint64_t v1608;
  uint64_t v1609;
  int v1610;
  unint64_t v1611;
  int v1612;
  int v1613;
  int v1614;
  int v1615;
  int v1616;
  unint64_t Float;
  _BYTE *v1618;
  int v1619;
  unint64_t v1620;
  uint64_t v1621;
  uint64_t *v1622;
  uint64_t v1623;
  unint64_t v1624;
  int v1625;
  int v1626;
  unint64_t v1627;
  int v1628;
  unint64_t v1629;
  int v1630;
  int v1631;
  int v1632;
  unint64_t v1633;
  uint64_t v1634;
  int v1635;
  int v1636;
  unint64_t v1637;
  int v1638;
  int v1639;
  int v1640;
  unint64_t v1641;
  int v1642;
  int v1643;
  unint64_t v1644;
  int v1645;
  int v1646;
  unint64_t v1647;
  _DWORD *v1648;
  int v1649;
  uint64_t v1650;
  const char *v1651;
  unint64_t v1652;
  int v1653;
  int v1654;
  unint64_t v1655;
  int v1656;
  _QWORD *v1657;
  unsigned int v1658;
  _QWORD *v1659;
  int v1660;
  int v1661;
  uint64_t v1662;
  uint64_t v1663;
  char *v1664;
  int v1665;
  int v1666;
  int v1667;
  int v1668;
  uint64_t v1669;
  uint64_t *v1670;
  unint64_t v1671;
  uint64_t v1672;
  int v1673;
  unint64_t v1674;
  uint64_t v1675;
  int v1676;
  int v1677;
  int v1678;
  int v1679;
  int v1680;
  uint64_t *v1681;
  int v1682;
  uint64_t v1683;
  unint64_t v1684;
  int v1685;
  unint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  _BYTE *v1689;
  _BYTE *v1690;
  const char *v1691;
  char *v1692;
  int v1693;
  int v1694;
  int v1695;
  unint64_t v1696;
  int v1697;
  int v1698;
  int v1699;
  unint64_t v1700;
  int v1701;
  int v1702;
  int v1703;
  char *v1704;
  int v1705;
  unint64_t v1706;
  int v1707;
  int v1708;
  int v1709;
  int v1710;
  uint64_t v1711;
  uint64_t *v1712;
  uint64_t v1713;
  uint64_t v1714;
  unint64_t v1715;
  int v1716;
  int v1717;
  int v1718;
  char *v1719;
  int v1720;
  int v1721;
  int v1722;
  unint64_t v1723;
  unint64_t v1724;
  uint64_t v1725;
  int v1726;
  unint64_t v1727;
  int v1728;
  char *v1729;
  uint64_t v1730;
  uint64_t v1731;
  unint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  int v1735;
  int v1736;
  int v1737;
  int v1738;
  unint64_t v1739;
  unint64_t v1740;
  int v1741;
  int v1742;
  int v1743;
  unint64_t v1744;
  int v1745;
  int v1746;
  int v1747;
  double v1748;
  unint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  unint64_t v1752;
  int v1753;
  int v1754;
  unint64_t v1755;
  int v1756;
  int v1757;
  unint64_t v1758;
  int v1759;
  int v1760;
  int v1761;
  char *v1762;
  int v1763;
  unint64_t v1764;
  int v1765;
  int v1766;
  char *v1767;
  int v1768;
  char *v1769;
  int v1770;
  unint64_t v1771;
  int v1772;
  unint64_t v1773;
  unint64_t v1774;
  uint64_t v1775;
  int v1776;
  int v1777;
  int v1778;
  int v1779;
  int v1780;
  unint64_t v1781;
  uint64_t v1782;
  int v1783;
  int v1784;
  uint64_t v1785;
  int v1786;
  int v1787;
  int v1788;
  uint64_t v1789;
  uint64_t v1790;
  double v1791;
  unint64_t v1792;
  int v1793;
  uint64_t *v1794;
  int v1795;
  uint64_t v1796;
  unint64_t v1797;
  int v1798;
  unint64_t v1799;
  int v1800;
  unint64_t v1801;
  unint64_t v1802;
  unint64_t v1803;
  int v1804;
  uint64_t v1805;
  uint64_t v1806;
  int v1807;
  char *v1808;
  int v1809;
  unint64_t v1810;
  int v1811;
  unint64_t v1812;
  int v1813;
  int v1814;
  char *v1815;
  int v1816;
  unint64_t v1817;
  uint64_t v1818;
  uint64_t v1819;
  uint64_t v1820;
  const char *v1821;
  int v1822;
  int v1823;
  int v1824;
  int v1825;
  int v1826;
  double v1827;
  unint64_t v1828;
  int v1829;
  int v1830;
  int v1831;
  unint64_t v1832;
  int v1833;
  int v1834;
  int v1835;
  int v1836;
  int v1837;
  unint64_t v1838;
  int v1839;
  char *v1840;
  unint64_t v1841;
  double v1842;
  unint64_t v1843;
  double v1844;
  int v1845;
  unint64_t v1846;
  _DWORD *v1847;
  double v1848;
  int v1849;
  int v1850;
  int v1851;
  int v1852;
  int v1853;
  int v1854;
  int v1855;
  int v1856;
  int v1857;
  unint64_t v1858;
  int v1859;
  int v1860;
  int v1861;
  unint64_t v1862;
  uint64_t v1863;
  int v1864;
  int v1865;
  int v1866;
  int v1867;
  unint64_t v1868;
  uint64_t v1869;
  int v1870;
  _DWORD *Integer;
  double v1872;
  int v1873;
  uint64_t v1874;
  int v1875;
  int v1876;
  unint64_t v1877;
  int v1878;
  unint64_t v1879;
  int v1880;
  int v1881;
  int v1882;
  unint64_t v1883;
  int v1884;
  int v1885;
  unint64_t v1886;
  int v1887;
  unint64_t v1888;
  int v1889;
  uint64_t v1890;
  int v1891;
  int v1892;
  char *v1893;
  int v1894;
  uint64_t v1895;
  int v1896;
  int v1897;
  int v1898;
  _DWORD *v1899;
  int v1900;
  int v1901;
  int v1902;
  int v1903;
  int v1904;
  int v1905;
  char *v1906;
  int v1907;
  char *v1908;
  int v1909;
  int v1910;
  int v1911;
  uint64_t v1912;
  int v1913;
  unint64_t v1914;
  uint64_t v1915;
  int v1916;
  uint64_t v1917;
  int v1918;
  uint64_t v1919;
  unint64_t v1920;
  uint64_t v1921;
  int v1922;
  int v1923;
  int v1924;
  unint64_t v1925;
  uint64_t v1926;
  int v1927;
  unint64_t v1928;
  int v1929;
  unint64_t v1930;
  _DWORD *v1931;
  double v1932;
  int v1933;
  unint64_t v1934;
  int v1935;
  int v1936;
  unint64_t v1937;
  int v1938;
  int v1939;
  unint64_t v1940;
  int v1941;
  unint64_t v1942;
  _DWORD *v1943;
  double v1944;
  int v1945;
  const char *v1946;
  int v1947;
  int v1948;
  int v1949;
  uint64_t v1950;
  uint64_t v1951;
  uint64_t *v1952;
  int v1953;
  uint64_t v1954;
  unint64_t v1955;
  uint64_t *v1956;
  int *v1957;
  uint64_t v1958;
  uint64_t v1959;
  int v1960;
  uint64_t v1961;
  int v1962;
  int v1963;
  int v1964;
  uint64_t v1965;
  const char *v1966;
  int v1967;
  int v1968;
  int v1969;
  int v1970;
  int v1971;
  int v1972;
  _DWORD *v1973;
  double v1974;
  int v1975;
  const char *v1976;
  int v1977;
  _DWORD *v1978;
  uint64_t v1979;
  int v1980;
  int v1981;
  unint64_t v1982;
  unint64_t v1983;
  unint64_t v1984;
  uint64_t v1985;
  uint64_t v1986;
  uint64_t v1988;
  uint64_t v1989;
  size_t v1990;
  size_t v1991;
  uint64_t v1992;
  uint64_t v1993;
  char v1994;
  unsigned int v1995;
  unsigned int v1996;
  unsigned int v1997;
  unsigned int v1998;
  unsigned int v1999;
  unsigned int v2000;
  unsigned int v2001;
  uint64_t v2002;
  unsigned int v2003;
  uint64_t v2004;
  unsigned int v2005;
  unsigned int v2006;
  unsigned int v2007;
  unsigned int v2008;
  unsigned int v2009;
  _BYTE *v2010;
  _BYTE *v2011;
  uint64_t v2012;
  _BYTE *v2013;
  _BYTE *v2014;
  uint64_t v2015;
  _BYTE *v2016;
  _BYTE *v2017;
  _BYTE *v2018;
  _BYTE *v2019;
  uint64_t v2020;
  _BYTE *v2021;
  uint64_t v2022;
  _BYTE *v2023;
  uint64_t v2024;
  uint64_t v2025;
  _BYTE *v2026;
  uint64_t v2027;
  _BYTE *v2028;
  _BYTE *v2029;
  _BYTE *v2030;
  uint64_t v2031;
  uint64_t v2032;
  uint64_t v2033;
  uint64_t v2034;
  uint64_t v2035;
  uint64_t v2036;
  uint64_t v2037;
  uint64_t v2038;
  uint64_t v2039;
  uint64_t v2040;
  uint64_t v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t v2044;
  uint64_t v2045;
  uint64_t v2046;
  uint64_t v2047;
  uint64_t v2048;
  uint64_t v2049;
  uint64_t v2050;
  uint64_t v2051;
  uint64_t v2052;
  uint64_t v2053;
  uint64_t v2054;
  uint64_t v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  uint64_t v2059;
  uint64_t v2060;
  uint64_t v2061;
  const void **v2062;
  uint64_t v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  uint64_t v2067;
  uint64_t v2068;
  uint64_t v2069;
  int v2070;
  int v2071;
  int v2072;
  int v2073;
  int v2074;
  int v2075;
  int v2076;
  int v2077;
  int v2078;
  int v2079;
  int v2080;
  unsigned int v2081;
  int v2082;
  uint64_t v2083;
  int v2084;
  int v2085;
  int v2086;
  int v2087;
  int v2088;
  int v2089;
  int v2090;
  int v2091;
  int v2092;
  int v2093;
  int v2094;
  int v2095;
  int v2096;
  int v2097;
  int v2098;
  int v2099;
  _DWORD *v2100;
  int v2101;
  int v2102;
  int v2103;
  int v2104;
  int v2105;
  int v2106;
  _BYTE ***v2107;
  uint64_t *v2108;
  void *__src;
  void *v2110;
  int v2111;
  uint64_t v2112;
  _BYTE v2113[800];
  _BYTE v2114[1600];
  _BYTE v2115[400];
  uint64_t v2116;

  v2107 = a1;
  v2116 = *MEMORY[0x1E0C80C00];
  v2112 = 0;
  v2111 = 0;
  v2108 = (uint64_t *)CurrentMemoryContext(a2);
  v2010 = (_BYTE *)operator_precedence_warning();
  v10 = 0;
  v11 = (uint64_t *)v2114;
  v12 = (int *)v2113;
  v13 = 200;
  v2110 = v2113;
  __src = v2114;
  v14 = v2115;
  v15 = v2115;
  v16 = 4294967294;
  while (1)
  {
    *(_WORD *)v14 = v10;
    if (&v15[2 * v13 - 2] <= v14)
    {
      if (v13 >> 4 > 0x270
        || (2 * v13 >= 0x2710 ? (v13 = 10000) : (v13 *= 2), (v17 = (_BYTE *)palloc(14 * v13 + 14)) == 0))
      {
        scanner_yyerror((size_t)"memory exhausted", (uint64_t)v2107);
      }
      v18 = v17;
      v19 = (v14 - v15) >> 1;
      v20 = v19 + 1;
      memcpy(v17, v15, 2 * (v19 + 1));
      v21 = &v18[(2 * v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      memcpy(v21, __src, 8 * (v19 + 1));
      memcpy(&v21[8 * v13], v2110, 4 * (v19 + 1));
      if (v15 != v2115)
        pfree((uint64_t)v15);
      if (&v18[2 * v13] <= &v18[2 * v20])
      {
        v1986 = 1;
        if (v18 != v2115)
          goto LABEL_1864;
        return v1986;
      }
      v14 = &v18[2 * v19];
      v11 = (uint64_t *)&v21[8 * v20 - 8];
      v12 = (int *)&v21[8 * v13 - 4 + 4 * v20];
      __src = &v18[(2 * v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      v2110 = &v21[8 * v13];
      v15 = v18;
    }
    v22 = yypact[v10];
    if (v22 == -4998)
      goto LABEL_15;
    if ((_DWORD)v16 == -2)
      v16 = base_yylex(&v2112, (_BYTE **)&v2111, v2107);
    if ((int)v16 < 1)
    {
      v29 = 0;
      v16 = 0;
      v30 = v22;
      if (v22 > 0x19CA5)
        goto LABEL_15;
    }
    else if (v16 > 0x2DB)
    {
      v29 = 2;
      v30 = v22 + 2;
      if (v30 > 0x19CA5)
        goto LABEL_15;
    }
    else
    {
      v29 = yytranslate[v16];
      v30 = v29 + v22;
      if (v30 > 0x19CA5)
        goto LABEL_15;
    }
    if (v29 != (__int16)yycheck[v30])
    {
LABEL_15:
      v23 = yydefact[v10];
      if (!yydefact[v10])
        goto LABEL_1869;
      v24 = yydefact[v10];
      v25 = yyr2[v23];
      if (!yyr2[v23])
      {
LABEL_40:
        v26 = -1;
        StringConstCast = v11[1 - v25];
        v28 = v24 - 2;
LABEL_41:
        switch(v28)
        {
          case 0:
            (*v2107)[16] = (_BYTE *)*v11;
            break;
          case 1:
            v2040 = v24;
            v674 = *(v11 - 2);
            if (v674)
            {
              v675 = *(_QWORD *)(*(_QWORD *)(v674 + 16) + 8 * (*(_DWORD *)(v674 + 4) - 1));
              if (*(int *)(v675 + 20) <= 0)
                *(_DWORD *)(v675 + 20) = *(v12 - 1) - *(_DWORD *)(v675 + 16);
            }
            v676 = (_BYTE *)*v11;
            StringConstCast = *(v11 - 2);
            if (!*v11)
              goto LABEL_1810;
            v2081 = *(v12 - 1) + 1;
            v677 = v26;
            v678 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            *(_DWORD *)v678 = 230;
            *(_QWORD *)(v678 + 8) = v676;
            *(_QWORD *)(v678 + 16) = v2081;
            v679 = lappend(StringConstCast, v678);
            v26 = v677;
            StringConstCast = v679;
            v24 = v2040;
            break;
          case 2:
            v300 = v24;
            v301 = (_BYTE *)*v11;
            if (*v11)
            {
              v302 = v26;
              v303 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
              *(_DWORD *)v303 = 230;
              *(_QWORD *)(v303 + 8) = v301;
              *(_QWORD *)(v303 + 16) = 0;
              *(double *)&v9 = list_make1_impl(226, v303);
              v26 = v302;
              StringConstCast = (uint64_t)v304;
            }
            else
            {
              StringConstCast = 0;
            }
            v24 = v300;
            break;
          case 128:
          case 135:
          case 137:
          case 160:
          case 181:
          case 183:
          case 240:
          case 241:
          case 243:
          case 244:
          case 264:
          case 357:
          case 362:
          case 364:
          case 371:
            goto LABEL_1090;
          case 129:
            v1694 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1694;
            StringConstCast = v52;
            v92 = 344;
            goto LABEL_1634;
          case 130:
            v1977 = v26;
            v66 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1977;
            StringConstCast = v66;
            v9 = 278;
            goto LABEL_1806;
          case 134:
          case 136:
            v34 = *(v11 - 1);
            v2 = (const void **)*v11;
            goto LABEL_1776;
          case 138:
            v32 = v26;
            String = makeString(*v11);
            v187 = *(v12 - 1);
            goto LABEL_468;
          case 139:
            v547 = v24;
            v548 = *(_DWORD *)v11;
            v549 = *v12;
            v2080 = v26;
            v550 = (_DWORD *)MemoryContextAllocZero(*v2108, 0xCuLL);
            *v550 = 348;
            v550[1] = v548;
            v24 = v547;
            v550[2] = v549;
            v552 = *(v12 - 1);
            goto LABEL_1739;
          case 140:
            v1895 = v24;
            v1896 = *v12;
            v206 = v26;
            v207 = MemoryContextAllocZero(*v2108, 0xCuLL);
            *(_QWORD *)v207 = 348;
            *(_DWORD *)(v207 + 8) = v1896;
            v24 = v1895;
            v208 = *(v12 - 1);
            goto LABEL_1695;
          case 141:
            v45 = *(v12 - 1);
            v43 = "password";
            goto LABEL_1597;
          case 142:
            v32 = v26;
            String = makeString(*v11);
            v187 = *(v12 - 2);
LABEL_468:
            DefElem = makeDefElem((uint64_t)"password", String, v187, v186);
            goto LABEL_1777;
          case 143:
            v1921 = v24;
            v1922 = *(_DWORD *)v11;
            v1923 = *v12;
            v2080 = v26;
            v550 = (_DWORD *)MemoryContextAllocZero(*v2108, 0xCuLL);
            *v550 = 348;
            v550[1] = v1922;
            v24 = v1921;
            v550[2] = v1923;
            v552 = *(v12 - 2);
LABEL_1739:
            DefElem = makeDefElem((uint64_t)"password", (uint64_t)v550, v552, v551);
            v26 = v2080;
            goto LABEL_1778;
          case 144:
            v204 = v24;
            v205 = *v12;
            v206 = v26;
            v207 = MemoryContextAllocZero(*v2108, 0xCuLL);
            *(_QWORD *)v207 = 348;
            *(_DWORD *)(v207 + 8) = v205;
            v24 = v204;
            v208 = *(v12 - 2);
LABEL_1695:
            DefElem = makeDefElem((uint64_t)"password", v207, v208, COERCE_DOUBLE(348));
            v26 = v206;
            goto LABEL_1778;
          case 145:
            base_yyparse_cold_1();
          case 146:
            v32 = v26;
            Integer = makeInteger(1);
            DefElem = makeDefElem((uint64_t)"inherit", (uint64_t)Integer, *v12, v1872);
            goto LABEL_1777;
          case 147:
            v32 = v26;
            v1943 = makeInteger(*(_DWORD *)v11);
            DefElem = makeDefElem((uint64_t)"connectionlimit", (uint64_t)v1943, *(v12 - 2), v1944);
            goto LABEL_1777;
          case 148:
            v32 = v26;
            v963 = makeString(*v11);
            DefElem = makeDefElem((uint64_t)"validUntil", v963, *(v12 - 2), v964);
            goto LABEL_1777;
          case 149:
          case 154:
            v44 = *v11;
            v45 = *(v12 - 1);
            v43 = "rolemembers";
            goto LABEL_1598;
          case 150:
            v1083 = v26;
            v1966 = (const char *)*v11;
            if (!strcmp((const char *)*v11, "superuser"))
            {
              v1967 = 1;
LABEL_1843:
              v1973 = makeInteger(v1967);
              v1975 = *v12;
              v1976 = "superuser";
              goto LABEL_1861;
            }
            v1967 = strcmp(v1966, "nosuperuser");
            if (!v1967)
              goto LABEL_1843;
            if (!strcmp(v1966, "createrole"))
            {
              v1968 = 1;
LABEL_1852:
              v1973 = makeInteger(v1968);
              v1975 = *v12;
              v1976 = "createrole";
              goto LABEL_1861;
            }
            v1968 = strcmp(v1966, "nocreaterole");
            if (!v1968)
              goto LABEL_1852;
            if (!strcmp(v1966, "replication"))
            {
              v1969 = 1;
LABEL_1854:
              v1973 = makeInteger(v1969);
              v1975 = *v12;
              v1976 = "isreplication";
              goto LABEL_1861;
            }
            v1969 = strcmp(v1966, "noreplication");
            if (!v1969)
              goto LABEL_1854;
            if (!strcmp(v1966, "createdb"))
            {
              v1970 = 1;
LABEL_1856:
              v1973 = makeInteger(v1970);
              v1975 = *v12;
              v1976 = "createdb";
              goto LABEL_1861;
            }
            v1970 = strcmp(v1966, "nocreatedb");
            if (!v1970)
              goto LABEL_1856;
            if (!strcmp(v1966, "login"))
            {
              v1971 = 1;
LABEL_1858:
              v1973 = makeInteger(v1971);
              v1975 = *v12;
              v1976 = "canlogin";
              goto LABEL_1861;
            }
            v1971 = strcmp(v1966, "nologin");
            if (!v1971)
              goto LABEL_1858;
            if (!strcmp(v1966, "bypassrls"))
            {
              v1972 = 1;
LABEL_1860:
              v1973 = makeInteger(v1972);
              v1975 = *v12;
              v1976 = "bypassrls";
              goto LABEL_1861;
            }
            v1972 = strcmp(v1966, "nobypassrls");
            if (!v1972)
              goto LABEL_1860;
            if (strcmp(v1966, "noinherit"))
              base_yyparse_cold_2((size_t *)v11, (unsigned int *)v12);
            v1973 = makeInteger(0);
            v1975 = *v12;
            v1976 = "inherit";
LABEL_1861:
            NotExpr = makeDefElem((uint64_t)v1976, (uint64_t)v1973, v1975, v1974);
LABEL_1862:
            StringConstCast = NotExpr;
            v26 = v1083;
            break;
          case 151:
          case 161:
          case 180:
          case 200:
          case 217:
          case 232:
          case 242:
          case 245:
          case 246:
          case 247:
          case 248:
          case 254:
          case 255:
          case 256:
          case 257:
          case 265:
          case 356:
          case 363:
          case 370:
            StringConstCast = *v11;
            break;
          case 152:
            v32 = v26;
            v288 = makeInteger(*(_DWORD *)v11);
            DefElem = makeDefElem((uint64_t)"sysid", (uint64_t)v288, *(v12 - 1), v289);
            goto LABEL_1777;
          case 153:
            v44 = *v11;
            v45 = *(v12 - 1);
            v43 = "adminmembers";
            goto LABEL_1598;
          case 155:
          case 156:
            v44 = *v11;
            v45 = *(v12 - 2);
            v43 = "addroleto";
            goto LABEL_1598;
          case 157:
            v234 = v26;
            v66 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v234;
            StringConstCast = v66;
            v9 = 0x100000116;
            goto LABEL_1806;
          case 158:
          case 159:
            v65 = v26;
            v66 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v65;
            StringConstCast = v66;
            *(_DWORD *)v66 = 279;
            *(_QWORD *)(v66 + 8) = *(v11 - 2);
            *(_DWORD *)(v66 + 24) = 1;
            goto LABEL_1809;
          case 162:
          case 164:
            v69 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v69;
            StringConstCast = v70;
            *(_DWORD *)v70 = 288;
            *(_QWORD *)(v70 + 8) = *(v11 - 2);
            goto LABEL_234;
          case 163:
          case 165:
            v173 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v173;
            StringConstCast = v70;
            *(_DWORD *)v70 = 288;
            *(_QWORD *)(v70 + 8) = 0;
LABEL_234:
            *(_QWORD *)(v70 + 16) = *(v11 - 1);
            goto LABEL_1722;
          case 166:
          case 168:
          case 170:
            v51 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v51;
            StringConstCast = v52;
            *(_DWORD *)v52 = 280;
            *(_BYTE *)(v52 + 16) = 0;
            goto LABEL_1755;
          case 167:
          case 171:
            v95 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v95;
            StringConstCast = v52;
            *(_DWORD *)v52 = 280;
            *(_BYTE *)(v52 + 16) = 1;
            goto LABEL_1755;
          case 169:
            v1837 = v26;
            v1838 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1837;
            StringConstCast = v1838;
            *(_DWORD *)v1838 = 280;
            *(_QWORD *)(v1838 + 8) = *v11;
            *(_BYTE *)(v1838 + 16) = 1;
            break;
          case 172:
            v452 = v26;
            v66 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v452;
            StringConstCast = v66;
            v9 = 0x200000116;
            goto LABEL_1806;
          case 173:
            v577 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 279;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 3);
            *(_DWORD *)(StringConstCast + 24) = *((_DWORD *)v11 - 4);
            v579 = makeDefElem((uint64_t)"rolemembers", *v11, *v12, v578);
            *(double *)&v9 = list_make1_impl(226, v579);
            v26 = v577;
            *(_QWORD *)(StringConstCast + 16) = v580;
            break;
          case 174:
          case 358:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 1;
            break;
          case 175:
            StringConstCast |= 0xFFFFFFFFuLL;
            break;
          case 176:
            v479 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v479;
            StringConstCast = v352;
            *(_DWORD *)v352 = 285;
            *(_QWORD *)(v352 + 8) = *(v11 - 3);
            v480 = *(v11 - 1);
            goto LABEL_1623;
          case 177:
            v351 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v351;
            StringConstCast = v352;
            *(_DWORD *)v352 = 285;
            *(_QWORD *)(v352 + 8) = *(v11 - 1);
            *(_QWORD *)(v352 + 16) = 0;
            goto LABEL_1624;
          case 178:
            v1123 = v26;
            v1124 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            *(_DWORD *)v1124 = 285;
            *(_QWORD *)(v1124 + 8) = *(v11 - 3);
            *(_QWORD *)(v1124 + 16) = *(v11 - 1);
            if (*v11)
              base_yyparse_cold_3();
            goto LABEL_1427;
          case 179:
            v1123 = v26;
            v1124 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            *(_DWORD *)v1124 = 285;
            *(_QWORD *)(v1124 + 8) = *(v11 - 1);
            *(_QWORD *)(v1124 + 16) = 0;
            if (*v11)
              base_yyparse_cold_4();
LABEL_1427:
            StringConstCast = v1124;
            *(_QWORD *)(v1124 + 24) = 0;
            *(_BYTE *)(v1124 + 32) = 1;
            v26 = v1123;
            break;
          case 182:
            if (v26 < 0)
              v26 = *v12;
            goto LABEL_1774;
          case 190:
          case 192:
            StringConstCast = *v11;
            *(_BYTE *)(*v11 + 24) = 0;
            break;
          case 191:
            StringConstCast = *v11;
            *(_BYTE *)(*v11 + 24) = 1;
            break;
          case 193:
            v750 = v26;
            v175 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v750;
            StringConstCast = v175;
            v9 = 0x300000111;
            *(_QWORD *)v175 = 0x300000111;
            v751 = "TRANSACTION";
            goto LABEL_1691;
          case 194:
            v1490 = v26;
            v175 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1490;
            StringConstCast = v175;
            v9 = 0x300000111;
            *(_QWORD *)v175 = 0x300000111;
            v751 = "SESSION CHARACTERISTICS";
            goto LABEL_1691;
          case 196:
          case 197:
            v174 = v26;
            v175 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v174;
            StringConstCast = v175;
            v9 = 273;
            goto LABEL_1689;
          case 198:
          case 199:
            v67 = v26;
            v68 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v67;
            StringConstCast = v68;
            v9 = 0x100000111;
            goto LABEL_1454;
          case 201:
            v626 = v26;
            v68 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v626;
            StringConstCast = v68;
            v9 = 0x200000111;
            goto LABEL_1454;
          case 202:
            v1924 = v26;
            v1925 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = v1925;
            v9 = 273;
            *(_QWORD *)v1925 = 273;
            *(_QWORD *)(v1925 + 8) = "timezone";
            v2 = (const void **)*v11;
            if (*v11)
            {
              *(double *)&v9 = list_make1_impl(226, (uint64_t)v2);
              *(_QWORD *)(StringConstCast + 16) = v1926;
            }
            else
            {
              *(_DWORD *)(v1925 + 4) = 1;
            }
            v26 = v1924;
            break;
          case 203:
            base_yyparse_cold_5();
          case 204:
            v2013 = v15;
            v253 = v16;
            v254 = v2108;
            v2072 = v26;
            v255 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v255;
            *(_QWORD *)v255 = 273;
            v256 = "search_path";
            goto LABEL_1730;
          case 205:
            v2011 = v15;
            v178 = v16;
            v179 = v2108;
            v2072 = v26;
            v180 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v180;
            *(_QWORD *)v180 = 273;
            v181 = "search_path";
            goto LABEL_1767;
          case 206:
            v309 = v2108;
            v2072 = v26;
            v310 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v310;
            *(_QWORD *)v310 = 273;
            v311 = "search_path";
            goto LABEL_1680;
          case 207:
            v2101 = v26;
            v2028 = v15;
            v2063 = v24;
            v1669 = v16;
            v1670 = v2108;
            v1671 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = v1671;
            v9 = 273;
            *(_QWORD *)v1671 = 273;
            *(_QWORD *)(v1671 + 8) = "client_encoding";
            v1672 = *v11;
            if (*v11)
            {
              v1673 = *v12;
              v1674 = MemoryContextAllocZeroAligned(*v1670, 0x20uLL);
              *(_DWORD *)v1674 = 349;
              *(_DWORD *)(v1674 + 8) = 223;
              *(_QWORD *)(v1674 + 16) = v1672;
              *(_DWORD *)(v1674 + 24) = v1673;
              *(double *)&v9 = list_make1_impl(226, v1674);
              *(_QWORD *)(StringConstCast + 16) = v1675;
            }
            else
            {
              *(_DWORD *)(v1671 + 4) = 1;
            }
            v16 = v1669;
            v15 = v2028;
            v24 = v2063;
            v26 = v2101;
            break;
          case 208:
            v2013 = v15;
            v253 = v16;
            v254 = v2108;
            v2072 = v26;
            v255 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v255;
            *(_QWORD *)v255 = 273;
            v256 = "role";
            goto LABEL_1730;
          case 209:
            v2011 = v15;
            v178 = v16;
            v179 = v2108;
            v2072 = v26;
            v180 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v180;
            *(_QWORD *)v180 = 273;
            v181 = "role";
            goto LABEL_1767;
          case 210:
            v309 = v2108;
            v2072 = v26;
            v310 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v310;
            *(_QWORD *)v310 = 273;
            v311 = "role";
            goto LABEL_1680;
          case 211:
            v2013 = v15;
            v253 = v16;
            v254 = v2108;
            v2072 = v26;
            v255 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v255;
            *(_QWORD *)v255 = 273;
            v256 = "session_authorization";
            goto LABEL_1730;
          case 212:
            v2011 = v15;
            v178 = v16;
            v179 = v2108;
            v2072 = v26;
            v180 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v180;
            *(_QWORD *)v180 = 273;
            v181 = "session_authorization";
LABEL_1767:
            *((_QWORD *)v180 + 1) = v181;
            v2068 = v24;
            v1948 = *(_DWORD *)v11;
            v1949 = *v12;
            v1950 = *v179;
            v16 = v178;
            v15 = v2011;
            v1883 = MemoryContextAllocZero(v1950, 0xCuLL);
            *(_DWORD *)v1883 = 348;
            *(_DWORD *)(v1883 + 4) = v1948;
            v24 = v2068;
            *(_DWORD *)(v1883 + 8) = v1949;
            goto LABEL_1768;
          case 213:
            v309 = v2108;
            v2072 = v26;
            v310 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v310;
            *(_QWORD *)v310 = 273;
            v311 = "session_authorization";
LABEL_1680:
            *((_QWORD *)v310 + 1) = v311;
            v2067 = v24;
            v1882 = *v12;
            v1883 = MemoryContextAllocZero(*v309, 0xCuLL);
            *(_QWORD *)v1883 = 348;
            *(_DWORD *)(v1883 + 8) = v1882;
            v24 = v2067;
            goto LABEL_1768;
          case 214:
            v266 = v26;
            v221 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v266;
            StringConstCast = v221;
            v9 = 0x100000111;
            goto LABEL_1506;
          case 215:
            v2013 = v15;
            v253 = v16;
            v254 = v2108;
            v2072 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_QWORD *)StringConstCast = 273;
            *(_QWORD *)(StringConstCast + 8) = "xmloption";
            v2046 = v24;
            if (*(_DWORD *)v11)
              v965 = "CONTENT";
            else
              v965 = "DOCUMENT";
            goto LABEL_1731;
          case 216:
            v2013 = v15;
            v253 = v16;
            v254 = v2108;
            v2072 = v26;
            v255 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v255;
            *(_QWORD *)v255 = 0x300000111;
            v256 = "TRANSACTION SNAPSHOT";
LABEL_1730:
            *((_QWORD *)v255 + 1) = v256;
            v2046 = v24;
            v965 = (const char *)*v11;
LABEL_1731:
            v1916 = *v12;
            v1917 = *v254;
            v16 = v253;
            v15 = v2013;
            v1883 = MemoryContextAllocZeroAligned(v1917, 0x20uLL);
            *(_DWORD *)v1883 = 349;
            *(_DWORD *)(v1883 + 8) = 223;
            *(_QWORD *)(v1883 + 16) = v965;
            v24 = v2046;
            *(_DWORD *)(v1883 + 24) = v1916;
LABEL_1768:
            *(double *)&v9 = list_make1_impl(226, v1883);
            v26 = v2072;
            *(_QWORD *)(StringConstCast + 16) = v1951;
            break;
          case 218:
            v32 = v26;
            DefElem = (unint64_t)psprintf("%s.%s", (uint64_t)v2, v3, v4, v5, v6, v7, v8, *(v11 - 2));
            goto LABEL_1777;
          case 219:
          case 293:
          case 372:
          case 378:
          case 389:
          case 392:
          case 432:
          case 440:
          case 461:
          case 463:
          case 520:
          case 529:
          case 552:
          case 595:
          case 617:
          case 685:
          case 693:
          case 696:
          case 770:
          case 788:
          case 807:
          case 835:
          case 846:
          case 860:
          case 879:
          case 924:
          case 930:
          case 1040:
          case 1066:
          case 1104:
          case 1113:
          case 1133:
          case 1135:
          case 1143:
          case 1168:
          case 1171:
          case 1173:
          case 1199:
          case 1204:
          case 1209:
          case 1229:
          case 1233:
          case 1361:
          case 1716:
          case 1748:
          case 1765:
          case 1778:
          case 1819:
          case 1830:
          case 1843:
          case 1848:
          case 1853:
          case 1859:
          case 2118:
          case 2139:
          case 2200:
          case 2202:
          case 2207:
          case 2212:
          case 2249:
          case 2264:
          case 2272:
          case 2278:
            v32 = v26;
            *(double *)&v9 = list_make1_impl(226, *v11);
            goto LABEL_1777;
          case 220:
          case 294:
          case 373:
          case 390:
          case 393:
          case 433:
          case 441:
          case 462:
          case 464:
          case 521:
          case 530:
          case 553:
          case 618:
          case 694:
          case 697:
          case 789:
          case 808:
          case 836:
          case 847:
          case 861:
          case 880:
          case 925:
          case 931:
          case 1041:
          case 1067:
          case 1105:
          case 1114:
          case 1134:
          case 1136:
          case 1144:
          case 1169:
          case 1172:
          case 1205:
          case 1230:
          case 1362:
          case 1406:
          case 1465:
          case 1507:
          case 1542:
          case 1563:
          case 1580:
          case 1614:
          case 1650:
          case 1686:
          case 1717:
          case 1749:
          case 1779:
          case 1820:
          case 1831:
          case 1844:
          case 1849:
          case 1860:
          case 2119:
          case 2140:
          case 2201:
          case 2203:
          case 2208:
          case 2213:
          case 2273:
          case 2279:
          case 2321:
            v34 = *(v11 - 2);
            goto LABEL_1775;
          case 221:
          case 233:
          case 236:
            v2031 = v24;
            v46 = *v11;
            v47 = *v12;
            v48 = v26;
            v49 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v48;
            StringConstCast = v49;
            *(_DWORD *)v49 = 349;
            *(_DWORD *)(v49 + 8) = 223;
            *(_QWORD *)(v49 + 16) = v46;
            v24 = v2031;
            *(_DWORD *)(v49 + 24) = v47;
            break;
          case 222:
          case 239:
            v32 = v26;
            DefElem = (unint64_t)makeAConst((_DWORD *)*v11, *v12, *(double *)&v9);
            goto LABEL_1777;
          case 223:
          case 234:
            v2034 = v24;
            v131 = *(_DWORD *)v11;
            v132 = *v12;
            v133 = v26;
            v134 = (char *)MemoryContextAllocZero(*v2108, 0xCuLL);
            v26 = v133;
            StringConstCast = (uint64_t)v134;
            *(_DWORD *)v134 = 348;
            *((_DWORD *)v134 + 1) = v131;
            v24 = v2034;
            *((_DWORD *)v134 + 2) = v132;
            break;
          case 224:
          case 235:
            v136 = v24;
            v137 = *v12;
            v138 = v26;
            v139 = MemoryContextAllocZero(*v2108, 0xCuLL);
            v26 = v138;
            StringConstCast = v139;
            v9 = 348;
            *(_QWORD *)v139 = 348;
            *(_DWORD *)(v139 + 8) = v137;
            v24 = v136;
            break;
          case 225:
            StringConstCast = (uint64_t)"read uncommitted";
            break;
          case 226:
            StringConstCast = (uint64_t)"read committed";
            break;
          case 227:
            StringConstCast = (uint64_t)"repeatable read";
            break;
          case 228:
            StringConstCast = (uint64_t)"serializable";
            break;
          case 229:
            StringConstCast = (uint64_t)"true";
            break;
          case 230:
            StringConstCast = (uint64_t)"false";
            break;
          case 231:
            StringConstCast = (uint64_t)"on";
            break;
          case 237:
            v1804 = v26;
            v1805 = *(v11 - 2);
            v1806 = *v11;
            if (*v11 && (*(_DWORD *)(**(_QWORD **)(v1806 + 16) + 16) & 0xFFFFF3FF) != 0)
              base_yyparse_cold_6();
            *(_QWORD *)(v1805 + 24) = v1806;
            StringConstCast = makeStringConstCast(*(v11 - 1), *(v12 - 1), v1805, *(double *)&v9);
            v26 = v1804;
            break;
          case 238:
            v2012 = *(v11 - 4);
            v2035 = v24;
            v188 = v2108;
            v2073 = v26;
            v189 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *v189 = 349;
            v189[2] = 221;
            v189[4] = 0x7FFF;
            v189[6] = -1;
            v190 = *((_DWORD *)v11 - 4);
            v1995 = v16;
            v191 = v15;
            v192 = *(v12 - 2);
            v193 = *v188;
            v24 = v2035;
            v194 = (_DWORD *)MemoryContextAllocZeroAligned(v193, 0x20uLL);
            *v194 = 349;
            v194[2] = 221;
            v194[4] = v190;
            v194[6] = v192;
            v15 = v191;
            v16 = v1995;
            v195 = list_make2_impl(226, (uint64_t)v189, (uint64_t)v194);
            *(_QWORD *)(v2012 + 24) = v196;
            v197 = makeStringConstCast(*v11, *v12, v2012, v195);
            v26 = v2073;
            StringConstCast = v197;
            break;
          case 249:
            v369 = v26;
            v315 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v369;
            StringConstCast = (uint64_t)v315;
            v9 = 0x400000111;
            *(_QWORD *)v315 = 0x400000111;
            goto LABEL_345;
          case 250:
            v312 = v26;
            v313 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v312;
            StringConstCast = (uint64_t)v313;
            v9 = 0x400000111;
            *(_QWORD *)v313 = 0x400000111;
            goto LABEL_529;
          case 251:
            v1756 = v26;
            v221 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1756;
            StringConstCast = v221;
            v9 = 0x400000111;
LABEL_1506:
            *(double *)v221 = *(double *)&v9;
            goto LABEL_1507;
          case 252:
            v1742 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1742;
            StringConstCast = v52;
            v9 = 0x400000111;
            goto LABEL_1754;
          case 253:
            v290 = v26;
            v291 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v290;
            StringConstCast = (uint64_t)v291;
            v9 = 0x500000111;
            *(_QWORD *)v291 = 0x500000111;
            break;
          case 258:
            v1491 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v1491;
            StringConstCast = v52;
            v92 = 274;
            goto LABEL_1634;
          case 259:
            v314 = v26;
            v315 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v314;
            StringConstCast = (uint64_t)v315;
            *(_DWORD *)v315 = 274;
LABEL_345:
            *((_QWORD *)v315 + 1) = "timezone";
            break;
          case 260:
            v627 = v26;
            v313 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v627;
            StringConstCast = (uint64_t)v313;
            *(_DWORD *)v313 = 274;
LABEL_529:
            *((_QWORD *)v313 + 1) = "transaction_isolation";
            break;
          case 261:
            v220 = v26;
            v221 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v220;
            StringConstCast = v221;
            *(_DWORD *)v221 = 274;
LABEL_1507:
            *(_QWORD *)(v221 + 8) = "session_authorization";
            break;
          case 262:
            v453 = v26;
            v454 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v453;
            StringConstCast = v454;
            *(_DWORD *)v454 = 274;
            *(_QWORD *)(v454 + 8) = "all";
            break;
          case 263:
            v209 = v26;
            v210 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v209;
            StringConstCast = v210;
            *(_DWORD *)v210 = 282;
            *(_QWORD *)(v210 + 8) = *(v11 - 1);
            *(_BYTE *)(v210 + 16) = *(_BYTE *)v11;
            break;
          case 266:
            StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 1;
            break;
          case 267:
            StringConstCast &= 0xFFFFFFFFFFFFFF00;
            break;
          case 268:
            v1839 = v26;
            v1840 = (char *)MemoryContextAllocZero(*v2108, 4uLL);
            v26 = v1839;
            StringConstCast = (uint64_t)v1840;
            *(_DWORD *)v1840 = 284;
            break;
          case 269:
            v1728 = v26;
            v1729 = (char *)MemoryContextAllocZeroAligned(*v2108, 8uLL);
            v26 = v1728;
            StringConstCast = (uint64_t)v1729;
            v9 = 275;
            *(_QWORD *)v1729 = 275;
            break;
          case 270:
          case 271:
            v168 = v26;
            v169 = (char *)MemoryContextAllocZeroAligned(*v2108, 8uLL);
            v26 = v168;
            StringConstCast = (uint64_t)v169;
            v9 = 0x300000113;
            *(_QWORD *)v169 = 0x300000113;
            break;
          case 272:
            v1703 = v26;
            v1704 = (char *)MemoryContextAllocZeroAligned(*v2108, 8uLL);
            v26 = v1703;
            StringConstCast = (uint64_t)v1704;
            v9 = 0x100000113;
            *(_QWORD *)v1704 = 0x100000113;
            break;
          case 273:
            v1814 = v26;
            v1815 = (char *)MemoryContextAllocZeroAligned(*v2108, 8uLL);
            v26 = v1814;
            StringConstCast = (uint64_t)v1815;
            v9 = 0x200000113;
            *(_QWORD *)v1815 = 0x200000113;
            break;
          case 274:
            v510 = v26;
            v367 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v510;
            StringConstCast = v367;
            *(_DWORD *)v367 = 237;
            *(_QWORD *)(v367 + 8) = *(v11 - 1);
            *(_QWORD *)(v367 + 16) = *v11;
            v368 = 39;
            goto LABEL_1234;
          case 275:
            v882 = v26;
            v883 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v882;
            StringConstCast = v883;
            *(_DWORD *)v883 = 237;
            *(_QWORD *)(v883 + 8) = *(v11 - 1);
            *(_QWORD *)(v883 + 16) = *v11;
            v884 = 39;
            goto LABEL_1467;
          case 276:
            v257 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 237;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 1);
            *(double *)&v9 = list_make1_impl(226, *v11);
            v26 = v257;
            *(_QWORD *)(StringConstCast + 16) = v258;
            v259 = 39;
            goto LABEL_1103;
          case 277:
            v592 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 237;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 1);
            *(double *)&v9 = list_make1_impl(226, *v11);
            v26 = v592;
            *(_QWORD *)(StringConstCast + 16) = v593;
            *(_DWORD *)(StringConstCast + 24) = 39;
            *(_BYTE *)(StringConstCast + 28) = 1;
            break;
          case 278:
            v231 = v26;
            v183 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v231;
            StringConstCast = v183;
            *(_DWORD *)v183 = 321;
            *(_QWORD *)(v183 + 8) = *(v11 - 4);
            v184 = 39;
            goto LABEL_531;
          case 279:
            v692 = v26;
            v183 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v692;
            StringConstCast = v183;
            *(_DWORD *)v183 = 321;
            *(_QWORD *)(v183 + 8) = *(v11 - 7);
            v199 = 39;
            goto LABEL_1655;
          case 280:
            v366 = v26;
            v367 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v366;
            StringConstCast = v367;
            *(_DWORD *)v367 = 237;
            *(_QWORD *)(v367 + 8) = *(v11 - 1);
            *(_QWORD *)(v367 + 16) = *v11;
            v368 = 20;
            goto LABEL_1234;
          case 281:
            v1642 = v26;
            v883 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1642;
            StringConstCast = v883;
            *(_DWORD *)v883 = 237;
            *(_QWORD *)(v883 + 8) = *(v11 - 1);
            *(_QWORD *)(v883 + 16) = *v11;
            v884 = 20;
            goto LABEL_1467;
          case 282:
            v1360 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 237;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 1);
            *(double *)&v9 = list_make1_impl(226, *v11);
            v26 = v1360;
            *(_QWORD *)(StringConstCast + 16) = v1361;
            v259 = 20;
LABEL_1103:
            *(_DWORD *)(StringConstCast + 24) = v259;
            *(_BYTE *)(StringConstCast + 28) = 0;
            break;
          case 283:
            v182 = v26;
            v183 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v182;
            StringConstCast = v183;
            *(_DWORD *)v183 = 321;
            *(_QWORD *)(v183 + 8) = *(v11 - 4);
            v184 = 20;
            goto LABEL_531;
          case 284:
            v198 = v26;
            v183 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v198;
            StringConstCast = v183;
            *(_DWORD *)v183 = 321;
            *(_QWORD *)(v183 + 8) = *(v11 - 7);
            v199 = 20;
            goto LABEL_1655;
          case 285:
            v1492 = v26;
            v367 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1492;
            StringConstCast = v367;
            *(_DWORD *)v367 = 237;
            *(_QWORD *)(v367 + 8) = *(v11 - 1);
            *(_QWORD *)(v367 + 16) = *v11;
            v368 = 35;
            goto LABEL_1234;
          case 286:
            v1717 = v26;
            v883 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1717;
            StringConstCast = v883;
            *(_DWORD *)v883 = 237;
            *(_QWORD *)(v883 + 8) = *(v11 - 1);
            *(_QWORD *)(v883 + 16) = *v11;
            v884 = 35;
            goto LABEL_1467;
          case 287:
            v481 = v26;
            v367 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v481;
            StringConstCast = v367;
            *(_DWORD *)v367 = 237;
            *(_QWORD *)(v367 + 8) = *(v11 - 1);
            *(_QWORD *)(v367 + 16) = *v11;
            v368 = 49;
            goto LABEL_1234;
          case 288:
            v1125 = v26;
            v883 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1125;
            StringConstCast = v883;
            *(_DWORD *)v883 = 237;
            *(_QWORD *)(v883 + 8) = *(v11 - 1);
            *(_QWORD *)(v883 + 16) = *v11;
            v884 = 49;
            goto LABEL_1467;
          case 289:
            v370 = v26;
            v367 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v370;
            StringConstCast = v367;
            *(_DWORD *)v367 = 237;
            *(_QWORD *)(v367 + 8) = *(v11 - 1);
            *(_QWORD *)(v367 + 16) = *v11;
            v368 = 23;
LABEL_1234:
            *(_DWORD *)(v367 + 24) = v368;
            *(_BYTE *)(v367 + 28) = 0;
            break;
          case 290:
            v1312 = v26;
            v883 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1312;
            StringConstCast = v883;
            *(_DWORD *)v883 = 237;
            *(_QWORD *)(v883 + 8) = *(v11 - 1);
            *(_QWORD *)(v883 + 16) = *v11;
            v884 = 23;
LABEL_1467:
            *(_DWORD *)(v883 + 24) = v884;
            *(_BYTE *)(v883 + 28) = 1;
            break;
          case 291:
            v628 = v26;
            v183 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v628;
            StringConstCast = v183;
            *(_DWORD *)v183 = 321;
            *(_QWORD *)(v183 + 8) = *(v11 - 4);
            v184 = 23;
LABEL_531:
            *(_DWORD *)(v183 + 16) = v184;
            *(_QWORD *)(v183 + 24) = 0;
            goto LABEL_1656;
          case 292:
            v1864 = v26;
            v183 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1864;
            StringConstCast = v183;
            *(_DWORD *)v183 = 321;
            *(_QWORD *)(v183 + 8) = *(v11 - 7);
            v199 = 23;
LABEL_1655:
            *(_DWORD *)(v183 + 16) = v199;
            *(_QWORD *)(v183 + 24) = *(v11 - 4);
            goto LABEL_1656;
          case 295:
            v2065 = v24;
            v1794 = v2108;
            v1795 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            *(_DWORD *)StringConstCast = 238;
            v1796 = *v1794;
            v24 = v2065;
            v1797 = MemoryContextAllocZeroAligned(v1796, 0x18uLL);
            v26 = v1795;
            *(_DWORD *)v1797 = 396;
            *(_DWORD *)(StringConstCast + 4) = 62;
            *(_QWORD *)(v1797 + 8) = *(v11 - 1);
            *(_QWORD *)(v1797 + 16) = *v11;
            *(_QWORD *)(StringConstCast + 32) = v1797;
            break;
          case 296:
            v2037 = v24;
            v316 = v2108;
            v317 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            *(_DWORD *)StringConstCast = 238;
            v318 = *v316;
            v24 = v2037;
            v319 = MemoryContextAllocZeroAligned(v318, 0x18uLL);
            v26 = v317;
            *(_DWORD *)v319 = 396;
            v320 = 63;
            goto LABEL_355;
          case 297:
            v2039 = v24;
            v379 = v2108;
            v380 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            *(_DWORD *)StringConstCast = 238;
            v381 = *v379;
            v24 = v2039;
            v319 = MemoryContextAllocZeroAligned(v381, 0x18uLL);
            v26 = v380;
            *(_DWORD *)v319 = 396;
            v320 = 62;
LABEL_355:
            *(_DWORD *)(StringConstCast + 4) = v320;
            *(_QWORD *)(v319 + 8) = *v11;
            *(_QWORD *)(v319 + 16) = 0;
            *(_QWORD *)(StringConstCast + 32) = v319;
            break;
          case 298:
          case 300:
            v74 = v26;
            v75 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v74;
            StringConstCast = v75;
            v9 = 238;
            *(_QWORD *)v75 = 238;
            *(_QWORD *)(v75 + 32) = *v11;
            *(_BYTE *)(v75 + 44) = 0;
            break;
          case 299:
          case 301:
            v176 = v26;
            v177 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v176;
            StringConstCast = v177;
            v9 = 238;
            *(_QWORD *)v177 = 238;
            *(_QWORD *)(v177 + 32) = *v11;
            goto LABEL_1571;
          case 302:
            v1897 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1897;
            StringConstCast = v201;
            v9 = 0x3000000EELL;
            goto LABEL_1785;
          case 303:
            v326 = v26;
            v274 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v326;
            StringConstCast = v274;
            v9 = 0x5000000EELL;
            goto LABEL_318;
          case 304:
            v273 = v26;
            v274 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v273;
            StringConstCast = v274;
            v9 = 0x6000000EELL;
LABEL_318:
            *(double *)v274 = *(double *)&v9;
            *(_QWORD *)(v274 + 8) = *(v11 - 3);
            break;
          case 305:
            v1705 = v26;
            v68 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1705;
            StringConstCast = v68;
            v9 = 0x7000000EELL;
LABEL_1454:
            *(double *)v68 = *(double *)&v9;
            *(_QWORD *)(v68 + 8) = *(v11 - 2);
            break;
          case 306:
            v1816 = v26;
            v177 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1816;
            StringConstCast = v177;
            v9 = 0x7000000EELL;
            goto LABEL_1570;
          case 307:
            v581 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            *(_QWORD *)StringConstCast = 0x9000000EELL;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 3);
            v582 = (unint64_t)makeInteger(*(_DWORD *)v11);
            goto LABEL_834;
          case 308:
            v1362 = v26;
            v1363 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            *(_DWORD *)v1363 = 238;
            if ((*((_DWORD *)v11 - 6) - 0x8000) <= 0xFFFF8000)
              base_yyparse_cold_7();
            StringConstCast = v1363;
            *(_DWORD *)(v1363 + 4) = 9;
            *(_WORD *)(v1363 + 16) = *((_DWORD *)v11 - 6);
            *(_QWORD *)(v1363 + 32) = makeInteger(*(_DWORD *)v11);
            v26 = v1362;
            break;
          case 309:
            v455 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v455;
            StringConstCast = v201;
            v9 = 0xA000000EELL;
            goto LABEL_1369;
          case 310:
            v1630 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1630;
            StringConstCast = v201;
            v9 = 0xB000000EELL;
LABEL_1369:
            *(double *)v201 = *(double *)&v9;
            v493 = *(v11 - 2);
            goto LABEL_1786;
          case 311:
            v581 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            *(_QWORD *)StringConstCast = 0xC000000EELL;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 3);
            v582 = makeString(*v11);
LABEL_834:
            v26 = v581;
            *(_QWORD *)(StringConstCast + 32) = v582;
            break;
          case 312:
            v2069 = v24;
            v1952 = v2108;
            v1953 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            *(_DWORD *)StringConstCast = 238;
            v1954 = *v1952;
            v24 = v2069;
            v1955 = MemoryContextAllocZeroAligned(v1954, 0xB0uLL);
            v26 = v1953;
            v9 = 0x300000171;
            *(_QWORD *)v1955 = 0x300000171;
            *(_BYTE *)(v1955 + 48) = *((_DWORD *)v11 - 6);
            *(_QWORD *)(v1955 + 80) = *v11;
            *(_DWORD *)(v1955 + 20) = *(v12 - 4);
            *(_DWORD *)(StringConstCast + 4) = 64;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 6);
            *(_QWORD *)(StringConstCast + 32) = v1955;
            break;
          case 313:
            v1962 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1962;
            StringConstCast = v201;
            v9 = 0x41000000EELL;
            goto LABEL_1785;
          case 314:
            v1374 = v26;
            v1375 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1374;
            StringConstCast = v1375;
            v9 = 0x42000000EELL;
            *(_QWORD *)v1375 = 0x42000000EELL;
            *(_QWORD *)(v1375 + 8) = *(v11 - 2);
            *(_BYTE *)(v1375 + 44) = 0;
            break;
          case 315:
            v1776 = v26;
            v177 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1776;
            StringConstCast = v177;
            v9 = 0x42000000EELL;
LABEL_1570:
            *(double *)v177 = *(double *)&v9;
            *(_QWORD *)(v177 + 8) = *(v11 - 4);
            goto LABEL_1571;
          case 316:
            v752 = v26;
            v177 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v752;
            StringConstCast = v177;
            v9 = 0xD000000EELL;
            goto LABEL_878;
          case 317:
            v1798 = v26;
            v1799 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1798;
            StringConstCast = v1799;
            v9 = 0xD000000EELL;
            goto LABEL_1682;
          case 318:
            v2061 = v24;
            v1565 = v2108;
            v1566 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            *(_DWORD *)StringConstCast = 238;
            v1567 = *v1565;
            v24 = v2061;
            v1568 = MemoryContextAllocZeroAligned(v1567, 0x70uLL);
            v26 = v1566;
            *(_DWORD *)v1568 = 367;
            *(_DWORD *)(StringConstCast + 4) = 28;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 5);
            *(_QWORD *)(StringConstCast + 32) = v1568;
            *(_QWORD *)(v1568 + 16) = *(v11 - 2);
            *(_QWORD *)(v1568 + 72) = *(v11 - 1);
            *(_QWORD *)(v1568 + 32) = *v11;
            *(_DWORD *)(v1568 + 104) = *(v12 - 5);
            break;
          case 319:
            v200 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v200;
            StringConstCast = v201;
            v9 = 0x1D000000EELL;
LABEL_1785:
            *(double *)v201 = *(double *)&v9;
            v493 = *(v11 - 1);
            goto LABEL_1786;
          case 320:
            v203 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v203;
            StringConstCast = v201;
            v9 = 0x11000000EELL;
            *(_QWORD *)v201 = 0x11000000EELL;
            goto LABEL_1787;
          case 321:
            v1621 = v24;
            v1622 = v2108;
            v2099 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            *(_DWORD *)StringConstCast = 238;
            v1623 = *v1622;
            v24 = v1621;
            v1624 = MemoryContextAllocZeroAligned(v1623, 0xB0uLL);
            *(_DWORD *)v1624 = 369;
            *(_DWORD *)(StringConstCast + 4) = 21;
            *(_QWORD *)(StringConstCast + 32) = v1624;
            *(_DWORD *)(v1624 + 4) = 9;
            *(_QWORD *)(v1624 + 8) = *(v11 - 1);
            processCASbits(*(unsigned int *)v11, *v12, (size_t)"ALTER CONSTRAINT statement", (_BYTE *)(v1624 + 16), (_BYTE *)(v1624 + 17), 0, 0);
            v26 = v2099;
            break;
          case 322:
            v1865 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1865;
            StringConstCast = v52;
            v9 = 0x16000000EELL;
            goto LABEL_1754;
          case 323:
            v1126 = v26;
            v177 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1126;
            StringConstCast = v177;
            v9 = 0x19000000EELL;
LABEL_878:
            *(double *)v177 = *(double *)&v9;
            *(_QWORD *)(v177 + 8) = *(v11 - 1);
            *(_DWORD *)(v177 + 40) = *(_DWORD *)v11;
LABEL_1571:
            *(_BYTE *)(v177 + 44) = 1;
            break;
          case 324:
            v1884 = v26;
            v1799 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1884;
            StringConstCast = v1799;
            v9 = 0x19000000EELL;
LABEL_1682:
            *(double *)v1799 = *(double *)&v9;
            *(_QWORD *)(v1799 + 8) = *(v11 - 1);
            *(_DWORD *)(v1799 + 40) = *(_DWORD *)v11;
            *(_BYTE *)(v1799 + 44) = 0;
            break;
          case 325:
            v1766 = v26;
            v1767 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1766;
            StringConstCast = (uint64_t)v1767;
            v9 = 0x23000000EELL;
            *(_QWORD *)v1767 = 0x23000000EELL;
            break;
          case 326:
            v285 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v285;
            StringConstCast = v52;
            v9 = 0x1F000000EELL;
            goto LABEL_1754;
          case 327:
            v339 = v26;
            v340 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v339;
            StringConstCast = (uint64_t)v340;
            v9 = 0x20000000EELL;
            *(_QWORD *)v340 = 0x20000000EELL;
            *((_QWORD *)v340 + 1) = 0;
            break;
          case 328:
            v1905 = v26;
            v1906 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1905;
            StringConstCast = (uint64_t)v1906;
            v9 = 0x21000000EELL;
            *(_QWORD *)v1906 = 0x21000000EELL;
            break;
          case 329:
            v215 = v26;
            v216 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v215;
            StringConstCast = (uint64_t)v216;
            v9 = 0x22000000EELL;
            *(_QWORD *)v216 = 0x22000000EELL;
            break;
          case 330:
            v1902 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1902;
            StringConstCast = v52;
            v9 = 0x28000000EELL;
            goto LABEL_1754;
          case 331:
            v329 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v329;
            StringConstCast = v52;
            v9 = 0x29000000EELL;
            goto LABEL_1754;
          case 332:
            v284 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v284;
            StringConstCast = v52;
            v9 = 0x2A000000EELL;
            goto LABEL_1754;
          case 333:
            v1768 = v26;
            v1769 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1768;
            StringConstCast = (uint64_t)v1769;
            v9 = 0x2C000000EELL;
            *(_QWORD *)v1769 = 0x2C000000EELL;
            break;
          case 334:
            v1892 = v26;
            v1893 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1892;
            StringConstCast = (uint64_t)v1893;
            v9 = 0x2E000000EELL;
            *(_QWORD *)v1893 = 0x2E000000EELL;
            break;
          case 335:
            v1336 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1336;
            StringConstCast = v52;
            v9 = 0x2B000000EELL;
            goto LABEL_1754;
          case 336:
            v1907 = v26;
            v1908 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1907;
            StringConstCast = (uint64_t)v1908;
            v9 = 0x2D000000EELL;
            *(_QWORD *)v1908 = 0x2D000000EELL;
            break;
          case 337:
            v1807 = v26;
            v1808 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1807;
            StringConstCast = (uint64_t)v1808;
            v9 = 0x2F000000EELL;
            *(_QWORD *)v1808 = 0x2F000000EELL;
            break;
          case 338:
            v321 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v321;
            StringConstCast = v52;
            v9 = 0x30000000EELL;
            goto LABEL_1754;
          case 339:
            v406 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v406;
            StringConstCast = v52;
            v9 = 0x31000000EELL;
            goto LABEL_1754;
          case 340:
            v1938 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1938;
            StringConstCast = v52;
            v9 = 0x32000000EELL;
            goto LABEL_1754;
          case 341:
            v292 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v292;
            StringConstCast = v52;
            v9 = 0x33000000EELL;
            goto LABEL_1754;
          case 342:
            v202 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v202;
            StringConstCast = v201;
            v9 = 0x34000000EELL;
            *(_QWORD *)v201 = 0x34000000EELL;
            goto LABEL_1787;
          case 343:
            v850 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v850;
            StringConstCast = v201;
            v9 = 0x35000000EELL;
            *(_QWORD *)v201 = 0x35000000EELL;
            goto LABEL_1787;
          case 344:
            v966 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            *(_DWORD *)StringConstCast = 238;
            TypeNameFromNameList = makeTypeNameFromNameList(*v11, v967);
            v26 = v966;
            *(_DWORD *)(TypeNameFromNameList + 48) = *v12;
            *(_DWORD *)(StringConstCast + 4) = 54;
            *(_QWORD *)(StringConstCast + 32) = TypeNameFromNameList;
            break;
          case 345:
            v235 = v26;
            v236 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v235;
            StringConstCast = (uint64_t)v236;
            v9 = 0x37000000EELL;
            *(_QWORD *)v236 = 0x37000000EELL;
            break;
          case 346:
            v538 = v26;
            v539 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v538;
            StringConstCast = (uint64_t)v539;
            v9 = 0x1E000000EELL;
            *(_QWORD *)v539 = 0x1E000000EELL;
            *((_QWORD *)v539 + 3) = *v11;
            break;
          case 347:
            v275 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v275;
            StringConstCast = v52;
            v9 = 0x24000000EELL;
            goto LABEL_1754;
          case 348:
            v1493 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1493;
            StringConstCast = v201;
            v9 = 0x25000000EELL;
            *(_QWORD *)v201 = 0x25000000EELL;
            goto LABEL_1787;
          case 349:
            v1586 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1586;
            StringConstCast = v201;
            v9 = 0x26000000EELL;
            *(_QWORD *)v201 = 0x26000000EELL;
            goto LABEL_1787;
          case 350:
            v330 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v330;
            StringConstCast = v201;
            v9 = 0x38000000EELL;
            *(_QWORD *)v201 = 0x38000000EELL;
            goto LABEL_1787;
          case 351:
            v753 = v26;
            v754 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v753;
            StringConstCast = (uint64_t)v754;
            v9 = 0x39000000EELL;
            *(_QWORD *)v754 = 0x39000000EELL;
            break;
          case 352:
            v382 = v26;
            v383 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v382;
            StringConstCast = (uint64_t)v383;
            v9 = 0x3A000000EELL;
            *(_QWORD *)v383 = 0x3A000000EELL;
            break;
          case 353:
            v1718 = v26;
            v1719 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1718;
            StringConstCast = (uint64_t)v1719;
            v9 = 0x3B000000EELL;
            *(_QWORD *)v1719 = 0x3B000000EELL;
            break;
          case 354:
            v1761 = v26;
            v1762 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1761;
            StringConstCast = (uint64_t)v1762;
            v9 = 0x3C000000EELL;
            *(_QWORD *)v1762 = 0x3C000000EELL;
            break;
          case 355:
            v540 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v540;
            StringConstCast = v201;
            v9 = 0x3D000000EELL;
            *(_QWORD *)v201 = 0x3D000000EELL;
            goto LABEL_1787;
          case 359:
          case 360:
            StringConstCast &= 0xFFFFFFFF00000000;
            break;
          case 361:
          case 478:
            v78 = v26;
            v79 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v78;
            StringConstCast = v79;
            *(_DWORD *)v79 = 358;
            *(_QWORD *)(v79 + 8) = 0;
            *(_QWORD *)(v79 + 16) = *v11;
            *(_DWORD *)(v79 + 24) = *(v12 - 1);
            break;
          case 365:
            v1038 = v26;
            v218 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v1038;
            StringConstCast = v218;
            *(_DWORD *)v218 = 331;
            v219 = 110;
            goto LABEL_802;
          case 366:
            v867 = v26;
            v218 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v867;
            StringConstCast = v218;
            *(_DWORD *)v218 = 331;
            v219 = 102;
            goto LABEL_802;
          case 367:
            v217 = v26;
            v218 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v217;
            StringConstCast = v218;
            *(_DWORD *)v218 = 331;
            v219 = 100;
LABEL_802:
            *(_BYTE *)(v218 + 4) = v219;
            *(_QWORD *)(v218 + 8) = 0;
            break;
          case 368:
            v392 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v392;
            StringConstCast = v52;
            *(_DWORD *)v52 = 331;
            *(_BYTE *)(v52 + 4) = 105;
            goto LABEL_1755;
          case 369:
            StringConstCast = *(v11 - 1);
            break;
          case 374:
          case 837:
          case 848:
          case 1364:
            v43 = (const char *)*(v11 - 2);
            v44 = *v11;
            v45 = *(v12 - 2);
            goto LABEL_1598;
          case 375:
          case 838:
            v43 = (const char *)*v11;
            v45 = *v12;
            goto LABEL_1597;
          case 376:
            v222 = *(v11 - 4);
            v223 = *(v11 - 2);
            v224 = *v11;
            v225 = *(v12 - 4);
            goto LABEL_282;
          case 377:
            v222 = *(v11 - 2);
            v223 = *v11;
            v225 = *(v12 - 2);
            v224 = 0;
LABEL_282:
            v32 = v26;
            DefElem = makeDefElemExtended(v222, v223, v224, 0, v225, *(double *)&v9);
            goto LABEL_1777;
          case 379:
          case 411:
          case 473:
          case 596:
          case 642:
          case 649:
          case 686:
          case 771:
          case 1080:
          case 1174:
          case 1210:
          case 1234:
          case 1466:
          case 1485:
          case 1766:
          case 1854:
          case 2250:
          case 2265:
          case 2267:
LABEL_1774:
            v34 = *(v11 - 1);
            goto LABEL_1775;
          case 380:
          case 609:
            v45 = *v12;
            v43 = "restart";
            goto LABEL_1597;
          case 381:
          case 610:
            v44 = *v11;
            v45 = *(v12 - 2);
            v43 = "restart";
            goto LABEL_1598;
          case 382:
            StringConstCast = *v11;
            v1946 = *(const char **)(*v11 + 16);
            v2106 = v26;
            if (!strcmp(v1946, "as")
              || !strcmp(v1946, "restart")
              || (v1947 = strcmp(v1946, "owned_by"), v26 = v2106, !v1947))
            {
              base_yyparse_cold_8((uint64_t)v11, (unsigned int *)v12);
            }
            break;
          case 383:
            v32 = v26;
            v1287 = makeInteger(*(_DWORD *)v11);
            DefElem = makeDefElem((uint64_t)"generated", (uint64_t)v1287, *(v12 - 2), v1288);
            goto LABEL_1777;
          case 384:
            v2105 = v26;
            v2030 = v15;
            v2066 = v24;
            v2009 = v16;
            v1817 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            *(_DWORD *)v1817 = 394;
            *(_BYTE *)(v1817 + 4) = 104;
            *(_QWORD *)(v1817 + 8) = -1;
            v1818 = *(v11 - 1);
            if (!v1818 || *(int *)(v1818 + 4) < 1)
              goto LABEL_1878;
            StringConstCast = v1817;
            v1819 = 0;
            do
            {
              while (1)
              {
                v1820 = *(_QWORD *)(*(_QWORD *)(v1818 + 16) + 8 * v1819);
                v1821 = *(const char **)(v1820 + 16);
                if (!strcmp(v1821, "modulus"))
                  break;
                if (strcmp(v1821, "remainder"))
                  base_yyparse_cold_13();
                if (*(_DWORD *)(StringConstCast + 12) != -1)
                  base_yyparse_cold_12();
                *(_DWORD *)(StringConstCast + 12) = defGetInt32(v1820);
                if (++v1819 >= *(int *)(v1818 + 4))
                  goto LABEL_1582;
              }
              if (*(_DWORD *)(StringConstCast + 8) != -1)
                base_yyparse_cold_11();
              *(_DWORD *)(StringConstCast + 8) = defGetInt32(v1820);
              ++v1819;
            }
            while (v1819 < *(int *)(v1818 + 4));
LABEL_1582:
            if (*(_DWORD *)(StringConstCast + 8) == -1)
LABEL_1878:
              base_yyparse_cold_9();
            v16 = v2009;
            v24 = v2066;
            if (*(_DWORD *)(StringConstCast + 12) == -1)
              base_yyparse_cold_10();
            *(_DWORD *)(StringConstCast + 40) = *(v12 - 3);
            v15 = v2030;
            v26 = v2105;
            break;
          case 385:
            v1604 = v26;
            v1605 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1604;
            StringConstCast = v1605;
            *(_DWORD *)v1605 = 394;
            *(_WORD *)(v1605 + 4) = 108;
            *(_QWORD *)(v1605 + 16) = *(v11 - 1);
            *(_DWORD *)(v1605 + 40) = *(v12 - 3);
            break;
          case 386:
            v260 = v26;
            v261 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v260;
            StringConstCast = v261;
            *(_DWORD *)v261 = 394;
            *(_WORD *)(v261 + 4) = 114;
            *(_QWORD *)(v261 + 24) = *(v11 - 5);
            *(_QWORD *)(v261 + 32) = *(v11 - 1);
            *(_DWORD *)(v261 + 40) = *(v12 - 7);
            break;
          case 387:
            v443 = v26;
            v444 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v443;
            StringConstCast = v444;
            *(_DWORD *)v444 = 394;
            *(_BYTE *)(v444 + 5) = 1;
            *(_DWORD *)(v444 + 40) = *v12;
            break;
          case 388:
            v239 = v24;
            v240 = *(v11 - 1);
            v241 = v26;
            v242 = makeInteger(*(_DWORD *)v11);
            v243 = v240;
            v24 = v239;
            v245 = makeDefElem(v243, (uint64_t)v242, *(v12 - 1), v244);
            v26 = v241;
            StringConstCast = v245;
            break;
          case 391:
            v1494 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 237;
            RangeVarFromAnyName = makeRangeVarFromAnyName(*(v11 - 1), *(v12 - 1), v1495);
            v26 = v1494;
            *(_QWORD *)(StringConstCast + 8) = RangeVarFromAnyName;
            *(_QWORD *)(StringConstCast + 16) = *v11;
            *(_DWORD *)(StringConstCast + 24) = 47;
            break;
          case 394:
            v1757 = v26;
            v1758 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1757;
            StringConstCast = v1758;
            v9 = 238;
            *(_QWORD *)v1758 = 238;
            *(_QWORD *)(v1758 + 32) = *(v11 - 1);
            *(_DWORD *)(v1758 + 40) = *(_DWORD *)v11;
            break;
          case 395:
            v969 = v26;
            v970 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v969;
            StringConstCast = v970;
            v9 = 0xD000000EELL;
            *(_QWORD *)v970 = 0xD000000EELL;
            *(_QWORD *)(v970 + 8) = *(v11 - 1);
            *(_DWORD *)(v970 + 40) = *(_DWORD *)v11;
            *(_BYTE *)(v970 + 44) = 1;
            break;
          case 396:
            v1933 = v26;
            v1934 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1933;
            StringConstCast = v1934;
            v9 = 0xD000000EELL;
            *(_QWORD *)v1934 = 0xD000000EELL;
            *(_QWORD *)(v1934 + 8) = *(v11 - 1);
            *(_DWORD *)(v1934 + 40) = *(_DWORD *)v11;
            *(_BYTE *)(v1934 + 44) = 0;
            break;
          case 397:
            v2036 = v24;
            v211 = v2108;
            v212 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            *(_DWORD *)StringConstCast = 238;
            v213 = *v211;
            v24 = v2036;
            v214 = MemoryContextAllocZeroAligned(v213, 0x70uLL);
            v26 = v212;
            *(_DWORD *)v214 = 367;
            *(_DWORD *)(StringConstCast + 4) = 28;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 5);
            *(_QWORD *)(StringConstCast + 32) = v214;
            *(_DWORD *)(StringConstCast + 40) = *(_DWORD *)v11;
            *(_QWORD *)(v214 + 16) = *(v11 - 2);
            *(_QWORD *)(v214 + 72) = *(v11 - 1);
            *(_QWORD *)(v214 + 32) = 0;
            *(_DWORD *)(v214 + 104) = *(v12 - 5);
            break;
          case 398:
            v1855 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v1855;
            StringConstCast = v52;
            v92 = 244;
            goto LABEL_1634;
          case 399:
            v327 = v26;
            v328 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v327;
            StringConstCast = v328;
            *(_DWORD *)v328 = 244;
            *(_QWORD *)(v328 + 8) = 0;
            break;
          case 400:
            v419 = v26;
            v420 = MemoryContextAllocZeroAligned(*v2108, 0x40uLL);
            StringConstCast = v420;
            *(_DWORD *)v420 = 246;
            *(_QWORD *)(v420 + 8) = *(v11 - 8);
            *(_QWORD *)(v420 + 16) = 0;
            *(_QWORD *)(v420 + 24) = *(v11 - 7);
            v421 = *((unsigned __int8 *)v11 - 48);
            *(_BYTE *)(v420 + 32) = v421;
            v422 = *((unsigned __int8 *)v11 - 40);
            *(_BYTE *)(v420 + 33) = v422;
            v423 = *(v11 - 4);
            *(_QWORD *)(v420 + 40) = v423;
            v424 = *v11;
            *(_QWORD *)(v420 + 56) = *v11;
            if (v422 && !v423)
              base_yyparse_cold_14();
            if (!v421 && v424)
              base_yyparse_cold_15();
            *(_QWORD *)(v420 + 48) = 0;
            v425 = *(v11 - 9);
            if (v425)
            {
              v426 = lappend(0, v425);
              *(_QWORD *)(StringConstCast + 48) = v426;
            }
            else
            {
              v426 = 0;
            }
            v1985 = *(v11 - 3);
            if (v1985)
            {
              v426 = lappend(v426, v1985);
              *(_QWORD *)(StringConstCast + 48) = v426;
            }
            v2 = (const void **)*(v11 - 1);
            if (!v2)
              goto LABEL_1849;
            *(_QWORD *)(StringConstCast + 48) = list_concat(v426, v2);
            v26 = v419;
            break;
          case 401:
            v1963 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x40uLL);
            *(_DWORD *)StringConstCast = 246;
            *(_QWORD *)(StringConstCast + 8) = 0;
            *(_QWORD *)(StringConstCast + 16) = *(v11 - 6);
            *(_QWORD *)(StringConstCast + 24) = 0;
            *(_BYTE *)(StringConstCast + 32) = 0;
            v1964 = *((unsigned __int8 *)v11 - 24);
            *(_BYTE *)(StringConstCast + 33) = v1964;
            v1965 = *(v11 - 2);
            *(_QWORD *)(StringConstCast + 40) = v1965;
            *(_QWORD *)(StringConstCast + 48) = *v11;
            v26 = v1963;
            if (v1964 && !v1965)
              base_yyparse_cold_16();
            break;
          case 402:
          case 404:
          case 516:
          case 578:
          case 580:
          case 621:
            StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 1;
            break;
          case 403:
          case 405:
          case 517:
          case 579:
          case 622:
            StringConstCast &= 0xFFFFFFFFFFFFFF00;
            break;
          case 406:
          case 409:
          case 436:
          case 457:
          case 465:
          case 466:
          case 467:
          case 468:
          case 469:
          case 476:
          case 477:
          case 508:
          case 549:
          case 557:
          case 559:
          case 566:
          case 568:
          case 570:
          case 591:
          case 625:
          case 627:
          case 629:
          case 636:
          case 687:
          case 698:
          case 703:
          case 707:
          case 709:
          case 711:
          case 2328:
          case 2332:
            StringConstCast = *v11;
            break;
          case 407:
          case 408:
          case 412:
          case 427:
          case 429:
          case 439:
          case 458:
          case 460:
          case 474:
          case 519:
          case 524:
          case 534:
          case 548:
          case 550:
          case 558:
          case 560:
          case 561:
          case 567:
          case 569:
          case 592:
          case 594:
          case 626:
          case 628:
          case 630:
          case 637:
          case 643:
          case 650:
          case 688:
          case 692:
          case 708:
          case 710:
          case 712:
            StringConstCast = 0;
            break;
          case 410:
          case 438:
          case 459:
          case 518:
          case 523:
          case 533:
          case 547:
          case 593:
          case 691:
          case 695:
            StringConstCast = *(v11 - 1);
            break;
          case 413:
          case 426:
            v170 = "binary";
            goto LABEL_1614;
          case 414:
            v32 = v26;
            v597 = makeInteger(1);
            DefElem = makeDefElem((uint64_t)"freeze", (uint64_t)v597, *v12, v598);
            goto LABEL_1777;
          case 415:
            v32 = v26;
            v297 = makeString(*v11);
            v299 = *(v12 - 2);
            goto LABEL_741;
          case 416:
            v32 = v26;
            v445 = makeString(*v11);
            DefElem = makeDefElem((uint64_t)"null", v445, *(v12 - 2), v446);
            goto LABEL_1777;
          case 417:
            v170 = "csv";
LABEL_1614:
            v32 = v26;
            v1841 = makeString((uint64_t)v170);
            DefElem = makeDefElem((uint64_t)"format", v1841, *v12, v1842);
            goto LABEL_1777;
          case 418:
            v32 = v26;
            v1931 = makeInteger(1);
            DefElem = makeDefElem((uint64_t)"header", (uint64_t)v1931, *v12, v1932);
            goto LABEL_1777;
          case 419:
            v32 = v26;
            v1843 = makeString(*v11);
            DefElem = makeDefElem((uint64_t)"quote", v1843, *(v12 - 2), v1844);
            goto LABEL_1777;
          case 420:
            v32 = v26;
            v456 = makeString(*v11);
            DefElem = makeDefElem((uint64_t)"escape", v456, *(v12 - 2), v457);
            goto LABEL_1777;
          case 421:
            v44 = *v11;
            v45 = *(v12 - 2);
            v43 = "force_quote";
            goto LABEL_1598;
          case 422:
            v32 = v26;
            v655 = (_DWORD *)MemoryContextAllocZero(*v2108, 4uLL);
            *v655 = 351;
            DefElem = makeDefElem((uint64_t)"force_quote", (uint64_t)v655, *(v12 - 2), v656);
            goto LABEL_1777;
          case 423:
            v44 = *v11;
            v45 = *(v12 - 3);
            v43 = "force_not_null";
            goto LABEL_1598;
          case 424:
            v44 = *v11;
            v45 = *(v12 - 2);
            v43 = "force_null";
            goto LABEL_1598;
          case 425:
            v32 = v26;
            v322 = makeString(*v11);
            DefElem = makeDefElem((uint64_t)"encoding", v322, *(v12 - 1), v323);
            goto LABEL_1777;
          case 428:
            v32 = v26;
            v297 = makeString(*v11);
            v299 = *(v12 - 1);
LABEL_741:
            DefElem = makeDefElem((uint64_t)"delimiter", v297, v299, v298);
            goto LABEL_1777;
          case 434:
          case 702:
          case 1855:
            v43 = (const char *)*(v11 - 1);
            v44 = *v11;
            v45 = *(v12 - 1);
            goto LABEL_1598;
          case 435:
          case 442:
          case 522:
          case 704:
          case 792:
          case 793:
          case 794:
          case 843:
          case 1369:
          case 1407:
          case 1548:
          case 1584:
          case 2258:
            v32 = v26;
            DefElem = makeString(*v11);
            goto LABEL_1777;
          case 437:
          case 2259:
            v1160 = v26;
            v1161 = (char *)MemoryContextAllocZero(*v2108, 4uLL);
            v26 = v1160;
            StringConstCast = (uint64_t)v1161;
            *(_DWORD *)v1161 = 351;
            break;
          case 443:
            v787 = v26;
            v788 = MemoryContextAllocZeroAligned(*v2108, 0x68uLL);
            v26 = v787;
            StringConstCast = v788;
            *(_DWORD *)v788 = 247;
            *(_BYTE *)(*(v11 - 9) + 33) = *((_DWORD *)v11 - 22);
            *(_QWORD *)(v788 + 8) = *(v11 - 9);
            *(_QWORD *)(v788 + 16) = *(v11 - 7);
            *(_QWORD *)(v788 + 24) = *(v11 - 5);
            *(_QWORD *)(v788 + 40) = *(v11 - 4);
            *(_QWORD *)(v788 + 48) = 0;
            *(_QWORD *)(v788 + 56) = 0;
            *(_QWORD *)(v788 + 88) = *(v11 - 3);
            *(_QWORD *)(v788 + 64) = *(v11 - 2);
            *(_DWORD *)(v788 + 72) = *((_DWORD *)v11 - 2);
            *(_QWORD *)(v788 + 80) = *v11;
            *(_BYTE *)(v788 + 96) = 0;
            break;
          case 444:
            v1809 = v26;
            v1810 = MemoryContextAllocZeroAligned(*v2108, 0x68uLL);
            v26 = v1809;
            StringConstCast = v1810;
            *(_DWORD *)v1810 = 247;
            *(_BYTE *)(*(v11 - 9) + 33) = *((_DWORD *)v11 - 28);
            *(_QWORD *)(v1810 + 8) = *(v11 - 9);
            *(_QWORD *)(v1810 + 16) = *(v11 - 7);
            *(_QWORD *)(v1810 + 24) = *(v11 - 5);
            *(_QWORD *)(v1810 + 40) = *(v11 - 4);
            *(_QWORD *)(v1810 + 48) = 0;
            *(_QWORD *)(v1810 + 56) = 0;
            *(_QWORD *)(v1810 + 88) = *(v11 - 3);
            *(_QWORD *)(v1810 + 64) = *(v11 - 2);
            *(_DWORD *)(v1810 + 72) = *((_DWORD *)v11 - 2);
            *(_QWORD *)(v1810 + 80) = *v11;
            *(_BYTE *)(v1810 + 96) = 1;
            break;
          case 445:
            v1826 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x68uLL);
            *(_DWORD *)StringConstCast = 247;
            *(_BYTE *)(*(v11 - 8) + 33) = *((_DWORD *)v11 - 20);
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 8);
            *(_QWORD *)(StringConstCast + 16) = *(v11 - 5);
            *(_QWORD *)(StringConstCast + 24) = 0;
            *(_QWORD *)(StringConstCast + 40) = *(v11 - 4);
            v1828 = makeTypeNameFromNameList(*(v11 - 6), v1827);
            v26 = v1826;
            *(_QWORD *)(StringConstCast + 48) = v1828;
            *(_DWORD *)(v1828 + 48) = *(v12 - 6);
            goto LABEL_1733;
          case 446:
            v868 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x68uLL);
            *(_DWORD *)StringConstCast = 247;
            *(_BYTE *)(*(v11 - 8) + 33) = *((_DWORD *)v11 - 26);
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 8);
            *(_QWORD *)(StringConstCast + 16) = *(v11 - 5);
            *(_QWORD *)(StringConstCast + 24) = 0;
            *(_QWORD *)(StringConstCast + 40) = *(v11 - 4);
            v870 = makeTypeNameFromNameList(*(v11 - 6), v869);
            v26 = v868;
            *(_QWORD *)(StringConstCast + 48) = v870;
            *(_DWORD *)(v870 + 48) = *(v12 - 6);
            goto LABEL_1783;
          case 447:
            v1918 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x68uLL);
            *(_DWORD *)StringConstCast = 247;
            *(_BYTE *)(*(v11 - 10) + 33) = *((_DWORD *)v11 - 24);
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 10);
            *(_QWORD *)(StringConstCast + 16) = *(v11 - 6);
            *(double *)&v9 = list_make1_impl(226, *(v11 - 7));
            v26 = v1918;
            *(_QWORD *)(StringConstCast + 24) = v1919;
            *(_QWORD *)(StringConstCast + 32) = *(v11 - 5);
            *(_QWORD *)(StringConstCast + 40) = *(v11 - 4);
            *(_QWORD *)(StringConstCast + 48) = 0;
LABEL_1733:
            *(_QWORD *)(StringConstCast + 56) = 0;
            *(_QWORD *)(StringConstCast + 88) = *(v11 - 3);
            *(_QWORD *)(StringConstCast + 64) = *(v11 - 2);
            *(_DWORD *)(StringConstCast + 72) = *((_DWORD *)v11 - 2);
            *(_QWORD *)(StringConstCast + 80) = *v11;
            *(_BYTE *)(StringConstCast + 96) = 0;
            break;
          case 448:
            v1960 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x68uLL);
            *(_DWORD *)StringConstCast = 247;
            *(_BYTE *)(*(v11 - 10) + 33) = *((_DWORD *)v11 - 30);
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 10);
            *(_QWORD *)(StringConstCast + 16) = *(v11 - 6);
            *(double *)&v9 = list_make1_impl(226, *(v11 - 7));
            v26 = v1960;
            *(_QWORD *)(StringConstCast + 24) = v1961;
            *(_QWORD *)(StringConstCast + 32) = *(v11 - 5);
            *(_QWORD *)(StringConstCast + 40) = *(v11 - 4);
            *(_QWORD *)(StringConstCast + 48) = 0;
LABEL_1783:
            *(_QWORD *)(StringConstCast + 56) = 0;
            *(_QWORD *)(StringConstCast + 88) = *(v11 - 3);
            *(_QWORD *)(StringConstCast + 64) = *(v11 - 2);
            *(_DWORD *)(StringConstCast + 72) = *((_DWORD *)v11 - 2);
            *(_QWORD *)(StringConstCast + 80) = *v11;
            *(_BYTE *)(StringConstCast + 96) = 1;
            break;
          case 449:
          case 450:
          case 451:
          case 452:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x74;
            break;
          case 453:
            v400 = v26;
            if (!errstart(19, 0))
              goto LABEL_1387;
            errmsg("GLOBAL is deprecated in temporary table creation", (uint64_t)v2, v3, v4, v5, v6, v7, v8, v1990);
            scanner_errposition(*(v12 - 1), v2107);
            v401 = 3401;
            goto LABEL_1386;
          case 454:
            v400 = v26;
            if (!errstart(19, 0))
              goto LABEL_1387;
            errmsg("GLOBAL is deprecated in temporary table creation", (uint64_t)v2, v3, v4, v5, v6, v7, v8, v1990);
            scanner_errposition(*(v12 - 1), v2107);
            v401 = 3408;
LABEL_1386:
            errfinish("gram.y", v401, (uint64_t)"base_yyparse");
LABEL_1387:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x74;
            v26 = v400;
            break;
          case 455:
          case 584:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x75;
            break;
          case 456:
          case 585:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x70;
            break;
          case 470:
            v629 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x70uLL);
            *(_DWORD *)StringConstCast = 367;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 3);
            *(_QWORD *)(StringConstCast + 16) = *(v11 - 2);
            *(_DWORD *)(StringConstCast + 24) = 0;
            *(_BYTE *)(StringConstCast + 28) = 1;
            *(_DWORD *)(StringConstCast + 80) = 0;
            *(_DWORD *)(StringConstCast + 44) = 0;
            *(_QWORD *)(StringConstCast + 29) = 0;
            *(_QWORD *)(StringConstCast + 37) = 0;
            *(_QWORD *)(StringConstCast + 96) = *(v11 - 1);
            goto LABEL_1405;
          case 471:
            v286 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x70uLL);
            *(_DWORD *)StringConstCast = 367;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 1);
            *(_QWORD *)(StringConstCast + 16) = 0;
            *(_DWORD *)(StringConstCast + 24) = 0;
            *(_BYTE *)(StringConstCast + 28) = 1;
            *(_DWORD *)(StringConstCast + 80) = 0;
            *(_DWORD *)(StringConstCast + 44) = 0;
            *(_QWORD *)(StringConstCast + 29) = 0;
            *(_QWORD *)(StringConstCast + 37) = 0;
            SplitColQualList(*v11, (uint64_t *)(StringConstCast + 88), (int **)(StringConstCast + 72));
            v26 = v286;
            *(_DWORD *)(StringConstCast + 104) = *(v12 - 1);
            break;
          case 472:
            v629 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x70uLL);
            *(_DWORD *)StringConstCast = 367;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 3);
            *(_QWORD *)(StringConstCast + 16) = 0;
            *(_DWORD *)(StringConstCast + 24) = 0;
            *(_BYTE *)(StringConstCast + 28) = 1;
            *(_DWORD *)(StringConstCast + 80) = 0;
            *(_DWORD *)(StringConstCast + 44) = 0;
            *(_QWORD *)(StringConstCast + 29) = 0;
            *(_QWORD *)(StringConstCast + 37) = 0;
LABEL_1405:
            SplitColQualList(*v11, (uint64_t *)(StringConstCast + 88), (int **)(StringConstCast + 72));
            v26 = v629;
            *(_DWORD *)(StringConstCast + 104) = *(v12 - 3);
            break;
          case 475:
          case 507:
            StringConstCast = *v11;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 1);
            *(_DWORD *)(StringConstCast + 20) = *(v12 - 2);
            break;
          case 479:
            v293 = v26;
            v294 = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            v26 = v293;
            StringConstCast = v294;
            v9 = 0x100000171;
            *(_QWORD *)v294 = 0x100000171;
            *(_DWORD *)(v294 + 20) = *(v12 - 1);
            break;
          case 480:
            v226 = v26;
            v227 = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            v26 = v226;
            StringConstCast = v227;
            v9 = 369;
            *(_QWORD *)v227 = 369;
            *(_DWORD *)(v227 + 20) = *v12;
            break;
          case 481:
            v1759 = v26;
            v247 = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            v26 = v1759;
            StringConstCast = v247;
            v9 = 0x700000171;
            *(_QWORD *)v247 = 0x700000171;
            v248 = *(v12 - 2);
            goto LABEL_1510;
          case 482:
            v246 = v26;
            v247 = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            v26 = v246;
            StringConstCast = v247;
            v9 = 0x600000171;
            *(_QWORD *)v247 = 0x600000171;
            v248 = *(v12 - 3);
LABEL_1510:
            *(_DWORD *)(v247 + 20) = v248;
            *(_QWORD *)(v247 + 56) = 0;
            *(_QWORD *)(v247 + 80) = *(v11 - 1);
            *(_QWORD *)(v247 + 88) = 0;
            *(_QWORD *)(v247 + 96) = *v11;
            break;
          case 483:
            v384 = v26;
            v332 = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            v26 = v384;
            StringConstCast = v332;
            v9 = 0x500000171;
            *(_QWORD *)v332 = 0x500000171;
            *(_DWORD *)(v332 + 20) = *(v12 - 4);
            *(_BYTE *)(v332 + 24) = *(_BYTE *)v11;
            *(_QWORD *)(v332 + 32) = *(v11 - 2);
            *(_QWORD *)(v332 + 40) = 0;
            goto LABEL_358;
          case 484:
            v251 = v26;
            v252 = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            v26 = v251;
            StringConstCast = v252;
            v9 = 0x200000171;
            *(_QWORD *)v252 = 0x200000171;
            *(_DWORD *)(v252 + 20) = *(v12 - 1);
            *(_QWORD *)(v252 + 32) = *v11;
            *(_QWORD *)(v252 + 40) = 0;
            break;
          case 485:
            v1763 = v26;
            v1764 = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            v26 = v1763;
            StringConstCast = v1764;
            v9 = 0x300000171;
            *(_QWORD *)v1764 = 0x300000171;
            *(_BYTE *)(v1764 + 48) = *((_DWORD *)v11 - 6);
            *(_QWORD *)(v1764 + 80) = *v11;
            *(_DWORD *)(v1764 + 20) = *(v12 - 4);
            break;
          case 486:
            v237 = v26;
            v238 = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            v26 = v237;
            StringConstCast = v238;
            v9 = 0x400000171;
            *(_QWORD *)v238 = 0x400000171;
            *(_BYTE *)(v238 + 48) = *((_DWORD *)v11 - 10);
            *(_QWORD *)(v238 + 32) = *(v11 - 2);
            *(_QWORD *)(v238 + 40) = 0;
            *(_DWORD *)(v238 + 20) = *(v12 - 6);
            if (*((_DWORD *)v11 - 10) != 97)
              base_yyparse_cold_17();
            break;
          case 487:
            v331 = v26;
            v332 = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            v26 = v331;
            StringConstCast = v332;
            v9 = 0x900000171;
            *(_QWORD *)v332 = 0x900000171;
            *(_DWORD *)(v332 + 20) = *(v12 - 4);
            *(_QWORD *)(v332 + 128) = *(v11 - 3);
            *(_QWORD *)(v332 + 136) = 0;
            *(_QWORD *)(v332 + 144) = *(v11 - 2);
            *(_BYTE *)(v332 + 152) = *((_DWORD *)v11 - 2);
            *(_BYTE *)(v332 + 153) = BYTE1(*(_DWORD *)v11);
            *(_BYTE *)(v332 + 154) = *(_DWORD *)v11;
LABEL_358:
            *(_WORD *)(v332 + 172) = 256;
            break;
          case 488:
          case 542:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x61;
            break;
          case 489:
          case 546:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x64;
            break;
          case 490:
            v1939 = v26;
            v1940 = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            v26 = v1939;
            StringConstCast = v1940;
            v9 = 0xA00000171;
            *(_QWORD *)v1940 = 0xA00000171;
            *(_DWORD *)(v1940 + 20) = *v12;
            break;
          case 491:
            v1497 = v26;
            v233 = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            v26 = v1497;
            StringConstCast = v233;
            v9 = 0xB00000171;
            goto LABEL_1750;
          case 492:
            v1935 = v26;
            v233 = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            v26 = v1935;
            StringConstCast = v233;
            v9 = 0xC00000171;
            goto LABEL_1750;
          case 493:
            v232 = v26;
            v233 = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            v26 = v232;
            StringConstCast = v233;
            v9 = 0xD00000171;
LABEL_1750:
            *(double *)v233 = *(double *)&v9;
            *(_DWORD *)(v233 + 20) = *(v12 - 1);
            break;
          case 494:
            v1936 = v26;
            v1937 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1936;
            StringConstCast = v1937;
            *(_DWORD *)v1937 = 381;
            *(_QWORD *)(v1937 + 8) = *(v11 - 1);
            *(_QWORD *)(v1937 + 16) = *(unsigned int *)v11;
            break;
          case 495:
          case 1262:
            v36 = (*(_DWORD *)v11 | *((_DWORD *)v11 - 4));
            goto LABEL_1771;
          case 496:
            v36 = *(_DWORD *)(v11 - 2) & ~*(_DWORD *)v11;
            goto LABEL_1771;
          case 497:
          case 565:
            StringConstCast &= 0xFFFFFFFF00000000;
            break;
          case 498:
          case 564:
          case 723:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 1;
            break;
          case 499:
          case 563:
          case 724:
          case 758:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 2;
            break;
          case 500:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 4;
            break;
          case 501:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x10;
            break;
          case 502:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 8;
            break;
          case 503:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x20;
            break;
          case 504:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x40;
            break;
          case 505:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x80;
            break;
          case 506:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x7FFFFFFF;
            break;
          case 509:
            v276 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            *(_QWORD *)StringConstCast = 0x500000171;
            *(_DWORD *)(StringConstCast + 20) = *(v12 - 4);
            *(_QWORD *)(StringConstCast + 32) = *(v11 - 2);
            *(_QWORD *)(StringConstCast + 40) = 0;
            v277 = *(unsigned int *)v11;
            v278 = *v12;
            v279 = (_BYTE *)(StringConstCast + 172);
            v280 = (_BYTE *)(StringConstCast + 24);
            v281 = "CHECK";
            v282 = 0;
            v283 = 0;
            goto LABEL_499;
          case 510:
            v664 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            *(_QWORD *)StringConstCast = 0x700000171;
            *(_DWORD *)(StringConstCast + 20) = *(v12 - 7);
            *(_QWORD *)(StringConstCast + 56) = *(v11 - 5);
            *(_QWORD *)(StringConstCast + 64) = *(v11 - 3);
            *(_QWORD *)(StringConstCast + 80) = *(v11 - 2);
            *(_QWORD *)(StringConstCast + 88) = 0;
            *(_QWORD *)(StringConstCast + 96) = *(v11 - 1);
            goto LABEL_1698;
          case 511:
            v664 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            *(_QWORD *)StringConstCast = 0x700000171;
            *(_DWORD *)(StringConstCast + 20) = *(v12 - 2);
            *(_QWORD *)(StringConstCast + 80) = 0;
            *(_QWORD *)(StringConstCast + 56) = 0;
            *(_QWORD *)(StringConstCast + 64) = 0;
            *(_QWORD *)(StringConstCast + 88) = *(v11 - 1);
            *(_QWORD *)(StringConstCast + 96) = 0;
LABEL_1698:
            v1687 = *(unsigned int *)v11;
            v1688 = *v12;
            v1689 = (_BYTE *)(StringConstCast + 16);
            v1690 = (_BYTE *)(StringConstCast + 17);
            v1691 = "UNIQUE";
            goto LABEL_1699;
          case 512:
            v664 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            *(_QWORD *)StringConstCast = 0x600000171;
            *(_DWORD *)(StringConstCast + 20) = *(v12 - 8);
            *(_QWORD *)(StringConstCast + 56) = *(v11 - 5);
            *(_QWORD *)(StringConstCast + 64) = *(v11 - 3);
            *(_QWORD *)(StringConstCast + 80) = *(v11 - 2);
            *(_QWORD *)(StringConstCast + 88) = 0;
            *(_QWORD *)(StringConstCast + 96) = *(v11 - 1);
            goto LABEL_1636;
          case 513:
            v664 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            *(_QWORD *)StringConstCast = 0x600000171;
            *(_DWORD *)(StringConstCast + 20) = *(v12 - 3);
            *(_QWORD *)(StringConstCast + 80) = 0;
            *(_QWORD *)(StringConstCast + 56) = 0;
            *(_QWORD *)(StringConstCast + 64) = 0;
            *(_QWORD *)(StringConstCast + 88) = *(v11 - 1);
            *(_QWORD *)(StringConstCast + 96) = 0;
LABEL_1636:
            v1687 = *(unsigned int *)v11;
            v1688 = *v12;
            v1689 = (_BYTE *)(StringConstCast + 16);
            v1690 = (_BYTE *)(StringConstCast + 17);
            v1691 = "PRIMARY KEY";
            goto LABEL_1699;
          case 514:
            v664 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            *(_QWORD *)StringConstCast = 0x800000171;
            *(_DWORD *)(StringConstCast + 20) = *(v12 - 9);
            *(_QWORD *)(StringConstCast + 112) = *(v11 - 8);
            *(_QWORD *)(StringConstCast + 72) = *(v11 - 6);
            *(_QWORD *)(StringConstCast + 64) = *(v11 - 4);
            *(_QWORD *)(StringConstCast + 80) = *(v11 - 3);
            *(_QWORD *)(StringConstCast + 88) = 0;
            *(_QWORD *)(StringConstCast + 96) = *(v11 - 2);
            *(_QWORD *)(StringConstCast + 120) = *(v11 - 1);
            v1687 = *(unsigned int *)v11;
            v1688 = *v12;
            v1689 = (_BYTE *)(StringConstCast + 16);
            v1690 = (_BYTE *)(StringConstCast + 17);
            v1691 = "EXCLUDE";
LABEL_1699:
            processCASbits(v1687, v1688, (size_t)v1691, v1689, v1690, 0, 0);
            v26 = v664;
            break;
          case 515:
            v276 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0xB0uLL);
            *(_QWORD *)StringConstCast = 0x900000171;
            *(_DWORD *)(StringConstCast + 20) = *(v12 - 10);
            *(_QWORD *)(StringConstCast + 128) = *(v11 - 4);
            *(_QWORD *)(StringConstCast + 136) = *(v11 - 7);
            *(_QWORD *)(StringConstCast + 144) = *(v11 - 3);
            *(_BYTE *)(StringConstCast + 152) = *((_DWORD *)v11 - 4);
            *(_BYTE *)(StringConstCast + 153) = BYTE1(*((_DWORD *)v11 - 2));
            *(_BYTE *)(StringConstCast + 154) = *((_DWORD *)v11 - 2);
            v277 = *(unsigned int *)v11;
            v278 = *v12;
            v282 = (_BYTE *)(StringConstCast + 16);
            v283 = (_BYTE *)(StringConstCast + 17);
            v279 = (_BYTE *)(StringConstCast + 172);
            v281 = "FOREIGN KEY";
            v280 = 0;
LABEL_499:
            processCASbits(v277, v278, (size_t)v281, v282, v283, v279, v280);
            v26 = v276;
            *(_BYTE *)(StringConstCast + 173) = *(_BYTE *)(StringConstCast + 172) ^ 1;
            break;
          case 525:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x66;
            break;
          case 526:
            base_yyparse_cold_18();
          case 527:
          case 528:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x73;
            break;
          case 531:
            v405 = *(v11 - 2);
            goto LABEL_1440;
          case 532:
            v405 = *(v11 - 5);
            v129 = *(v11 - 1);
            goto LABEL_1441;
          case 535:
            v295 = *(_DWORD *)v11;
            v296 = 97;
            goto LABEL_1046;
          case 536:
            StringConstCast = *(unsigned __int8 *)v11 | 0x6100 | StringConstCast & 0xFFFFFFFF00000000;
            break;
          case 537:
            v295 = *((_DWORD *)v11 - 2);
            v296 = *(unsigned __int8 *)v11;
            goto LABEL_1046;
          case 538:
            v295 = *(_DWORD *)v11;
            v296 = *((unsigned __int8 *)v11 - 8);
LABEL_1046:
            v36 = v296 | (v295 << 8);
            goto LABEL_1771;
          case 539:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x6161;
            break;
          case 540:
          case 541:
          case 1261:
          case 2311:
          case 2313:
          case 2314:
            v36 = *(unsigned int *)v11;
            goto LABEL_1771;
          case 543:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x72;
            break;
          case 544:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x63;
            break;
          case 545:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x6E;
            break;
          case 551:
            v1941 = v26;
            v1942 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1941;
            StringConstCast = v1942;
            *(_DWORD *)v1942 = 393;
            *(_QWORD *)(v1942 + 8) = *(v11 - 3);
            *(_QWORD *)(v1942 + 16) = *(v11 - 1);
            *(_DWORD *)(v1942 + 24) = *(v12 - 5);
            break;
          case 554:
            v1945 = v26;
            v1877 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1945;
            StringConstCast = v1877;
            *(_DWORD *)v1877 = 392;
            *(_QWORD *)(v1877 + 8) = *(v11 - 2);
            *(_QWORD *)(v1877 + 16) = 0;
            goto LABEL_1761;
          case 555:
            v1876 = v26;
            v1877 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1876;
            StringConstCast = v1877;
            *(_DWORD *)v1877 = 392;
            *(_QWORD *)(v1877 + 8) = 0;
            *(_QWORD *)(v1877 + 16) = *(v11 - 2);
LABEL_1761:
            *(_QWORD *)(v1877 + 24) = *(v11 - 1);
            *(_QWORD *)(v1877 + 32) = *v11;
            *(_DWORD *)(v1877 + 40) = *(v12 - 2);
            break;
          case 556:
            v1376 = v26;
            v1377 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1376;
            StringConstCast = v1377;
            *(_DWORD *)v1377 = 392;
            *(_QWORD *)(v1377 + 8) = 0;
            *(_QWORD *)(v1377 + 16) = *(v11 - 3);
            *(_QWORD *)(v1377 + 24) = *(v11 - 1);
            *(_QWORD *)(v1377 + 32) = *v11;
            *(_DWORD *)(v1377 + 40) = *(v12 - 4);
            break;
          case 562:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 3;
            break;
          case 571:
            v1845 = v26;
            v1846 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1845;
            StringConstCast = v1846;
            *(_DWORD *)v1846 = 342;
            *(_QWORD *)(v1846 + 8) = *(v11 - 5);
            *(_QWORD *)(v1846 + 16) = *(v11 - 4);
            *(_QWORD *)(v1846 + 24) = *(v11 - 2);
            *(_QWORD *)(v1846 + 32) = *v11;
            *(_QWORD *)(v1846 + 40) = 0;
            *(_BYTE *)(v1846 + 48) = 0;
            break;
          case 572:
            v1313 = v26;
            v1314 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1313;
            StringConstCast = v1314;
            *(_DWORD *)v1314 = 342;
            *(_QWORD *)(v1314 + 8) = *(v11 - 5);
            *(_QWORD *)(v1314 + 16) = *(v11 - 4);
            *(_QWORD *)(v1314 + 24) = *(v11 - 2);
            *(_QWORD *)(v1314 + 32) = *v11;
            *(_QWORD *)(v1314 + 40) = 0;
            *(_BYTE *)(v1314 + 48) = 1;
            break;
          case 573:
            v344 = v26;
            v345 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v344;
            StringConstCast = v345;
            *(_DWORD *)v345 = 345;
            *(_QWORD *)(v345 + 8) = *(v11 - 3);
            *(_BYTE *)(v345 + 20) = 0;
            goto LABEL_1470;
          case 574:
            v1720 = v26;
            v345 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1720;
            StringConstCast = v345;
            *(_DWORD *)v345 = 345;
            *(_QWORD *)(v345 + 8) = *(v11 - 3);
            *(_BYTE *)(v345 + 20) = 1;
LABEL_1470:
            *(_DWORD *)(v345 + 16) = *(_DWORD *)v11;
            break;
          case 575:
            v262 = v26;
            v263 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v262;
            StringConstCast = v263;
            *(_DWORD *)v263 = 270;
            *(_QWORD *)(v263 + 8) = *(v11 - 1);
            *(_QWORD *)(v263 + 16) = *(v11 - 3);
            *(_DWORD *)(v263 + 24) = 39;
            *(_WORD *)(v263 + 28) = 0;
            v264 = *((_DWORD *)v11 - 10);
            goto LABEL_622;
          case 576:
            v599 = v26;
            v600 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v599;
            StringConstCast = v600;
            *(_DWORD *)v600 = 270;
            *(_QWORD *)(v600 + 8) = *(v11 - 1);
            *(_QWORD *)(v600 + 16) = *(v11 - 3);
            *(_DWORD *)(v600 + 24) = 39;
            *(_WORD *)(v600 + 28) = 256;
            v264 = *((_DWORD *)v11 - 16);
            goto LABEL_622;
          case 577:
            v1015 = v26;
            v1016 = MemoryContextAllocZeroAligned(*v2108, 0x48uLL);
            v26 = v1015;
            StringConstCast = v1016;
            *(_DWORD *)v1016 = 153;
            *(_QWORD *)(v1016 + 8) = *(v11 - 5);
            *(_QWORD *)(v1016 + 16) = *(v11 - 4);
            *(_QWORD *)(v1016 + 24) = *(v11 - 3);
            *(_QWORD *)(v1016 + 32) = *(v11 - 2);
            *(_DWORD *)(v1016 + 40) = *((_DWORD *)v11 - 2);
            goto LABEL_1701;
          case 581:
            v755 = v26;
            v756 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v755;
            StringConstCast = v756;
            *(_DWORD *)v756 = 270;
            *(_QWORD *)(v756 + 8) = *(v11 - 1);
            *(_QWORD *)(v756 + 16) = *(v11 - 3);
            *(_DWORD *)(v756 + 24) = 23;
            *(_WORD *)(v756 + 28) = 0;
            v264 = *((_DWORD *)v11 - 12);
            goto LABEL_622;
          case 582:
            v371 = v26;
            v372 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v371;
            StringConstCast = v372;
            *(_DWORD *)v372 = 270;
            *(_QWORD *)(v372 + 8) = *(v11 - 1);
            *(_QWORD *)(v372 + 16) = *(v11 - 3);
            *(_DWORD *)(v372 + 24) = 23;
            *(_WORD *)(v372 + 28) = 256;
            v264 = *((_DWORD *)v11 - 18);
LABEL_622:
            *(_BYTE *)(*(_QWORD *)(*(v11 - 3) + 8) + 33) = v264;
            *(_BYTE *)(*(v11 - 3) + 64) = *(_BYTE *)v11 ^ 1;
            break;
          case 583:
            v1898 = v26;
            v1016 = MemoryContextAllocZeroAligned(*v2108, 0x48uLL);
            v26 = v1898;
            StringConstCast = v1016;
            *(_DWORD *)v1016 = 153;
            *(_QWORD *)(v1016 + 8) = *(v11 - 4);
            *(_QWORD *)(v1016 + 16) = *(v11 - 3);
            *(_QWORD *)(v1016 + 24) = *(v11 - 2);
            *(_QWORD *)(v1016 + 32) = *(v11 - 1);
            *(_DWORD *)(v1016 + 40) = 0;
LABEL_1701:
            *(_QWORD *)(v1016 + 48) = *v11;
            *(_QWORD *)(v1016 + 56) = 0;
            *(_BYTE *)(v1016 + 64) = 0;
            break;
          case 586:
            v394 = v26;
            v395 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v394;
            StringConstCast = v395;
            *(_DWORD *)v395 = 330;
            *(_BYTE *)(v395 + 4) = *((_BYTE *)v11 - 16);
            *(_QWORD *)(v395 + 8) = *(v11 - 1);
            *(_BYTE *)(v395 + 5) = *(_BYTE *)v11 ^ 1;
            break;
          case 587:
            v885 = v26;
            v886 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v885;
            StringConstCast = v886;
            *(_DWORD *)v886 = 271;
            *(_BYTE *)(*(v11 - 1) + 33) = *((_DWORD *)v11 - 6);
            *(_QWORD *)(v886 + 8) = *(v11 - 1);
            *(_QWORD *)(v886 + 16) = *v11;
            *(_DWORD *)(v886 + 24) = 0;
            *(_BYTE *)(v886 + 29) = 0;
            break;
          case 588:
            v1498 = v26;
            v1499 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1498;
            StringConstCast = v1499;
            *(_DWORD *)v1499 = 271;
            *(_BYTE *)(*(v11 - 1) + 33) = *((_DWORD *)v11 - 12);
            *(_QWORD *)(v1499 + 8) = *(v11 - 1);
            *(_QWORD *)(v1499 + 16) = *v11;
            *(_DWORD *)(v1499 + 24) = 0;
            *(_BYTE *)(v1499 + 29) = 1;
            break;
          case 589:
            v1569 = v26;
            v1570 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1569;
            StringConstCast = v1570;
            *(_DWORD *)v1570 = 272;
            *(_QWORD *)(v1570 + 8) = *(v11 - 1);
            *(_QWORD *)(v1570 + 16) = *v11;
            *(_BYTE *)(v1570 + 25) = 0;
            break;
          case 590:
            v1244 = v26;
            v1245 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1244;
            StringConstCast = v1245;
            *(_DWORD *)v1245 = 272;
            *(_QWORD *)(v1245 + 8) = *(v11 - 1);
            *(_QWORD *)(v1245 + 16) = *v11;
            *(_BYTE *)(v1245 + 25) = 1;
            break;
          case 597:
          case 1192:
            v44 = *v11;
            v45 = *(v12 - 1);
            v43 = "as";
            goto LABEL_1598;
          case 598:
            v44 = *v11;
            v45 = *(v12 - 1);
            v43 = "cache";
            goto LABEL_1598;
          case 599:
            v32 = v26;
            v482 = makeInteger(1);
            v484 = *v12;
            goto LABEL_508;
          case 600:
            v32 = v26;
            v482 = makeInteger(0);
            v484 = *(v12 - 1);
LABEL_508:
            DefElem = makeDefElem((uint64_t)"cycle", (uint64_t)v482, v484, v483);
            goto LABEL_1777;
          case 601:
            v44 = *v11;
            v45 = *(v12 - 2);
            v43 = "increment";
            goto LABEL_1598;
          case 602:
            v44 = *v11;
            v45 = *(v12 - 1);
            v43 = "maxvalue";
            goto LABEL_1598;
          case 603:
            v44 = *v11;
            v45 = *(v12 - 1);
            v43 = "minvalue";
            goto LABEL_1598;
          case 604:
            v45 = *(v12 - 1);
            v43 = "maxvalue";
            goto LABEL_1597;
          case 605:
            v45 = *(v12 - 1);
            v43 = "minvalue";
            goto LABEL_1597;
          case 606:
            v44 = *v11;
            v45 = *(v12 - 2);
            v43 = "owned_by";
            goto LABEL_1598;
          case 607:
            v44 = *v11;
            v45 = *(v12 - 2);
            v43 = "sequence_name";
            goto LABEL_1598;
          case 608:
            v44 = *v11;
            v45 = *(v12 - 2);
            v43 = "start";
            goto LABEL_1598;
          case 613:
          case 614:
            v32 = v26;
            DefElem = makeFloat(*v11);
            goto LABEL_1777;
          case 615:
            v1616 = v26;
            Float = makeFloat(*v11);
            StringConstCast = Float;
            v1618 = *(_BYTE **)(Float + 8);
            if (*v1618 == 43)
              ++v1618;
            if (*v1618 == 45)
              *(_QWORD *)(Float + 8) = v1618 + 1;
            else
              *(_QWORD *)(Float + 8) = psprintf("-%s", (uint64_t)v2, v3, v4, v5, v6, v7, v8, (size_t)v1618);
            v26 = v1616;
            break;
          case 616:
            v32 = v26;
            DefElem = (unint64_t)makeInteger(*(_DWORD *)v11);
            goto LABEL_1777;
          case 619:
            v1180 = v26;
            v1181 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1180;
            StringConstCast = v1181;
            *(_DWORD *)v1181 = 325;
            *(_BYTE *)(v1181 + 16) = *((_BYTE *)v11 - 32);
            *(_QWORD *)(v1181 + 8) = *v11;
            *(_QWORD *)(v1181 + 24) = 0;
            break;
          case 620:
            v630 = v26;
            v631 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v630;
            StringConstCast = v631;
            *(_DWORD *)v631 = 277;
            *(_BYTE *)(v631 + 4) = *((_BYTE *)v11 - 64);
            *(_QWORD *)(v631 + 8) = *(v11 - 4);
            *(_QWORD *)(v631 + 16) = *(v11 - 2);
            *(_QWORD *)(v631 + 24) = *(v11 - 1);
            *(_QWORD *)(v631 + 32) = *v11;
            *(_BYTE *)(v631 + 40) = *((_BYTE *)v11 - 56);
            break;
          case 623:
          case 810:
          case 851:
          case 926:
          case 928:
          case 1197:
          case 1227:
            v32 = v26;
            v35 = makeString(*v11);
            *(double *)&v9 = list_make1_impl(226, v35);
            goto LABEL_1777;
          case 624:
          case 927:
            v32 = v26;
            v135 = makeString(*(v11 - 1));
            DefElem = lcons(v135, *v11);
            goto LABEL_1777;
          case 631:
            v1780 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 249;
            *(_DWORD *)(StringConstCast + 16) = 21;
            v1781 = makeString(*(v11 - 1));
            *(double *)&v9 = list_make1_impl(226, v1781);
            v26 = v1780;
            *(_QWORD *)(StringConstCast + 8) = v1782;
            *(_DWORD *)(StringConstCast + 20) = *(_DWORD *)v11;
            *(_WORD *)(StringConstCast + 24) = 0;
            break;
          case 632:
            v228 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 249;
            *(_DWORD *)(StringConstCast + 16) = 21;
            v229 = makeString(*(v11 - 1));
            *(double *)&v9 = list_make1_impl(226, v229);
            v26 = v228;
            *(_QWORD *)(StringConstCast + 8) = v230;
            *(_DWORD *)(StringConstCast + 20) = *(_DWORD *)v11;
            *(_WORD *)(StringConstCast + 24) = 1;
            break;
          case 635:
            v432 = v26;
            v433 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v432;
            StringConstCast = v433;
            *(_DWORD *)v433 = 298;
            *(_QWORD *)(v433 + 8) = *(v11 - 4);
            *(_QWORD *)(v433 + 16) = *(v11 - 3);
            *(_QWORD *)(v433 + 24) = *(v11 - 1);
            *(_QWORD *)(v433 + 32) = *v11;
            break;
          case 638:
            v1695 = v26;
            v1696 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1695;
            StringConstCast = v1696;
            *(_DWORD *)v1696 = 299;
            *(_QWORD *)(v1696 + 8) = *v11;
            *(_BYTE *)(v1696 + 16) = 0;
            break;
          case 639:
            v1811 = v26;
            v1812 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1811;
            StringConstCast = v1812;
            *(_DWORD *)v1812 = 299;
            *(_QWORD *)(v1812 + 8) = *v11;
            *(_BYTE *)(v1812 + 16) = 1;
            break;
          case 640:
            v1856 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1856;
            StringConstCast = v70;
            *(_DWORD *)v70 = 325;
            *(_QWORD *)(v70 + 8) = *(v11 - 2);
            *(_BYTE *)(v70 + 16) = 0;
            goto LABEL_1722;
          case 641:
            v1860 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1860;
            StringConstCast = v70;
            *(_DWORD *)v70 = 325;
            *(_QWORD *)(v70 + 8) = *(v11 - 2);
            *(_BYTE *)(v70 + 16) = 1;
            goto LABEL_1722;
          case 644:
            v32 = v26;
            v583 = makeString(*v11);
            DefElem = makeDefElem((uint64_t)"schema", v583, *(v12 - 1), v584);
            goto LABEL_1777;
          case 645:
          case 651:
            v32 = v26;
            v171 = makeString(*v11);
            DefElem = makeDefElem((uint64_t)"new_version", v171, *(v12 - 1), v172);
            goto LABEL_1777;
          case 646:
            base_yyparse_cold_19();
          case 647:
            v32 = v26;
            v1847 = makeInteger(1);
            DefElem = makeDefElem((uint64_t)"cascade", (uint64_t)v1847, *v12, v1848);
            goto LABEL_1777;
          case 648:
            v1500 = v26;
            v1501 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1500;
            StringConstCast = v1501;
            *(_DWORD *)v1501 = 326;
            *(_QWORD *)(v1501 + 8) = *(v11 - 2);
            *(_QWORD *)(v1501 + 16) = *v11;
            break;
          case 652:
            v267 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 327;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 4);
            *(_QWORD *)(StringConstCast + 16) = *((unsigned int *)v11 - 6);
            goto LABEL_1713;
          case 653:
            v1903 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1903;
            StringConstCast = v70;
            *(_DWORD *)v70 = 327;
            *(_QWORD *)(v70 + 8) = *(v11 - 3);
            v342 = *((_DWORD *)v11 - 4);
            v343 = 1;
            goto LABEL_1721;
          case 654:
            v267 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 327;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 7);
            *(_DWORD *)(StringConstCast + 16) = *((_DWORD *)v11 - 12);
            *(_DWORD *)(StringConstCast + 20) = 5;
            *(double *)&v9 = list_make2_impl(226, *(v11 - 3), *(v11 - 1));
            goto LABEL_1736;
          case 655:
            v720 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v720;
            StringConstCast = v70;
            *(_DWORD *)v70 = 327;
            *(_QWORD *)(v70 + 8) = *(v11 - 3);
            v342 = *((_DWORD *)v11 - 4);
            v343 = 7;
            goto LABEL_1721;
          case 656:
            v341 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v341;
            StringConstCast = v70;
            *(_DWORD *)v70 = 327;
            *(_QWORD *)(v70 + 8) = *(v11 - 3);
            v342 = *((_DWORD *)v11 - 4);
            v343 = 8;
            goto LABEL_1721;
          case 657:
            v1909 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1909;
            StringConstCast = v70;
            *(_DWORD *)v70 = 327;
            *(_QWORD *)(v70 + 8) = *(v11 - 3);
            v342 = *((_DWORD *)v11 - 4);
            v343 = 12;
            goto LABEL_1721;
          case 658:
            v1656 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1656;
            StringConstCast = v70;
            *(_DWORD *)v70 = 327;
            *(_QWORD *)(v70 + 8) = *(v11 - 3);
            v342 = *((_DWORD *)v11 - 4);
            v343 = 19;
            goto LABEL_1721;
          case 659:
            v267 = v26;
            v268 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = v268;
            *(_DWORD *)v268 = 327;
            *(_QWORD *)(v268 + 8) = *(v11 - 4);
            v269 = *((_DWORD *)v11 - 6);
            v270 = 21;
            goto LABEL_1712;
          case 660:
            v346 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v346;
            StringConstCast = v70;
            *(_DWORD *)v70 = 327;
            *(_QWORD *)(v70 + 8) = *(v11 - 3);
            v342 = *((_DWORD *)v11 - 4);
            v343 = 25;
            goto LABEL_1721;
          case 661:
            v267 = v26;
            v1706 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = v1706;
            *(_DWORD *)v1706 = 327;
            *(_QWORD *)(v1706 + 8) = *(v11 - 6);
            v1707 = *((_DWORD *)v11 - 10);
            v1708 = 24;
            goto LABEL_1735;
          case 662:
            v267 = v26;
            v1706 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = v1706;
            *(_DWORD *)v1706 = 327;
            *(_QWORD *)(v1706 + 8) = *(v11 - 6);
            v1707 = *((_DWORD *)v11 - 10);
            v1708 = 26;
LABEL_1735:
            *(_DWORD *)(v1706 + 16) = v1707;
            *(_DWORD *)(v1706 + 20) = v1708;
            v1920 = makeString(*v11);
            v1655 = lcons(v1920, *(v11 - 2));
            goto LABEL_1736;
          case 663:
            v946 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v946;
            StringConstCast = v70;
            *(_DWORD *)v70 = 327;
            *(_QWORD *)(v70 + 8) = *(v11 - 3);
            v342 = *((_DWORD *)v11 - 4);
            v343 = 28;
            goto LABEL_1721;
          case 664:
            v485 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v485;
            StringConstCast = v70;
            *(_DWORD *)v70 = 327;
            *(_QWORD *)(v70 + 8) = *(v11 - 3);
            *(_DWORD *)(v70 + 16) = *((_DWORD *)v11 - 4);
            *(_DWORD *)(v70 + 20) = 32;
            goto LABEL_1722;
          case 665:
            v267 = v26;
            v268 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = v268;
            *(_DWORD *)v268 = 327;
            *(_QWORD *)(v268 + 8) = *(v11 - 3);
            v269 = *((_DWORD *)v11 - 4);
            v270 = 34;
            goto LABEL_1712;
          case 666:
            v267 = v26;
            v268 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = v268;
            *(_DWORD *)v268 = 327;
            *(_QWORD *)(v268 + 8) = *(v11 - 4);
            v269 = *((_DWORD *)v11 - 6);
            v270 = 14;
            goto LABEL_1712;
          case 667:
            v1770 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1770;
            StringConstCast = v70;
            *(_DWORD *)v70 = 327;
            *(_QWORD *)(v70 + 8) = *(v11 - 3);
            v342 = *((_DWORD *)v11 - 4);
            v343 = 39;
            goto LABEL_1721;
          case 668:
            v1587 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1587;
            StringConstCast = v70;
            *(_DWORD *)v70 = 327;
            *(_QWORD *)(v70 + 8) = *(v11 - 5);
            v342 = *((_DWORD *)v11 - 8);
            v343 = 45;
            goto LABEL_1721;
          case 669:
            v1017 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1017;
            StringConstCast = v70;
            *(_DWORD *)v70 = 327;
            *(_QWORD *)(v70 + 8) = *(v11 - 5);
            v342 = *((_DWORD *)v11 - 8);
            v343 = 44;
            goto LABEL_1721;
          case 670:
            v693 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v693;
            StringConstCast = v70;
            *(_DWORD *)v70 = 327;
            *(_QWORD *)(v70 + 8) = *(v11 - 5);
            v342 = *((_DWORD *)v11 - 8);
            v343 = 46;
            goto LABEL_1721;
          case 671:
            v585 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v585;
            StringConstCast = v70;
            *(_DWORD *)v70 = 327;
            *(_QWORD *)(v70 + 8) = *(v11 - 5);
            v342 = *((_DWORD *)v11 - 8);
            v343 = 43;
            goto LABEL_1721;
          case 672:
            v503 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v503;
            StringConstCast = v70;
            *(_DWORD *)v70 = 327;
            *(_QWORD *)(v70 + 8) = *(v11 - 3);
            v342 = *((_DWORD *)v11 - 4);
            v343 = 35;
            goto LABEL_1721;
          case 673:
            v486 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v486;
            StringConstCast = v70;
            *(_DWORD *)v70 = 327;
            *(_QWORD *)(v70 + 8) = *(v11 - 3);
            v342 = *((_DWORD *)v11 - 4);
            v343 = 49;
            goto LABEL_1721;
          case 674:
            v511 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v511;
            StringConstCast = v70;
            *(_DWORD *)v70 = 327;
            *(_QWORD *)(v70 + 8) = *(v11 - 4);
            v342 = *((_DWORD *)v11 - 6);
            v343 = 23;
            goto LABEL_1721;
          case 675:
            v612 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v612;
            StringConstCast = v70;
            *(_DWORD *)v70 = 327;
            *(_QWORD *)(v70 + 8) = *(v11 - 4);
            v342 = *((_DWORD *)v11 - 6);
            v343 = 18;
            goto LABEL_1721;
          case 676:
            v267 = v26;
            v268 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = v268;
            *(_DWORD *)v268 = 327;
            *(_QWORD *)(v268 + 8) = *(v11 - 5);
            v269 = *((_DWORD *)v11 - 8);
            v270 = 16;
            goto LABEL_1712;
          case 677:
            v267 = v26;
            v268 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = v268;
            *(_DWORD *)v268 = 327;
            *(_QWORD *)(v268 + 8) = *(v11 - 3);
            v269 = *((_DWORD *)v11 - 4);
            v270 = 17;
LABEL_1712:
            *(_DWORD *)(v268 + 16) = v269;
            *(_DWORD *)(v268 + 20) = v270;
LABEL_1713:
            v1655 = makeString(*v11);
LABEL_1736:
            v26 = v267;
            *(_QWORD *)(StringConstCast + 24) = v1655;
            break;
          case 678:
            v2103 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 327;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 6);
            *(_DWORD *)(StringConstCast + 16) = *((_DWORD *)v11 - 10);
            *(_DWORD *)(StringConstCast + 20) = 41;
            v1730 = v24;
            v1731 = *(v11 - 2);
            v1732 = makeString(*v11);
            v1733 = v1731;
            v24 = v1730;
            *(double *)&v9 = list_make2_impl(226, v1733, v1732);
            v26 = v2103;
            *(_QWORD *)(StringConstCast + 24) = v1734;
            break;
          case 679:
            v1910 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1910;
            StringConstCast = v70;
            *(_DWORD *)v70 = 327;
            *(_QWORD *)(v70 + 8) = *(v11 - 3);
            v342 = *((_DWORD *)v11 - 4);
            v343 = 47;
LABEL_1721:
            *(_DWORD *)(v70 + 16) = v342;
            *(_DWORD *)(v70 + 20) = v343;
            goto LABEL_1722;
          case 680:
            v347 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v347;
            StringConstCast = v70;
            v348 = 313;
            goto LABEL_412;
          case 681:
            v44 = *v11;
            v45 = *(v12 - 1);
            v43 = "handler";
            goto LABEL_1598;
          case 682:
            v45 = *(v12 - 1);
            v43 = "handler";
            goto LABEL_1597;
          case 683:
            v44 = *v11;
            v45 = *(v12 - 1);
            v43 = "validator";
            goto LABEL_1598;
          case 684:
            v45 = *(v12 - 1);
            v43 = "validator";
            goto LABEL_1597;
          case 689:
            v447 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v447;
            StringConstCast = v70;
            v348 = 314;
LABEL_412:
            *(_DWORD *)v70 = v348;
            v448 = *(v11 - 2);
            goto LABEL_1662;
          case 690:
            v349 = v26;
            v350 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v349;
            StringConstCast = v350;
            *(_DWORD *)v350 = 314;
            *(_QWORD *)(v350 + 8) = *(v11 - 1);
            *(_QWORD *)(v350 + 16) = *v11;
            *(_QWORD *)(v350 + 24) = 0;
            break;
          case 699:
            StringConstCast = *v11;
            *(_DWORD *)(*v11 + 32) = 1;
            break;
          case 700:
            StringConstCast = *v11;
            *(_DWORD *)(*v11 + 32) = 2;
            break;
          case 701:
            v32 = v26;
            DefElem = makeDefElemExtended(0, *v11, 0, 3, *v12, *(double *)&v9);
            goto LABEL_1777;
          case 705:
            v1927 = v26;
            v1928 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1927;
            StringConstCast = v1928;
            *(_DWORD *)v1928 = 315;
            *(_QWORD *)(v1928 + 8) = *(v11 - 7);
            *(_QWORD *)(v1928 + 16) = *(v11 - 6);
            *(_QWORD *)(v1928 + 24) = *(v11 - 5);
            *(_QWORD *)(v1928 + 32) = *(v11 - 1);
            *(_QWORD *)(v1928 + 48) = *v11;
            *(_BYTE *)(v1928 + 40) = 0;
            break;
          case 706:
            v249 = v26;
            v250 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v249;
            StringConstCast = v250;
            *(_DWORD *)v250 = 315;
            *(_QWORD *)(v250 + 8) = *(v11 - 7);
            *(_QWORD *)(v250 + 16) = *(v11 - 6);
            *(_QWORD *)(v250 + 24) = *(v11 - 5);
            *(_QWORD *)(v250 + 32) = *(v11 - 1);
            *(_QWORD *)(v250 + 48) = *v11;
            *(_BYTE *)(v250 + 40) = 1;
            break;
          case 713:
            v496 = v26;
            v354 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v496;
            StringConstCast = v354;
            *(_DWORD *)v354 = 316;
            *(_QWORD *)(v354 + 8) = *(v11 - 2);
            *(_QWORD *)(v354 + 16) = *(v11 - 1);
            goto LABEL_1593;
          case 714:
            v353 = v26;
            v354 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v353;
            StringConstCast = v354;
            *(_DWORD *)v354 = 316;
            *(_QWORD *)(v354 + 8) = *(v11 - 1);
            *(_QWORD *)(v354 + 16) = *v11;
            goto LABEL_1594;
          case 715:
            v362 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v362;
            StringConstCast = v70;
            *(_DWORD *)v70 = 316;
            *(_QWORD *)(v70 + 8) = *(v11 - 1);
            goto LABEL_1722;
          case 716:
            v541 = v26;
            v542 = MemoryContextAllocZeroAligned(*v2108, 0x78uLL);
            v26 = v541;
            StringConstCast = v542;
            *(_DWORD *)v542 = 323;
            *(_BYTE *)(*(v11 - 7) + 33) = 112;
            *(_QWORD *)(v542 + 8) = *(v11 - 7);
            *(_QWORD *)(v542 + 16) = *(v11 - 5);
            *(_QWORD *)(v542 + 24) = *(v11 - 3);
            *(_QWORD *)(v542 + 80) = 0;
            *(_BYTE *)(v542 + 96) = 0;
            *(_DWORD *)(v542 + 72) = 0;
            *(_QWORD *)(v542 + 56) = 0;
            *(_QWORD *)(v542 + 64) = 0;
            *(_QWORD *)(v542 + 48) = 0;
            goto LABEL_1030;
          case 717:
            v1289 = v26;
            v542 = MemoryContextAllocZeroAligned(*v2108, 0x78uLL);
            v26 = v1289;
            StringConstCast = v542;
            *(_DWORD *)v542 = 323;
            *(_BYTE *)(*(v11 - 7) + 33) = 112;
            *(_QWORD *)(v542 + 8) = *(v11 - 7);
            *(_QWORD *)(v542 + 16) = *(v11 - 5);
            *(_QWORD *)(v542 + 24) = *(v11 - 3);
            *(_QWORD *)(v542 + 80) = 0;
            *(_DWORD *)(v542 + 72) = 0;
            *(_QWORD *)(v542 + 56) = 0;
            *(_QWORD *)(v542 + 64) = 0;
            *(_QWORD *)(v542 + 48) = 0;
            *(_BYTE *)(v542 + 96) = 1;
LABEL_1030:
            *(_QWORD *)(v542 + 104) = *(v11 - 1);
            *(_QWORD *)(v542 + 112) = *v11;
            break;
          case 718:
            v1889 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x78uLL);
            *(_DWORD *)StringConstCast = 323;
            *(_BYTE *)(*(v11 - 8) + 33) = 112;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 8);
            *(double *)&v9 = list_make1_impl(226, *(v11 - 5));
            v26 = v1889;
            *(_QWORD *)(StringConstCast + 24) = v1890;
            *(_QWORD *)(StringConstCast + 16) = *(v11 - 4);
            *(_QWORD *)(StringConstCast + 32) = *(v11 - 3);
            *(_QWORD *)(StringConstCast + 80) = 0;
            *(_BYTE *)(StringConstCast + 96) = 0;
            *(_DWORD *)(StringConstCast + 72) = 0;
            *(_QWORD *)(StringConstCast + 56) = 0;
            *(_QWORD *)(StringConstCast + 64) = 0;
            *(_QWORD *)(StringConstCast + 48) = 0;
            goto LABEL_1687;
          case 719:
            v680 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x78uLL);
            *(_DWORD *)StringConstCast = 323;
            *(_BYTE *)(*(v11 - 8) + 33) = 112;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 8);
            *(double *)&v9 = list_make1_impl(226, *(v11 - 5));
            v26 = v680;
            *(_QWORD *)(StringConstCast + 24) = v681;
            *(_QWORD *)(StringConstCast + 16) = *(v11 - 4);
            *(_QWORD *)(StringConstCast + 32) = *(v11 - 3);
            *(_QWORD *)(StringConstCast + 80) = 0;
            *(_DWORD *)(StringConstCast + 72) = 0;
            *(_QWORD *)(StringConstCast + 56) = 0;
            *(_QWORD *)(StringConstCast + 64) = 0;
            *(_QWORD *)(StringConstCast + 48) = 0;
            *(_BYTE *)(StringConstCast + 96) = 1;
LABEL_1687:
            *(_QWORD *)(StringConstCast + 104) = *(v11 - 1);
            *(_QWORD *)(StringConstCast + 112) = *v11;
            break;
          case 720:
            v1929 = v26;
            v1930 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1929;
            StringConstCast = v1930;
            *(_DWORD *)v1930 = 237;
            *(_QWORD *)(v1930 + 8) = *(v11 - 1);
            *(_QWORD *)(v1930 + 16) = *v11;
            *(_DWORD *)(v1930 + 24) = 18;
            *(_BYTE *)(v1930 + 28) = 0;
            break;
          case 721:
            v1743 = v26;
            v1744 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1743;
            StringConstCast = v1744;
            *(_DWORD *)v1744 = 237;
            *(_QWORD *)(v1744 + 8) = *(v11 - 1);
            *(_QWORD *)(v1744 + 16) = *v11;
            *(_DWORD *)(v1744 + 24) = 18;
            *(_BYTE *)(v1744 + 28) = 1;
            break;
          case 722:
            v1560 = v26;
            v1561 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1560;
            StringConstCast = v1561;
            *(_DWORD *)v1561 = 324;
            *(_QWORD *)(v1561 + 8) = *(v11 - 3);
            *(_QWORD *)(v1561 + 16) = *(v11 - 7);
            *(_QWORD *)(v1561 + 24) = *(v11 - 1);
            *(_DWORD *)(v1561 + 32) = *(_DWORD *)*(v11 - 6);
            *(_QWORD *)(v1561 + 40) = *(_QWORD *)(*(v11 - 6) + 8);
            *(_QWORD *)(v1561 + 48) = *v11;
            break;
          case 725:
            v694 = v26;
            v695 = palloc(0x10uLL);
            v26 = v694;
            StringConstCast = v695;
            *(_DWORD *)v695 = *((_DWORD *)v11 - 6);
            *(_QWORD *)(v695 + 8) = *(v11 - 1);
            break;
          case 726:
            v1911 = v26;
            v1912 = palloc(0x10uLL);
            v26 = v1911;
            StringConstCast = v1912;
            *(_DWORD *)v1912 = 0;
            *(_QWORD *)(v1912 + 8) = 0;
            break;
          case 727:
            v1596 = v26;
            v1597 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1596;
            StringConstCast = v1597;
            *(_DWORD *)v1597 = 317;
            *(_QWORD *)(v1597 + 8) = *(v11 - 3);
            *(_QWORD *)(v1597 + 16) = *(v11 - 1);
            *(_QWORD *)(v1597 + 32) = *v11;
            *(_BYTE *)(v1597 + 24) = 0;
            break;
          case 728:
            v871 = v26;
            v488 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v871;
            StringConstCast = v488;
            *(_DWORD *)v488 = 317;
            *(_QWORD *)(v488 + 8) = *(v11 - 3);
            *(_QWORD *)(v488 + 16) = *(v11 - 1);
            *(_QWORD *)(v488 + 32) = *v11;
            goto LABEL_690;
          case 729:
          case 740:
          case 742:
          case 746:
          case 761:
          case 768:
          case 777:
          case 795:
          case 839:
          case 841:
          case 842:
          case 849:
          case 869:
          case 872:
          case 981:
          case 992:
          case 1008:
          case 1035:
          case 1068:
          case 1069:
          case 2322:
          case 2325:
            StringConstCast = *v11;
            break;
          case 730:
            v1337 = v24;
            v1338 = *v12;
            v1339 = v26;
            v1340 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1339;
            StringConstCast = v1340;
            v9 = 0x100000186;
            *(_QWORD *)v1340 = 0x100000186;
            *(_DWORD *)(v1340 + 16) = v1338;
            v24 = v1337;
            break;
          case 731:
            v1857 = v26;
            v1858 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1857;
            StringConstCast = v1858;
            *(_DWORD *)v1858 = 319;
            *(_QWORD *)(v1858 + 8) = *(v11 - 2);
            *(_QWORD *)(v1858 + 16) = *v11;
            *(_BYTE *)(v1858 + 24) = 0;
            break;
          case 732:
            v487 = v26;
            v488 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v487;
            StringConstCast = v488;
            *(_DWORD *)v488 = 319;
            *(_QWORD *)(v488 + 8) = *(v11 - 2);
            *(_QWORD *)(v488 + 16) = *v11;
LABEL_690:
            *(_BYTE *)(v488 + 24) = 1;
            break;
          case 733:
            v1870 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1870;
            StringConstCast = v70;
            *(_DWORD *)v70 = 318;
            v448 = *(v11 - 3);
LABEL_1662:
            *(_QWORD *)(v70 + 8) = v448;
            *(_QWORD *)(v70 + 16) = *(v11 - 1);
            goto LABEL_1722;
          case 734:
            v1562 = v26;
            v1563 = MemoryContextAllocZeroAligned(*v2108, 0x40uLL);
            v26 = v1562;
            StringConstCast = v1563;
            *(_DWORD *)v1563 = 333;
            *(_QWORD *)(v1563 + 8) = *(v11 - 7);
            *(_QWORD *)(v1563 + 16) = *(v11 - 5);
            *(_BYTE *)(v1563 + 32) = *((_BYTE *)v11 - 32);
            *(_QWORD *)(v1563 + 24) = *(v11 - 3);
            *(_QWORD *)(v1563 + 40) = *(v11 - 2);
            *(_QWORD *)(v1563 + 48) = *(v11 - 1);
            *(_QWORD *)(v1563 + 56) = *v11;
            break;
          case 735:
            v1062 = v26;
            v1063 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1062;
            StringConstCast = v1063;
            *(_DWORD *)v1063 = 334;
            *(_QWORD *)(v1063 + 8) = *(v11 - 5);
            *(_QWORD *)(v1063 + 16) = *(v11 - 3);
            *(_QWORD *)(v1063 + 24) = *(v11 - 2);
            *(_QWORD *)(v1063 + 32) = *(v11 - 1);
            *(_QWORD *)(v1063 + 40) = *v11;
            break;
          case 736:
          case 738:
          case 784:
          case 834:
          case 845:
            StringConstCast = *(v11 - 1);
            break;
          case 737:
          case 739:
          case 743:
          case 769:
          case 785:
          case 790:
          case 796:
          case 850:
          case 870:
          case 871:
          case 873:
          case 982:
          case 993:
          case 1009:
          case 1036:
          case 1037:
            StringConstCast = 0;
            break;
          case 741:
            v32 = v26;
            v757 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            *(_QWORD *)v757 = 0x300000186;
            *(_DWORD *)(v757 + 16) = -1;
            *(double *)&v9 = list_make1_impl(226, v757);
            goto LABEL_1777;
          case 744:
            v2075 = v26;
            v407 = v24;
            v408 = (const char *)*v11;
            if (!strcmp((const char *)*v11, "permissive"))
            {
              StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 1;
            }
            else
            {
              if (strcmp(v408, "restrictive"))
                base_yyparse_cold_20((size_t *)v11, (unsigned int *)v12);
              StringConstCast &= 0xFFFFFFFFFFFFFF00;
            }
            goto LABEL_1827;
          case 745:
          case 773:
          case 775:
          case 782:
          case 857:
          case 867:
          case 934:
            StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 1;
            break;
          case 747:
          case 748:
            StringConstCast = (uint64_t)"all";
            break;
          case 749:
            StringConstCast = (uint64_t)"select";
            break;
          case 750:
            StringConstCast = (uint64_t)"insert";
            break;
          case 751:
            StringConstCast = (uint64_t)"update";
            break;
          case 752:
            StringConstCast = (uint64_t)"delete";
            break;
          case 753:
            v1182 = v26;
            v1183 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1182;
            StringConstCast = v1183;
            *(_DWORD *)v1183 = 336;
            *(_QWORD *)(v1183 + 8) = *(v11 - 4);
            *(_QWORD *)(v1183 + 16) = *v11;
            *(_BYTE *)(v1183 + 24) = *((_BYTE *)v11 - 16);
            break;
          case 754:
            StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 0x69;
            break;
          case 755:
            StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 0x74;
            break;
          case 756:
            v373 = v26;
            v374 = MemoryContextAllocZeroAligned(*v2108, 0x60uLL);
            v26 = v373;
            StringConstCast = v374;
            *(_DWORD *)v374 = 276;
            *(_QWORD *)(v374 + 8) = *(v11 - 13);
            *(_QWORD *)(v374 + 16) = *(v11 - 9);
            *(_QWORD *)(v374 + 24) = *(v11 - 3);
            *(_QWORD *)(v374 + 32) = *(v11 - 1);
            *(_BYTE *)(v374 + 40) = *((_BYTE *)v11 - 56);
            *(_WORD *)(v374 + 42) = *((_DWORD *)v11 - 24);
            *(_WORD *)(v374 + 44) = *(_DWORD *)(**(_QWORD **)(*(v11 - 11) + 16) + 8);
            *(_QWORD *)(v374 + 48) = *(_QWORD *)(*(_QWORD *)(*(v11 - 11) + 16) + 8);
            *(_QWORD *)(v374 + 56) = *(v11 - 6);
            *(_QWORD *)(v374 + 72) = *(v11 - 8);
            *(_BYTE *)(v374 + 64) = 0;
            *(_WORD *)(v374 + 80) = 0;
            *(_QWORD *)(v374 + 88) = 0;
            break;
          case 757:
            v1852 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x60uLL);
            *(_DWORD *)StringConstCast = 276;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 16);
            *(_QWORD *)(StringConstCast + 16) = *(v11 - 12);
            *(_QWORD *)(StringConstCast + 24) = *(v11 - 3);
            *(_QWORD *)(StringConstCast + 32) = *(v11 - 1);
            *(_BYTE *)(StringConstCast + 40) = 1;
            *(_WORD *)(StringConstCast + 42) = 0;
            *(_WORD *)(StringConstCast + 44) = *(_DWORD *)(**(_QWORD **)(*(v11 - 14) + 16) + 8);
            *(_QWORD *)(StringConstCast + 48) = *(_QWORD *)(*(_QWORD *)(*(v11 - 14) + 16) + 8);
            *(_QWORD *)(StringConstCast + 56) = *(v11 - 6);
            *(_QWORD *)(StringConstCast + 72) = 0;
            *(_BYTE *)(StringConstCast + 64) = 1;
            processCASbits(*((unsigned int *)v11 - 20), *(v12 - 10), (size_t)"TRIGGER", (_BYTE *)(StringConstCast + 80), (_BYTE *)(StringConstCast + 81), 0, 0);
            v26 = v1852;
            *(_QWORD *)(StringConstCast + 88) = *(v11 - 11);
            break;
          case 759:
          case 797:
          case 914:
          case 969:
            StringConstCast &= 0xFFFFFFFF00000000;
            break;
          case 760:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x40;
            break;
          case 762:
            v1657 = *(_QWORD **)(*(v11 - 2) + 16);
            v1658 = *(_DWORD *)(*v1657 + 8);
            v1659 = *(_QWORD **)(*v11 + 16);
            v1660 = *(_DWORD *)(*v1659 + 8);
            if ((v1660 & v1658) != 0)
              scanner_yyerror((size_t)"duplicate trigger events specified", (uint64_t)v2107);
            v1661 = v26;
            v1662 = v1657[1];
            v2062 = (const void **)v1659[1];
            v2100 = makeInteger(v1660 | v1658);
            v1663 = list_concat(v1662, v2062);
            *(double *)&v9 = list_make2_impl(226, (uint64_t)v2100, v1663);
            StringConstCast = (uint64_t)v1664;
            v26 = v1661;
            break;
          case 763:
            v872 = 4;
            goto LABEL_1703;
          case 764:
            v872 = 8;
            goto LABEL_1703;
          case 765:
            v872 = 16;
            goto LABEL_1703;
          case 766:
            v32 = v26;
            v402 = makeInteger(16);
            *(double *)&v9 = list_make2_impl(226, (uint64_t)v402, *v11);
            goto LABEL_1777;
          case 767:
            v872 = 32;
LABEL_1703:
            v32 = v26;
            v1899 = makeInteger(v872);
            *(double *)&v9 = list_make2_impl(226, (uint64_t)v1899, 0);
            goto LABEL_1777;
          case 772:
            v1416 = v26;
            v1417 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1416;
            StringConstCast = v1417;
            *(_DWORD *)v1417 = 391;
            *(_QWORD *)(v1417 + 8) = *v11;
            *(_BYTE *)(v1417 + 16) = *((_BYTE *)v11 - 24);
            *(_BYTE *)(v1417 + 17) = *((_BYTE *)v11 - 16);
            break;
          case 774:
          case 776:
          case 779:
          case 783:
          case 858:
          case 868:
          case 875:
          case 933:
          case 935:
            StringConstCast &= 0xFFFFFFFFFFFFFF00;
            break;
          case 778:
            StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | *(unsigned __int8 *)v11;
            break;
          case 791:
            v32 = v26;
            v1692 = psprintf("%d", (uint64_t)v2, v3, v4, v5, v6, v7, v8, *(unsigned int *)v11);
            DefElem = makeString((uint64_t)v1692);
            goto LABEL_1777;
          case 798:
            v1598 = (*(_DWORD *)v11 | *((_DWORD *)v11 - 2));
            if ((~(_DWORD)v1598 & 9) == 0)
              base_yyparse_cold_21();
            if ((~(_DWORD)v1598 & 3) == 0 || ((*(_BYTE *)v11 | *((_BYTE *)v11 - 8)) & 0xC) == 0xC)
              base_yyparse_cold_22();
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | v1598;
            break;
          case 799:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 1;
            break;
          case 800:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 2;
            break;
          case 801:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 4;
            break;
          case 802:
          case 908:
          case 963:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 8;
            break;
          case 803:
          case 917:
          case 973:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x10;
            break;
          case 804:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x20;
            break;
          case 805:
            v1753 = v26;
            v386 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1753;
            StringConstCast = v386;
            *(_DWORD *)v386 = 328;
            *(_QWORD *)(v386 + 8) = *(v11 - 7);
            *(_QWORD *)(v386 + 16) = *(v11 - 5);
            *(_QWORD *)(v386 + 24) = 0;
            goto LABEL_1503;
          case 806:
            v1631 = v26;
            v386 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1631;
            StringConstCast = v386;
            *(_DWORD *)v386 = 328;
            *(_QWORD *)(v386 + 8) = *(v11 - 9);
            *(_QWORD *)(v386 + 16) = *(v11 - 7);
            *(_QWORD *)(v386 + 24) = *(v11 - 5);
            goto LABEL_1503;
          case 809:
            v43 = (const char *)*(v11 - 4);
            v44 = *(v11 - 1);
            v45 = *(v12 - 4);
            goto LABEL_1598;
          case 811:
          case 852:
          case 929:
            v55 = v24;
            v56 = *(v11 - 2);
            v57 = v26;
            v58 = makeString(*v11);
            v59 = v56;
            v24 = v55;
            v60 = lappend(v59, v58);
            v26 = v57;
            StringConstCast = v60;
            break;
          case 812:
            v1502 = v26;
            v1503 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1502;
            StringConstCast = v1503;
            *(_DWORD *)v1503 = 329;
            *(_QWORD *)(v1503 + 8) = *(v11 - 1);
            *(_BYTE *)(v1503 + 16) = *(_BYTE *)v11;
            break;
          case 813:
            StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 0x4F;
            break;
          case 814:
            StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 0x52;
            break;
          case 815:
            StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 0x41;
            break;
          case 816:
            StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 0x44;
            break;
          case 817:
            base_yyparse_cold_23();
          case 818:
            v265 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v265;
            StringConstCast = v201;
            v9 = 0x1000000F8;
            *(_QWORD *)v201 = 0x1000000F8;
            *(_BYTE *)(v201 + 8) = 0;
            *(_BYTE *)(v201 + 41) = *((_BYTE *)v11 - 32);
            *(_QWORD *)(v201 + 16) = *(v11 - 2);
            goto LABEL_1494;
          case 819:
            v1697 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1697;
            StringConstCast = v201;
            v9 = 0x1000000F8;
            *(_QWORD *)v201 = 0x1000000F8;
            *(_BYTE *)(v201 + 8) = 1;
            *(_BYTE *)(v201 + 41) = *((_BYTE *)v11 - 24);
            goto LABEL_1601;
          case 820:
            v1829 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1829;
            StringConstCast = v201;
            v9 = 0x19000000F8;
            goto LABEL_1600;
          case 821:
            v613 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v613;
            StringConstCast = v201;
            v9 = 0x2F000000F8;
LABEL_1600:
            *(double *)v201 = *(double *)&v9;
            *(_BYTE *)(v201 + 8) = 0;
            goto LABEL_1601;
          case 822:
            v497 = v26;
            v498 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v497;
            StringConstCast = v498;
            v9 = 0x2F000000F8;
            *(_QWORD *)v498 = 0x2F000000F8;
            *(_BYTE *)(v498 + 8) = 0;
            *(_QWORD *)(v498 + 16) = *v11;
            *(_QWORD *)(v498 + 24) = 0;
            *(_QWORD *)(v498 + 32) = 0;
            break;
          case 823:
            v1504 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            *(_DWORD *)StringConstCast = 307;
            v1506 = makeRangeVarFromAnyName(*(v11 - 4), *(v12 - 4), v1505);
            v26 = v1504;
            *(_QWORD *)(StringConstCast + 8) = v1506;
            *(_QWORD *)(StringConstCast + 16) = *(v11 - 1);
            break;
          case 824:
            v665 = v26;
            v666 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v665;
            StringConstCast = v666;
            *(_DWORD *)v666 = 308;
            *(_QWORD *)(v666 + 8) = *(v11 - 5);
            *(_QWORD *)(v666 + 16) = *(v11 - 1);
            break;
          case 825:
            v1315 = v26;
            v175 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1315;
            StringConstCast = v175;
            *(_DWORD *)v175 = 309;
            v751 = (const char *)*(v11 - 3);
            goto LABEL_1691;
          case 826:
            v393 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v393;
            StringConstCast = v201;
            v9 = 0x2D000000F8;
            goto LABEL_1705;
          case 827:
            v434 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v434;
            StringConstCast = v201;
            v9 = 0x2C000000F8;
            goto LABEL_1705;
          case 828:
            v1666 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1666;
            StringConstCast = v201;
            v9 = 0x2E000000F8;
            goto LABEL_1705;
          case 829:
            v1507 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1507;
            StringConstCast = v201;
            v9 = 0x2B000000F8;
            goto LABEL_1705;
          case 830:
            v1900 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1900;
            StringConstCast = v201;
            v9 = 0x7000000F8;
LABEL_1705:
            *(double *)v201 = *(double *)&v9;
            *(_QWORD *)(v201 + 24) = 0;
            *(_QWORD *)(v201 + 16) = *(v11 - 1);
            goto LABEL_1787;
          case 831:
            v1738 = v26;
            v1739 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1738;
            StringConstCast = v1739;
            v9 = 0x7000000F8;
            *(_QWORD *)v1739 = 0x7000000F8;
            *(_QWORD *)(v1739 + 24) = 0;
            *(_QWORD *)(v1739 + 16) = *(v11 - 1);
            *(_QWORD *)(v1739 + 32) = *v11;
            *(_BYTE *)(v1739 + 40) = 1;
            break;
          case 832:
            v1913 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            *(_QWORD *)StringConstCast = 0x7000000F8;
            *(_QWORD *)(StringConstCast + 24) = 0;
            *(_QWORD *)(StringConstCast + 16) = *(v11 - 2);
            v1914 = makeDefElem((uint64_t)"from", *v11, *v12, COERCE_DOUBLE(0x7000000F8));
            *(double *)&v9 = list_make1_impl(226, v1914);
            v26 = v1913;
            *(_QWORD *)(StringConstCast + 32) = v1915;
            break;
          case 833:
            v1632 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            *(_QWORD *)StringConstCast = 0x7000000F8;
            *(_QWORD *)(StringConstCast + 24) = 0;
            *(_QWORD *)(StringConstCast + 16) = *(v11 - 2);
            v1633 = makeDefElem((uint64_t)"from", *v11, *v12, COERCE_DOUBLE(0x7000000F8));
            *(double *)&v9 = list_make1_impl(226, v1633);
            v26 = v1632;
            *(_QWORD *)(StringConstCast + 32) = v1634;
            *(_BYTE *)(StringConstCast + 40) = 1;
            break;
          case 840:
          case 844:
          case 1366:
            v32 = v26;
            v50 = pstrdup((const char *)*v11);
            DefElem = makeString((uint64_t)v50);
            goto LABEL_1777;
          case 853:
            v1619 = v26;
            v1620 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1619;
            StringConstCast = v1620;
            *(_DWORD *)v1620 = 310;
            *(_QWORD *)(v1620 + 8) = *(v11 - 4);
            *(_QWORD *)(v1620 + 16) = 0;
            *(_QWORD *)(v1620 + 24) = *v11;
            *(_QWORD *)(v1620 + 32) = 0;
            *(_BYTE *)(v1620 + 40) = 1;
            *(_BYTE *)(v1620 + 41) = *((_BYTE *)v11 - 8);
            break;
          case 854:
            v1875 = v26;
            v1644 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1875;
            StringConstCast = v1644;
            *(_DWORD *)v1644 = 310;
            *(_QWORD *)(v1644 + 8) = *(v11 - 6);
            *(_QWORD *)(v1644 + 16) = 0;
            *(_QWORD *)(v1644 + 24) = *(v11 - 2);
            *(_QWORD *)(v1644 + 32) = *v11;
            *(_BYTE *)(v1644 + 40) = 0;
            goto LABEL_1671;
          case 855:
            v1643 = v26;
            v1644 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1643;
            StringConstCast = v1644;
            *(_DWORD *)v1644 = 310;
            *(_QWORD *)(v1644 + 8) = *(v11 - 6);
            *(_QWORD *)(v1644 + 16) = 0;
            *(_QWORD *)(v1644 + 24) = *(v11 - 2);
            *(_QWORD *)(v1644 + 32) = *v11;
            *(_BYTE *)(v1644 + 40) = 1;
LABEL_1671:
            *(_BYTE *)(v1644 + 41) = *((_BYTE *)v11 - 24);
            break;
          case 856:
            v1885 = v26;
            v1886 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1885;
            StringConstCast = v1886;
            *(_DWORD *)v1886 = 310;
            *(_QWORD *)(v1886 + 8) = *(v11 - 5);
            *(_QWORD *)(v1886 + 16) = *(v11 - 2);
            *(_QWORD *)(v1886 + 24) = *v11;
            *(_QWORD *)(v1886 + 32) = 0;
            *(_WORD *)(v1886 + 40) = 0;
            break;
          case 859:
            v1783 = v26;
            v1342 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1783;
            StringConstCast = v1342;
            *(_DWORD *)v1342 = 291;
            *(_QWORD *)(v1342 + 8) = *(v11 - 9);
            *(_BYTE *)(v1342 + 48) = *((_BYTE *)v11 - 64);
            *(_QWORD *)(v1342 + 32) = *(v11 - 5);
            *(_QWORD *)(v1342 + 24) = *(v11 - 3);
            *(_QWORD *)(v1342 + 16) = *(v11 - 2);
            goto LABEL_1536;
          case 862:
            v2038 = v24;
            v333 = v2108;
            v334 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            *(_DWORD *)StringConstCast = 380;
            v335 = *v333;
            v24 = v2038;
            v336 = MemoryContextAllocZeroAligned(v335, 0x20uLL);
            v26 = v334;
            *(_DWORD *)v336 = 378;
            *(_QWORD *)(v336 + 8) = *(v11 - 2);
            *(_QWORD *)(v336 + 16) = 0;
            *(_DWORD *)(StringConstCast + 4) = 1;
            *(_QWORD *)(StringConstCast + 8) = v336;
            *(_DWORD *)(StringConstCast + 16) = *((_DWORD *)v11 - 6);
            *(_QWORD *)(StringConstCast + 24) = *(v11 - 1);
            break;
          case 863:
            v1878 = v26;
            v1879 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1878;
            StringConstCast = v1879;
            v9 = 0x10000017CLL;
            *(_QWORD *)v1879 = 0x10000017CLL;
            *(_QWORD *)(v1879 + 8) = *(v11 - 2);
            *(_DWORD *)(v1879 + 16) = *((_DWORD *)v11 - 6);
            *(_QWORD *)(v1879 + 24) = *(v11 - 1);
            break;
          case 864:
            v553 = v26;
            v554 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v553;
            StringConstCast = v554;
            v9 = 0x20000017CLL;
            *(_QWORD *)v554 = 0x20000017CLL;
            *(_QWORD *)(v554 + 8) = *v11;
            *(_DWORD *)(v554 + 16) = *((_DWORD *)v11 - 2);
            break;
          case 865:
            v385 = v26;
            v386 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v385;
            StringConstCast = v386;
            v9 = 0x20000017CLL;
            *(_QWORD *)v386 = 0x20000017CLL;
            *(_QWORD *)(v386 + 8) = *v11;
            *(_DWORD *)(v386 + 16) = *((_DWORD *)v11 - 8);
LABEL_1503:
            *(_QWORD *)(v386 + 32) = *(v11 - 2);
            break;
          case 866:
            v1341 = v26;
            v1342 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1341;
            StringConstCast = v1342;
            v9 = 0x30000017CLL;
            *(_QWORD *)v1342 = 0x30000017CLL;
LABEL_1536:
            *(_QWORD *)(v1342 + 40) = *v11;
            break;
          case 874:
            v890 = v26;
            if (errstart(18, 0))
            {
              errcode();
              errmsg("RECHECK is no longer required", v891, v892, v893, v894, v895, v896, v897, v1990);
              errhint("Update your data type.", v898, v899, v900, v901, v902, v903, v904, v1991);
              scanner_errposition(*v12, v2107);
              errfinish("gram.y", 6177, (uint64_t)"base_yyparse");
            }
            StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 1;
            v26 = v890;
            break;
          case 876:
            v1261 = v26;
            v175 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1261;
            StringConstCast = v175;
            v338 = 292;
            goto LABEL_985;
          case 877:
            v758 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v758;
            StringConstCast = v201;
            *(_DWORD *)v201 = 293;
            *(_QWORD *)(v201 + 8) = *(v11 - 4);
            *(_QWORD *)(v201 + 16) = *(v11 - 2);
            *(_BYTE *)(v201 + 24) = 0;
            goto LABEL_1787;
          case 878:
            v1834 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1834;
            StringConstCast = v201;
            *(_DWORD *)v201 = 293;
            *(_QWORD *)(v201 + 8) = *(v11 - 4);
            *(_QWORD *)(v201 + 16) = *(v11 - 2);
            *(_BYTE *)(v201 + 24) = 1;
            goto LABEL_1787;
          case 881:
            v1849 = v26;
            v790 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1849;
            StringConstCast = v790;
            v9 = 0x10000017CLL;
            goto LABEL_1619;
          case 882:
            v789 = v26;
            v790 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v789;
            StringConstCast = v790;
            v9 = 0x20000017CLL;
LABEL_1619:
            *(double *)v790 = *(double *)&v9;
            *(_DWORD *)(v790 + 16) = *((_DWORD *)v11 - 6);
            *(_QWORD *)(v790 + 32) = *(v11 - 1);
            break;
          case 883:
            v1418 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 249;
            v1419 = makeString(*(v11 - 1));
            v1420 = lcons(v1419, *(v11 - 3));
            *(double *)&v9 = list_make1_impl(226, v1420);
            v26 = v1418;
            *(_QWORD *)(StringConstCast + 8) = v1421;
            v1422 = 24;
            goto LABEL_1316;
          case 884:
            v601 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 249;
            v602 = makeString(*(v11 - 1));
            v603 = lcons(v602, *(v11 - 3));
            *(double *)&v9 = list_make1_impl(226, v603);
            v26 = v601;
            *(_QWORD *)(StringConstCast + 8) = v604;
            v605 = 24;
            goto LABEL_987;
          case 885:
            v1588 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 249;
            v1589 = makeString(*(v11 - 1));
            v1590 = lcons(v1589, *(v11 - 3));
            *(double *)&v9 = list_make1_impl(226, v1590);
            v26 = v1588;
            *(_QWORD *)(StringConstCast + 8) = v1591;
            v1422 = 26;
LABEL_1316:
            *(_DWORD *)(StringConstCast + 16) = v1422;
            goto LABEL_1317;
          case 886:
            v1262 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 249;
            v1263 = makeString(*(v11 - 1));
            v1264 = lcons(v1263, *(v11 - 3));
            *(double *)&v9 = list_make1_impl(226, v1264);
            v26 = v1262;
            *(_QWORD *)(StringConstCast + 8) = v1265;
            v605 = 26;
LABEL_987:
            *(_DWORD *)(StringConstCast + 16) = v605;
            goto LABEL_988;
          case 887:
            v271 = v26;
            v272 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v271;
            StringConstCast = v272;
            *(_DWORD *)v272 = 305;
            *(_QWORD *)(v272 + 8) = *(v11 - 1);
            *(_DWORD *)(v272 + 16) = *(_DWORD *)v11;
            break;
          case 888:
            v337 = v26;
            v175 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v337;
            StringConstCast = v175;
            v338 = 306;
LABEL_985:
            *(_DWORD *)v175 = v338;
            goto LABEL_1690;
          case 889:
          case 891:
            v71 = v26;
            v72 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v71;
            StringConstCast = v72;
            *(_DWORD *)v72 = 249;
            v73 = *((_DWORD *)v11 - 8);
            goto LABEL_785;
          case 890:
          case 892:
            v93 = v26;
            v72 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v93;
            StringConstCast = v72;
            *(_DWORD *)v72 = 249;
            v94 = *((_DWORD *)v11 - 4);
            goto LABEL_1048;
          case 893:
            v2090 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 249;
            *(_DWORD *)(StringConstCast + 16) = *((_DWORD *)v11 - 8);
            v1184 = v24;
            v1185 = *(v11 - 1);
            v1186 = makeString(*(v11 - 3));
            v1187 = v1185;
            v24 = v1184;
            v1188 = lappend(v1187, v1186);
            *(double *)&v9 = list_make1_impl(226, v1188);
            v26 = v2090;
            *(_QWORD *)(StringConstCast + 8) = v1189;
LABEL_1317:
            *(_DWORD *)(StringConstCast + 20) = *(_DWORD *)v11;
            *(_WORD *)(StringConstCast + 24) = 0;
            break;
          case 894:
            v2077 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 249;
            *(_DWORD *)(StringConstCast + 16) = *((_DWORD *)v11 - 12);
            v467 = v24;
            v468 = *(v11 - 1);
            v469 = makeString(*(v11 - 3));
            v470 = v468;
            v24 = v467;
            v471 = lappend(v470, v469);
            *(double *)&v9 = list_make1_impl(226, v471);
            v26 = v2077;
            *(_QWORD *)(StringConstCast + 8) = v472;
LABEL_988:
            *(_DWORD *)(StringConstCast + 20) = *(_DWORD *)v11;
            *(_WORD *)(StringConstCast + 24) = 1;
            break;
          case 895:
            v1300 = v26;
            v72 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1300;
            StringConstCast = v72;
            *(_DWORD *)v72 = 249;
            v94 = 47;
            goto LABEL_1048;
          case 896:
            v1018 = v26;
            v72 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1018;
            StringConstCast = v72;
            *(_DWORD *)v72 = 249;
            v73 = 47;
            goto LABEL_785;
          case 897:
            v305 = v26;
            v72 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v305;
            StringConstCast = v72;
            *(_DWORD *)v72 = 249;
            v94 = 12;
LABEL_1048:
            *(_DWORD *)(v72 + 16) = v94;
            *(_BYTE *)(v72 + 24) = 0;
            goto LABEL_1049;
          case 898:
            v512 = v26;
            v72 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v512;
            StringConstCast = v72;
            *(_DWORD *)v72 = 249;
            v73 = 12;
LABEL_785:
            *(_DWORD *)(v72 + 16) = v73;
            *(_BYTE *)(v72 + 24) = 1;
LABEL_1049:
            *(_QWORD *)(v72 + 8) = *(v11 - 1);
            *(_DWORD *)(v72 + 20) = *(_DWORD *)v11;
            *(_BYTE *)(v72 + 25) = 0;
            break;
          case 899:
            v324 = v26;
            v325 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v324;
            StringConstCast = v325;
            *(_DWORD *)v325 = 249;
            *(_DWORD *)(v325 + 16) = 20;
            *(_BYTE *)(v325 + 24) = 0;
            *(_QWORD *)(v325 + 8) = *(v11 - 1);
            *(_DWORD *)(v325 + 20) = *(_DWORD *)v11;
            *(_BYTE *)(v325 + 25) = 1;
            break;
          case 900:
            v1290 = v26;
            v1291 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1290;
            StringConstCast = v1291;
            *(_DWORD *)v1291 = 249;
            *(_DWORD *)(v1291 + 16) = 20;
            *(_BYTE *)(v1291 + 24) = 1;
            *(_QWORD *)(v1291 + 8) = *(v11 - 1);
            *(_DWORD *)(v1291 + 20) = *(_DWORD *)v11;
            *(_BYTE *)(v1291 + 25) = 1;
            break;
          case 901:
          case 959:
          case 997:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x27;
            break;
          case 902:
          case 957:
          case 996:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x23;
            break;
          case 903:
          case 960:
          case 998:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x31;
            break;
          case 904:
          case 961:
          case 999:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x17;
            break;
          case 905:
          case 956:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x14;
            break;
          case 906:
          case 964:
          case 995:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x12;
            break;
          case 907:
          case 962:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 7;
            break;
          case 909:
          case 958:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x25;
            break;
          case 910:
          case 967:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x2D;
            break;
          case 911:
          case 966:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x2C;
            break;
          case 912:
          case 968:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x2E;
            break;
          case 913:
          case 965:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x2B;
            break;
          case 915:
          case 971:
          case 1001:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0xE;
            break;
          case 916:
          case 972:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0xF;
            break;
          case 918:
          case 975:
          case 1003:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x1D;
            break;
          case 919:
          case 977:
          case 1005:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x22;
            break;
          case 920:
          case 978:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x11;
            break;
          case 921:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x1B;
            break;
          case 922:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x21;
            break;
          case 923:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x2A;
            break;
          case 932:
            v1190 = v26;
            v1191 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1190;
            StringConstCast = v1191;
            *(_DWORD *)v1191 = 250;
            *(_QWORD *)(v1191 + 8) = *(v11 - 2);
            *(_BYTE *)(v1191 + 16) = *((_BYTE *)v11 - 8);
            *(_DWORD *)(v1191 + 20) = *(_DWORD *)v11;
            break;
          case 936:
            v287 = v26;
            v175 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v287;
            StringConstCast = v175;
            *(_DWORD *)v175 = 251;
            *(_DWORD *)(v175 + 4) = *((_DWORD *)v11 - 6);
            goto LABEL_1690;
          case 937:
            v63 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            *(_DWORD *)StringConstCast = 251;
            *(_DWORD *)(StringConstCast + 4) = *((_DWORD *)v11 - 6);
            v64 = makeString(*(v11 - 2));
            goto LABEL_1724;
          case 938:
            v1665 = v26;
            v175 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1665;
            StringConstCast = v175;
            v9 = 0x2F000000FBLL;
            goto LABEL_1689;
          case 939:
            v387 = v26;
            v175 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v387;
            StringConstCast = v175;
            v9 = 0xC000000FBLL;
            goto LABEL_1689;
          case 940:
            v638 = v26;
            v175 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v638;
            StringConstCast = v175;
            v9 = 0x1000000FBLL;
            goto LABEL_1689;
          case 941:
            v555 = v26;
            v175 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v555;
            StringConstCast = v175;
            v9 = 0x13000000FBLL;
            goto LABEL_1689;
          case 942:
            v1891 = v26;
            v175 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1891;
            StringConstCast = v175;
            v9 = 0x19000000FBLL;
            goto LABEL_1689;
          case 943:
            v2074 = v26;
            v355 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            StringConstCast = (uint64_t)v355;
            v356 = 0x26000000FBLL;
            goto LABEL_1246;
          case 944:
            v2078 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            *(_QWORD *)StringConstCast = 0xD000000FBLL;
            v513 = v24;
            v514 = makeTypeNameFromNameList(*(v11 - 2), COERCE_DOUBLE(0xD000000FBLL));
            v515 = *(v11 - 5);
            goto LABEL_1302;
          case 945:
            v2074 = v26;
            v355 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            StringConstCast = (uint64_t)v355;
            v356 = 0x1B000000FBLL;
            goto LABEL_1246;
          case 946:
            v658 = v26;
            v175 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v658;
            StringConstCast = v175;
            v9 = 0x1C000000FBLL;
            goto LABEL_1689;
          case 947:
            v1853 = v26;
            v175 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1853;
            StringConstCast = v175;
            v9 = 0x20000000FBLL;
            goto LABEL_1689;
          case 948:
            v2074 = v26;
            v355 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            StringConstCast = (uint64_t)v355;
            v356 = 0x21000000FBLL;
            goto LABEL_1246;
          case 949:
            v2078 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            *(_QWORD *)StringConstCast = 0x29000000FBLL;
            v513 = v24;
            v514 = *(v11 - 4);
            v515 = *(v11 - 2);
LABEL_1302:
            v1571 = makeString(v515);
            v1572 = v514;
            v24 = v513;
            *(double *)&v9 = list_make2_impl(226, v1572, v1571);
            v26 = v2078;
            goto LABEL_1725;
          case 950:
            v2074 = v26;
            v355 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            StringConstCast = (uint64_t)v355;
            v356 = 0x2A000000FBLL;
LABEL_1246:
            *(_QWORD *)v355 = v356;
            v1508 = v24;
            v1509 = *(v11 - 2);
            v1510 = makeString(*(v11 - 4));
            v1511 = v1509;
            v24 = v1508;
            v64 = lappend(v1511, v1510);
            v26 = v2074;
            goto LABEL_1725;
          case 951:
            v63 = v26;
            v458 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            StringConstCast = (uint64_t)v458;
            v459 = 0x18000000FBLL;
            goto LABEL_1487;
          case 952:
            v63 = v26;
            v458 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            StringConstCast = (uint64_t)v458;
            v459 = 0x1A000000FBLL;
LABEL_1487:
            *(_QWORD *)v458 = v459;
            v1740 = makeString(*(v11 - 2));
            v64 = lcons(v1740, *(v11 - 4));
            goto LABEL_1724;
          case 953:
            v887 = v26;
            v175 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v887;
            StringConstCast = v175;
            v9 = 0x16000000FBLL;
LABEL_1689:
            *(double *)v175 = *(double *)&v9;
LABEL_1690:
            v751 = (const char *)*(v11 - 2);
            goto LABEL_1691;
          case 954:
            v63 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            *(_QWORD *)StringConstCast = 0x5000000FBLL;
            *(double *)&v9 = list_make2_impl(226, *(v11 - 5), *(v11 - 3));
            goto LABEL_1724;
          case 955:
          case 994:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 6;
            break;
          case 970:
          case 1000:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 9;
            break;
          case 974:
          case 1002:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x15;
            break;
          case 976:
          case 1004:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x1F;
            break;
          case 979:
          case 1006:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x24;
            break;
          case 980:
          case 1007:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x28;
            break;
          case 983:
            v1316 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1316;
            StringConstCast = v70;
            *(_DWORD *)v70 = 322;
            *(_QWORD *)(v70 + 16) = *(v11 - 5);
            v972 = *((_DWORD *)v11 - 6);
            goto LABEL_1715;
          case 984:
            v307 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 322;
            *(_QWORD *)(StringConstCast + 16) = *(v11 - 5);
            *(_DWORD *)(StringConstCast + 4) = *((_DWORD *)v11 - 6);
            v308 = makeString(*(v11 - 2));
            v26 = v307;
            *(_QWORD *)(StringConstCast + 8) = v308;
            *(_QWORD *)(StringConstCast + 24) = *v11;
            break;
          case 985:
            v1192 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1192;
            StringConstCast = v70;
            *(_DWORD *)v70 = 322;
            *(_QWORD *)(v70 + 16) = *(v11 - 5);
            v972 = 47;
            goto LABEL_1715;
          case 986:
            v1894 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1894;
            StringConstCast = v70;
            *(_DWORD *)v70 = 322;
            *(_QWORD *)(v70 + 16) = *(v11 - 5);
            v972 = 12;
            goto LABEL_1715;
          case 987:
            v971 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v971;
            StringConstCast = v70;
            *(_DWORD *)v70 = 322;
            *(_QWORD *)(v70 + 16) = *(v11 - 5);
            v972 = 1;
            goto LABEL_1715;
          case 988:
            v1880 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1880;
            StringConstCast = v70;
            *(_DWORD *)v70 = 322;
            *(_QWORD *)(v70 + 16) = *(v11 - 5);
            v972 = 19;
            goto LABEL_1715;
          case 989:
            v973 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v973;
            StringConstCast = v70;
            *(_DWORD *)v70 = 322;
            *(_QWORD *)(v70 + 16) = *(v11 - 6);
            v972 = 22;
            goto LABEL_1715;
          case 990:
            v1904 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1904;
            StringConstCast = v70;
            *(_DWORD *)v70 = 322;
            *(_QWORD *)(v70 + 16) = *(v11 - 5);
            v972 = 28;
LABEL_1715:
            *(_DWORD *)(v70 + 4) = v972;
            goto LABEL_1716;
          case 991:
            v1317 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1317;
            StringConstCast = v70;
            *(_DWORD *)v70 = 322;
            *(_QWORD *)(v70 + 16) = *(v11 - 5);
            *(_DWORD *)(v70 + 4) = 32;
LABEL_1716:
            *(_QWORD *)(v70 + 8) = *(v11 - 2);
            goto LABEL_1722;
          case 1010:
            StringConstCast = *v11;
            *(_BYTE *)(*v11 + 24) = 0;
            break;
          case 1011:
            StringConstCast = *v11;
            *(_BYTE *)(*v11 + 24) = 1;
            break;
          case 1012:
          case 1013:
          case 1014:
          case 1022:
            v40 = v26;
            v41 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v40;
            StringConstCast = v41;
            *(_DWORD *)v41 = 252;
            v42 = *v11;
            *(_DWORD *)(v41 + 4) = 0;
            goto LABEL_363;
          case 1015:
          case 1025:
            v158 = v26;
            v41 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v158;
            StringConstCast = v41;
            *(_DWORD *)v41 = 252;
            v42 = *v11;
            v151 = 1;
            *(_DWORD *)(v41 + 4) = 1;
            goto LABEL_364;
          case 1016:
            v388 = v26;
            v41 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v388;
            StringConstCast = v41;
            *(_DWORD *)v41 = 252;
            v42 = *v11;
            *(_DWORD *)(v41 + 4) = 2;
LABEL_363:
            v151 = 1;
            goto LABEL_364;
          case 1017:
            v1193 = v26;
            v41 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1193;
            StringConstCast = v41;
            *(_DWORD *)v41 = 252;
            v42 = *v11;
            *(_DWORD *)(v41 + 4) = 2;
            v151 = -1;
            goto LABEL_364;
          case 1018:
            v1901 = v26;
            v77 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1901;
            StringConstCast = v77;
            *(_DWORD *)v77 = 252;
            *(_QWORD *)(v77 + 16) = *v11;
            v567 = 2;
            goto LABEL_1707;
          case 1019:
            v1436 = v26;
            v77 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1436;
            StringConstCast = v77;
            *(_DWORD *)v77 = 252;
            *(_QWORD *)(v77 + 16) = *v11;
            v567 = 3;
            goto LABEL_1707;
          case 1020:
          case 1023:
            v76 = v26;
            v77 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v76;
            StringConstCast = v77;
            *(_DWORD *)v77 = 252;
            *(_QWORD *)(v77 + 16) = *v11;
            *(_DWORD *)(v77 + 4) = 0;
            goto LABEL_1708;
          case 1021:
          case 1024:
            v150 = v26;
            v41 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v150;
            StringConstCast = v41;
            *(_DWORD *)v41 = 252;
            v42 = *v11;
            *(_DWORD *)(v41 + 4) = 0;
            v151 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_364;
          case 1026:
            v566 = v26;
            v77 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v566;
            StringConstCast = v77;
            *(_DWORD *)v77 = 252;
            *(_QWORD *)(v77 + 16) = *v11;
            v567 = 1;
LABEL_1707:
            *(_DWORD *)(v77 + 4) = v567;
LABEL_1708:
            *(_QWORD *)(v77 + 8) = *((int *)v11 - 4);
            break;
          case 1027:
            v1364 = v26;
            v41 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1364;
            StringConstCast = v41;
            *(_DWORD *)v41 = 252;
            v42 = *v11;
            *(_DWORD *)(v41 + 4) = 1;
            v151 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_364:
            *(_QWORD *)(v41 + 8) = v151;
            *(_QWORD *)(v41 + 16) = v42;
            break;
          case 1032:
            v306 = v26;
            v183 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v306;
            StringConstCast = v183;
            *(_DWORD *)v183 = 241;
            *(_BYTE *)(v183 + 4) = 1;
            *(_QWORD *)(v183 + 24) = *(v11 - 5);
            *(_DWORD *)(v183 + 8) = *(_DWORD *)*(v11 - 3);
            *(_DWORD *)(v183 + 12) = *(_DWORD *)(*(v11 - 3) + 4);
            *(_QWORD *)(v183 + 16) = *(_QWORD *)(*(v11 - 3) + 8);
            goto LABEL_1656;
          case 1033:
            v1512 = v26;
            v668 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1512;
            StringConstCast = v668;
            *(_DWORD *)v668 = 241;
            *(_BYTE *)(v668 + 4) = 0;
            *(_BYTE *)(v668 + 40) = 0;
            goto LABEL_1248;
          case 1034:
            v667 = v26;
            v668 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v667;
            StringConstCast = v668;
            *(_DWORD *)v668 = 241;
            *(_BYTE *)(v668 + 4) = 0;
            *(_BYTE *)(v668 + 40) = 1;
LABEL_1248:
            *(_QWORD *)(v668 + 24) = *(v11 - 5);
            *(_DWORD *)(v668 + 8) = *(_DWORD *)*(v11 - 3);
            *(_DWORD *)(v668 + 12) = *(_DWORD *)(*(v11 - 3) + 4);
            *(_QWORD *)(v668 + 16) = *(_QWORD *)(*(v11 - 3) + 8);
            goto LABEL_1249;
          case 1038:
          case 1039:
            v32 = v26;
            v80 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            *(_DWORD *)v80 = 379;
            *(_QWORD *)(v80 + 8) = 0;
            *(_QWORD *)(v80 + 16) = *(v11 - 1);
            *(double *)&v9 = list_make1_impl(226, v80);
            goto LABEL_1777;
          case 1042:
          case 1043:
          case 1044:
            v63 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            *(_DWORD *)StringConstCast = 379;
            v64 = (unint64_t)pstrdup((const char *)*(v11 - 1));
LABEL_1724:
            v26 = v63;
LABEL_1725:
            *(_QWORD *)(StringConstCast + 8) = v64;
            *(_QWORD *)(StringConstCast + 16) = *v11;
            break;
          case 1045:
            v1573 = v26;
            v175 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1573;
            StringConstCast = v175;
            v1574 = 379;
            goto LABEL_1347;
          case 1046:
          case 1047:
            v112 = v26;
            v52 = palloc(0x10uLL);
            v26 = v112;
            StringConstCast = v52;
            v9 = 0x2700000000;
            goto LABEL_1754;
          case 1048:
            v657 = v26;
            v52 = palloc(0x10uLL);
            v26 = v657;
            StringConstCast = v52;
            v9 = 0x2300000000;
            goto LABEL_1754;
          case 1049:
            v707 = v26;
            v52 = palloc(0x10uLL);
            v26 = v707;
            StringConstCast = v52;
            v9 = 0x1000000000;
            goto LABEL_1754;
          case 1050:
            v1592 = v26;
            v52 = palloc(0x10uLL);
            v26 = v1592;
            StringConstCast = v52;
            v9 = 0x1100000000;
            goto LABEL_1754;
          case 1051:
            v427 = v26;
            v52 = palloc(0x10uLL);
            v26 = v427;
            StringConstCast = v52;
            v9 = 0x1300000000;
            goto LABEL_1754;
          case 1052:
            v1866 = v26;
            v52 = palloc(0x10uLL);
            v26 = v1866;
            StringConstCast = v52;
            v9 = 0x1C00000000;
            goto LABEL_1754;
          case 1053:
            v1873 = v26;
            v52 = palloc(0x10uLL);
            v26 = v1873;
            StringConstCast = v52;
            v9 = 0x2000000000;
            goto LABEL_1754;
          case 1054:
            v568 = v26;
            v52 = palloc(0x10uLL);
            v26 = v568;
            StringConstCast = v52;
            v9 = 0x900000000;
            goto LABEL_1754;
          case 1055:
            v1777 = v26;
            v52 = palloc(0x10uLL);
            v26 = v1777;
            StringConstCast = v52;
            v9 = 0xC00000000;
            goto LABEL_1754;
          case 1056:
            v1612 = v26;
            v52 = palloc(0x10uLL);
            v26 = v1612;
            StringConstCast = v52;
            v9 = 0x1500000000;
            goto LABEL_1754;
          case 1057:
            v1741 = v26;
            v52 = palloc(0x10uLL);
            v26 = v1741;
            StringConstCast = v52;
            v9 = 0x1600000000;
            goto LABEL_1754;
          case 1058:
            v473 = v26;
            v52 = palloc(0x10uLL);
            v26 = v473;
            StringConstCast = v52;
            v9 = 0x2200000000;
            goto LABEL_1754;
          case 1059:
            v1835 = v26;
            v52 = palloc(0x10uLL);
            v26 = v1835;
            StringConstCast = v52;
            v9 = 0x2800000000;
            goto LABEL_1754;
          case 1060:
            v1830 = v26;
            v52 = palloc(0x10uLL);
            v26 = v1830;
            StringConstCast = v52;
            v9 = 0x2F00000000;
            goto LABEL_1754;
          case 1061:
            v449 = v26;
            v52 = palloc(0x10uLL);
            v26 = v449;
            StringConstCast = v52;
            v9 = 0x2700000001;
            goto LABEL_1754;
          case 1062:
            v1735 = v26;
            v52 = palloc(0x10uLL);
            v26 = v1735;
            StringConstCast = v52;
            v9 = 0x2300000001;
            goto LABEL_1754;
          case 1063:
            v1638 = v26;
            v52 = palloc(0x10uLL);
            v26 = v1638;
            StringConstCast = v52;
            v9 = 0x1300000001;
            goto LABEL_1754;
          case 1064:
            v1861 = v26;
            v52 = palloc(0x10uLL);
            v26 = v1861;
            StringConstCast = v52;
            v9 = 0x1C00000001;
            goto LABEL_1754;
          case 1065:
            v1039 = v26;
            v52 = palloc(0x10uLL);
            v26 = v1039;
            StringConstCast = v52;
            v9 = 0x2000000001;
LABEL_1754:
            *(double *)v52 = *(double *)&v9;
            goto LABEL_1755;
          case 1070:
          case 1075:
          case 1096:
          case 1098:
          case 1129:
          case 1244:
          case 1331:
          case 1433:
          case 1469:
          case 1551:
          case 1553:
          case 1555:
          case 1557:
          case 1638:
          case 1706:
            StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 1;
            break;
          case 1071:
          case 1076:
          case 1097:
          case 1099:
          case 1130:
          case 1245:
          case 1332:
          case 1434:
          case 1435:
          case 1470:
          case 1471:
          case 1552:
          case 1554:
          case 1556:
          case 1558:
            StringConstCast &= 0xFFFFFFFFFFFFFF00;
            break;
          case 1072:
            v1887 = v26;
            v1888 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1887;
            StringConstCast = v1888;
            *(_DWORD *)v1888 = 242;
            *(_BYTE *)(v1888 + 24) = 1;
            *(_QWORD *)(v1888 + 8) = *(v11 - 4);
            *(_QWORD *)(v1888 + 16) = *(v11 - 2);
            *(_BYTE *)(v1888 + 25) = *((_BYTE *)v11 - 8);
            *(_QWORD *)(v1888 + 32) = *v11;
            break;
          case 1073:
            v1881 = v26;
            v716 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1881;
            StringConstCast = v716;
            *(_DWORD *)v716 = 242;
            *(_WORD *)(v716 + 24) = 0;
            goto LABEL_1678;
          case 1074:
            v715 = v26;
            v716 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v715;
            StringConstCast = v716;
            *(_DWORD *)v716 = 242;
            *(_WORD *)(v716 + 24) = 256;
LABEL_1678:
            *(_QWORD *)(v716 + 8) = *(v11 - 4);
            *(_QWORD *)(v716 + 16) = *(v11 - 2);
            *(_DWORD *)(v716 + 40) = *(_DWORD *)v11;
            break;
          case 1077:
          case 1100:
          case 1102:
          case 1115:
          case 1117:
          case 1156:
          case 1157:
          case 1160:
          case 1196:
          case 1201:
          case 1365:
          case 1367:
          case 1368:
          case 1396:
          case 1398:
          case 1427:
          case 1437:
          case 1482:
          case 1489:
          case 1535:
          case 1546:
          case 1549:
          case 1564:
          case 1582:
          case 1585:
          case 2312:
            StringConstCast = *v11;
            break;
          case 1078:
          case 1081:
          case 1101:
          case 1112:
          case 1116:
          case 1118:
          case 1132:
          case 1142:
          case 1202:
          case 1397:
          case 1417:
          case 1428:
          case 1438:
          case 1468:
          case 1483:
          case 1536:
          case 1550:
          case 1560:
          case 1565:
          case 1586:
            StringConstCast = 0;
            break;
          case 1079:
            v1613 = v26;
            v175 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1613;
            StringConstCast = v175;
            v1574 = 243;
LABEL_1347:
            *(_DWORD *)v175 = v1574;
            v751 = (const char *)*(v11 - 1);
LABEL_1691:
            *(_QWORD *)(v175 + 8) = v751;
            *(_QWORD *)(v175 + 16) = *v11;
            break;
          case 1082:
            v44 = *v11;
            v45 = *(v12 - 2);
            v43 = "schemas";
            goto LABEL_1598;
          case 1083:
          case 1084:
            v44 = *v11;
            v45 = *(v12 - 2);
            v43 = "roles";
            goto LABEL_1598;
          case 1085:
            v1698 = v26;
            v183 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1698;
            StringConstCast = v183;
            *(_DWORD *)v183 = 241;
            *(_BYTE *)(v183 + 4) = 1;
            *(_QWORD *)(v183 + 24) = *(v11 - 5);
            *(_DWORD *)(v183 + 8) = 2;
            *(_DWORD *)(v183 + 12) = *((_DWORD *)v11 - 6);
            *(_QWORD *)(v183 + 16) = 0;
LABEL_1656:
            *(_QWORD *)(v183 + 32) = *(v11 - 1);
            *(_BYTE *)(v183 + 40) = *(_BYTE *)v11;
            break;
          case 1086:
            v1437 = v26;
            v668 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1437;
            StringConstCast = v668;
            *(_DWORD *)v668 = 241;
            *(_BYTE *)(v668 + 4) = 0;
            *(_BYTE *)(v668 + 40) = 0;
            *(_QWORD *)(v668 + 24) = *(v11 - 5);
            *(_DWORD *)(v668 + 8) = 2;
            *(_DWORD *)(v668 + 12) = *((_DWORD *)v11 - 6);
            *(_QWORD *)(v668 + 16) = 0;
LABEL_1249:
            *(_QWORD *)(v668 + 32) = *(v11 - 1);
            *(_DWORD *)(v668 + 44) = *(_DWORD *)v11;
            break;
          case 1087:
            v1831 = v26;
            v1832 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1831;
            StringConstCast = v1832;
            *(_DWORD *)v1832 = 241;
            *(_BYTE *)(v1832 + 4) = 0;
            *(_BYTE *)(v1832 + 40) = 1;
            *(_QWORD *)(v1832 + 24) = *(v11 - 5);
            *(_DWORD *)(v1832 + 8) = 2;
            *(_DWORD *)(v1832 + 12) = *((_DWORD *)v11 - 6);
            *(_QWORD *)(v1832 + 16) = 0;
            *(_QWORD *)(v1832 + 32) = *(v11 - 1);
            *(_DWORD *)(v1832 + 44) = *(_DWORD *)v11;
            break;
          case 1088:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x27;
            break;
          case 1089:
          case 1090:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x13;
            break;
          case 1091:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x23;
            break;
          case 1092:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x2F;
            break;
          case 1093:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x22;
            break;
          case 1094:
            v1699 = v26;
            v1700 = MemoryContextAllocZeroAligned(*v2108, 0x78uLL);
            v26 = v1699;
            StringConstCast = v1700;
            *(_DWORD *)v1700 = 253;
            *(_BYTE *)(v1700 + 104) = *((_BYTE *)v11 - 104);
            *(_BYTE *)(v1700 + 110) = *((_BYTE *)v11 - 88);
            *(_QWORD *)(v1700 + 8) = *(v11 - 10);
            *(_QWORD *)(v1700 + 16) = *(v11 - 8);
            *(_QWORD *)(v1700 + 24) = *(v11 - 7);
            *(_QWORD *)(v1700 + 40) = *(v11 - 5);
            *(_QWORD *)(v1700 + 48) = *(v11 - 3);
            *(_QWORD *)(v1700 + 56) = *(v11 - 2);
            *(_QWORD *)(v1700 + 32) = *(v11 - 1);
            *(_QWORD *)(v1700 + 64) = *v11;
            *(_WORD *)(v1700 + 111) = 0;
            *(double *)&v9 = 0.0;
            *(_OWORD *)(v1700 + 88) = 0u;
            *(_OWORD *)(v1700 + 72) = 0u;
            *(_DWORD *)(v1700 + 105) = 0;
            *(_BYTE *)(v1700 + 109) = 0;
            break;
          case 1095:
            v1754 = v26;
            v1755 = MemoryContextAllocZeroAligned(*v2108, 0x78uLL);
            v26 = v1754;
            StringConstCast = v1755;
            *(_DWORD *)v1755 = 253;
            *(_BYTE *)(v1755 + 104) = *((_BYTE *)v11 - 128);
            *(_BYTE *)(v1755 + 110) = *((_BYTE *)v11 - 112);
            *(_QWORD *)(v1755 + 8) = *(v11 - 10);
            *(_QWORD *)(v1755 + 16) = *(v11 - 8);
            *(_QWORD *)(v1755 + 24) = *(v11 - 7);
            *(_QWORD *)(v1755 + 40) = *(v11 - 5);
            *(_QWORD *)(v1755 + 48) = *(v11 - 3);
            *(_QWORD *)(v1755 + 56) = *(v11 - 2);
            *(_QWORD *)(v1755 + 32) = *(v11 - 1);
            *(_QWORD *)(v1755 + 64) = *v11;
            *(double *)&v9 = 0.0;
            *(_OWORD *)(v1755 + 88) = 0u;
            *(_OWORD *)(v1755 + 72) = 0u;
            *(_DWORD *)(v1755 + 105) = 0;
            *(_BYTE *)(v1755 + 109) = 0;
            *(_WORD *)(v1755 + 111) = 1;
            break;
          case 1103:
            StringConstCast = (uint64_t)"btree";
            break;
          case 1106:
            v516 = v26;
            v404 = MemoryContextAllocZeroAligned(*v2108, 0x40uLL);
            v26 = v516;
            StringConstCast = v404;
            *(_DWORD *)v404 = 368;
            *(_QWORD *)(v404 + 16) = 0;
            *(_QWORD *)(v404 + 24) = 0;
            *(_QWORD *)(v404 + 8) = 0;
            *(_QWORD *)(v404 + 32) = *(v11 - 3);
            *(_QWORD *)(v404 + 40) = *(v11 - 2);
            *(_QWORD *)(v404 + 48) = 0;
            goto LABEL_453;
          case 1107:
            v403 = v26;
            v404 = MemoryContextAllocZeroAligned(*v2108, 0x40uLL);
            v26 = v403;
            StringConstCast = v404;
            *(_DWORD *)v404 = 368;
            *(_QWORD *)(v404 + 16) = 0;
            *(_QWORD *)(v404 + 24) = 0;
            *(_QWORD *)(v404 + 8) = 0;
            *(_QWORD *)(v404 + 32) = *(v11 - 4);
            *(_QWORD *)(v404 + 40) = *(v11 - 3);
            *(_QWORD *)(v404 + 48) = *(v11 - 2);
LABEL_453:
            *(_DWORD *)(v404 + 56) = *((_DWORD *)v11 - 2);
            *(_DWORD *)(v404 + 60) = *(_DWORD *)v11;
            break;
          case 1108:
            StringConstCast = *v11;
            *(_QWORD *)(*v11 + 8) = *(v11 - 1);
            break;
          case 1109:
            StringConstCast = *v11;
            *(_QWORD *)(*v11 + 16) = *(v11 - 1);
            break;
          case 1110:
            StringConstCast = *v11;
            *(_QWORD *)(*v11 + 16) = *(v11 - 2);
            break;
          case 1111:
          case 1131:
          case 1141:
          case 1419:
          case 1559:
            StringConstCast = *(v11 - 1);
            break;
          case 1119:
          case 1122:
          case 1241:
          case 1257:
          case 1263:
          case 1323:
          case 1429:
          case 1478:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 1;
            break;
          case 1120:
          case 1123:
          case 1242:
          case 1258:
          case 1430:
          case 1476:
          case 1477:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 2;
            break;
          case 1121:
          case 1124:
          case 1240:
          case 1256:
          case 1322:
          case 1324:
          case 1479:
            StringConstCast &= 0xFFFFFFFF00000000;
            break;
          case 1125:
            v1745 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1745;
            StringConstCast = v201;
            *(_DWORD *)v201 = 254;
            *(_BYTE *)(v201 + 4) = 0;
            *(_BYTE *)(v201 + 5) = *((_BYTE *)v11 - 48);
            *(_QWORD *)(v201 + 8) = *(v11 - 4);
            *(_QWORD *)(v201 + 16) = *(v11 - 3);
            goto LABEL_1494;
          case 1126:
            v1784 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            *(_DWORD *)StringConstCast = 254;
            *(_BYTE *)(StringConstCast + 4) = 0;
            *(_BYTE *)(StringConstCast + 5) = *((_BYTE *)v11 - 72);
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 7);
            *(_QWORD *)(StringConstCast + 16) = mergeTableFuncParameters(*(v11 - 6), (const void **)*(v11 - 2));
            TableFuncTypeName(*(v11 - 2));
            v26 = v1784;
            *(_QWORD *)(StringConstCast + 24) = v1785;
            *(_DWORD *)(v1785 + 48) = *(v12 - 4);
            goto LABEL_1538;
          case 1127:
            v1677 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1677;
            StringConstCast = v201;
            *(_DWORD *)v201 = 254;
            *(_BYTE *)(v201 + 4) = 0;
            goto LABEL_1423;
          case 1128:
            v1019 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1019;
            StringConstCast = v201;
            *(_DWORD *)v201 = 254;
            *(_BYTE *)(v201 + 4) = 1;
LABEL_1423:
            *(_BYTE *)(v201 + 5) = *((_BYTE *)v11 - 32);
            *(_QWORD *)(v201 + 8) = *(v11 - 2);
LABEL_1601:
            *(_QWORD *)(v201 + 16) = *(v11 - 1);
            *(_QWORD *)(v201 + 24) = 0;
            goto LABEL_1787;
          case 1137:
            v357 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 378;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 1);
            ArgTypes = extractArgTypes(*v11);
            goto LABEL_1373;
          case 1138:
            v396 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 378;
            v397 = (uint64_t)pstrdup((const char *)*v11);
            goto LABEL_387;
          case 1139:
            v396 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 378;
            v397 = *v11;
LABEL_387:
            v416 = makeString(v397);
            *(double *)&v9 = list_make1_impl(226, v416);
            goto LABEL_1650;
          case 1140:
            v396 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 378;
            v1862 = makeString(*(v11 - 1));
            v1863 = lcons(v1862, *v11);
            v417 = check_func_name(v1863, (uint64_t)v2107);
LABEL_1650:
            v26 = v396;
            *(_QWORD *)(StringConstCast + 8) = v417;
            *(_BYTE *)(StringConstCast + 24) = 1;
            break;
          case 1145:
            v359 = v26;
            v360 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v359;
            StringConstCast = v360;
            *(_DWORD *)v360 = 382;
            *(_QWORD *)(v360 + 8) = *(v11 - 1);
            *(_QWORD *)(v360 + 16) = *v11;
            v361 = *((_DWORD *)v11 - 4);
            goto LABEL_1541;
          case 1146:
            v1365 = v26;
            v360 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1365;
            StringConstCast = v360;
            *(_DWORD *)v360 = 382;
            *(_QWORD *)(v360 + 8) = *(v11 - 2);
            goto LABEL_1108;
          case 1147:
            v375 = v26;
            v360 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v375;
            StringConstCast = v360;
            *(_DWORD *)v360 = 382;
            *(_QWORD *)(v360 + 8) = *(v11 - 1);
            goto LABEL_1540;
          case 1148:
            v1040 = v26;
            v360 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1040;
            StringConstCast = v360;
            *(_DWORD *)v360 = 382;
            *(_QWORD *)(v360 + 8) = 0;
LABEL_1108:
            *(_QWORD *)(v360 + 16) = *v11;
            v361 = *((_DWORD *)v11 - 2);
            goto LABEL_1541;
          case 1149:
            v1786 = v26;
            v360 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1786;
            StringConstCast = v360;
            *(_DWORD *)v360 = 382;
            *(_QWORD *)(v360 + 8) = 0;
LABEL_1540:
            *(_QWORD *)(v360 + 16) = *v11;
            v361 = 105;
            goto LABEL_1541;
          case 1150:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x69;
            break;
          case 1151:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x6F;
            break;
          case 1152:
          case 1153:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x62;
            break;
          case 1154:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x76;
            break;
          case 1158:
            v460 = v26;
            v461 = makeString(*(v11 - 3));
            v462 = lcons(v461, *(v11 - 2));
            v464 = makeTypeNameFromNameList(v462, v463);
            v26 = v460;
            StringConstCast = v464;
            *(_BYTE *)(v464 + 21) = 1;
            goto LABEL_727;
          case 1159:
            v924 = v26;
            v925 = makeString(*(v11 - 3));
            v926 = lcons(v925, *(v11 - 2));
            v464 = makeTypeNameFromNameList(v926, v927);
            v26 = v924;
            StringConstCast = v464;
            *(_WORD *)(v464 + 20) = 257;
LABEL_727:
            *(_DWORD *)(v464 + 48) = *(v12 - 3);
            break;
          case 1161:
          case 1162:
            StringConstCast = *(v11 - 2);
LABEL_1538:
            *(_QWORD *)(StringConstCast + 32) = *v11;
            break;
          case 1163:
            StringConstCast = *v11;
            v418 = *(_DWORD *)(*v11 + 24);
            if (v418 != 105 && v418 != 118)
              base_yyparse_cold_24();
            break;
          case 1164:
            v32 = v26;
            v1599 = makeInteger(-1);
            *(double *)&v9 = list_make2_impl(226, 0, (uint64_t)v1599);
            goto LABEL_1777;
          case 1165:
            v429 = v24;
            v430 = *(v11 - 1);
            v639 = -1;
            goto LABEL_1667;
          case 1166:
            v429 = v24;
            v430 = *(v11 - 1);
            v639 = 0;
LABEL_1667:
            v428 = v26;
            v431 = (uint64_t)makeInteger(v639);
            goto LABEL_1668;
          case 1167:
            v32 = v26;
            *(double *)&v9 = makeOrderedSetArgs(*(v11 - 4), *(v11 - 1));
            goto LABEL_1777;
          case 1170:
            v357 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 378;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 1);
            ArgTypes = extractAggrArgTypes(*v11);
LABEL_1373:
            v26 = v357;
            *(_QWORD *)(StringConstCast + 16) = ArgTypes;
            break;
          case 1175:
            v32 = v26;
            v928 = makeInteger(0);
            v930 = *(v12 - 3);
            goto LABEL_1652;
          case 1176:
            v32 = v26;
            v928 = makeInteger(1);
            v930 = *(v12 - 4);
            goto LABEL_1652;
          case 1177:
            v32 = v26;
            v928 = makeInteger(1);
            v930 = *v12;
LABEL_1652:
            DefElem = makeDefElem((uint64_t)"strict", (uint64_t)v928, v930, v929);
            goto LABEL_1777;
          case 1178:
            v931 = "immutable";
            goto LABEL_1252;
          case 1179:
            v931 = "stable";
            goto LABEL_1252;
          case 1180:
            v931 = "volatile";
LABEL_1252:
            v32 = v26;
            v1513 = makeString((uint64_t)v931);
            DefElem = makeDefElem((uint64_t)"volatility", v1513, *v12, v1514);
            goto LABEL_1777;
          case 1181:
            v1127 = 1;
            goto LABEL_1641;
          case 1182:
            v1127 = 0;
LABEL_1641:
            v32 = v26;
            v594 = makeInteger(v1127);
            v596 = *(v12 - 2);
            goto LABEL_1642;
          case 1183:
            v529 = 1;
            goto LABEL_511;
          case 1184:
            v529 = 0;
LABEL_511:
            v32 = v26;
            v594 = makeInteger(v529);
            v596 = *(v12 - 1);
LABEL_1642:
            DefElem = makeDefElem((uint64_t)"security", (uint64_t)v594, v596, v595);
            goto LABEL_1777;
          case 1185:
            v32 = v26;
            v721 = makeInteger(1);
            v723 = *v12;
            goto LABEL_1425;
          case 1186:
            v32 = v26;
            v721 = makeInteger(0);
            v723 = *(v12 - 1);
LABEL_1425:
            DefElem = makeDefElem((uint64_t)"leakproof", (uint64_t)v721, v723, v722);
            goto LABEL_1777;
          case 1187:
            v44 = *v11;
            v45 = *(v12 - 1);
            v43 = "cost";
            goto LABEL_1598;
          case 1188:
            v44 = *v11;
            v45 = *(v12 - 1);
            v43 = "rows";
            goto LABEL_1598;
          case 1189:
            v44 = *v11;
            v45 = *(v12 - 1);
            v43 = "support";
            goto LABEL_1598;
          case 1190:
            v44 = *v11;
            v45 = *v12;
            v43 = "set";
            goto LABEL_1598;
          case 1191:
            v32 = v26;
            v905 = makeString(*v11);
            DefElem = makeDefElem((uint64_t)"parallel", v905, *(v12 - 1), v906);
            goto LABEL_1777;
          case 1193:
          case 1236:
            v32 = v26;
            v163 = makeString(*v11);
            DefElem = makeDefElem((uint64_t)"language", v163, *(v12 - 1), v164);
            goto LABEL_1777;
          case 1194:
            v44 = *v11;
            v45 = *(v12 - 1);
            v43 = "transform";
            goto LABEL_1598;
          case 1195:
            v32 = v26;
            v474 = makeInteger(1);
            DefElem = makeDefElem((uint64_t)"window", (uint64_t)v474, *v12, v475);
            goto LABEL_1777;
          case 1198:
            v428 = v26;
            v429 = v24;
            v430 = makeString(*(v11 - 2));
            v431 = makeString(*v11);
LABEL_1668:
            v1874 = v430;
            v24 = v429;
            *(double *)&v9 = list_make2_impl(226, v1874, v431);
            v26 = v428;
            goto LABEL_1778;
          case 1200:
            v34 = *(v11 - 4);
LABEL_1775:
            v2 = (const void **)*v11;
            goto LABEL_1776;
          case 1203:
            v1778 = v26;
            v360 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1778;
            StringConstCast = v360;
            *(_DWORD *)v360 = 382;
            *(_QWORD *)(v360 + 8) = *(v11 - 1);
            *(_QWORD *)(v360 + 16) = *v11;
            v361 = 116;
LABEL_1541:
            *(_DWORD *)(v360 + 24) = v361;
            *(_QWORD *)(v360 + 32) = 0;
            break;
          case 1206:
            v640 = v26;
            v436 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v640;
            StringConstCast = v436;
            v9 = 0x13000000FFLL;
            goto LABEL_605;
          case 1207:
            v435 = v26;
            v436 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v435;
            StringConstCast = v436;
            v9 = 0x1C000000FFLL;
            goto LABEL_605;
          case 1208:
            v724 = v26;
            v436 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v724;
            StringConstCast = v436;
            v9 = 0x20000000FFLL;
LABEL_605:
            *(double *)v436 = *(double *)&v9;
            v725 = *(v11 - 2);
            goto LABEL_1113;
          case 1213:
            v376 = v26;
            v364 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v376;
            StringConstCast = v364;
            *(_DWORD *)v364 = 249;
            v365 = 19;
            goto LABEL_1375;
          case 1214:
            v489 = v26;
            v490 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v489;
            StringConstCast = v490;
            *(_DWORD *)v490 = 249;
            v491 = 19;
            goto LABEL_1644;
          case 1215:
            v1635 = v26;
            v364 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1635;
            StringConstCast = v364;
            *(_DWORD *)v364 = 249;
            v365 = 28;
            goto LABEL_1375;
          case 1216:
            v1645 = v26;
            v490 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1645;
            StringConstCast = v490;
            *(_DWORD *)v490 = 249;
            v491 = 28;
            goto LABEL_1644;
          case 1217:
            v561 = v26;
            v364 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v561;
            StringConstCast = v364;
            *(_DWORD *)v364 = 249;
            *(_DWORD *)(v364 + 16) = 32;
            goto LABEL_1376;
          case 1218:
            v517 = v26;
            v490 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v517;
            StringConstCast = v490;
            *(_DWORD *)v490 = 249;
            *(_DWORD *)(v490 + 16) = 32;
            goto LABEL_1645;
          case 1219:
            v1515 = v26;
            v364 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1515;
            StringConstCast = v364;
            *(_DWORD *)v364 = 249;
            v365 = 1;
            goto LABEL_1375;
          case 1220:
            v1318 = v26;
            v1319 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1318;
            StringConstCast = v1319;
            *(_DWORD *)v1319 = 249;
            *(_DWORD *)(v1319 + 16) = 1;
            *(_QWORD *)(v1319 + 8) = *(v11 - 1);
            *(_DWORD *)(v1319 + 20) = *(_DWORD *)v11;
            *(_WORD *)(v1319 + 24) = 1;
            break;
          case 1221:
            v363 = v26;
            v364 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v363;
            StringConstCast = v364;
            *(_DWORD *)v364 = 249;
            v365 = 25;
LABEL_1375:
            *(_DWORD *)(v364 + 16) = v365;
LABEL_1376:
            *(_QWORD *)(v364 + 8) = *(v11 - 1);
            *(_DWORD *)(v364 + 20) = *(_DWORD *)v11;
            *(_WORD *)(v364 + 24) = 0;
            break;
          case 1222:
            v1859 = v26;
            v490 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1859;
            StringConstCast = v490;
            *(_DWORD *)v490 = 249;
            v491 = 25;
LABEL_1644:
            *(_DWORD *)(v490 + 16) = v491;
LABEL_1645:
            *(_QWORD *)(v490 + 8) = *(v11 - 1);
            *(_DWORD *)(v490 + 20) = *(_DWORD *)v11;
            *(_WORD *)(v490 + 24) = 1;
            break;
          case 1223:
            base_yyparse_cold_25();
          case 1224:
            v405 = *(v11 - 3);
            v129 = *(v11 - 1);
            goto LABEL_1441;
          case 1225:
          case 1803:
            v129 = *(v11 - 1);
            goto LABEL_565;
          case 1226:
            v405 = *(v11 - 3);
            v129 = 0;
            goto LABEL_1441;
          case 1228:
            v32 = v26;
            v556 = makeString(*(v11 - 2));
            DefElem = lcons(v556, *v11);
            goto LABEL_1777;
          case 1231:
            v1800 = v26;
            v1801 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1800;
            StringConstCast = v1801;
            *(_DWORD *)v1801 = 378;
            *(_QWORD *)(v1801 + 8) = *(v11 - 1);
            *(_QWORD *)(v1801 + 16) = *v11;
            break;
          case 1232:
            v504 = v26;
            v505 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v504;
            StringConstCast = v505;
            *(_DWORD *)v505 = 256;
            *(_QWORD *)(v505 + 8) = *v11;
            break;
          case 1235:
            v32 = v26;
            v377 = makeString(*v11);
            DefElem = makeDefElem((uint64_t)"as", v377, *v12, v378);
            goto LABEL_1777;
          case 1237:
            v1020 = v26;
            v1021 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1020;
            StringConstCast = v1021;
            *(_DWORD *)v1021 = 290;
            *(_QWORD *)(v1021 + 8) = *(v11 - 7);
            *(_QWORD *)(v1021 + 16) = *(v11 - 5);
            *(_QWORD *)(v1021 + 24) = *(v11 - 1);
            goto LABEL_990;
          case 1238:
            v1266 = v26;
            v1021 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1266;
            StringConstCast = v1021;
            *(_DWORD *)v1021 = 290;
            *(_QWORD *)(v1021 + 8) = *(v11 - 6);
            *(_QWORD *)(v1021 + 16) = *(v11 - 4);
            *(_QWORD *)(v1021 + 24) = 0;
LABEL_990:
            *(_DWORD *)(v1021 + 32) = *(_DWORD *)v11;
            *(_BYTE *)(v1021 + 36) = 0;
            break;
          case 1239:
            v562 = v26;
            v563 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v562;
            StringConstCast = v563;
            *(_DWORD *)v563 = 290;
            *(_QWORD *)(v563 + 8) = *(v11 - 6);
            *(_QWORD *)(v563 + 16) = *(v11 - 4);
            *(_QWORD *)(v563 + 24) = 0;
            *(_DWORD *)(v563 + 32) = *(_DWORD *)v11;
            *(_BYTE *)(v563 + 36) = 1;
            break;
          case 1243:
            v389 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 249;
            *(_DWORD *)(StringConstCast + 16) = 5;
            list_make2_impl(226, *(v11 - 4), *(v11 - 2));
            *(double *)&v9 = list_make1_impl(226, v390);
            v26 = v389;
            *(_QWORD *)(StringConstCast + 8) = v391;
            *(_DWORD *)(StringConstCast + 20) = *(_DWORD *)v11;
            *(_WORD *)(StringConstCast + 24) = *((unsigned __int8 *)v11 - 48);
            break;
          case 1246:
            v499 = v26;
            v500 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v499;
            StringConstCast = v500;
            *(_DWORD *)v500 = 335;
            *(_BYTE *)(v500 + 4) = *((_BYTE *)v11 - 64);
            *(_QWORD *)(v500 + 8) = *(v11 - 5);
            *(_QWORD *)(v500 + 16) = *(v11 - 3);
            *(_QWORD *)(v500 + 24) = **(_QWORD **)(*(v11 - 1) + 16);
            *(_QWORD *)(v500 + 32) = *(_QWORD *)(*(_QWORD *)(*(v11 - 1) + 16) + 8);
            break;
          case 1247:
            v405 = *(v11 - 6);
LABEL_1440:
            v129 = *v11;
            goto LABEL_1441;
          case 1248:
            v405 = *v11;
            v129 = *(v11 - 6);
            goto LABEL_1441;
          case 1249:
            v405 = *v11;
            v129 = 0;
            goto LABEL_1441;
          case 1250:
            v129 = *v11;
LABEL_565:
            v405 = 0;
            goto LABEL_1441;
          case 1251:
            v2076 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 249;
            *(_DWORD *)(StringConstCast + 16) = 41;
            v409 = v24;
            v410 = *(v11 - 3);
            v411 = makeString(*(v11 - 1));
            v412 = v410;
            v24 = v409;
            list_make2_impl(226, v412, v411);
            *(double *)&v9 = list_make1_impl(226, v413);
            v26 = v2076;
            *(_QWORD *)(StringConstCast + 8) = v414;
            *(_DWORD *)(StringConstCast + 20) = *(_DWORD *)v11;
            *(_BYTE *)(StringConstCast + 24) = *((_BYTE *)v11 - 40);
            break;
          case 1252:
            v1516 = v26;
            v1517 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1516;
            StringConstCast = v1517;
            *(_DWORD *)v1517 = 283;
            *(_DWORD *)(v1517 + 4) = *((_DWORD *)v11 - 4);
            *(_BYTE *)(v1517 + 28) = *((_BYTE *)v11 - 8);
            *(_QWORD *)(v1517 + 8) = *v11;
            *(_QWORD *)(v1517 + 16) = 0;
            *(_DWORD *)(v1517 + 24) = 0;
            break;
          case 1253:
            v1867 = v26;
            v1868 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1867;
            StringConstCast = v1868;
            *(_DWORD *)v1868 = 283;
            *(_DWORD *)(v1868 + 4) = *((_DWORD *)v11 - 4);
            *(_BYTE *)(v1868 + 28) = *((_BYTE *)v11 - 8);
            v1869 = *v11;
            *(_QWORD *)(v1868 + 8) = 0;
            *(_QWORD *)(v1868 + 16) = v1869;
            *(_DWORD *)(v1868 + 24) = 0;
            break;
          case 1254:
            v586 = v26;
            v587 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v586;
            StringConstCast = v587;
            *(_DWORD *)v587 = 283;
            *(_DWORD *)(v587 + 4) = *((_DWORD *)v11 - 4);
            *(_BYTE *)(v587 + 28) = *((_BYTE *)v11 - 8);
            *(_QWORD *)(v587 + 8) = *v11;
            *(_QWORD *)(v587 + 16) = 0;
            goto LABEL_543;
          case 1255:
            v641 = v26;
            v587 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v641;
            StringConstCast = v587;
            *(_DWORD *)v587 = 283;
            *(_DWORD *)(v587 + 4) = *((_DWORD *)v11 - 4);
            *(_BYTE *)(v587 + 28) = *((_BYTE *)v11 - 8);
            v642 = *v11;
            *(_QWORD *)(v587 + 8) = 0;
            *(_QWORD *)(v587 + 16) = v642;
LABEL_543:
            *(_DWORD *)(v587 + 24) = *((_DWORD *)v11 - 8);
            break;
          case 1259:
          case 1432:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 3;
            break;
          case 1260:
          case 1431:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 4;
            break;
          case 1264:
            v1746 = v26;
            v622 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1746;
            StringConstCast = v622;
            v623 = 320;
            goto LABEL_1496;
          case 1265:
            v437 = v26;
            v438 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v437;
            StringConstCast = v438;
            v439 = 320;
            goto LABEL_609;
          case 1266:
            v632 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v632;
            StringConstCast = v62;
            v9 = 0x100000101;
            goto LABEL_1498;
          case 1267:
            v791 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v791;
            StringConstCast = v62;
            v9 = 0x700000101;
            goto LABEL_1498;
          case 1268:
            v947 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v947;
            StringConstCast = v62;
            v9 = 0x800000101;
            goto LABEL_1498;
          case 1269:
            v1064 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1064;
            StringConstCast = v62;
            v9 = 0x900000101;
            goto LABEL_1588;
          case 1270:
            v1128 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1128;
            StringConstCast = v62;
            v9 = 0xC00000101;
            goto LABEL_1498;
          case 1271:
            v1194 = v26;
            v1195 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1194;
            StringConstCast = (uint64_t)v1195;
            v9 = 0xD00000101;
            *(_QWORD *)v1195 = 0xD00000101;
            *((_QWORD *)v1195 + 3) = *(v11 - 5);
            *((_QWORD *)v1195 + 4) = *(v11 - 2);
            *((_QWORD *)v1195 + 5) = *v11;
            break;
          case 1272:
            v557 = v26;
            v564 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            StringConstCast = (uint64_t)v564;
            v565 = 0x1000000101;
            goto LABEL_1563;
          case 1273:
            v1246 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1246;
            StringConstCast = v62;
            v9 = 0x1300000101;
            goto LABEL_1498;
          case 1274:
          case 1311:
          case 1312:
            v61 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v61;
            StringConstCast = v62;
            v9 = 0x1F00000101;
            goto LABEL_1588;
          case 1275:
            v557 = v26;
            v564 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            StringConstCast = (uint64_t)v564;
            v565 = 0x1500000101;
            goto LABEL_1563;
          case 1276:
            v557 = v26;
            v558 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            StringConstCast = (uint64_t)v558;
            v559 = 0x1800000101;
            goto LABEL_930;
          case 1277:
            v557 = v26;
            v558 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            StringConstCast = (uint64_t)v558;
            v559 = 0x1A00000101;
LABEL_930:
            *(_QWORD *)v558 = v559;
            v1196 = makeString(*(v11 - 3));
            v1197 = lcons(v1196, *(v11 - 5));
            goto LABEL_1564;
          case 1278:
            v1833 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1833;
            StringConstCast = v62;
            v9 = 0x1B00000101;
            goto LABEL_1605;
          case 1279:
            v1022 = v26;
            v466 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1022;
            StringConstCast = v466;
            v9 = 0x1B00000101;
            *(_QWORD *)v466 = 0x1B00000101;
            *(_QWORD *)(v466 + 16) = *(v11 - 3);
            v1023 = *(v11 - 5);
            goto LABEL_1545;
          case 1280:
            v501 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v501;
            StringConstCast = v62;
            v9 = 0x1C00000101;
            goto LABEL_1498;
          case 1281:
            v557 = v26;
            v564 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            StringConstCast = (uint64_t)v564;
            v565 = 0x1D00000101;
            goto LABEL_1563;
          case 1282:
            v1747 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1747;
            StringConstCast = v62;
            v9 = 0x2000000101;
            goto LABEL_1498;
          case 1283:
            v1822 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1822;
            StringConstCast = v62;
            v9 = 0x2200000101;
            goto LABEL_1588;
          case 1284:
            v557 = v26;
            v564 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            StringConstCast = (uint64_t)v564;
            v565 = 0x1100000101;
            goto LABEL_1563;
          case 1285:
            v557 = v26;
            v564 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            StringConstCast = (uint64_t)v564;
            v565 = 0x2400000101;
LABEL_1563:
            *(_QWORD *)v564 = v565;
            v1197 = makeString(*(v11 - 3));
LABEL_1564:
            v26 = v557;
            *(_QWORD *)(StringConstCast + 24) = v1197;
            *(_QWORD *)(StringConstCast + 40) = *v11;
            *(_BYTE *)(StringConstCast + 52) = 0;
            break;
          case 1286:
            v643 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v643;
            StringConstCast = v62;
            v9 = 0x2700000101;
            goto LABEL_1631;
          case 1287:
            v465 = v26;
            v466 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v465;
            StringConstCast = v466;
            v9 = 0x2700000101;
            goto LABEL_1416;
          case 1288:
            v518 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v518;
            StringConstCast = v62;
            v9 = 0x2300000101;
            goto LABEL_1631;
          case 1289:
            v932 = v26;
            v466 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v932;
            StringConstCast = v466;
            v9 = 0x2300000101;
            goto LABEL_1416;
          case 1290:
            v1850 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1850;
            StringConstCast = v62;
            v9 = 0x3100000101;
            goto LABEL_1631;
          case 1291:
            v1667 = v26;
            v466 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1667;
            StringConstCast = v466;
            v9 = 0x3100000101;
            goto LABEL_1416;
          case 1292:
            v1709 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1709;
            StringConstCast = v62;
            v9 = 0x1700000101;
            goto LABEL_1631;
          case 1293:
            v519 = v26;
            v466 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v519;
            StringConstCast = v466;
            v9 = 0x1700000101;
            goto LABEL_1416;
          case 1294:
            v1678 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1678;
            StringConstCast = v62;
            v9 = 0x1400000101;
            goto LABEL_1631;
          case 1295:
            v1639 = v26;
            v466 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1639;
            StringConstCast = v466;
            v9 = 0x1400000101;
            goto LABEL_1416;
          case 1296:
            v1854 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1854;
            StringConstCast = v62;
            v9 = 0x1200000101;
LABEL_1631:
            *(double *)v62 = *(double *)&v9;
            *(_QWORD *)(v62 + 16) = *(v11 - 3);
            *(_QWORD *)(v62 + 32) = 0;
            goto LABEL_1632;
          case 1297:
            v1366 = v26;
            v466 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1366;
            StringConstCast = v466;
            v9 = 0x1200000101;
LABEL_1416:
            *(double *)v466 = *(double *)&v9;
            *(_QWORD *)(v466 + 16) = *(v11 - 3);
            *(_QWORD *)(v466 + 32) = 0;
            goto LABEL_1546;
          case 1298:
            v1267 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1267;
            StringConstCast = v62;
            v9 = 0x600000101;
            *(_QWORD *)v62 = 0x600000101;
            v399 = 39;
            goto LABEL_992;
          case 1299:
            v1721 = v26;
            v466 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1721;
            StringConstCast = v466;
            v9 = 0x600000101;
            *(_QWORD *)v466 = 0x600000101;
            v1321 = 39;
            goto LABEL_1543;
          case 1300:
            v1198 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1198;
            StringConstCast = v62;
            v9 = 0x600000101;
            *(_QWORD *)v62 = 0x600000101;
            v399 = 49;
            goto LABEL_992;
          case 1301:
            v1320 = v26;
            v466 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1320;
            StringConstCast = v466;
            v9 = 0x600000101;
            *(_QWORD *)v466 = 0x600000101;
            v1321 = 49;
            goto LABEL_1543;
          case 1302:
            v398 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v398;
            StringConstCast = v62;
            v9 = 0x600000101;
            *(_QWORD *)v62 = 0x600000101;
            v399 = 23;
            goto LABEL_992;
          case 1303:
            v1787 = v26;
            v466 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1787;
            StringConstCast = v466;
            v9 = 0x600000101;
            *(_QWORD *)v466 = 0x600000101;
            v1321 = 23;
            goto LABEL_1543;
          case 1304:
            v588 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v588;
            StringConstCast = v62;
            v9 = 0x2600000101;
            *(_QWORD *)v62 = 0x2600000101;
            goto LABEL_993;
          case 1305:
            v1823 = v26;
            v466 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1823;
            StringConstCast = v466;
            v9 = 0x2600000101;
            *(_QWORD *)v466 = 0x2600000101;
            goto LABEL_1544;
          case 1306:
            v520 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v520;
            StringConstCast = v62;
            v9 = 0x600000101;
            *(_QWORD *)v62 = 0x600000101;
            v399 = 18;
LABEL_992:
            *(_DWORD *)(v62 + 8) = v399;
LABEL_993:
            *(_QWORD *)(v62 + 16) = *(v11 - 5);
            v1268 = *(v11 - 2);
            goto LABEL_1606;
          case 1307:
            v1701 = v26;
            v466 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1701;
            StringConstCast = v466;
            v9 = 0x600000101;
            *(_QWORD *)v466 = 0x600000101;
            v1321 = 18;
LABEL_1543:
            *(_DWORD *)(v466 + 8) = v1321;
LABEL_1544:
            *(_QWORD *)(v466 + 16) = *(v11 - 5);
            v1023 = *(v11 - 2);
LABEL_1545:
            *(_QWORD *)(v466 + 32) = v1023;
LABEL_1546:
            *(_QWORD *)(v466 + 40) = *v11;
            *(_BYTE *)(v466 + 52) = 1;
            break;
          case 1308:
            v1824 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1824;
            StringConstCast = v62;
            v9 = 0x2100000101;
            goto LABEL_1605;
          case 1309:
            v1367 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1367;
            StringConstCast = v62;
            v9 = 0x2A00000101;
LABEL_1605:
            *(double *)v62 = *(double *)&v9;
            *(_QWORD *)(v62 + 16) = *(v11 - 3);
            v1268 = *(v11 - 5);
            goto LABEL_1606;
          case 1310:
            v1636 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            *(_QWORD *)StringConstCast = 0xE00000101;
            v1637 = makeString(*(v11 - 3));
            v26 = v1636;
            *(_QWORD *)(StringConstCast + 24) = v1637;
            *(_QWORD *)(StringConstCast + 40) = *v11;
            break;
          case 1313:
            v851 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v851;
            StringConstCast = v62;
            v9 = 0x2800000101;
LABEL_1588:
            *(double *)v62 = *(double *)&v9;
            v1268 = *(v11 - 3);
LABEL_1606:
            *(_QWORD *)(v62 + 32) = v1268;
            goto LABEL_1632;
          case 1314:
            v1378 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1378;
            StringConstCast = v62;
            v9 = 0x2500000101;
            goto LABEL_1498;
          case 1315:
            v759 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v759;
            StringConstCast = v62;
            v9 = 0x2D00000101;
            goto LABEL_1498;
          case 1316:
            v1575 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1575;
            StringConstCast = v62;
            v9 = 0x2C00000101;
            goto LABEL_1498;
          case 1317:
            v1301 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1301;
            StringConstCast = v62;
            v9 = 0x2E00000101;
            goto LABEL_1498;
          case 1318:
            v415 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v415;
            StringConstCast = v62;
            v9 = 0x2B00000101;
            goto LABEL_1498;
          case 1319:
            v502 = v26;
            v62 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v502;
            StringConstCast = v62;
            v9 = 0x2F00000101;
LABEL_1498:
            *(double *)v62 = *(double *)&v9;
            *(_QWORD *)(v62 + 24) = *(v11 - 3);
LABEL_1632:
            *(_QWORD *)(v62 + 40) = *v11;
            *(_BYTE *)(v62 + 52) = 0;
            break;
          case 1320:
            v1722 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            *(_QWORD *)StringConstCast = 0x400000101;
            *(_DWORD *)(StringConstCast + 8) = 47;
            v1723 = makeRangeVarFromAnyName(*(v11 - 6), *(v12 - 6), COERCE_DOUBLE(0x400000101));
            v26 = v1722;
            *(_QWORD *)(StringConstCast + 16) = v1723;
            *(_QWORD *)(StringConstCast + 32) = *(v11 - 3);
            *(_QWORD *)(StringConstCast + 40) = *(v11 - 1);
            *(_DWORD *)(StringConstCast + 48) = *(_DWORD *)v11;
            *(_BYTE *)(StringConstCast + 52) = 0;
            break;
          case 1321:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x14D;
            break;
          case 1325:
            v530 = v26;
            v531 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            StringConstCast = (uint64_t)v531;
            v532 = 0x130000012CLL;
            goto LABEL_1523;
          case 1326:
            v530 = v26;
            v531 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            StringConstCast = (uint64_t)v531;
            v532 = 0x1C0000012CLL;
            goto LABEL_1523;
          case 1327:
            v530 = v26;
            v531 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            StringConstCast = (uint64_t)v531;
            v532 = 0x200000012CLL;
LABEL_1523:
            *(_QWORD *)v531 = v532;
            *((_QWORD *)v531 + 2) = *(v11 - 5);
            goto LABEL_1524;
          case 1328:
            v530 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            *(_QWORD *)StringConstCast = 0x2A0000012CLL;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 5);
            v760 = makeString(*(v11 - 7));
            list_make1_impl(226, v760);
            *(_QWORD *)(StringConstCast + 16) = v761;
            goto LABEL_1524;
          case 1329:
            v530 = v26;
            v974 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            StringConstCast = (uint64_t)v974;
            v975 = 0x170000012CLL;
            goto LABEL_995;
          case 1330:
            v530 = v26;
            v974 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            StringConstCast = (uint64_t)v974;
            v975 = 0x140000012CLL;
LABEL_995:
            *(_QWORD *)v974 = v975;
            *((_QWORD *)v974 + 1) = *(v11 - 5);
LABEL_1524:
            v1771 = makeString(*v11);
            v26 = v530;
            *(_QWORD *)(StringConstCast + 24) = v1771;
            *(_BYTE *)(StringConstCast + 32) = *((_BYTE *)v11 - 32);
            break;
          case 1333:
            v1518 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1518;
            StringConstCast = v352;
            v9 = 0x10000012DLL;
            goto LABEL_1622;
          case 1334:
            v1779 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1779;
            StringConstCast = v352;
            v9 = 0x70000012DLL;
            goto LABEL_1622;
          case 1335:
            v1851 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1851;
            StringConstCast = v352;
            v9 = 0x80000012DLL;
            goto LABEL_1622;
          case 1336:
            v1765 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1765;
            StringConstCast = v352;
            v9 = 0xC0000012DLL;
            goto LABEL_1622;
          case 1337:
            v440 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            *(_QWORD *)StringConstCast = 0xF0000012DLL;
            v697 = makeString(*(v11 - 3));
            goto LABEL_1258;
          case 1338:
            v614 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v614;
            StringConstCast = v352;
            v9 = 0x130000012DLL;
            goto LABEL_1622;
          case 1339:
            v1614 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1614;
            StringConstCast = v352;
            v9 = 0x190000012DLL;
            goto LABEL_1622;
          case 1340:
            v440 = v26;
            v441 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            StringConstCast = (uint64_t)v441;
            v442 = 0x180000012DLL;
            goto LABEL_584;
          case 1341:
            v440 = v26;
            v441 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            StringConstCast = (uint64_t)v441;
            v442 = 0x1A0000012DLL;
LABEL_584:
            *(_QWORD *)v441 = v442;
            v696 = makeString(*(v11 - 3));
            v697 = lcons(v696, *(v11 - 5));
LABEL_1258:
            v26 = v440;
            *(_QWORD *)(StringConstCast + 16) = v697;
            *(_QWORD *)(StringConstCast + 24) = *v11;
            *(_BYTE *)(StringConstCast + 32) = 0;
            break;
          case 1342:
            v1041 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1041;
            StringConstCast = v352;
            v9 = 0x1C0000012DLL;
            goto LABEL_1622;
          case 1343:
            v1343 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1343;
            StringConstCast = v352;
            v9 = 0x200000012DLL;
            goto LABEL_1622;
          case 1344:
            v1439 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1439;
            StringConstCast = v352;
            v9 = 0x270000012DLL;
            goto LABEL_1421;
          case 1345:
            v1519 = v26;
            v354 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1519;
            StringConstCast = v354;
            v9 = 0x270000012DLL;
            goto LABEL_1592;
          case 1346:
            v1440 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1440;
            StringConstCast = v352;
            v9 = 0x250000012DLL;
            goto LABEL_1622;
          case 1347:
            v1423 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1423;
            StringConstCast = v352;
            v9 = 0x2D0000012DLL;
            goto LABEL_1622;
          case 1348:
            v1379 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1379;
            StringConstCast = v352;
            v9 = 0x2C0000012DLL;
            goto LABEL_1622;
          case 1349:
            v1438 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1438;
            StringConstCast = v352;
            v9 = 0x2E0000012DLL;
            goto LABEL_1622;
          case 1350:
            v1576 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1576;
            StringConstCast = v352;
            v9 = 0x2B0000012DLL;
            goto LABEL_1622;
          case 1351:
            v1676 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1676;
            StringConstCast = v352;
            v9 = 0x230000012DLL;
            goto LABEL_1421;
          case 1352:
            v1825 = v26;
            v354 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1825;
            StringConstCast = v354;
            v9 = 0x230000012DLL;
            goto LABEL_1592;
          case 1353:
            v644 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v644;
            StringConstCast = v352;
            v9 = 0x310000012DLL;
            goto LABEL_1421;
          case 1354:
            v1441 = v26;
            v354 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1441;
            StringConstCast = v354;
            v9 = 0x310000012DLL;
            goto LABEL_1592;
          case 1355:
            v533 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v533;
            StringConstCast = v352;
            v9 = 0x170000012DLL;
            goto LABEL_1421;
          case 1356:
            v1668 = v26;
            v354 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1668;
            StringConstCast = v354;
            v9 = 0x170000012DLL;
            goto LABEL_1592;
          case 1357:
            v1344 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1344;
            StringConstCast = v352;
            v9 = 0x120000012DLL;
LABEL_1421:
            *(double *)v352 = *(double *)&v9;
            *(_QWORD *)(v352 + 8) = *(v11 - 3);
            goto LABEL_1624;
          case 1358:
            v1281 = v26;
            v354 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1281;
            StringConstCast = v354;
            v9 = 0x120000012DLL;
LABEL_1592:
            *(double *)v354 = *(double *)&v9;
            *(_QWORD *)(v354 + 8) = *(v11 - 3);
LABEL_1593:
            *(_QWORD *)(v354 + 24) = *v11;
LABEL_1594:
            *(_BYTE *)(v354 + 32) = 1;
            break;
          case 1359:
            v1606 = v26;
            v352 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1606;
            StringConstCast = v352;
            v9 = 0x2F0000012DLL;
LABEL_1622:
            *(double *)v352 = *(double *)&v9;
            v480 = *(v11 - 3);
LABEL_1623:
            *(_QWORD *)(v352 + 16) = v480;
LABEL_1624:
            *(_QWORD *)(v352 + 24) = *v11;
            *(_BYTE *)(v352 + 32) = 0;
            break;
          case 1360:
            v450 = v26;
            v436 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v450;
            StringConstCast = v436;
            v451 = 303;
            goto LABEL_1112;
          case 1363:
          case 1488:
            v43 = (const char *)*(v11 - 2);
            v45 = *(v12 - 2);
            goto LABEL_1597;
          case 1370:
            v1368 = v26;
            v436 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1368;
            StringConstCast = v436;
            v451 = 304;
LABEL_1112:
            *(_DWORD *)v436 = v451;
            v725 = *(v11 - 4);
LABEL_1113:
            *(_QWORD *)(v436 + 8) = v725;
            *(_QWORD *)(v436 + 16) = *(v11 - 1);
            break;
          case 1371:
            v708 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v708;
            StringConstCast = v70;
            v9 = 0x10000012ELL;
            goto LABEL_1610;
          case 1372:
            v933 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v933;
            StringConstCast = v70;
            v9 = 0x70000012ELL;
            goto LABEL_1610;
          case 1373:
            v1836 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1836;
            StringConstCast = v70;
            v9 = 0x80000012ELL;
            goto LABEL_1610;
          case 1374:
            v589 = v26;
            v590 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v590;
            v591 = 0x90000012ELL;
            goto LABEL_1626;
          case 1375:
            v1024 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1024;
            StringConstCast = v70;
            v9 = 0xC0000012ELL;
            goto LABEL_1610;
          case 1376:
            v873 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v873;
            StringConstCast = v70;
            v9 = 0x130000012ELL;
            goto LABEL_1610;
          case 1377:
            v589 = v26;
            v590 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v590;
            v591 = 0x150000012ELL;
            goto LABEL_1626;
          case 1378:
            v1679 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1679;
            StringConstCast = v70;
            v9 = 0x160000012ELL;
            goto LABEL_1610;
          case 1379:
            v709 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v709;
            StringConstCast = v70;
            v9 = 0x190000012ELL;
            goto LABEL_1610;
          case 1380:
            v589 = v26;
            v763 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v763;
            v764 = 0x180000012ELL;
            goto LABEL_1555;
          case 1381:
            v589 = v26;
            v763 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v763;
            v764 = 0x1A0000012ELL;
LABEL_1555:
            *(_QWORD *)v763 = v764;
            v1802 = makeString(*(v11 - 3));
            v1803 = lcons(v1802, *(v11 - 5));
            goto LABEL_1627;
          case 1382:
            v569 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v569;
            StringConstCast = v70;
            v9 = 0x1C0000012ELL;
            goto LABEL_1610;
          case 1383:
            v1813 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1813;
            StringConstCast = v70;
            v9 = 0x200000012ELL;
            goto LABEL_1610;
          case 1384:
            v589 = v26;
            v590 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v590;
            v591 = 0x220000012ELL;
            goto LABEL_1626;
          case 1385:
            v1042 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1042;
            StringConstCast = v70;
            v9 = 0x2F0000012ELL;
            goto LABEL_1610;
          case 1386:
            v589 = v26;
            v590 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v590;
            v591 = 0x280000012ELL;
            goto LABEL_1626;
          case 1387:
            v1520 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1520;
            StringConstCast = v70;
            v9 = 0x250000012ELL;
            goto LABEL_1610;
          case 1388:
            v1646 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1646;
            StringConstCast = v70;
            v9 = 0x2C0000012ELL;
            goto LABEL_1610;
          case 1389:
            v1369 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1369;
            StringConstCast = v70;
            v9 = 0x2B0000012ELL;
LABEL_1610:
            *(double *)v70 = *(double *)&v9;
            *(_QWORD *)(v70 + 16) = *(v11 - 3);
            goto LABEL_1722;
          case 1390:
            v589 = v26;
            v590 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v590;
            v591 = 0x100000012ELL;
LABEL_1626:
            *(_QWORD *)v590 = v591;
            v1803 = makeString(*(v11 - 3));
LABEL_1627:
            v26 = v589;
            *(_QWORD *)(StringConstCast + 16) = v1803;
            *(_QWORD *)(StringConstCast + 24) = *v11;
            break;
          case 1391:
            v633 = v26;
            v634 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v634;
            v635 = 0x110000012ELL;
            goto LABEL_1158;
          case 1392:
            v633 = v26;
            v634 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v634;
            v635 = 0xE0000012ELL;
            goto LABEL_1158;
          case 1393:
            v633 = v26;
            v634 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v634;
            v635 = 0x1D0000012ELL;
            goto LABEL_1158;
          case 1394:
            v633 = v26;
            v634 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            StringConstCast = (uint64_t)v634;
            v635 = 0x240000012ELL;
LABEL_1158:
            *(_QWORD *)v634 = v635;
            v1424 = makeString(*(v11 - 3));
            v26 = v633;
            *(_QWORD *)(StringConstCast + 16) = v1424;
            *(_QWORD *)(StringConstCast + 24) = *v11;
            break;
          case 1395:
            v419 = v26;
            v1647 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            StringConstCast = v1647;
            *(_DWORD *)v1647 = 337;
            *(_QWORD *)(v1647 + 8) = *(v11 - 2);
            *(_QWORD *)(v1647 + 16) = *v11;
            v1648 = (_DWORD *)*(v11 - 1);
            if (v1648)
            {
              if (*v1648 == 226)
                *(_QWORD *)(v1647 + 24) = v1648;
              else
                *(_BYTE *)(v1647 + 32) = 1;
              v26 = v419;
            }
            else
            {
LABEL_1849:
              v26 = v419;
            }
            break;
          case 1399:
            v32 = v26;
            DefElem = (unint64_t)makeInteger(1);
            goto LABEL_1777;
          case 1400:
            v1593 = v26;
            v66 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1593;
            StringConstCast = v66;
            v507 = 338;
            goto LABEL_1321;
          case 1401:
            v1521 = v26;
            v1522 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1521;
            StringConstCast = v1522;
            *(_DWORD *)v1522 = 338;
            *(_QWORD *)(v1522 + 8) = *(v11 - 3);
            *(_QWORD *)(v1522 + 24) = *v11;
            *(_DWORD *)(v1522 + 36) = 2;
            break;
          case 1402:
            v1322 = v26;
            v1323 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1322;
            StringConstCast = v1323;
            *(_DWORD *)v1323 = 338;
            *(_QWORD *)(v1323 + 8) = *(v11 - 3);
            *(_QWORD *)(v1323 + 24) = *v11;
            *(_DWORD *)(v1323 + 36) = 1;
            break;
          case 1403:
            v1065 = v26;
            v1066 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1065;
            StringConstCast = v1066;
            *(_DWORD *)v1066 = 338;
            *(_QWORD *)(v1066 + 8) = *(v11 - 3);
            *(_QWORD *)(v1066 + 24) = *v11;
            *(_DWORD *)(v1066 + 36) = 3;
            break;
          case 1404:
            v888 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v888;
            StringConstCast = v201;
            *(_DWORD *)v201 = 339;
            *(_QWORD *)(v201 + 8) = *(v11 - 5);
            *(_QWORD *)(v201 + 16) = *(v11 - 3);
            goto LABEL_1494;
          case 1405:
          case 1418:
          case 1464:
          case 1484:
          case 1506:
          case 1541:
          case 2320:
            v2 = (const void **)*v11;
            goto LABEL_69;
          case 1408:
            v492 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v492;
            StringConstCast = v201;
            v9 = 340;
            *(_QWORD *)v201 = 340;
            v493 = *(v11 - 2);
            goto LABEL_1786;
          case 1409:
            v1523 = v26;
            v66 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1523;
            StringConstCast = v66;
            v9 = 0x100000154;
LABEL_1806:
            *(double *)v66 = *(double *)&v9;
            goto LABEL_1807;
          case 1410:
            v1302 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1302;
            StringConstCast = v201;
            v9 = 0x300000154;
            *(_QWORD *)v201 = 0x300000154;
            v493 = *(v11 - 3);
LABEL_1786:
            *(_QWORD *)(v201 + 8) = v493;
            goto LABEL_1787;
          case 1411:
            v1702 = v26;
            v201 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1702;
            StringConstCast = v201;
            v9 = 0x200000154;
            *(_QWORD *)v201 = 0x200000154;
            *(_QWORD *)(v201 + 8) = *(v11 - 4);
LABEL_1494:
            *(_QWORD *)(v201 + 24) = *(v11 - 1);
LABEL_1787:
            *(_QWORD *)(v201 + 32) = *v11;
            break;
          case 1412:
            v1247 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            *(_QWORD *)StringConstCast = 0x400000154;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 1);
            v1248 = 1;
            goto LABEL_1124;
          case 1413:
            v1247 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            *(_QWORD *)StringConstCast = 0x400000154;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 1);
            v1248 = 0;
LABEL_1124:
            v1380 = makeInteger(v1248);
            v1382 = makeDefElem((uint64_t)"enabled", (uint64_t)v1380, *(v12 - 3), v1381);
            *(double *)&v9 = list_make1_impl(226, v1382);
            v26 = v1247;
            *(_QWORD *)(StringConstCast + 32) = v1383;
            break;
          case 1414:
            v560 = v26;
            v522 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v560;
            StringConstCast = v522;
            *(_DWORD *)v522 = 341;
            *(_QWORD *)(v522 + 8) = *(v11 - 1);
            *(_BYTE *)(v522 + 16) = 0;
            goto LABEL_485;
          case 1415:
            v521 = v26;
            v522 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v521;
            StringConstCast = v522;
            *(_DWORD *)v522 = 341;
            *(_QWORD *)(v522 + 8) = *(v11 - 1);
            *(_BYTE *)(v522 + 16) = 1;
LABEL_485:
            *(_DWORD *)(v522 + 20) = *(_DWORD *)v11;
            break;
          case 1416:
            v1292 = v26;
            v1293 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1292;
            StringConstCast = v1293;
            *(_DWORD *)v1293 = 258;
            *(_BYTE *)(v1293 + 48) = *((_BYTE *)v11 - 88);
            *(_QWORD *)(v1293 + 8) = *(v11 - 4);
            *(_QWORD *)(v1293 + 16) = *(v11 - 9);
            *(_QWORD *)(v1293 + 24) = *(v11 - 3);
            *(_DWORD *)(v1293 + 32) = *((_DWORD *)v11 - 12);
            *(_BYTE *)(v1293 + 36) = *((_BYTE *)v11 - 8);
            *(_QWORD *)(v1293 + 40) = *v11;
            break;
          case 1420:
            v2 = (const void **)*v11;
            StringConstCast = *(v11 - 2);
            if (!*v11)
              break;
            v34 = *(v11 - 2);
            goto LABEL_1776;
          case 1421:
            v2 = (const void **)*v11;
            if (*v11)
              goto LABEL_69;
LABEL_1090:
            StringConstCast = 0;
            break;
          case 1436:
            v726 = v26;
            v66 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v726;
            StringConstCast = v66;
            v727 = 259;
            goto LABEL_1402;
          case 1439:
            v1693 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v1693;
            StringConstCast = v52;
            v92 = 260;
            goto LABEL_1634;
          case 1440:
            v1442 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v1442;
            StringConstCast = v52;
            v92 = 261;
            goto LABEL_1634;
          case 1441:
            v976 = v26;
            v977 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v976;
            StringConstCast = v977;
            *(_DWORD *)v977 = 261;
            *(_QWORD *)(v977 + 8) = 0;
            break;
          case 1442:
          case 1447:
            v81 = v26;
            v82 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v81;
            StringConstCast = v82;
            v9 = 0x300000106;
            goto LABEL_222;
          case 1443:
            v669 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v669;
            StringConstCast = v52;
            v9 = 262;
            *(_QWORD *)v52 = 262;
            goto LABEL_1755;
          case 1444:
            v874 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v874;
            StringConstCast = v52;
            v9 = 0x100000106;
            *(_QWORD *)v52 = 0x100000106;
            goto LABEL_1755;
          case 1445:
          case 1446:
            v167 = v26;
            v82 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v167;
            StringConstCast = v82;
            v9 = 0x200000106;
LABEL_222:
            *(double *)v82 = *(double *)&v9;
            *(_QWORD *)(v82 + 8) = 0;
            *(_BYTE *)(v82 + 32) = *(_BYTE *)v11;
            break;
          case 1448:
            v1649 = v26;
            v66 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1649;
            StringConstCast = v66;
            v9 = 0x400000106;
            *(_QWORD *)v66 = 0x400000106;
            goto LABEL_1809;
          case 1449:
          case 1450:
            v165 = v26;
            v66 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v165;
            StringConstCast = v66;
            v9 = 0x500000106;
            *(_QWORD *)v66 = 0x500000106;
            goto LABEL_1809;
          case 1451:
          case 1452:
            v166 = v26;
            v66 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v166;
            StringConstCast = v66;
            v9 = 0x600000106;
            *(_QWORD *)v66 = 0x600000106;
            goto LABEL_1809;
          case 1453:
            v1680 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1680;
            StringConstCast = v70;
            v9 = 0x700000106;
            goto LABEL_1514;
          case 1454:
            v636 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v636;
            StringConstCast = v70;
            v9 = 0x800000106;
            goto LABEL_1514;
          case 1455:
            v1760 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1760;
            StringConstCast = v70;
            v9 = 0x900000106;
LABEL_1514:
            *(double *)v70 = *(double *)&v9;
            goto LABEL_1722;
          case 1459:
            v523 = v24;
            v524 = *v11;
            v525 = *v12;
            v2079 = v26;
            v526 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)v526 = 349;
            *(_DWORD *)(v526 + 8) = 223;
            *(_QWORD *)(v526 + 16) = v524;
            v24 = v523;
            *(_DWORD *)(v526 + 24) = v525;
            v528 = makeDefElem((uint64_t)"transaction_isolation", v526, *(v12 - 2), v527);
            v26 = v2079;
            StringConstCast = v528;
            break;
          case 1460:
            v1524 = v24;
            v1525 = *(v12 - 1);
            v617 = v26;
            v1526 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v618 = v1526;
            *v1526 = 349;
            v1526[2] = 221;
            v1526[4] = 1;
            goto LABEL_1297;
          case 1461:
            v1524 = v24;
            v1525 = *(v12 - 1);
            v617 = v26;
            v1526 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v618 = v1526;
            *v1526 = 349;
            v1526[2] = 221;
            v1526[4] = 0;
LABEL_1297:
            v1526[6] = v1525;
            v24 = v1524;
            v620 = *(v12 - 1);
            v649 = "transaction_read_only";
            goto LABEL_1399;
          case 1462:
            v615 = v24;
            v616 = *v12;
            v617 = v26;
            v618 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *v618 = 349;
            v618[2] = 221;
            v618[4] = 1;
            v618[6] = v616;
            v24 = v615;
            v620 = *v12;
            goto LABEL_548;
          case 1463:
            v647 = v24;
            v648 = *(v12 - 1);
            v617 = v26;
            v618 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *v618 = 349;
            v618[2] = 221;
            v618[4] = 0;
            v618[6] = v648;
            v24 = v647;
            v620 = *(v12 - 1);
LABEL_548:
            v649 = "transaction_deferrable";
            goto LABEL_1399;
          case 1472:
            v1443 = v26;
            v477 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1443;
            StringConstCast = v477;
            *(_DWORD *)v477 = 263;
            v1444 = *(v11 - 5);
            *(_QWORD *)(v477 + 8) = v1444;
            *(_BYTE *)(v1444 + 33) = *((_DWORD *)v11 - 14);
            *(_QWORD *)(v477 + 16) = *(v11 - 4);
            *(_QWORD *)(v477 + 24) = *(v11 - 1);
            *(_BYTE *)(v477 + 32) = 0;
            goto LABEL_1178;
          case 1473:
            v476 = v26;
            v477 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v476;
            StringConstCast = v477;
            *(_DWORD *)v477 = 263;
            v478 = *(v11 - 5);
            *(_QWORD *)(v477 + 8) = v478;
            *(_BYTE *)(v478 + 33) = *((_DWORD *)v11 - 14);
            *(_QWORD *)(v477 + 16) = *(v11 - 4);
            *(_QWORD *)(v477 + 24) = *(v11 - 1);
            *(_BYTE *)(v477 + 32) = 1;
LABEL_1178:
            *(_QWORD *)(v477 + 40) = *(v11 - 3);
            *(_DWORD *)(v477 + 48) = *(_DWORD *)v11;
            break;
          case 1474:
            v570 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            *(_DWORD *)StringConstCast = 263;
            v571 = *(v11 - 7);
            *(_QWORD *)(StringConstCast + 8) = v571;
            *(_BYTE *)(v571 + 33) = *((_DWORD *)v11 - 20);
            v572 = *(v11 - 5);
            *(_QWORD *)(StringConstCast + 16) = v572;
            RecursiveViewSelect = makeRecursiveViewSelect(*(_QWORD *)(*(_QWORD *)(StringConstCast + 8) + 24), v572, *(v11 - 1), v573);
            v26 = v570;
            *(_QWORD *)(StringConstCast + 24) = RecursiveViewSelect;
            *(_BYTE *)(StringConstCast + 32) = 0;
            *(_QWORD *)(StringConstCast + 40) = *(v11 - 3);
            v575 = *(_DWORD *)v11;
            *(_DWORD *)(StringConstCast + 48) = *(_DWORD *)v11;
            if (v575)
              base_yyparse_cold_26();
            break;
          case 1475:
            v1788 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            *(_DWORD *)StringConstCast = 263;
            v1789 = *(v11 - 7);
            *(_QWORD *)(StringConstCast + 8) = v1789;
            *(_BYTE *)(v1789 + 33) = *((_DWORD *)v11 - 20);
            v1790 = *(v11 - 5);
            *(_QWORD *)(StringConstCast + 16) = v1790;
            v1792 = makeRecursiveViewSelect(*(_QWORD *)(*(_QWORD *)(StringConstCast + 8) + 24), v1790, *(v11 - 1), v1791);
            v26 = v1788;
            *(_QWORD *)(StringConstCast + 24) = v1792;
            *(_BYTE *)(StringConstCast + 32) = 1;
            *(_QWORD *)(StringConstCast + 40) = *(v11 - 3);
            v1793 = *(_DWORD *)v11;
            *(_DWORD *)(StringConstCast + 48) = *(_DWORD *)v11;
            if (v1793)
              base_yyparse_cold_27();
            break;
          case 1480:
            v576 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v576;
            StringConstCast = v52;
            v92 = 264;
            goto LABEL_1634;
          case 1481:
            v978 = v26;
            v66 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v978;
            StringConstCast = v66;
            v507 = 266;
            goto LABEL_1321;
          case 1486:
            v1650 = v24;
            v1651 = (const char *)*(v11 - 2);
            v617 = v26;
            v1652 = (unint64_t)makeInteger(*(_DWORD *)v11);
            goto LABEL_1398;
          case 1487:
            v1650 = v24;
            v1651 = (const char *)*(v11 - 2);
            v617 = v26;
            v1652 = makeString(*v11);
LABEL_1398:
            v618 = (_DWORD *)v1652;
            v620 = *(v12 - 2);
            v649 = v1651;
            v24 = v1650;
LABEL_1399:
            DefElem = makeDefElem((uint64_t)v649, (uint64_t)v618, v620, v619);
            v26 = v617;
            goto LABEL_1778;
          case 1490:
            v37 = "connection_limit";
            goto LABEL_77;
          case 1491:
          case 1492:
          case 1493:
          case 1494:
          case 1495:
            v37 = (const char *)*v11;
LABEL_77:
            v32 = v26;
            DefElem = (unint64_t)pstrdup(v37);
            goto LABEL_1777;
          case 1498:
            v506 = v26;
            v66 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v506;
            StringConstCast = v66;
            v507 = 286;
LABEL_1321:
            *(_DWORD *)v66 = v507;
LABEL_1807:
            v980 = *(v11 - 2);
            goto LABEL_1808;
          case 1499:
            v771 = v26;
            v66 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v771;
            StringConstCast = v66;
            v727 = 286;
            goto LABEL_1402;
          case 1500:
            v773 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            *(_DWORD *)StringConstCast = 286;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 3);
            v777 = makeString(*v11);
            v775 = *v12;
            v776 = "tablespace";
            goto LABEL_1474;
          case 1501:
            v1653 = v26;
            v66 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1653;
            StringConstCast = v66;
            v727 = 287;
            goto LABEL_1402;
          case 1502:
            v508 = v26;
            v509 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v508;
            StringConstCast = v509;
            *(_DWORD *)v509 = 267;
            *(_QWORD *)(v509 + 8) = *v11;
            *(_BYTE *)(v509 + 16) = 0;
            *(_QWORD *)(v509 + 24) = 0;
            break;
          case 1503:
            v1577 = v26;
            v1578 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1577;
            StringConstCast = v1578;
            *(_DWORD *)v1578 = 267;
            *(_QWORD *)(v1578 + 8) = *v11;
            *(_BYTE *)(v1578 + 16) = 1;
            *(_QWORD *)(v1578 + 24) = 0;
            break;
          case 1504:
            v1625 = v26;
            v711 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1625;
            StringConstCast = v711;
            *(_DWORD *)v711 = 267;
            *(_QWORD *)(v711 + 8) = *(v11 - 4);
            *(_BYTE *)(v711 + 16) = 0;
            goto LABEL_1364;
          case 1505:
            v710 = v26;
            v711 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v710;
            StringConstCast = v711;
            *(_DWORD *)v711 = 267;
            *(_QWORD *)(v711 + 8) = *(v11 - 4);
            *(_BYTE *)(v711 + 16) = 1;
            goto LABEL_1364;
          case 1508:
            v45 = *v12;
            v43 = "force";
LABEL_1597:
            v44 = 0;
            goto LABEL_1598;
          case 1509:
            v1640 = v26;
            v1641 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v1640;
            StringConstCast = v1641;
            *(_DWORD *)v1641 = 343;
            *(_QWORD *)(v1641 + 8) = *(v11 - 2);
            break;
          case 1510:
          case 1511:
            v91 = v26;
            v52 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v91;
            StringConstCast = v52;
            v92 = 332;
LABEL_1634:
            *(_DWORD *)v52 = v92;
LABEL_1755:
            *(_QWORD *)(v52 + 8) = *v11;
            break;
          case 1512:
            v1615 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            *(_DWORD *)StringConstCast = 265;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 3);
            *(_QWORD *)(StringConstCast + 16) = *(v11 - 1);
            SplitColQualList(*v11, (uint64_t *)(StringConstCast + 32), (int **)(StringConstCast + 24));
            v26 = v1615;
            break;
          case 1513:
            v1445 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1445;
            StringConstCast = v70;
            *(_DWORD *)v70 = 239;
            *(_BYTE *)(v70 + 4) = 84;
            *(_QWORD *)(v70 + 8) = *(v11 - 1);
            goto LABEL_1722;
          case 1514:
            v659 = v26;
            v660 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v659;
            StringConstCast = v660;
            *(_DWORD *)v660 = 239;
            v661 = 78;
            goto LABEL_974;
          case 1515:
            v1249 = v26;
            v660 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1249;
            StringConstCast = v660;
            *(_DWORD *)v660 = 239;
            v661 = 79;
LABEL_974:
            *(_BYTE *)(v660 + 4) = v661;
            *(_QWORD *)(v660 + 8) = *(v11 - 3);
            break;
          case 1516:
            v1282 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1282;
            StringConstCast = v70;
            *(_DWORD *)v70 = 239;
            *(_BYTE *)(v70 + 4) = 67;
            *(_QWORD *)(v70 + 8) = *(v11 - 2);
            goto LABEL_1722;
          case 1517:
            v809 = v26;
            v810 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v809;
            StringConstCast = v810;
            *(_DWORD *)v810 = 239;
            *(_BYTE *)(v810 + 4) = 88;
            *(_QWORD *)(v810 + 8) = *(v11 - 4);
            *(_QWORD *)(v810 + 16) = *(v11 - 1);
            *(_DWORD *)(v810 + 32) = *(_DWORD *)v11;
            *(_BYTE *)(v810 + 36) = 0;
            break;
          case 1518:
            v1772 = v26;
            v1773 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1772;
            StringConstCast = v1773;
            *(_DWORD *)v1773 = 239;
            *(_BYTE *)(v1773 + 4) = 88;
            *(_QWORD *)(v1773 + 8) = *(v11 - 6);
            *(_QWORD *)(v1773 + 16) = *(v11 - 1);
            *(_DWORD *)(v1773 + 32) = *(_DWORD *)v11;
            *(_BYTE *)(v1773 + 36) = 1;
            break;
          case 1519:
            v979 = v26;
            v66 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v979;
            StringConstCast = v66;
            *(_DWORD *)v66 = 239;
            *(_BYTE *)(v66 + 4) = 86;
            v980 = *(v11 - 3);
            goto LABEL_1808;
          case 1522:
            v1654 = v26;
            v66 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1654;
            StringConstCast = v66;
            v727 = 311;
LABEL_1402:
            *(_DWORD *)v66 = v727;
            v980 = *(v11 - 1);
LABEL_1808:
            *(_QWORD *)(v66 + 8) = v980;
LABEL_1809:
            *(_QWORD *)(v66 + 16) = *v11;
            break;
          case 1523:
            v534 = v26;
            v535 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v534;
            StringConstCast = v535;
            v9 = 312;
            *(_QWORD *)v535 = 312;
            *(_QWORD *)(v535 + 8) = *(v11 - 6);
            *(_QWORD *)(v535 + 16) = *(v11 - 2);
            *(_QWORD *)(v535 + 24) = *v11;
            *(_WORD *)(v535 + 32) = 0;
            break;
          case 1524:
            v698 = v26;
            v699 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v698;
            StringConstCast = v699;
            v9 = 0x100000138;
            *(_QWORD *)v699 = 0x100000138;
            *(_QWORD *)(v699 + 8) = *(v11 - 6);
            *(_QWORD *)(v699 + 16) = *(v11 - 2);
            *(_QWORD *)(v699 + 24) = *v11;
            *(_WORD *)(v699 + 32) = 1;
            break;
          case 1525:
            v981 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            *(_QWORD *)StringConstCast = 0x200000138;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 6);
            *(_QWORD *)(StringConstCast + 16) = 0;
            goto LABEL_1265;
          case 1526:
            v981 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            *(_QWORD *)StringConstCast = 0x300000138;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 8);
            *(_QWORD *)(StringConstCast + 16) = *(v11 - 4);
LABEL_1265:
            *(double *)&v9 = list_make2_impl(226, *(v11 - 2), *v11);
            v26 = v981;
            *(_QWORD *)(StringConstCast + 24) = v1527;
            *(_WORD *)(StringConstCast + 32) = 256;
            break;
          case 1527:
            v1726 = v26;
            v1727 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1726;
            StringConstCast = v1727;
            v9 = 0x400000138;
            *(_QWORD *)v1727 = 0x400000138;
            *(_QWORD *)(v1727 + 8) = *(v11 - 4);
            *(_QWORD *)(v1727 + 16) = *v11;
            *(_BYTE *)(v1727 + 34) = 0;
            break;
          case 1528:
            v682 = v26;
            v683 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v682;
            StringConstCast = v683;
            v9 = 0x400000138;
            *(_QWORD *)v683 = 0x400000138;
            *(_QWORD *)(v683 + 8) = *(v11 - 6);
            *(_QWORD *)(v683 + 16) = *v11;
            *(_BYTE *)(v683 + 34) = 1;
            break;
          case 1531:
            v1594 = v26;
            v1595 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1594;
            StringConstCast = v1595;
            *(_DWORD *)v1595 = 289;
            *(_QWORD *)(v1595 + 8) = *(v11 - 6);
            *(_QWORD *)(v1595 + 16) = *(v11 - 4);
            *(_QWORD *)(v1595 + 24) = *(v11 - 2);
            *(_QWORD *)(v1595 + 32) = *v11;
            *(_BYTE *)(v1595 + 40) = *((_BYTE *)v11 - 64);
            break;
          case 1532:
            v772 = v26;
            v607 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v772;
            StringConstCast = v607;
            *(_DWORD *)v607 = 245;
            *(_QWORD *)(v607 + 8) = *(v11 - 1);
            *(_QWORD *)(v607 + 16) = *v11;
            *(_DWORD *)(v607 + 24) = 0;
            v608 = *((unsigned __int8 *)v11 - 16);
            goto LABEL_643;
          case 1533:
            v606 = v26;
            v607 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v606;
            StringConstCast = v607;
            *(_DWORD *)v607 = 245;
            *(_QWORD *)(v607 + 8) = 0;
            *(_QWORD *)(v607 + 16) = 0;
            *(_DWORD *)(v607 + 24) = 0;
            v608 = *(unsigned __int8 *)v11;
            goto LABEL_643;
          case 1534:
            v637 = v26;
            v607 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v637;
            StringConstCast = v607;
            *(_DWORD *)v607 = 245;
            *(_QWORD *)(v607 + 8) = *v11;
            *(_QWORD *)(v607 + 16) = *(v11 - 2);
            *(_DWORD *)(v607 + 24) = 0;
            v608 = *((unsigned __int8 *)v11 - 24);
LABEL_643:
            *(_DWORD *)(v607 + 24) = 2 * v608;
            break;
          case 1537:
            v2104 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 268;
            *(_QWORD *)(StringConstCast + 8) = 0;
            if (*((_BYTE *)v11 - 32))
            {
              v1774 = makeDefElem((uint64_t)"full", 0, *(v12 - 4), *(double *)&v9);
              v1775 = lappend(0, v1774);
              *(_QWORD *)(StringConstCast + 8) = v1775;
            }
            else
            {
              v1775 = 0;
            }
            if (*((_BYTE *)v11 - 24))
            {
              v1982 = makeDefElem((uint64_t)"freeze", 0, *(v12 - 3), *(double *)&v9);
              v1775 = lappend(v1775, v1982);
              *(_QWORD *)(StringConstCast + 8) = v1775;
            }
            if (*((_BYTE *)v11 - 16))
            {
              v1983 = makeDefElem((uint64_t)"verbose", 0, *(v12 - 2), *(double *)&v9);
              v1775 = lappend(v1775, v1983);
              *(_QWORD *)(StringConstCast + 8) = v1775;
            }
            if (*((_BYTE *)v11 - 8))
            {
              v1984 = makeDefElem((uint64_t)"analyze", 0, *(v12 - 1), *(double *)&v9);
              *(_QWORD *)(StringConstCast + 8) = lappend(v1775, v1984);
            }
            *(_QWORD *)(StringConstCast + 16) = *v11;
            *(_BYTE *)(StringConstCast + 24) = 1;
            v26 = v2104;
            break;
          case 1538:
            v728 = v26;
            v438 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v728;
            StringConstCast = v438;
            v439 = 268;
LABEL_609:
            *(_DWORD *)v438 = v439;
            *(_QWORD *)(v438 + 8) = *(v11 - 2);
            *(_QWORD *)(v438 + 16) = *v11;
            *(_BYTE *)(v438 + 24) = 1;
            break;
          case 1539:
            v494 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 268;
            *(_QWORD *)(StringConstCast + 8) = 0;
            if (*((_BYTE *)v11 - 8))
            {
              v495 = makeDefElem((uint64_t)"verbose", 0, *(v12 - 1), *(double *)&v9);
              *(_QWORD *)(StringConstCast + 8) = lappend(0, v495);
            }
            *(_QWORD *)(StringConstCast + 16) = *v11;
            *(_BYTE *)(StringConstCast + 24) = 0;
            v26 = v494;
            break;
          case 1540:
            v621 = v26;
            v622 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v621;
            StringConstCast = v622;
            v623 = 268;
LABEL_1496:
            *(_DWORD *)v622 = v623;
            *(_QWORD *)(v622 + 8) = *(v11 - 2);
            *(_QWORD *)(v622 + 16) = *v11;
            *(_BYTE *)(v622 + 24) = 0;
            break;
          case 1545:
          case 1581:
            v32 = v26;
            DefElem = makeDefElem(*(v11 - 1), *v11, *(v12 - 1), *(double *)&v9);
            goto LABEL_1777;
          case 1547:
          case 1583:
            StringConstCast = (uint64_t)"analyze";
            break;
          case 1561:
            v32 = v26;
            DefElem = makeVacuumRelation(*(v11 - 1), 0, *v11, *(double *)&v9);
            goto LABEL_1777;
          case 1562:
          case 1579:
          case 1613:
          case 1649:
          case 1685:
            v2 = (const void **)*v11;
            goto LABEL_69;
          case 1566:
            v1269 = v26;
            v1270 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1269;
            StringConstCast = v1270;
            *(_DWORD *)v1270 = 269;
            *(_QWORD *)(v1270 + 8) = *v11;
            *(_QWORD *)(v1270 + 16) = 0;
            break;
          case 1567:
            v2097 = v26;
            v1485 = v24;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            *(_DWORD *)StringConstCast = 269;
            *(_QWORD *)(StringConstCast + 8) = *v11;
            v1749 = makeDefElem((uint64_t)"analyze", 0, *(v12 - 2), v1748);
            *(double *)&v9 = list_make1_impl(226, v1749);
            *(_QWORD *)(StringConstCast + 16) = v1750;
            if (!*((_BYTE *)v11 - 8))
              goto LABEL_1501;
            v1751 = v1750;
            v1752 = makeDefElem((uint64_t)"verbose", 0, *(v12 - 1), *(double *)&v9);
            *(_QWORD *)(StringConstCast + 16) = lappend(v1751, v1752);
            v24 = v1485;
            v26 = v2097;
            break;
          case 1568:
            v773 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            *(_DWORD *)StringConstCast = 269;
            *(_QWORD *)(StringConstCast + 8) = *v11;
            v775 = *(v12 - 1);
            v776 = "verbose";
            v777 = 0;
LABEL_1474:
            v1724 = makeDefElem((uint64_t)v776, v777, v775, v774);
            *(double *)&v9 = list_make1_impl(226, v1724);
            v26 = v773;
            *(_QWORD *)(StringConstCast + 16) = v1725;
            break;
          case 1569:
            v1384 = v26;
            v1385 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1384;
            StringConstCast = v1385;
            *(_DWORD *)v1385 = 269;
            *(_QWORD *)(v1385 + 8) = *v11;
            *(_QWORD *)(v1385 + 16) = *(v11 - 2);
            break;
          case 1587:
            v1736 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1736;
            StringConstCast = v70;
            *(_DWORD *)v70 = 294;
            *(_QWORD *)(v70 + 8) = *(v11 - 3);
            goto LABEL_1482;
          case 1588:
          case 1597:
          case 1663:
          case 1664:
          case 1710:
          case 1733:
          case 1790:
          case 1813:
          case 1825:
          case 1832:
            StringConstCast = *(v11 - 1);
            break;
          case 1589:
          case 1598:
          case 1618:
          case 1621:
          case 1623:
          case 1626:
          case 1692:
          case 1694:
          case 1711:
          case 1712:
          case 1714:
          case 1725:
          case 1747:
          case 1760:
          case 1762:
          case 1764:
          case 1773:
          case 1777:
          case 1801:
          case 1811:
          case 1812:
          case 1826:
          case 1833:
          case 1837:
          case 1840:
          case 1842:
            StringConstCast = 0;
            break;
          case 1594:
            v1446 = v26;
            v1447 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1446;
            StringConstCast = v1447;
            *(_DWORD *)v1447 = 295;
            *(_QWORD *)(v1447 + 8) = *(v11 - 1);
            *(_QWORD *)(v1447 + 16) = *v11;
            break;
          case 1595:
            v2053 = v24;
            v1303 = v2108;
            v1304 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 270;
            v1305 = *v1303;
            v24 = v2053;
            v1306 = MemoryContextAllocZeroAligned(v1305, 0x18uLL);
            v26 = v1304;
            *(_DWORD *)v1306 = 295;
            *(_QWORD *)(v1306 + 8) = *(v11 - 2);
            *(_QWORD *)(v1306 + 16) = *(v11 - 1);
            *(_QWORD *)(StringConstCast + 8) = v1306;
            *(_QWORD *)(StringConstCast + 16) = *(v11 - 5);
            *(_DWORD *)(StringConstCast + 24) = 39;
            *(_WORD *)(StringConstCast + 28) = 0;
            v1307 = *((_DWORD *)v11 - 14);
            goto LABEL_1433;
          case 1596:
            v2064 = v24;
            v1681 = v2108;
            v1682 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 270;
            v1683 = *v1681;
            v24 = v2064;
            v1684 = MemoryContextAllocZeroAligned(v1683, 0x18uLL);
            v26 = v1682;
            *(_DWORD *)v1684 = 295;
            *(_QWORD *)(v1684 + 8) = *(v11 - 2);
            *(_QWORD *)(v1684 + 16) = *(v11 - 1);
            *(_QWORD *)(StringConstCast + 8) = v1684;
            *(_QWORD *)(StringConstCast + 16) = *(v11 - 5);
            *(_DWORD *)(StringConstCast + 24) = 39;
            *(_WORD *)(StringConstCast + 28) = 256;
            v1307 = *((_DWORD *)v11 - 20);
LABEL_1433:
            *(_BYTE *)(*(_QWORD *)(*(v11 - 5) + 8) + 33) = v1307;
            *(_BYTE *)(*(v11 - 5) + 64) = *(_BYTE *)v11 ^ 1;
            break;
          case 1599:
          case 1600:
            v83 = v26;
            v84 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v83;
            StringConstCast = v84;
            *(_DWORD *)v84 = 296;
            *(_QWORD *)(v84 + 8) = *v11;
            break;
          case 1601:
          case 1602:
            v85 = v26;
            v86 = MemoryContextAllocZeroAligned(*v2108, 0x10uLL);
            v26 = v85;
            StringConstCast = v86;
            *(_DWORD *)v86 = 296;
            *(_QWORD *)(v86 + 8) = 0;
            break;
          case 1603:
            *(_QWORD *)(*(v11 - 2) + 8) = *(v11 - 3);
            *(_QWORD *)(*(v11 - 2) + 32) = *(v11 - 1);
            *(_QWORD *)(*(v11 - 2) + 40) = *v11;
            *(_QWORD *)(*(v11 - 2) + 48) = *(v11 - 6);
            StringConstCast = *(v11 - 2);
            break;
          case 1604:
          case 1622:
          case 1625:
          case 1644:
          case 1652:
          case 1665:
          case 1673:
          case 1674:
          case 1677:
          case 1691:
          case 1713:
          case 1715:
          case 1722:
          case 1724:
          case 1732:
          case 1734:
          case 1736:
          case 1737:
          case 1746:
          case 1750:
          case 1751:
          case 1752:
          case 1753:
          case 1754:
          case 1759:
          case 1761:
          case 1763:
          case 1772:
          case 1776:
          case 1788:
          case 1800:
          case 1814:
          case 1821:
          case 1836:
          case 1838:
          case 1841:
            StringConstCast = *v11;
            break;
          case 1605:
            v670 = v26;
            Alias = makeAlias((const char *)*v11, 0);
            v26 = v670;
            *(_QWORD *)(*(v11 - 2) + 40) = Alias;
            StringConstCast = *(v11 - 2);
            break;
          case 1606:
            v765 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x40uLL);
            v26 = v765;
            StringConstCast = v70;
            *(_DWORD *)v70 = 233;
            *(_QWORD *)(v70 + 16) = 0;
            goto LABEL_1722;
          case 1607:
            v811 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x40uLL);
            v26 = v811;
            StringConstCast = v70;
            *(_DWORD *)v70 = 233;
            *(_QWORD *)(v70 + 16) = 0;
            goto LABEL_839;
          case 1608:
            v889 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x40uLL);
            v26 = v889;
            StringConstCast = v70;
            *(_DWORD *)v70 = 233;
LABEL_1482:
            *(_QWORD *)(v70 + 16) = *(v11 - 2);
            goto LABEL_1722;
          case 1609:
            v1067 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x40uLL);
            v26 = v1067;
            StringConstCast = v70;
            *(_DWORD *)v70 = 233;
            *(_QWORD *)(v70 + 16) = *(v11 - 5);
LABEL_839:
            *(_DWORD *)(v70 + 56) = *((_DWORD *)v11 - 4);
            goto LABEL_1722;
          case 1610:
            v1528 = v26;
            v1529 = MemoryContextAllocZeroAligned(*v2108, 0x40uLL);
            v26 = v1528;
            StringConstCast = v1529;
            *(_DWORD *)v1529 = 233;
            *(_QWORD *)(v1529 + 16) = 0;
            *(_QWORD *)(v1529 + 24) = 0;
            break;
          case 1611:
          case 1630:
          case 1641:
          case 1688:
          case 1771:
          case 1808:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 1;
            break;
          case 1612:
          case 1631:
          case 1640:
          case 1689:
          case 1770:
          case 1807:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 2;
            break;
          case 1615:
          case 1648:
            v156 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            *(_DWORD *)StringConstCast = 355;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 1);
            v157 = check_indirection(*v11, (uint64_t)v2107);
            v26 = v156;
            *(_QWORD *)(StringConstCast + 16) = v157;
            *(_QWORD *)(StringConstCast + 24) = 0;
            *(_DWORD *)(StringConstCast + 32) = *(v12 - 1);
            break;
          case 1616:
            v1129 = v26;
            v1130 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1129;
            StringConstCast = v1130;
            v9 = 0x200000184;
            *(_QWORD *)v1130 = 0x200000184;
            *(_QWORD *)(v1130 + 8) = *(v11 - 5);
            *(_QWORD *)(v1130 + 16) = *(v11 - 1);
            *(_QWORD *)(v1130 + 24) = *v11;
            *(_DWORD *)(v1130 + 32) = *(v12 - 7);
            break;
          case 1617:
            v543 = v26;
            v544 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v543;
            StringConstCast = v544;
            v9 = 0x100000184;
            *(_QWORD *)v544 = 0x100000184;
            *(_QWORD *)(v544 + 8) = *(v11 - 2);
            *(_QWORD *)(v544 + 16) = 0;
            *(_QWORD *)(v544 + 24) = 0;
            *(_DWORD *)(v544 + 32) = *(v12 - 4);
            break;
          case 1619:
            v1131 = v26;
            v1132 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1131;
            StringConstCast = v1132;
            *(_DWORD *)v1132 = 387;
            *(_QWORD *)(v1132 + 8) = *(v11 - 2);
            *(_QWORD *)(v1132 + 16) = *v11;
            *(_QWORD *)(v1132 + 24) = 0;
            *(_DWORD *)(v1132 + 32) = *(v12 - 3);
            break;
          case 1620:
            v1294 = v26;
            v1295 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1294;
            StringConstCast = v1295;
            *(_DWORD *)v1295 = 387;
            *(_QWORD *)(v1295 + 8) = 0;
            *(_QWORD *)(v1295 + 16) = 0;
            *(_QWORD *)(v1295 + 24) = *v11;
            *(_DWORD *)(v1295 + 32) = *(v12 - 2);
            break;
          case 1624:
            v536 = v26;
            v537 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v536;
            StringConstCast = v537;
            *(_DWORD *)v537 = 234;
            *(_QWORD *)(v537 + 8) = *(v11 - 3);
            *(_QWORD *)(v537 + 16) = *(v11 - 2);
            *(_QWORD *)(v537 + 24) = *(v11 - 1);
            *(_QWORD *)(v537 + 32) = *v11;
            *(_QWORD *)(v537 + 40) = *(v11 - 6);
            break;
          case 1627:
            v624 = v26;
            v625 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v624;
            StringConstCast = v625;
            *(_DWORD *)v625 = 281;
            *(_QWORD *)(v625 + 8) = *(v11 - 2);
            *(_DWORD *)(v625 + 16) = *((_DWORD *)v11 - 2);
            *(_BYTE *)(v625 + 20) = *(_BYTE *)v11;
            break;
          case 1628:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | *((unsigned int *)v11 - 2);
            break;
          case 1629:
          case 1637:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 8;
            break;
          case 1632:
          case 1769:
          case 1809:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 3;
            break;
          case 1633:
          case 1768:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 4;
            break;
          case 1634:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 5;
            break;
          case 1635:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 6;
            break;
          case 1636:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 7;
            break;
          case 1639:
          case 1707:
          case 1708:
          case 1835:
            StringConstCast &= 0xFFFFFFFFFFFFFF00;
            break;
          case 1642:
          case 1653:
          case 1658:
          case 1660:
          case 1690:
          case 1742:
          case 1743:
          case 1744:
          case 1745:
          case 1810:
            StringConstCast &= 0xFFFFFFFF00000000;
            break;
          case 1643:
            v545 = v26;
            v546 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v545;
            StringConstCast = v546;
            *(_DWORD *)v546 = 235;
            *(_QWORD *)(v546 + 8) = *(v11 - 5);
            *(_QWORD *)(v546 + 16) = *(v11 - 3);
            *(_QWORD *)(v546 + 32) = *(v11 - 2);
            *(_QWORD *)(v546 + 24) = *(v11 - 1);
            *(_QWORD *)(v546 + 40) = *v11;
            *(_QWORD *)(v546 + 48) = *(v11 - 7);
            break;
          case 1645:
            v32 = v26;
            DefElem = list_concat(*(v11 - 2), (const void **)*v11);
            goto LABEL_1777;
          case 1646:
            *(_QWORD *)(*(v11 - 2) + 24) = *v11;
            v2 = (const void **)*(v11 - 2);
            goto LABEL_69;
          case 1647:
            StringConstCast = *(v11 - 3);
            if (StringConstCast)
            {
              v2040 = v24;
              v1710 = *(_DWORD *)(StringConstCast + 4);
              if (v1710 < 1)
              {
LABEL_1810:
                v24 = v2040;
              }
              else
              {
                v2102 = v26;
                v2029 = v15;
                v2008 = v16;
                v1711 = 0;
                v1712 = v2108;
                do
                {
                  v1713 = v1711 + 1;
                  v1714 = *(_QWORD *)(*(_QWORD *)(StringConstCast + 16) + 8 * v1711);
                  v1715 = MemoryContextAllocZeroAligned(*v1712, 0x18uLL);
                  *(_DWORD *)v1715 = 356;
                  *(_QWORD *)(v1715 + 8) = *v11;
                  *(_DWORD *)(v1715 + 16) = v1713;
                  *(_DWORD *)(v1715 + 20) = v1710;
                  *(_QWORD *)(v1714 + 24) = v1715;
                  v1711 = v1713;
                }
                while (v1713 < *(int *)(StringConstCast + 4));
                StringConstCast = *(v11 - 3);
                v16 = v2008;
                v15 = v2029;
                v24 = v2040;
                v26 = v2102;
              }
            }
            break;
          case 1651:
            v1737 = v26;
            v70 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1737;
            StringConstCast = v70;
            *(_DWORD *)v70 = 297;
            *(_QWORD *)(v70 + 8) = *(v11 - 5);
            *(_DWORD *)(v70 + 16) = *((_DWORD *)v11 - 8) | *((_DWORD *)v11 - 4) | 0x20;
LABEL_1722:
            *(_QWORD *)(v70 + 24) = *v11;
            break;
          case 1654:
            StringConstCast = *((unsigned int *)v11 - 4) | StringConstCast & 0xFFFFFFFF00000000 | 4;
            break;
          case 1655:
            StringConstCast = *((unsigned int *)v11 - 2) | StringConstCast & 0xFFFFFFFF00000000 | 2;
            break;
          case 1656:
            StringConstCast = *((unsigned int *)v11 - 2) | StringConstCast & 0xFFFFFFFF00000000 | 1;
            break;
          case 1657:
            StringConstCast = *((unsigned int *)v11 - 2) | StringConstCast & 0xFFFFFFFF00000000 | 8;
            break;
          case 1659:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x10;
            break;
          case 1666:
            v609 = *(v11 - 1);
            v610 = *v11;
            v611 = 0;
            goto LABEL_1093;
          case 1667:
            v1068 = *(v11 - 3);
            v1069 = *(v11 - 2);
            v1070 = (const void **)*(v11 - 1);
            v1071 = *v11;
            goto LABEL_1127;
          case 1668:
            v1068 = *(v11 - 3);
            v1069 = *(v11 - 2);
            v1071 = *(v11 - 1);
            v1070 = (const void **)*v11;
LABEL_1127:
            v1133 = 0;
            goto LABEL_1128;
          case 1669:
            v650 = v26;
            insertSelectOptions(*v11, 0, 0, 0, *(v11 - 1));
            v26 = v650;
            StringConstCast = *v11;
            break;
          case 1670:
            v609 = *(v11 - 1);
            v610 = *v11;
            v611 = *(v11 - 2);
LABEL_1093:
            v1345 = v26;
            insertSelectOptions(v609, v610, 0, 0, v611);
            v26 = v1345;
            StringConstCast = *(v11 - 1);
            break;
          case 1671:
            v1069 = *(v11 - 2);
            v1070 = (const void **)*(v11 - 1);
            v1071 = *v11;
            goto LABEL_887;
          case 1672:
            v1071 = *(v11 - 1);
            v1070 = (const void **)*v11;
            v1069 = *(v11 - 2);
LABEL_887:
            v1133 = *(v11 - 4);
            v1068 = *(v11 - 3);
LABEL_1128:
            v1386 = v26;
            insertSelectOptions(v1068, v1069, v1070, v1071, v1133);
            v26 = v1386;
            StringConstCast = *(v11 - 3);
            break;
          case 1675:
            v1324 = v26;
            v1309 = MemoryContextAllocZeroAligned(*v2108, 0x98uLL);
            v26 = v1324;
            StringConstCast = v1309;
            *(_DWORD *)v1309 = 236;
            goto LABEL_1070;
          case 1676:
            v1308 = v26;
            v1309 = MemoryContextAllocZeroAligned(*v2108, 0x98uLL);
            v26 = v1308;
            StringConstCast = v1309;
            *(_DWORD *)v1309 = 236;
            *(_QWORD *)(v1309 + 8) = *(v11 - 7);
LABEL_1070:
            *(_QWORD *)(v1309 + 24) = *(v11 - 6);
            *(_QWORD *)(v1309 + 16) = *(v11 - 5);
            *(_QWORD *)(v1309 + 32) = *(v11 - 4);
            *(_QWORD *)(v1309 + 40) = *(v11 - 3);
            *(_QWORD *)(v1309 + 48) = *(v11 - 2);
            *(_QWORD *)(v1309 + 56) = *(v11 - 1);
            *(_QWORD *)(v1309 + 64) = *v11;
            break;
          case 1678:
            v2016 = v15;
            v948 = v16;
            v949 = v2108;
            v2084 = v26;
            v2045 = v24;
            v950 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            *(_DWORD *)v950 = 347;
            v951 = MemoryContextAllocZeroAligned(*v949, 0x28uLL);
            *(_DWORD *)v951 = 355;
            StringConstCast = MemoryContextAllocZeroAligned(*v949, 0x98uLL);
            *(_DWORD *)StringConstCast = 236;
            v952 = *v949;
            v16 = v948;
            v15 = v2016;
            v953 = (_DWORD *)MemoryContextAllocZero(v952, 4uLL);
            *v953 = 351;
            list_make1_impl(226, (uint64_t)v953);
            *(_QWORD *)(v950 + 8) = v954;
            *(_DWORD *)(v950 + 16) = -1;
            *(_QWORD *)(v951 + 8) = 0;
            *(_QWORD *)(v951 + 16) = 0;
            *(_QWORD *)(v951 + 24) = v950;
            v24 = v2045;
            *(_DWORD *)(v951 + 32) = -1;
            list_make1_impl(226, v951);
            *(_QWORD *)(StringConstCast + 24) = v955;
            *(double *)&v9 = list_make1_impl(226, *v11);
            v26 = v2084;
            *(_QWORD *)(StringConstCast + 32) = v956;
            break;
          case 1679:
            v982 = v24;
            v983 = *((_BYTE *)v11 - 8);
            v984 = *(v11 - 3);
            v1998 = v16;
            v2017 = v15;
            v985 = *v11;
            v986 = v26;
            DefElem = MemoryContextAllocZeroAligned(*v2108, 0x98uLL);
            v26 = v986;
            *(_DWORD *)DefElem = 236;
            v987 = 1;
            goto LABEL_1465;
          case 1680:
            v982 = v24;
            v983 = *((_BYTE *)v11 - 8);
            v984 = *(v11 - 3);
            v1998 = v16;
            v2017 = v15;
            v985 = *v11;
            v1325 = v26;
            DefElem = MemoryContextAllocZeroAligned(*v2108, 0x98uLL);
            v26 = v1325;
            *(_DWORD *)DefElem = 236;
            v987 = 2;
            goto LABEL_1465;
          case 1681:
            v982 = v24;
            v983 = *((_BYTE *)v11 - 8);
            v984 = *(v11 - 3);
            v1998 = v16;
            v2017 = v15;
            v985 = *v11;
            v1716 = v26;
            DefElem = MemoryContextAllocZeroAligned(*v2108, 0x98uLL);
            v26 = v1716;
            *(_DWORD *)DefElem = 236;
            v987 = 3;
LABEL_1465:
            *(_DWORD *)(DefElem + 128) = v987;
            *(_BYTE *)(DefElem + 132) = v983;
            v24 = v982;
            *(_QWORD *)(DefElem + 136) = v984;
            *(_QWORD *)(DefElem + 144) = v985;
            v15 = v2017;
            v16 = v1998;
            goto LABEL_1778;
          case 1682:
          case 1683:
            v159 = v26;
            v160 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v159;
            StringConstCast = v160;
            *(_DWORD *)v160 = 386;
            *(_QWORD *)(v160 + 8) = *v11;
            *(_BYTE *)(v160 + 16) = 0;
            *(_DWORD *)(v160 + 20) = *(v12 - 1);
            break;
          case 1684:
            v812 = v26;
            v813 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v812;
            StringConstCast = v813;
            *(_DWORD *)v813 = 386;
            *(_QWORD *)(v813 + 8) = *v11;
            *(_BYTE *)(v813 + 16) = 1;
            *(_DWORD *)(v813 + 20) = *(v12 - 2);
            break;
          case 1687:
            v934 = v26;
            v935 = MemoryContextAllocZeroAligned(*v2108, 0x58uLL);
            v26 = v934;
            StringConstCast = v935;
            *(_DWORD *)v935 = 389;
            *(_QWORD *)(v935 + 8) = *(v11 - 6);
            *(_QWORD *)(v935 + 16) = *(v11 - 5);
            *(_DWORD *)(v935 + 24) = *((_DWORD *)v11 - 6);
            *(_QWORD *)(v935 + 32) = *(v11 - 1);
            *(_DWORD *)(v935 + 40) = *(v12 - 6);
            break;
          case 1693:
            v1530 = v26;
            v1531 = MemoryContextAllocZeroAligned(*v2108, 0x48uLL);
            v26 = v1530;
            StringConstCast = v1531;
            *(_DWORD *)v1531 = 153;
            *(_QWORD *)(v1531 + 8) = *v11;
            *(_QWORD *)(v1531 + 16) = 0;
            *(_QWORD *)(v1531 + 32) = 0;
            *(_DWORD *)(v1531 + 40) = 0;
            *(_QWORD *)(v1531 + 48) = 0;
            *(_QWORD *)(v1531 + 56) = 0;
            *(_BYTE *)(v1531 + 64) = 0;
            break;
          case 1695:
          case 1696:
          case 1697:
          case 1698:
            StringConstCast = *v11;
            *(_BYTE *)(*v11 + 33) = 116;
            break;
          case 1699:
            v766 = v26;
            if (!errstart(19, 0))
              goto LABEL_1016;
            errmsg("GLOBAL is deprecated in temporary table creation", (uint64_t)v2, v3, v4, v5, v6, v7, v8, v1990);
            scanner_errposition(*(v12 - 3), v2107);
            v767 = 11744;
            goto LABEL_1015;
          case 1700:
            v766 = v26;
            if (!errstart(19, 0))
              goto LABEL_1016;
            errmsg("GLOBAL is deprecated in temporary table creation", (uint64_t)v2, v3, v4, v5, v6, v7, v8, v1990);
            scanner_errposition(*(v12 - 3), v2107);
            v767 = 11752;
LABEL_1015:
            errfinish("gram.y", v767, (uint64_t)"base_yyparse");
LABEL_1016:
            StringConstCast = *v11;
            *(_BYTE *)(*v11 + 33) = 116;
            v26 = v766;
            break;
          case 1701:
            StringConstCast = *v11;
            *(_BYTE *)(*v11 + 33) = 117;
            break;
          case 1702:
          case 1703:
            StringConstCast = *v11;
            *(_BYTE *)(*v11 + 33) = 112;
            break;
          case 1709:
            v2 = 0;
LABEL_69:
            v32 = v26;
            *(double *)&v9 = list_make1_impl(226, (uint64_t)v2);
            goto LABEL_1777;
          case 1718:
            v1685 = v26;
            v1686 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1685;
            StringConstCast = v1686;
            *(_DWORD *)v1686 = 359;
            *(_QWORD *)(v1686 + 8) = *(v11 - 3);
            *(_DWORD *)(v1686 + 16) = 3;
            *(_DWORD *)(v1686 + 20) = *(_DWORD *)v11;
            *(_QWORD *)(v1686 + 24) = *(v11 - 1);
            *(_DWORD *)(v1686 + 32) = *(v12 - 1);
            break;
          case 1719:
            v1448 = v26;
            v1449 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1448;
            StringConstCast = v1449;
            *(_DWORD *)v1449 = 359;
            *(_QWORD *)(v1449 + 8) = *(v11 - 2);
            *(_DWORD *)(v1449 + 16) = *((_DWORD *)v11 - 2);
            *(_DWORD *)(v1449 + 20) = *(_DWORD *)v11;
            *(_QWORD *)(v1449 + 24) = 0;
            *(_DWORD *)(v1449 + 32) = -1;
            break;
          case 1720:
            StringConstCast = *(v11 - 1);
            *(_QWORD *)StringConstCast = *v11;
            break;
          case 1721:
            StringConstCast = *v11;
            *(_QWORD *)*v11 = *(v11 - 1);
            break;
          case 1723:
            v1283 = v26;
            v856 = palloc(0x18uLL);
            v26 = v1283;
            StringConstCast = v856;
            *(_QWORD *)v856 = *v11;
            *(_QWORD *)(v856 + 8) = 0;
            goto LABEL_1020;
          case 1726:
            v1284 = v26;
            v856 = palloc(0x18uLL);
            v26 = v1284;
            StringConstCast = v856;
            *(_QWORD *)v856 = 0;
            v857 = *v11;
            goto LABEL_1019;
          case 1727:
            base_yyparse_cold_32();
          case 1728:
            v855 = v26;
            v856 = palloc(0x18uLL);
            v26 = v855;
            StringConstCast = v856;
            *(_QWORD *)v856 = 0;
            v857 = *(v11 - 2);
LABEL_1019:
            *(_QWORD *)(v856 + 8) = v857;
LABEL_1020:
            *(_DWORD *)(v856 + 16) = 1;
            break;
          case 1729:
            v875 = v26;
            v876 = palloc(0x18uLL);
            v26 = v875;
            StringConstCast = v876;
            *(_QWORD *)v876 = 0;
            *(_QWORD *)(v876 + 8) = *(v11 - 3);
            *(_DWORD *)(v876 + 16) = 2;
            break;
          case 1730:
            v1532 = v26;
            v1200 = v24;
            v1201 = palloc(0x18uLL);
            *(_QWORD *)v1201 = 0;
            v1533 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1532;
            *v1533 = 349;
            v1533[2] = 221;
            v1203 = 1;
            v1533[4] = 1;
            v1533[6] = -1;
            *(_QWORD *)(v1201 + 8) = v1533;
            goto LABEL_1271;
          case 1731:
            v1199 = v26;
            v1200 = v24;
            v1201 = palloc(0x18uLL);
            *(_QWORD *)v1201 = 0;
            v1202 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1199;
            *v1202 = 349;
            v1202[2] = 221;
            v1202[4] = 1;
            v1202[6] = -1;
            *(_QWORD *)(v1201 + 8) = v1202;
            v1203 = 2;
LABEL_1271:
            StringConstCast = v1201;
            *(_DWORD *)(v1201 + 16) = v1203;
            v24 = v1200;
            break;
          case 1735:
          case 2310:
            v140 = v24;
            v141 = *v12;
            v142 = v26;
            v143 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v142;
            StringConstCast = (uint64_t)v143;
            *(_DWORD *)v143 = 349;
            *((_DWORD *)v143 + 2) = 225;
            *((_DWORD *)v143 + 6) = v141;
            v24 = v140;
            break;
          case 1738:
            v32 = v26;
            DefElem = makeSimpleA_Expr(0, (uint64_t)"+", 0, *v11, *(v12 - 1));
            goto LABEL_1777;
          case 1739:
          case 1949:
          case 2017:
            v32 = v26;
            DefElem = (unint64_t)doNegate((_DWORD *)*v11, *(v12 - 1), v3, v4, v5, v6, v7, v8);
            goto LABEL_1777;
          case 1740:
          case 2292:
            v2032 = v24;
            v154 = *(_DWORD *)v11;
            v106 = *v12;
            v155 = v26;
            v108 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v155;
            StringConstCast = (uint64_t)v108;
            *(_DWORD *)v108 = 349;
            *((_DWORD *)v108 + 2) = 221;
            *((_DWORD *)v108 + 4) = v154;
            goto LABEL_911;
          case 1741:
          case 2293:
            v2032 = v24;
            v105 = *v11;
            v106 = *v12;
            v107 = v26;
            v108 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v107;
            StringConstCast = (uint64_t)v108;
            *(_DWORD *)v108 = 349;
            v109 = 222;
            goto LABEL_910;
          case 1755:
            v652 = *(v12 - 1);
            v653 = 0;
            v651 = 0;
            goto LABEL_1331;
          case 1756:
            v651 = *(v11 - 1);
            v652 = *(v12 - 3);
            v653 = 2;
            goto LABEL_1331;
          case 1757:
            v651 = *(v11 - 1);
            v652 = *(v12 - 3);
            v653 = 3;
            goto LABEL_1331;
          case 1758:
            v651 = *(v11 - 1);
            v652 = *(v12 - 4);
            v653 = 4;
LABEL_1331:
            v32 = v26;
            DefElem = makeGroupingSet(v653, v651, v652, *(double *)&v9);
            goto LABEL_1777;
          case 1767:
            v729 = v26;
            v730 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v729;
            StringConstCast = v730;
            *(_DWORD *)v730 = 383;
            *(_QWORD *)(v730 + 8) = *(v11 - 1);
            *(_DWORD *)(v730 + 16) = *((_DWORD *)v11 - 4);
            *(_DWORD *)(v730 + 20) = *(_DWORD *)v11;
            break;
          case 1774:
            v645 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x98uLL);
            *(_DWORD *)StringConstCast = 236;
            *(double *)&v9 = list_make1_impl(226, *(v11 - 1));
            goto LABEL_612;
          case 1775:
            StringConstCast = *(v11 - 4);
            v645 = v26;
            v646 = lappend(*(_QWORD *)(StringConstCast + 72), *(v11 - 1));
LABEL_612:
            v26 = v645;
            *(_QWORD *)(StringConstCast + 72) = v646;
            break;
          case 1780:
            *(_QWORD *)(*(v11 - 1) + 40) = *v11;
            StringConstCast = *(v11 - 1);
            break;
          case 1781:
            StringConstCast = *v11;
            *(_QWORD *)(*(v11 - 2) + 40) = *(v11 - 1);
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 2);
            break;
          case 1782:
            StringConstCast = *(v11 - 1);
            goto LABEL_843;
          case 1783:
            StringConstCast = *(v11 - 1);
            *(_BYTE *)(StringConstCast + 4) = 1;
LABEL_843:
            *(_QWORD *)(StringConstCast + 16) = **(_QWORD **)(*v11 + 16);
            *(_QWORD *)(StringConstCast + 24) = *(_QWORD *)(*(_QWORD *)(*v11 + 16) + 8);
            break;
          case 1784:
            StringConstCast = *(v11 - 1);
            goto LABEL_1361;
          case 1785:
            StringConstCast = *(v11 - 1);
            *(_BYTE *)(StringConstCast + 4) = 1;
LABEL_1361:
            *(_QWORD *)(StringConstCast + 40) = *v11;
            break;
          case 1786:
            v988 = v26;
            v989 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v988;
            StringConstCast = v989;
            *(_DWORD *)v989 = 361;
            *(_BYTE *)(v989 + 4) = 0;
            *(_QWORD *)(v989 + 8) = *(v11 - 1);
            *(_QWORD *)(v989 + 16) = *v11;
            if (!*v11)
            {
              v1988 = *(v11 - 1);
              if (*(_DWORD *)v1988 != 236 || !*(_QWORD *)(v1988 + 72))
                base_yyparse_cold_33();
              base_yyparse_cold_34();
            }
            break;
          case 1787:
            v1626 = v26;
            v1627 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1626;
            StringConstCast = v1627;
            *(_DWORD *)v1627 = 361;
            *(_BYTE *)(v1627 + 4) = 1;
            *(_QWORD *)(v1627 + 8) = *(v11 - 1);
            *(_QWORD *)(v1627 + 16) = *v11;
            if (!*v11)
            {
              v1989 = *(v11 - 1);
              if (*(_DWORD *)v1989 != 236 || !*(_QWORD *)(v1989 + 72))
                base_yyparse_cold_35();
              base_yyparse_cold_36();
            }
            break;
          case 1789:
            *(_QWORD *)(*(v11 - 2) + 48) = *v11;
            StringConstCast = *(v11 - 2);
            break;
          case 1791:
            v1250 = v26;
            v663 = MemoryContextAllocZeroAligned(*v2108, 0x40uLL);
            v26 = v1250;
            StringConstCast = v663;
            v9 = 150;
            *(_QWORD *)v663 = 150;
            *(_BYTE *)(v663 + 8) = 0;
            goto LABEL_976;
          case 1792:
            v1450 = v26;
            v1451 = MemoryContextAllocZeroAligned(*v2108, 0x40uLL);
            StringConstCast = v1451;
            *(_DWORD *)v1451 = 150;
            *(_DWORD *)(v1451 + 4) = *((_DWORD *)v11 - 6);
            *(_BYTE *)(v1451 + 8) = 0;
            v1452 = *(v11 - 4);
            goto LABEL_1291;
          case 1793:
            v1450 = v26;
            v1451 = MemoryContextAllocZeroAligned(*v2108, 0x40uLL);
            StringConstCast = v1451;
            v9 = 150;
            *(_QWORD *)v1451 = 150;
            *(_BYTE *)(v1451 + 8) = 0;
            v1452 = *(v11 - 3);
LABEL_1291:
            *(_QWORD *)(v1451 + 16) = v1452;
            *(_QWORD *)(v1451 + 24) = *(v11 - 1);
            v1564 = (_DWORD *)*v11;
            if (*v11 && *v1564 == 226)
            {
              *(_QWORD *)(StringConstCast + 32) = v1564;
              v26 = v1450;
            }
            else
            {
              *(_QWORD *)(StringConstCast + 40) = v1564;
              v26 = v1450;
            }
            break;
          case 1794:
            v1600 = v26;
            v663 = MemoryContextAllocZeroAligned(*v2108, 0x40uLL);
            v26 = v1600;
            StringConstCast = v663;
            *(_DWORD *)v663 = 150;
            *(_DWORD *)(v663 + 4) = *((_DWORD *)v11 - 4);
            *(_BYTE *)(v663 + 8) = 1;
            v1251 = *(v11 - 4);
            goto LABEL_1334;
          case 1795:
            v662 = v26;
            v663 = MemoryContextAllocZeroAligned(*v2108, 0x40uLL);
            v26 = v662;
            StringConstCast = v663;
            v9 = 150;
            *(_QWORD *)v663 = 150;
            *(_BYTE *)(v663 + 8) = 1;
LABEL_976:
            v1251 = *(v11 - 3);
LABEL_1334:
            *(_QWORD *)(v663 + 16) = v1251;
            *(_QWORD *)(v663 + 24) = *v11;
            *(_QWORD *)(v663 + 32) = 0;
            *(_QWORD *)(v663 + 40) = 0;
            break;
          case 1796:
          case 1798:
            v161 = v26;
            v162 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v161;
            StringConstCast = v162;
            *(_DWORD *)v162 = 102;
            *(_QWORD *)(v162 + 8) = *(v11 - 3);
            *(_QWORD *)(v162 + 16) = *(v11 - 1);
            break;
          case 1797:
          case 1799:
            v100 = v26;
            v101 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v100;
            StringConstCast = v101;
            *(_DWORD *)v101 = 102;
            *(_QWORD *)(v101 + 8) = *v11;
            break;
          case 1802:
            v405 = *v11;
            goto LABEL_1186;
          case 1804:
          case 1805:
            v32 = v26;
            v130 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            *(_DWORD *)v130 = 102;
            *(_QWORD *)(v130 + 8) = *(v11 - 3);
            *(double *)&v9 = list_make2_impl(226, v130, *(v11 - 1));
            goto LABEL_1777;
          case 1806:
            v405 = 0;
LABEL_1186:
            v129 = 0;
            goto LABEL_1441;
          case 1815:
            StringConstCast = *v11;
            goto LABEL_1188;
          case 1816:
            StringConstCast = *(v11 - 1);
LABEL_1188:
            *(_BYTE *)(StringConstCast + 32) = 1;
            *(_QWORD *)(StringConstCast + 40) = 0;
            break;
          case 1817:
            StringConstCast = *v11;
            goto LABEL_1412;
          case 1818:
            StringConstCast = *(v11 - 1);
LABEL_1412:
            *(_BYTE *)(StringConstCast + 32) = 0;
            *(_QWORD *)(StringConstCast + 40) = 0;
            break;
          case 1822:
            v1628 = v26;
            v1629 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1628;
            *(_DWORD *)v1629 = 102;
            *(_QWORD *)(v1629 + 8) = *v11;
            *(_QWORD *)(*(v11 - 1) + 40) = v1629;
            StringConstCast = *(v11 - 1);
            break;
          case 1823:
            v1346 = v26;
            v1347 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1346;
            *(_DWORD *)v1347 = 102;
            *(_QWORD *)(v1347 + 8) = *v11;
            *(_QWORD *)(*(v11 - 2) + 40) = v1347;
            StringConstCast = *(v11 - 2);
            break;
          case 1824:
            v700 = v26;
            v701 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v700;
            StringConstCast = v701;
            *(_DWORD *)v701 = 363;
            *(_QWORD *)(v701 + 16) = *(v11 - 4);
            *(_QWORD *)(v701 + 24) = *(v11 - 2);
            *(_QWORD *)(v701 + 32) = *v11;
            *(_DWORD *)(v701 + 40) = *(v12 - 4);
            break;
          case 1827:
            v907 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)StringConstCast = 362;
            *(_BYTE *)(StringConstCast + 4) = 0;
            *(_WORD *)(StringConstCast + 5) = *(unsigned __int8 *)v11;
            list_make2_impl(226, *(v11 - 1), 0);
            *(double *)&v9 = list_make1_impl(226, v908);
            v26 = v907;
            *(_QWORD *)(StringConstCast + 8) = v909;
            break;
          case 1828:
            v672 = v26;
            v673 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v672;
            StringConstCast = v673;
            *(_DWORD *)v673 = 362;
            *(_BYTE *)(v673 + 4) = 0;
            *(_BYTE *)(v673 + 5) = *(_BYTE *)v11;
            *(_BYTE *)(v673 + 6) = 1;
            *(_QWORD *)(v673 + 8) = *(v11 - 2);
            break;
          case 1829:
            v405 = *(v11 - 1);
            v129 = *v11;
            goto LABEL_1441;
          case 1834:
            StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 1;
            break;
          case 1839:
            v731 = v26;
            v732 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v731;
            StringConstCast = v732;
            *(_DWORD *)v732 = 145;
            *(_QWORD *)(v732 + 8) = *v11;
            *(_DWORD *)(v732 + 16) = 0;
            break;
          case 1845:
            v1453 = v26;
            v1454 = MemoryContextAllocZeroAligned(*v2108, 0x70uLL);
            v26 = v1453;
            StringConstCast = v1454;
            *(_DWORD *)v1454 = 367;
            *(_QWORD *)(v1454 + 8) = *(v11 - 2);
            *(_QWORD *)(v1454 + 16) = *(v11 - 1);
            *(_DWORD *)(v1454 + 24) = 0;
            *(_BYTE *)(v1454 + 28) = 1;
            *(_DWORD *)(v1454 + 44) = 0;
            *(_QWORD *)(v1454 + 29) = 0;
            *(_QWORD *)(v1454 + 37) = 0;
            *(_QWORD *)(v1454 + 72) = *v11;
            *(_DWORD *)(v1454 + 80) = 0;
            *(_QWORD *)(v1454 + 88) = 0;
            *(_DWORD *)(v1454 + 104) = *(v12 - 2);
            break;
          case 1846:
            v1607 = v26;
            v1608 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1607;
            StringConstCast = v1608;
            *(_DWORD *)v1608 = 364;
            *(_QWORD *)(v1608 + 16) = *(v11 - 4);
            *(_QWORD *)(v1608 + 8) = *(v11 - 3);
            v1609 = *(v11 - 1);
            *(_QWORD *)(v1608 + 24) = 0;
            *(_QWORD *)(v1608 + 32) = v1609;
            *(_DWORD *)(v1608 + 48) = *(v12 - 6);
            break;
          case 1847:
            v684 = v26;
            v685 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v684;
            StringConstCast = v685;
            *(_DWORD *)v685 = 364;
            *(_QWORD *)(v685 + 16) = *(v11 - 4);
            *(_QWORD *)(v685 + 8) = *(v11 - 3);
            *(_QWORD *)(v685 + 32) = *(v11 - 1);
            *(_QWORD *)(v685 + 24) = *(v11 - 7);
            *(_DWORD *)(v685 + 48) = *(v12 - 11);
            break;
          case 1850:
            v1326 = v26;
            v1327 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1326;
            StringConstCast = v1327;
            *(_DWORD *)v1327 = 365;
            *(_QWORD *)(v1327 + 8) = *(v11 - 1);
            *(_BYTE *)(v1327 + 24) = 0;
            *(_QWORD *)(v1327 + 16) = *v11;
            *(_BYTE *)(v1327 + 25) = 0;
            *(_QWORD *)(v1327 + 32) = 0;
            *(_QWORD *)(v1327 + 40) = 0;
            *(_DWORD *)(v1327 + 48) = *(v12 - 1);
            break;
          case 1851:
            v2095 = v26;
            StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            *(_DWORD *)StringConstCast = 365;
            *(_QWORD *)(StringConstCast + 8) = *(v11 - 2);
            *(_QWORD *)(StringConstCast + 16) = *(v11 - 1);
            *(_WORD *)(StringConstCast + 24) = 0;
            *(_QWORD *)(StringConstCast + 32) = 0;
            *(_QWORD *)(StringConstCast + 40) = 0;
            *(_DWORD *)(StringConstCast + 48) = *(v12 - 2);
            v1455 = *v11;
            if (*v11)
            {
              v26 = v2095;
              if (*(int *)(v1455 + 4) < 1)
                break;
              v2026 = v15;
              v2057 = *v11;
              v1994 = 0;
              v2006 = v16;
              v1992 = 0;
              v1993 = 0;
              v1456 = 0;
              while (1)
              {
                v1457 = v24;
                v1458 = *(_QWORD *)(*(_QWORD *)(v1455 + 16) + 8 * v1456);
                v1459 = *(const char **)(v1458 + 16);
                if (!strcmp(v1459, "default"))
                  break;
                if (!strcmp(v1459, "path"))
                {
                  if (v1992)
                    base_yyparse_cold_38();
                  v1992 = *(_QWORD *)(v1458 + 24);
                  *(_QWORD *)(StringConstCast + 32) = v1992;
LABEL_1195:
                  v24 = v1457;
                  v26 = v2095;
                  v1455 = v2057;
                  if (++v1456 >= *(int *)(v2057 + 4))
                    goto LABEL_1820;
                }
                else
                {
                  if (strcmp(v1459, "is_not_null"))
                    base_yyparse_cold_40();
                  v26 = v2095;
                  if ((v1994 & 1) != 0)
                    base_yyparse_cold_39(StringConstCast, v1458);
                  v24 = v1457;
                  *(_BYTE *)(StringConstCast + 25) = *(_DWORD *)(*(_QWORD *)(v1458 + 24) + 8) != 0;
                  v1994 = 1;
                  v1455 = v2057;
                  if (++v1456 >= *(int *)(v2057 + 4))
                  {
LABEL_1820:
                    v16 = v2006;
                    v15 = v2026;
                    goto LABEL_1779;
                  }
                }
              }
              if (v1993)
                base_yyparse_cold_37();
              v1993 = *(_QWORD *)(v1458 + 24);
              *(_QWORD *)(StringConstCast + 40) = v1993;
              goto LABEL_1195;
            }
            v26 = v2095;
            break;
          case 1852:
            v1387 = v26;
            v1388 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1387;
            StringConstCast = v1388;
            *(_DWORD *)v1388 = 365;
            *(_QWORD *)(v1388 + 8) = *(v11 - 2);
            *(_BYTE *)(v1388 + 24) = 1;
            *(_DWORD *)(v1388 + 48) = *(v12 - 2);
            break;
          case 1856:
            v44 = *v11;
            v45 = *(v12 - 1);
            v43 = "default";
LABEL_1598:
            v32 = v26;
            DefElem = makeDefElem((uint64_t)v43, v44, v45, *(double *)&v9);
            goto LABEL_1777;
          case 1857:
            v32 = v26;
            v1460 = makeInteger(1);
            v1462 = *(v12 - 1);
            goto LABEL_1379;
          case 1858:
            v32 = v26;
            v1460 = makeInteger(0);
            v1462 = *v12;
LABEL_1379:
            DefElem = makeDefElem((uint64_t)"is_not_null", (uint64_t)v1460, v1462, v1461);
            goto LABEL_1777;
          case 1861:
          case 2120:
          case 2274:
            v152 = v26;
            v153 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v152;
            StringConstCast = v153;
            *(_DWORD *)v153 = 355;
            *(_QWORD *)(v153 + 8) = *v11;
            *(_QWORD *)(v153 + 16) = 0;
            *(_QWORD *)(v153 + 24) = *(v11 - 2);
            *(_DWORD *)(v153 + 32) = *(v12 - 2);
            break;
          case 1862:
            v1463 = v26;
            v1464 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1463;
            StringConstCast = v1464;
            *(_DWORD *)v1464 = 355;
            *(_QWORD *)(v1464 + 8) = 0;
            *(_QWORD *)(v1464 + 16) = 0;
            *(_QWORD *)(v1464 + 24) = *v11;
            *(_DWORD *)(v1464 + 32) = *(v12 - 1);
            break;
          case 1863:
            StringConstCast = *(v11 - 1);
            *(_QWORD *)(StringConstCast + 40) = *v11;
            break;
          case 1864:
            StringConstCast = *(v11 - 1);
            *(_QWORD *)(StringConstCast + 40) = *v11;
            goto LABEL_889;
          case 1865:
            StringConstCast = *(v11 - 4);
            v702 = *((_DWORD *)v11 - 2);
            goto LABEL_1336;
          case 1866:
            StringConstCast = *(v11 - 4);
            v654 = *((_DWORD *)v11 - 2);
            goto LABEL_845;
          case 1867:
            StringConstCast = *(v11 - 1);
            v702 = -1;
LABEL_1336:
            v1601 = v26;
            v1602 = makeInteger(v702);
            *(double *)&v9 = list_make1_impl(226, (uint64_t)v1602);
            v26 = v1601;
            *(_QWORD *)(StringConstCast + 40) = v1603;
            break;
          case 1868:
            StringConstCast = *(v11 - 1);
            v654 = -1;
LABEL_845:
            v1072 = v26;
            v1073 = makeInteger(v654);
            *(double *)&v9 = list_make1_impl(226, (uint64_t)v1073);
            v26 = v1072;
            *(_QWORD *)(StringConstCast + 40) = v1074;
LABEL_889:
            *(_BYTE *)(StringConstCast + 20) = 1;
            break;
          case 1869:
            v768 = v24;
            v769 = *(v11 - 2);
            v770 = -1;
            goto LABEL_770;
          case 1870:
            v768 = v24;
            v769 = *(v11 - 3);
            v770 = *((_DWORD *)v11 - 2);
LABEL_770:
            v990 = v26;
            v991 = makeInteger(v770);
            v992 = v769;
            v24 = v768;
            DefElem = lappend(v992, (uint64_t)v991);
            v26 = v990;
            goto LABEL_1778;
          case 1871:
          case 1886:
          case 1941:
          case 2134:
          case 2136:
          case 2138:
          case 2144:
          case 2147:
          case 2149:
          case 2167:
          case 2170:
          case 2217:
          case 2234:
          case 2240:
          case 2253:
          case 2255:
          case 2263:
          case 2266:
          case 2271:
            StringConstCast = 0;
            break;
          case 1872:
          case 1873:
          case 1874:
          case 1875:
          case 1876:
          case 1879:
          case 1880:
          case 1881:
          case 1882:
          case 1900:
          case 1901:
          case 1902:
          case 1906:
          case 1907:
          case 1908:
          case 1933:
          case 1944:
          case 2014:
          case 2041:
          case 2042:
          case 2046:
          case 2047:
          case 2064:
          case 2065:
          case 2066:
          case 2111:
          case 2127:
          case 2129:
          case 2137:
          case 2142:
          case 2146:
          case 2148:
          case 2175:
          case 2176:
          case 2204:
          case 2218:
          case 2225:
          case 2232:
          case 2239:
          case 2241:
          case 2242:
          case 2244:
          case 2245:
          case 2252:
          case 2254:
          case 2262:
          case 2270:
          case 2284:
          case 2285:
          case 2286:
          case 2287:
          case 2288:
          case 2289:
            StringConstCast = *v11;
            break;
          case 1877:
            StringConstCast = *(v11 - 1);
            *(_QWORD *)(StringConstCast + 24) = *v11;
            break;
          case 1878:
            v2002 = *(v11 - 3);
            v1134 = v2108;
            v2088 = v26;
            v2021 = v15;
            v2049 = v24;
            v1135 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *v1135 = 349;
            v1135[2] = 221;
            v1135[4] = 0x7FFF;
            v1135[6] = -1;
            v1136 = v16;
            v1137 = *((_DWORD *)v11 - 2);
            v1138 = *(v12 - 1);
            v1139 = (_DWORD *)MemoryContextAllocZeroAligned(*v1134, 0x20uLL);
            *v1139 = 349;
            v1139[2] = 221;
            v1139[4] = v1137;
            v16 = v1136;
            v1139[6] = v1138;
            v1140 = (uint64_t)v1135;
            v15 = v2021;
            v24 = v2049;
            *(double *)&v9 = list_make2_impl(226, v1140, (uint64_t)v1139);
            v26 = v2088;
            StringConstCast = v2002;
            *(_QWORD *)(v2002 + 24) = v1141;
            break;
          case 1883:
            v53 = v26;
            TypeName = makeTypeName(*(v11 - 1));
            goto LABEL_810;
          case 1884:
            v814 = v26;
            v815 = makeString(*(v11 - 2));
            v816 = lcons(v815, *(v11 - 1));
            v818 = makeTypeNameFromNameList(v816, v817);
            v26 = v814;
            StringConstCast = v818;
            *(_QWORD *)(v818 + 24) = *v11;
            *(_DWORD *)(v818 + 48) = *(v12 - 2);
            break;
          case 1885:
          case 2117:
          case 2128:
          case 2130:
          case 2133:
          case 2135:
          case 2166:
          case 2169:
          case 2191:
          case 2193:
          case 2195:
          case 2247:
            StringConstCast = *(v11 - 1);
            break;
          case 1887:
          case 1888:
            v110 = "int4";
            goto LABEL_1344;
          case 1889:
            v110 = "int2";
            goto LABEL_1344;
          case 1890:
            v110 = "int8";
            goto LABEL_1344;
          case 1891:
            v110 = "float4";
            goto LABEL_1344;
          case 1892:
            StringConstCast = *v11;
            *(_DWORD *)(*v11 + 48) = *(v12 - 1);
            break;
          case 1893:
            v1389 = "float8";
            goto LABEL_1215;
          case 1894:
          case 1895:
          case 1896:
            v53 = v26;
            TypeName = SystemTypeName((uint64_t)"numeric");
LABEL_810:
            v26 = v53;
            StringConstCast = TypeName;
            *(_QWORD *)(TypeName + 24) = *v11;
            goto LABEL_1216;
          case 1897:
            v110 = "BOOL";
            goto LABEL_1344;
          case 1898:
            v1043 = *((_DWORD *)v11 - 2);
            if (v1043 <= 0)
              base_yyparse_cold_41();
            if (v1043 > 0x18)
            {
              if (v1043 > 0x35)
                base_yyparse_cold_42();
              v1083 = v26;
              NotExpr = SystemTypeName((uint64_t)"float8");
              goto LABEL_1862;
            }
            v762 = "float4";
LABEL_814:
            v32 = v26;
            DefElem = SystemTypeName((uint64_t)v762);
            goto LABEL_1777;
          case 1899:
            v762 = "float8";
            goto LABEL_814;
          case 1903:
          case 1909:
            StringConstCast = *v11;
            *(_QWORD *)(*v11 + 24) = 0;
            break;
          case 1904:
            if (*((_BYTE *)v11 - 24))
              v778 = "varbit";
            else
              v778 = "bit";
            v779 = v26;
            v780 = SystemTypeName((uint64_t)v778);
            v26 = v779;
            StringConstCast = v780;
            *(_QWORD *)(v780 + 24) = *(v11 - 1);
            *(_DWORD *)(v780 + 48) = *(v12 - 4);
            break;
          case 1905:
            v993 = v26;
            if (*(_BYTE *)v11)
            {
              StringConstCast = SystemTypeName((uint64_t)"varbit");
            }
            else
            {
              StringConstCast = SystemTypeName((uint64_t)"bit");
              v1978 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
              *v1978 = 349;
              v1978[2] = 221;
              v1978[4] = 1;
              v1978[6] = -1;
              *(double *)&v9 = list_make1_impl(226, (uint64_t)v1978);
              *(_QWORD *)(StringConstCast + 24) = v1979;
            }
            v1471 = *(v12 - 1);
            goto LABEL_1825;
          case 1910:
            v2096 = v26;
            StringConstCast = SystemTypeName(*(v11 - 3));
            v2058 = v24;
            v1465 = *((_DWORD *)v11 - 2);
            v1466 = *(v12 - 1);
            v1467 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *v1467 = 349;
            v1467[2] = 221;
            v1467[4] = v1465;
            v24 = v2058;
            v1467[6] = v1466;
            *(double *)&v9 = list_make1_impl(226, (uint64_t)v1467);
            v26 = v2096;
            *(_QWORD *)(StringConstCast + 24) = v1468;
            *(_DWORD *)(StringConstCast + 48) = *(v12 - 3);
            break;
          case 1911:
            v993 = v26;
            StringConstCast = SystemTypeName(*v11);
            if (!strcmp((const char *)*v11, "bpchar"))
            {
              v1469 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
              *v1469 = 349;
              v1469[2] = 221;
              v1469[4] = 1;
              v1469[6] = -1;
              *(double *)&v9 = list_make1_impl(226, (uint64_t)v1469);
              *(_QWORD *)(StringConstCast + 24) = v1470;
            }
            v1471 = *v12;
LABEL_1825:
            *(_DWORD *)(StringConstCast + 48) = v1471;
            v26 = v993;
            break;
          case 1912:
          case 1913:
          case 1915:
          case 1916:
          case 1917:
            if (*(_BYTE *)v11)
              StringConstCast = (uint64_t)"varchar";
            else
              StringConstCast = (uint64_t)"bpchar";
            break;
          case 1914:
            StringConstCast = (uint64_t)"varchar";
            break;
          case 1918:
          case 1925:
          case 2124:
            StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 1;
            break;
          case 1919:
          case 1926:
          case 1927:
          case 2125:
          case 2126:
            StringConstCast &= 0xFFFFFFFFFFFFFF00;
            break;
          case 1920:
            v717 = *(unsigned __int8 *)v11;
            v718 = "timestamptz";
            v719 = "timestamp";
            goto LABEL_1160;
          case 1921:
            v712 = *(unsigned __int8 *)v11;
            v713 = "timestamptz";
            v714 = "timestamp";
            goto LABEL_1212;
          case 1922:
            v717 = *(unsigned __int8 *)v11;
            v718 = "timetz";
            v719 = "time";
LABEL_1160:
            if (v717)
              v1425 = (uint64_t)v718;
            else
              v1425 = (uint64_t)v719;
            v2094 = v26;
            StringConstCast = SystemTypeName(v1425);
            v2056 = v24;
            v1426 = *((_DWORD *)v11 - 4);
            v1427 = *(v12 - 2);
            v1428 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *v1428 = 349;
            v1428[2] = 221;
            v1428[4] = v1426;
            v24 = v2056;
            v1428[6] = v1427;
            *(double *)&v9 = list_make1_impl(226, (uint64_t)v1428);
            v26 = v2094;
            *(_QWORD *)(StringConstCast + 24) = v1429;
            *(_DWORD *)(StringConstCast + 48) = *(v12 - 4);
            break;
          case 1923:
            v712 = *(unsigned __int8 *)v11;
            v713 = "timetz";
            v714 = "time";
LABEL_1212:
            if (v712)
              v1389 = v713;
            else
              v1389 = v714;
LABEL_1215:
            v1472 = v26;
            TypeName = SystemTypeName((uint64_t)v1389);
            v26 = v1472;
            StringConstCast = TypeName;
LABEL_1216:
            *(_DWORD *)(TypeName + 48) = *(v12 - 1);
            break;
          case 1924:
            v110 = "interval";
LABEL_1344:
            v1610 = v26;
            v1611 = SystemTypeName((uint64_t)v110);
            v26 = v1610;
            StringConstCast = v1611;
            *(_DWORD *)(v1611 + 48) = *v12;
            break;
          case 1928:
            v686 = v24;
            v687 = *v12;
            v688 = v26;
            v689 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v690 = (uint64_t)v689;
            *v689 = 349;
            v689[2] = 221;
            v691 = 4;
            goto LABEL_1352;
          case 1929:
            v686 = v24;
            v687 = *v12;
            v688 = v26;
            v689 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v690 = (uint64_t)v689;
            *v689 = 349;
            v689[2] = 221;
            v691 = 2;
            goto LABEL_1352;
          case 1930:
            v686 = v24;
            v687 = *v12;
            v688 = v26;
            v689 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v690 = (uint64_t)v689;
            *v689 = 349;
            v689[2] = 221;
            v691 = 8;
            goto LABEL_1352;
          case 1931:
            v686 = v24;
            v687 = *v12;
            v688 = v26;
            v689 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v690 = (uint64_t)v689;
            *v689 = 349;
            v689[2] = 221;
            v691 = 1024;
            goto LABEL_1352;
          case 1932:
            v686 = v24;
            v687 = *v12;
            v688 = v26;
            v689 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v690 = (uint64_t)v689;
            *v689 = 349;
            v689[2] = 221;
            v691 = 2048;
            goto LABEL_1352;
          case 1934:
            v686 = v24;
            v687 = *(v12 - 2);
            v688 = v26;
            v689 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v690 = (uint64_t)v689;
            *v689 = 349;
            v689[2] = 221;
            v691 = 6;
            goto LABEL_1352;
          case 1935:
            v686 = v24;
            v687 = *(v12 - 2);
            v688 = v26;
            v689 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v690 = (uint64_t)v689;
            *v689 = 349;
            v689[2] = 221;
            v691 = 1032;
            goto LABEL_1352;
          case 1936:
            v686 = v24;
            v687 = *(v12 - 2);
            v688 = v26;
            v689 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v690 = (uint64_t)v689;
            *v689 = 349;
            v689[2] = 221;
            v691 = 3080;
            goto LABEL_1352;
          case 1937:
            StringConstCast = *v11;
            v2041 = v24;
            v703 = *(v12 - 2);
            v1075 = v26;
            v705 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1075;
            *v705 = 349;
            v705[2] = 221;
            v706 = 7176;
            goto LABEL_1218;
          case 1938:
            v686 = v24;
            v687 = *(v12 - 2);
            v688 = v26;
            v689 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v690 = (uint64_t)v689;
            *v689 = 349;
            v689[2] = 221;
            v691 = 3072;
            goto LABEL_1352;
          case 1939:
            StringConstCast = *v11;
            v2041 = v24;
            v703 = *(v12 - 2);
            v704 = v26;
            v705 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v704;
            *v705 = 349;
            v705[2] = 221;
            v706 = 7168;
            goto LABEL_1218;
          case 1940:
            StringConstCast = *v11;
            v2041 = v24;
            v703 = *(v12 - 2);
            v1473 = v26;
            v705 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1473;
            *v705 = 349;
            v705[2] = 221;
            v706 = 6144;
LABEL_1218:
            v705[4] = v706;
            v705[6] = v703;
            v24 = v2041;
            **(_QWORD **)(StringConstCast + 16) = v705;
            break;
          case 1942:
            v686 = v24;
            v687 = *v12;
            v688 = v26;
            v689 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v690 = (uint64_t)v689;
            *v689 = 349;
            v689[2] = 221;
            v691 = 4096;
LABEL_1352:
            v689[4] = v691;
            v689[6] = v687;
            v24 = v686;
            *(double *)&v9 = list_make1_impl(226, v690);
            v26 = v688;
            goto LABEL_1778;
          case 1943:
            v1534 = *(v12 - 3);
            v2007 = v16;
            v1535 = v2108;
            v2098 = v26;
            v2060 = v24;
            v1536 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *v1536 = 349;
            v1536[2] = 221;
            v1536[4] = 4096;
            v1536[6] = v1534;
            v1537 = *((_DWORD *)v11 - 2);
            v1538 = *(v12 - 1);
            v1539 = *v1535;
            v16 = v2007;
            v1540 = (_DWORD *)MemoryContextAllocZeroAligned(v1539, 0x20uLL);
            *v1540 = 349;
            v1540[2] = 221;
            v1540[4] = v1537;
            v1540[6] = v1538;
            v1541 = (uint64_t)v1536;
            v24 = v2060;
            *(double *)&v9 = list_make2_impl(226, v1541, (uint64_t)v1540);
            v26 = v2098;
            StringConstCast = (uint64_t)v1542;
            break;
          case 1945:
            v733 = v24;
            v734 = *(v11 - 2);
            v735 = *v11;
            v1996 = v16;
            v2014 = v15;
            v736 = *(v12 - 1);
            v737 = v26;
            v738 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v737;
            *(_DWORD *)v738 = 357;
            *(_QWORD *)(v738 + 8) = v734;
            *(_QWORD *)(v738 + 16) = v735;
            v24 = v733;
            *(_DWORD *)(v738 + 24) = v736;
            v15 = v2014;
            v16 = v1996;
            StringConstCast = v738;
            break;
          case 1946:
            v1474 = v26;
            v820 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1474;
            StringConstCast = v820;
            *(_DWORD *)v820 = 358;
            *(_QWORD *)(v820 + 8) = *(v11 - 2);
            *(_QWORD *)(v820 + 16) = *v11;
            goto LABEL_1220;
          case 1947:
            v994 = v26;
            SystemFuncName((uint64_t)"timezone");
            v995 = v24;
            v997 = v996;
            v998 = list_make2_impl(226, *v11, *(v11 - 4));
            v1000 = v999;
            v1001 = v997;
            v24 = v995;
            DefElem = makeFuncCall(v1001, v1000, *(v12 - 3), v998);
            v26 = v994;
            goto LABEL_1778;
          case 1948:
          case 2016:
            v97 = *v11;
            v98 = *(v12 - 1);
            v99 = "+";
            v111 = 0;
            v96 = 0;
            goto LABEL_205;
          case 1950:
          case 2018:
            v96 = *(v11 - 2);
            v97 = *v11;
            v98 = *(v12 - 1);
            v99 = "+";
            goto LABEL_204;
          case 1951:
          case 2019:
            v96 = *(v11 - 2);
            v97 = *v11;
            v98 = *(v12 - 1);
            v99 = "-";
            goto LABEL_204;
          case 1952:
          case 2020:
            v96 = *(v11 - 2);
            v97 = *v11;
            v98 = *(v12 - 1);
            v99 = "*";
            goto LABEL_204;
          case 1953:
          case 2021:
            v96 = *(v11 - 2);
            v97 = *v11;
            v98 = *(v12 - 1);
            v99 = "/";
            goto LABEL_204;
          case 1954:
          case 2022:
            v96 = *(v11 - 2);
            v97 = *v11;
            v98 = *(v12 - 1);
            v99 = "%";
            goto LABEL_204;
          case 1955:
          case 2023:
            v96 = *(v11 - 2);
            v97 = *v11;
            v98 = *(v12 - 1);
            v99 = "^";
            goto LABEL_204;
          case 1956:
          case 2024:
            v96 = *(v11 - 2);
            v97 = *v11;
            v98 = *(v12 - 1);
            v99 = "<";
            goto LABEL_204;
          case 1957:
          case 2025:
            v96 = *(v11 - 2);
            v97 = *v11;
            v98 = *(v12 - 1);
            v99 = ">";
            goto LABEL_204;
          case 1958:
          case 2026:
            v96 = *(v11 - 2);
            v97 = *v11;
            v98 = *(v12 - 1);
            v99 = "=";
            goto LABEL_204;
          case 1959:
          case 2027:
            v96 = *(v11 - 2);
            v97 = *v11;
            v98 = *(v12 - 1);
            v99 = "<=";
            goto LABEL_204;
          case 1960:
          case 2028:
            v96 = *(v11 - 2);
            v97 = *v11;
            v98 = *(v12 - 1);
            v99 = ">=";
            goto LABEL_204;
          case 1961:
          case 2029:
            v96 = *(v11 - 2);
            v97 = *v11;
            v98 = *(v12 - 1);
            v99 = "<>";
LABEL_204:
            v111 = 0;
            goto LABEL_205;
          case 1962:
          case 2032:
            v88 = *(v11 - 2);
            v87 = *(v11 - 1);
            v90 = *v11;
            v89 = *(v12 - 1);
            goto LABEL_202;
          case 1963:
          case 2033:
            v87 = *(v11 - 1);
            v90 = *v11;
            v89 = *(v12 - 1);
            v88 = 0;
            goto LABEL_202;
          case 1964:
          case 2034:
            v88 = *(v11 - 1);
            v87 = *v11;
            v89 = *v12;
            v90 = 0;
LABEL_202:
            v32 = v26;
            DefElem = makeA_Expr(0, v87, v88, v90, v89);
            goto LABEL_1777;
          case 1965:
          case 2030:
            v102 = *(v11 - 2);
            v103 = *v11;
            v104 = *(v12 - 1);
            goto LABEL_199;
          case 1966:
          case 2031:
            v102 = *(v11 - 1);
            v104 = *v12;
            v103 = 0;
LABEL_199:
            v32 = v26;
            DefElem = makeInterval_or_AExprOp(v102, v103, v104);
            goto LABEL_1777;
          case 1967:
            v32 = v26;
            DefElem = makeAndExpr((_DWORD *)*(v11 - 2), *v11, *(v12 - 1));
            goto LABEL_1777;
          case 1968:
            v32 = v26;
            DefElem = makeOrExpr((_DWORD *)*(v11 - 2), *v11, *(v12 - 1));
            goto LABEL_1777;
          case 1969:
          case 1970:
            v32 = v26;
            DefElem = makeNotExpr(*v11, *(v12 - 1));
            goto LABEL_1777;
          case 1971:
            v96 = *(v11 - 2);
            v97 = *v11;
            v98 = *(v12 - 1);
            v99 = "~~";
            v111 = 8;
            goto LABEL_205;
          case 1972:
            v739 = v26;
            SystemFuncName((uint64_t)"like_escape");
            v792 = v24;
            v794 = v793;
            v795 = list_make2_impl(226, *(v11 - 2), *v11);
            v797 = v796;
            v798 = v794;
            v24 = v792;
            v747 = makeFuncCall(v798, v797, *(v12 - 3), v795);
            v748 = *(v11 - 4);
            v749 = *(v12 - 3);
            v799 = "~~";
            goto LABEL_1310;
          case 1973:
            v96 = *(v11 - 3);
            v97 = *v11;
            v98 = *(v12 - 2);
            v99 = "!~~";
            v111 = 8;
            goto LABEL_205;
          case 1974:
            v739 = v26;
            SystemFuncName((uint64_t)"like_escape");
            v1579 = v24;
            v1581 = v1580;
            v1582 = list_make2_impl(226, *(v11 - 2), *v11);
            v1584 = v1583;
            v1585 = v1581;
            v24 = v1579;
            v747 = makeFuncCall(v1585, v1584, *(v12 - 4), v1582);
            v748 = *(v11 - 5);
            v749 = *(v12 - 4);
            v799 = "!~~";
LABEL_1310:
            v917 = 8;
            goto LABEL_1311;
          case 1975:
            v96 = *(v11 - 2);
            v97 = *v11;
            v98 = *(v12 - 1);
            v99 = "~~*";
            v111 = 9;
            goto LABEL_205;
          case 1976:
            v739 = v26;
            SystemFuncName((uint64_t)"like_escape");
            v1076 = v24;
            v1078 = v1077;
            v1079 = list_make2_impl(226, *(v11 - 2), *v11);
            v1081 = v1080;
            v1082 = v1078;
            v24 = v1076;
            v747 = makeFuncCall(v1082, v1081, *(v12 - 3), v1079);
            v748 = *(v11 - 4);
            v749 = *(v12 - 3);
            v799 = "~~*";
            v917 = 9;
            goto LABEL_1311;
          case 1977:
            v96 = *(v11 - 3);
            v97 = *v11;
            v98 = *(v12 - 2);
            v99 = "!~~*";
            v111 = 9;
            goto LABEL_205;
          case 1978:
            v739 = v26;
            SystemFuncName((uint64_t)"like_escape");
            v910 = v24;
            v912 = v911;
            v913 = list_make2_impl(226, *(v11 - 2), *v11);
            v915 = v914;
            v916 = v912;
            v24 = v910;
            v747 = makeFuncCall(v916, v915, *(v12 - 4), v913);
            v748 = *(v11 - 5);
            v749 = *(v12 - 4);
            v799 = "!~~*";
            v917 = 9;
            goto LABEL_1311;
          case 1979:
            v739 = v26;
            SystemFuncName((uint64_t)"similar_to_escape");
            v1204 = v24;
            v1206 = v1205;
            v1207 = list_make1_impl(226, *v11);
            v1209 = v1208;
            v1210 = v1206;
            v24 = v1204;
            v747 = makeFuncCall(v1210, v1209, *(v12 - 2), v1207);
            v748 = *(v11 - 3);
            v749 = *(v12 - 2);
            goto LABEL_935;
          case 1980:
            v739 = v26;
            SystemFuncName((uint64_t)"similar_to_escape");
            v740 = v24;
            v742 = v741;
            v743 = list_make2_impl(226, *(v11 - 2), *v11);
            v745 = v744;
            v746 = v742;
            v24 = v740;
            v747 = makeFuncCall(v746, v745, *(v12 - 4), v743);
            v748 = *(v11 - 5);
            v749 = *(v12 - 4);
LABEL_935:
            v799 = "~";
            v917 = 10;
            goto LABEL_1311;
          case 1981:
            v739 = v26;
            SystemFuncName((uint64_t)"similar_to_escape");
            v1390 = v24;
            v1392 = v1391;
            v1393 = list_make1_impl(226, *v11);
            v1395 = v1394;
            v1396 = v1392;
            v24 = v1390;
            v747 = makeFuncCall(v1396, v1395, *(v12 - 3), v1393);
            v748 = *(v11 - 4);
            v749 = *(v12 - 3);
            goto LABEL_1134;
          case 1982:
            v739 = v26;
            SystemFuncName((uint64_t)"similar_to_escape");
            v1142 = v24;
            v1144 = v1143;
            v1145 = list_make2_impl(226, *(v11 - 2), *v11);
            v1147 = v1146;
            v1148 = v1144;
            v24 = v1142;
            v747 = makeFuncCall(v1148, v1147, *(v12 - 5), v1145);
            v748 = *(v11 - 6);
            v749 = *(v12 - 5);
LABEL_1134:
            v799 = "!~";
            v917 = 10;
            goto LABEL_1311;
          case 1983:
            v819 = v26;
            v820 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v819;
            StringConstCast = v820;
            *(_DWORD *)v820 = 140;
            *(_QWORD *)(v820 + 8) = *(v11 - 2);
            *(_DWORD *)(v820 + 16) = 0;
LABEL_1220:
            *(_DWORD *)(v820 + 24) = *(v12 - 1);
            break;
          case 1984:
            v1296 = v26;
            v1150 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1296;
            StringConstCast = v1150;
            *(_DWORD *)v1150 = 140;
            *(_QWORD *)(v1150 + 8) = *(v11 - 1);
            *(_DWORD *)(v1150 + 16) = 0;
            goto LABEL_1038;
          case 1985:
            v1397 = v26;
            v1398 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1397;
            StringConstCast = v1398;
            *(_DWORD *)v1398 = 140;
            *(_QWORD *)(v1398 + 8) = *(v11 - 3);
            *(_DWORD *)(v1398 + 16) = 1;
            *(_DWORD *)(v1398 + 24) = *(v12 - 2);
            break;
          case 1986:
            v1149 = v26;
            v1150 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1149;
            StringConstCast = v1150;
            *(_DWORD *)v1150 = 140;
            *(_QWORD *)(v1150 + 8) = *(v11 - 1);
            *(_DWORD *)(v1150 + 16) = 1;
LABEL_1038:
            *(_DWORD *)(v1150 + 24) = *v12;
            break;
          case 1987:
            v1399 = *(v11 - 2);
            if (!v1399 || *(_DWORD *)(v1399 + 4) != 2)
              base_yyparse_cold_43();
            v2093 = v26;
            if (!*v11 || *(_DWORD *)(*v11 + 4) != 2)
              base_yyparse_cold_44();
            v1400 = v24;
            SystemFuncName((uint64_t)"overlaps");
            v1402 = v1401;
            v1403 = list_concat(*(v11 - 2), (const void **)*v11);
            StringConstCast = makeFuncCall(v1402, v1403, *(v12 - 1), v1404);
            v24 = v1400;
            v26 = v2093;
            break;
          case 1988:
            v1044 = v26;
            v1003 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1044;
            StringConstCast = v1003;
            *(_DWORD *)v1003 = 141;
            *(_QWORD *)(v1003 + 8) = *(v11 - 2);
            *(_DWORD *)(v1003 + 16) = 0;
            goto LABEL_1223;
          case 1989:
            v1151 = v26;
            v1152 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1151;
            StringConstCast = v1152;
            *(_DWORD *)v1152 = 141;
            *(_QWORD *)(v1152 + 8) = *(v11 - 3);
            v1153 = 1;
            goto LABEL_937;
          case 1990:
            v1475 = v26;
            v1003 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1475;
            StringConstCast = v1003;
            *(_DWORD *)v1003 = 141;
            *(_QWORD *)(v1003 + 8) = *(v11 - 2);
            v1004 = 2;
            goto LABEL_1222;
          case 1991:
            v1154 = v26;
            v1152 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1154;
            StringConstCast = v1152;
            *(_DWORD *)v1152 = 141;
            *(_QWORD *)(v1152 + 8) = *(v11 - 3);
            v1153 = 3;
            goto LABEL_937;
          case 1992:
            v1002 = v26;
            v1003 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1002;
            StringConstCast = v1003;
            *(_DWORD *)v1003 = 141;
            *(_QWORD *)(v1003 + 8) = *(v11 - 2);
            v1004 = 4;
LABEL_1222:
            *(_DWORD *)(v1003 + 16) = v1004;
LABEL_1223:
            *(_DWORD *)(v1003 + 20) = *(v12 - 1);
            break;
          case 1993:
            v1211 = v26;
            v1152 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1211;
            StringConstCast = v1152;
            *(_DWORD *)v1152 = 141;
            *(_QWORD *)(v1152 + 8) = *(v11 - 3);
            v1153 = 5;
LABEL_937:
            *(_DWORD *)(v1152 + 16) = v1153;
            *(_DWORD *)(v1152 + 20) = *(v12 - 2);
            break;
          case 1994:
          case 2035:
            v96 = *(v11 - 4);
            v97 = *v11;
            v98 = *(v12 - 3);
            v99 = "=";
            v111 = 3;
            goto LABEL_205;
          case 1995:
          case 2036:
            v96 = *(v11 - 5);
            v97 = *v11;
            v98 = *(v12 - 4);
            v99 = "=";
            v111 = 4;
            goto LABEL_205;
          case 1996:
          case 2037:
            v96 = *(v11 - 5);
            v97 = *(v11 - 1);
            v98 = *(v12 - 4);
            v99 = "=";
            v111 = 6;
            goto LABEL_205;
          case 1997:
          case 2038:
            v96 = *(v11 - 6);
            v97 = *(v11 - 1);
            v98 = *(v12 - 5);
            v99 = "<>";
            v111 = 6;
            goto LABEL_205;
          case 1998:
            v1025 = v24;
            v1026 = *(v11 - 5);
            v739 = v26;
            list_make2_impl(226, *(v11 - 2), *v11);
            v747 = v1348;
            v749 = *(v12 - 4);
            v799 = "BETWEEN";
            v917 = 11;
            goto LABEL_1097;
          case 1999:
            v1025 = v24;
            v1026 = *(v11 - 6);
            v739 = v26;
            list_make2_impl(226, *(v11 - 2), *v11);
            v747 = v1155;
            v749 = *(v12 - 5);
            v799 = "NOT BETWEEN";
            v917 = 12;
            goto LABEL_1097;
          case 2000:
            v1025 = v24;
            v1026 = *(v11 - 5);
            v739 = v26;
            list_make2_impl(226, *(v11 - 2), *v11);
            v747 = v1328;
            v749 = *(v12 - 4);
            v799 = "BETWEEN SYMMETRIC";
            v917 = 13;
            goto LABEL_1097;
          case 2001:
            v1025 = v24;
            v1026 = *(v11 - 6);
            v739 = v26;
            list_make2_impl(226, *(v11 - 2), *v11);
            v747 = v1027;
            v749 = *(v12 - 5);
            v799 = "NOT BETWEEN SYMMETRIC";
            v917 = 14;
LABEL_1097:
            v748 = v1026;
            v24 = v1025;
LABEL_1311:
            DefElem = makeSimpleA_Expr(v917, (uint64_t)v799, v748, v747, v749);
            v26 = v739;
            goto LABEL_1778;
          case 2002:
            StringConstCast = *v11;
            if (*(_DWORD *)*v11 == 120)
            {
              v9 = 2;
              *(_QWORD *)(StringConstCast + 4) = 2;
              *(_QWORD *)(StringConstCast + 16) = *(v11 - 2);
              *(_QWORD *)(StringConstCast + 24) = 0;
              *(_DWORD *)(StringConstCast + 40) = *(v12 - 1);
              break;
            }
            v96 = *(v11 - 2);
            v98 = *(v12 - 1);
            v99 = "=";
            v111 = 7;
            v97 = *v11;
LABEL_205:
            v32 = v26;
            DefElem = makeSimpleA_Expr(v111, (uint64_t)v99, v96, v97, v98);
            goto LABEL_1777;
          case 2003:
            v1083 = v26;
            v1370 = *v11;
            if (*(_DWORD *)*v11 == 120)
            {
              *(_QWORD *)(v1370 + 4) = 2;
              *(_QWORD *)(v1370 + 16) = *(v11 - 3);
              *(_QWORD *)(v1370 + 24) = 0;
              *(_DWORD *)(v1370 + 40) = *(v12 - 2);
              NotExpr = makeNotExpr(v1370, *(v12 - 2));
            }
            else
            {
              NotExpr = makeSimpleA_Expr(7, (uint64_t)"<>", *(v11 - 3), v1370, *(v12 - 2));
            }
            goto LABEL_1862;
          case 2004:
            v1297 = v26;
            v1298 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1297;
            StringConstCast = v1298;
            *(_DWORD *)v1298 = 120;
            *(_DWORD *)(v1298 + 4) = *((_DWORD *)v11 - 2);
            *(_DWORD *)(v1298 + 8) = 0;
            *(_QWORD *)(v1298 + 16) = *(v11 - 3);
            *(_QWORD *)(v1298 + 24) = *(v11 - 2);
            *(_QWORD *)(v1298 + 32) = *v11;
            *(_DWORD *)(v1298 + 40) = *(v12 - 2);
            break;
          case 2005:
            v1083 = v26;
            if (*((_DWORD *)v11 - 6) == 2)
              v1084 = 1;
            else
              v1084 = 2;
            NotExpr = makeA_Expr(v1084, *(v11 - 4), *(v11 - 5), *(v11 - 1), *(v12 - 4));
            goto LABEL_1862;
          case 2006:
            base_yyparse_cold_45();
          case 2007:
          case 2039:
            v121 = v26;
            list_make1_impl(226, *(v11 - 2));
            v122 = v24;
            v124 = v123;
            v2071 = *(v12 - 1);
            DefElem = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v121;
            v9 = 0x70000008BLL;
            goto LABEL_748;
          case 2008:
          case 2040:
            v2070 = v26;
            list_make1_impl(226, *(v11 - 3));
            v113 = v24;
            v115 = v114;
            v116 = *(v12 - 2);
            v117 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            *(_QWORD *)v117 = 0x70000008BLL;
            *(_QWORD *)(v117 + 8) = 0;
            *(_QWORD *)(v117 + 16) = 0;
            *(_QWORD *)(v117 + 24) = 0;
            *(_QWORD *)(v117 + 32) = v115;
            v24 = v113;
            *(_DWORD *)(v117 + 44) = 0;
            *(_DWORD *)(v117 + 52) = v116;
            v118 = *(v12 - 2);
            goto LABEL_1225;
          case 2009:
            v834 = v26;
            SystemFuncName((uint64_t)"is_normalized");
            v835 = v24;
            v837 = v1543;
            v838 = list_make1_impl(226, *(v11 - 2));
            v840 = v1544;
            v841 = *(v12 - 1);
            goto LABEL_1275;
          case 2010:
            v2082 = v26;
            SystemFuncName((uint64_t)"is_normalized");
            v822 = v821;
            v2015 = *(v11 - 3);
            v2043 = v24;
            v823 = v15;
            v824 = *(v11 - 1);
            v825 = v16;
            v826 = *(v12 - 1);
            v827 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)v827 = 349;
            *(_DWORD *)(v827 + 8) = 223;
            *(_QWORD *)(v827 + 16) = v824;
            v15 = v823;
            *(_DWORD *)(v827 + 24) = v826;
            v16 = v825;
            v24 = v2043;
            v828 = list_make2_impl(226, v2015, v827);
            v830 = v829;
            v831 = *(v12 - 2);
            goto LABEL_1144;
          case 2011:
            v1349 = v26;
            SystemFuncName((uint64_t)"is_normalized");
            v1350 = v24;
            v1352 = v1351;
            v1353 = list_make1_impl(226, *(v11 - 3));
            v1355 = v1354;
            v1356 = v1352;
            v24 = v1350;
            v1357 = makeFuncCall(v1356, v1355, *(v12 - 2), v1353);
            DefElem = makeNotExpr(v1357, *(v12 - 2));
            v26 = v1349;
            goto LABEL_1778;
          case 2012:
            v2070 = v26;
            SystemFuncName((uint64_t)"is_normalized");
            v1477 = v1476;
            v2027 = *(v11 - 4);
            v2059 = v24;
            v1478 = v15;
            v1479 = *(v11 - 1);
            v1480 = v16;
            v1481 = *(v12 - 1);
            v1482 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)v1482 = 349;
            *(_DWORD *)(v1482 + 8) = 223;
            *(_QWORD *)(v1482 + 16) = v1479;
            v15 = v1478;
            *(_DWORD *)(v1482 + 24) = v1481;
            v16 = v1480;
            v24 = v2059;
            v1483 = list_make2_impl(226, v2027, v1482);
            v117 = makeFuncCall(v1477, v1484, *(v12 - 3), v1483);
            v118 = *(v12 - 3);
LABEL_1225:
            DefElem = makeNotExpr(v117, v118);
            v26 = v2070;
            goto LABEL_1778;
          case 2013:
            v1430 = v26;
            v1431 = (char *)MemoryContextAllocZero(*v2108, 0x14uLL);
            v26 = v1430;
            StringConstCast = (uint64_t)v1431;
            *(_DWORD *)v1431 = 144;
            *((_DWORD *)v1431 + 4) = *v12;
            break;
          case 2015:
            v1028 = v24;
            v1029 = *(v11 - 2);
            v1030 = *v11;
            v1999 = v16;
            v2018 = v15;
            v1031 = *(v12 - 1);
            goto LABEL_1077;
          case 2043:
            v2097 = v26;
            v1485 = v24;
            v1486 = v2108;
            v1487 = (char *)MemoryContextAllocZero(*v2108, 0xCuLL);
            StringConstCast = (uint64_t)v1487;
            *(_DWORD *)v1487 = 348;
            *((_DWORD *)v1487 + 1) = *((_DWORD *)v11 - 2);
            goto LABEL_1277;
          case 2044:
            v2097 = v26;
            v1485 = v24;
            v1486 = v2108;
            v1487 = (char *)MemoryContextAllocZero(*v2108, 0xCuLL);
            StringConstCast = (uint64_t)v1487;
            v9 = 348;
            *(_QWORD *)v1487 = 348;
LABEL_1277:
            *((_DWORD *)v1487 + 2) = *(v12 - 1);
            if (*v11)
            {
              v1546 = MemoryContextAllocZeroAligned(*v1486, 0x18uLL);
              *(_DWORD *)v1546 = 353;
              *(_QWORD *)(v1546 + 8) = StringConstCast;
              *(_QWORD *)(v1546 + 16) = check_indirection(*v11, (uint64_t)v2107);
              StringConstCast = v1546;
              v24 = v1485;
              v26 = v2097;
            }
            else
            {
LABEL_1501:
              v24 = v1485;
              v26 = v2097;
            }
            break;
          case 2045:
            if (*v11)
            {
              v1271 = v26;
              StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
              *(_DWORD *)StringConstCast = 353;
              *(_QWORD *)(StringConstCast + 8) = *(v11 - 2);
              v1272 = check_indirection(*v11, (uint64_t)v2107);
              v26 = v1271;
              *(_QWORD *)(StringConstCast + 16) = v1272;
            }
            else
            {
              StringConstCast = *(v11 - 2);
              if (*v2010)
              {
                v32 = v26;
                v1981 = exprLocation(*(v11 - 2));
                DefElem = makeA_Expr(15, 0, StringConstCast, 0, v1981);
LABEL_1777:
                v26 = v32;
LABEL_1778:
                StringConstCast = DefElem;
              }
            }
            break;
          case 2048:
            v1547 = v26;
            v1548 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1547;
            StringConstCast = v1548;
            v9 = 0x400000078;
            *(_QWORD *)v1548 = 0x400000078;
            *(_DWORD *)(v1548 + 8) = 0;
            *(_QWORD *)(v1548 + 16) = 0;
            *(_QWORD *)(v1548 + 24) = 0;
            *(_QWORD *)(v1548 + 32) = *v11;
            *(_DWORD *)(v1548 + 40) = *v12;
            break;
          case 2049:
            v1329 = v2108;
            v2092 = v26;
            v2054 = v24;
            v1330 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            *(_DWORD *)v1330 = 120;
            StringConstCast = MemoryContextAllocZeroAligned(*v1329, 0x18uLL);
            *(_DWORD *)StringConstCast = 353;
            *(_QWORD *)(v1330 + 4) = 4;
            *(_QWORD *)(v1330 + 16) = 0;
            *(_QWORD *)(v1330 + 24) = 0;
            *(_QWORD *)(v1330 + 32) = *(v11 - 1);
            *(_DWORD *)(v1330 + 40) = *(v12 - 1);
            *(_QWORD *)(StringConstCast + 8) = v1330;
            v24 = v2054;
            v1331 = check_indirection(*v11, (uint64_t)v2107);
            v26 = v2092;
            *(_QWORD *)(StringConstCast + 16) = v1331;
            break;
          case 2050:
            v800 = v26;
            v801 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v800;
            StringConstCast = v801;
            v9 = 120;
            goto LABEL_1281;
          case 2051:
            v1549 = v26;
            v801 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1549;
            StringConstCast = v801;
            v9 = 0x600000078;
LABEL_1281:
            *(double *)v801 = *(double *)&v9;
            *(_DWORD *)(v801 + 8) = 0;
            *(_QWORD *)(v801 + 16) = 0;
            *(_QWORD *)(v801 + 24) = 0;
            *(_QWORD *)(v801 + 32) = *v11;
            *(_DWORD *)(v801 + 40) = *(v12 - 1);
            break;
          case 2052:
            StringConstCast = *v11;
            *(_DWORD *)(*v11 + 16) = *(v12 - 1);
            break;
          case 2053:
            v1405 = v26;
            v120 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1405;
            StringConstCast = v120;
            *(_DWORD *)v120 = 134;
            *(_QWORD *)(v120 + 8) = *v11;
            *(_QWORD *)(v120 + 16) = 0;
            *(_QWORD *)(v120 + 24) = 0;
            goto LABEL_1142;
          case 2054:
            v781 = v26;
            v120 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v781;
            StringConstCast = v120;
            *(_DWORD *)v120 = 134;
            *(_QWORD *)(v120 + 8) = *v11;
            *(_QWORD *)(v120 + 24) = 0;
            v9 = 0x200000000;
            *(_QWORD *)(v120 + 16) = 0x200000000;
            goto LABEL_1142;
          case 2055:
            v1005 = v26;
            v1006 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1005;
            StringConstCast = v1006;
            *(_DWORD *)v1006 = 110;
            *(_QWORD *)(v1006 + 8) = *(v11 - 1);
            *(_DWORD *)(v1006 + 36) = *(v12 - 3);
            break;
          case 2056:
            v32 = v26;
            DefElem = makeFuncCall(*(v11 - 2), 0, *(v12 - 2), *(double *)&v9);
            goto LABEL_1777;
          case 2057:
            v802 = *(v11 - 4);
            v803 = *(v11 - 2);
            v804 = *(v12 - 4);
            goto LABEL_795;
          case 2058:
            v1550 = v24;
            v1551 = *(v11 - 5);
            v1552 = v26;
            v1553 = list_make1_impl(226, *(v11 - 2));
            v1555 = v1554;
            v1556 = *(v12 - 5);
            goto LABEL_1284;
          case 2059:
            v1550 = v24;
            v1551 = *(v11 - 7);
            v1552 = v26;
            v1555 = lappend(*(v11 - 5), *(v11 - 2));
            v1556 = *(v12 - 7);
LABEL_1284:
            v1557 = v1551;
            v24 = v1550;
            v711 = makeFuncCall(v1557, v1555, v1556, v1553);
            v26 = v1552;
            StringConstCast = v711;
            *(_BYTE *)(v711 + 43) = 1;
            goto LABEL_1364;
          case 2060:
            v802 = *(v11 - 5);
            v803 = *(v11 - 2);
            v804 = *(v12 - 5);
LABEL_795:
            v1032 = v26;
            v711 = makeFuncCall(v802, v803, v804, *(double *)&v9);
            v26 = v1032;
            StringConstCast = v711;
LABEL_1364:
            *(_QWORD *)(v711 + 24) = *(v11 - 1);
            break;
          case 2061:
            v1285 = v26;
            v1286 = makeFuncCall(*(v11 - 5), *(v11 - 2), *(v12 - 5), *(double *)&v9);
            v26 = v1285;
            StringConstCast = v1286;
            *(_QWORD *)(v1286 + 24) = *(v11 - 1);
            *(_BYTE *)(v1286 + 42) = 1;
            break;
          case 2062:
            v832 = v26;
            v833 = makeFuncCall(*(v11 - 3), 0, *(v12 - 3), *(double *)&v9);
            v26 = v832;
            StringConstCast = v833;
            *(_BYTE *)(v833 + 41) = 1;
            break;
          case 2063:
            StringConstCast = *(v11 - 3);
            v877 = *(v11 - 2);
            if (v877)
            {
              if (*(_QWORD *)(StringConstCast + 24))
                base_yyparse_cold_48();
              if (*(_BYTE *)(StringConstCast + 42))
                base_yyparse_cold_47();
              if (*(_BYTE *)(StringConstCast + 43))
                base_yyparse_cold_46();
              *(_QWORD *)(StringConstCast + 24) = v877;
              *(_BYTE *)(StringConstCast + 40) = 1;
            }
            *(_QWORD *)(StringConstCast + 32) = *(v11 - 1);
            *(_QWORD *)(StringConstCast + 48) = *v11;
            break;
          case 2067:
            v834 = v26;
            SystemFuncName((uint64_t)"pg_collation_for");
            v835 = v24;
            v837 = v918;
            v838 = list_make1_impl(226, *(v11 - 1));
            goto LABEL_1147;
          case 2068:
            v805 = v24;
            v806 = *v12;
            v1252 = v26;
            v808 = MemoryContextAllocZero(*v2108, 0x14uLL);
            v26 = v1252;
            StringConstCast = v808;
            v9 = 138;
            goto LABEL_1287;
          case 2069:
            v805 = v24;
            v806 = *v12;
            v1558 = v26;
            v808 = MemoryContextAllocZero(*v2108, 0x14uLL);
            v26 = v1558;
            StringConstCast = v808;
            v9 = 0x10000008ALL;
            goto LABEL_1287;
          case 2070:
            v2042 = v24;
            v782 = *((_DWORD *)v11 - 2);
            v783 = *(v12 - 3);
            v878 = v26;
            v785 = MemoryContextAllocZero(*v2108, 0x14uLL);
            v26 = v878;
            StringConstCast = v785;
            v9 = 0x20000008ALL;
            goto LABEL_704;
          case 2071:
            v805 = v24;
            v806 = *v12;
            v1559 = v26;
            v808 = MemoryContextAllocZero(*v2108, 0x14uLL);
            v26 = v1559;
            StringConstCast = v808;
            v9 = 0x30000008ALL;
            goto LABEL_1287;
          case 2072:
            v2042 = v24;
            v782 = *((_DWORD *)v11 - 2);
            v783 = *(v12 - 3);
            v858 = v26;
            v785 = MemoryContextAllocZero(*v2108, 0x14uLL);
            v26 = v858;
            StringConstCast = v785;
            v9 = 0x40000008ALL;
            goto LABEL_704;
          case 2073:
            v805 = v24;
            v806 = *v12;
            v1212 = v26;
            v808 = MemoryContextAllocZero(*v2108, 0x14uLL);
            v26 = v1212;
            StringConstCast = v808;
            v9 = 0x50000008ALL;
            goto LABEL_1287;
          case 2074:
            v2042 = v24;
            v782 = *((_DWORD *)v11 - 2);
            v783 = *(v12 - 3);
            v784 = v26;
            v785 = MemoryContextAllocZero(*v2108, 0x14uLL);
            v26 = v784;
            StringConstCast = v785;
            v9 = 0x60000008ALL;
            goto LABEL_704;
          case 2075:
            v805 = v24;
            v806 = *v12;
            v1156 = v26;
            v808 = MemoryContextAllocZero(*v2108, 0x14uLL);
            v26 = v1156;
            StringConstCast = v808;
            v9 = 0x70000008ALL;
            goto LABEL_1287;
          case 2076:
            v2042 = v24;
            v782 = *((_DWORD *)v11 - 2);
            v783 = *(v12 - 3);
            v786 = v26;
            v785 = MemoryContextAllocZero(*v2108, 0x14uLL);
            v26 = v786;
            StringConstCast = v785;
            v9 = 0x80000008ALL;
LABEL_704:
            *(double *)v785 = *(double *)&v9;
            *(_DWORD *)(v785 + 12) = v782;
            *(_DWORD *)(v785 + 16) = v783;
            v24 = v2042;
            break;
          case 2077:
            v805 = v24;
            v806 = *v12;
            v1213 = v26;
            v808 = MemoryContextAllocZero(*v2108, 0x14uLL);
            v26 = v1213;
            StringConstCast = v808;
            v9 = 0x90000008ALL;
            goto LABEL_1287;
          case 2078:
            v805 = v24;
            v806 = *v12;
            v879 = v26;
            v808 = MemoryContextAllocZero(*v2108, 0x14uLL);
            v26 = v879;
            StringConstCast = v808;
            v9 = 0xA0000008ALL;
            goto LABEL_1287;
          case 2079:
            v805 = v24;
            v806 = *v12;
            v807 = v26;
            v808 = MemoryContextAllocZero(*v2108, 0x14uLL);
            v26 = v807;
            StringConstCast = v808;
            v9 = 0xC0000008ALL;
            goto LABEL_1287;
          case 2080:
            v805 = v24;
            v806 = *v12;
            v920 = v26;
            v808 = MemoryContextAllocZero(*v2108, 0x14uLL);
            v26 = v920;
            StringConstCast = v808;
            v9 = 0xB0000008ALL;
            goto LABEL_1287;
          case 2081:
            v805 = v24;
            v806 = *v12;
            v852 = v26;
            v808 = MemoryContextAllocZero(*v2108, 0x14uLL);
            v26 = v852;
            StringConstCast = v808;
            v9 = 0xD0000008ALL;
            goto LABEL_1287;
          case 2082:
            v805 = v24;
            v806 = *v12;
            v1371 = v26;
            v808 = MemoryContextAllocZero(*v2108, 0x14uLL);
            v26 = v1371;
            StringConstCast = v808;
            v9 = 0xE0000008ALL;
LABEL_1287:
            *(double *)v808 = *(double *)&v9;
            *(_DWORD *)(v808 + 12) = -1;
            *(_DWORD *)(v808 + 16) = v806;
            v24 = v805;
            break;
          case 2083:
            v1028 = v24;
            v1029 = *(v11 - 3);
            v1030 = *(v11 - 1);
            v1999 = v16;
            v2018 = v15;
            v1031 = *(v12 - 5);
LABEL_1077:
            v1332 = v26;
            DefElem = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1332;
            *(_DWORD *)DefElem = 357;
            *(_QWORD *)(DefElem + 8) = v1029;
            *(_QWORD *)(DefElem + 16) = v1030;
            v24 = v1028;
            *(_DWORD *)(DefElem + 24) = v1031;
            goto LABEL_1167;
          case 2084:
            v936 = "date_part";
            goto LABEL_1229;
          case 2085:
            v834 = v26;
            SystemFuncName((uint64_t)"normalize");
            v835 = v24;
            v837 = v1372;
            v838 = list_make1_impl(226, *(v11 - 1));
            v840 = v1373;
            v841 = *(v12 - 3);
            goto LABEL_1275;
          case 2086:
            v2082 = v26;
            SystemFuncName((uint64_t)"normalize");
            v822 = v1406;
            v2025 = *(v11 - 3);
            v2055 = v24;
            v1407 = v15;
            v1408 = *(v11 - 1);
            v1409 = v16;
            v1410 = *(v12 - 1);
            v1411 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)v1411 = 349;
            *(_DWORD *)(v1411 + 8) = 223;
            *(_QWORD *)(v1411 + 16) = v1408;
            v15 = v1407;
            *(_DWORD *)(v1411 + 24) = v1410;
            v16 = v1409;
            v24 = v2055;
            v828 = list_make2_impl(226, v2025, v1411);
            v830 = v1412;
            v831 = *(v12 - 5);
LABEL_1144:
            DefElem = makeFuncCall(v822, v830, v831, v828);
            v26 = v2082;
            goto LABEL_1778;
          case 2087:
            v936 = "overlay";
            goto LABEL_1229;
          case 2088:
            v936 = "position";
            goto LABEL_1229;
          case 2089:
            v936 = "substring";
            goto LABEL_1229;
          case 2090:
            v834 = v26;
            SystemFuncName(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(v11 - 1) + 8) + 16)
                                                 + 8 * (*(_DWORD *)(*(_QWORD *)(*(v11 - 1) + 8) + 4) - 1))
                                     + 8));
            v835 = v24;
            v837 = v836;
            v838 = list_make1_impl(226, *(v11 - 3));
            v840 = v839;
            v841 = *(v12 - 5);
            goto LABEL_1275;
          case 2091:
            v842 = "btrim";
            goto LABEL_1055;
          case 2092:
            v842 = "ltrim";
            goto LABEL_1055;
          case 2093:
            v842 = "rtrim";
LABEL_1055:
            v32 = v26;
            v1310 = SystemFuncName((uint64_t)v842);
            DefElem = makeFuncCall(v1311, *(v11 - 1), *(v12 - 4), v1310);
            goto LABEL_1777;
          case 2094:
            v936 = "btrim";
LABEL_1229:
            v32 = v26;
            v1488 = SystemFuncName((uint64_t)v936);
            DefElem = makeFuncCall(v1489, *(v11 - 1), *(v12 - 3), v1488);
            goto LABEL_1777;
          case 2095:
            v96 = *(v11 - 3);
            v97 = *(v11 - 1);
            v98 = *(v12 - 5);
            v99 = "=";
            v111 = 5;
            goto LABEL_205;
          case 2096:
            v1358 = v26;
            v1359 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1358;
            StringConstCast = v1359;
            *(_DWORD *)v1359 = 136;
            *(_QWORD *)(v1359 + 16) = *(v11 - 1);
            *(_DWORD *)(v1359 + 24) = *(v12 - 3);
            break;
          case 2097:
            v853 = v26;
            v854 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v853;
            StringConstCast = v854;
            *(_DWORD *)v854 = 137;
            *(_QWORD *)(v854 + 24) = *(v11 - 1);
            *(_DWORD *)(v854 + 16) = 0;
            goto LABEL_941;
          case 2098:
            v1214 = v26;
            v854 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1214;
            StringConstCast = v854;
            *(_DWORD *)v854 = 137;
            *(_QWORD *)(v854 + 24) = *(v11 - 1);
            *(_DWORD *)(v854 + 16) = 1;
LABEL_941:
            *(_DWORD *)(v854 + 32) = *(v12 - 3);
            break;
          case 2099:
            v122 = v24;
            v124 = *(v11 - 1);
            v2071 = *(v12 - 3);
            v1215 = v26;
            DefElem = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1215;
            *(_DWORD *)DefElem = 139;
            *(_QWORD *)(DefElem + 4) = 0;
            *(_QWORD *)(DefElem + 20) = 0;
            *(_QWORD *)(DefElem + 12) = 0;
            *(_DWORD *)(DefElem + 28) = 0;
            goto LABEL_943;
          case 2100:
            v859 = v24;
            v860 = *(v11 - 1);
            v2071 = *(v12 - 4);
            v1157 = v26;
            DefElem = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1157;
            v9 = 0x10000008BLL;
            goto LABEL_900;
          case 2101:
            v1432 = v24;
            v1433 = *(v11 - 3);
            v1434 = *(v11 - 1);
            v1999 = v16;
            v2018 = v15;
            v1010 = *(v12 - 6);
            v1435 = v26;
            DefElem = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1435;
            v9 = 0x10000008BLL;
            *(_QWORD *)DefElem = 0x10000008BLL;
            *(_QWORD *)(DefElem + 8) = v1433;
            *(_QWORD *)(DefElem + 16) = v1434;
            v24 = v1432;
            *(_DWORD *)(DefElem + 44) = 0;
            *(_QWORD *)(DefElem + 24) = 0;
            *(_QWORD *)(DefElem + 32) = 0;
            goto LABEL_1166;
          case 2102:
            v1007 = v24;
            v1008 = *(v11 - 3);
            v1009 = *(v11 - 1);
            v1999 = v16;
            v2018 = v15;
            v1010 = *(v12 - 6);
            v1011 = v26;
            DefElem = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1011;
            v9 = 0x10000008BLL;
            *(_QWORD *)DefElem = 0x10000008BLL;
            *(_QWORD *)(DefElem + 8) = v1008;
            *(_QWORD *)(DefElem + 16) = 0;
            v24 = v1007;
            *(_QWORD *)(DefElem + 24) = 0;
            *(_QWORD *)(DefElem + 32) = v1009;
            *(_DWORD *)(DefElem + 44) = 0;
LABEL_1166:
            *(_DWORD *)(DefElem + 52) = v1010;
LABEL_1167:
            v15 = v2018;
            v16 = v1999;
            goto LABEL_1778;
          case 2103:
            v1045 = v24;
            v1046 = *(v11 - 5);
            v1047 = *(v11 - 3);
            v2019 = v15;
            v1048 = *(v11 - 1);
            v2000 = v16;
            v2086 = *(v12 - 8);
            v1049 = v26;
            DefElem = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1049;
            v9 = 0x10000008BLL;
            *(_QWORD *)DefElem = 0x10000008BLL;
            *(_QWORD *)(DefElem + 8) = v1046;
            *(_QWORD *)(DefElem + 16) = v1047;
            v24 = v1045;
            *(_QWORD *)(DefElem + 24) = 0;
            *(_QWORD *)(DefElem + 32) = v1048;
            v15 = v2019;
            *(_DWORD *)(DefElem + 44) = 0;
            *(_DWORD *)(DefElem + 52) = v2086;
            v16 = v2000;
            goto LABEL_1778;
          case 2104:
            v834 = v26;
            SystemFuncName((uint64_t)"xmlexists");
            v835 = v24;
            v837 = v1413;
            v838 = list_make2_impl(226, *(v11 - 2), *(v11 - 1));
LABEL_1147:
            v840 = v919;
            v841 = *(v12 - 4);
LABEL_1275:
            v1545 = v837;
            v24 = v835;
            DefElem = makeFuncCall(v1545, v840, v841, v838);
            v26 = v834;
            goto LABEL_1778;
          case 2105:
            v1216 = v24;
            v1217 = *(v11 - 1);
            v2071 = *(v12 - 3);
            v1218 = v26;
            DefElem = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v1218;
            v9 = 0x20000008BLL;
            *(_QWORD *)DefElem = 0x20000008BLL;
            *(_QWORD *)(DefElem + 8) = 0;
            *(_QWORD *)(DefElem + 16) = v1217;
            v24 = v1216;
            *(_DWORD *)(DefElem + 44) = 0;
            goto LABEL_945;
          case 2106:
            v2044 = v24;
            v937 = *(v11 - 2);
            v938 = v26;
            BoolAConst = makeBoolAConst(*((unsigned __int8 *)v11 - 8), -1, *(double *)&v9);
            list_make2_impl(226, v937, BoolAConst);
            v941 = v940;
            v942 = *(v12 - 5);
            v943 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v938;
            StringConstCast = v943;
            v9 = 0x30000008BLL;
            *(_QWORD *)v943 = 0x30000008BLL;
            *(_QWORD *)(v943 + 8) = 0;
            *(_QWORD *)(v943 + 16) = 0;
            *(_QWORD *)(v943 + 24) = 0;
            *(_QWORD *)(v943 + 32) = v941;
            v24 = v2044;
            *(_DWORD *)(v943 + 44) = 0;
            *(_DWORD *)(v943 + 52) = v942;
            *(_DWORD *)(v943 + 40) = *((_DWORD *)v11 - 6);
            break;
          case 2107:
            v859 = v24;
            v860 = *(v11 - 1);
            v2071 = *(v12 - 4);
            v861 = v26;
            DefElem = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v861;
            v9 = 0x40000008BLL;
LABEL_900:
            *(double *)DefElem = *(double *)&v9;
            *(_DWORD *)(DefElem + 44) = 0;
            *(_QWORD *)(DefElem + 8) = v860;
            *(_QWORD *)(DefElem + 16) = 0;
            v24 = v859;
LABEL_945:
            *(_QWORD *)(DefElem + 24) = 0;
            *(_QWORD *)(DefElem + 32) = 0;
            goto LABEL_946;
          case 2108:
            v2083 = *(v11 - 3);
            v843 = v26;
            list_make1_impl(226, *(v11 - 1));
            v844 = v24;
            v846 = v845;
            v1997 = v16;
            v847 = v15;
            v848 = *(v12 - 6);
            v849 = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v843;
            StringConstCast = v849;
            v9 = 0x40000008BLL;
            *(_QWORD *)v849 = 0x40000008BLL;
            *(_QWORD *)(v849 + 8) = v2083;
            *(_QWORD *)(v849 + 16) = 0;
            *(_QWORD *)(v849 + 24) = 0;
            *(_QWORD *)(v849 + 32) = v846;
            v24 = v844;
            *(_DWORD *)(v849 + 44) = 0;
            *(_DWORD *)(v849 + 52) = v848;
            v15 = v847;
            v16 = v1997;
            break;
          case 2109:
            v957 = v26;
            list_make3_impl(226, *(v11 - 4), *(v11 - 2), *(v11 - 1));
            v122 = v24;
            v124 = v958;
            v2071 = *(v12 - 6);
            DefElem = MemoryContextAllocZeroAligned(*v2108, 0x38uLL);
            v26 = v957;
            v9 = 0x50000008BLL;
LABEL_748:
            *(double *)DefElem = *(double *)&v9;
            *(_QWORD *)(DefElem + 8) = 0;
            *(_QWORD *)(DefElem + 16) = 0;
            *(_QWORD *)(DefElem + 24) = 0;
LABEL_943:
            *(_QWORD *)(DefElem + 32) = v124;
            v24 = v122;
            *(_DWORD *)(DefElem + 44) = 0;
LABEL_946:
            *(_DWORD *)(DefElem + 52) = v2071;
            goto LABEL_1778;
          case 2110:
            v862 = v26;
            v863 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v862;
            StringConstCast = v863;
            *(_DWORD *)v863 = 385;
            *(_DWORD *)(v863 + 4) = *((_DWORD *)v11 - 8);
            *(_QWORD *)(v863 + 8) = *(v11 - 3);
            *(_QWORD *)(v863 + 16) = *(v11 - 1);
            *(_DWORD *)(v863 + 24) = *(v12 - 6);
            break;
          case 2112:
            v1414 = v26;
            v1051 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1414;
            StringConstCast = (uint64_t)v1051;
            *(_DWORD *)v1051 = 349;
            *((_DWORD *)v1051 + 2) = 225;
            goto LABEL_1150;
          case 2113:
            v1415 = v26;
            v1051 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1415;
            StringConstCast = (uint64_t)v1051;
            *(_DWORD *)v1051 = 349;
            *((_DWORD *)v1051 + 2) = 221;
            *((_DWORD *)v1051 + 4) = 0;
            goto LABEL_1150;
          case 2114:
            v1158 = v26;
            v1051 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1158;
            StringConstCast = (uint64_t)v1051;
            *(_DWORD *)v1051 = 349;
            *((_DWORD *)v1051 + 2) = 221;
            v1052 = 1;
            goto LABEL_948;
          case 2115:
            v1050 = v26;
            v1051 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1050;
            StringConstCast = (uint64_t)v1051;
            *(_DWORD *)v1051 = 349;
            *((_DWORD *)v1051 + 2) = 221;
            v1052 = 2;
            goto LABEL_948;
          case 2116:
            v1219 = v26;
            v1051 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1219;
            StringConstCast = (uint64_t)v1051;
            *(_DWORD *)v1051 = 349;
            *((_DWORD *)v1051 + 2) = 221;
            v1052 = 3;
LABEL_948:
            *((_DWORD *)v1051 + 4) = v1052;
LABEL_1150:
            *((_DWORD *)v1051 + 6) = -1;
            break;
          case 2121:
          case 2276:
            v119 = v26;
            v120 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v119;
            StringConstCast = v120;
            *(_DWORD *)v120 = 355;
            *(_QWORD *)(v120 + 8) = 0;
            *(_QWORD *)(v120 + 16) = 0;
            *(_QWORD *)(v120 + 24) = *v11;
            goto LABEL_1142;
          case 2122:
          case 2164:
          case 2165:
            StringConstCast &= 0xFFFFFFFF00000000;
            break;
          case 2123:
          case 2174:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 1;
            break;
          case 2141:
            StringConstCast = *v11;
            *(_QWORD *)(*v11 + 8) = *(v11 - 2);
            break;
          case 2143:
            v864 = v26;
            v865 = MemoryContextAllocZeroAligned(*v2108, 0x48uLL);
            v26 = v864;
            StringConstCast = v865;
            *(_DWORD *)v865 = 360;
            v866 = *v11;
            *(_QWORD *)(v865 + 24) = 0;
            *(_QWORD *)(v865 + 32) = 0;
            *(_QWORD *)(v865 + 8) = v866;
            *(_QWORD *)(v865 + 16) = 0;
            *(_DWORD *)(v865 + 40) = 1058;
            *(_QWORD *)(v865 + 48) = 0;
            *(_QWORD *)(v865 + 56) = 0;
            *(_DWORD *)(v865 + 64) = *v12;
            break;
          case 2145:
            v1333 = v26;
            v1334 = MemoryContextAllocZeroAligned(*v2108, 0x48uLL);
            v26 = v1333;
            StringConstCast = v1334;
            *(_DWORD *)v1334 = 360;
            *(_QWORD *)(v1334 + 8) = 0;
            *(_QWORD *)(v1334 + 16) = *(v11 - 4);
            *(_QWORD *)(v1334 + 24) = *(v11 - 3);
            *(_QWORD *)(v1334 + 32) = *(v11 - 2);
            *(_DWORD *)(v1334 + 40) = *(_DWORD *)(*(v11 - 1) + 40);
            *(_QWORD *)(v1334 + 48) = *(_QWORD *)(*(v11 - 1) + 48);
            *(_QWORD *)(v1334 + 56) = *(_QWORD *)(*(v11 - 1) + 56);
            *(_DWORD *)(v1334 + 64) = *(v12 - 5);
            break;
          case 2150:
            StringConstCast = *(v11 - 1);
            v944 = *(_DWORD *)(StringConstCast + 40) | 3;
            goto LABEL_1057;
          case 2151:
            StringConstCast = *(v11 - 1);
            v880 = *(_DWORD *)(StringConstCast + 40);
            v881 = 5;
            goto LABEL_737;
          case 2152:
            StringConstCast = *(v11 - 1);
            v880 = *(_DWORD *)(StringConstCast + 40);
            v881 = 9;
LABEL_737:
            v944 = v880 | v881;
LABEL_1057:
            *(_DWORD *)(StringConstCast + 40) = v944;
            *(_DWORD *)(StringConstCast + 40) = *(_DWORD *)v11 | v944;
            break;
          case 2153:
            v945 = v26;
            v922 = MemoryContextAllocZeroAligned(*v2108, 0x48uLL);
            v26 = v945;
            StringConstCast = v922;
            *(_DWORD *)v922 = 360;
            v923 = 1058;
            goto LABEL_903;
          case 2154:
            StringConstCast = *v11;
            v1335 = *(_DWORD *)(*v11 + 40);
            if ((v1335 & 0x80) != 0)
              base_yyparse_cold_50();
            if ((v1335 & 0x2000) != 0)
              base_yyparse_cold_49();
            *(_DWORD *)(StringConstCast + 40) = v1335 | 0x400;
            break;
          case 2155:
            StringConstCast = *(v11 - 2);
            v1053 = *v11;
            v1054 = *(_DWORD *)(StringConstCast + 40) | (2 * *(_DWORD *)(*v11 + 40));
            if ((v1054 & 0x80) != 0)
              base_yyparse_cold_54();
            if ((v1054 & 0x40) != 0)
              base_yyparse_cold_53();
            if ((~v1054 & 0x1200) == 0)
              base_yyparse_cold_51();
            if ((v1054 & 0x2000) != 0 && (v1054 & 0x1400) != 0)
              base_yyparse_cold_52();
            *(_DWORD *)(StringConstCast + 40) = v1054 | 0x10;
            *(_QWORD *)(StringConstCast + 56) = *(_QWORD *)(v1053 + 48);
            break;
          case 2156:
            v1159 = v26;
            v922 = MemoryContextAllocZeroAligned(*v2108, 0x48uLL);
            v26 = v1159;
            StringConstCast = v922;
            *(_DWORD *)v922 = 360;
            v923 = 32;
            goto LABEL_903;
          case 2157:
            v921 = v26;
            v922 = MemoryContextAllocZeroAligned(*v2108, 0x48uLL);
            v26 = v921;
            StringConstCast = v922;
            *(_DWORD *)v922 = 360;
            v923 = 128;
LABEL_903:
            *(_DWORD *)(v922 + 40) = v923;
            *(_QWORD *)(v922 + 48) = 0;
            *(_QWORD *)(v922 + 56) = 0;
            break;
          case 2158:
            v1273 = v26;
            v1274 = MemoryContextAllocZeroAligned(*v2108, 0x48uLL);
            v26 = v1273;
            StringConstCast = v1274;
            *(_DWORD *)v1274 = 360;
            *(_DWORD *)(v1274 + 40) = 512;
            *(_QWORD *)(v1274 + 48) = 0;
            *(_QWORD *)(v1274 + 56) = 0;
            break;
          case 2159:
            v1220 = v26;
            v1221 = MemoryContextAllocZeroAligned(*v2108, 0x48uLL);
            v26 = v1220;
            StringConstCast = v1221;
            *(_DWORD *)v1221 = 360;
            v1222 = 2048;
            goto LABEL_1041;
          case 2160:
            v1299 = v26;
            v1221 = MemoryContextAllocZeroAligned(*v2108, 0x48uLL);
            v26 = v1299;
            StringConstCast = v1221;
            *(_DWORD *)v1221 = 360;
            v1222 = 0x2000;
LABEL_1041:
            *(_DWORD *)(v1221 + 40) = v1222;
            *(_QWORD *)(v1221 + 48) = *(v11 - 1);
            *(_QWORD *)(v1221 + 56) = 0;
            break;
          case 2161:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x8000;
            break;
          case 2162:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x10000;
            break;
          case 2163:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x20000;
            break;
          case 2168:
          case 2171:
            v34 = *(v11 - 3);
            v2 = (const void **)*(v11 - 1);
            goto LABEL_1776;
          case 2172:
          case 2173:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 2;
            break;
          case 2177:
            StringConstCast = (uint64_t)"+";
            break;
          case 2178:
            StringConstCast = (uint64_t)"-";
            break;
          case 2179:
            StringConstCast = (uint64_t)"*";
            break;
          case 2180:
            StringConstCast = (uint64_t)"/";
            break;
          case 2181:
            StringConstCast = (uint64_t)"%";
            break;
          case 2182:
            StringConstCast = (uint64_t)"^";
            break;
          case 2183:
            StringConstCast = (uint64_t)"<";
            break;
          case 2184:
            StringConstCast = (uint64_t)">";
            break;
          case 2185:
            StringConstCast = (uint64_t)"=";
            break;
          case 2186:
            StringConstCast = (uint64_t)"<=";
            break;
          case 2187:
            StringConstCast = (uint64_t)">=";
            break;
          case 2188:
            StringConstCast = (uint64_t)"<>";
            break;
          case 2189:
            StringConstCast = (uint64_t)"?";
            break;
          case 2190:
          case 2192:
          case 2194:
          case 2282:
          case 2290:
            v38 = (const char *)*v11;
            goto LABEL_79;
          case 2196:
            v38 = "~~";
            goto LABEL_79;
          case 2197:
            v38 = "!~~";
            goto LABEL_79;
          case 2198:
            v38 = "~~*";
            goto LABEL_79;
          case 2199:
            v38 = "!~~*";
LABEL_79:
            v32 = v26;
            v39 = makeString((uint64_t)v38);
            *(double *)&v9 = list_make1_impl(226, v39);
            goto LABEL_1777;
          case 2205:
          case 2206:
            v144 = v26;
            v145 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v144;
            StringConstCast = v145;
            *(_DWORD *)v145 = 114;
            *(_QWORD *)(v145 + 16) = *(v11 - 2);
            *(_QWORD *)(v145 + 8) = *v11;
            *(_DWORD *)(v145 + 24) = -1;
            *(_DWORD *)(v145 + 28) = *(v12 - 2);
            break;
          case 2209:
          case 2210:
            v2033 = v24;
            v125 = *(v11 - 1);
            v126 = *(v12 - 2);
            v127 = v26;
            v128 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v127;
            StringConstCast = v128;
            *(_DWORD *)v128 = 354;
            *(_QWORD *)(v128 + 8) = v125;
            v24 = v2033;
            *(_DWORD *)(v128 + 16) = v126;
            break;
          case 2211:
            v1253 = v24;
            v1254 = *(v12 - 1);
            v1255 = v26;
            v1256 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1255;
            StringConstCast = v1256;
            *(_DWORD *)v1256 = 354;
            *(_QWORD *)(v1256 + 8) = 0;
            *(_DWORD *)(v1256 + 16) = v1254;
            v24 = v1253;
            break;
          case 2214:
            v959 = v24;
            v960 = *(v11 - 2);
            v961 = *(v12 - 2);
            v2085 = v26;
            v962 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *(_DWORD *)v962 = 349;
            *(_DWORD *)(v962 + 8) = 223;
            *(_QWORD *)(v962 + 16) = v960;
            v24 = v959;
            *(_DWORD *)(v962 + 24) = v961;
            goto LABEL_780;
          case 2215:
            v1012 = v24;
            v1013 = *((_DWORD *)v11 - 4);
            v1014 = *(v12 - 2);
            v2085 = v26;
            v962 = MemoryContextAllocZero(*v2108, 0xCuLL);
            *(_DWORD *)v962 = 348;
            *(_DWORD *)(v962 + 4) = v1013;
            v24 = v1012;
            *(_DWORD *)(v962 + 8) = v1014;
LABEL_780:
            *(double *)&v9 = list_make2_impl(226, v962, *v11);
            v26 = v2085;
            goto LABEL_1778;
          case 2216:
            v1085 = v24;
            v1086 = *(v12 - 2);
            v1087 = v26;
            v1088 = MemoryContextAllocZero(*v2108, 0xCuLL);
            *(_QWORD *)v1088 = 348;
            *(_DWORD *)(v1088 + 8) = v1086;
            v24 = v1085;
            *(double *)&v9 = list_make2_impl(226, v1088, *v11);
            v26 = v1087;
            goto LABEL_1778;
          case 2219:
            StringConstCast = (uint64_t)"year";
            break;
          case 2220:
            StringConstCast = (uint64_t)"month";
            break;
          case 2221:
            StringConstCast = (uint64_t)"day";
            break;
          case 2222:
            StringConstCast = (uint64_t)"hour";
            break;
          case 2223:
            StringConstCast = (uint64_t)"minute";
            break;
          case 2224:
            StringConstCast = (uint64_t)"second";
            break;
          case 2226:
            StringConstCast = (uint64_t)"nfc";
            break;
          case 2227:
            StringConstCast = (uint64_t)"nfd";
            break;
          case 2228:
            StringConstCast = (uint64_t)"nfkc";
            break;
          case 2229:
            StringConstCast = (uint64_t)"nfkd";
            break;
          case 2230:
            v32 = v26;
            *(double *)&v9 = list_make4_impl(226, *(v11 - 3), *(v11 - 2), *(v11 - 1), *v11);
            goto LABEL_1777;
          case 2231:
          case 2235:
            v147 = *(v11 - 2);
            v148 = *(v11 - 1);
            v149 = *v11;
            goto LABEL_829;
          case 2233:
            v405 = *v11;
            v129 = *(v11 - 2);
            goto LABEL_1441;
          case 2236:
            v149 = *(v11 - 1);
            v148 = *v11;
            v147 = *(v11 - 2);
LABEL_829:
            v32 = v26;
            *(double *)&v9 = list_make3_impl(226, v147, v148, v149);
            goto LABEL_1777;
          case 2237:
            v405 = *(v11 - 1);
            v129 = *v11;
LABEL_1441:
            v32 = v26;
            *(double *)&v9 = list_make2_impl(226, v405, v129);
            goto LABEL_1777;
          case 2238:
            v2004 = *(v11 - 1);
            v2051 = v24;
            v1223 = v2108;
            v2091 = v26;
            v1224 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *v1224 = 349;
            v1224[2] = 221;
            v1224[4] = 1;
            v1224[6] = -1;
            v2023 = v15;
            v1225 = v16;
            v1226 = *v11;
            v1227 = SystemTypeName((uint64_t)"int4");
            v1228 = *v1223;
            v24 = v2051;
            v1229 = MemoryContextAllocZeroAligned(v1228, 0x20uLL);
            *(_DWORD *)v1229 = 357;
            *(_QWORD *)(v1229 + 8) = v1226;
            *(_QWORD *)(v1229 + 16) = v1227;
            v16 = v1225;
            v15 = v2023;
            *(_DWORD *)(v1229 + 24) = -1;
            *(double *)&v9 = list_make3_impl(226, v2004, (uint64_t)v1224, v1229);
            v26 = v2091;
            goto LABEL_1778;
          case 2243:
            v34 = *v11;
            v2 = (const void **)*(v11 - 2);
LABEL_1776:
            v32 = v26;
            DefElem = lappend(v34, (uint64_t)v2);
            goto LABEL_1777;
          case 2246:
            v1275 = v26;
            v1276 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1275;
            StringConstCast = v1276;
            *(_DWORD *)v1276 = 120;
            *(_QWORD *)(v1276 + 32) = *v11;
            break;
          case 2248:
            v1230 = v26;
            v1231 = MemoryContextAllocZeroAligned(*v2108, 0x30uLL);
            v26 = v1230;
            StringConstCast = v1231;
            v9 = 130;
            *(_QWORD *)v1231 = 130;
            *(_QWORD *)(v1231 + 16) = *(v11 - 3);
            *(_QWORD *)(v1231 + 24) = *(v11 - 2);
            *(_QWORD *)(v1231 + 32) = *(v11 - 1);
            *(_DWORD *)(v1231 + 40) = *(v12 - 4);
            break;
          case 2251:
            v1257 = v26;
            v1258 = MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1257;
            StringConstCast = v1258;
            *(_DWORD *)v1258 = 131;
            *(_QWORD *)(v1258 + 8) = *(v11 - 2);
            *(_QWORD *)(v1258 + 16) = *v11;
            *(_DWORD *)(v1258 + 24) = *(v12 - 3);
            break;
          case 2256:
            v1055 = *v11;
            v1057 = *v12;
            v1056 = 0;
            goto LABEL_854;
          case 2257:
            v1055 = *(v11 - 1);
            v1056 = *v11;
            v1057 = *(v12 - 1);
LABEL_854:
            v32 = v26;
            DefElem = makeColumnRef(v1055, v1056, v1057, (uint64_t)v2107, *(double *)&v9);
            goto LABEL_1777;
          case 2260:
            v1162 = v26;
            v1163 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1162;
            StringConstCast = v1163;
            *(_DWORD *)v1163 = 352;
            *(_BYTE *)(v1163 + 4) = 0;
            *(_QWORD *)(v1163 + 8) = 0;
            goto LABEL_957;
          case 2261:
            v1232 = v26;
            v1163 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1232;
            StringConstCast = v1163;
            *(_DWORD *)v1163 = 352;
            *(_BYTE *)(v1163 + 4) = 1;
            *(_QWORD *)(v1163 + 8) = *(v11 - 3);
LABEL_957:
            *(_QWORD *)(v1163 + 16) = *(v11 - 1);
            break;
          case 2275:
            v1259 = v26;
            v1260 = MemoryContextAllocZeroAligned(*v2108, 0x28uLL);
            v26 = v1259;
            StringConstCast = v1260;
            *(_DWORD *)v1260 = 355;
            *(_QWORD *)(v1260 + 8) = *v11;
            *(_QWORD *)(v1260 + 16) = 0;
            *(_QWORD *)(v1260 + 24) = *(v11 - 1);
            *(_DWORD *)(v1260 + 32) = *(v12 - 1);
            break;
          case 2277:
            v1089 = v2108;
            v1090 = v26;
            v2047 = v24;
            v1091 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            *(_DWORD *)v1091 = 347;
            v1092 = (_DWORD *)MemoryContextAllocZero(*v1089, 4uLL);
            *v1092 = 351;
            list_make1_impl(226, (uint64_t)v1092);
            *(_QWORD *)(v1091 + 8) = v1093;
            *(_DWORD *)(v1091 + 16) = *v12;
            v120 = MemoryContextAllocZeroAligned(*v1089, 0x28uLL);
            v26 = v1090;
            StringConstCast = v120;
            *(_DWORD *)v120 = 355;
            *(_QWORD *)(v120 + 8) = 0;
            *(_QWORD *)(v120 + 16) = 0;
            *(_QWORD *)(v120 + 24) = v1091;
            v24 = v2047;
LABEL_1142:
            *(_DWORD *)(v120 + 32) = *v12;
            break;
          case 2280:
            v32 = v26;
            DefElem = makeRangeVar(0, *v11, *v12);
            goto LABEL_1777;
          case 2281:
            v1277 = v26;
            check_func_name(*v11, (uint64_t)v2107);
            RangeVar = (char *)makeRangeVar(0, 0, *(v12 - 1));
            if (!*v11)
              goto LABEL_1883;
            StringConstCast = (uint64_t)RangeVar;
            v1279 = *(_DWORD *)(*v11 + 4);
            if (v1279 == 2)
            {
              *((_QWORD *)RangeVar + 1) = *(v11 - 1);
              *((_QWORD *)RangeVar + 2) = *(_QWORD *)(**(_QWORD **)(*v11 + 16) + 8);
              v1280 = *(_QWORD *)(*(_QWORD *)(*v11 + 16) + 8);
            }
            else
            {
              if (v1279 != 1)
LABEL_1883:
                base_yyparse_cold_55((uint64_t)v12, v11);
              *((_QWORD *)RangeVar + 1) = 0;
              *((_QWORD *)RangeVar + 2) = *(v11 - 1);
              v1280 = **(_QWORD **)(*v11 + 16);
            }
            *((_QWORD *)RangeVar + 3) = *(_QWORD *)(v1280 + 8);
            v26 = v1277;
            break;
          case 2283:
            v1033 = v24;
            v1034 = *(v11 - 2);
            v1035 = v26;
            v1036 = makeString(*v11);
            v1037 = v1034;
            v24 = v1033;
            DefElem = lappend(v1037, v1036);
            v26 = v1035;
            goto LABEL_1778;
          case 2291:
            v32 = v26;
            v1058 = makeString(*(v11 - 1));
            v1059 = lcons(v1058, *v11);
            DefElem = check_func_name(v1059, (uint64_t)v2107);
            goto LABEL_1777;
          case 2294:
            v2032 = v24;
            v105 = *v11;
            v106 = *v12;
            v1164 = v26;
            v108 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v1164;
            StringConstCast = (uint64_t)v108;
            *(_DWORD *)v108 = 349;
            v109 = 223;
            goto LABEL_910;
          case 2295:
          case 2296:
            v2032 = v24;
            v105 = *v11;
            v106 = *v12;
            v146 = v26;
            v108 = (char *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            v26 = v146;
            StringConstCast = (uint64_t)v108;
            *(_DWORD *)v108 = 349;
            v109 = 224;
LABEL_910:
            *((_DWORD *)v108 + 2) = v109;
            *((_QWORD *)v108 + 2) = v105;
LABEL_911:
            v24 = v2032;
            *((_DWORD *)v108 + 6) = v106;
            break;
          case 2297:
            v32 = v26;
            v1060 = makeTypeNameFromNameList(*(v11 - 1), *(double *)&v9);
            *(_DWORD *)(v1060 + 48) = *(v12 - 1);
            DefElem = makeStringConstCast(*v11, *v12, v1060, v1061);
            goto LABEL_1777;
          case 2298:
            v1083 = v26;
            v1094 = makeTypeNameFromNameList(*(v11 - 5), *(double *)&v9);
            v1096 = *(v11 - 3);
            if (v1096)
            {
              v1097 = *(unsigned int *)(v1096 + 4);
              if ((int)v1097 >= 1)
              {
                v1098 = *(_DWORD ***)(v1096 + 16);
                do
                {
                  if (**v1098 == 114)
                    base_yyparse_cold_57();
                  ++v1098;
                  --v1097;
                }
                while (v1097);
              }
            }
            if (*(v11 - 2))
              base_yyparse_cold_56();
            *(_QWORD *)(v1094 + 24) = v1096;
            *(_DWORD *)(v1094 + 48) = *(v12 - 5);
            NotExpr = makeStringConstCast(*v11, *v12, v1094, v1095);
            goto LABEL_1862;
          case 2299:
            v32 = v26;
            v1100 = makeTypeNameFromNameList(*(v11 - 1), *(double *)&v9);
            *(_DWORD *)(v1100 + 48) = *(v12 - 1);
            DefElem = makeParamRefCast(*(_DWORD *)v11, *v12, v1100, v1101);
            goto LABEL_1777;
          case 2300:
            v1083 = v26;
            v1102 = makeTypeNameFromNameList(*(v11 - 5), *(double *)&v9);
            v1104 = *(v11 - 3);
            if (v1104)
            {
              v1105 = *(unsigned int *)(v1104 + 4);
              if ((int)v1105 >= 1)
              {
                v1106 = *(_DWORD ***)(v1104 + 16);
                do
                {
                  if (**v1106 == 114)
                    base_yyparse_cold_59();
                  ++v1106;
                  --v1105;
                }
                while (v1105);
              }
            }
            if (*(v11 - 2))
              base_yyparse_cold_58();
            *(_QWORD *)(v1102 + 24) = v1104;
            *(_DWORD *)(v1102 + 48) = *(v12 - 5);
            NotExpr = makeParamRefCast(*(_DWORD *)v11, *v12, v1102, v1103);
            goto LABEL_1862;
          case 2301:
            v1166 = *(v11 - 1);
            v1165 = *v11;
            v1167 = *v12;
            goto LABEL_959;
          case 2302:
            v1166 = *(v11 - 2);
            *(_QWORD *)(v1166 + 24) = *v11;
            v1165 = *(v11 - 1);
            v1167 = *(v12 - 1);
LABEL_959:
            v32 = v26;
            DefElem = makeStringConstCast(v1165, v1167, v1166, *(double *)&v9);
            goto LABEL_1777;
          case 2303:
            v2022 = *(v11 - 4);
            v2050 = v24;
            v1168 = v2108;
            v2089 = v26;
            v1169 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *v1169 = 349;
            v1169[2] = 221;
            v1169[4] = 0x7FFF;
            v1169[6] = -1;
            v1170 = *((_DWORD *)v11 - 4);
            v2003 = v16;
            v1171 = v15;
            v1172 = *(v12 - 2);
            v1173 = *v1168;
            v24 = v2050;
            v1174 = (_DWORD *)MemoryContextAllocZeroAligned(v1173, 0x20uLL);
            *v1174 = 349;
            v1174[2] = 221;
            v1174[4] = v1170;
            v1174[6] = v1172;
            v15 = v1171;
            v16 = v2003;
            v1175 = list_make2_impl(226, (uint64_t)v1169, (uint64_t)v1174);
            *(_QWORD *)(v2022 + 24) = v1176;
            DefElem = makeStringConstCast(*v11, *v12, v2022, v1175);
            v26 = v2089;
            goto LABEL_1778;
          case 2304:
            v1233 = *(_DWORD *)v11;
            v1234 = *v12;
            v1235 = *(v11 - 1);
            goto LABEL_962;
          case 2305:
            v1235 = *(v11 - 2);
            *(_QWORD *)(v1235 + 24) = *v11;
            v1233 = *((_DWORD *)v11 - 2);
            v1234 = *(v12 - 1);
LABEL_962:
            v32 = v26;
            DefElem = makeParamRefCast(v1233, v1234, v1235, *(double *)&v9);
            goto LABEL_1777;
          case 2306:
            v2024 = *(v11 - 4);
            v2052 = v24;
            v1236 = v2108;
            v2087 = v26;
            v1237 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *v1237 = 349;
            v1237[2] = 221;
            v1237[4] = 0x7FFF;
            v1237[6] = -1;
            v1238 = *((_DWORD *)v11 - 4);
            v2005 = v16;
            v1239 = v15;
            v1240 = *(v12 - 2);
            v1241 = *v1236;
            v24 = v2052;
            v1242 = (_DWORD *)MemoryContextAllocZeroAligned(v1241, 0x20uLL);
            *v1242 = 349;
            v1242[2] = 221;
            v1242[4] = v1238;
            v1242[6] = v1240;
            v15 = v1239;
            v16 = v2005;
            v1114 = list_make2_impl(226, (uint64_t)v1237, (uint64_t)v1242);
            v1115 = v2024;
            *(_QWORD *)(v2024 + 24) = v1243;
            v1118 = *(_DWORD *)v11;
            v1117 = *v12;
            goto LABEL_964;
          case 2307:
            v2020 = *(v11 - 4);
            v2048 = v24;
            v1107 = v2108;
            v2087 = v26;
            v1108 = (_DWORD *)MemoryContextAllocZeroAligned(*v2108, 0x20uLL);
            *v1108 = 349;
            v1108[2] = 221;
            v1108[4] = 0x7FFF;
            v1108[6] = -1;
            v1109 = *((_DWORD *)v11 - 4);
            v2001 = v16;
            v1110 = v15;
            v1111 = *(v12 - 2);
            v1112 = *v1107;
            v24 = v2048;
            v1113 = (_DWORD *)MemoryContextAllocZeroAligned(v1112, 0x20uLL);
            *v1113 = 349;
            v1113[2] = 221;
            v1113[4] = v1109;
            v1113[6] = v1111;
            v15 = v1110;
            v16 = v2001;
            v1114 = list_make2_impl(226, (uint64_t)v1108, (uint64_t)v1113);
            v1115 = v2020;
            *(_QWORD *)(v2020 + 24) = v1116;
            v1117 = *v12;
            v1118 = 0;
LABEL_964:
            DefElem = makeParamRefCast(v1118, v1117, v1115, v1114);
            v26 = v2087;
            goto LABEL_1778;
          case 2308:
            v32 = v26;
            DefElem = makeBoolAConst(1, *v12, *(double *)&v9);
            goto LABEL_1777;
          case 2309:
            v32 = v26;
            DefElem = makeBoolAConst(0, *v12, *(double *)&v9);
            goto LABEL_1777;
          case 2315:
            v36 = -*(_DWORD *)v11;
LABEL_1771:
            StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | v36;
            break;
          case 2316:
            switch(*(_DWORD *)(*v11 + 4))
            {
              case 0:
                StringConstCast = *(_QWORD *)(*v11 + 8);
                break;
              case 1:
                base_yyparse_cold_31();
              case 2:
                base_yyparse_cold_30();
              case 3:
                base_yyparse_cold_29();
              default:
                goto LABEL_1779;
            }
            break;
          case 2317:
            v2075 = v26;
            v407 = v24;
            v1177 = (const char *)*v11;
            if (!strcmp((const char *)*v11, "public"))
            {
              v1980 = *v12;
              StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
              *(_DWORD *)(StringConstCast + 16) = v1980;
              v9 = 0x300000186;
              *(_QWORD *)StringConstCast = 0x300000186;
            }
            else
            {
              if (!strcmp(v1177, "none"))
                base_yyparse_cold_28();
              v1178 = *v12;
              StringConstCast = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
              *(_QWORD *)StringConstCast = 390;
              *(_DWORD *)(StringConstCast + 16) = v1178;
              *(_QWORD *)(StringConstCast + 8) = pstrdup((const char *)*v11);
            }
LABEL_1827:
            v24 = v407;
            v26 = v2075;
            break;
          case 2318:
            v1119 = v24;
            v1120 = *v12;
            v1121 = v26;
            v1122 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1121;
            StringConstCast = v1122;
            v9 = 0x100000186;
            goto LABEL_919;
          case 2319:
            v1119 = v24;
            v1120 = *v12;
            v1179 = v26;
            v1122 = MemoryContextAllocZeroAligned(*v2108, 0x18uLL);
            v26 = v1179;
            StringConstCast = v1122;
            v9 = 0x200000186;
LABEL_919:
            *(double *)v1122 = *(double *)&v9;
            *(_DWORD *)(v1122 + 16) = v1120;
            v24 = v1119;
            break;
          case 2323:
          case 2324:
          case 2326:
          case 2327:
          case 2329:
          case 2330:
          case 2331:
          case 2333:
          case 2334:
          case 2335:
          case 2336:
            v32 = v26;
            DefElem = (unint64_t)pstrdup((const char *)*v11);
            goto LABEL_1777;
          default:
            break;
        }
LABEL_1779:
        v1956 = &v11[-v25];
        v1957 = &v12[-v25];
        v1956[1] = StringConstCast;
        v11 = v1956 + 1;
        v1957[1] = v26;
        v12 = v1957 + 1;
        v14 -= 2 * v25;
        v1958 = yyr1[v24] - 495;
        v1959 = (*(__int16 *)v14 + yypgoto[v1958]);
        if ((int)v1959 >= 0 && yycheck[v1959] == *(unsigned __int16 *)v14)
          v10 = (__int16)yytable[v1959];
        else
          v10 = yydefgoto[v1958];
        goto LABEL_3;
      }
LABEL_17:
      v26 = v12[-v25 + 1];
      StringConstCast = v11[1 - v25];
      v28 = v24 - 2;
      if ((v24 - 2) > 0x920)
        goto LABEL_1779;
      goto LABEL_41;
    }
    v10 = (__int16)yytable[v30];
    if (v10 <= 0)
    {
      if (yytable[v30])
        v31 = yytable[v30] == 62841;
      else
        v31 = 1;
      if (v31)
LABEL_1869:
        scanner_yyerror((size_t)"syntax error", (uint64_t)v2107);
      v24 = -v10;
      v25 = yyr2[v24];
      if (!yyr2[v24])
        goto LABEL_40;
      goto LABEL_17;
    }
    if (v10 == 837)
      break;
    if ((_DWORD)v16)
      v16 = 4294967294;
    else
      v16 = 0;
    v11[1] = v2112;
    ++v11;
    v12[1] = v2111;
    ++v12;
LABEL_3:
    v14 += 2;
  }
  v1986 = 0;
  v18 = v15;
  if (v15 != v2115)
LABEL_1864:
    pfree((uint64_t)v18);
  return v1986;
}

_DWORD *makeAConst(_DWORD *a1, int a2, double a3)
{
  uint64_t v4;
  uint64_t *v5;
  _DWORD *result;
  int v7;
  uint64_t *v8;
  uint64_t *v9;

  if (*a1 == 221)
  {
    v7 = a1[2];
    v8 = (uint64_t *)CurrentMemoryContext(a3);
    result = (_DWORD *)MemoryContextAllocZeroAligned(*v8, 0x20uLL);
    *result = 349;
    result[2] = 221;
    result[4] = v7;
    result[6] = a2;
  }
  else
  {
    v4 = *((_QWORD *)a1 + 1);
    if (*a1 == 222)
    {
      v5 = (uint64_t *)CurrentMemoryContext(a3);
      result = (_DWORD *)MemoryContextAllocZeroAligned(*v5, 0x20uLL);
      *result = 349;
      result[2] = 222;
    }
    else
    {
      v9 = (uint64_t *)CurrentMemoryContext(a3);
      result = (_DWORD *)MemoryContextAllocZeroAligned(*v9, 0x20uLL);
      *result = 349;
      result[2] = 223;
    }
    *((_QWORD *)result + 2) = v4;
    result[6] = a2;
  }
  return result;
}

unint64_t makeStringConstCast(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t *v7;
  unint64_t v8;
  unint64_t result;

  v7 = (uint64_t *)CurrentMemoryContext(a4);
  v8 = MemoryContextAllocZeroAligned(*v7, 0x20uLL);
  *(_DWORD *)v8 = 349;
  *(_DWORD *)(v8 + 8) = 223;
  *(_QWORD *)(v8 + 16) = a1;
  *(_DWORD *)(v8 + 24) = a2;
  result = MemoryContextAllocZeroAligned(*v7, 0x20uLL);
  *(_DWORD *)result = 357;
  *(_QWORD *)(result + 8) = v8;
  *(_QWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 24) = -1;
  return result;
}

uint64_t processCASbits(uint64_t result, uint64_t a2, size_t a3, _BYTE *a4, _BYTE *a5, _BYTE *a6, _BYTE *a7)
{
  if (a4)
    *a4 = 0;
  if (a5)
    *a5 = 0;
  if (a6)
    *a6 = 0;
  if ((result & 0xA) != 0)
  {
    if (!a4)
      processCASbits_cold_4(a3, a2);
    *a4 = 1;
  }
  if ((result & 8) != 0)
  {
    if (!a5)
      processCASbits_cold_3(a3, a2);
    *a5 = 1;
  }
  if ((result & 0x10) != 0)
  {
    if (!a6)
      processCASbits_cold_2(a3, a2);
    *a6 = 1;
  }
  if ((result & 0x20) != 0)
  {
    if (!a7)
      processCASbits_cold_1(a3, a2);
    *a7 = 1;
  }
  return result;
}

unint64_t makeRangeVarFromAnyName(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t *v5;
  unint64_t result;
  int v7;
  uint64_t v8;

  v5 = (uint64_t *)CurrentMemoryContext(a3);
  result = MemoryContextAllocZeroAligned(*v5, 0x38uLL);
  *(_DWORD *)result = 103;
  if (!a1)
    goto LABEL_9;
  v7 = *(_DWORD *)(a1 + 4);
  if (v7 == 3)
  {
    *(_QWORD *)(result + 8) = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8);
    *(_QWORD *)(result + 16) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 8);
    v8 = *(_QWORD *)(a1 + 16) + 16;
    goto LABEL_8;
  }
  if (v7 == 2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8);
    v8 = *(_QWORD *)(a1 + 16) + 8;
    goto LABEL_8;
  }
  if (v7 != 1)
LABEL_9:
    makeRangeVarFromAnyName_cold_1(a1, a2);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v8 = *(_QWORD *)(a1 + 16);
LABEL_8:
  *(_QWORD *)(result + 24) = *(_QWORD *)(*(_QWORD *)v8 + 8);
  *(_BYTE *)(result + 33) = 112;
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t SplitColQualList(uint64_t result, uint64_t *a2, int **a3)
{
  int v5;
  int **v6;
  int v7;

  *a3 = 0;
  if (result)
  {
    v5 = 0;
    do
    {
      if (v5 >= *(_DWORD *)(result + 4))
        break;
      v6 = (int **)(*(_QWORD *)(result + 16) + 8 * v5);
      v7 = **v6;
      if (v7 != 369)
      {
        if (v7 != 358)
          SplitColQualList_cold_1(*v6);
        if (*a3)
          SplitColQualList_cold_2();
        *a3 = *v6;
        --v5;
        result = list_delete_cell(result, (uint64_t)v6);
      }
      ++v5;
    }
    while (result);
  }
  *a2 = result;
  return result;
}

uint64_t mergeTableFuncParameters(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  if (a1)
  {
    v2 = *(unsigned int *)(a1 + 4);
    if ((int)v2 >= 1)
    {
      v3 = *(_QWORD *)(a1 + 16);
      do
      {
        v4 = *(_DWORD *)(*(_QWORD *)v3 + 24);
        if (v4 != 105 && v4 != 118)
          mergeTableFuncParameters_cold_1();
        v3 += 8;
        --v2;
      }
      while (v2);
    }
  }
  return list_concat(a1, a2);
}

void TableFuncTypeName(uint64_t a1)
{
  uint64_t v1;
  unint64_t String;
  unint64_t v3;
  double v4;
  uint64_t v5;

  if (a1 && *(_DWORD *)(a1 + 4) == 1)
  {
    copyObjectImpl(*(int **)(**(_QWORD **)(a1 + 16) + 16));
    *(_BYTE *)(v1 + 20) = 1;
  }
  else
  {
    String = makeString((uint64_t)"pg_catalog");
    v3 = makeString((uint64_t)"record");
    v4 = list_make2_impl(226, String, v3);
    *(_BYTE *)(makeTypeNameFromNameList(v5, v4) + 20) = 1;
  }
}

uint64_t extractArgTypes(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (result)
  {
    v1 = result;
    v2 = *(_DWORD *)(result + 4);
    if (v2 < 1)
    {
      return 0;
    }
    else
    {
      v3 = 0;
      result = 0;
      do
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v3);
        v5 = *(_DWORD *)(v4 + 24);
        if (v5 != 111 && v5 != 116)
        {
          result = lappend(result, *(_QWORD *)(v4 + 16));
          v2 = *(_DWORD *)(v1 + 4);
        }
        ++v3;
      }
      while (v3 < v2);
    }
  }
  return result;
}

uint64_t check_func_name(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _DWORD **v3;

  if (result)
  {
    v2 = *(unsigned int *)(result + 4);
    if ((int)v2 >= 1)
    {
      v3 = *(_DWORD ***)(result + 16);
      do
      {
        if (**v3 != 223)
          scanner_yyerror((size_t)"syntax error", a2);
        ++v3;
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

double makeOrderedSetArgs(uint64_t a1, uint64_t a2)
{
  const void **v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *Integer;
  uint64_t v9;

  v2 = (const void **)a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 4);
  v6 = *(_QWORD *)(v4 + 8 * (v5 - 1));
  if (*(_DWORD *)(v6 + 24) == 118)
  {
    v7 = **(_QWORD **)(a2 + 16);
    if (*(_DWORD *)(a2 + 4) != 1
      || *(_DWORD *)(v7 + 24) != 118
      || !equal(*(_QWORD *)(v6 + 16), *(_QWORD *)(v7 + 16)))
    {
      makeOrderedSetArgs_cold_1();
    }
    v2 = 0;
    v5 = *(_DWORD *)(a1 + 4);
  }
  Integer = makeInteger(v5);
  v9 = list_concat(a1, v2);
  return list_make2_impl(226, v9, (uint64_t)Integer);
}

uint64_t extractAggrArgTypes(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;

  v1 = **(_QWORD **)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if (v2 < 1)
    return 0;
  v3 = 0;
  result = 0;
  do
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v3);
    v6 = *(_DWORD *)(v5 + 24);
    if (v6 != 111 && v6 != 116)
    {
      result = lappend(result, *(_QWORD *)(v5 + 16));
      v2 = *(_DWORD *)(v1 + 4);
    }
    ++v3;
  }
  while (v3 < v2);
  return result;
}

unint64_t makeRecursiveViewSelect(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t String;
  unint64_t RangeVar;
  uint64_t v20;
  unint64_t v22;

  v7 = (uint64_t *)CurrentMemoryContext(a4);
  v8 = MemoryContextAllocZeroAligned(*v7, 0x98uLL);
  *(_DWORD *)v8 = 236;
  v9 = MemoryContextAllocZeroAligned(*v7, 0x18uLL);
  *(_DWORD *)v9 = 386;
  v10 = MemoryContextAllocZeroAligned(*v7, 0x58uLL);
  *(_DWORD *)v10 = 389;
  *(_QWORD *)(v10 + 8) = a1;
  *(_QWORD *)(v10 + 16) = a2;
  *(_DWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = a3;
  *(_DWORD *)(v10 + 40) = -1;
  *(_BYTE *)(v9 + 16) = 1;
  list_make1_impl(226, v10);
  *(_QWORD *)(v9 + 8) = v11;
  *(_DWORD *)(v9 + 20) = -1;
  v22 = v9;
  if (a2 && *(int *)(a2 + 4) >= 1)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = *(_QWORD *)(a2 + 16);
      v15 = MemoryContextAllocZeroAligned(*v7, 0x28uLL);
      *(_DWORD *)v15 = 355;
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = 0;
      v16 = *(_QWORD *)(*(_QWORD *)(v14 + 8 * v12) + 8);
      v17 = MemoryContextAllocZeroAligned(*v7, 0x18uLL);
      *(_DWORD *)v17 = 347;
      *(_DWORD *)(v17 + 16) = -1;
      String = makeString(v16);
      *(_QWORD *)(v17 + 8) = lcons(String, 0);
      *(_QWORD *)(v15 + 24) = v17;
      *(_DWORD *)(v15 + 32) = -1;
      v13 = lappend(v13, v15);
      ++v12;
    }
    while (v12 < *(int *)(a2 + 4));
  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)(v8 + 120) = v22;
  *(_QWORD *)(v8 + 24) = v13;
  RangeVar = makeRangeVar(0, a1, -1);
  list_make1_impl(226, RangeVar);
  *(_QWORD *)(v8 + 32) = v20;
  return v8;
}

uint64_t check_indirection(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (result)
  {
    v2 = *(unsigned int *)(result + 4);
    if ((int)v2 >= 1)
    {
      v3 = *(_QWORD *)(result + 16);
      v4 = v3 + 8 * (int)v2;
      v5 = v3 + 8;
      do
      {
        if (**(_DWORD **)(v5 - 8) == 351 && v5 != 0 && v5 < v4)
          scanner_yyerror((size_t)"improper use of \"*\"", a2);
        v5 += 8;
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

uint64_t insertSelectOptions(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  int v10;

  if (a2)
  {
    if (*(_QWORD *)(a1 + 80))
      insertSelectOptions_cold_6();
    *(_QWORD *)(a1 + 80) = a2;
  }
  result = list_concat(*(_QWORD *)(a1 + 112), a3);
  *(_QWORD *)(a1 + 112) = result;
  if (a4)
  {
    if (*(_QWORD *)a4)
    {
      if (*(_QWORD *)(a1 + 88))
        insertSelectOptions_cold_5();
      *(_QWORD *)(a1 + 88) = *(_QWORD *)a4;
    }
    v9 = *(_QWORD *)(a4 + 8);
    if (v9)
    {
      if (*(_QWORD *)(a1 + 96))
        insertSelectOptions_cold_4();
      *(_QWORD *)(a1 + 96) = v9;
    }
    v10 = *(_DWORD *)(a4 + 16);
    if (v10)
    {
      if (*(_DWORD *)(a1 + 104))
        insertSelectOptions_cold_3();
      if (v10 == 2 && !*(_QWORD *)(a1 + 80))
        insertSelectOptions_cold_2();
      *(_DWORD *)(a1 + 104) = v10;
    }
  }
  if (a5)
  {
    if (*(_QWORD *)(a1 + 120))
      insertSelectOptions_cold_1();
    *(_QWORD *)(a1 + 120) = a5;
  }
  return result;
}

_DWORD *doNegate(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  int v9;
  _BYTE *v10;

  v8 = result;
  if (*result != 349)
    return (_DWORD *)makeSimpleA_Expr(0, (uint64_t)"-", 0, (uint64_t)result, a2);
  result[6] = a2;
  v9 = result[2];
  if (v9 != 222)
  {
    if (v9 == 221)
    {
      result[4] = -result[4];
      return result;
    }
    return (_DWORD *)makeSimpleA_Expr(0, (uint64_t)"-", 0, (uint64_t)result, a2);
  }
  v10 = (_BYTE *)*((_QWORD *)result + 2);
  if (*v10 == 43)
    ++v10;
  if (*v10 == 45)
  {
    *((_QWORD *)result + 2) = v10 + 1;
  }
  else
  {
    *((_QWORD *)result + 2) = psprintf("-%s", a2, a3, a4, a2, a6, a7, a8, (size_t)v10);
    return v8;
  }
  return result;
}

unint64_t SystemTypeName(uint64_t a1)
{
  unint64_t String;
  unint64_t v3;
  double v4;
  uint64_t v5;

  String = makeString((uint64_t)"pg_catalog");
  v3 = makeString(a1);
  v4 = list_make2_impl(226, String, v3);
  return makeTypeNameFromNameList(v5, v4);
}

double SystemFuncName(uint64_t a1)
{
  unint64_t String;
  unint64_t v3;

  String = makeString((uint64_t)"pg_catalog");
  v3 = makeString(a1);
  return list_make2_impl(226, String, v3);
}

unint64_t makeInterval_or_AExprOp(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t result;
  unint64_t String;
  unint64_t v10;
  double v11;
  uint64_t v12;
  unint64_t TypeNameFromNameList;
  double v14;
  uint64_t *v15;
  uint64_t *v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;

  if (a1
    && *(_DWORD *)a1 == 347
    && !strcmp(*(const char **)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 8), "interval"))
  {
    String = makeString((uint64_t)"pg_catalog");
    v10 = makeString((uint64_t)"interval");
    v11 = list_make2_impl(226, String, v10);
    TypeNameFromNameList = makeTypeNameFromNameList(v12, v11);
    *(_DWORD *)(TypeNameFromNameList + 48) = *(_DWORD *)(a1 + 16);
    v15 = (uint64_t *)CurrentMemoryContext(v14);
    v16 = v15;
    if (a2)
    {
      v17 = (_DWORD *)MemoryContextAllocZeroAligned(*v15, 0x20uLL);
      *v17 = 349;
      v17[2] = 221;
      v17[4] = 0;
      v17[6] = -1;
      list_make1_impl(226, (uint64_t)v17);
      *(_QWORD *)(TypeNameFromNameList + 24) = v18;
    }
    v19 = MemoryContextAllocZero(*v16, 0xCuLL);
    *(_QWORD *)v19 = 348;
    *(_DWORD *)(v19 + 8) = a3;
    result = MemoryContextAllocZeroAligned(*v16, 0x20uLL);
    *(_DWORD *)result = 357;
    *(_QWORD *)(result + 8) = v19;
    *(_QWORD *)(result + 16) = TypeNameFromNameList;
    *(_DWORD *)(result + 24) = -1;
  }
  else
  {
    v6 = makeString((uint64_t)"?");
    list_make1_impl(226, v6);
    return makeA_Expr(0, v7, a1, a2, a3);
  }
  return result;
}

unint64_t makeAndExpr(_DWORD *a1, uint64_t a2, int a3)
{
  _DWORD *v4;
  int v5;
  double v6;
  uint64_t v7;

  v4 = a1;
  v5 = *a1;
  if (*a1 == 346)
  {
    while (v4[1] == 15)
    {
      v4 = (_DWORD *)*((_QWORD *)v4 + 2);
      v5 = *v4;
      if (*v4 != 346)
        goto LABEL_4;
    }
    goto LABEL_6;
  }
LABEL_4:
  if (v5 != 119 || v4[1])
  {
LABEL_6:
    v6 = list_make2_impl(226, (uint64_t)a1, a2);
    return makeBoolExpr(0, v7, a3, v6);
  }
  *((_QWORD *)v4 + 1) = lappend(*((_QWORD *)v4 + 1), a2);
  return (unint64_t)v4;
}

unint64_t makeOrExpr(_DWORD *a1, uint64_t a2, int a3)
{
  _DWORD *v4;
  int v5;
  double v7;
  uint64_t v8;

  v4 = a1;
  v5 = *a1;
  if (*a1 == 346)
  {
    while (v4[1] == 15)
    {
      v4 = (_DWORD *)*((_QWORD *)v4 + 2);
      v5 = *v4;
      if (*v4 != 346)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    if (v5 == 119 && v4[1] == 1)
    {
      *((_QWORD *)v4 + 1) = lappend(*((_QWORD *)v4 + 1), a2);
      return (unint64_t)v4;
    }
  }
  v7 = list_make2_impl(226, (uint64_t)a1, a2);
  return makeBoolExpr(1, v8, a3, v7);
}

unint64_t makeNotExpr(uint64_t a1, int a2)
{
  double v3;
  uint64_t v4;

  v3 = list_make1_impl(226, a1);
  return makeBoolExpr(2, v4, a2, v3);
}

unint64_t makeBoolAConst(int a1, int a2, double a3)
{
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t String;
  unint64_t v10;
  double v11;
  uint64_t v12;
  unint64_t TypeNameFromNameList;
  unint64_t result;

  v5 = (uint64_t *)CurrentMemoryContext(a3);
  v6 = MemoryContextAllocZeroAligned(*v5, 0x20uLL);
  v7 = v6;
  *(_DWORD *)v6 = 349;
  *(_DWORD *)(v6 + 8) = 223;
  v8 = "f";
  if (a1)
    v8 = "t";
  *(_QWORD *)(v6 + 16) = v8;
  *(_DWORD *)(v6 + 24) = a2;
  String = makeString((uint64_t)"pg_catalog");
  v10 = makeString((uint64_t)"BOOL");
  v11 = list_make2_impl(226, String, v10);
  TypeNameFromNameList = makeTypeNameFromNameList(v12, v11);
  result = MemoryContextAllocZeroAligned(*v5, 0x20uLL);
  *(_DWORD *)result = 357;
  *(_QWORD *)(result + 8) = v7;
  *(_QWORD *)(result + 16) = TypeNameFromNameList;
  *(_DWORD *)(result + 24) = -1;
  return result;
}

unint64_t makeColumnRef(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5)
{
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t String;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;

  v9 = (uint64_t *)CurrentMemoryContext(a5);
  v10 = MemoryContextAllocZeroAligned(*v9, 0x18uLL);
  *(_DWORD *)v10 = 347;
  *(_DWORD *)(v10 + 16) = a3;
  if (!a2 || (v11 = *(unsigned int *)(a2 + 4), (int)v11 < 1))
  {
LABEL_10:
    String = makeString(a1);
    *(_QWORD *)(v10 + 8) = lcons(String, a2);
    return v10;
  }
  v12 = 0;
  v13 = *(_QWORD *)(a2 + 16);
  v14 = v13 + 8 * (int)v11;
  v15 = v13 + 8;
  v16 = -v11;
  while (1)
  {
    v17 = **(_DWORD **)(v15 - 8);
    if (v17 != 351)
      break;
    if (v15 && v15 < v14)
      goto LABEL_9;
LABEL_5:
    --v12;
    v15 += 8;
    if (v16 == v12)
      goto LABEL_10;
  }
  if (v17 != 352)
    goto LABEL_5;
  v20 = MemoryContextAllocZeroAligned(*v9, 0x18uLL);
  *(_DWORD *)v20 = 353;
  if ((_DWORD)v12)
  {
    v21 = -v12;
    v22 = list_copy_tail((int *)a2, v21);
    if (v22)
    {
      v23 = *(unsigned int *)(v22 + 4);
      if ((int)v23 >= 1)
      {
        v24 = *(_QWORD *)(v22 + 16);
        v25 = v24 + 8 * v23;
        v26 = v24 + 8;
        do
        {
          v27 = **(_DWORD **)(v26 - 8) != 351 || v26 == 0;
          if (!v27 && v26 < v25)
            goto LABEL_9;
          v26 += 8;
        }
        while (--v23);
      }
    }
    *(_QWORD *)(v20 + 16) = v22;
    v29 = list_truncate(a2, v21);
    v30 = makeString(a1);
    *(_QWORD *)(v10 + 8) = lcons(v30, v29);
    *(_QWORD *)(v20 + 8) = v10;
    return v20;
  }
  else
  {
    v31 = makeString(a1);
    list_make1_impl(226, v31);
    *(_QWORD *)(v10 + 8) = v32;
    v33 = *(unsigned int *)(a2 + 4);
    if ((int)v33 >= 1)
    {
      v34 = *(_QWORD *)(a2 + 16);
      v35 = v34 + 8 * v33;
      v36 = v34 + 8;
      while (1)
      {
        v37 = **(_DWORD **)(v36 - 8) != 351 || v36 == 0;
        if (!v37 && v36 < v35)
          break;
        v36 += 8;
        if (!--v33)
          goto LABEL_36;
      }
LABEL_9:
      scanner_yyerror((size_t)"improper use of \"*\"", a4);
    }
LABEL_36:
    *(_QWORD *)(v20 + 8) = v10;
    *(_QWORD *)(v20 + 16) = a2;
    return v20;
  }
}

unint64_t makeParamRefCast(int a1, int a2, uint64_t a3, double a4)
{
  uint64_t *v7;
  _DWORD *v8;
  unint64_t result;

  v7 = (uint64_t *)CurrentMemoryContext(a4);
  v8 = (_DWORD *)MemoryContextAllocZero(*v7, 0xCuLL);
  *v8 = 348;
  v8[1] = a1;
  v8[2] = a2;
  result = MemoryContextAllocZeroAligned(*v7, 0x20uLL);
  *(_DWORD *)result = 357;
  *(_QWORD *)(result + 8) = v8;
  *(_QWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 24) = -1;
  return result;
}

uint64_t parser_init(uint64_t result)
{
  *(_QWORD *)(result + 128) = 0;
  return result;
}

void base_yyparse_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_4_14();
  errmsg("UNENCRYPTED PASSWORD is no longer supported", v1, v2, v3, v4, v5, v6, v7, v15);
  errhint("Remove UNENCRYPTED to store the password in encrypted form instead.", v8, v9, v10, v11, v12, v13, v14, v16);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 8));
  errfinish("gram.y", 1084, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_2(size_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_16();
  errmsg("unrecognized role option \"%s\"", v4, v5, v6, v7, v8, v9, v10, *a1);
  OUTLINED_FUNCTION_3_9(*a2);
  errfinish("gram.y", 1146, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_3()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_4_14();
  errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 1393, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_4()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_4_14();
  errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 1408, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_5()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_4_14();
  errmsg("current database cannot be changed", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 1554, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_6()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("time zone interval must be HOUR or HOUR TO MINUTE", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 1738, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_7_5();
  errmsg("column number must be in range from 1 to %d", v1, v2, v3, v4, v5, v6, v7, 0x7FFFuLL);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 12));
  errfinish("gram.y", 2273, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_8(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_16();
  errmsg("sequence option \"%s\" not supported here", v4, v5, v6, v7, v8, v9, v10, *(_QWORD *)(*(_QWORD *)a1 + 16));
  OUTLINED_FUNCTION_3_9(*a2);
  errfinish("gram.y", 2805, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t vars0;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_16();
  errmsg("modulus for hash partition must be specified", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("gram.y", 2857, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t vars0;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_16();
  errmsg("remainder for hash partition must be specified", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("gram.y", 2861, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_8_7();
  errmsg("modulus for hash partition provided more than once", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 + 36));
  errfinish("gram.y", 2834, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_12()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_8_7();
  errmsg("remainder for hash partition provided more than once", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 + 36));
  errfinish("gram.y", 2843, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_13()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("unrecognized hash partition bound specification \"%s\"", v1, v2, v3, v4, v5, v6, v7, *(_QWORD *)(v0 + 16));
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 + 36));
  errfinish("gram.y", 2851, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("STDIN/STDOUT not allowed with PROGRAM", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 12));
  errfinish("gram.y", 3063, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_15()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("WHERE clause not allowed with COPY TO", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 3069, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("STDIN/STDOUT not allowed with PROGRAM", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 16));
  errfinish("gram.y", 3096, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_17()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("for a generated column, GENERATED ALWAYS must be specified", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 20));
  errfinish("gram.y", 3648, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_4_14();
  errmsg("MATCH PARTIAL not yet implemented", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 4));
  errfinish("gram.y", 3915, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_19()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_4_14();
  errmsg("CREATE EXTENSION ... FROM is no longer supported", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 4));
  errfinish("gram.y", 4609, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_20(size_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_16();
  errmsg("unrecognized row security option \"%s\"", v4, v5, v6, v7, v8, v9, v10, *a1);
  errhint("Only PERMISSIVE or RESTRICTIVE policies are supported currently.", v11, v12, v13, v14, v15, v16, v17, v18);
  OUTLINED_FUNCTION_3_9(*a2);
  errfinish("gram.y", 5436, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_21()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 5690, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_22()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("conflicting constraint properties", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 5697, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_23()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t vars0;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_4_14();
  errmsg("CREATE ASSERTION is not yet implemented", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("gram.y", 5792, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_24()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_4_14();
  errmsg("aggregates cannot have output arguments", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 7928, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_25()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("missing argument", v1, v2, v3, v4, v5, v6, v7, v15);
  errhint("Use NONE to denote the missing argument of a unary operator.", v8, v9, v10, v11, v12, v13, v14, v16);
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 8321, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_26()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_4_14();
  errmsg("WITH CHECK OPTION not supported on recursive views", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 10250, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_27()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_4_14();
  errmsg("WITH CHECK OPTION not supported on recursive views", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 10268, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_28()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_6_9();
  errmsg("role name \"%s\" is reserved", v1, v2, v3, v4, v5, v6, v7, (size_t)"none");
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 15379, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_29()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_6_9();
  errmsg("role name \"%s\" is reserved", v1, v2, v3, v4, v5, v6, v7, (size_t)"public");
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 15341, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_30()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_6_9();
  errmsg("%s cannot be used as a role name here", v1, v2, v3, v4, v5, v6, v7, (size_t)"SESSION_USER");
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 15348, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_31()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_6_9();
  errmsg("%s cannot be used as a role name here", v1, v2, v3, v4, v5, v6, v7, (size_t)"CURRENT_USER");
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 15355, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_32()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("LIMIT #,# syntax is not supported", v1, v2, v3, v4, v5, v6, v7, v15);
  errhint("Use separate LIMIT and OFFSET clauses.", v8, v9, v10, v11, v12, v13, v14, v16);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 12));
  errfinish("gram.y", 11877, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_33()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("subquery in FROM must have an alias", v1, v2, v3, v4, v5, v6, v7, v15);
  errhint("For example, FROM (SELECT ...) [AS] foo.", v8, v9, v10, v11, v12, v13, v14, v16);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 4));
  errfinish("gram.y", 12210, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("VALUES in FROM must have an alias", v1, v2, v3, v4, v5, v6, v7, v15);
  errhint("For example, FROM (VALUES ...) [AS] foo.", v8, v9, v10, v11, v12, v13, v14, v16);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 4));
  errfinish("gram.y", 12204, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_35()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("subquery in FROM must have an alias", v1, v2, v3, v4, v5, v6, v7, v15);
  errhint("For example, FROM (SELECT ...) [AS] foo.", v8, v9, v10, v11, v12, v13, v14, v16);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 4));
  errfinish("gram.y", 12235, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_36()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("VALUES in FROM must have an alias", v1, v2, v3, v4, v5, v6, v7, v15);
  errhint("For example, FROM (VALUES ...) [AS] foo.", v8, v9, v10, v11, v12, v13, v14, v16);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 4));
  errfinish("gram.y", 12229, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_37()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("only one DEFAULT value is allowed", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 + 36));
  errfinish("gram.y", 12688, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("only one PATH value per column is allowed", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 + 36));
  errfinish("gram.y", 12697, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_39(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_16();
  errmsg("conflicting or redundant NULL / NOT NULL declarations for column \"%s\"", v4, v5, v6, v7, v8, v9, v10, *(_QWORD *)(a1 + 8));
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(a2 + 36));
  errfinish("gram.y", 12706, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("unrecognized column option \"%s\"", v1, v2, v3, v4, v5, v6, v7, *(_QWORD *)(v0 + 16));
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 + 36));
  errfinish("gram.y", 12716, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_41()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_7_5();
  errmsg("precision for type float must be at least 1 bit", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 4));
  errfinish("gram.y", 12969, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_42()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_7_5();
  errmsg("precision for type float must be less than 54 bits", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 4));
  errfinish("gram.y", 12978, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_43()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("wrong number of parameters on left side of OVERLAPS expression", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 8));
  errfinish("gram.y", 13474, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_44()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("wrong number of parameters on right side of OVERLAPS expression", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 13479, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_45()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_4_14();
  errmsg("UNIQUE predicate is not yet implemented", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 4));
  errfinish("gram.y", 13654, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_46()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("cannot use VARIADIC with WITHIN GROUP", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 8));
  errfinish("gram.y", 14046, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_47()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("cannot use DISTINCT with WITHIN GROUP", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 8));
  errfinish("gram.y", 14041, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 8));
  errfinish("gram.y", 14036, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_49()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_5_6();
  errmsg("frame starting from following row cannot end with current row", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 14517, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_50()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_5_6();
  errmsg("frame start cannot be UNBOUNDED FOLLOWING", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 14512, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_51()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_5_6();
  errmsg("frame starting from current row cannot have preceding rows", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 14546, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_52()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_5_6();
  errmsg("frame starting from following row cannot have preceding rows", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 14553, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_53()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_5_6();
  errmsg("frame end cannot be UNBOUNDED PRECEDING", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*v0);
  errfinish("gram.y", 14540, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_5_6();
  errmsg("frame start cannot be UNBOUNDED FOLLOWING", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 8));
  errfinish("gram.y", 14535, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_55(uint64_t a1, uint64_t *a2)
{
  unint64_t String;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_16();
  String = makeString(*(a2 - 1));
  v5 = lcons(String, *a2);
  v6 = NameListToString(v5);
  errmsg("improper qualified name (too many dotted names): %s", v7, v8, v9, v10, v11, v12, v13, v6);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(a1 - 4));
  errfinish("gram.y", 15112, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_56()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("type modifier cannot have ORDER BY", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 8));
  errfinish("gram.y", 15218, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_57()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("type modifier cannot have parameter name", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 + 28));
  errfinish("gram.y", 15212, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("type modifier cannot have ORDER BY", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 - 8));
  errfinish("gram.y", 15257, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_59()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("type modifier cannot have parameter name", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 + 28));
  errfinish("gram.y", 15251, (uint64_t)"base_yyparse");
  __break(1u);
}

void processCASbits_cold_1(size_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_4_14();
  errmsg("%s constraints cannot be marked NO INHERIT", v4, v5, v6, v7, v8, v9, v10, a1);
  OUTLINED_FUNCTION_3_9(a2);
  errfinish("gram.y", 16789, (uint64_t)"processCASbits");
  __break(1u);
}

void processCASbits_cold_2(size_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_4_14();
  errmsg("%s constraints cannot be marked NOT VALID", v4, v5, v6, v7, v8, v9, v10, a1);
  OUTLINED_FUNCTION_3_9(a2);
  errfinish("gram.y", 16776, (uint64_t)"processCASbits");
  __break(1u);
}

void processCASbits_cold_3(size_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_4_14();
  errmsg("%s constraints cannot be marked DEFERRABLE", v4, v5, v6, v7, v8, v9, v10, a1);
  OUTLINED_FUNCTION_3_9(a2);
  errfinish("gram.y", 16763, (uint64_t)"processCASbits");
  __break(1u);
}

void processCASbits_cold_4(size_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_4_14();
  errmsg("%s constraints cannot be marked DEFERRABLE", v4, v5, v6, v7, v8, v9, v10, a1);
  OUTLINED_FUNCTION_3_9(a2);
  errfinish("gram.y", 16750, (uint64_t)"processCASbits");
  __break(1u);
}

void makeRangeVarFromAnyName_cold_1(uint64_t a1, uint64_t a2)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_16();
  v4 = NameListToString(a1);
  errmsg("improper qualified name (too many dotted names): %s", v5, v6, v7, v8, v9, v10, v11, v4);
  OUTLINED_FUNCTION_3_9(a2);
  errfinish("gram.y", 16675, (uint64_t)"makeRangeVarFromAnyName");
  __break(1u);
}

void SplitColQualList_cold_1(_DWORD *a1)
{
  OUTLINED_FUNCTION_0_5();
  errmsg_internal("unexpected node type %d", *a1);
  errfinish("gram.y", 16715, (uint64_t)"SplitColQualList");
  __break(1u);
}

void SplitColQualList_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("multiple COLLATE clauses not allowed", v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_3_9(*(unsigned int *)(v0 + 24));
  errfinish("gram.y", 16711, (uint64_t)"SplitColQualList");
  __break(1u);
}

void mergeTableFuncParameters_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t vars0;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_16();
  errmsg("OUT and INOUT arguments aren't allowed in TABLE functions", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("gram.y", 16614, (uint64_t)"mergeTableFuncParameters");
  __break(1u);
}

void makeOrderedSetArgs_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_4_14();
  errmsg("an ordered-set aggregate with a VARIADIC direct argument must have one VARIADIC aggregated argument of the same data type", v0, v1, v2, v3, v4, v5, v6, v8);
  v7 = OUTLINED_FUNCTION_9_7();
  OUTLINED_FUNCTION_3_9(v7);
  errfinish("gram.y", 16333, (uint64_t)"makeOrderedSetArgs");
  __break(1u);
}

void insertSelectOptions_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("multiple WITH clauses not allowed", v0, v1, v2, v3, v4, v5, v6, v8);
  v7 = OUTLINED_FUNCTION_9_7();
  OUTLINED_FUNCTION_3_9(v7);
  errfinish("gram.y", 16411, (uint64_t)"insertSelectOptions");
  __break(1u);
}

void insertSelectOptions_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t vars0;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_16();
  errmsg("WITH TIES cannot be specified without ORDER BY clause", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("gram.y", 16402, (uint64_t)"insertSelectOptions");
  __break(1u);
}

void insertSelectOptions_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t vars0;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_16();
  errmsg("multiple limit options not allowed", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("gram.y", 16398, (uint64_t)"insertSelectOptions");
  __break(1u);
}

void insertSelectOptions_cold_4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("multiple LIMIT clauses not allowed", v1, v2, v3, v4, v5, v6, v7, v9);
  v8 = exprLocation(*v0);
  OUTLINED_FUNCTION_3_9(v8);
  errfinish("gram.y", 16390, (uint64_t)"insertSelectOptions");
  __break(1u);
}

void insertSelectOptions_cold_5()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("multiple OFFSET clauses not allowed", v1, v2, v3, v4, v5, v6, v7, v9);
  v8 = exprLocation(*v0);
  OUTLINED_FUNCTION_3_9(v8);
  errfinish("gram.y", 16381, (uint64_t)"insertSelectOptions");
  __break(1u);
}

void insertSelectOptions_cold_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  OUTLINED_FUNCTION_0_24();
  OUTLINED_FUNCTION_1_16();
  errmsg("multiple ORDER BY clauses not allowed", v0, v1, v2, v3, v4, v5, v6, v8);
  v7 = OUTLINED_FUNCTION_9_7();
  OUTLINED_FUNCTION_3_9(v7);
  errfinish("gram.y", 16370, (uint64_t)"insertSelectOptions");
  __break(1u);
}

uint64_t raw_parser(const char *a1)
{
  _BYTE ***v1;
  double v2;
  int v3;
  _OWORD v5[5];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = 0;
  v7 = 0u;
  v8 = 0u;
  v6 = 0u;
  memset(v5, 0, sizeof(v5));
  v1 = (_BYTE ***)scanner_init(a1, (uint64_t)v5, (uint64_t)&ScanKeywords, (uint64_t)&ScanKeywordTokens);
  BYTE8(v6) = 0;
  parser_init((uint64_t)v5);
  v3 = base_yyparse(v1, v2);
  scanner_finish((uint64_t)v1);
  if (v3)
    return 0;
  else
    return v9;
}

uint64_t base_yylex(uint64_t *a1, _BYTE **a2, _BYTE ***a3)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  int v10;
  _BYTE *v11;
  int v12;
  const char *v13;
  uint64_t v14;
  int v17;

  do
  {
    while (1)
    {
      v7 = *a3;
      if (*((_BYTE *)*a3 + 88))
        break;
      v6 = core_yylex((_BYTE **)a1, a2, a3);
      if ((v6 - 275) >= 2)
        goto LABEL_5;
    }
    v6 = *((unsigned int *)v7 + 23);
    *a1 = *((_QWORD *)v7 + 12);
    *(_DWORD *)a2 = *((_DWORD *)v7 + 26);
    **((_BYTE **)v7 + 14) = v7[120];
    v7[88] = 0;
  }
  while ((v6 - 275) < 2);
LABEL_5:
  if ((int)v6 <= 519)
  {
    if ((_DWORD)v6 != 259 && (_DWORD)v6 != 262)
      return v6;
    v8 = (int)strlen((const char *)(*(_QWORD *)v7 + *(int *)a2));
  }
  else
  {
    switch((_DWORD)v6)
    {
      case 0x208:
        v8 = 3;
        break;
      case 0x20F:
        v8 = 5;
        break;
      case 0x2C2:
        v8 = 4;
        break;
      default:
        return v6;
    }
  }
  *((_QWORD *)v7 + 14) = *(_QWORD *)v7 + *(int *)a2 + v8;
  v9 = *(_DWORD *)a2;
  v10 = core_yylex((_BYTE **)v7 + 12, a2, a3);
  *((_DWORD *)v7 + 23) = v10;
  *((_DWORD *)v7 + 26) = *(_DWORD *)a2;
  *(_DWORD *)a2 = v9;
  v11 = (_BYTE *)*((_QWORD *)v7 + 14);
  v7[120] = *v11;
  *v11 = 0;
  v7[88] = 1;
  if ((int)v6 <= 519)
  {
    if (v10 == 675)
    {
      v12 = *(_DWORD *)a2;
      **((_BYTE **)v7 + 14) = v7[120];
      if (core_yylex((_BYTE **)v7 + 12, a2, a3) != 261)
        scanner_yyerror((size_t)"UESCAPE must be followed by a simple string literal", (uint64_t)a3);
      v13 = (const char *)*((_QWORD *)v7 + 12);
      if (strlen(v13) != 1
        || (v14 = *(unsigned __int8 *)v13, (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v14 + 60) & 0x10000) != 0)
        || v14 <= 0x2B && ((1 << v14) & 0x88400000000) != 0
        || scanner_isspace((char)v14))
      {
        scanner_yyerror((size_t)"invalid Unicode escape character", (uint64_t)a3);
      }
      *(_DWORD *)a2 = v12;
      *a1 = str_udeescape((const char *)*a1, *v13, v12, a3);
      v7[88] = 0;
      if ((_DWORD)v6 != 259)
        return 261;
    }
    else
    {
      *a1 = str_udeescape((const char *)*a1, 0x5Cu, *(_DWORD *)a2, a3);
      if ((_DWORD)v6 != 259)
        return 261;
    }
    v17 = strlen((const char *)*a1);
    truncate_identifier((_BYTE *)*a1, v17, 1);
    return 258;
  }
  if ((_DWORD)v6 == 706)
  {
    if (v10 == 542 || v10 == 661)
      return 729;
    else
      return 706;
  }
  else if ((_DWORD)v6 == 527)
  {
    if (v10 == 477 || v10 == 415)
      return 728;
    else
      return 527;
  }
  else if ((v10 - 442) <= 0x2A && ((1 << (v10 + 70)) & 0x40000000021) != 0
         || v10 == 627
         || v10 == 306)
  {
    return 727;
  }
  else
  {
    return 520;
  }
}

uint64_t str_udeescape(const char *a1, unsigned __int8 a2, int a3, _BYTE ***a4)
{
  unint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v51;
  _OWORD v53[2];
  uint64_t v54;

  v54 = 0;
  memset(v53, 0, sizeof(v53));
  v7 = strlen(a1) + 17;
  v8 = palloc(v7);
  v9 = (char *)v8;
  v10 = *(unsigned __int8 *)a1;
  if (!*a1)
    goto LABEL_103;
  v11 = 0;
  v12 = a2;
  v13 = a3 + 3;
  v14 = MEMORY[0x1E0C80978];
  v15 = a1;
  v16 = v8;
  do
  {
    while (1)
    {
      v19 = &v9[-v16];
      if ((unint64_t)&v9[-v16] > v7 - 17)
      {
        v7 *= 2;
        v16 = repalloc(v16, v7);
        v9 = &v19[v16];
        v10 = *(unsigned __int8 *)v15;
      }
      if (v10 != v12)
        break;
      setup_scanner_errposition_callback((uint64_t)v53, (uint64_t)a4, v13 + (_DWORD)v15 - (_DWORD)a1);
      v20 = *((unsigned __int8 *)v15 + 1);
      if ((_DWORD)v20 == v12)
      {
        if (v11)
          goto LABEL_102;
        LODWORD(v17) = 0;
        *v9++ = v12;
        v18 = 2;
        goto LABEL_5;
      }
      if ((*(_DWORD *)(v14 + 4 * v20 + 60) & 0x10000) == 0
        || (v22 = *((unsigned __int8 *)v15 + 2),
            (*(_DWORD *)(v14 + 4 * *((unsigned __int8 *)v15 + 2) + 60) & 0x10000) == 0)
        || (v23 = *((unsigned __int8 *)v15 + 3),
            (*(_DWORD *)(v14 + 4 * *((unsigned __int8 *)v15 + 3) + 60) & 0x10000) == 0)
        || (v24 = *((unsigned __int8 *)v15 + 4),
            (*(_DWORD *)(v14 + 4 * *((unsigned __int8 *)v15 + 4) + 60) & 0x10000) == 0))
      {
        if ((_DWORD)v20 != 43
          || (v25 = *((unsigned __int8 *)v15 + 2),
              (*(_DWORD *)(v14 + 4 * *((unsigned __int8 *)v15 + 2) + 60) & 0x10000) == 0)
          || (v26 = *((unsigned __int8 *)v15 + 3),
              (*(_DWORD *)(v14 + 4 * *((unsigned __int8 *)v15 + 3) + 60) & 0x10000) == 0)
          || (v27 = *((unsigned __int8 *)v15 + 4),
              (*(_DWORD *)(v14 + 4 * *((unsigned __int8 *)v15 + 4) + 60) & 0x10000) == 0)
          || (v28 = *((unsigned __int8 *)v15 + 5),
              (*(_DWORD *)(v14 + 4 * *((unsigned __int8 *)v15 + 5) + 60) & 0x10000) == 0)
          || (v29 = *((unsigned __int8 *)v15 + 6),
              (*(_DWORD *)(v14 + 4 * *((unsigned __int8 *)v15 + 6) + 60) & 0x10000) == 0)
          || (v30 = *((unsigned __int8 *)v15 + 7),
              (*(_DWORD *)(v14 + 4 * *((unsigned __int8 *)v15 + 7) + 60) & 0x10000) == 0))
        {
          str_udeescape_cold_1();
        }
        if ((v25 - 48) >= 0xA)
        {
          if ((v25 - 97) < 6)
          {
            v31 = -87;
            if ((v26 - 48) >= 0xA)
              goto LABEL_35;
            goto LABEL_31;
          }
          if ((v25 - 65) >= 6)
            str_udeescape_cold_3();
          v31 = -55;
          if ((v26 - 48) < 0xA)
            goto LABEL_31;
LABEL_35:
          if ((v26 - 97) >= 6)
          {
            if ((v26 - 65) >= 6)
              str_udeescape_cold_3();
            v32 = -55;
            if ((v27 - 48) >= 0xA)
              goto LABEL_41;
          }
          else
          {
            v32 = -87;
            if ((v27 - 48) >= 0xA)
              goto LABEL_41;
          }
        }
        else
        {
          v31 = -48;
          if ((v26 - 48) >= 0xA)
            goto LABEL_35;
LABEL_31:
          v32 = -48;
          if ((v27 - 48) >= 0xA)
          {
LABEL_41:
            if ((v27 - 97) >= 6)
            {
              if ((v27 - 65) >= 6)
                str_udeescape_cold_3();
              v33 = -55;
              if ((v28 - 48) >= 0xA)
                goto LABEL_47;
LABEL_43:
              v34 = -48;
              if ((v29 - 48) >= 0xA)
                goto LABEL_53;
            }
            else
            {
              v33 = -87;
              if ((v28 - 48) < 0xA)
                goto LABEL_43;
LABEL_47:
              if ((v28 - 97) < 6)
              {
                v34 = -87;
                if ((v29 - 48) < 0xA)
                  goto LABEL_49;
LABEL_53:
                if ((v29 - 97) >= 6)
                {
                  if ((v29 - 65) >= 6)
                    str_udeescape_cold_3();
                  v35 = -55;
                  if ((v30 - 48) >= 0xA)
                    goto LABEL_58;
LABEL_55:
                  v36 = -48;
                }
                else
                {
                  v35 = -87;
                  if ((v30 - 48) < 0xA)
                    goto LABEL_55;
LABEL_58:
                  if ((v30 - 97) >= 6)
                  {
                    if ((v30 - 65) >= 6)
                      str_udeescape_cold_3();
                    v36 = -55;
                  }
                  else
                  {
                    v36 = -87;
                  }
                }
                v17 = ((v31 + v25) << 20) | ((v32 + v26) << 16) | ((v33 + v27) << 12) | ((v34 + v28) << 8) | (16 * (v35 + v29)) | (v36 + v30);
                if ((v17 - 1) >= 0x10FFFF)
                  str_udeescape_cold_2();
                v37 = ((v31 + v25) << 20) | ((v32 + v26) << 16) | ((v33 + v27) << 12) | ((v34 + v28) << 8) & 0xFFFFFC00 | (16 * (v35 + v29)) & 0xFFFFFC00 | (v36 + v30) & 0xFFFFFC00;
                if (v11)
                {
                  if (v37 != 56320)
                    goto LABEL_102;
                  v17 = (v17 & 0x3FF | ((unsigned __int16)(v11 & 0x3FF) << 10)) + 0x10000;
                  goto LABEL_3;
                }
                if (v37 == 56320)
                  goto LABEL_102;
                if (v37 != 55296)
                {
LABEL_3:
                  pg_unicode_to_server(v17, v9);
                  LODWORD(v17) = 0;
                  v9 += strlen(v9);
                }
                v18 = 8;
                goto LABEL_5;
              }
              if ((v28 - 65) >= 6)
                str_udeescape_cold_3();
              v34 = -55;
              if ((v29 - 48) >= 0xA)
                goto LABEL_53;
            }
LABEL_49:
            v35 = -48;
            if ((v30 - 48) < 0xA)
              goto LABEL_55;
            goto LABEL_58;
          }
        }
        v33 = -48;
        if ((v28 - 48) < 0xA)
          goto LABEL_43;
        goto LABEL_47;
      }
      if ((v20 - 48) >= 0xA)
      {
        if ((v20 - 97) >= 6)
        {
          if ((v20 - 65) >= 6)
            str_udeescape_cold_3();
          v38 = -55;
          if ((v22 - 48) < 0xA)
          {
LABEL_74:
            v39 = -48;
            if ((v23 - 48) < 0xA)
              goto LABEL_80;
            goto LABEL_84;
          }
        }
        else
        {
          v38 = -87;
          if ((v22 - 48) < 0xA)
            goto LABEL_74;
        }
      }
      else
      {
        v38 = -48;
        if ((v22 - 48) < 0xA)
          goto LABEL_74;
      }
      if ((v22 - 97) >= 6)
      {
        if ((v22 - 65) >= 6)
          str_udeescape_cold_3();
        v39 = -55;
        if ((v23 - 48) < 0xA)
        {
LABEL_80:
          v40 = -48;
          if ((v24 - 48) >= 0xA)
            goto LABEL_89;
          goto LABEL_86;
        }
      }
      else
      {
        v39 = -87;
        if ((v23 - 48) < 0xA)
          goto LABEL_80;
      }
LABEL_84:
      if ((v23 - 97) >= 6)
      {
        if ((v23 - 65) >= 6)
          str_udeescape_cold_3();
        v40 = -55;
        if ((v24 - 48) >= 0xA)
        {
LABEL_89:
          if ((v24 - 97) >= 6)
          {
            if ((v24 - 65) >= 6)
              str_udeescape_cold_3();
            v41 = -55;
          }
          else
          {
            v41 = -87;
          }
          goto LABEL_93;
        }
      }
      else
      {
        v40 = -87;
        if ((v24 - 48) >= 0xA)
          goto LABEL_89;
      }
LABEL_86:
      v41 = -48;
LABEL_93:
      v17 = ((v38 + (_DWORD)v20) << 12) | ((v39 + v22) << 8) | (16 * (v40 + v23)) | (v41 + v24);
      if ((v17 - 1) >= 0x10FFFF)
        str_udeescape_cold_2();
      v42 = ((v38 + (_DWORD)v20) << 12) | ((v39 + v22) << 8) & 0xFFFFFC00 | (16 * (v40 + v23)) & 0xFFFFFC00 | (v41 + v24) & 0xFFFFFC00;
      if (v11)
      {
        if (v42 != 56320)
          goto LABEL_102;
        v17 = (v17 & 0x3FF | ((unsigned __int16)(v11 & 0x3FF) << 10)) + 0x10000;
LABEL_100:
        pg_unicode_to_server(v17, v9);
        LODWORD(v17) = 0;
        v9 += strlen(v9);
        v18 = 5;
        goto LABEL_5;
      }
      if (v42 == 56320)
        goto LABEL_102;
      if (v42 != 55296)
        goto LABEL_100;
      v18 = 5;
LABEL_5:
      v15 += v18;
      cancel_scanner_errposition_callback();
      v11 = v17;
      v10 = *(unsigned __int8 *)v15;
      if (!*v15)
        goto LABEL_101;
    }
    if (v11)
      goto LABEL_102;
    *v9++ = v10;
    v21 = *(unsigned __int8 *)++v15;
    v10 = v21;
  }
  while (v21);
LABEL_101:
  if (!v11)
    goto LABEL_104;
LABEL_102:
  errstart(20, 0);
  errcode();
  errmsg("invalid Unicode surrogate pair", v43, v44, v45, v46, v47, v48, v49, v51);
  scanner_errposition((v13 + (_DWORD)v15 - (_DWORD)a1), a4);
  errfinish("src/postgres/src_backend_parser_parser.c", 495, (uint64_t)"str_udeescape");
  __break(1u);
LABEL_103:
  v16 = (uint64_t)v9;
LABEL_104:
  *v9 = 0;
  return v16;
}

void str_udeescape_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t vars0;
  size_t vars0a;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_16();
  errmsg("invalid Unicode escape", v0, v1, v2, v3, v4, v5, v6, vars0);
  errhint("Unicode escapes must be \\XXXX or \\+XXXXXX.", v7, v8, v9, v10, v11, v12, v13, vars0a);
  errfinish("src/postgres/src_backend_parser_parser.c", 465, (uint64_t)"str_udeescape");
  __break(1u);
}

void str_udeescape_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t vars0;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_16();
  errmsg("invalid Unicode escape value", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("src/postgres/src_backend_parser_parser.c", 317, (uint64_t)"check_unicode_value");
  __break(1u);
}

void str_udeescape_cold_3()
{
  uint64_t v0;

  OUTLINED_FUNCTION_0_5();
  errmsg_internal("invalid hexadecimal digit");
  OUTLINED_FUNCTION_1_17("src/postgres/src_backend_parser_parser.c", v0, (uint64_t)"hexval");
  __break(1u);
}

uint64_t core_yylex(_BYTE **a1, _BYTE **a2, _BYTE ***a3)
{
  _BYTE **v4;
  _BYTE **v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t started;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  _BYTE **v17;
  _BYTE **v18;
  _BYTE **v19;
  _BYTE *v20;
  unint64_t v21;
  _BYTE *v22;
  _BYTE **v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  _BYTE *v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  size_t v49;
  size_t v50;
  int v51;
  _BYTE **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  unint64_t v59;
  _BYTE **v60;
  _BYTE **v61;
  _BYTE **v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE **v66;
  _BYTE **v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  _DWORD *v81;
  int v82;
  int v83;
  _BYTE **v84;
  _BYTE **v85;
  _DWORD *v86;
  int v87;
  int v88;
  _DWORD *v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  const char *v107;
  int v108;
  char v109;
  _DWORD *v110;
  int v111;
  int v112;
  BOOL v113;
  _BYTE **v114;
  _DWORD *v115;
  const char *v116;
  int v117;
  int v118;
  int v119;
  int v120;
  _BYTE **v121;
  _DWORD *v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  size_t v161;
  void *v162;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  _BYTE *v167;
  const char *v168;
  void **v169;
  int v170;
  int v171;
  const char *v172;
  const char *v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  _BYTE *v177;
  uint64_t v178;
  size_t v179;
  _BYTE *v180;
  int v181;
  size_t v182;
  void *v183;
  _BYTE *v184;
  _BYTE **v185;
  char *v186;
  char *v187;
  char *v188;
  char *v191;
  int v192;
  uint64_t v193;
  char *v194;
  int v195;
  const char *v196;
  int v198;
  uint64_t v199;
  int v200;
  int v201;
  size_t v202;
  size_t v203;
  size_t v204;
  char *v205;

  a3[19] = a1;
  a3[20] = a2;
  if (!*((_DWORD *)a3 + 20))
  {
    *((_DWORD *)a3 + 20) = 1;
    if (*((_DWORD *)a3 + 21))
    {
      if (a3[1])
        goto LABEL_4;
    }
    else
    {
      *((_DWORD *)a3 + 21) = 1;
      if (a3[1])
      {
LABEL_4:
        if (a3[2])
          goto LABEL_5;
        goto LABEL_9;
      }
    }
    a3[1] = (_BYTE **)*MEMORY[0x1E0C80C18];
    if (a3[2])
    {
LABEL_5:
      v4 = a3[5];
      if (!v4)
        goto LABEL_11;
LABEL_10:
      v5 = a3[3];
      v6 = v4[(_QWORD)v5];
      if (v6)
      {
LABEL_12:
        v7 = (uint64_t)v5;
        a3[7] = (_BYTE **)*((_QWORD *)v6 + 4);
        v8 = (_BYTE *)*((_QWORD *)v4[v7] + 2);
        a3[9] = (_BYTE **)v8;
        a3[17] = (_BYTE **)v8;
        a3[1] = *(_BYTE ***)v4[v7];
        *((_BYTE *)a3 + 48) = *v8;
        goto LABEL_13;
      }
LABEL_11:
      core_yyensure_buffer_stack((uint64_t)a3);
      a3[5][(_QWORD)a3[3]] = (_BYTE *)core_yy_create_buffer((uint64_t)a3[1], 0x4000, (uint64_t)a3);
      v4 = a3[5];
      v5 = a3[3];
      v6 = v4[(_QWORD)v5];
      goto LABEL_12;
    }
LABEL_9:
    a3[2] = (_BYTE **)*MEMORY[0x1E0C80C20];
    v4 = a3[5];
    if (!v4)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_13:
  started = yy_start_state_list();
  while (2)
  {
    v10 = a3[9];
    LODWORD(v11) = *((unsigned __int8 *)a3 + 48);
    *v10 = v11;
    v12 = *(_QWORD *)(started + 8 * *((int *)a3 + 21));
    v13 = v10;
    if (*(__int16 *)(v12 + 4 * v11) == (_DWORD)v11)
    {
LABEL_15:
      v11 = v11;
      do
      {
        v12 += 4 * *(__int16 *)(v12 + 4 * v11 + 2);
        v14 = *++v13;
        v11 = v14;
      }
      while (*(__int16 *)(v12 + 4 * v14) == v14);
    }
LABEL_17:
    v15 = *(__int16 *)(v12 - 2);
    a3[17] = (_BYTE **)v10;
    a3[8] = (_BYTE **)(v13 - v10);
    *((_BYTE *)a3 + 48) = *v13;
    *v13 = 0;
    a3[9] = (_BYTE **)v13;
    v16 = v15 - 1;
LABEL_18:
    switch(v16)
    {
      case 0u:
      case 5u:
      case 6u:
      case 7u:
        continue;
      case 1u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return 275;
      case 2u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        *((_DWORD *)*a3 + 15) = 0;
        *((_DWORD *)a3 + 21) = 5;
        goto LABEL_130;
      case 3u:
        ++*((_DWORD *)*a3 + 15);
LABEL_130:
        *v13 = *((_BYTE *)a3 + 48);
        a3[17] = (_BYTE **)v10;
        a3[8] = (_BYTE **)2;
        a3[9] = (_BYTE **)(v10 + 2);
        *((_BYTE *)a3 + 48) = v10[2];
        v10[2] = 0;
        a3[9] = (_BYTE **)(v10 + 2);
        continue;
      case 4u:
        v89 = *a3;
        v90 = *((_DWORD *)*a3 + 15);
        if (v90 <= 0)
        {
          *((_DWORD *)a3 + 21) = 1;
          v89[21] = *((_DWORD *)a3 + 34) - *v89 + *((_DWORD *)a3 + 16);
          return 276;
        }
        v89[15] = v90 - 1;
        continue;
      case 8u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        *((_DWORD *)a3 + 21) = 3;
        *((_DWORD *)*a3 + 12) = 0;
        v91 = (uint64_t)*a3;
        v92 = *((_DWORD *)*a3 + 12);
        v93 = *((_DWORD *)*a3 + 13);
        if (v92 + 1 >= v93)
        {
          *(_DWORD *)(v91 + 52) = 2 * v93;
          (*a3)[5] = (_BYTE *)repalloc((uint64_t)(*a3)[5], *((int *)*a3 + 13));
          v91 = (uint64_t)*a3;
          v92 = *((_DWORD *)*a3 + 12);
        }
        v94 = *(_QWORD *)(v91 + 40);
        v95 = 98;
        goto LABEL_195;
      case 9u:
      case 0xAu:
        v84 = a3[17];
        v85 = a3[8];
        v86 = *a3;
        v88 = *((_DWORD *)*a3 + 12);
        v87 = *((_DWORD *)*a3 + 13);
        if (v88 + (int)v85 < v87)
          goto LABEL_200;
        do
        {
          v86[13] = 2 * v87;
          v86 = *a3;
          v87 = *((_DWORD *)*a3 + 13);
        }
        while (*((_DWORD *)*a3 + 12) + (int)v85 >= v87);
        goto LABEL_199;
      case 0xBu:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        *((_DWORD *)a3 + 21) = 9;
        *((_DWORD *)*a3 + 12) = 0;
        v96 = (uint64_t)*a3;
        v92 = *((_DWORD *)*a3 + 12);
        v97 = *((_DWORD *)*a3 + 13);
        if (v92 + 1 >= v97)
        {
          *(_DWORD *)(v96 + 52) = 2 * v97;
          (*a3)[5] = (_BYTE *)repalloc((uint64_t)(*a3)[5], *((int *)*a3 + 13));
          v96 = (uint64_t)*a3;
          v92 = *((_DWORD *)*a3 + 12);
        }
        v94 = *(_QWORD *)(v96 + 40);
        v95 = 120;
        goto LABEL_195;
      case 0xCu:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        *v13 = *((_BYTE *)a3 + 48);
        a3[17] = (_BYTE **)v10;
        a3[8] = (_BYTE **)1;
        a3[9] = (_BYTE **)(v10 + 1);
        *((_BYTE *)a3 + 48) = v10[1];
        v10[1] = 0;
        a3[9] = (_BYTE **)(v10 + 1);
        v175 = ScanKeywordLookup("nchar", (uint64_t)(*a3)[2]);
        if ((v175 & 0x80000000) == 0)
          goto LABEL_249;
        v184 = pstrdup("n");
        goto LABEL_316;
      case 0xDu:
        *((_BYTE *)*a3 + 80) = 1;
        *((_BYTE *)*a3 + 81) = 0;
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        v98 = (uint64_t)*a3;
        if (*((_BYTE *)*a3 + 37))
          v99 = 11;
        else
          v99 = 15;
        goto LABEL_145;
      case 0xEu:
        *((_BYTE *)*a3 + 80) = 0;
        *((_BYTE *)*a3 + 81) = 0;
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        v100 = 15;
        goto LABEL_191;
      case 0xFu:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        v98 = (uint64_t)*a3;
        if (!*((_BYTE *)*a3 + 37))
          core_yylex_cold_1();
        v99 = 21;
LABEL_145:
        *((_DWORD *)a3 + 21) = v99;
        *(_DWORD *)(v98 + 48) = 0;
        continue;
      case 0x10u:
        v101 = *((_DWORD *)a3 + 21);
        if (v101 - 1 >= 0)
          --v101;
        *((_DWORD *)*a3 + 14) = v101 >> 1;
        *((_DWORD *)a3 + 21) = 13;
        continue;
      case 0x11u:
        *((_DWORD *)a3 + 21) = (2 * *((_DWORD *)*a3 + 14)) | 1;
        continue;
      case 0x12u:
      case 0x13u:
      case 0x49u:
        *v13 = *((_BYTE *)a3 + 48);
        a3[17] = (_BYTE **)v10;
        a3[8] = 0;
        a3[9] = (_BYTE **)v10;
        *((_BYTE *)a3 + 48) = *v10;
        *v10 = 0;
        a3[9] = (_BYTE **)v10;
        *((_DWORD *)a3 + 21) = 1;
        v160 = (uint64_t)*a3;
        switch(*((_DWORD *)*a3 + 14))
        {
          case 1:
            *a3[19] = litbufdup((uint64_t)a3);
            *((_DWORD *)*a3 + 21) = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3 + *((_DWORD *)a3 + 16);
            return 263;
          case 4:
            *a3[19] = litbufdup((uint64_t)a3);
            *((_DWORD *)*a3 + 21) = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3 + *((_DWORD *)a3 + 16);
            return 264;
          case 5:
          case 7:
            if (*(_BYTE *)(v160 + 81))
            {
              pg_verifymbstr();
              v160 = (uint64_t)*a3;
            }
            v161 = *(int *)(v160 + 48);
            v162 = (void *)palloc((int)v161 + 1);
            memcpy(v162, (*a3)[5], v161);
            *((_BYTE *)v162 + v161) = 0;
            *a3[19] = v162;
            goto LABEL_231;
          case 0xA:
            *a3[19] = litbufdup((uint64_t)a3);
            *((_DWORD *)*a3 + 21) = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3 + *((_DWORD *)a3 + 16);
            return 262;
          default:
            scanner_yyerror((size_t)"unhandled previous state in xqs", (uint64_t)a3);
        }
      case 0x14u:
        v102 = (uint64_t)*a3;
        v92 = *((_DWORD *)*a3 + 12);
        v103 = *((_DWORD *)*a3 + 13);
        if (v92 + 1 >= v103)
        {
          *(_DWORD *)(v102 + 52) = 2 * v103;
          (*a3)[5] = (_BYTE *)repalloc((uint64_t)(*a3)[5], *((int *)*a3 + 13));
          v102 = (uint64_t)*a3;
          v92 = *((_DWORD *)*a3 + 12);
        }
        v94 = *(_QWORD *)(v102 + 40);
        v95 = 39;
        goto LABEL_195;
      case 0x15u:
        v84 = a3[17];
        v85 = a3[8];
        v86 = *a3;
        v88 = *((_DWORD *)*a3 + 12);
        v87 = *((_DWORD *)*a3 + 13);
        if (v88 + (int)v85 < v87)
          goto LABEL_200;
        do
        {
          v86[13] = 2 * v87;
          v86 = *a3;
          v87 = *((_DWORD *)*a3 + 13);
        }
        while (*((_DWORD *)*a3 + 12) + (int)v85 >= v87);
        goto LABEL_199;
      case 0x16u:
        v84 = a3[17];
        v85 = a3[8];
        v86 = *a3;
        v88 = *((_DWORD *)*a3 + 12);
        v87 = *((_DWORD *)*a3 + 13);
        if (v88 + (int)v85 < v87)
          goto LABEL_200;
        do
        {
          v86[13] = 2 * v87;
          v86 = *a3;
          v87 = *((_DWORD *)*a3 + 13);
        }
        while (*((_DWORD *)*a3 + 12) + (int)v85 >= v87);
        goto LABEL_199;
      case 0x17u:
        v104 = strtoul((const char *)a3[17] + 2, 0, 16);
        check_escape_warning((uint64_t)a3);
        *((_DWORD *)*a3 + 18) = *(_DWORD *)a3[20];
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        if ((v104 & 0xFFFFFC00) == 0xD800)
        {
          *((_DWORD *)*a3 + 19) = v104;
          *((_DWORD *)a3 + 21) = 23;
        }
        else
        {
          if ((v104 & 0xFFFFFC00) == 0xDC00)
LABEL_342:
            scanner_yyerror((size_t)"invalid Unicode surrogate pair", (uint64_t)a3);
          addunicode(v104, (_DWORD **)a3);
        }
        *(_DWORD *)a3[20] = *((_DWORD *)*a3 + 18);
        continue;
      case 0x18u:
        v105 = strtoul((const char *)a3[17] + 2, 0, 16);
        *((_DWORD *)*a3 + 18) = *(_DWORD *)a3[20];
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        if (v105 >> 10 != 55)
          goto LABEL_342;
        addunicode((v105 & 0x3FF | ((*((_DWORD *)*a3 + 19) & 0x3FF) << 10)) + 0x10000, (_DWORD **)a3);
        *(_DWORD *)a3[20] = *((_DWORD *)*a3 + 18);
        *((_DWORD *)a3 + 21) = 15;
        continue;
      case 0x19u:
      case 0x1Au:
      case 0x4Eu:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        goto LABEL_342;
      case 0x1Bu:
        core_yylex_cold_2((_DWORD *)a3 + 34, a3, (_DWORD **)a3 + 20);
      case 0x1Cu:
        if (*((_BYTE *)a3[17] + 1) != 39)
          goto LABEL_205;
        v106 = *((_DWORD *)*a3 + 8);
        if (v106 == 2)
        {
          if ((int)pg_get_client_encoding() >= 35 && (int)pg_get_client_encoding() <= 41)
LABEL_359:
            core_yylex_cold_3();
        }
        else if (!v106)
        {
          goto LABEL_359;
        }
LABEL_205:
        v124 = *((unsigned __int8 *)a3[17] + 1);
        if (v124 == 92)
        {
          if (*((_BYTE *)*a3 + 80) && *((_BYTE *)*a3 + 36) && errstart(19, 0))
          {
            errcode();
            errmsg("nonstandard use of \\\\ in a string literal", v141, v142, v143, v144, v145, v146, v147, v202);
            errhint("Use the escape string syntax for backslashes, e.g., E'\\\\'.", v148, v149, v150, v151, v152, v153, v154, v204);
            v155 = *(unsigned int *)a3[20];
            if ((v155 & 0x80000000) == 0)
            {
              pg_mbstrlen_with_len(**a3, v155);
              errposition();
            }
            v140 = 1439;
LABEL_219:
            errfinish("scan.l", v140, (uint64_t)"check_string_escape_warning");
          }
LABEL_220:
          *((_BYTE *)*a3 + 80) = 0;
          v156 = *((unsigned __int8 *)a3[17] + 1);
          HIDWORD(v158) = v156;
          LODWORD(v158) = v156 - 98;
          v157 = v158 >> 1;
          if (v157 >= 0xA)
            goto LABEL_224;
          goto LABEL_223;
        }
        if (v124 == 39)
        {
          if (*((_BYTE *)*a3 + 80) && *((_BYTE *)*a3 + 36) && errstart(19, 0))
          {
            errcode();
            errmsg("nonstandard use of \\' in a string literal", v125, v126, v127, v128, v129, v130, v131, v202);
            errhint("Use '' to write quotes in strings, or use the escape string syntax (E'...').", v132, v133, v134, v135, v136, v137, v138, v203);
            v139 = *(unsigned int *)a3[20];
            if ((v139 & 0x80000000) == 0)
            {
              pg_mbstrlen_with_len(**a3, v139);
              errposition();
            }
            v140 = 1429;
            goto LABEL_219;
          }
          goto LABEL_220;
        }
        check_escape_warning((uint64_t)a3);
        v156 = *((unsigned __int8 *)a3[17] + 1);
        HIDWORD(v159) = v156;
        LODWORD(v159) = v156 - 98;
        v157 = v159 >> 1;
        if (v157 >= 0xA)
          goto LABEL_224;
LABEL_223:
        if (((0x345u >> v157) & 1) != 0)
        {
          v80 = byte_18DCB5D9A[v157];
          goto LABEL_122;
        }
LABEL_224:
        v80 = v156;
        if ((char)v156 <= 0)
          *((_BYTE *)*a3 + 81) = 1;
LABEL_122:
        v81 = *a3;
        v82 = *((_DWORD *)*a3 + 12);
        v83 = *((_DWORD *)*a3 + 13);
        if (v82 + 1 >= v83)
        {
          v81[13] = 2 * v83;
          (*a3)[5] = (_BYTE *)repalloc((uint64_t)(*a3)[5], *((int *)*a3 + 13));
          v81 = *a3;
          v82 = *((_DWORD *)*a3 + 12);
        }
        *(_BYTE *)(*((_QWORD *)v81 + 5) + v82) = v80;
LABEL_196:
        ++*((_DWORD *)*a3 + 12);
        continue;
      case 0x1Du:
        v107 = (char *)a3[17] + 1;
        v108 = 8;
        goto LABEL_170;
      case 0x1Eu:
        v107 = (char *)a3[17] + 2;
        v108 = 16;
LABEL_170:
        v109 = strtoul(v107, 0, v108);
        check_escape_warning((uint64_t)a3);
        v110 = *a3;
        v111 = *((_DWORD *)*a3 + 12);
        v112 = *((_DWORD *)*a3 + 13);
        if (v111 + 1 >= v112)
        {
          v110[13] = 2 * v112;
          (*a3)[5] = (_BYTE *)repalloc((uint64_t)(*a3)[5], *((int *)*a3 + 13));
          v110 = *a3;
          v111 = *((_DWORD *)*a3 + 12);
        }
        *(_BYTE *)(*((_QWORD *)v110 + 5) + v111) = v109;
        ++*((_DWORD *)*a3 + 12);
        if (v109)
          v113 = (v109 & 0x80) == 0;
        else
          v113 = 0;
        if (!v113)
          *((_BYTE *)*a3 + 81) = 1;
        continue;
      case 0x1Fu:
      case 0x25u:
        v80 = *(_BYTE *)a3[17];
        goto LABEL_122;
      case 0x20u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        (*a3)[8] = pstrdup((const char *)a3[17]);
        v100 = 17;
        goto LABEL_191;
      case 0x21u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        *v13 = *((_BYTE *)a3 + 48);
        a3[17] = (_BYTE **)v10;
        a3[8] = (_BYTE **)1;
        a3[9] = (_BYTE **)(v10 + 1);
        *((_BYTE *)a3 + 48) = v10[1];
        v10[1] = 0;
        a3[9] = (_BYTE **)(v10 + 1);
        return *(char *)a3[17];
      case 0x22u:
        v114 = a3[17];
        v115 = *a3;
        v116 = (*a3)[8];
        if (strcmp((const char *)v114, v116))
        {
          v117 = *((_DWORD *)a3 + 16) - 1;
          v119 = v115[12];
          v118 = v115[13];
          if (v117 + v119 >= v118)
          {
            do
            {
              v115[13] = 2 * v118;
              v115 = *a3;
              v118 = *((_DWORD *)*a3 + 13);
            }
            while (*((_DWORD *)*a3 + 12) + v117 >= v118);
            (*a3)[5] = (_BYTE *)repalloc(*((_QWORD *)v115 + 5), v118);
            v115 = *a3;
            v119 = *((_DWORD *)*a3 + 12);
          }
          memcpy((void *)(*((_QWORD *)v115 + 5) + v119), v114, v117);
          *((_DWORD *)*a3 + 12) += v117;
          v120 = *((_DWORD *)a3 + 16);
          *v13 = *((_BYTE *)a3 + 48);
          v121 = (_BYTE **)(v120 - 1);
          a3[17] = (_BYTE **)v10;
          a3[8] = v121;
          a3[9] = (_BYTE **)((char *)v121 + (_QWORD)v10);
          *((_BYTE *)a3 + 48) = *((_BYTE *)v121 + (_QWORD)v10);
          *((_BYTE *)v121 + (_QWORD)v10) = 0;
          a3[9] = (_BYTE **)((char *)v121 + (_QWORD)v10);
          continue;
        }
        pfree((uint64_t)v116);
        (*a3)[8] = 0;
        *((_DWORD *)a3 + 21) = 1;
        *a3[19] = litbufdup((uint64_t)a3);
LABEL_231:
        *((_DWORD *)*a3 + 21) = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3 + *((_DWORD *)a3 + 16);
        return 261;
      case 0x23u:
        v84 = a3[17];
        v85 = a3[8];
        v86 = *a3;
        v88 = *((_DWORD *)*a3 + 12);
        v87 = *((_DWORD *)*a3 + 13);
        if (v88 + (int)v85 < v87)
          goto LABEL_200;
        do
        {
          v86[13] = 2 * v87;
          v86 = *a3;
          v87 = *((_DWORD *)*a3 + 13);
        }
        while (*((_DWORD *)*a3 + 12) + (int)v85 >= v87);
        goto LABEL_199;
      case 0x24u:
        v84 = a3[17];
        v85 = a3[8];
        v86 = *a3;
        v88 = *((_DWORD *)*a3 + 12);
        v87 = *((_DWORD *)*a3 + 13);
        if (v88 + (int)v85 < v87)
          goto LABEL_200;
        do
        {
          v86[13] = 2 * v87;
          v86 = *a3;
          v87 = *((_DWORD *)*a3 + 13);
        }
        while (*((_DWORD *)*a3 + 12) + (int)v85 >= v87);
        goto LABEL_199;
      case 0x26u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        v100 = 7;
        goto LABEL_191;
      case 0x27u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        v100 = 19;
LABEL_191:
        *((_DWORD *)a3 + 21) = v100;
        *((_DWORD *)*a3 + 12) = 0;
        continue;
      case 0x28u:
        *((_DWORD *)a3 + 21) = 1;
        v179 = *((int *)*a3 + 12);
        if (!(_DWORD)v179)
          goto LABEL_355;
        v180 = (_BYTE *)palloc((int)v179 + 1);
        memcpy(v180, (*a3)[5], v179);
        v180[v179] = 0;
        v181 = *((_DWORD *)*a3 + 12);
        if (v181 >= 64)
          truncate_identifier(v180, v181, 1);
        *a3[19] = v180;
        goto LABEL_317;
      case 0x29u:
        *((_DWORD *)a3 + 21) = 1;
        v182 = *((int *)*a3 + 12);
        if (!(_DWORD)v182)
LABEL_355:
          scanner_yyerror((size_t)"zero-length delimited identifier", (uint64_t)a3);
        v183 = (void *)palloc((int)v182 + 1);
        memcpy(v183, (*a3)[5], v182);
        *((_BYTE *)v183 + v182) = 0;
        *a3[19] = v183;
        *((_DWORD *)*a3 + 21) = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3 + *((_DWORD *)a3 + 16);
        return 259;
      case 0x2Au:
        v122 = *a3;
        v92 = *((_DWORD *)*a3 + 12);
        v123 = *((_DWORD *)*a3 + 13);
        if (v92 + 1 >= v123)
        {
          v122[13] = 2 * v123;
          (*a3)[5] = (_BYTE *)repalloc((uint64_t)(*a3)[5], *((int *)*a3 + 13));
          v122 = *a3;
          v92 = *((_DWORD *)*a3 + 12);
        }
        v94 = *((_QWORD *)v122 + 5);
        v95 = 34;
LABEL_195:
        *(_BYTE *)(v94 + v92) = v95;
        goto LABEL_196;
      case 0x2Bu:
        v84 = a3[17];
        v85 = a3[8];
        v86 = *a3;
        v88 = *((_DWORD *)*a3 + 12);
        v87 = *((_DWORD *)*a3 + 13);
        if (v88 + (int)v85 >= v87)
        {
          do
          {
            v86[13] = 2 * v87;
            v86 = *a3;
            v87 = *((_DWORD *)*a3 + 13);
          }
          while (*((_DWORD *)*a3 + 12) + (int)v85 >= v87);
LABEL_199:
          (*a3)[5] = (_BYTE *)repalloc(*((_QWORD *)v86 + 5), v87);
          v86 = *a3;
          v88 = *((_DWORD *)*a3 + 12);
        }
LABEL_200:
        memcpy((void *)(*((_QWORD *)v86 + 5) + v88), v84, (int)v85);
        *((_DWORD *)*a3 + 12) += (_DWORD)v85;
        continue;
      case 0x2Cu:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        *v13 = *((_BYTE *)a3 + 48);
        a3[17] = (_BYTE **)v10;
        a3[8] = (_BYTE **)1;
        a3[9] = (_BYTE **)(v10 + 1);
        *((_BYTE *)a3 + 48) = v10[1];
        v10[1] = 0;
        a3[9] = (_BYTE **)(v10 + 1);
        goto LABEL_259;
      case 0x2Du:
        return *((char *)a3[17] + 1);
      case 0x2Eu:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return 268;
      case 0x2Fu:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return 269;
      case 0x30u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return 270;
      case 0x31u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return 271;
      case 0x32u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return 272;
      case 0x33u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return 273;
      case 0x34u:
      case 0x35u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return 274;
      case 0x36u:
      case 0x40u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return *(char *)a3[17];
      case 0x37u:
        v185 = a3[8];
        v186 = (char *)a3[17];
        v187 = strstr(v186, "/*");
        v188 = strstr(v186, "--");
        if (v187 > v188 && v188 != 0 || v187 == 0)
          v191 = v188;
        else
          v191 = v187;
        if (v191)
          LODWORD(v185) = (_DWORD)v191 - (_DWORD)v186;
        if ((int)v185 < 2)
          goto LABEL_286;
        v192 = v186[(_DWORD)v185 - 1];
        if (v192 != 45 && v192 != 43)
          goto LABEL_286;
        v193 = ((_DWORD)v185 - 2);
        while (2)
        {
          switch(v186[v193])
          {
            case '!':
            case '#':
            case '%':
            case '&':
            case '?':
            case '@':
            case '^':
            case '|':
            case '~':
              break;
            default:
              if (--v193 != -1)
                continue;
              if ((int)v185 < 3)
              {
                LODWORD(v185) = 1;
              }
              else
              {
                v199 = v185;
                v200 = (_DWORD)v185 - 1;
                while (1)
                {
                  v201 = v186[(v199 - 2)];
                  if (v201 != 45 && v201 != 43)
                    break;
                  --v199;
                  --v200;
                  LODWORD(v185) = 1;
                  if ((unint64_t)(v199 + 1) <= 3)
                    goto LABEL_286;
                }
                LODWORD(v185) = v200;
              }
              break;
          }
          break;
        }
LABEL_286:
        if (*v186 == 63)
        {
          if (strcmp(v186, "?<@")
            && strcmp(v186, "?@>")
            && strcmp(v186, "?~")
            && strcmp(v186, "?@")
            && strcmp(v186, "?|")
            && strcmp(v186, "?&")
            && strcmp(v186, "?#")
            && strcmp(v186, "?-")
            && strcmp(v186, "?-|")
            && strcmp(v186, "?||"))
          {
            LODWORD(v185) = 1;
          }
        }
        else
        {
          v194 = strchr(v186, 63);
          if (v194)
          {
            v195 = (int)v194;
            if (strcmp(v186, "^?"))
            {
              if (strcmp(v186, "#?") && strcmp(v186, "@?"))
                LODWORD(v185) = v195 - (_DWORD)v186;
            }
          }
        }
        *(_DWORD *)a3[20] = (_DWORD)v186 - *(_DWORD *)*a3;
        if ((unint64_t)a3[8] <= (int)v185)
          goto LABEL_312;
        *v13 = *((_BYTE *)a3 + 48);
        a3[17] = (_BYTE **)v10;
        a3[8] = (_BYTE **)(int)v185;
        a3[9] = (_BYTE **)&v10[(int)v185];
        *((_BYTE *)a3 + 48) = v10[(int)v185];
        v10[(int)v185] = 0;
        a3[9] = (_BYTE **)&v10[(int)v185];
        if ((_DWORD)v185 == 2)
        {
          v196 = (const char *)a3[17];
          switch(*v196)
          {
            case '!':
              if (v196[1] != 61)
                break;
              return 274;
            case '<':
              v198 = *((unsigned __int8 *)v196 + 1);
              if (v198 == 61)
                return 272;
              if (v198 == 62)
                return 274;
              break;
            case '=':
              if (v196[1] != 62)
                break;
              return 271;
            case '>':
              if (v196[1] != 61)
                break;
              return 273;
            default:
              break;
          }
        }
        else if ((_DWORD)v185 == 1)
        {
          v196 = (const char *)a3[17];
          v163 = *v196;
          if (memchr(",()[].;:+-*/%^<>=?", *v196, 0x13uLL))
            return v163;
        }
        else
        {
LABEL_312:
          if ((int)v185 > 63)
            scanner_yyerror((size_t)"operator too long", (uint64_t)a3);
          v196 = (const char *)a3[17];
        }
        *a3[19] = pstrdup(v196);
        return 265;
      case 0x38u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        *(_DWORD *)a3[19] = atol((const char *)a3[17] + 1);
        return 267;
      case 0x39u:
        goto LABEL_239;
      case 0x3Au:
      case 0x3Cu:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        *a3[19] = pstrdup((const char *)a3[17]);
        return 260;
      case 0x3Bu:
      case 0x3Eu:
        v164 = *((_DWORD *)a3 + 16);
        *v13 = *((_BYTE *)a3 + 48);
        v165 = v164 - 2;
        goto LABEL_238;
      case 0x3Du:
        v166 = *((_DWORD *)a3 + 16);
        *v13 = *((_BYTE *)a3 + 48);
        v165 = v166 - 1;
LABEL_238:
        v167 = &v10[v165];
        a3[17] = (_BYTE **)v10;
        a3[8] = (_BYTE **)v165;
        a3[9] = (_BYTE **)v167;
        *((_BYTE *)a3 + 48) = *v167;
        *v167 = 0;
        a3[9] = (_BYTE **)v167;
LABEL_239:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        v168 = (const char *)a3[17];
        v169 = (void **)a3[19];
        v205 = 0;
        *__error() = 0;
        v170 = strtoint(v168, &v205, 10);
        if (*v205 || (v171 = v170, *__error() == 34))
        {
          *v169 = pstrdup(v168);
          return 260;
        }
        else
        {
          *(_DWORD *)v169 = v171;
          return 266;
        }
      case 0x3Fu:
        v172 = (const char *)pstrdup((const char *)a3[17]);
        v173 = v172;
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        v174 = (uint64_t)a3[8] - 1;
        if (*((_BYTE *)a3[17] + v174) == 63)
          v172[v174] = 0;
        v175 = ScanKeywordLookup(v172, (uint64_t)(*a3)[2]);
        if ((v175 & 0x80000000) != 0)
        {
LABEL_259:
          v184 = downcase_truncate_identifier((int8x16_t *)a3[17], *((_DWORD *)a3 + 16), 1);
LABEL_316:
          *a3[19] = v184;
LABEL_317:
          *((_DWORD *)*a3 + 21) = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3 + *((_DWORD *)a3 + 16);
          return 258;
        }
        else
        {
          v176 = (uint64_t)a3[8] - 1;
          if (!v173[v176])
          {
            *v13 = *((_BYTE *)a3 + 48);
            v177 = &v10[(int)v176];
            a3[17] = (_BYTE **)v10;
            a3[8] = (_BYTE **)(int)v176;
            a3[9] = (_BYTE **)v177;
            *((_BYTE *)a3 + 48) = *v177;
            *v177 = 0;
            a3[9] = (_BYTE **)v177;
          }
LABEL_249:
          v178 = 2 * v175;
          *a3[19] = (_BYTE *)(*(_QWORD *)(*a3)[2] + *(unsigned __int16 *)(*((_QWORD *)(*a3)[2] + 1) + v178));
          return *(unsigned __int16 *)&(*a3)[3][v178];
        }
      case 0x41u:
        fprintf_to_ereport("flex scanner jammed");
      case 0x42u:
        v17 = a3[17];
        *v13 = *((_BYTE *)a3 + 48);
        v18 = a3[5];
        v19 = a3[3];
        v20 = v18[(_QWORD)v19];
        if (!*((_DWORD *)v20 + 16))
        {
          a3[7] = (_BYTE **)*((_QWORD *)v20 + 4);
          *(_QWORD *)v18[(_QWORD)v19] = a3[1];
          *((_DWORD *)a3[5][(_QWORD)a3[3]] + 16) = 1;
          v18 = a3[5];
          v19 = a3[3];
          v20 = v18[(_QWORD)v19];
        }
        v21 = (unint64_t)a3[9];
        v22 = (_BYTE *)*((_QWORD *)v20 + 1);
        v23 = a3[7];
        if ((_BYTE **)v21 <= (_BYTE **)((char *)v23 + (_QWORD)v22))
        {
          v10 = a3[17];
          v71 = ~(_DWORD)v17 + (int)v13;
          v13 = &v10[v71];
          a3[9] = (_BYTE **)&v10[v71];
          v12 = *(_QWORD *)(started + 8 * *((int *)a3 + 21));
          if (v10 < &v10[v71])
          {
            v72 = v10;
            do
            {
              v74 = *v72++;
              v73 = v74;
              if (!v74)
                v73 = 256;
              v12 += 4 * *(__int16 *)(v12 + 4 * v73 + 2);
              --v71;
            }
            while (v71);
          }
          v75 = v12 + 4 * *(__int16 *)(v12 + 1026);
          if (*(_WORD *)(v12 + 1024) != 256 || v75 == 0)
            goto LABEL_17;
          a3[9] = (_BYTE **)++v13;
          v12 = v75;
          goto LABEL_119;
        }
        if ((_BYTE *)v21 > &v22[(_QWORD)v23 + 1])
          fprintf_to_ereport("fatal flex scanner internal error--end of buffer missed");
        v24 = (unint64_t)a3[17];
        v25 = v21 - v24;
        if (!*((_DWORD *)v20 + 15))
        {
          if (v25 != 1)
            goto LABEL_97;
LABEL_90:
          *((_DWORD *)a3 + 22) = 0;
          a3[9] = (_BYTE **)v24;
          v68 = *((_DWORD *)a3 + 21);
          if (v68 - 1 >= 0)
            --v68;
          v16 = (v68 >> 1) + 67;
          if (v16 > 0x4E)
LABEL_352:
            fprintf_to_ereport("fatal flex scanner internal error--no action found");
          goto LABEL_18;
        }
        v26 = v25 - 1;
        if ((int)v25 - 1 < 1)
          goto LABEL_45;
        LODWORD(v27) = 0;
        v28 = (v21 - v24 - 2);
        if (v28 < 7)
        {
          v29 = (char *)a3[17];
          goto LABEL_41;
        }
        v29 = (char *)a3[17];
        if ((unint64_t)&v22[-v24] < 0x20)
          goto LABEL_41;
        v30 = v28 + 1;
        if (v28 >= 0x1F)
        {
          v31 = v30 & 0x1FFFFFFE0;
          v32 = v22 + 16;
          v33 = (__int128 *)(v24 + 16);
          v34 = v30 & 0x1FFFFFFE0;
          do
          {
            v35 = *v33;
            *(v32 - 1) = *(v33 - 1);
            *v32 = v35;
            v32 += 2;
            v33 += 2;
            v34 -= 32;
          }
          while (v34);
          if (v30 == v31)
            goto LABEL_44;
          if ((v30 & 0x18) == 0)
          {
            v22 += v31;
            v29 = (char *)(v24 + v31);
            LODWORD(v27) = v30 & 0xFFFFFFE0;
LABEL_41:
            v41 = v27 + v24 - v21 + 1;
            do
            {
              v42 = *v29++;
              *v22++ = v42;
            }
            while (!__CFADD__(v41++, 1));
            goto LABEL_44;
          }
        }
        else
        {
          v31 = 0;
        }
        v27 = v30 & 0x1FFFFFFF8;
        v29 = (char *)(v24 + (v30 & 0x1FFFFFFF8));
        v36 = &v22[v30 & 0x1FFFFFFF8];
        v37 = &v22[v31];
        v38 = (uint64_t *)(v24 + v31);
        v39 = v31 - (v30 & 0x1FFFFFFF8);
        do
        {
          v40 = *v38++;
          *v37++ = v40;
          v39 += 8;
        }
        while (v39);
        v22 = v36;
        if (v30 != v27)
          goto LABEL_41;
LABEL_44:
        v18 = a3[5];
        v19 = a3[3];
        v20 = v18[(_QWORD)v19];
LABEL_45:
        if (*((_DWORD *)v20 + 16) == 2)
        {
          a3[7] = 0;
          *((_QWORD *)v18[(_QWORD)v19] + 4) = 0;
          if (a3[7])
            goto LABEL_47;
        }
        else
        {
          v202 = (size_t)v17;
          v45 = started;
          v46 = ~(uint64_t)v26;
          v47 = *((_QWORD *)v20 + 3);
          v48 = v47 + v46;
          if (!(v47 + v46))
          {
            v53 = a3[9];
            while (*((_DWORD *)v20 + 10))
            {
              v55 = *((_QWORD *)v20 + 1);
              v56 = 2 * v47;
              v57 = v47 + (v47 >> 3);
              if (v56)
                v57 = v56;
              *((_QWORD *)v20 + 3) = v57;
              if (v55)
              {
                v54 = repalloc(v55, v57 + 2);
                *((_QWORD *)v20 + 1) = v54;
                if (!v54)
                  goto LABEL_340;
              }
              else
              {
                v54 = palloc(v57 + 2);
                *((_QWORD *)v20 + 1) = v54;
                if (!v54)
                  goto LABEL_340;
              }
              v53 = (_BYTE **)(v54 + (int)v53 - (int)v55);
              a3[9] = v53;
              v20 = a3[5][(_QWORD)a3[3]];
              v47 = *((_QWORD *)v20 + 3);
              v48 = v47 + v46;
              if (v47 + v46)
                goto LABEL_49;
            }
            *((_QWORD *)v20 + 1) = 0;
LABEL_340:
            fprintf_to_ereport("fatal error - scanner input buffer overflow");
          }
LABEL_49:
          if (v48 >= 0x2000)
            v49 = 0x2000;
          else
            v49 = v48;
          if (*((_DWORD *)v20 + 11))
          {
            v50 = 0;
            while (1)
            {
              v51 = getc((FILE *)a3[1]);
              if (v51 == -1 || v51 == 10)
                break;
              *(_BYTE *)(*((_QWORD *)a3[5][(_QWORD)a3[3]] + 1) + v26 + v50++) = v51;
              if (v49 == v50)
              {
                v50 = v49;
                break;
              }
            }
            if (v51 == -1)
            {
              if (ferror((FILE *)a3[1]))
LABEL_353:
                fprintf_to_ereport("input in flex scanner failed");
            }
            else if (v51 == 10)
            {
              *(_BYTE *)(*((_QWORD *)a3[5][(_QWORD)a3[3]] + 1) + v26 + v50++) = 10;
            }
            a3[7] = (_BYTE **)v50;
          }
          else
          {
            *__error() = 0;
            v50 = fread((void *)(*((_QWORD *)a3[5][(_QWORD)a3[3]] + 1) + v26), 1uLL, v49, (FILE *)a3[1]);
            a3[7] = (_BYTE **)v50;
            if (!v50)
            {
              while (ferror((FILE *)a3[1]))
              {
                if (*__error() != 4)
                  goto LABEL_353;
                *__error() = 0;
                clearerr((FILE *)a3[1]);
                v58 = fread((void *)(*((_QWORD *)a3[5][(_QWORD)a3[3]] + 1) + v26), 1uLL, v49, (FILE *)a3[1]);
                a3[7] = (_BYTE **)v58;
                if (v58)
                {
                  v50 = v58;
                  goto LABEL_79;
                }
              }
              v50 = 0;
            }
          }
LABEL_79:
          started = v45;
          *((_QWORD *)a3[5][(_QWORD)a3[3]] + 4) = v50;
          if (a3[7])
          {
LABEL_47:
            v44 = 0;
            goto LABEL_83;
          }
        }
        if (v26)
        {
          v44 = 2;
          *((_DWORD *)a3[5][(_QWORD)a3[3]] + 16) = 2;
        }
        else
        {
          core_yyrestart((uint64_t)a3[1], (uint64_t)a3);
          v44 = 1;
        }
LABEL_83:
        v59 = (unint64_t)a3[7];
        v60 = (_BYTE **)(v59 + v26);
        v61 = a3[5];
        v62 = a3[3];
        v63 = v61[(_QWORD)v62];
        if ((unint64_t)v60 > *((_QWORD *)v63 + 3))
        {
          v64 = *((_QWORD *)v63 + 1);
          if (v64)
            v65 = repalloc(v64, (unint64_t)v60 + (v59 >> 1));
          else
            v65 = palloc((unint64_t)v60 + (v59 >> 1));
          *((_QWORD *)a3[5][(_QWORD)a3[3]] + 1) = v65;
          v61 = a3[5];
          v62 = a3[3];
          if (!*((_QWORD *)v61[(_QWORD)v62] + 1))
            fprintf_to_ereport("out of dynamic memory in yy_get_next_buffer()");
          v60 = (_BYTE **)((char *)a3[7] + v26);
        }
        a3[7] = v60;
        *((_BYTE *)v60 + *((_QWORD *)v61[(_QWORD)v62] + 1)) = 0;
        *((_BYTE *)a3[7] + *((_QWORD *)a3[5][(_QWORD)a3[3]] + 1) + 1) = 0;
        v66 = a3[5];
        v67 = a3[3];
        v24 = *((_QWORD *)v66[(_QWORD)v67] + 1);
        a3[17] = (_BYTE **)v24;
        if (v44 == 1)
          goto LABEL_90;
        if (v44)
        {
          v22 = (_BYTE *)*((_QWORD *)v66[(_QWORD)v67] + 1);
          v23 = a3[7];
LABEL_97:
          v10 = (_BYTE *)v24;
          v13 = (char *)v23 + (_QWORD)v22;
          a3[9] = (_BYTE **)((char *)v23 + (_QWORD)v22);
          v12 = *(_QWORD *)(started + 8 * *((int *)a3 + 21));
          if (v24 < (unint64_t)v13)
          {
            v69 = 0;
            do
            {
              v70 = v10[v69];
              if (!v10[v69])
                v70 = 256;
              v12 += 4 * *(__int16 *)(v12 + 4 * v70 + 2);
              ++v69;
            }
            while (v13 - v10 != v69);
          }
          goto LABEL_17;
        }
        v77 = ~(_DWORD)v17 + (int)v13;
        v13 = (_BYTE *)(v24 + v77);
        a3[9] = (_BYTE **)(v24 + v77);
        v12 = *(_QWORD *)(started + 8 * *((int *)a3 + 21));
        if (v24 < v24 + v77)
        {
          v78 = 0;
          do
          {
            v79 = *(unsigned __int8 *)(v24 + v78);
            if (!*(_BYTE *)(v24 + v78))
              v79 = 256;
            v12 += 4 * *(__int16 *)(v12 + 4 * v79 + 2);
            ++v78;
          }
          while (v77 != v78);
        }
        v10 = (_BYTE *)v24;
LABEL_119:
        LODWORD(v11) = *v13;
        if (*(__int16 *)(v12 + 4 * *v13) != (_DWORD)v11)
          goto LABEL_17;
        goto LABEL_15;
      case 0x43u:
        v163 = 0;
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return v163;
      case 0x44u:
        scanner_yyerror((size_t)"unterminated bit string literal", (uint64_t)a3);
      case 0x45u:
        scanner_yyerror((size_t)"unterminated /* comment", (uint64_t)a3);
      case 0x46u:
      case 0x4Cu:
        scanner_yyerror((size_t)"unterminated quoted identifier", (uint64_t)a3);
      case 0x47u:
        scanner_yyerror((size_t)"unterminated hexadecimal string literal", (uint64_t)a3);
      case 0x48u:
      case 0x4Au:
      case 0x4Du:
        scanner_yyerror((size_t)"unterminated quoted string", (uint64_t)a3);
      case 0x4Bu:
        scanner_yyerror((size_t)"unterminated dollar-quoted string", (uint64_t)a3);
      default:
        goto LABEL_352;
    }
  }
}

double core_yyensure_buffer_stack(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  double result;
  _QWORD *v8;

  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
  {
    v8 = (_QWORD *)palloc(8uLL);
    *(_QWORD *)(a1 + 40) = v8;
    if (v8)
    {
      *v8 = 0;
      result = 0.0;
      *(_OWORD *)(a1 + 24) = xmmword_18DCB5DB0;
      return result;
    }
    goto LABEL_8;
  }
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 24) < (unint64_t)(v3 - 1))
    return result;
  v4 = v3 + 8;
  v5 = repalloc(v2, 8 * (v3 + 8));
  *(_QWORD *)(a1 + 40) = v5;
  if (!v5)
LABEL_8:
    fprintf_to_ereport("out of dynamic memory in core_yyensure_buffer_stack()");
  v6 = (_OWORD *)(v5 + 8 * *(_QWORD *)(a1 + 32));
  result = 0.0;
  v6[2] = 0u;
  v6[3] = 0u;
  *v6 = 0u;
  v6[1] = 0u;
  *(_QWORD *)(a1 + 32) = v4;
  return result;
}

uint64_t core_yy_create_buffer(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;

  v6 = palloc(0x48uLL);
  if (!v6 || (v7 = v6, *(_QWORD *)(v6 + 24) = a2, v8 = palloc(a2 + 2), (*(_QWORD *)(v7 + 8) = v8) == 0))
    fprintf_to_ereport("out of dynamic memory in core_yy_create_buffer()");
  *(_DWORD *)(v7 + 40) = 1;
  v9 = *__error();
  *(_QWORD *)(v7 + 32) = 0;
  **(_BYTE **)(v7 + 8) = 0;
  *(_BYTE *)(*(_QWORD *)(v7 + 8) + 1) = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 + 8);
  *(_DWORD *)(v7 + 48) = 1;
  *(_DWORD *)(v7 + 64) = 0;
  v10 = *(_QWORD *)(a3 + 40);
  if (v10 && *(_QWORD *)(v10 + 8 * *(_QWORD *)(a3 + 24)) == v7)
  {
    v11 = 8 * *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 56) = *(_QWORD *)(*(_QWORD *)(v10 + v11) + 32);
    v12 = *(_BYTE **)(*(_QWORD *)(v10 + v11) + 16);
    *(_QWORD *)(a3 + 72) = v12;
    *(_QWORD *)(a3 + 136) = v12;
    *(_QWORD *)(a3 + 8) = **(_QWORD **)(v10 + v11);
    *(_BYTE *)(a3 + 48) = *v12;
  }
  *(_QWORD *)v7 = a1;
  *(_DWORD *)(v7 + 60) = 1;
  v13 = *(_QWORD *)(a3 + 40);
  if (v13)
    v13 = *(_QWORD *)(v13 + 8 * *(_QWORD *)(a3 + 24));
  if (v13 != v7)
    *(_QWORD *)(v7 + 52) = 1;
  *(_DWORD *)(v7 + 44) = 0;
  *__error() = v9;
  return v7;
}

void scanner_yyerror(size_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(unsigned __int8 *)(**(_QWORD **)a2 + **(int **)(a2 + 160));
  errstart(20, 0);
  errcode();
  if (v4)
  {
    errmsg("%s at or near \"%s\"", v5, v6, v7, v8, v9, v10, v11, a1);
    scanner_errposition(**(unsigned int **)(a2 + 160), (_BYTE ***)a2);
    errfinish("scan.l", 1234, (uint64_t)"scanner_yyerror");
    __break(1u);
  }
  errmsg("%s at end of input", v5, v6, v7, v8, v9, v10, v11, a1);
  scanner_errposition(**(unsigned int **)(a2 + 160), (_BYTE ***)a2);
  errfinish("scan.l", 1226, (uint64_t)"scanner_yyerror");
  __break(1u);
}

uint64_t scanner_errposition(uint64_t a1, _BYTE ***a2)
{
  if ((a1 & 0x80000000) != 0)
    return 0;
  pg_mbstrlen_with_len(**a2, a1);
  return errposition();
}

void *litbufdup(uint64_t a1)
{
  size_t v2;
  void *v3;

  v2 = *(int *)(*(_QWORD *)a1 + 48);
  v3 = (void *)palloc((int)v2 + 1);
  memcpy(v3, *(const void **)(*(_QWORD *)a1 + 40), v2);
  *((_BYTE *)v3 + v2) = 0;
  return v3;
}

uint64_t check_escape_warning(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;

  v1 = result;
  if (*(_BYTE *)(*(_QWORD *)result + 80))
  {
    if (*(_BYTE *)(*(_QWORD *)result + 36))
    {
      result = errstart(19, 0);
      if ((_DWORD)result)
      {
        errcode();
        errmsg("nonstandard use of escape in a string literal", v2, v3, v4, v5, v6, v7, v8, v17);
        errhint("Use the escape string syntax for escapes, e.g., E'\\r\\n'.", v9, v10, v11, v12, v13, v14, v15, v18);
        v16 = **(unsigned int **)(v1 + 160);
        if ((v16 & 0x80000000) == 0)
        {
          pg_mbstrlen_with_len(**(_BYTE ***)v1, v16);
          errposition();
        }
        result = (uint64_t)errfinish("scan.l", 1454, (uint64_t)"check_escape_warning");
      }
    }
  }
  *(_BYTE *)(*(_QWORD *)v1 + 80) = 0;
  return result;
}

void *addunicode(int a1, _DWORD **a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;
  int v10;
  int v11;
  void *result;
  _DWORD **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  _QWORD *v17;
  char __s[17];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((a1 - 1) >= 0x10FFFF)
    scanner_yyerror((size_t)"invalid Unicode escape value", (uint64_t)a2);
  v14 = 0;
  v15 = 0;
  v3 = *a2[20];
  v13 = a2;
  LODWORD(v14) = v3;
  v16 = scb_error_callback;
  v17 = &v13;
  v4 = (uint64_t *)error_context_stack();
  v15 = *v4;
  *v4 = v5;
  pg_unicode_to_server(v6, __s);
  *v4 = v15;
  v7 = strlen(__s);
  v8 = v7;
  v9 = *a2;
  v11 = (*a2)[12];
  v10 = (*a2)[13];
  if (v11 + v7 >= v10)
  {
    do
    {
      *((_DWORD *)v9 + 13) = 2 * v10;
      v9 = *a2;
      v10 = (*a2)[13];
    }
    while ((*a2)[12] + v7 >= v10);
    *((_QWORD *)*a2 + 5) = repalloc(v9[5], v10);
    v9 = *a2;
    v11 = (*a2)[12];
  }
  result = memcpy((void *)(v9[5] + v11), __s, v8);
  (*a2)[12] += v8;
  return result;
}

int *core_yyrestart(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int *result;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4 && *(_QWORD *)(v4 + 8 * *(_QWORD *)(a2 + 24))
    || (core_yyensure_buffer_stack(a2),
        *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * *(_QWORD *)(a2 + 24)) = core_yy_create_buffer(*(_QWORD *)(a2 + 8), 0x4000, a2), (v4 = *(_QWORD *)(a2 + 40)) != 0))
  {
    v5 = *(_QWORD *)(v4 + 8 * *(_QWORD *)(a2 + 24));
    v6 = *__error();
    if (v5)
    {
      *(_QWORD *)(v5 + 32) = 0;
      **(_BYTE **)(v5 + 8) = 0;
      *(_BYTE *)(*(_QWORD *)(v5 + 8) + 1) = 0;
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 48) = 1;
      *(_DWORD *)(v5 + 64) = 0;
      v7 = *(_QWORD *)(a2 + 40);
      if (v7)
      {
        if (*(_QWORD *)(v7 + 8 * *(_QWORD *)(a2 + 24)) == v5)
        {
          v8 = 8 * *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a2 + 56) = *(_QWORD *)(*(_QWORD *)(v7 + v8) + 32);
          v9 = *(_BYTE **)(*(_QWORD *)(v7 + v8) + 16);
          *(_QWORD *)(a2 + 72) = v9;
          *(_QWORD *)(a2 + 136) = v9;
          *(_QWORD *)(a2 + 8) = **(_QWORD **)(v7 + v8);
          *(_BYTE *)(a2 + 48) = *v9;
        }
      }
    }
  }
  else
  {
    v5 = 0;
    v6 = *__error();
  }
  *(_QWORD *)v5 = a1;
  *(_DWORD *)(v5 + 60) = 1;
  v10 = *(_QWORD *)(a2 + 40);
  if (v10)
    v10 = *(_QWORD *)(v10 + 8 * *(_QWORD *)(a2 + 24));
  if (v10 != v5)
    *(_QWORD *)(v5 + 52) = 1;
  *(_DWORD *)(v5 + 44) = 0;
  result = __error();
  *result = v6;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = 8 * *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(*(_QWORD *)(v12 + v13) + 32);
  v14 = *(_BYTE **)(*(_QWORD *)(v12 + v13) + 16);
  *(_QWORD *)(a2 + 72) = v14;
  *(_QWORD *)(a2 + 136) = v14;
  *(_QWORD *)(a2 + 8) = **(_QWORD **)(v12 + v13);
  *(_BYTE *)(a2 + 48) = *v14;
  return result;
}

void core_yy_switch_to_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;

  core_yyensure_buffer_stack(a2);
  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8 * *(_QWORD *)(a2 + 24));
    if (v5 != a1)
    {
      if (v5)
      {
        **(_BYTE **)(a2 + 72) = *(_BYTE *)(a2 + 48);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * *(_QWORD *)(a2 + 24)) + 16) = *(_QWORD *)(a2 + 72);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * *(_QWORD *)(a2 + 24)) + 32) = *(_QWORD *)(a2 + 56);
        v4 = *(_QWORD *)(a2 + 40);
      }
      *(_QWORD *)(v4 + 8 * *(_QWORD *)(a2 + 24)) = a1;
      v6 = *(_QWORD *)(a2 + 40);
      v7 = 8 * *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 56) = *(_QWORD *)(*(_QWORD *)(v6 + v7) + 32);
      v8 = *(_BYTE **)(*(_QWORD *)(v6 + v7) + 16);
      *(_QWORD *)(a2 + 72) = v8;
      *(_QWORD *)(a2 + 136) = v8;
      *(_QWORD *)(a2 + 8) = **(_QWORD **)(v6 + v7);
      *(_BYTE *)(a2 + 48) = *v8;
      *(_DWORD *)(a2 + 88) = 1;
    }
  }
}

uint64_t core_yy_flush_buffer(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  if (result)
  {
    *(_QWORD *)(result + 32) = 0;
    **(_BYTE **)(result + 8) = 0;
    *(_BYTE *)(*(_QWORD *)(result + 8) + 1) = 0;
    *(_QWORD *)(result + 16) = *(_QWORD *)(result + 8);
    *(_DWORD *)(result + 48) = 1;
    *(_DWORD *)(result + 64) = 0;
    v2 = *(_QWORD *)(a2 + 40);
    if (v2)
    {
      if (*(_QWORD *)(v2 + 8 * *(_QWORD *)(a2 + 24)) == result)
      {
        v3 = 8 * *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 56) = *(_QWORD *)(*(_QWORD *)(v2 + v3) + 32);
        v4 = *(_BYTE **)(*(_QWORD *)(v2 + v3) + 16);
        *(_QWORD *)(a2 + 72) = v4;
        *(_QWORD *)(a2 + 136) = v4;
        *(_QWORD *)(a2 + 8) = **(_QWORD **)(v2 + v3);
        *(_BYTE *)(a2 + 48) = *v4;
      }
    }
  }
  return result;
}

uint64_t core_yy_scan_buffer(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v3 = a2 - 2;
  if (a2 < 2)
    return 0;
  if (*(_BYTE *)(a1 + v3))
    return 0;
  if (*(_BYTE *)(a2 + a1 - 1))
    return 0;
  v8 = palloc(0x48uLL);
  if (!v8)
    fprintf_to_ereport("out of dynamic memory in core_yy_scan_buffer()");
  v4 = v8;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = v3;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = a1;
  *(_QWORD *)(v8 + 32) = v3;
  *(_QWORD *)(v8 + 40) = 0;
  *(_DWORD *)(v8 + 48) = 1;
  *(_QWORD *)(v8 + 60) = 0;
  core_yyensure_buffer_stack(a3);
  v9 = *(_QWORD *)(a3 + 40);
  v10 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(v9 + 8 * v10);
  if (v11 == v4)
    return v4;
  if (v11)
  {
    **(_BYTE **)(a3 + 72) = *(_BYTE *)(a3 + 48);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * *(_QWORD *)(a3 + 24)) + 16) = *(_QWORD *)(a3 + 72);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * *(_QWORD *)(a3 + 24)) + 32) = *(_QWORD *)(a3 + 56);
    v9 = *(_QWORD *)(a3 + 40);
    v10 = *(_QWORD *)(a3 + 24);
  }
  *(_QWORD *)(v9 + 8 * v10) = v4;
  v12 = *(_QWORD *)(a3 + 40);
  v13 = 8 * *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 56) = *(_QWORD *)(*(_QWORD *)(v12 + v13) + 32);
  v14 = *(_BYTE **)(*(_QWORD *)(v12 + v13) + 16);
  *(_QWORD *)(a3 + 72) = v14;
  *(_QWORD *)(a3 + 136) = v14;
  *(_QWORD *)(a3 + 8) = **(_QWORD **)(v12 + v13);
  *(_BYTE *)(a3 + 48) = *v14;
  *(_DWORD *)(a3 + 88) = 1;
  return v4;
}

uint64_t core_yyset_extra(uint64_t result, _QWORD *a2)
{
  *a2 = result;
  return result;
}

uint64_t core_yylex_init(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  if (a1)
  {
    v2 = palloc(0xA8uLL);
    *a1 = v2;
    if (v2)
    {
      v3 = v2;
      result = 0;
      *(_QWORD *)(v3 + 160) = 0;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      v5 = *a1;
      *(_DWORD *)(v5 + 92) = 0;
      *(_DWORD *)(v5 + 96) = 0;
      *(_QWORD *)(v5 + 104) = 0;
      *(_OWORD *)(v5 + 8) = 0u;
      *(_OWORD *)(v5 + 24) = 0u;
      *(_QWORD *)(v5 + 40) = 0;
      *(_QWORD *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 80) = 0;
    }
    else
    {
      *__error() = 12;
      return 1;
    }
  }
  else
  {
    *__error() = 22;
    return 1;
  }
  return result;
}

_QWORD *setup_scanner_errposition_callback(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *result;
  uint64_t v4;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 24) = scb_error_callback;
  *(_QWORD *)(a1 + 32) = a1;
  result = (_QWORD *)error_context_stack();
  *(_QWORD *)(v4 + 16) = *result;
  *result = v4 + 16;
  return result;
}

uint64_t scb_error_callback(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = geterrcode();
  if ((_DWORD)result != 67371461)
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((v3 & 0x80000000) == 0)
    {
      pg_mbstrlen_with_len(***(_BYTE ****)a1, v3);
      return errposition();
    }
  }
  return result;
}

_QWORD *cancel_scanner_errposition_callback()
{
  _QWORD *result;
  uint64_t v1;

  result = (_QWORD *)error_context_stack();
  *result = v1;
  return result;
}

uint64_t scanner_init(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v8 = strlen(a1);
  v9 = palloc(0xA8uLL);
  if (!v9)
    scanner_init_cold_1();
  v10 = v9;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_QWORD *)(v9 + 160) = 0;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_DWORD *)(v9 + 92) = 0;
  *(_DWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 104) = 0;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)v9 = a2;
  *(_QWORD *)(a2 + 16) = a3;
  *(_QWORD *)(a2 + 24) = a4;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)backslash_quote();
  *(_BYTE *)(a2 + 36) = *(_BYTE *)escape_string_warning();
  *(_BYTE *)(a2 + 37) = *(_BYTE *)standard_conforming_strings();
  v11 = (void *)palloc(v8 + 2);
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v8;
  memcpy(v11, a1, v8);
  *(_BYTE *)(v8 + *(_QWORD *)a2 + 1) = 0;
  *(_BYTE *)(*(_QWORD *)a2 + v8) = 0;
  core_yy_scan_buffer(*(_QWORD *)a2, v8 + 2, v10);
  *(_DWORD *)(a2 + 52) = 1024;
  *(_QWORD *)(a2 + 40) = palloc(0x400uLL);
  *(_DWORD *)(a2 + 48) = 0;
  return v10;
}

uint64_t scanner_finish(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;

  v1 = *(_QWORD *)result;
  if (*(_QWORD *)(*(_QWORD *)result + 8) >= 0x2000uLL)
  {
    v2 = (uint64_t *)result;
    result = pfree(*(_QWORD *)v1);
    v1 = *v2;
  }
  if (*(int *)(v1 + 52) >= 0x2000)
    return pfree(*(_QWORD *)(v1 + 40));
  return result;
}

uint64_t core_yyrealloc(uint64_t a1, unint64_t a2)
{
  if (a1)
    return repalloc(a1, a2);
  else
    return palloc(a2);
}

void fprintf_to_ereport(const char *a1)
{
  errstart(20, 0);
  errmsg_internal("%s", a1);
  errfinish("scan.l", 56, (uint64_t)"fprintf_to_ereport");
  __break(1u);
}

void core_yylex_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  OUTLINED_FUNCTION_0_5();
  errcode();
  errmsg("unsafe use of string constant with Unicode escapes", v0, v1, v2, v3, v4, v5, v6, v7);
  errdetail("String constants with Unicode escapes cannot be used when standard_conforming_strings is off.");
  OUTLINED_FUNCTION_1_18();
  errfinish("scan.l", 558, (uint64_t)"core_yylex");
  __break(1u);
}

void core_yylex_cold_2(_DWORD *a1, _BYTE ***a2, _DWORD **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  size_t v20;

  **a3 = *a1 - *(_DWORD *)*a2;
  OUTLINED_FUNCTION_0_5();
  errcode();
  errmsg("invalid Unicode escape", v5, v6, v7, v8, v9, v10, v11, v19);
  errhint("Unicode escapes must be \\uXXXX or \\UXXXXXXXX.", v12, v13, v14, v15, v16, v17, v18, v20);
  scanner_errposition(**a3, a2);
  errfinish("scan.l", 697, (uint64_t)"core_yylex");
  __break(1u);
}

void core_yylex_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  size_t v15;

  OUTLINED_FUNCTION_0_5();
  errcode();
  errmsg("unsafe use of \\' in a string literal", v0, v1, v2, v3, v4, v5, v6, v14);
  errhint("Use '' to write quotes in strings. \\' is insecure in client-only encodings.", v7, v8, v9, v10, v11, v12, v13, v15);
  OUTLINED_FUNCTION_1_18();
  errfinish("scan.l", 709, (uint64_t)"core_yylex");
  __break(1u);
}

void scanner_init_cold_1()
{
  *__error() = 12;
  OUTLINED_FUNCTION_0_5();
  errmsg_internal("core_yylex_init() failed: %m");
  errfinish("scan.l", 1252, (uint64_t)"scanner_init");
  __break(1u);
}

int8x16_t *downcase_truncate_identifier(int8x16_t *a1, unsigned int a2, char a3)
{
  return downcase_identifier(a1, a2, a3, 1);
}

int8x16_t *downcase_identifier(int8x16_t *a1, unsigned int a2, char a3, int a4)
{
  int8x16_t *v8;
  int v9;
  uint64_t v10;
  int8x16_t *v11;
  __darwin_ct_rune_t v12;
  __darwin_ct_rune_t v13;
  uint64_t v14;
  int8x16_t *v15;
  int8x16_t *v16;
  int8x16_t v17;
  uint8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  int8x16_t v21;
  uint64_t v22;
  int8x8_t *v23;
  int8x8_t *v24;
  uint64_t v25;
  int8x8_t v26;
  unsigned __int8 *v27;
  __int8 *v28;
  uint64_t v29;
  char v30;
  int v31;
  char v32;

  v8 = (int8x16_t *)palloc((int)(a2 + 1));
  v9 = pg_database_encoding_max_length();
  if ((int)a2 <= 0)
  {
    v8->i8[0] = 0;
    return v8;
  }
  if (v9 == 1)
  {
    v10 = a2;
    v11 = v8;
    do
    {
      v13 = a1->u8[0];
      a1 = (int8x16_t *)((char *)a1 + 1);
      v12 = v13;
      if ((v13 - 65) <= 0x19)
      {
        LOBYTE(v12) = v12 + 32;
      }
      else if ((v12 & 0x80) != 0 && __maskrune(v12, 0x8000uLL))
      {
        LOBYTE(v12) = __tolower(v12);
      }
      v11->i8[0] = v12;
      v11 = (int8x16_t *)((char *)v11 + 1);
      --v10;
    }
    while (v10);
    goto LABEL_26;
  }
  v14 = 0;
  if (a2 < 8 || (unint64_t)((char *)v8 - (char *)a1) < 0x20)
  {
LABEL_22:
    v27 = &a1->u8[v14];
    v28 = &v8->i8[v14];
    v29 = a2 - v14;
    do
    {
      v31 = *v27++;
      v30 = v31;
      v32 = v31 + 32;
      if ((v31 - 65) < 0x1A)
        v30 = v32;
      *v28++ = v30;
      --v29;
    }
    while (v29);
    goto LABEL_26;
  }
  if (a2 >= 0x20)
  {
    v14 = a2 & 0xFFFFFFE0;
    v15 = a1 + 1;
    v16 = v8 + 1;
    v17.i64[0] = 0xBFBFBFBFBFBFBFBFLL;
    v17.i64[1] = 0xBFBFBFBFBFBFBFBFLL;
    v18.i64[0] = 0x1A1A1A1A1A1A1A1ALL;
    v18.i64[1] = 0x1A1A1A1A1A1A1A1ALL;
    v19.i64[0] = 0x2020202020202020;
    v19.i64[1] = 0x2020202020202020;
    v20 = v14;
    do
    {
      v21 = vbslq_s8((int8x16_t)vcgtq_u8(v18, (uint8x16_t)vaddq_s8(*v15, v17)), vaddq_s8(*v15, v19), *v15);
      v16[-1] = vbslq_s8((int8x16_t)vcgtq_u8(v18, (uint8x16_t)vaddq_s8(v15[-1], v17)), vaddq_s8(v15[-1], v19), v15[-1]);
      *v16 = v21;
      v15 += 2;
      v16 += 2;
      v20 -= 32;
    }
    while (v20);
    if (v14 == a2)
      goto LABEL_26;
    if ((a2 & 0x18) == 0)
      goto LABEL_22;
  }
  else
  {
    v14 = 0;
  }
  v22 = v14;
  v14 = a2 & 0xFFFFFFF8;
  v23 = (int8x8_t *)&a1->i8[v22];
  v24 = (int8x8_t *)&v8->i8[v22];
  v25 = v22 - v14;
  do
  {
    v26 = *v23++;
    *v24++ = vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)0x1A1A1A1A1A1A1A1ALL, (uint8x8_t)vadd_s8(v26, (int8x8_t)0xBFBFBFBFBFBFBFBFLL)), vadd_s8(v26, (int8x8_t)0x2020202020202020), v26);
    v25 += 8;
  }
  while (v25);
  if (v14 != a2)
    goto LABEL_22;
LABEL_26:
  v8->i8[a2] = 0;
  if (a2 >= 0x40 && a4)
    truncate_identifier(v8, a2, a3);
  return v8;
}

_BYTE *truncate_identifier(_BYTE *result, int a2, char a3)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[64];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2 >= 64)
  {
    v4 = (size_t)result;
    result = (_BYTE *)pg_mbcliplen(result, a2, 63);
    if ((a3 & 1) != 0)
    {
      v5 = (int)result;
      __memcpy_chk();
      v13[v5] = 0;
      result = (_BYTE *)errstart(18, 0);
      if ((_DWORD)result)
      {
        errcode();
        errmsg("identifier \"%s\" will be truncated to \"%s\"", v6, v7, v8, v9, v10, v11, v12, v4);
        result = errfinish("src/postgres/src_backend_parser_scansup.c", 134, (uint64_t)"truncate_identifier");
      }
    }
    else
    {
      v5 = (int)result;
    }
    *(_BYTE *)(v4 + v5) = 0;
  }
  return result;
}

BOOL scanner_isspace(int a1)
{
  return a1 == 32 || a1 - 9 < 2 || (a1 & 0xFE) == 12;
}

void proc_exit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t vars0;

  pg_printf("Terminating process due to FATAL error\n", a2, a3, a4, a5, a6, a7, a8, vars0);
  exit(1);
}

uint64_t s_lock(unsigned int *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int v5;
  unsigned int v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v12 = 0u;
  v13 = a2;
  v14 = a3;
  v15 = a4;
  do
    v5 = __ldaxr(a1);
  while (__stlxr(1u, a1));
  if (v5)
  {
    do
    {
      perform_spin_delay(&v12);
      do
        v6 = __ldaxr(a1);
      while (__stlxr(1u, a1));
    }
    while (v6);
  }
  v7 = (int *)spins_per_delay(&spins_per_delay);
  v8 = *v7;
  if (v9)
  {
    if (v8 >= 11)
    {
      v10 = v8 - 1;
LABEL_14:
      *v7 = v10;
    }
  }
  else if (v8 <= 999)
  {
    if (v8 >= 900)
      v10 = 1000;
    else
      v10 = v8 + 100;
    goto LABEL_14;
  }
  return DWORD1(v12);
}

_DWORD *perform_spin_delay(_DWORD *a1)
{
  _DWORD *result;
  int v3;
  int v4;
  int v5;
  double v6;
  int v7;

  ++*a1;
  result = (_DWORD *)spins_per_delay();
  if (v3 >= *result)
  {
    v4 = a1[1] + 1;
    a1[1] = v4;
    if (v4 >= 1001)
      perform_spin_delay_cold_1((uint64_t)a1);
    v5 = a1[2];
    if (!v5)
    {
      v5 = 1000;
      a1[2] = 1000;
    }
    pg_usleep(v5);
    v6 = (double)(int)a1[2];
    result = (_DWORD *)random();
    v7 = a1[2] + (int)(v6 * ((double)(uint64_t)result / 2147483650.0) + 0.5);
    if (v7 > 1000000)
      v7 = 1000;
    a1[2] = v7;
    *a1 = 0;
  }
  return result;
}

int *finish_spin_delay()
{
  int *result;
  int v1;
  int v2;
  int v3;

  result = (int *)spins_per_delay();
  v1 = *result;
  if (v2)
  {
    if (v1 < 11)
      return result;
    v3 = v1 - 1;
  }
  else
  {
    if (v1 > 999)
      return result;
    if (v1 >= 900)
      v3 = 1000;
    else
      v3 = v1 + 100;
  }
  *result = v3;
  return result;
}

void perform_spin_delay_cold_1(uint64_t a1)
{
  const char *v1;
  const char *v2;
  int v3;

  v1 = *(const char **)(a1 + 16);
  if (*(_QWORD *)(a1 + 32))
    v2 = *(const char **)(a1 + 32);
  else
    v2 = "(unknown)";
  v3 = *(_DWORD *)(a1 + 24);
  errstart(22, 0);
  errmsg_internal("stuck spinlock detected at %s, %s:%d", v2, v1, v3);
  errfinish("src/postgres/src_backend_storage_lmgr_s_lock.c", 94, (uint64_t)"s_lock_stuck");
  __break(1u);
}

_QWORD *check_stack_depth()
{
  _QWORD *result;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;

  stack_base_ptr();
  result = (_QWORD *)max_stack_depth_bytes();
  if (v2)
    v3 = v1 <= *result;
  else
    v3 = 1;
  if (!v3)
    check_stack_depth_cold_1();
  return result;
}

BOOL stack_is_too_deep()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;

  stack_base_ptr();
  v1 = *(_QWORD *)max_stack_depth_bytes();
  if (v2)
    v3 = v0 <= v1;
  else
    v3 = 1;
  return !v3;
}

void check_stack_depth_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;

  errstart(20, 0);
  errcode();
  errmsg("stack depth limit exceeded", v0, v1, v2, v3, v4, v5, v6, v15);
  v7 = (unsigned int *)max_stack_depth();
  errhint("Increase the configuration parameter \"max_stack_depth\" (currently %dkB), after ensuring the platform's stack depth limit is adequate.", v8, v9, v10, v11, v12, v13, v14, *v7);
  errfinish("src/postgres/src_backend_tcop_postgres.c", 611, (uint64_t)"check_stack_depth");
  __break(1u);
}

size_t datumGetSize(const char *a1, int a2, int a3)
{
  unsigned int v4;
  int v5;
  uint64_t v6;

  if (a2)
    return a3;
  if (a3 >= 1)
    return a3;
  if (a3 == -2)
  {
    if (!a1)
      datumGetSize_cold_3();
    return strlen(a1) + 1;
  }
  else
  {
    if (a3 != -1)
      datumGetSize_cold_1(a3);
    if (!a1)
      datumGetSize_cold_2();
    v4 = *(unsigned __int8 *)a1;
    if (v4 == 1)
    {
      v5 = *((unsigned __int8 *)a1 + 1);
      v6 = 3;
      if (v5 == 18)
        v6 = 18;
      if ((v5 & 0xFE) == 2 || v5 == 1)
        return 10;
      else
        return v6;
    }
    else if ((v4 & 1) != 0)
    {
      return v4 >> 1;
    }
    else
    {
      return *(_DWORD *)a1 >> 2;
    }
  }
}

unsigned __int8 *datumCopy(unsigned __int8 *result, char a2, int a3)
{
  const void *v3;
  size_t Size;
  size_t v5;
  unsigned int v6;
  int v7;
  uint64_t EOHP;
  unint64_t flat_size;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;

  v3 = result;
  if ((a2 & 1) == 0)
  {
    if (a3 == -1)
    {
      v6 = *result;
      if (v6 == 1)
      {
        v7 = result[1];
        if ((v7 & 0xFE) == 2)
        {
          EOHP = DatumGetEOHP((uint64_t)result);
          flat_size = EOH_get_flat_size(EOHP);
          v10 = palloc(flat_size);
          EOH_flatten_into(EOHP);
          return (unsigned __int8 *)v10;
        }
        v12 = 3;
        if (v7 == 18)
          v12 = 18;
        if (v7 == 1)
          v5 = 10;
        else
          v5 = v12;
      }
      else
      {
        if ((v6 & 1) != 0)
          v11 = v6 >> 1;
        else
          v11 = *(_DWORD *)result >> 2;
        v5 = v11;
      }
      Size = v5;
    }
    else
    {
      Size = datumGetSize((const char *)result, 0, a3);
      v5 = Size;
    }
    v13 = (void *)palloc(Size);
    memcpy(v13, v3, v5);
    return (unsigned __int8 *)v13;
  }
  return result;
}

BOOL datumIsEqual(const char *a1, const char *a2, int a3, int a4)
{
  size_t Size;
  size_t v9;
  _BOOL8 result;

  if (a3)
  {
    return a1 == a2;
  }
  else
  {
    Size = datumGetSize(a1, 0, a4);
    v9 = datumGetSize(a2, 0, a4);
    result = 0;
    if (Size != v9)
      return result;
    return memcmp(a1, a2, Size) == 0;
  }
}

void datumGetSize_cold_1(int a1)
{
  OUTLINED_FUNCTION_0_5();
  errmsg_internal("invalid typLen: %d", a1);
  errfinish("src/postgres/src_backend_utils_adt_datum.c", 115, (uint64_t)"datumGetSize");
  __break(1u);
}

void datumGetSize_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t vars0;

  OUTLINED_FUNCTION_0_5();
  errcode();
  errmsg("invalid Datum pointer", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("src/postgres/src_backend_utils_adt_datum.c", 97, (uint64_t)"datumGetSize");
  __break(1u);
}

void datumGetSize_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t vars0;

  OUTLINED_FUNCTION_0_5();
  errcode();
  errmsg("invalid Datum pointer", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("src/postgres/src_backend_utils_adt_datum.c", 109, (uint64_t)"datumGetSize");
  __break(1u);
}

uint64_t DatumGetEOHP(uint64_t a1)
{
  return *(_QWORD *)(a1 + 2);
}

uint64_t EOH_get_flat_size(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 8))();
}

uint64_t EOH_flatten_into(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 8))();
}

char *quote_identifier(_BYTE *a1)
{
  const char *v1;
  int v2;
  _BOOL4 v4;
  int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  int v11;
  _BOOL4 v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;
  int v16;
  char v17;
  unsigned int v18;
  size_t v19;
  char *result;
  char *v21;
  int v22;

  v1 = a1;
  v2 = *a1;
  v4 = v2 == 95 || (v2 - 97) < 0x1A;
  v5 = 0;
  if (*a1)
  {
    v6 = a1 + 1;
    do
    {
      v7 = v2 - 97;
      v8 = v2 - 48;
      if (v2 == 34)
        v9 = v5 + 1;
      else
        v9 = v5;
      v10 = v8 >= 0xA;
      if (v8 >= 0xA)
        v11 = v9;
      else
        v11 = v5;
      v12 = !v10 && v4;
      v13 = v2 == 95;
      if (v2 == 95)
        v14 = v5;
      else
        v14 = v11;
      if (v13)
        v15 = v4;
      else
        v15 = v12;
      if (v7 >= 0x1A)
      {
        v5 = v14;
        v4 = v15;
      }
      v16 = *v6++;
      v2 = v16;
    }
    while (v16);
  }
  if (*(_BYTE *)quote_all_identifiers()
    || (v17 & 1) == 0
    || (v18 = ScanKeywordLookup(v1, (uint64_t)&ScanKeywords), (v18 & 0x80000000) == 0) && ScanKeywordCategories[v18])
  {
    v19 = strlen(v1);
    result = (char *)palloc(v19 + v5 + 3);
    *result = 34;
    v21 = result;
    while (1)
    {
      v22 = *(unsigned __int8 *)v1;
      if (v22 == 34)
      {
        v21[1] = 34;
        v21 += 2;
      }
      else
      {
        if (!*v1)
        {
          *(_WORD *)(v21 + 1) = 34;
          return result;
        }
        ++v21;
      }
      *v21 = v22;
      ++v1;
    }
  }
  return (char *)v1;
}

void ExceptionalCondition(uint64_t a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8;

  if (a2 && a1)
  {
    if (a3)
    {
      write_stderr("TRAP: %s(\"%s\", File: \"%s\", Line: %d)\n", a2, a3, a4, a5, a6, a7, a8, a2);
      fflush((FILE *)*MEMORY[0x1E0C80C10]);
      abort();
    }
  }
  write_stderr("TRAP: ExceptionalCondition: bad arguments\n", a2, a3, a4, a5, a6, a7, a8, v8);
  fflush((FILE *)*MEMORY[0x1E0C80C10]);
  abort();
}

BOOL in_error_recursion_trouble()
{
  return *(_DWORD *)recursion_depth() > 2;
}

uint64_t errstart(int a1, const char *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _DWORD *v17;
  _BOOL4 v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int *v30;
  int v31;
  int *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  int v48;
  int *v49;
  uint64_t v50;
  size_t v52;

  v3 = a1;
  if (a1 < 20)
    goto LABEL_28;
  if (*(_DWORD *)CritSectionCount())
    v3 = 22;
  if (v3 != 20)
    goto LABEL_9;
  if (!*(_QWORD *)PG_exception_stack() || *(_BYTE *)ExitOnAnyError() || *(_BYTE *)proc_exit_inprogress())
  {
    v3 = 21;
LABEL_9:
    if ((*(_DWORD *)errordata_stack_depth() & 0x80000000) != 0)
      goto LABEL_28;
    goto LABEL_10;
  }
  v3 = 20;
  if ((*(_DWORD *)errordata_stack_depth() & 0x80000000) != 0)
    goto LABEL_28;
LABEL_10:
  v4 = errordata();
  if (v5 + 1 > 1)
    v6 = (v5 + 1);
  else
    v6 = 1;
  if (v6 < 2)
  {
    v7 = 0;
LABEL_24:
    v11 = (int *)(v4 + 192 * v7);
    v12 = v6 - v7;
    do
    {
      v14 = *v11;
      v11 += 48;
      v13 = v14;
      if (v3 <= v14)
        v3 = v13;
      --v12;
    }
    while (v12);
    goto LABEL_28;
  }
  v7 = v6 & 0x7FFFFFFE;
  v8 = v7;
  v9 = (int *)v4;
  v10 = v3;
  do
  {
    if (v3 <= *v9)
      v3 = *v9;
    if (v10 <= v9[48])
      v10 = v9[48];
    v9 += 96;
    v8 -= 2;
  }
  while (v8);
  if (v3 <= v10)
    v3 = v10;
  if (v7 != v6)
    goto LABEL_24;
LABEL_28:
  v15 = *(_DWORD *)log_min_messages();
  if ((v3 - 15) > 1)
  {
    if (v15 == 15)
    {
      if (v3 > 20)
        goto LABEL_30;
    }
    else if (v3 >= v15)
    {
      goto LABEL_30;
    }
LABEL_35:
    v16 = 0;
    goto LABEL_36;
  }
  if (v15 >= 21)
    goto LABEL_35;
LABEL_30:
  v16 = 1;
LABEL_36:
  v17 = (_DWORD *)whereToSendOutput();
  v18 = 0;
  if (v3 != 16 && *v17 == 2)
  {
    if (!*(_BYTE *)ClientAuthInProgress())
    {
      v46 = *(_DWORD *)client_min_messages();
      v18 = v3 == 17 || v3 >= v46;
      if (v3 > 19)
        v48 = 1;
      else
        v48 = v16;
      v20 = v48 | v18;
      if ((_DWORD)v20 != 1)
        return v20;
      goto LABEL_44;
    }
    v18 = v3 > 19;
  }
  if (v3 > 19)
    v19 = 1;
  else
    v19 = v16;
  v20 = v19 | v18;
  if ((_DWORD)v20 != 1)
    return v20;
LABEL_44:
  v21 = (uint64_t *)ErrorContext();
  if (!*v21)
  {
    write_stderr("error occurred before error message processing is available\n", v22, v23, v24, v25, v26, v27, v28, v52);
    exit(2);
  }
  v29 = v21;
  v30 = (int *)recursion_depth();
  v31 = (*v30)++;
  if (v3 >= 20 && v31 >= 1)
  {
    MemoryContextReset(*v29);
    if (*v30 >= 3)
    {
      *(_QWORD *)error_context_stack() = 0;
      *(_QWORD *)debug_query_string() = 0;
    }
  }
  v32 = (int *)errordata_stack_depth();
  v33 = *v32 + 1;
  *v32 = v33;
  if (v33 >= 5)
    errstart_cold_1(v32);
  v34 = errordata();
  v36 = v34;
  v37 = v35;
  v38 = (int *)(v34 + 192 * v35);
  if (v38 < v38 + 48)
  {
    v39 = 192 * v35 + v34;
    v40 = v39 + 192;
    v41 = v39 + 8;
    if (v40 > v41)
      v41 = v40;
    bzero(v38, ((v41 + ~v34 - 192 * v35) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  *v38 = v3;
  v42 = v36 + 192 * v37;
  *(_BYTE *)(v42 + 4) = v16;
  *(_BYTE *)(v42 + 5) = v18;
  v43 = "postgres-13";
  if (a2)
    v43 = a2;
  *(int64x2_t *)(v42 + 40) = vdupq_n_s64((unint64_t)v43);
  v44 = v36 + 192 * v37;
  if (v3 < 20)
  {
    v45 = (_DWORD *)(v44 + 56);
    if (v3 == 19)
      *v45 = 64;
    else
      *v45 = 0;
  }
  else
  {
    *(_DWORD *)(v44 + 56) = 2600;
  }
  v49 = __error();
  v50 = v36 + 192 * v37;
  *(_DWORD *)(v50 + 176) = *v49;
  *(_QWORD *)(v50 + 184) = *v29;
  --*v30;
  return v20;
}

uint64_t write_stderr(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  FILE **v9;

  v9 = (FILE **)MEMORY[0x1E0C80C10];
  pg_vfprintf((FILE *)*MEMORY[0x1E0C80C10], a1, &a9);
  return fflush(*v9);
}

uint64_t errmsg_internal(char *a1, ...)
{
  uint64_t v2;
  int v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  unint64_t appended;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  const char *v21[3];
  va_list va;

  va_start(va, a1);
  v2 = errordata();
  v3 = *(_DWORD *)errordata_stack_depth();
  v4 = (_DWORD *)recursion_depth();
  ++*v4;
  if (v3 < 0)
    errmsg_internal_cold_1(v5);
  v6 = v4;
  v7 = v2 + 192 * v3;
  v8 = (uint64_t *)CurrentMemoryContext();
  v9 = *v8;
  *v8 = v10;
  *(_QWORD *)(v7 + 112) = a1;
  memset(v21, 0, sizeof(v21));
  initStringInfo((uint64_t)v21);
  v12 = *(_DWORD *)(v7 + 176);
  v11 = (int *)(v7 + 176);
  *__error() = v12;
  appended = appendStringInfoVA((uint64_t)v21, a1, (size_t *)va);
  if ((_DWORD)appended)
  {
    v14 = appended;
    do
    {
      enlargeStringInfo((uint64_t)v21, v14);
      v15 = *v11;
      *__error() = v15;
      v14 = appendStringInfoVA((uint64_t)v21, a1, (size_t *)va);
    }
    while ((_DWORD)v14);
  }
  v16 = v2 + 192 * v3;
  v19 = *(_QWORD *)(v16 + 64);
  v18 = (void **)(v16 + 64);
  v17 = v19;
  if (v19)
    pfree(v17);
  *v18 = pstrdup(v21[0]);
  pfree((uint64_t)v21[0]);
  *v8 = v9;
  --*v6;
  return 0;
}

_DWORD *errfinish(char *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  const char **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t **i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *result;
  const char *v33;
  const char *v34;
  const char *v35;
  int v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = errordata();
  v7 = (int *)errordata_stack_depth();
  v8 = *v7;
  v9 = (_DWORD *)recursion_depth();
  ++*v9;
  if (v8 < 0)
    errfinish_cold_1(v7);
  v10 = v9;
  if (a1)
  {
    v11 = strrchr(a1, 47);
    if (v11)
      v12 = v11 + 1;
    else
      v12 = a1;
  }
  else
  {
    v12 = 0;
  }
  v13 = v6 + 192 * v8;
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 32) = a3;
  *(_DWORD *)(v13 + 24) = a2;
  v14 = *(_DWORD *)v13;
  ErrorContext();
  v16 = (uint64_t *)CurrentMemoryContext();
  v45 = *v16;
  *v16 = v17;
  v19 = *(_QWORD *)(v13 + 104);
  v18 = (uint64_t *)(v13 + 104);
  if (!v19)
  {
    v33 = *v15;
    if (*v15)
    {
      if (*(_QWORD *)backtrace_functions())
      {
        v34 = *(const char **)backtrace_symbol_list();
        if (v34)
        {
          if (*v33 && *v34)
          {
            while (strcmp(v33, v34))
            {
              v35 = &v34[strlen(v34)];
              v36 = *((unsigned __int8 *)v35 + 1);
              v34 = v35 + 1;
              if (!v36)
                goto LABEL_8;
            }
            set_backtrace(v6 + 192 * v8);
          }
        }
      }
    }
  }
LABEL_8:
  for (i = *(uint64_t ***)error_context_stack(); i; i = (uint64_t **)*i)
    ((void (*)(uint64_t *))i[1])(i[2]);
  if (v14 == 20)
  {
    *(_DWORD *)InterruptHoldoffCount() = 0;
    *(_DWORD *)QueryCancelHoldoffCount() = 0;
    *(_DWORD *)CritSectionCount() = 0;
    --*v10;
    pg_re_throw();
  }
  if (v14 >= 21 && *(_DWORD *)whereToSendOutput() == 2)
    (*(void (**)(uint64_t))(PqCommMethods + 56))(1);
  EmitErrorReport();
  v21 = *(_QWORD *)(v6 + 192 * v8 + 64);
  if (v21)
    pfree(v21);
  v22 = *(_QWORD *)(v6 + 192 * v8 + 72);
  if (v22)
    pfree(v22);
  v23 = *(_QWORD *)(v6 + 192 * v8 + 80);
  if (v23)
    pfree(v23);
  v24 = *(_QWORD *)(v6 + 192 * v8 + 88);
  if (v24)
    pfree(v24);
  v25 = *(_QWORD *)(v6 + 192 * v8 + 96);
  if (v25)
    pfree(v25);
  if (*v18)
    pfree(*v18);
  v26 = *(_QWORD *)(v6 + 192 * v8 + 120);
  if (v26)
    pfree(v26);
  v27 = *(_QWORD *)(v6 + 192 * v8 + 128);
  if (v27)
    pfree(v27);
  v28 = *(_QWORD *)(v6 + 192 * v8 + 136);
  if (v28)
    pfree(v28);
  v29 = *(_QWORD *)(v6 + 192 * v8 + 144);
  if (v29)
    pfree(v29);
  v30 = *(_QWORD *)(v6 + 192 * v8 + 152);
  if (v30)
    pfree(v30);
  v31 = *(_QWORD *)(v6 + 192 * v8 + 168);
  if (v31)
    pfree(v31);
  --*v7;
  *v16 = v45;
  --*v10;
  if (v14 == 21)
  {
    if (!*(_QWORD *)PG_exception_stack())
    {
      v37 = (_DWORD *)whereToSendOutput();
      if (*v37 == 2)
        *v37 = 0;
    }
    fflush((FILE *)*MEMORY[0x1E0C80C20]);
    fflush((FILE *)*MEMORY[0x1E0C80C10]);
    proc_exit(1, v38, v39, v40, v41, v42, v43, v44);
  }
  if (v14 >= 22)
    errfinish_cold_2();
  result = (_DWORD *)InterruptPending();
  if (*result)
    return (_DWORD *)ProcessInterrupts();
  return result;
}

void *set_backtrace(uint64_t a1)
{
  void *result;
  _QWORD v3[3];

  memset(v3, 0, sizeof(v3));
  initStringInfo((uint64_t)v3);
  result = appendStringInfoString((uint64_t)v3, "backtrace generation is not supported by this installation");
  *(_QWORD *)(a1 + 104) = v3[0];
  return result;
}

void pg_re_throw()
{
  int *v0;
  int *v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v0 = *(int **)PG_exception_stack();
  if (!v0)
  {
    errordata();
    v1 = (int *)errordata_stack_depth();
    *(_DWORD *)(v2 + 192 * *v1) = 21;
    v3 = *(_DWORD *)log_min_messages() < 22;
    *(_BYTE *)(v4 + 4) = v3;
    if (*(_DWORD *)whereToSendOutput() == 2)
      *(_BYTE *)(v5 + 192 * v6 + 5) = 1;
    *(_QWORD *)error_context_stack() = 0;
    errfinish(*(_QWORD *)(v7 + 192 * v8 + 16), *(unsigned int *)(v7 + 192 * v8 + 24), *(_QWORD *)(v7 + 192 * v8 + 32));
    ExceptionalCondition((uint64_t)"pg_re_throw tried to return", (size_t)"FailedAssertion", (uint64_t)"src/postgres/src_backend_utils_error_elog.c", 1394, v9, v10, v11, v12);
  }
  siglongjmp(v0, 1);
}

_QWORD *EmitErrorReport()
{
  _DWORD *v0;
  _DWORD *v1;
  int v2;
  _DWORD *v3;
  _QWORD *result;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  errordata();
  errordata_stack_depth();
  v0 = (_DWORD *)recursion_depth();
  ++*v0;
  if (v2 < 0)
    EmitErrorReport_cold_1(v1);
  v3 = v0;
  result = (_QWORD *)CurrentMemoryContext();
  v5 = result;
  v6 = (uint64_t (*)(_QWORD))*result;
  *result = v7;
  if (*(_BYTE *)(v8 + 4))
  {
    result = (_QWORD *)emit_log_hook();
    if (*result)
      result = (_QWORD *)((uint64_t (*)(uint64_t))*result)(v9 + 192 * v10);
  }
  *v5 = v6;
  --*v3;
  return result;
}

uint64_t errcode()
{
  _DWORD *v0;
  uint64_t v1;
  unsigned int v2;
  int v3;

  v0 = (_DWORD *)errordata_stack_depth();
  if ((*v0 & 0x80000000) != 0)
    errcode_cold_1(v0);
  v1 = errordata();
  *(_DWORD *)(v1 + 192 * v2 + 56) = v3;
  return 0;
}

uint64_t errmsg(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  uint64_t v10;
  int v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  unint64_t appended;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  const char *v29[3];

  v10 = errordata();
  v11 = *(_DWORD *)errordata_stack_depth();
  v12 = (_DWORD *)recursion_depth();
  ++*v12;
  if (v11 < 0)
    errmsg_cold_1(v13);
  v14 = v12;
  v15 = v10 + 192 * v11;
  v16 = (uint64_t *)CurrentMemoryContext();
  v17 = *v16;
  *v16 = v18;
  *(_QWORD *)(v15 + 112) = a1;
  memset(v29, 0, sizeof(v29));
  initStringInfo(v29);
  v20 = *(_DWORD *)(v15 + 176);
  v19 = (int *)(v15 + 176);
  *__error() = v20;
  appended = appendStringInfoVA((uint64_t)v29, a1, &a9);
  if ((_DWORD)appended)
  {
    v22 = appended;
    do
    {
      enlargeStringInfo((uint64_t)v29, v22);
      v23 = *v19;
      *__error() = v23;
      v22 = appendStringInfoVA((uint64_t)v29, a1, &a9);
    }
    while ((_DWORD)v22);
  }
  v24 = v10 + 192 * v11;
  v27 = *(_QWORD *)(v24 + 64);
  v26 = (void **)(v24 + 64);
  v25 = v27;
  if (v27)
    pfree(v25);
  *v26 = pstrdup(v29[0]);
  pfree((uint64_t)v29[0]);
  *v16 = v17;
  --*v14;
  return 0;
}

uint64_t errdetail(char *a1, ...)
{
  uint64_t v2;
  int v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  unint64_t appended;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21[3];
  va_list va;

  va_start(va, a1);
  v2 = errordata();
  v3 = *(_DWORD *)errordata_stack_depth();
  v4 = (_DWORD *)recursion_depth();
  ++*v4;
  if (v3 < 0)
    errdetail_cold_1(v5);
  v6 = v4;
  v7 = v2 + 192 * v3;
  v8 = (uint64_t *)CurrentMemoryContext();
  v9 = *v8;
  *v8 = v10;
  memset(v21, 0, sizeof(v21));
  initStringInfo(v21);
  v12 = *(_DWORD *)(v7 + 176);
  v11 = (int *)(v7 + 176);
  *__error() = v12;
  appended = appendStringInfoVA((uint64_t)v21, a1, (size_t *)va);
  if ((_DWORD)appended)
  {
    v14 = appended;
    do
    {
      enlargeStringInfo((uint64_t)v21, v14);
      v15 = *v11;
      *__error() = v15;
      v14 = appendStringInfoVA((uint64_t)v21, a1, (size_t *)va);
    }
    while ((_DWORD)v14);
  }
  v16 = v2 + 192 * v3;
  v19 = *(_QWORD *)(v16 + 72);
  v18 = (_QWORD *)(v16 + 72);
  v17 = v19;
  if (v19)
    pfree(v17);
  *v18 = pstrdup(v21[0], v14);
  pfree(v21[0]);
  *v8 = v9;
  --*v6;
  return 0;
}

uint64_t errhint(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  uint64_t v10;
  int v11;
  _DWORD *v12;
  _DWORD *v13;
  double v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  unint64_t appended;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  const char *v30[3];

  v10 = errordata();
  v11 = *(_DWORD *)errordata_stack_depth();
  v12 = (_DWORD *)recursion_depth();
  ++*v12;
  if (v11 < 0)
    errhint_cold_1(v13);
  v15 = v12;
  v16 = v10 + 192 * v11;
  v17 = (uint64_t *)CurrentMemoryContext(v14);
  v18 = *v17;
  *v17 = v19;
  memset(v30, 0, sizeof(v30));
  initStringInfo((uint64_t)v30);
  v21 = *(_DWORD *)(v16 + 176);
  v20 = (int *)(v16 + 176);
  *__error() = v21;
  appended = appendStringInfoVA((uint64_t)v30, a1, &a9);
  if ((_DWORD)appended)
  {
    v23 = appended;
    do
    {
      enlargeStringInfo((uint64_t)v30, v23);
      v24 = *v20;
      *__error() = v24;
      v23 = appendStringInfoVA((uint64_t)v30, a1, &a9);
    }
    while ((_DWORD)v23);
  }
  v25 = v10 + 192 * v11;
  v28 = *(_QWORD *)(v25 + 88);
  v27 = (void **)(v25 + 88);
  v26 = v28;
  if (v28)
    pfree(v26);
  *v27 = pstrdup(v30[0]);
  pfree((uint64_t)v30[0]);
  *v17 = v18;
  --*v15;
  return 0;
}

uint64_t errcontext_msg(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  uint64_t v10;
  int v11;
  _DWORD *v12;
  _DWORD *v13;
  double v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  int *v24;
  int v25;
  unint64_t appended;
  unint64_t v27;
  int v28;
  const char *v30[3];

  v10 = errordata();
  v11 = *(_DWORD *)errordata_stack_depth();
  v12 = (_DWORD *)recursion_depth();
  ++*v12;
  if (v11 < 0)
    errcontext_msg_cold_1(v13);
  v15 = v12;
  v16 = v10 + 192 * v11;
  v17 = (uint64_t *)CurrentMemoryContext(v14);
  v18 = *v17;
  *v17 = v19;
  memset(v30, 0, sizeof(v30));
  initStringInfo((uint64_t)v30);
  v22 = *(char **)(v16 + 96);
  v21 = (uint64_t *)(v16 + 96);
  v20 = v22;
  if (v22)
  {
    appendStringInfoString((uint64_t)v30, v20);
    appendStringInfoChar((uint64_t)v30, 10);
  }
  v23 = v10 + 192 * v11;
  v25 = *(_DWORD *)(v23 + 176);
  v24 = (int *)(v23 + 176);
  *__error() = v25;
  appended = appendStringInfoVA((uint64_t)v30, a1, &a9);
  if ((_DWORD)appended)
  {
    v27 = appended;
    do
    {
      enlargeStringInfo((uint64_t)v30, v27);
      v28 = *v24;
      *__error() = v28;
      v27 = appendStringInfoVA((uint64_t)v30, a1, &a9);
    }
    while ((_DWORD)v27);
  }
  if (*v21)
    pfree(*v21);
  *v21 = (uint64_t)pstrdup(v30[0]);
  pfree((uint64_t)v30[0]);
  *v17 = v18;
  --*v15;
  return 0;
}

uint64_t set_errcontext_domain()
{
  _DWORD *v0;
  uint64_t v1;
  const char *v2;
  unsigned int v3;

  v0 = (_DWORD *)errordata_stack_depth();
  if ((*v0 & 0x80000000) != 0)
    set_errcontext_domain_cold_1(v0);
  v1 = errordata();
  if (!v2)
    v2 = "postgres-13";
  *(_QWORD *)(v1 + 192 * v3 + 48) = v2;
  return 0;
}

uint64_t errposition()
{
  _DWORD *v0;
  uint64_t v1;
  unsigned int v2;
  int v3;

  v0 = (_DWORD *)errordata_stack_depth();
  if ((*v0 & 0x80000000) != 0)
    errposition_cold_1(v0);
  v1 = errordata();
  *(_DWORD *)(v1 + 192 * v2 + 160) = v3;
  return 0;
}

uint64_t internalerrposition()
{
  _DWORD *v0;
  uint64_t v1;
  unsigned int v2;
  int v3;

  v0 = (_DWORD *)errordata_stack_depth();
  if ((*v0 & 0x80000000) != 0)
    internalerrposition_cold_1(v0);
  v1 = errordata();
  *(_DWORD *)(v1 + 192 * v2 + 164) = v3;
  return 0;
}

uint64_t internalerrquery(char *a1)
{
  uint64_t v2;
  int *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;

  v2 = errordata();
  v3 = (int *)errordata_stack_depth();
  v4 = *v3;
  if (*v3 < 0)
    internalerrquery_cold_1(v3);
  v5 = v2 + 192 * v4;
  v8 = *(_QWORD *)(v5 + 168);
  v7 = (void **)(v5 + 168);
  v6 = v8;
  if (v8)
  {
    pfree(v6);
    *v7 = 0;
  }
  if (a1)
    *v7 = MemoryContextStrdup(*(_QWORD *)(v2 + 192 * v4 + 184), a1);
  return 0;
}

uint64_t geterrcode()
{
  _DWORD *v0;
  uint64_t v1;
  unsigned int v2;

  v0 = (_DWORD *)errordata_stack_depth();
  if ((*v0 & 0x80000000) != 0)
    geterrcode_cold_1(v0);
  v1 = errordata();
  return *(unsigned int *)(v1 + 192 * v2 + 56);
}

uint64_t geterrposition()
{
  _DWORD *v0;
  uint64_t v1;
  unsigned int v2;

  v0 = (_DWORD *)errordata_stack_depth();
  if ((*v0 & 0x80000000) != 0)
    geterrposition_cold_1(v0);
  v1 = errordata();
  return *(unsigned int *)(v1 + 192 * v2 + 160);
}

uint64_t getinternalerrposition()
{
  _DWORD *v0;
  uint64_t v1;
  unsigned int v2;

  v0 = (_DWORD *)errordata_stack_depth();
  if ((*v0 & 0x80000000) != 0)
    getinternalerrposition_cold_1(v0);
  v1 = errordata();
  return *(unsigned int *)(v1 + 192 * v2 + 164);
}

uint64_t CopyErrorData()
{
  _DWORD *v0;
  uint64_t v1;
  unsigned int v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;

  v0 = (_DWORD *)errordata_stack_depth();
  if ((*v0 & 0x80000000) != 0)
    CopyErrorData_cold_1(v0);
  v1 = errordata();
  v3 = (__int128 *)(v1 + 192 * v2);
  v4 = palloc(0xC0uLL);
  v5 = v3[3];
  v7 = *v3;
  v6 = v3[1];
  *(_OWORD *)(v4 + 32) = v3[2];
  *(_OWORD *)(v4 + 48) = v5;
  *(_OWORD *)v4 = v7;
  *(_OWORD *)(v4 + 16) = v6;
  v8 = v3[7];
  v10 = v3[4];
  v9 = v3[5];
  *(_OWORD *)(v4 + 96) = v3[6];
  *(_OWORD *)(v4 + 112) = v8;
  *(_OWORD *)(v4 + 64) = v10;
  *(_OWORD *)(v4 + 80) = v9;
  v11 = v3[11];
  v13 = v3[8];
  v12 = v3[9];
  *(_OWORD *)(v4 + 160) = v3[10];
  *(_OWORD *)(v4 + 176) = v11;
  *(_OWORD *)(v4 + 128) = v13;
  *(_OWORD *)(v4 + 144) = v12;
  v14 = *(const char **)(v4 + 64);
  if (v14)
    *(_QWORD *)(v4 + 64) = pstrdup(v14);
  v15 = *(const char **)(v4 + 72);
  if (v15)
    *(_QWORD *)(v4 + 72) = pstrdup(v15);
  v16 = *(const char **)(v4 + 80);
  if (v16)
    *(_QWORD *)(v4 + 80) = pstrdup(v16);
  v17 = *(const char **)(v4 + 88);
  if (v17)
    *(_QWORD *)(v4 + 88) = pstrdup(v17);
  v18 = *(const char **)(v4 + 96);
  if (v18)
    *(_QWORD *)(v4 + 96) = pstrdup(v18);
  v19 = *(const char **)(v4 + 104);
  if (v19)
    *(_QWORD *)(v4 + 104) = pstrdup(v19);
  v20 = *(const char **)(v4 + 120);
  if (v20)
    *(_QWORD *)(v4 + 120) = pstrdup(v20);
  v21 = *(const char **)(v4 + 128);
  if (v21)
    *(_QWORD *)(v4 + 128) = pstrdup(v21);
  v22 = *(const char **)(v4 + 136);
  if (v22)
    *(_QWORD *)(v4 + 136) = pstrdup(v22);
  v23 = *(const char **)(v4 + 144);
  if (v23)
    *(_QWORD *)(v4 + 144) = pstrdup(v23);
  v24 = *(const char **)(v4 + 152);
  if (v24)
    *(_QWORD *)(v4 + 152) = pstrdup(v24);
  v25 = *(const char **)(v4 + 168);
  if (v25)
    *(_QWORD *)(v4 + 168) = pstrdup(v25);
  *(_QWORD *)(v4 + 184) = *(_QWORD *)CurrentMemoryContext();
  return v4;
}

uint64_t FlushErrorState()
{
  uint64_t *v0;

  *(_DWORD *)errordata_stack_depth() = -1;
  *(_DWORD *)recursion_depth() = 0;
  v0 = (uint64_t *)ErrorContext();
  return MemoryContextReset(*v0);
}

void errstart_cold_1(_DWORD *a1)
{
  *a1 = -1;
  errstart(22, 0);
  errmsg_internal("ERRORDATA_STACK_SIZE exceeded");
  errfinish("src/postgres/src_backend_utils_error_elog.c", 403, (uint64_t)"errstart");
  __break(1u);
}

void errmsg_internal_cold_1(_DWORD *a1)
{
  OUTLINED_FUNCTION_0_25(a1);
  errmsg_internal("errstart was not called");
  errfinish("src/postgres/src_backend_utils_error_elog.c", 864, (uint64_t)"errmsg_internal");
  __break(1u);
}

void errfinish_cold_1(_DWORD *a1)
{
  OUTLINED_FUNCTION_0_25(a1);
  errmsg_internal("errstart was not called");
  errfinish("src/postgres/src_backend_utils_error_elog.c", 478, "errfinish");
  __break(1u);
}

void errfinish_cold_2()
{
  fflush((FILE *)*MEMORY[0x1E0C80C20]);
  fflush((FILE *)*MEMORY[0x1E0C80C10]);
  abort();
}

void EmitErrorReport_cold_1(_DWORD *a1)
{
  OUTLINED_FUNCTION_0_25(a1);
  errmsg_internal("errstart was not called");
  errfinish("src/postgres/src_backend_utils_error_elog.c", 1197, "EmitErrorReport");
  __break(1u);
}

void errcode_cold_1(_DWORD *a1)
{
  OUTLINED_FUNCTION_0_25(a1);
  errmsg_internal("errstart was not called");
  errfinish("src/postgres/src_backend_utils_error_elog.c", 659, "errcode");
  __break(1u);
}

void errmsg_cold_1(_DWORD *a1)
{
  OUTLINED_FUNCTION_0_25(a1);
  errmsg_internal("errstart was not called");
  errfinish("src/postgres/src_backend_utils_error_elog.c", 793, "errmsg");
  __break(1u);
}

void errdetail_cold_1(_DWORD *a1)
{
  OUTLINED_FUNCTION_0_25(a1);
  errmsg_internal("errstart was not called");
  errfinish("src/postgres/src_backend_utils_error_elog.c", 893, "errdetail");
  __break(1u);
}

void errhint_cold_1(_DWORD *a1)
{
  OUTLINED_FUNCTION_0_25(a1);
  errmsg_internal("errstart was not called");
  errfinish("src/postgres/src_backend_utils_error_elog.c", 945, (uint64_t)"errhint");
  __break(1u);
}

void errcontext_msg_cold_1(_DWORD *a1)
{
  OUTLINED_FUNCTION_0_25(a1);
  errmsg_internal("errstart was not called");
  errfinish("src/postgres/src_backend_utils_error_elog.c", 970, (uint64_t)"errcontext_msg");
  __break(1u);
}

void set_errcontext_domain_cold_1(_DWORD *a1)
{
  OUTLINED_FUNCTION_0_25(a1);
  errmsg_internal("errstart was not called");
  errfinish("src/postgres/src_backend_utils_error_elog.c", 995, (uint64_t)"set_errcontext_domain");
  __break(1u);
}

void errposition_cold_1(_DWORD *a1)
{
  OUTLINED_FUNCTION_0_25(a1);
  errmsg_internal("errstart was not called");
  errfinish("src/postgres/src_backend_utils_error_elog.c", 1038, (uint64_t)"errposition");
  __break(1u);
}

void internalerrposition_cold_1(_DWORD *a1)
{
  OUTLINED_FUNCTION_0_25(a1);
  errmsg_internal("errstart was not called");
  errfinish("src/postgres/src_backend_utils_error_elog.c", 1054, (uint64_t)"internalerrposition");
  __break(1u);
}

void internalerrquery_cold_1(_DWORD *a1)
{
  OUTLINED_FUNCTION_0_25(a1);
  errmsg_internal("errstart was not called");
  errfinish("src/postgres/src_backend_utils_error_elog.c", 1074, (uint64_t)"internalerrquery");
  __break(1u);
}

void geterrcode_cold_1(_DWORD *a1)
{
  OUTLINED_FUNCTION_0_25(a1);
  errmsg_internal("errstart was not called");
  errfinish("src/postgres/src_backend_utils_error_elog.c", 1117, (uint64_t)"geterrcode");
  __break(1u);
}

void geterrposition_cold_1(_DWORD *a1)
{
  OUTLINED_FUNCTION_0_25(a1);
  errmsg_internal("errstart was not called");
  errfinish("src/postgres/src_backend_utils_error_elog.c", 1134, (uint64_t)"geterrposition");
  __break(1u);
}

void getinternalerrposition_cold_1(_DWORD *a1)
{
  OUTLINED_FUNCTION_0_25(a1);
  errmsg_internal("errstart was not called");
  errfinish("src/postgres/src_backend_utils_error_elog.c", 1151, (uint64_t)"getinternalerrposition");
  __break(1u);
}

void CopyErrorData_cold_1(_DWORD *a1)
{
  OUTLINED_FUNCTION_0_25(a1);
  errmsg_internal("errstart was not called");
  errfinish("src/postgres/src_backend_utils_error_elog.c", 1251, (uint64_t)"CopyErrorData");
  __break(1u);
}

uint64_t FunctionCall5Coll(uint64_t (**a1)(_QWORD *), int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  _QWORD v9[3];
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v11 = 327680;
  v13 = 0;
  v15 = 0;
  v17 = 0;
  v19 = 0;
  v9[1] = 0;
  v9[2] = 0;
  v9[0] = a1;
  v10 = a2;
  v12 = a3;
  v14 = a4;
  v16 = a5;
  v18 = a6;
  v20 = a7;
  v21 = 0;
  result = (*a1)(v9);
  if ((_BYTE)v11)
    FunctionCall5Coll_cold_1((uint64_t)a1);
  return result;
}

void FunctionCall5Coll_cold_1(uint64_t a1)
{
  errstart(20, 0);
  errmsg_internal("function %u returned NULL", *(_DWORD *)(a1 + 8));
  errfinish("src/postgres/src_backend_utils_fmgr_fmgr.c", 318, (uint64_t)"FunctionCall5Coll");
  __break(1u);
}

void *__cdecl hash_search(hash_table *table, char *key, void *datum, void (__cdecl *replace_func)(void *))
{
  int v5;
  int v8;

  v5 = (int)datum;
  v8 = (*(uint64_t (**)(char *, hash_node **))&table[1].size)(key, table[4].buckets);
  return hash_search_with_hash_value((uint64_t)table, (uint64_t)key, v8, v5, replace_func);
}

uint64_t *hash_search_with_hash_value(uint64_t a1, uint64_t a2, int a3, int a4, _BYTE *a5)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  int v18;
  int v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t *v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t *v58;
  BOOL v59;
  _QWORD *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unsigned int v74;
  void (*v75)(uint64_t, uint64_t, uint64_t);
  const void *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  size_t v81;
  unint64_t v82;
  void *v83;
  unint64_t v84;
  size_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  unsigned int v104;

  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 816);
  v10 = a3 & 0x1F;
  if (!v9)
    v10 = 0;
  v104 = v10;
  if ((a4 | 2) != 3)
    goto LABEL_31;
  if (v9)
    goto LABEL_31;
  if (*(_BYTE *)(a1 + 66))
    goto LABEL_31;
  v11 = (*(_DWORD *)(v8 + 784) + 1);
  if (*(_QWORD *)(v8 + 8) / v11 < *(_QWORD *)(v8 + 824))
    goto LABEL_31;
  seq_scan_tables();
  v13 = *(unsigned int *)num_seq_scans();
  if ((int)v13 >= 1)
  {
    if (*v12 == a1)
      goto LABEL_31;
    v14 = 1;
    do
    {
      v15 = v14;
      if (v13 == v14)
        break;
      v16 = v12[v14++];
    }
    while (v16 != a1);
    if (v15 < v13)
      goto LABEL_31;
  }
  v17 = (unint64_t)v11 >> *(_DWORD *)(a1 + 88);
  v18 = *(_DWORD *)(a1 + 80);
  if (v17 < *(_QWORD *)(v8 + 776))
  {
    v19 = v11;
LABEL_26:
    *(_DWORD *)(v8 + 784) = v19;
    v26 = *(_DWORD *)(v8 + 792) & v11;
    v27 = *(_DWORD *)(v8 + 788);
    if (v11 > v27)
    {
      *(_DWORD *)(v8 + 792) = v27;
      *(_DWORD *)(v8 + 788) = v27 | v11;
    }
    v28 = *(_QWORD *)(a1 + 8);
    v29 = (_QWORD *)(*(_QWORD *)(v28 + 8 * (v26 >> *(_DWORD *)(a1 + 88)))
                   + 8 * ((*(_DWORD *)(a1 + 80) - 1) & v26));
    v30 = (_QWORD *)(*(_QWORD *)(v28 + 8 * v17) + 8 * ((v18 - 1) & v11));
    v31 = (uint64_t *)*v29;
    if (*v29)
    {
      do
      {
        v61 = *(_DWORD *)(v8 + 788) & v31[1];
        if (v61 > *(_DWORD *)(v8 + 784))
          v61 &= *(_DWORD *)(v8 + 792);
        v58 = (uint64_t *)*v31;
        v59 = v61 == (_DWORD)v26;
        if (v61 == (_DWORD)v26)
          v60 = v29;
        else
          v60 = v30;
        if (v59)
          v29 = v31;
        else
          v30 = v31;
        *v60 = v31;
        v31 = v58;
      }
      while (v58);
    }
    *v29 = 0;
    goto LABEL_30;
  }
  v20 = *(_QWORD *)(v8 + 768);
  if (v17 < v20)
  {
    v21 = (_QWORD *)CurrentDynaHashCxt();
    goto LABEL_17;
  }
  if (*(_QWORD *)(v8 + 832) != -1)
    goto LABEL_31;
  v77 = *(const void **)(a1 + 8);
  v21 = (_QWORD *)CurrentDynaHashCxt();
  *v21 = v78;
  v97 = v79;
  v80 = (void *)(*(uint64_t (**)(uint64_t))(a1 + 40))(v79);
  if (!v80)
    goto LABEL_31;
  v101 = 2 * v20;
  v103 = (unint64_t)v80;
  v81 = 8 * v20;
  memcpy(v80, v77, v81);
  v82 = v103;
  v83 = (void *)(v103 + v81);
  if (v81 > 0x400 || (v83 & 7) != 0)
  {
    v85 = v81;
LABEL_121:
    bzero(v83, v85);
    v82 = v103;
    goto LABEL_122;
  }
  if (v103 < (unint64_t)v83)
  {
    v84 = v81 + v103 + 8;
    if (v84 <= v97 + v103)
      v84 = v97 + v103;
    v85 = ((~v103 - v81 + v84) & 0xFFFFFFFFFFFFFFF8) + 8;
    goto LABEL_121;
  }
LABEL_122:
  *(_QWORD *)(a1 + 8) = v82;
  *(_QWORD *)(*(_QWORD *)a1 + 768) = v101;
  pfree((uint64_t)v77);
LABEL_17:
  *v21 = *(_QWORD *)(a1 + 48);
  v22 = (*(uint64_t (**)(uint64_t))(a1 + 40))(8 * *(_QWORD *)(a1 + 80));
  if (v22)
  {
    v23 = v22;
    v24 = 8 * *(_QWORD *)(a1 + 80);
    if ((v22 & 7) == 0 && v24 <= 0x400)
    {
      if (v22 >= v22 + v24)
      {
LABEL_25:
        *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v17) = v23;
        ++*(_QWORD *)(v8 + 776);
        v19 = *(_DWORD *)(v8 + 784) + 1;
        goto LABEL_26;
      }
      v25 = v24 + v22;
      if (v24 + v22 <= v22 + 8)
        v25 = v22 + 8;
      v24 = ((v25 + ~v22) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    bzero((void *)v22, v24);
    goto LABEL_25;
  }
  v30 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v17);
LABEL_30:
  *v30 = 0;
LABEL_31:
  v32 = *(_DWORD *)(v8 + 788) & a3;
  if (v32 > *(_DWORD *)(v8 + 784))
    v32 &= *(_DWORD *)(v8 + 792);
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v32 >> *(_DWORD *)(a1 + 88)));
  if (!v33)
  {
    if (!*(_BYTE *)(a1 + 64))
      hash_search_with_hash_value_cold_1((const char **)(a1 + 56));
    hash_search_with_hash_value_cold_2((const char **)(a1 + 56));
  }
  v34 = (uint64_t *)(v33 + 8 * ((*(_DWORD *)(a1 + 80) - 1) & v32));
  v35 = *(_QWORD *)(a1 + 72);
  v36 = *v34;
  v37 = v104;
  if (*v34)
  {
    v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(a1 + 24);
    while (1)
    {
      v39 = (uint64_t *)v36;
      if (*(_DWORD *)(v36 + 8) == a3 && !v38(v36 + 16, a2, v35))
        break;
      v36 = *v39;
      v34 = v39;
      if (!*v39)
      {
        v34 = v39;
        goto LABEL_42;
      }
    }
    LODWORD(v36) = 1;
    if (a5)
      goto LABEL_43;
  }
  else
  {
LABEL_42:
    v39 = 0;
    if (a5)
LABEL_43:
      *a5 = v36;
  }
  switch(a4)
  {
    case 0:
      if ((_DWORD)v36)
        return v39 + 2;
      else
        return 0;
    case 1:
    case 3:
      if ((_DWORD)v36)
        return v39 + 2;
      v95 = v35;
      v96 = a2;
      if (*(_BYTE *)(a1 + 66))
        hash_search_with_hash_value_cold_6(a1);
      v40 = *(_QWORD *)a1;
      v41 = (unsigned int *)(*(_QWORD *)a1 + 24 * v104);
      v102 = (uint64_t *)(v41 + 4);
      v100 = (_QWORD *)CurrentDynaHashCxt();
      break;
    case 2:
      if (!(_DWORD)v36)
        return 0;
      if (*(_QWORD *)(v8 + 816))
      {
        v63 = (unsigned int *)(v8 + 24 * v104);
        do
          v64 = __ldaxr(v63);
        while (__stlxr(1u, v63));
        if (v64)
          s_lock(v63, (uint64_t)"src/postgres/src_backend_utils_hash_dynahash.c", 0x227u, (uint64_t)"hash_search_with_hash_value");
      }
      v65 = v8 + 24 * v104;
      --*(_QWORD *)(v65 + 8);
      *v34 = *v39;
      *v39 = *(_QWORD *)(v65 + 16);
      *(_QWORD *)(v65 + 16) = v39;
      if (*(_QWORD *)(v8 + 816))
        atomic_store(0, (unsigned int *)(v8 + 24 * v104));
      return v39 + 2;
    default:
      hash_search_with_hash_value_cold_3(a4);
  }
  while (1)
  {
    if (*(_QWORD *)(v40 + 816))
    {
      do
        v42 = __ldaxr(v41);
      while (__stlxr(1u, v41));
      if (v42)
        s_lock(v41, (uint64_t)"src/postgres/src_backend_utils_hash_dynahash.c", 0x29Eu, (uint64_t)"get_hash_entry");
    }
    v43 = *v102;
    if (*v102)
    {
      *v102 = *(_QWORD *)v43;
      ++*(_QWORD *)(v40 + 24 * v37 + 8);
      v66 = a3;
      if (*(_QWORD *)(v40 + 816))
        goto LABEL_108;
      goto LABEL_109;
    }
    v44 = *(_QWORD *)(v40 + 816);
    if (v44)
      atomic_store(0, v41);
    if (*(_BYTE *)(a1 + 65))
      goto LABEL_93;
    v45 = *(_DWORD *)(v40 + 852);
    v46 = *(_QWORD *)a1;
    v47 = (*(_QWORD *)(*(_QWORD *)a1 + 808) + 7) & 0xFFFFFFFFFFFFFFF8;
    v48 = v47 + 16;
    *v100 = *(_QWORD *)(a1 + 48);
    v49 = (*(uint64_t (**)(unint64_t))(a1 + 40))((v47 + 16) * v45);
    if (!v49)
      break;
    v50 = (_QWORD *)v49;
    if (v45 < 1)
    {
      v54 = 0;
      v37 = v104;
      if (!*(_QWORD *)(v46 + 816))
        goto LABEL_67;
    }
    else
    {
      v51 = 0;
      v52 = (_QWORD *)v49;
      do
      {
        *v52 = v51;
        v53 = (char *)v52 + v48;
        v51 = v52;
        v52 = (_QWORD *)((char *)v52 + v48);
        --v45;
      }
      while (v45);
      v54 = (uint64_t)&v53[-v47 - 16];
      v37 = v104;
      if (!*(_QWORD *)(v46 + 816))
        goto LABEL_67;
    }
    v55 = (unsigned int *)(v46 + 24 * v37);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(1u, v55));
    if (v56)
      s_lock(v55, (uint64_t)"src/postgres/src_backend_utils_hash_dynahash.c", 0x3DBu, (uint64_t)"element_alloc");
LABEL_67:
    v57 = v46 + 24 * v37;
    *v50 = *(_QWORD *)(v57 + 16);
    *(_QWORD *)(v57 + 16) = v54;
    if (*(_QWORD *)(v46 + 816))
      atomic_store(0, (unsigned int *)(v46 + 24 * v37));
  }
  v44 = *(_QWORD *)(v40 + 816);
  v37 = v104;
LABEL_93:
  if (v44)
  {
    v67 = ((_BYTE)v37 + 1) & 0x1F;
    if (v67 != v37)
    {
      while (1)
      {
        v68 = v67;
        v69 = (unsigned int *)(v40 + 24 * v67);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(1u, v69));
        if (v70)
          s_lock(v69, (uint64_t)"src/postgres/src_backend_utils_hash_dynahash.c", 0x2C4u, (uint64_t)"get_hash_entry");
        v71 = v40 + 24 * v68;
        v73 = *(_QWORD *)(v71 + 16);
        v72 = (_QWORD *)(v71 + 16);
        v43 = v73;
        if (v73)
          break;
        atomic_store(0, v69);
        v67 = ((_BYTE)v68 + 1) & 0x1F;
        if (v67 == v37)
          goto LABEL_101;
      }
      *v72 = *(_QWORD *)v43;
      atomic_store(0, v69);
      do
        v74 = __ldaxr(v41);
      while (__stlxr(1u, v41));
      v66 = a3;
      if (v74)
        s_lock(v41, (uint64_t)"src/postgres/src_backend_utils_hash_dynahash.c", 0x2CDu, (uint64_t)"get_hash_entry");
      ++*(_QWORD *)(v40 + 24 * v37 + 8);
LABEL_108:
      atomic_store(0, v41);
LABEL_109:
      *v34 = v43;
      *(_QWORD *)v43 = 0;
      *(_DWORD *)(v43 + 8) = v66;
      v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
      v62 = v43 + 16;
      v75(v43 + 16, v96, v95);
      return (uint64_t *)v62;
    }
  }
LABEL_101:
  if (a4 != 3)
  {
    v86 = *(unsigned __int8 *)(a1 + 64);
    errstart(20, 0);
    v87 = errcode();
    if (!v86)
      hash_search_with_hash_value_cold_4(v87, v88, v89, v90, v91, v92, v93, v94);
    hash_search_with_hash_value_cold_5(v87, v88, v89, v90, v91, v92, v93, v94);
  }
  return 0;
}

void hash_search_with_hash_value_cold_1(const char **a1)
{
  OUTLINED_FUNCTION_0_26(21);
  errmsg_internal("hash table \"%s\" corrupted", *a1);
  errfinish("src/postgres/src_backend_utils_hash_dynahash.c", 1010, (uint64_t)"hash_corrupted");
  __break(1u);
}

void hash_search_with_hash_value_cold_2(const char **a1)
{
  OUTLINED_FUNCTION_0_26(22);
  errmsg_internal("hash table \"%s\" corrupted", *a1);
  errfinish("src/postgres/src_backend_utils_hash_dynahash.c", 1008, (uint64_t)"hash_corrupted");
  __break(1u);
}

void hash_search_with_hash_value_cold_3(int a1)
{
  OUTLINED_FUNCTION_0_26(20);
  errmsg_internal("unrecognized hash action code: %d", a1);
  errfinish("src/postgres/src_backend_utils_hash_dynahash.c", 626, (uint64_t)"hash_search_with_hash_value");
  __break(1u);
}

void hash_search_with_hash_value_cold_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t vars0;

  errmsg("out of memory", a2, a3, a4, a5, a6, a7, a8, vars0);
  errfinish("src/postgres/src_backend_utils_hash_dynahash.c", 605, (uint64_t)"hash_search_with_hash_value");
  __break(1u);
}

void hash_search_with_hash_value_cold_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t vars0;

  errmsg("out of shared memory", a2, a3, a4, a5, a6, a7, a8, vars0);
  errfinish("src/postgres/src_backend_utils_hash_dynahash.c", 601, (uint64_t)"hash_search_with_hash_value");
  __break(1u);
}

void hash_search_with_hash_value_cold_6(uint64_t a1)
{
  OUTLINED_FUNCTION_0_26(20);
  errmsg_internal("cannot insert into frozen hashtable \"%s\"", *(const char **)(a1 + 56));
  errfinish("src/postgres/src_backend_utils_hash_dynahash.c", 589, (uint64_t)"hash_search_with_hash_value");
  __break(1u);
}

uint64_t pg_get_client_encoding()
{
  return *(unsigned int *)(*(_QWORD *)ClientEncoding() + 8);
}

uint64_t pg_unicode_to_server(uint64_t result, char *a2)
{
  unsigned int v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t (***v7)(_QWORD *);
  int v8;
  char v9[5];

  if ((result - 1) >= 0x10FFFF)
    pg_unicode_to_server_cold_2();
  if (result > 0x7F)
  {
    v4 = *(int *)(*(_QWORD *)DatabaseEncoding() + 8);
    if ((_DWORD)v4 == 6)
    {
      unicode_to_utf8(v3, a2);
      result = pg_utf_mblen(a2);
      a2[(int)result] = 0;
    }
    else
    {
      v5 = (_QWORD *)Utf8ToServerConvProc();
      if (!*v5)
        pg_unicode_to_server_cold_1();
      v7 = (uint64_t (***)(_QWORD *))v5;
      unicode_to_utf8(v6, v9);
      v8 = pg_utf_mblen(v9);
      v9[v8] = 0;
      return FunctionCall5Coll(*v7, 0, 6, v4, (uint64_t)v9, (uint64_t)a2, v8);
    }
  }
  else
  {
    *(_WORD *)a2 = result;
  }
  return result;
}

uint64_t GetDatabaseEncoding()
{
  return *(unsigned int *)(*(_QWORD *)DatabaseEncoding() + 8);
}

uint64_t GetDatabaseEncodingName()
{
  return **(_QWORD **)DatabaseEncoding();
}

uint64_t pg_mblen()
{
  uint64_t v0;
  uint64_t v1;

  v0 = DatabaseEncoding();
  return ((uint64_t (*)(uint64_t))pg_wchar_table[6 * *(unsigned int *)(*(_QWORD *)v0 + 8) + 2])(v1);
}

uint64_t pg_mbstrlen_with_len(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;

  v4 = DatabaseEncoding();
  if (LODWORD(pg_wchar_table[6 * *(int *)(*(_QWORD *)v4 + 8) + 5]) == 1)
    return a2;
  if ((int)a2 >= 1)
  {
    v7 = v4;
    v5 = 0;
    do
    {
      if (!*a1)
        break;
      v8 = ((uint64_t (*)(_BYTE *))pg_wchar_table[6 * *(unsigned int *)(*(_QWORD *)v7 + 8) + 2])(a1);
      LODWORD(a2) = a2 - v8;
      a1 += v8;
      v5 = (v5 + 1);
    }
    while ((int)a2 > 0);
    return v5;
  }
  return 0;
}

uint64_t pg_database_encoding_max_length()
{
  return LODWORD(pg_wchar_table[6 * *(int *)(*(_QWORD *)DatabaseEncoding() + 8) + 5]);
}

uint64_t pg_mbcliplen(_BYTE *a1, int a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  int v10;

  v6 = *(_DWORD *)(*(_QWORD *)DatabaseEncoding() + 8);
  if (pg_encoding_max_length(v6) == 1)
  {
    if (a2 >= (int)a3)
      v7 = a3;
    else
      v7 = a2;
    if ((int)v7 >= 1)
    {
      v8 = 0;
      while (a1[v8])
      {
        if (v7 == ++v8)
          return v7;
      }
      return v8;
    }
    return 0;
  }
  if (a2 < 1)
    return 0;
  v7 = 0;
  v9 = pg_wchar_table[6 * v6 + 2];
  while (1)
  {
    if (!*a1)
      return v7;
    v10 = ((uint64_t (*)(_BYTE *))v9)(a1);
    if (v10 + (int)v7 > (int)a3)
      return v7;
    if (v10 + (_DWORD)v7 == (_DWORD)a3)
      break;
    a2 -= v10;
    a1 += v10;
    v7 = (v10 + v7);
    if (a2 <= 0)
      return v7;
  }
  return a3;
}

uint64_t pg_encoding_mbcliplen(int a1, _BYTE *a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  int v11;

  if (pg_encoding_max_length(a1) == 1)
  {
    if (a3 >= (int)a4)
      v8 = a4;
    else
      v8 = a3;
    if ((int)v8 >= 1)
    {
      v9 = 0;
      while (a2[v9])
      {
        if (v8 == ++v9)
          return v8;
      }
      return v9;
    }
    return 0;
  }
  if (a3 < 1)
    return 0;
  v8 = 0;
  v10 = pg_wchar_table[6 * a1 + 2];
  while (1)
  {
    if (!*a2)
      return v8;
    v11 = ((uint64_t (*)(_BYTE *))v10)(a2);
    if (v11 + (int)v8 > (int)a4)
      return v8;
    if (v11 + (_DWORD)v8 == (_DWORD)a4)
      break;
    a3 -= v11;
    a2 += v11;
    v8 = (v11 + v8);
    if (a3 <= 0)
      return v8;
  }
  return a4;
}

_QWORD *SetDatabaseEncoding(unsigned int a1)
{
  _QWORD *result;
  uint64_t v2;

  if (a1 >= 0x23)
    SetDatabaseEncoding_cold_1(a1);
  result = (_QWORD *)DatabaseEncoding();
  *result = v2;
  return result;
}

BOOL pg_verifymbstr()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;
  char v3;

  v0 = DatabaseEncoding();
  return (int)pg_verify_mbstr_len(*(_DWORD *)(*(_QWORD *)v0 + 8), v1, v2, v3) >= 0;
}

uint64_t pg_verify_mbstr_len(unsigned int a1, unsigned __int8 *a2, uint64_t a3, char a4)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t (*v11)();
  unsigned int v12;

  if ((int)pg_encoding_max_length(a1) > 1)
  {
    if ((int)a3 < 1)
      return 0;
    LODWORD(v9) = 0;
    v11 = pg_wchar_table[6 * (int)a1 + 4];
    while (1)
    {
      if ((char)*a2 < 0)
      {
        v12 = ((uint64_t (*)(unsigned __int8 *, uint64_t))v11)(a2, a3);
        if ((v12 & 0x80000000) != 0)
        {
LABEL_17:
          if ((a4 & 1) == 0)
            report_invalid_encoding(a1, a2, a3);
          return 0xFFFFFFFFLL;
        }
        a2 += v12;
        a3 = a3 - v12;
      }
      else
      {
        if (!*a2)
          goto LABEL_17;
        ++a2;
        a3 = (a3 - 1);
      }
      v9 = (v9 + 1);
      if ((int)a3 <= 0)
        return v9;
    }
  }
  v8 = (unsigned __int8 *)memchr(a2, 0, (int)a3);
  if (v8)
    v9 = 0xFFFFFFFFLL;
  else
    v9 = a3;
  if (v8)
  {
    if ((a4 & 1) == 0)
      report_invalid_encoding(a1, v8, 1);
  }
  return v9;
}

void report_invalid_encoding(unsigned int a1, unsigned __int8 *a2, int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  size_t v86;
  size_t v87;
  size_t v88;
  size_t v89;
  size_t v90;
  size_t v91;
  size_t v92;
  size_t v93;
  _BYTE v94[41];

  v6 = pg_encoding_mblen(a1, (uint64_t)a2);
  if (v6 >= a3)
    v13 = a3;
  else
    v13 = v6;
  if (v13 >= 1)
  {
    v14 = v13 >= 8 ? 8 : v13;
    v15 = v14 - 1;
    v22 = &v94[(int)pg_sprintf(v94, "0x%02x", v7, v8, v9, v10, v11, v12, *a2)];
    if (v14 != 1)
    {
      v23 = &v22[(int)pg_sprintf(v22, " ", v16, v17, v18, v19, v20, v21, v86)];
      v36 = &v23[(int)pg_sprintf(v23, "0x%02x", v24, v25, v26, v27, v28, v29, a2[1])];
      if (v15 >= 2)
        v36 += (int)pg_sprintf(v36, " ", v30, v31, v32, v33, v34, v35, v87);
      if (v14 != 2)
      {
        v43 = &v36[(int)pg_sprintf(v36, "0x%02x", v30, v31, v32, v33, v34, v35, a2[2])];
        if (v15 >= 3)
          v43 += (int)pg_sprintf(v43, " ", v37, v38, v39, v40, v41, v42, v88);
        if (v14 != 3)
        {
          v50 = &v43[(int)pg_sprintf(v43, "0x%02x", v37, v38, v39, v40, v41, v42, a2[3])];
          if (v15 >= 4)
            v50 += (int)pg_sprintf(v50, " ", v44, v45, v46, v47, v48, v49, v89);
          if (v14 != 4)
          {
            v57 = &v50[(int)pg_sprintf(v50, "0x%02x", v44, v45, v46, v47, v48, v49, a2[4])];
            if (v15 >= 5)
              v57 += (int)pg_sprintf(v57, " ", v51, v52, v53, v54, v55, v56, v90);
            if (v14 != 5)
            {
              v64 = &v57[(int)pg_sprintf(v57, "0x%02x", v51, v52, v53, v54, v55, v56, a2[5])];
              if (v15 >= 6)
                v64 += (int)pg_sprintf(v64, " ", v58, v59, v60, v61, v62, v63, v91);
              if (v14 != 6)
              {
                v71 = &v64[(int)pg_sprintf(v64, "0x%02x", v58, v59, v60, v61, v62, v63, a2[6])];
                if (v15 >= 7)
                  v71 += (int)pg_sprintf(v71, " ", v65, v66, v67, v68, v69, v70, v92);
                if (v14 != 7)
                {
                  v72 = pg_sprintf(v71, "0x%02x", v65, v66, v67, v68, v69, v70, a2[7]);
                  if (v15 >= 8)
                    pg_sprintf(&v71[v72], " ", v73, v74, v75, v76, v77, v78, v93);
                }
              }
            }
          }
        }
      }
    }
  }
  errstart(20, 0);
  errcode();
  errmsg("invalid byte sequence for encoding \"%s\": %s", v79, v80, v81, v82, v83, v84, v85, (size_t)(&pg_enc2name_tbl)[2 * (int)a1]);
  errfinish("src/postgres/src_backend_utils_mb_mbutils.c", 756, (uint64_t)"report_invalid_encoding");
  __break(1u);
}

void pg_unicode_to_server_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_0_5();
  errcode();
  errmsg("conversion between %s and %s is not supported", v0, v1, v2, v3, v4, v5, v6, (size_t)"UTF8");
  errfinish("src/postgres/src_backend_utils_mb_mbutils.c", 300, (uint64_t)"pg_unicode_to_server");
  __break(1u);
}

void pg_unicode_to_server_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t vars0;

  OUTLINED_FUNCTION_0_5();
  errcode();
  errmsg("invalid Unicode code point", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("src/postgres/src_backend_utils_mb_mbutils.c", 275, (uint64_t)"pg_unicode_to_server");
  __break(1u);
}

void SetDatabaseEncoding_cold_1(int a1)
{
  OUTLINED_FUNCTION_0_5();
  errmsg_internal("invalid database encoding: %d", a1);
  errfinish("src/postgres/src_backend_utils_mb_mbutils.c", 437, (uint64_t)"SetDatabaseEncoding");
  __break(1u);
}

uint64_t AllocSetContextCreateInternal(uint64_t a1, const char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  if (a3 || a4 != 0x2000)
  {
    v9 = -1;
    if (a3 || a4 != 1024)
      goto LABEL_9;
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  v10 = context_freelists();
  v11 = v10 + 16 * v9;
  v14 = *(_QWORD *)(v11 + 8);
  v12 = (_QWORD *)(v11 + 8);
  v13 = v14;
  if (v14)
  {
    *v12 = *(_QWORD *)(v13 + 48);
    --*(_DWORD *)(v10 + 16 * v9);
    *(_QWORD *)(v13 + 184) = a5;
    MemoryContextCreate(v13, 217, (uint64_t)&AllocSetMethods, a1, (uint64_t)a2);
    v15 = *(_QWORD *)(*(_QWORD *)(v13 + 208) + 32) - v13;
    goto LABEL_21;
  }
LABEL_9:
  if (a3)
    v16 = a3;
  else
    v16 = a4;
  if (v16 <= 0x118)
    v15 = 280;
  else
    v15 = v16;
  v17 = malloc_type_malloc(v15, 0x5D9EFAF5uLL);
  if (!v17)
    AllocSetContextCreateInternal_cold_1(a2);
  v13 = (uint64_t)v17;
  v17[31] = v17 + 33;
  v17[32] = (char *)v17 + v15;
  v17[29] = 0;
  v17[30] = 0;
  v17[28] = v17;
  v17[10] = v17 + 28;
  v17[26] = v17 + 28;
  v18 = (unint64_t)(v17 + 22);
  v19 = v17 + 11;
  if (v18 <= v13 + 96)
    v18 = v13 + 96;
  bzero(v19, ((v18 - v13 - 89) & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)(v13 + 176) = a4;
  *(_QWORD *)(v13 + 184) = a5;
  *(_QWORD *)(v13 + 192) = a4;
  *(_DWORD *)(v13 + 216) = v9;
  v20 = 0x2000;
  do
  {
    v21 = v20;
    v22 = v20 + 16;
    v20 >>= 1;
  }
  while (v22 > (unint64_t)(a5 - 40) >> 2);
  *(_QWORD *)(v13 + 200) = v21;
  MemoryContextCreate(v13, 217, (uint64_t)&AllocSetMethods, a1, (uint64_t)a2);
LABEL_21:
  *(_QWORD *)(v13 + 8) = v15;
  return v13;
}

uint64_t AllocSetDeleteFreeList(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  if ((*(_DWORD *)(result + 216) & 0x80000000) == 0)
  {
    v1 = context_freelists();
    v3 = v1 + 16 * v2;
    v4 = (uint64_t *)(v3 + 8);
    result = *(_QWORD *)(v3 + 8);
    if (result)
    {
      do
      {
        *v4 = *(_QWORD *)(result + 48);
        --*(_DWORD *)v3;
        free((void *)result);
        result = *v4;
      }
      while (*v4);
    }
  }
  return result;
}

_QWORD *AllocSetAlloc(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  _BOOL4 v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  size_t v30;
  unint64_t v31;
  size_t v32;
  size_t v33;
  BOOL v34;
  size_t v35;
  BOOL v36;
  uint64_t v37;

  if (a1[25] >= a2)
  {
    v10 = 29 - __clz(a2 - 1);
    if (a2 <= 8)
      v11 = 0;
    else
      v11 = v10;
    v12 = &a1[v11];
    v15 = v12[11];
    v14 = v12 + 11;
    v13 = v15;
    if (v15)
    {
      *v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = a1;
      return (_QWORD *)(v13 + 16);
    }
    v16 = 8 << v11;
    v17 = (_QWORD *)a1[10];
    if (v17)
    {
      v18 = (_QWORD *)v17[3];
      v19 = v17[4] - (_QWORD)v18;
      v20 = v16 + 16;
      if (v19 >= v16 + 16)
        goto LABEL_40;
      if (v19 >= 0x18)
      {
        do
        {
          v21 = v19 - 16;
          v22 = 29 - __clz(v19 - 17);
          if (v19 - 16 <= 8)
            v22 = 0;
          v23 = 1 << (v22 + 3);
          v24 = v21 == v23;
          v25 = v21 != v23;
          if (!v24)
            v21 = 1 << (v22 + 2);
          v26 = v22 - v25;
          v27 = (uint64_t *)v17[3];
          v28 = v21 + 16;
          v17[3] = (char *)v27 + v21 + 16;
          *v27 = v21;
          v29 = &a1[v26];
          v19 -= v28;
          v27[1] = v29[11];
          v29[11] = v27;
        }
        while (v19 > 0x17);
      }
    }
    v31 = a1[23];
    v30 = a1[24];
    if (2 * v30 < v31)
      v31 = 2 * v30;
    a1[24] = v31;
    v32 = v16 + 56;
    do
    {
      v33 = v30;
      v30 *= 2;
    }
    while (v33 < v32);
    v17 = malloc_type_malloc(v33, 0xB2ECBD4CuLL);
    v34 = v17 == 0;
    if (!v17)
    {
      if (v33 > 0x100000)
      {
        while (1)
        {
          v35 = v33 >> 1;
          if (v33 >> 1 < v32)
            break;
          v17 = malloc_type_malloc(v33 >> 1, 0x52C866B4uLL);
          v34 = v17 == 0;
          if (!v17)
          {
            v36 = v33 > 0x200001;
            v33 >>= 1;
            if (v36)
              continue;
          }
          goto LABEL_34;
        }
      }
      return 0;
    }
    v35 = v33;
LABEL_34:
    if (v34)
      return 0;
    a1[1] += v35;
    v17[3] = v17 + 5;
    v17[4] = (char *)v17 + v35;
    *v17 = a1;
    v17[1] = 0;
    v37 = a1[10];
    v17[2] = v37;
    if (v37)
      *(_QWORD *)(v37 + 8) = v17;
    a1[10] = v17;
    v18 = (_QWORD *)v17[3];
    v20 = v16 + 16;
LABEL_40:
    v17[3] = (char *)v18 + v20;
    *v18 = v16;
    v18[1] = a1;
    return v18 + 2;
  }
  v3 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = v3 + 56;
  result = malloc_type_malloc(v3 + 56, 0x2B1819C8uLL);
  if (result)
  {
    a1[1] += v4;
    *result = a1;
    result[3] = (char *)result + v4;
    result[4] = (char *)result + v4;
    result[5] = v3;
    result[6] = a1;
    v8 = a1[10];
    v7 = (uint64_t)(a1 + 10);
    v6 = v8;
    if (v8)
    {
      result[1] = v6;
      v9 = *(_QWORD *)(*(_QWORD *)v7 + 16);
      result[2] = v9;
      if (v9)
        *(_QWORD *)(v9 + 8) = result;
      v7 = *(_QWORD *)v7 + 16;
    }
    else
    {
      result[1] = 0;
      result[2] = 0;
    }
    *(_QWORD *)v7 = result;
    result += 7;
  }
  return result;
}

void AllocSetFree(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  char *v3;
  BOOL v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(a2 - 2);
  if (v2 <= a1[25])
  {
    v8 = (int)(29 - __clz(v2 - 1));
    if (v2 <= 8)
      v8 = 0;
    v9 = &a1[v8];
    *(a2 - 1) = v9[11];
    v9[11] = a2 - 2;
  }
  else
  {
    if ((_QWORD *)*(a2 - 7) != a1
      || ((v3 = (char *)*(a2 - 4), v3 == (char *)a2 + v2) ? (v4 = v3 == (char *)*(a2 - 3)) : (v4 = 0), !v4))
    {
      AllocSetFree_cold_1(a2 - 2);
    }
    v5 = *(a2 - 6);
    if (v5)
      v6 = (_QWORD *)(v5 + 16);
    else
      v6 = a1 + 10;
    *v6 = *(a2 - 5);
    v7 = *(a2 - 5);
    if (v7)
      *(_QWORD *)(v7 + 8) = *(a2 - 6);
    a1[1] += (char *)a2 - *(a2 - 3) - 56;
    free(a2 - 7);
  }
}

_QWORD *AllocSetRealloc(_QWORD *a1, _QWORD *ptr, unint64_t a3)
{
  _QWORD *v3;
  size_t v5;
  size_t v6;
  char *v7;
  _BYTE *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v3 = ptr;
  v5 = *(ptr - 2);
  v6 = a1[25];
  if (v5 <= v6)
  {
    if (v5 >= a3)
      return v3;
    v17 = AllocSetAlloc(a1, a3);
    if (v17)
    {
      v18 = v17;
      memcpy(v17, v3, v5);
      AllocSetFree(a1, v3);
      return v18;
    }
  }
  else
  {
    v7 = (char *)(ptr - 7);
    if ((_QWORD *)*(ptr - 7) != a1
      || ((v8 = (_BYTE *)*(ptr - 4), v8 == (char *)ptr + v5) ? (v9 = v8 == (_BYTE *)*(ptr - 3)) : (v9 = 0), !v9))
    {
      AllocSetRealloc_cold_1(ptr - 2);
    }
    if (v6 + 1 > a3)
      v10 = v6 + 1;
    else
      v10 = a3;
    v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = v11 + 56;
    v13 = malloc_type_realloc(v7, v11 + 56, 0x81A86C38uLL);
    if (v13)
    {
      a1[1] += &v7[v12] - v8;
      v13[3] = (char *)v13 + v12;
      v13[4] = (char *)v13 + v12;
      v3 = v13 + 7;
      v14 = v13[1];
      if (v14)
        v15 = (_QWORD *)(v14 + 16);
      else
        v15 = a1 + 10;
      *v15 = v13;
      v16 = v13[2];
      if (v16)
        *(_QWORD *)(v16 + 8) = v13;
      v13[5] = v11;
      return v3;
    }
  }
  return 0;
}

_QWORD *AllocSetReset(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *result;
  _QWORD *v5;

  v2 = a1 + 11;
  v3 = (unint64_t)(a1 + 22);
  if (v2 < a1 + 22)
  {
    if (v3 <= (unint64_t)(a1 + 12))
      v3 = (unint64_t)(a1 + 12);
    bzero(v2, ((v3 - (_QWORD)a1 - 89) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  result = (_QWORD *)a1[10];
  a1[10] = a1[26];
  if (result)
  {
    do
    {
      while (1)
      {
        v5 = (_QWORD *)result[2];
        if (result == (_QWORD *)a1[26])
          break;
        a1[1] += (char *)result - result[4];
        free(result);
        result = v5;
        if (!v5)
          goto LABEL_10;
      }
      result[2] = 0;
      result[3] = result + 5;
      result[1] = 0;
      result = v5;
    }
    while (v5);
  }
LABEL_10:
  a1[24] = a1[22];
  return result;
}

void AllocSetDelete(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  if ((a1[27] & 0x80000000) == 0)
  {
    v2 = context_freelists();
    v4 = v2 + 16 * v3;
    v5 = (int *)v4;
    if (*((_BYTE *)a1 + 4))
    {
      v8 = *(_QWORD **)(v4 + 8);
      v7 = (_QWORD *)(v4 + 8);
      v6 = v8;
      if (*v5 < 100)
        goto LABEL_13;
    }
    else
    {
      MemoryContextResetOnly((uint64_t)a1);
      v11 = *(_QWORD **)(v4 + 8);
      v7 = (_QWORD *)(v4 + 8);
      v6 = v11;
      if (*v5 < 100)
      {
LABEL_13:
        a1[6] = v6;
        *v7 = a1;
        ++*v5;
        return;
      }
    }
    if (v6)
    {
      do
      {
        *v7 = v6[6];
        --*v5;
        free(v6);
        v6 = (_QWORD *)*v7;
      }
      while (*v7);
    }
    goto LABEL_13;
  }
  v9 = (_QWORD *)a1[10];
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)v9[2];
      if (v9 != (_QWORD *)a1[26])
      {
        a1[1] += (char *)v9 - v9[4];
        free(v9);
      }
      v9 = v10;
    }
    while (v10);
  }
  free(a1);
}

uint64_t AllocSetGetChunkSpace(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 - 16) + 16;
}

uint64_t AllocSetIsEmpty(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

_QWORD *AllocSetStats(_QWORD *result, uint64_t (*a2)(_QWORD *, uint64_t, char *), uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *i;
  uint64_t v21;
  uint64_t *j;
  uint64_t v23;
  uint64_t *k;
  uint64_t v25;
  uint64_t *m;
  uint64_t v27;
  uint64_t *n;
  uint64_t v29;
  uint64_t *ii;
  uint64_t v31;
  uint64_t *jj;
  uint64_t v33;
  uint64_t *kk;
  uint64_t v35;
  uint64_t *mm;
  uint64_t v37;
  uint64_t *nn;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42[200];
  uint64_t v43;

  v11 = result;
  v43 = *MEMORY[0x1E0C80C00];
  v12 = (_QWORD *)result[10];
  if (!v12)
  {
    v14 = 0;
    v13 = 0;
    v15 = 224;
    v17 = (uint64_t *)result[11];
    if (v17)
      goto LABEL_5;
LABEL_33:
    v18 = 0;
    i = (uint64_t *)result[12];
    if (!i)
      goto LABEL_9;
    goto LABEL_8;
  }
  v13 = 0;
  v14 = 0;
  v15 = 224;
  do
  {
    ++v14;
    v16 = v12[4];
    v15 = v15 - (_QWORD)v12 + v16;
    v13 = v13 + v16 - v12[3];
    v12 = (_QWORD *)v12[2];
  }
  while (v12);
  v17 = (uint64_t *)result[11];
  if (!v17)
    goto LABEL_33;
LABEL_5:
  v18 = 0;
  do
  {
    ++v18;
    v19 = *v17;
    v17 = (uint64_t *)v17[1];
    v13 += v19 + 16;
  }
  while (v17);
  for (i = (uint64_t *)result[12]; i; v13 += v21 + 16)
  {
LABEL_8:
    ++v18;
    v21 = *i;
    i = (uint64_t *)i[1];
  }
LABEL_9:
  for (j = (uint64_t *)result[13]; j; v13 += v23 + 16)
  {
    ++v18;
    v23 = *j;
    j = (uint64_t *)j[1];
  }
  for (k = (uint64_t *)result[14]; k; v13 += v25 + 16)
  {
    ++v18;
    v25 = *k;
    k = (uint64_t *)k[1];
  }
  for (m = (uint64_t *)result[15]; m; v13 += v27 + 16)
  {
    ++v18;
    v27 = *m;
    m = (uint64_t *)m[1];
  }
  for (n = (uint64_t *)result[16]; n; v13 += v29 + 16)
  {
    ++v18;
    v29 = *n;
    n = (uint64_t *)n[1];
  }
  for (ii = (uint64_t *)result[17]; ii; v13 += v31 + 16)
  {
    ++v18;
    v31 = *ii;
    ii = (uint64_t *)ii[1];
  }
  for (jj = (uint64_t *)result[18]; jj; v13 += v33 + 16)
  {
    ++v18;
    v33 = *jj;
    jj = (uint64_t *)jj[1];
  }
  for (kk = (uint64_t *)result[19]; kk; v13 += v35 + 16)
  {
    ++v18;
    v35 = *kk;
    kk = (uint64_t *)kk[1];
  }
  for (mm = (uint64_t *)result[20]; mm; v13 += v37 + 16)
  {
    ++v18;
    v37 = *mm;
    mm = (uint64_t *)mm[1];
  }
  for (nn = (uint64_t *)result[21]; nn; v13 += v39 + 16)
  {
    ++v18;
    v39 = *nn;
    nn = (uint64_t *)nn[1];
  }
  if (a2)
  {
    pg_snprintf(v42, 0xC8uLL, (uint64_t)"%zu total in %zd blocks; %zu free (%zd chunks); %zu used",
      (uint64_t)a4,
      a5,
      a6,
      a7,
      a8,
      v15);
    result = (_QWORD *)a2(v11, a3, v42);
  }
  if (a4)
  {
    v40 = a4[1] + v18;
    *a4 += v14;
    a4[1] = v40;
    v41 = a4[3] + v13;
    a4[2] += v15;
    a4[3] = v41;
  }
  return result;
}

void AllocSetContextCreateInternal_cold_1(const char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v2 = *(_QWORD *)TopMemoryContext();
  if (v2)
    MemoryContextStats(v2);
  OUTLINED_FUNCTION_0_5();
  errcode();
  errmsg("out of memory", v3, v4, v5, v6, v7, v8, v9, v10);
  errdetail("Failed while creating memory context \"%s\".", a1);
  errfinish("src/postgres/src_backend_utils_mmgr_aset.c", 497, (uint64_t)"AllocSetContextCreateInternal");
  __break(1u);
}

void AllocSetFree_cold_1(const void *a1)
{
  OUTLINED_FUNCTION_0_5();
  errmsg_internal("could not find block containing chunk %p", a1);
  errfinish("src/postgres/src_backend_utils_mmgr_aset.c", 1045, (uint64_t)"AllocSetFree");
  __break(1u);
}

void AllocSetRealloc_cold_1(const void *a1)
{
  OUTLINED_FUNCTION_0_5();
  errmsg_internal("could not find block containing chunk %p", a1);
  errfinish("src/postgres/src_backend_utils_mmgr_aset.c", 1134, (uint64_t)"AllocSetRealloc");
  __break(1u);
}

_QWORD *MemoryContextInit()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  AllocSetContextCreateInternal(0, "TopMemoryContext", 0, 0x2000uLL, 0x800000);
  v0 = (_QWORD *)TopMemoryContext();
  *v0 = v1;
  v2 = (uint64_t *)CurrentMemoryContext();
  *v2 = v3;
  AllocSetContextCreateInternal(v3, "ErrorContext", 0x2000uLL, 0x2000uLL, 0x2000);
  result = (_QWORD *)ErrorContext();
  *result = v5;
  *(_BYTE *)(v5 + 5) = 1;
  return result;
}

uint64_t MemoryContextAllowInCriticalSection(uint64_t result, char a2)
{
  *(_BYTE *)(result + 5) = a2;
  return result;
}

uint64_t MemoryContextReset(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result;
  if (*(_QWORD *)(result + 32))
    result = MemoryContextDeleteChildren(result);
  if (!*(_BYTE *)(v1 + 4))
  {
    while (1)
    {
      v2 = *(_QWORD *)(v1 + 72);
      if (!v2)
        break;
      *(_QWORD *)(v1 + 72) = *(_QWORD *)(v2 + 16);
      (*(void (**)(_QWORD))v2)(*(_QWORD *)(v2 + 8));
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 16) + 24))(v1);
    *(_BYTE *)(v1 + 4) = 1;
  }
  return result;
}

uint64_t MemoryContextDeleteChildren(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = *(_QWORD **)(result + 32);
  if (v1)
  {
    v2 = result;
    do
    {
      if (v1[4])
        MemoryContextDeleteChildren(v1);
      while (1)
      {
        v3 = v1[9];
        if (!v3)
          break;
        v1[9] = *(_QWORD *)(v3 + 16);
        (*(void (**)(_QWORD))v3)(*(_QWORD *)(v3 + 8));
      }
      v4 = v1[3];
      if (v4)
      {
        v6 = v1[5];
        v5 = v1 + 5;
        v7 = (_QWORD *)(v4 + 32);
        if (v6)
          v7 = (_QWORD *)(v6 + 48);
        *v7 = v1[6];
        v8 = v1[6];
        if (v8)
          *(_QWORD *)(v8 + 40) = *v5;
        v1[3] = 0;
        *v5 = 0;
        v1[6] = 0;
      }
      v1[8] = 0;
      result = (*(uint64_t (**)(_QWORD *))(v1[2] + 32))(v1);
      v1 = *(_QWORD **)(v2 + 32);
    }
    while (v1);
  }
  return result;
}

uint64_t MemoryContextResetOnly(uint64_t result)
{
  uint64_t v1;
  uint64_t i;

  if (!*(_BYTE *)(result + 4))
  {
    v1 = result;
    for (i = *(_QWORD *)(result + 72); i; i = *(_QWORD *)(v1 + 72))
    {
      *(_QWORD *)(v1 + 72) = *(_QWORD *)(i + 16);
      (*(void (**)(_QWORD))i)(*(_QWORD *)(i + 8));
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 16) + 24))(v1);
    *(_BYTE *)(v1 + 4) = 1;
  }
  return result;
}

uint64_t MemoryContextDelete(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  if (a1[4])
    MemoryContextDeleteChildren((uint64_t)a1);
  while (1)
  {
    v2 = a1[9];
    if (!v2)
      break;
    a1[9] = *(_QWORD *)(v2 + 16);
    (*(void (**)(_QWORD))v2)(*(_QWORD *)(v2 + 8));
  }
  v3 = a1[3];
  if (v3)
  {
    v5 = a1[5];
    v4 = a1 + 5;
    v6 = (_QWORD *)(v3 + 32);
    if (v5)
      v6 = (_QWORD *)(v5 + 48);
    *v6 = a1[6];
    v7 = a1[6];
    if (v7)
      *(_QWORD *)(v7 + 40) = *v4;
    a1[3] = 0;
    *v4 = 0;
    a1[6] = 0;
  }
  a1[8] = 0;
  return (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1);
}

_QWORD *MemoryContextSetParent(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result[3];
  if (v2 != a2)
  {
    if (v2)
    {
      v3 = result[5];
      v4 = (_QWORD *)(v2 + 32);
      if (v3)
        v4 = (_QWORD *)(v3 + 48);
      *v4 = result[6];
      v5 = result[6];
      if (v5)
        *(_QWORD *)(v5 + 40) = result[5];
    }
    if (a2)
    {
      result[3] = a2;
      result[5] = 0;
      result[6] = *(_QWORD *)(a2 + 32);
      v6 = *(_QWORD *)(a2 + 32);
      if (v6)
        *(_QWORD *)(v6 + 40) = result;
      *(_QWORD *)(a2 + 32) = result;
    }
    else
    {
      result[3] = 0;
      result[5] = 0;
      result[6] = 0;
    }
  }
  return result;
}

uint64_t MemoryContextStats(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64x2_t v8;
  __int128 v9;

  v8 = 0u;
  v9 = 0u;
  MemoryContextStatsInternal(a1, 0, 1, 100, &v8);
  return pg_fprintf((FILE *)*MEMORY[0x1E0C80C10], "Grand total: %zu bytes in %zd blocks; %zu free (%zd chunks); %zu used\n",
           v1,
           v2,
           v3,
           v4,
           v5,
           v6,
           v9);
}

uint64_t MemoryContextStatsDetail(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t v9;
  __int128 v10;

  v9 = 0u;
  v10 = 0u;
  MemoryContextStatsInternal(a1, 0, 1, a2, &v9);
  return pg_fprintf((FILE *)*MEMORY[0x1E0C80C10], "Grand total: %zu bytes in %zd blocks; %zu free (%zd chunks); %zu used\n",
           v2,
           v3,
           v4,
           v5,
           v6,
           v7,
           v10);
}

int64x2_t MemoryContextStatsInternal(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int64x2_t *a5)
{
  uint64_t (*v9)(uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64x2_t result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  size_t v21;
  FILE **v22;
  int v23;
  int64x2_t v24;
  size_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int v28;

  v28 = a2;
  if ((_DWORD)a3)
    v9 = MemoryContextStatsPrint;
  else
    v9 = 0;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), int *, int64x2_t *))(*(_QWORD *)(a1 + 16) + 56))(a1, v9, &v28, a5);
  result = 0uLL;
  v26 = 0u;
  v27 = 0u;
  v17 = *(_QWORD *)(a1 + 32);
  if (!v17)
  {
    v20 = __OFSUB__(0, (_DWORD)a4);
    v21 = -(int)a4;
    if (((v21 & 0x80000000) != 0) ^ v20 | ((_DWORD)v21 == 0))
      return result;
    goto LABEL_13;
  }
  v18 = 0;
  do
  {
    while (1)
    {
      v19 = (v28 + 1);
      if (v18 < (int)a4)
        break;
      MemoryContextStatsInternal(v17, v19, 0, a4, &v26);
      ++v18;
      v17 = *(_QWORD *)(v17 + 48);
      if (!v17)
        goto LABEL_9;
    }
    MemoryContextStatsInternal(v17, v19, a3, a4, a5);
    ++v18;
    v17 = *(_QWORD *)(v17 + 48);
  }
  while (v17);
LABEL_9:
  v20 = __OFSUB__(v18, (_DWORD)a4);
  v21 = (v18 - a4);
  if (!(((v21 & 0x80000000) != 0) ^ v20 | ((_DWORD)v21 == 0)))
  {
LABEL_13:
    if ((_DWORD)a3)
    {
      v22 = (FILE **)MEMORY[0x1E0C80C10];
      if ((v28 & 0x80000000) == 0)
      {
        v23 = 0;
        do
        {
          pg_fprintf(*v22, "  ", v10, v11, v12, v13, v14, v15, v25);
          ++v23;
        }
        while (v23 <= v28);
      }
      pg_fprintf(*v22, "%d more child contexts containing %zu total in %zd blocks; %zu free (%zd chunks); %zu used\n",
        v10,
        v11,
        v12,
        v13,
        v14,
        v15,
        v21);
    }
    if (a5)
    {
      result = vaddq_s64(*a5, v26);
      v24 = vaddq_s64(a5[1], v27);
      *a5 = result;
      a5[1] = v24;
    }
  }
  return result;
}

uint64_t MemoryContextCreate(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_DWORD *)result = a2;
  *(_BYTE *)(result + 4) = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = a4;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 56) = a5;
  if (a4)
  {
    *(_QWORD *)(result + 48) = *(_QWORD *)(a4 + 32);
    v5 = *(_QWORD *)(a4 + 32);
    if (v5)
      *(_QWORD *)(v5 + 40) = result;
    *(_QWORD *)(a4 + 32) = result;
    *(_BYTE *)(result + 5) = *(_BYTE *)(a4 + 5);
  }
  else
  {
    *(_QWORD *)(result + 48) = 0;
    *(_BYTE *)(result + 5) = 0;
  }
  return result;
}

uint64_t MemoryContextAlloc(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 30)
    MemoryContextAlloc_cold_2(a2);
  *(_BYTE *)(a1 + 4) = 0;
  result = (**(uint64_t (***)(void))(a1 + 16))();
  if (!result)
    MemoryContextAlloc_cold_1(a1, a2);
  return result;
}

unint64_t MemoryContextAllocZero(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;

  if (a2 >> 30)
    MemoryContextAllocZero_cold_2(a2);
  *(_BYTE *)(a1 + 4) = 0;
  v4 = (**(uint64_t (***)(void))(a1 + 16))();
  if (!v4)
    MemoryContextAllocZero_cold_1(a1, a2);
  v5 = v4;
  if (a2 > 0x400 || (a2 & 7) != 0)
  {
    v7 = a2;
LABEL_10:
    bzero((void *)v4, v7);
    return v5;
  }
  v6 = v4 + a2;
  if (v4 < v4 + a2)
  {
    if (v6 <= v4 + 8)
      v6 = v4 + 8;
    v7 = ((v6 + ~v4) & 0xFFFFFFFFFFFFFFF8) + 8;
    goto LABEL_10;
  }
  return v5;
}

unint64_t MemoryContextAllocZeroAligned(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (a2 >> 30)
    MemoryContextAllocZeroAligned_cold_2(a2);
  *(_BYTE *)(a1 + 4) = 0;
  v4 = (**(uint64_t (***)(void))(a1 + 16))();
  if (!v4)
    MemoryContextAllocZeroAligned_cold_1(a1, a2);
  v5 = v4;
  v6 = v4 + a2;
  if (v4 < v4 + a2)
  {
    if (v6 <= v4 + 8)
      v6 = v4 + 8;
    bzero((void *)v4, ((v6 + ~v4) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  return v5;
}

unint64_t MemoryContextAllocExtended(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;

  if ((a2 & 0x8000000000000000) != 0 && (a3 & 1) != 0 || a2 >> 30 && (a3 & 1) == 0)
    MemoryContextAllocExtended_cold_2(a2);
  *(_BYTE *)(a1 + 4) = 0;
  v6 = (**(uint64_t (***)(uint64_t, unint64_t))(a1 + 16))(a1, a2);
  v7 = v6;
  if (v6)
  {
    if ((a3 & 4) != 0)
    {
      if (a2 > 0x400 || (a2 & 7) != 0)
      {
        v9 = a2;
LABEL_14:
        bzero((void *)v6, v9);
        return v7;
      }
      v8 = v6 + a2;
      if (v6 < v6 + a2)
      {
        if (v8 <= v6 + 8)
          v8 = v6 + 8;
        v9 = ((v8 + ~v6) & 0xFFFFFFFFFFFFFFF8) + 8;
        goto LABEL_14;
      }
    }
  }
  else if ((a3 & 2) == 0)
  {
    MemoryContextAllocExtended_cold_1(a1, a2);
  }
  return v7;
}

uint64_t palloc(unint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;

  v2 = (uint64_t *)CurrentMemoryContext();
  if (a1 >> 30)
    palloc_cold_2(a1);
  v3 = *v2;
  *(_BYTE *)(v3 + 4) = 0;
  result = (**(uint64_t (***)(uint64_t, unint64_t))(v3 + 16))(v3, a1);
  if (!result)
    palloc_cold_1(v3, a1);
  return result;
}

unint64_t palloc0(unint64_t a1, double a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;

  v3 = (uint64_t *)CurrentMemoryContext(a2);
  if (a1 >> 30)
    palloc0_cold_2(a1);
  v4 = *v3;
  *(_BYTE *)(v4 + 4) = 0;
  v5 = (**(uint64_t (***)(uint64_t, unint64_t))(v4 + 16))(v4, a1);
  if (!v5)
    palloc0_cold_1(v4, a1);
  v6 = v5;
  if (a1 > 0x400 || (a1 & 7) != 0)
  {
    v8 = a1;
LABEL_10:
    bzero((void *)v5, v8);
    return v6;
  }
  v7 = v5 + a1;
  if (v5 < v5 + a1)
  {
    if (v7 <= v5 + 8)
      v7 = v5 + 8;
    v8 = ((v7 + ~v5) & 0xFFFFFFFFFFFFFFF8) + 8;
    goto LABEL_10;
  }
  return v6;
}

uint64_t pfree(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 - 8) + 16) + 8))();
}

uint64_t repalloc(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  if (a2 >> 30)
    repalloc_cold_2(a2);
  v3 = *(_QWORD *)(a1 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v3 + 16) + 16))(v3, a1, a2);
  if (!result)
    repalloc_cold_1(v3, a2);
  return result;
}

void *MemoryContextStrdup(uint64_t a1, char *__s)
{
  unint64_t v4;
  void *v5;

  v4 = strlen(__s) + 1;
  v5 = (void *)MemoryContextAlloc(a1, v4);
  return memcpy(v5, __s, v4);
}

void *pstrdup(const char *a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;

  v2 = *(_QWORD *)CurrentMemoryContext();
  v3 = strlen(a1) + 1;
  v4 = (void *)MemoryContextAlloc(v2, v3);
  return memcpy(v4, a1, v3);
}

uint64_t MemoryContextStatsPrint(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char *v9;
  size_t v10;
  FILE **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  size_t v31;
  size_t v32;
  size_t v33;

  v8 = *a2;
  v10 = *(_QWORD *)(a1 + 56);
  v9 = *(char **)(a1 + 64);
  if (v9 && !strcmp(*(const char **)(a1 + 56), "dynahash"))
  {
    v10 = (size_t)v9;
    v9 = 0;
  }
  v11 = (FILE **)MEMORY[0x1E0C80C10];
  if (v8 >= 1)
  {
    do
    {
      pg_fprintf(*v11, "  ", a3, a4, a5, a6, a7, a8, v31);
      --v8;
    }
    while (v8);
  }
  pg_fprintf(*v11, "%s: %s", a3, a4, a5, a6, a7, a8, v10);
  if (v9)
  {
    v18 = strlen(v9);
    v19 = v18;
    if (v18 >= 101)
      v19 = pg_mbcliplen(v9, v18, 100);
    pg_fprintf(*v11, ": ", v12, v13, v14, v15, v16, v17, v32);
    if (v19 >= 1)
    {
      v26 = v19 + 1;
      do
      {
        v28 = *v9++;
        v27 = v28;
        if (v28 <= 0x20)
          v29 = 32;
        else
          v29 = v27;
        fputc(v29, *v11);
        --v26;
      }
      while (v26 > 1);
    }
    if (v18 >= 101)
      pg_fprintf(*v11, "...", v20, v21, v22, v23, v24, v25, v33);
  }
  return fputc(10, *v11);
}

void MemoryContextAlloc_cold_1(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = (uint64_t *)OUTLINED_FUNCTION_3_10(&TopMemoryContext);
  v5 = OUTLINED_FUNCTION_1_19(v4);
  OUTLINED_FUNCTION_0_5(v5);
  OUTLINED_FUNCTION_2_11();
  errmsg("out of memory");
  errdetail("Failed on request of size %zu in memory context \"%s\".", a2, *(const char **)(a1 + 56));
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 756, "MemoryContextAlloc");
  __break(1u);
}

void MemoryContextAlloc_cold_2(uint64_t a1)
{
  OUTLINED_FUNCTION_0_5(a1);
  errmsg_internal("invalid memory alloc request size %zu", a1);
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 737, "MemoryContextAlloc");
  __break(1u);
}

void MemoryContextAllocZero_cold_1(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;

  v4 = (uint64_t *)OUTLINED_FUNCTION_3_10(&TopMemoryContext);
  OUTLINED_FUNCTION_1_19(v4);
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_2_11();
  errmsg("out of memory", v5, v6, v7, v8, v9, v10, v11, v12);
  errdetail("Failed on request of size %zu in memory context \"%s\".", a2, *(const char **)(a1 + 56));
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 792, (uint64_t)"MemoryContextAllocZero");
  __break(1u);
}

void MemoryContextAllocZero_cold_2(uint64_t a1)
{
  OUTLINED_FUNCTION_0_5();
  errmsg_internal("invalid memory alloc request size %zu", a1);
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 780, (uint64_t)"MemoryContextAllocZero");
  __break(1u);
}

void MemoryContextAllocZeroAligned_cold_1(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;

  v4 = (uint64_t *)OUTLINED_FUNCTION_3_10(&TopMemoryContext);
  OUTLINED_FUNCTION_1_19(v4);
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_2_11();
  errmsg("out of memory", v5, v6, v7, v8, v9, v10, v11, v12);
  errdetail("Failed on request of size %zu in memory context \"%s\".", a2, *(const char **)(a1 + 56));
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 830, (uint64_t)"MemoryContextAllocZeroAligned");
  __break(1u);
}

void MemoryContextAllocZeroAligned_cold_2(uint64_t a1)
{
  OUTLINED_FUNCTION_0_5();
  errmsg_internal("invalid memory alloc request size %zu", a1);
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 818, (uint64_t)"MemoryContextAllocZeroAligned");
  __break(1u);
}

void MemoryContextAllocExtended_cold_1(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;

  v4 = (uint64_t *)OUTLINED_FUNCTION_3_10(&TopMemoryContext);
  OUTLINED_FUNCTION_1_19(v4);
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_2_11();
  errmsg("out of memory", v5, v6, v7, v8, v9, v10, v11, v12);
  errdetail("Failed on request of size %zu in memory context \"%s\".", a2, *(const char **)(a1 + 56));
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 868, (uint64_t)"MemoryContextAllocExtended");
  __break(1u);
}

void MemoryContextAllocExtended_cold_2(uint64_t a1)
{
  OUTLINED_FUNCTION_0_5();
  errmsg_internal("invalid memory alloc request size %zu", a1);
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 854, (uint64_t)"MemoryContextAllocExtended");
  __break(1u);
}

void palloc_cold_1(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;

  v4 = (uint64_t *)OUTLINED_FUNCTION_3_10(&TopMemoryContext);
  v5 = OUTLINED_FUNCTION_1_19(v4);
  OUTLINED_FUNCTION_0_5(v5);
  OUTLINED_FUNCTION_2_11();
  errmsg("out of memory", v6, v7, v8, v9, v10, v11, v12, v13);
  errdetail("Failed on request of size %zu in memory context \"%s\".", a2, *(const char **)(a1 + 56));
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 904, "palloc");
  __break(1u);
}

void palloc_cold_2(uint64_t a1)
{
  OUTLINED_FUNCTION_0_5(a1);
  errmsg_internal("invalid memory alloc request size %zu", a1);
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 892, "palloc");
  __break(1u);
}

void palloc0_cold_1(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;

  v4 = (uint64_t *)OUTLINED_FUNCTION_3_10(&TopMemoryContext);
  OUTLINED_FUNCTION_1_19(v4);
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_2_11();
  errmsg("out of memory", v5, v6, v7, v8, v9, v10, v11, v12);
  errdetail("Failed on request of size %zu in memory context \"%s\".", a2, *(const char **)(a1 + 56));
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 935, (uint64_t)"palloc0");
  __break(1u);
}

void palloc0_cold_2(uint64_t a1)
{
  OUTLINED_FUNCTION_0_5();
  errmsg_internal("invalid memory alloc request size %zu", a1);
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 923, (uint64_t)"palloc0");
  __break(1u);
}

void repalloc_cold_1(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = (uint64_t *)OUTLINED_FUNCTION_3_10(&TopMemoryContext);
  v5 = OUTLINED_FUNCTION_1_19(v4);
  OUTLINED_FUNCTION_0_5(v5);
  OUTLINED_FUNCTION_2_11();
  errmsg("out of memory");
  errdetail("Failed on request of size %zu in memory context \"%s\".", a2, *(const char **)(a1 + 56));
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 986, "repalloc");
  __break(1u);
}

void repalloc_cold_2(uint64_t a1)
{
  OUTLINED_FUNCTION_0_5(a1);
  errmsg_internal("invalid memory alloc request size %zu", a1);
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 971, "repalloc");
  __break(1u);
}

uint64_t ScanKeywords_hash_func(unsigned __int8 *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;

  if (!a2)
    return (ScanKeywords_hash_func_h[3] + ScanKeywords_hash_func_h[0]);
  v2 = 0;
  v3 = 3;
  do
  {
    v4 = *a1++;
    v2 = (v4 | 0x20) - v2 + 32 * v2;
    v3 = (v4 | 0x20) - v3 + (v3 << 7);
    --a2;
  }
  while (a2);
  return (ScanKeywords_hash_func_h[v3 % 0x385] + ScanKeywords_hash_func_h[v2 % 0x385]);
}

uint64_t ScanKeywordLookup(const char *a1, uint64_t a2)
{
  char *v3;
  size_t v4;
  uint64_t result;
  _BYTE *i;
  int v7;
  int v8;

  v3 = (char *)a1;
  v4 = strlen(a1);
  if (v4 > *(int *)(a2 + 28))
    return 0xFFFFFFFFLL;
  LODWORD(result) = (*(uint64_t (**)(char *, size_t))(a2 + 16))(v3, v4);
  if ((result & 0x80000000) != 0 || (int)result >= *(_DWORD *)(a2 + 24))
    return 0xFFFFFFFFLL;
  for (i = (_BYTE *)(*(_QWORD *)a2 + *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + 2 * result)); ; ++i)
  {
    v7 = *v3;
    if (!*v3)
      break;
    ++v3;
    if ((v7 - 65) < 0x1A)
      LOBYTE(v7) = v7 + 32;
    v8 = *i;
    if (v8 != v7)
      return 0xFFFFFFFFLL;
  }
  if (*i)
    return 0xFFFFFFFFLL;
  else
    return result;
}

char *psprintf(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  int v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;

  v10 = *__error();
  v11 = (char *)palloc(0x80uLL);
  *__error() = v10;
  v12 = pvsnprintf(v11, 0x80uLL, a1, &a9);
  if (v12 >= 0x80)
  {
    v13 = v12;
    do
    {
      pfree((uint64_t)v11);
      v11 = (char *)palloc(v13);
      *__error() = v10;
      v14 = pvsnprintf(v11, v13, a1, &a9);
      v15 = v14 >= v13;
      v13 = v14;
    }
    while (v15);
  }
  return v11;
}

uint64_t pvsnprintf(char *a1, unint64_t a2, char *a3, size_t *a4)
{
  unsigned int v6;
  uint64_t v7;

  v6 = pg_vsnprintf(a1, a2, a3, a4);
  if ((v6 & 0x80000000) != 0)
    pvsnprintf_cold_1(a3);
  v7 = v6;
  if (v6 >= a2)
  {
    if (v6 >= 0x3FFFFFFF)
      pvsnprintf_cold_2();
    return v6 + 1;
  }
  return v7;
}

void pvsnprintf_cold_1(const char *a1)
{
  OUTLINED_FUNCTION_0_5();
  errmsg_internal("vsnprintf failed: %m with format string \"%s\"", a1);
  errfinish("src/postgres/src_common_psprintf.c", 123, "pvsnprintf");
  __break(1u);
}

void pvsnprintf_cold_2()
{
  OUTLINED_FUNCTION_0_5();
  errcode();
  errmsg("out of memory");
  errfinish("src/postgres/src_common_psprintf.c", 150, "pvsnprintf");
  __break(1u);
}

uint64_t strtoint(const char *a1, char **a2, int a3)
{
  uint64_t v3;

  v3 = strtol(a1, a2, a3);
  if (v3 != (int)v3)
    *__error() = 34;
  return v3;
}

_BYTE *initStringInfo(uint64_t a1)
{
  _BYTE *result;

  result = (_BYTE *)palloc(0x400uLL);
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 12) = 1024;
  *result = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t resetStringInfo(uint64_t result)
{
  **(_BYTE **)result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

unint64_t appendStringInfo(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t result;
  uint64_t v16;

  v11 = *__error();
  while (1)
  {
    *__error() = v11;
    v13 = *(int *)(a1 + 8);
    v14 = (*(_DWORD *)(a1 + 12) - v13);
    if ((int)v14 <= 15)
    {
      v12 = 32;
      goto LABEL_3;
    }
    result = pvsnprintf((char *)(*(_QWORD *)a1 + v13), (*(_DWORD *)(a1 + 12) - v13), a2, &a9);
    v12 = result;
    v16 = *(int *)(a1 + 8);
    if (result < v14)
      break;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 0;
    if (!(_DWORD)result)
      return result;
LABEL_3:
    enlargeStringInfo(a1, v12);
  }
  *(_DWORD *)(a1 + 8) = v16 + result;
  return result;
}

unint64_t appendStringInfoVA(uint64_t a1, char *a2, size_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t result;
  uint64_t v7;
  int v8;

  v3 = *(int *)(a1 + 8);
  v4 = (*(_DWORD *)(a1 + 12) - v3);
  if ((int)v4 < 16)
    return 32;
  result = pvsnprintf((char *)(*(_QWORD *)a1 + v3), v4, a2, a3);
  v7 = *(int *)(a1 + 8);
  if (result >= v4)
  {
    *(_BYTE *)(*(_QWORD *)a1 + v7) = 0;
  }
  else
  {
    v8 = v7 + result;
    result = 0;
    *(_DWORD *)(a1 + 8) = v8;
  }
  return result;
}

uint64_t enlargeStringInfo(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;

  if ((a2 & 0x80000000) != 0)
    enlargeStringInfo_cold_1(a2);
  v2 = result;
  v3 = *(int *)(result + 8);
  if (0x3FFFFFFF - v3 <= (unint64_t)a2)
    enlargeStringInfo_cold_2((_DWORD *)(result + 8), a2);
  v4 = a2 + v3 + 1;
  v5 = *(_DWORD *)(result + 12);
  if (v4 > v5)
  {
    do
      v5 *= 2;
    while (v4 > v5);
    if (v5 >= 0x3FFFFFFF)
      v6 = 0x3FFFFFFF;
    else
      v6 = v5;
    result = repalloc(*(_QWORD *)result, v6);
    *(_QWORD *)v2 = result;
    *(_DWORD *)(v2 + 12) = v6;
  }
  return result;
}

void *appendStringInfoString(uint64_t a1, char *__s)
{
  size_t v4;
  int v5;
  void *result;
  int v7;

  v4 = strlen(__s);
  v5 = v4;
  enlargeStringInfo(a1, v4);
  result = memcpy((void *)(*(_QWORD *)a1 + *(int *)(a1 + 8)), __s, v5);
  v7 = *(_DWORD *)(a1 + 8) + v5;
  *(_DWORD *)(a1 + 8) = v7;
  *(_BYTE *)(*(_QWORD *)a1 + v7) = 0;
  return result;
}

void *appendBinaryStringInfo(uint64_t a1, const void *a2, uint64_t a3)
{
  int v3;
  void *result;
  int v7;

  v3 = a3;
  enlargeStringInfo(a1, a3);
  result = memcpy((void *)(*(_QWORD *)a1 + *(int *)(a1 + 8)), a2, v3);
  v7 = *(_DWORD *)(a1 + 8) + v3;
  *(_DWORD *)(a1 + 8) = v7;
  *(_BYTE *)(*(_QWORD *)a1 + v7) = 0;
  return result;
}

uint64_t appendStringInfoChar(uint64_t result, char a2)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 + 1 >= *(_DWORD *)(result + 12))
  {
    result = enlargeStringInfo(result, 1);
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_BYTE *)(*(_QWORD *)v3 + v4) = a2;
  v5 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v5;
  *(_BYTE *)(*(_QWORD *)v3 + v5) = 0;
  return result;
}

uint64_t appendStringInfoSpaces(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  if ((int)a2 >= 1)
  {
    v2 = a2;
    v3 = result;
    result = enlargeStringInfo(result, a2);
    v4 = v2 + 1;
    do
    {
      v5 = *(_QWORD *)v3;
      v6 = *(int *)(v3 + 8);
      *(_DWORD *)(v3 + 8) = v6 + 1;
      *(_BYTE *)(v5 + v6) = 32;
      --v4;
    }
    while (v4 > 1);
    *(_BYTE *)(*(_QWORD *)v3 + *(int *)(v3 + 8)) = 0;
  }
  return result;
}

void enlargeStringInfo_cold_1(uint64_t a1)
{
  int v1;

  v1 = a1;
  OUTLINED_FUNCTION_0_5(a1);
  errmsg_internal("invalid string enlargement request size: %d", v1);
  errfinish("src/postgres/src_common_stringinfo.c", 287, "enlargeStringInfo");
  __break(1u);
}

void enlargeStringInfo_cold_2(_DWORD *a1, int a2)
{
  OUTLINED_FUNCTION_0_5(a1);
  errcode();
  errmsg("out of memory");
  errdetail("Cannot enlarge string buffer containing %d bytes by %d more bytes.", *a1, a2);
  errfinish("src/postgres/src_common_stringinfo.c", 300, "enlargeStringInfo");
  __break(1u);
}

_BYTE *unicode_to_utf8(unsigned int a1, _BYTE *a2)
{
  if (a1 > 0x7F)
  {
    if (a1 > 0x7FF)
    {
      if (HIWORD(a1))
      {
        *a2 = (a1 >> 18) & 7 | 0xF0;
        a2[1] = (a1 >> 12) & 0x3F | 0x80;
        a2[2] = (a1 >> 6) & 0x3F | 0x80;
        a2[3] = a1 & 0x3F | 0x80;
      }
      else
      {
        *a2 = (a1 >> 12) | 0xE0;
        a2[1] = (a1 >> 6) & 0x3F | 0x80;
        a2[2] = a1 & 0x3F | 0x80;
      }
      return a2;
    }
    else
    {
      *a2 = (a1 >> 6) | 0xC0;
      a2[1] = a1 & 0x3F | 0x80;
      return a2;
    }
  }
  else
  {
    *a2 = a1;
    return a2;
  }
}

uint64_t pg_utf_mblen(char *a1)
{
  int v1;
  int v3;
  unsigned int v4;

  v1 = *a1;
  if ((v1 & 0x80000000) == 0)
    return 1;
  if ((v1 & 0xE0) == 0xC0)
    return 2;
  v3 = v1 & 0xF0;
  if ((v1 & 0xF8) == 0xF0)
    v4 = 4;
  else
    v4 = 1;
  if (v3 == 224)
    return 3;
  else
    return v4;
}

uint64_t utf8_to_unicode(unsigned __int8 *a1)
{
  char v1;

  v1 = *a1;
  if (((char)*a1 & 0x80000000) == 0)
    return *a1;
  if ((v1 & 0xE0) == 0xC0)
    return ((v1 & 0x1F) << 6) | a1[1] & 0x3Fu;
  if ((v1 & 0xF0) == 0xE0)
    return ((v1 & 0xF) << 12) | ((a1[1] & 0x3F) << 6) | a1[2] & 0x3Fu;
  if ((v1 & 0xF8) == 0xF0)
    return ((v1 & 7) << 18) | ((a1[1] & 0x3F) << 12) | ((a1[2] & 0x3F) << 6) | a1[3] & 0x3Fu;
  return 0xFFFFFFFFLL;
}

uint64_t pg_mule_mblen(_BYTE *a1)
{
  int v1;
  int v2;
  unsigned int v4;

  v1 = *a1 & 0xFE;
  if (v1 == 156)
    v2 = 4;
  else
    v2 = 1;
  if (v1 != 154 && (*a1 + 112) >= 0xAu)
    v4 = v2;
  else
    v4 = 3;
  if ((*a1 + 127) >= 0xDu)
    return v4;
  else
    return 2;
}

BOOL pg_utf8_islegal(unsigned __int8 *a1, int a2)
{
  unsigned int v2;
  _BOOL8 result;
  int v4;

  switch(a2)
  {
    case 1:
      v2 = *a1;
LABEL_3:
      if ((char)v2 < -62)
        return 0;
      return v2 < 0xF5;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_6;
    case 4:
      if ((char)a1[3] > -65)
        return 0;
LABEL_6:
      if ((char)a1[2] > -65)
        return 0;
LABEL_7:
      v4 = (char)a1[1];
      v2 = *a1;
      switch(*a1)
      {
        case 0xE0u:
          if ((v4 + 64) < 0xE0u)
            return 0;
          result = 1;
          break;
        case 0xEDu:
          if (v4 > -97)
            return 0;
          result = 1;
          break;
        case 0xF0u:
          if ((v4 + 64) < 0xD0u)
            return 0;
          result = 1;
          break;
        case 0xF4u:
          if (v4 > -113)
            return 0;
          result = 1;
          break;
        default:
          if (v4 > -65)
            return 0;
          goto LABEL_3;
      }
      return result;
    default:
      return 0;
  }
}

uint64_t pg_ascii2wchar_with_len(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v4;
  uint64_t result;

  if (a3 < 1)
  {
    result = 0;
    *a2 = 0;
  }
  else
  {
    v4 = 0;
    result = a3;
    while (*(_BYTE *)(a1 + v4))
    {
      *a2++ = *(unsigned __int8 *)(a1 + v4);
      if (a3 == (_DWORD)++v4)
      {
        *a2 = 0;
        return result;
      }
    }
    result = v4;
    *a2 = 0;
  }
  return result;
}

uint64_t pg_wchar2single_with_len(uint64_t a1, _BYTE *a2, int a3)
{
  uint64_t v4;
  uint64_t result;
  int v6;

  if (a3 < 1)
  {
    result = 0;
    *a2 = 0;
  }
  else
  {
    v4 = 0;
    result = a3;
    while (1)
    {
      v6 = *(_DWORD *)(a1 + 4 * v4);
      if (!v6)
        break;
      a2[v4++] = v6;
      if (a3 == (_DWORD)v4)
      {
        a2[v4] = 0;
        return result;
      }
    }
    result = v4;
    a2[v4] = 0;
  }
  return result;
}

uint64_t pg_ascii_mblen()
{
  return 1;
}

uint64_t pg_ascii_dsplen(_BYTE *a1)
{
  unsigned int v1;
  unsigned int v3;

  v1 = *a1;
  if (v1 != 127 && v1 >= 0x20)
    v3 = 1;
  else
    v3 = -1;
  if (*a1)
    return v3;
  else
    return 0;
}

uint64_t pg_ascii_verifier()
{
  return 1;
}

uint64_t pg_eucjp2wchar_with_len(unsigned __int8 *a1, int *a2, int a3)
{
  uint64_t result;
  int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  if (a3 >= 1)
  {
    result = 0;
    while (1)
    {
      v5 = *a1;
      if (!*a1)
      {
LABEL_16:
        *a2 = 0;
        return result;
      }
      if (a3 >= 2 && v5 == 142)
      {
        v6 = a1 + 2;
        v7 = a1[1];
        v8 = -2;
        v9 = 36352;
      }
      else if (a3 >= 3 && v5 == 143)
      {
        v7 = (a1[1] << 8) | 0x8F0000;
        *a2 = v7;
        v6 = a1 + 3;
        v9 = a1[2];
        v8 = -3;
      }
      else
      {
        v6 = a1 + 1;
        v8 = -1;
        if (a3 < 2 || ((char)v5 & 0x80000000) == 0)
          goto LABEL_14;
        v7 = v5 << 8;
        *a2 = v7;
        v6 = a1 + 2;
        v9 = a1[1];
        v8 = -2;
      }
      v5 = v7 | v9;
LABEL_14:
      *a2++ = v5;
      result = (result + 1);
      a1 = v6;
      v10 = __OFADD__(v8, a3);
      a3 += v8;
      if ((a3 < 0) ^ v10 | (a3 == 0))
        goto LABEL_16;
    }
  }
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t pg_wchar2euc_with_len(unsigned int *a1, _BYTE *a2, int a3)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;

  if (a3 >= 1)
  {
    result = 0;
    v5 = a3 + 1;
    while (1)
    {
      v6 = *a1;
      if (!*a1)
      {
LABEL_14:
        *a2 = 0;
        return result;
      }
      if (HIBYTE(v6))
      {
        *a2 = HIBYTE(v6);
        a2[1] = *((_WORD *)a1 + 1);
        v7 = a2 + 3;
        a2[2] = BYTE1(*a1);
        v8 = 4;
        v9 = 4;
      }
      else if (BYTE2(v6))
      {
        *a2 = BYTE2(v6);
        v7 = a2 + 2;
        a2[1] = BYTE1(*a1);
        v8 = 3;
        v9 = 3;
      }
      else
      {
        if (!BYTE1(v6))
        {
          v8 = 1;
          v7 = a2;
          v9 = 1;
          goto LABEL_11;
        }
        *a2 = BYTE1(v6);
        v7 = a2 + 1;
        v8 = 2;
        v9 = 2;
      }
      v6 = *a1;
LABEL_11:
      a2 += v8;
      *v7 = v6;
      result = (result + v9);
      ++a1;
      if (--v5 <= 1)
        goto LABEL_14;
    }
  }
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t pg_eucjp_mblen(unsigned __int8 *a1)
{
  int v1;
  unsigned int v2;

  v1 = *a1;
  if ((v1 & 0x80u) == 0)
    v2 = 1;
  else
    v2 = 2;
  if (v1 == 143)
    v2 = 3;
  if (v1 == 142)
    return 2;
  else
    return v2;
}

uint64_t pg_eucjp_dsplen(_BYTE *a1)
{
  unsigned int v1;
  unsigned int v4;

  v1 = *a1;
  if (v1 == 142)
    return 1;
  if (v1 == 143)
    return 2;
  if (v1 != 127 && v1 >= 0x20)
    v4 = 1;
  else
    v4 = -1;
  if (!*a1)
    v4 = 0;
  if ((v1 & 0x80) != 0)
    return 2;
  else
    return v4;
}

uint64_t pg_eucjp_verifier(unsigned __int8 *a1, int a2)
{
  int v3;
  uint64_t result;

  v3 = *a1;
  if (v3 == 143)
  {
    if (a2 >= 3 && (a1[1] + 95) <= 0x5Du && (a1[2] + 95) < 0x5Eu)
      return 3;
    return 0xFFFFFFFFLL;
  }
  if (v3 == 142)
  {
    if (a2 >= 2 && (a1[1] + 32) >= 0xC1u)
      return 2;
    return 0xFFFFFFFFLL;
  }
  if (((char)v3 & 0x80000000) == 0)
    return 1;
  result = 0xFFFFFFFFLL;
  if (a2 >= 2 && (v3 + 95) <= 0x5Du && (a1[1] + 95) <= 0x5Du)
    return 2;
  return result;
}

uint64_t pg_euccn2wchar_with_len(unsigned __int8 *a1, int *a2, int a3)
{
  uint64_t result;
  int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  uint64_t v9;
  BOOL v10;

  if (a3 >= 1)
  {
    result = 0;
    while (1)
    {
      v5 = *a1;
      if (!*a1)
      {
LABEL_18:
        *a2 = 0;
        return result;
      }
      if (a3 >= 3 && v5 == 142)
        break;
      if (a3 >= 3 && v5 == 143)
      {
        v6 = a1 + 2;
        v7 = (a1[1] << 8) | 0x8F0000;
        goto LABEL_10;
      }
      v6 = a1 + 1;
      v8 = -1;
      if (a3 < 2 || ((char)v5 & 0x80000000) == 0)
        goto LABEL_12;
      v7 = v5 << 8;
      v8 = -2;
      v9 = 2;
LABEL_11:
      *a2 = v7;
      v5 = v7 | *v6;
      v6 = &a1[v9];
LABEL_12:
      *a2++ = v5;
      result = (result + 1);
      a1 = v6;
      v10 = __OFADD__(a3, v8);
      a3 += v8;
      if ((a3 < 0) ^ v10 | (a3 == 0))
        goto LABEL_18;
    }
    v6 = a1 + 2;
    v7 = (a1[1] << 8) | 0x8E0000;
LABEL_10:
    v8 = -3;
    v9 = 3;
    goto LABEL_11;
  }
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t pg_euccn_mblen(char *a1)
{
  if (*a1 >= 0)
    return 1;
  else
    return 2;
}

uint64_t pg_euccn_dsplen(_BYTE *a1)
{
  unsigned int v1;
  unsigned int v3;

  if ((char)*a1 < 0)
    return 2;
  v1 = *a1;
  if (v1 != 127 && v1 >= 0x20)
    v3 = 1;
  else
    v3 = -1;
  if (*a1)
    return v3;
  else
    return 0;
}

uint64_t pg_euckr_verifier(char *a1, int a2)
{
  int v2;
  uint64_t result;

  v2 = *a1;
  if ((v2 & 0x80000000) == 0)
    return 1;
  result = 0xFFFFFFFFLL;
  if (a2 >= 2 && (v2 + 95) <= 0x5Du && (a1[1] + 95) <= 0x5Du)
    return 2;
  return result;
}

uint64_t pg_euckr2wchar_with_len(unsigned __int8 *a1, int *a2, int a3)
{
  uint64_t result;
  int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  if (a3 >= 1)
  {
    result = 0;
    while (1)
    {
      v5 = *a1;
      if (!*a1)
      {
LABEL_16:
        *a2 = 0;
        return result;
      }
      if (a3 >= 2 && v5 == 142)
      {
        v6 = a1 + 2;
        v7 = a1[1];
        v8 = -2;
        v9 = 36352;
      }
      else if (a3 >= 3 && v5 == 143)
      {
        v7 = (a1[1] << 8) | 0x8F0000;
        *a2 = v7;
        v6 = a1 + 3;
        v9 = a1[2];
        v8 = -3;
      }
      else
      {
        v6 = a1 + 1;
        v8 = -1;
        if (a3 < 2 || ((char)v5 & 0x80000000) == 0)
          goto LABEL_14;
        v7 = v5 << 8;
        *a2 = v7;
        v6 = a1 + 2;
        v9 = a1[1];
        v8 = -2;
      }
      v5 = v7 | v9;
LABEL_14:
      *a2++ = v5;
      result = (result + 1);
      a1 = v6;
      v10 = __OFADD__(v8, a3);
      a3 += v8;
      if ((a3 < 0) ^ v10 | (a3 == 0))
        goto LABEL_16;
    }
  }
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t pg_euckr_mblen(unsigned __int8 *a1)
{
  int v1;
  unsigned int v2;

  v1 = *a1;
  if ((v1 & 0x80u) == 0)
    v2 = 1;
  else
    v2 = 2;
  if (v1 == 143)
    v2 = 3;
  if (v1 == 142)
    return 2;
  else
    return v2;
}

uint64_t pg_euckr_dsplen(_BYTE *a1)
{
  unsigned int v1;
  unsigned int v3;

  if ((char)*a1 < 0)
    return 2;
  v1 = *a1;
  if (v1 != 127 && v1 >= 0x20)
    v3 = 1;
  else
    v3 = -1;
  if (*a1)
    return v3;
  else
    return 0;
}

uint64_t pg_euctw2wchar_with_len(unsigned __int8 *a1, int *a2, int a3)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  uint64_t v10;
  BOOL v11;

  if (a3 >= 1)
  {
    result = 0;
    while (1)
    {
      v5 = *a1;
      if (!*a1)
      {
LABEL_16:
        *a2 = 0;
        return result;
      }
      if (a3 >= 4 && v5 == 142)
      {
        v6 = (a1[1] << 16) | 0x8E000000;
        *a2 = v6;
        v7 = a1 + 3;
        v8 = v6 | (a1[2] << 8);
        v9 = -4;
        v10 = 4;
      }
      else if (a3 >= 3 && v5 == 143)
      {
        v7 = a1 + 2;
        v8 = (a1[1] << 8) | 0x8F0000;
        v9 = -3;
        v10 = 3;
      }
      else
      {
        v7 = a1 + 1;
        v9 = -1;
        if (a3 < 2 || ((char)v5 & 0x80000000) == 0)
          goto LABEL_14;
        v8 = v5 << 8;
        v9 = -2;
        v10 = 2;
      }
      *a2 = v8;
      v5 = v8 | *v7;
      v7 = &a1[v10];
LABEL_14:
      *a2++ = v5;
      result = (result + 1);
      a1 = v7;
      v11 = __OFADD__(a3, v9);
      a3 += v9;
      if ((a3 < 0) ^ v11 | (a3 == 0))
        goto LABEL_16;
    }
  }
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t pg_euctw_mblen(unsigned __int8 *a1)
{
  int v1;
  unsigned int v2;

  v1 = *a1;
  if ((v1 & 0x80u) == 0)
    v2 = 1;
  else
    v2 = 2;
  if (v1 == 143)
    v2 = 3;
  if (v1 == 142)
    return 4;
  else
    return v2;
}

uint64_t pg_euctw_dsplen(_BYTE *a1)
{
  unsigned int v1;
  unsigned int v3;

  if ((char)*a1 < 0)
    return 2;
  v1 = *a1;
  if (v1 != 127 && v1 >= 0x20)
    v3 = 1;
  else
    v3 = -1;
  if (*a1)
    return v3;
  else
    return 0;
}

uint64_t pg_euctw_verifier(unsigned __int8 *a1, int a2)
{
  int v2;

  v2 = *a1;
  if (v2 != 143)
  {
    if (v2 == 142)
    {
      if (a2 >= 4
        && (a1[1] + 88) >= 0xF9u
        && (a1[2] + 95) <= 0x5Du
        && (a1[3] + 95) < 0x5Eu)
      {
        return 4;
      }
    }
    else
    {
      if (((char)v2 & 0x80000000) == 0)
        return 1;
      if (a2 >= 2 && (a1[1] + 95) <= 0x5Du)
        return 2;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t pg_utf2wchar_with_len(unsigned __int8 *a1, int *a2, int a3)
{
  uint64_t result;
  int v5;
  BOOL v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;

  if (a3 >= 1)
  {
    result = 0;
    while (1)
    {
      v7 = *a1;
      if (!*a1)
      {
LABEL_16:
        *a2 = 0;
        return result;
      }
      if ((v7 & 0x80) == 0)
        break;
      if ((v7 & 0xE0) == 0xC0)
      {
        if (a3 < 2)
          goto LABEL_16;
        v8 = a1[1];
        a1 += 2;
        v9 = v8 & 0x3F | ((v7 & 0x1F) << 6);
        v5 = -2;
        v7 = v9;
      }
      else if ((v7 & 0xF0) == 0xE0)
      {
        if (a3 < 3)
          goto LABEL_16;
        v10 = a1[1];
        v11 = a1[2];
        a1 += 3;
        v7 = ((v7 & 0xF) << 12) | ((v10 & 0x3F) << 6) | v11 & 0x3F;
        v5 = -3;
      }
      else
      {
        if ((v7 & 0xF8) != 0xF0)
          break;
        if (a3 < 4)
          goto LABEL_16;
        v12 = a1[1];
        v13 = a1[2];
        v14 = a1[3];
        a1 += 4;
        v7 = ((v7 & 7) << 18) | ((v12 & 0x3F) << 12) | ((v13 & 0x3F) << 6) | v14 & 0x3F;
        v5 = -4;
      }
LABEL_4:
      *a2++ = v7;
      result = (result + 1);
      v6 = __OFADD__(a3, v5);
      a3 += v5;
      if ((a3 < 0) ^ v6 | (a3 == 0))
        goto LABEL_16;
    }
    ++a1;
    v5 = -1;
    goto LABEL_4;
  }
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t pg_wchar2utf_with_len(unsigned int *a1, _BYTE *a2, int a3)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a3 >= 1)
  {
    result = 0;
    v5 = a3 + 1;
    while (1)
    {
      v7 = *a1;
      if (!*a1)
      {
LABEL_18:
        *a2 = 0;
        return result;
      }
      if (v7 <= 0x7F)
      {
        *a2 = v7;
        v6 = 1;
      }
      else
      {
        if (v7 > 0x7FF)
        {
          if (HIWORD(v7))
          {
            v8 = (v7 >> 18) & 7 | 0xF0;
            *a2 = (v7 >> 18) & 7 | 0xF0;
            a2[1] = (v7 >> 12) & 0x3F | 0x80;
            a2[2] = (v7 >> 6) & 0x3F | 0x80;
            a2[3] = v7 & 0x3F | 0x80;
          }
          else
          {
            LOBYTE(v8) = (v7 >> 12) | 0xE0;
            *a2 = v8;
            a2[1] = (v7 >> 6) & 0x3F | 0x80;
            a2[2] = v7 & 0x3F | 0x80;
          }
LABEL_12:
          if ((v8 & 0xF0) == 0xE0)
          {
            v6 = 3;
          }
          else if ((v8 & 0xF8) == 0xF0)
          {
            v6 = 4;
          }
          else
          {
            v6 = 1;
          }
          goto LABEL_4;
        }
        LOBYTE(v8) = (v7 >> 6) | 0xC0;
        *a2 = v8;
        a2[1] = v7 & 0x3F | 0x80;
        if (((v7 >> 6) & 0x20 | 0xC0) != 0xC0)
          goto LABEL_12;
        v6 = 2;
      }
LABEL_4:
      result = v6 + result;
      a2 += v6;
      ++a1;
      if (--v5 <= 1)
        goto LABEL_18;
    }
  }
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t pg_utf_dsplen(char *a1)
{
  unsigned int v1;
  uint64_t result;
  int v3;
  int v4;
  uint64_t v5;

  v1 = *a1;
  if ((*a1 & 0x80000000) == 0)
  {
    if (*a1)
      goto LABEL_3;
    return 0;
  }
  if ((v1 & 0xE0) == 0xC0)
  {
    v1 = ((v1 & 0x1F) << 6) | a1[1] & 0x3F;
    if (!v1)
      return 0;
  }
  else
  {
    if ((v1 & 0xF0) != 0xE0)
    {
      if ((v1 & 0xF8) != 0xF0)
        return 0xFFFFFFFFLL;
      v1 = ((v1 & 7) << 18) | ((a1[1] & 0x3F) << 12) | ((a1[2] & 0x3F) << 6) | a1[3] & 0x3F;
      if (v1)
        goto LABEL_3;
      return 0;
    }
    v1 = ((v1 & 0xF) << 12) | ((a1[1] & 0x3F) << 6) | a1[2] & 0x3F;
    if (!v1)
      return 0;
  }
LABEL_3:
  result = 0xFFFFFFFFLL;
  if (v1 < 0x20 || HIWORD(v1) > 0x10u || v1 - 127 < 0x21)
    return result;
  if (v1 - 65072 >= 0xFFFF04D0)
  {
    v3 = 0;
    v4 = 191;
    do
    {
      while (1)
      {
        v5 = (uint64_t)(v4 + v3 + (v4 + v3 < 0)) >> 1;
        if (v1 <= ucs_wcwidth_combining[2 * ((v4 + v3) / 2) + 1])
          break;
        v3 = (v4 + v3) / 2 + 1;
        if (v4 < (int)v5 + 1)
          goto LABEL_16;
      }
      if (ucs_wcwidth_combining[2 * v5] <= (unsigned __int16)v1)
        return 0;
      v4 = (v4 + v3) / 2 - 1;
    }
    while ((int)v5 - 1 >= v3);
  }
LABEL_16:
  if (v1 >> 8 < 0x11)
    return 1;
  if (v1 >> 5 < 0x8B)
    return 2;
  if ((v1 - 11904) >> 4 <= 0x764)
  {
    if (v1 != 12351 && (v1 & 0x1FFFEE) != 0x300A)
      return 2;
    goto LABEL_31;
  }
  if ((v1 - 44032) >> 2 < 0xAE9)
    return 2;
LABEL_31:
  result = 2;
  if (v1 - 65504 >= 7 && v1 - 65280 >= 0x60 && v1 - 63744 >= 0x200 && v1 - 65072 >= 0x40)
  {
    if ((v1 & 0x1F0000) == 0x20000)
      return 2;
    else
      return 1;
  }
  return result;
}

uint64_t pg_utf8_verifier(unsigned __int8 *a1, int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;

  v2 = (char)*a1;
  if (v2 < 0)
  {
    if ((v2 & 0xE0) == 0xC0)
    {
      v3 = 2;
      if (a2 < 2)
        return 0xFFFFFFFFLL;
    }
    else
    {
      v5 = v2 & 0xF0;
      if ((v2 & 0xF8) == 0xF0)
        v6 = 4;
      else
        v6 = 1;
      if (v5 == 224)
        v3 = 3;
      else
        v3 = v6;
      if (v3 > a2)
        return 0xFFFFFFFFLL;
    }
  }
  else
  {
    v3 = 1;
    if (a2 < 1)
      return 0xFFFFFFFFLL;
  }
  if (pg_utf8_islegal(a1, v3))
    return v3;
  else
    return 0xFFFFFFFFLL;
}

uint64_t pg_mule2wchar_with_len(unsigned __int8 *a1, unsigned int *a2, unsigned int a3)
{
  uint64_t result;
  int v5;
  BOOL v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  if ((int)a3 >= 1)
  {
    result = 0;
    while (1)
    {
      v7 = *a1;
      if (!*a1)
      {
LABEL_26:
        *a2 = 0;
        return result;
      }
      if (v7 >= 0x81)
      {
        if (a3 >= 2 && v7 <= 0x8D)
        {
          *a2 = v7 << 16;
          v8 = a1[1];
          a1 += 2;
          v5 = -2;
          v7 = v8 & 0xFF00FFFF | (v7 << 16);
          goto LABEL_4;
        }
        if (v7 == 154)
        {
          if (a3 >= 3)
            goto LABEL_15;
        }
        else
        {
          if (a3 >= 3 && v7 == 155)
          {
LABEL_15:
            v9 = a1[1];
            *a2 = v9 << 16;
            v10 = a1[2];
            a1 += 3;
            v7 = v10 & 0xFF00FFFF | (v9 << 16);
            v5 = -3;
            goto LABEL_4;
          }
          if (v7 >= 0x90)
          {
            if (a3 >= 3 && v7 <= 0x99)
            {
              v11 = v7 << 16;
              *a2 = v11;
              v12 = v11 | (a1[1] << 8);
              *a2 = v12;
              v13 = a1[2];
              a1 += 3;
              v7 = v12 | v13;
              v5 = -3;
              goto LABEL_4;
            }
            if (v7 == 156)
            {
              if (a3 >= 4)
                goto LABEL_25;
            }
            else if (a3 >= 4 && v7 == 157)
            {
LABEL_25:
              v14 = a1[1] << 16;
              *a2 = v14;
              v15 = v14 | (a1[2] << 8);
              *a2 = v15;
              v16 = a1[3];
              a1 += 4;
              v7 = v15 | v16;
              v5 = -4;
              goto LABEL_4;
            }
          }
        }
      }
      ++a1;
      v5 = -1;
LABEL_4:
      *a2++ = v7;
      result = (result + 1);
      v6 = __OFADD__(a3, v5);
      a3 += v5;
      if (((a3 & 0x80000000) != 0) ^ v6 | (a3 == 0))
        goto LABEL_26;
    }
  }
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t pg_wchar2mule_with_len(unsigned int *a1, _BYTE *a2, int a3)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;

  if (a3 >= 1)
  {
    result = 0;
    v5 = a3 + 1;
    while (1)
    {
      v6 = *a1;
      if (!*a1)
      {
LABEL_22:
        *a2 = 0;
        return result;
      }
      if (BYTE2(v6) - 129 > 0xC)
      {
        if (BYTE2(v6) - 144 <= 9)
        {
          *a2 = BYTE2(v6);
          v10 = *a1 >> 8;
LABEL_12:
          v7 = a2 + 2;
          a2[1] = v10;
          v8 = 3;
          v9 = 3;
          goto LABEL_13;
        }
        if (BYTE2(v6) - 160 <= 0x3F)
        {
          v10 = HIWORD(v6);
          *a2 = -102;
          goto LABEL_12;
        }
        if ((v6 & 0xF00000) == 0xE00000)
        {
          v10 = HIWORD(v6);
          *a2 = -101;
          goto LABEL_12;
        }
        if (BYTE2(v6) - 240 > 4)
        {
          v8 = 1;
          v9 = 1;
          v7 = a2;
          if (BYTE2(v6) < 0xF5u || BYTE2(v6) == 255)
            goto LABEL_14;
          v11 = HIWORD(v6);
          *a2 = -99;
        }
        else
        {
          v11 = HIWORD(v6);
          *a2 = -100;
        }
        a2[1] = v11;
        v7 = a2 + 3;
        a2[2] = BYTE1(*a1);
        v8 = 4;
        v9 = 4;
      }
      else
      {
        *a2 = BYTE2(v6);
        v7 = a2 + 1;
        v8 = 2;
        v9 = 2;
      }
LABEL_13:
      v6 = *a1;
LABEL_14:
      a2 += v8;
      *v7 = v6;
      result = (result + v9);
      ++a1;
      if (--v5 <= 1)
        goto LABEL_22;
    }
  }
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t pg_mule_dsplen(char *a1)
{
  char v1;
  unsigned int v2;
  uint64_t result;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;

  v1 = *a1;
  v2 = (*a1 + 127);
  result = 1;
  if (v2 >= 0xD)
  {
    v4 = v1 & 0xFE;
    v5 = (v1 + 112);
    if (v4 == 156)
      v6 = 2;
    else
      v6 = 1;
    if (v5 >= 0xA)
      v7 = v6;
    else
      v7 = 2;
    if (v4 == 154)
      return 1;
    else
      return v7;
  }
  return result;
}

uint64_t pg_mule_verifier(_BYTE *a1, int a2)
{
  int v3;
  int v4;
  unsigned int v6;
  uint64_t result;

  v3 = *a1 & 0xFE;
  if (v3 == 156)
    v4 = 4;
  else
    v4 = 1;
  if (v3 != 154 && (*a1 + 112) >= 0xAu)
    v6 = v4;
  else
    v6 = 3;
  if ((*a1 + 127) >= 0xDu)
    result = v6;
  else
    result = 2;
  if ((int)result > a2)
    return 0xFFFFFFFFLL;
  if (result >= 2)
  {
    if ((char)a1[1] < 0)
    {
      if (result >= 3)
      {
        if ((char)a1[2] < 0)
        {
          if (result >= 4)
          {
            if ((char)a1[3] >= 0)
              return 0xFFFFFFFFLL;
            else
              return result;
          }
        }
        else
        {
          return 0xFFFFFFFFLL;
        }
      }
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t pg_latin12wchar_with_len(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v4;
  uint64_t result;

  if (a3 < 1)
  {
    result = 0;
    *a2 = 0;
  }
  else
  {
    v4 = 0;
    result = a3;
    while (*(_BYTE *)(a1 + v4))
    {
      *a2++ = *(unsigned __int8 *)(a1 + v4);
      if (a3 == (_DWORD)++v4)
      {
        *a2 = 0;
        return result;
      }
    }
    result = v4;
    *a2 = 0;
  }
  return result;
}

uint64_t pg_latin1_mblen()
{
  return 1;
}

uint64_t pg_latin1_dsplen(_BYTE *a1)
{
  unsigned int v1;
  unsigned int v3;

  v1 = *a1;
  if (v1 != 127 && v1 >= 0x20)
    v3 = 1;
  else
    v3 = -1;
  if (*a1)
    return v3;
  else
    return 0;
}

uint64_t pg_latin1_verifier()
{
  return 1;
}

uint64_t pg_sjis_mblen(_BYTE *a1)
{
  if ((*a1 + 95) >= 0x3Fu && (char)*a1 <= -1)
    return 2;
  else
    return 1;
}

uint64_t pg_sjis_dsplen(_BYTE *a1)
{
  unsigned int v1;
  unsigned int v4;

  v1 = *a1;
  if ((v1 + 95) < 0x3Fu)
    return 1;
  if (v1 != 127 && v1 >= 0x20)
    v4 = 1;
  else
    v4 = -1;
  if (!*a1)
    v4 = 0;
  if ((v1 & 0x80) != 0)
    return 2;
  else
    return v4;
}

uint64_t pg_sjis_verifier(char *a1, int a2)
{
  int v2;
  _BOOL4 v4;
  int v5;
  uint64_t v6;

  v2 = *a1;
  v4 = v2 >= 0 || (v2 + 95) < 0x3F;
  if (v4)
    v5 = 1;
  else
    v5 = 2;
  if (v5 > a2)
    v6 = 0xFFFFFFFFLL;
  else
    v6 = 1;
  if (!v4 && v5 <= a2)
  {
    if ((v2 + 127) >= 0x1F && (v2 + 32) > 0x1Cu)
      return 0xFFFFFFFFLL;
    if (a1[1] - 64 < 0x3F || a1[1] < -3)
      return 2;
    else
      return 0xFFFFFFFFLL;
  }
  return v6;
}

uint64_t pg_big5_mblen(char *a1)
{
  if (*a1 >= 0)
    return 1;
  else
    return 2;
}

uint64_t pg_big5_dsplen(_BYTE *a1)
{
  unsigned int v1;
  unsigned int v3;

  if ((char)*a1 < 0)
    return 2;
  v1 = *a1;
  if (v1 != 127 && v1 >= 0x20)
    v3 = 1;
  else
    v3 = -1;
  if (*a1)
    return v3;
  else
    return 0;
}

uint64_t pg_big5_verifier(char *a1, int a2)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *a1;
  if (v2 >= 0)
    v3 = 1;
  else
    v3 = 2;
  v4 = v3 <= a2;
  if (v3 > a2)
    v5 = 0xFFFFFFFFLL;
  else
    v5 = 1;
  if (v4 && v2 < 0)
  {
    if (a1[1])
      return 2;
    else
      return 0xFFFFFFFFLL;
  }
  return v5;
}

uint64_t pg_gbk_mblen(char *a1)
{
  if (*a1 >= 0)
    return 1;
  else
    return 2;
}

uint64_t pg_gbk_dsplen(_BYTE *a1)
{
  unsigned int v1;
  unsigned int v3;

  if ((char)*a1 < 0)
    return 2;
  v1 = *a1;
  if (v1 != 127 && v1 >= 0x20)
    v3 = 1;
  else
    v3 = -1;
  if (*a1)
    return v3;
  else
    return 0;
}

uint64_t pg_gbk_verifier(char *a1, int a2)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *a1;
  if (v2 >= 0)
    v3 = 1;
  else
    v3 = 2;
  v4 = v3 <= a2;
  if (v3 > a2)
    v5 = 0xFFFFFFFFLL;
  else
    v5 = 1;
  if (v4 && v2 < 0)
  {
    if (a1[1])
      return 2;
    else
      return 0xFFFFFFFFLL;
  }
  return v5;
}

uint64_t pg_uhc_mblen(char *a1)
{
  if (*a1 >= 0)
    return 1;
  else
    return 2;
}

uint64_t pg_uhc_dsplen(_BYTE *a1)
{
  unsigned int v1;
  unsigned int v3;

  if ((char)*a1 < 0)
    return 2;
  v1 = *a1;
  if (v1 != 127 && v1 >= 0x20)
    v3 = 1;
  else
    v3 = -1;
  if (*a1)
    return v3;
  else
    return 0;
}

uint64_t pg_uhc_verifier(char *a1, int a2)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *a1;
  if (v2 >= 0)
    v3 = 1;
  else
    v3 = 2;
  v4 = v3 <= a2;
  if (v3 > a2)
    v5 = 0xFFFFFFFFLL;
  else
    v5 = 1;
  if (v4 && v2 < 0)
  {
    if (a1[1])
      return 2;
    else
      return 0xFFFFFFFFLL;
  }
  return v5;
}

uint64_t pg_gb18030_mblen(char *a1)
{
  if ((*a1 & 0x80000000) == 0)
    return 1;
  if (a1[1] - 48 >= 0xA)
    return 2;
  return 4;
}

uint64_t pg_gb18030_dsplen(_BYTE *a1)
{
  unsigned int v1;
  unsigned int v3;

  if ((char)*a1 < 0)
    return 2;
  v1 = *a1;
  if (v1 != 127 && v1 >= 0x20)
    v3 = 1;
  else
    v3 = -1;
  if (*a1)
    return v3;
  else
    return 0;
}

uint64_t pg_gb18030_verifier(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  unsigned __int8 v5;
  unsigned int v6;
  unsigned int v7;

  v2 = (char)*a1;
  if ((v2 & 0x80000000) == 0)
    return 1;
  if (a2 < 4)
  {
    if (a2 < 2 || (v2 + 1) < 0x82u)
      return 0xFFFFFFFFLL;
    v4 = a1[1];
  }
  else
  {
    v4 = a1[1];
    v5 = v2 + 1;
    if ((v4 - 48) <= 9)
    {
      if (v5 >= 0x82u && (a1[2] + 1) >= 0x82u && a1[3] - 48 < 0xA)
        return 4;
      return 0xFFFFFFFFLL;
    }
    if (v5 < 0x82u)
      return 0xFFFFFFFFLL;
  }
  v6 = v4 - 64;
  if ((char)v4 > -2)
    v7 = -1;
  else
    v7 = 2;
  if (v6 >= 0x3F)
    return v7;
  else
    return 2;
}

uint64_t pg_johab_mblen(unsigned __int8 *a1)
{
  int v1;
  unsigned int v2;

  v1 = *a1;
  if ((v1 & 0x80u) == 0)
    v2 = 1;
  else
    v2 = 2;
  if (v1 == 143)
    v2 = 3;
  if (v1 == 142)
    return 2;
  else
    return v2;
}

uint64_t pg_johab_dsplen(_BYTE *a1)
{
  unsigned int v1;
  unsigned int v3;

  if ((char)*a1 < 0)
    return 2;
  v1 = *a1;
  if (v1 != 127 && v1 >= 0x20)
    v3 = 1;
  else
    v3 = -1;
  if (*a1)
    return v3;
  else
    return 0;
}

uint64_t pg_johab_verifier(unsigned __int8 *a1, int a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  v3 = *a1;
  if ((v3 & 0x80u) == 0)
    v4 = 1;
  else
    v4 = 2;
  if (v3 == 143)
    v4 = 3;
  if (v3 == 142)
    result = 2;
  else
    result = v4;
  if ((int)result > a2)
    return 0xFFFFFFFFLL;
  if ((char)v3 < 0 && result >= 2)
  {
    if ((a1[1] + 95) > 0x5Du)
      return 0xFFFFFFFFLL;
    if ((_DWORD)result == 3)
    {
      if ((a1[2] + 95) >= 0x5Eu)
        return 0xFFFFFFFFLL;
      else
        return 3;
    }
  }
  return result;
}

uint64_t pg_encoding_mblen(unsigned int a1, uint64_t a2)
{
  if (a1 > 0x29)
    return 1;
  else
    return ((uint64_t (*)(uint64_t))pg_wchar_table[6 * a1 + 2])(a2);
}

uint64_t pg_encoding_max_length(int a1)
{
  return LODWORD(pg_wchar_table[6 * a1 + 5]);
}

uint64_t pg_lrand48()
{
  unsigned __int16 *v0;
  unint64_t v1;

  v0 = (unsigned __int16 *)_rand48_seed();
  v1 = 0x5DEECE66DLL * (*v0 | ((unint64_t)*(unsigned int *)(v0 + 1) << 16)) + 11;
  *v0 = -6547 * *v0 + 11;
  v0[1] = WORD1(v1);
  v0[2] = WORD2(v1);
  return (v1 >> 17) & 0x7FFFFFFF;
}

uint64_t pg_popcount32_slow(__int32 a1, int8x8_t a2)
{
  uint8x8_t v2;

  a2.i32[0] = a1;
  v2 = (uint8x8_t)vcnt_s8(a2);
  v2.i16[0] = vaddlv_u8(v2);
  return v2.u32[0];
}

uint64_t pg_popcount64_slow(uint64_t a1)
{
  uint8x8_t v1;

  v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t pg_usleep(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  timeval v3;
  uint64_t v4;
  uint64_t v5;

  if (result >= 1)
  {
    v4 = v1;
    v5 = v2;
    v3.tv_sec = result / 0xF4240uLL;
    *(_QWORD *)&v3.tv_usec = result % 0xF4240uLL;
    return select(0, 0, 0, 0, &v3);
  }
  return result;
}

uint64_t pg_toupper(__darwin_ct_rune_t a1)
{
  __darwin_ct_rune_t v1;

  v1 = a1;
  if ((a1 - 97) <= 0x19)
  {
    LOBYTE(v1) = a1 - 32;
    return v1;
  }
  if ((a1 & 0x80) == 0 || !__maskrune(a1, 0x1000uLL))
    return v1;
  return __toupper(v1);
}

uint64_t pg_vsnprintf(char *a1, unint64_t a2, char *a3, size_t *a4)
{
  uint64_t v4;
  char *v5;
  int v6;
  unsigned int v7;
  char v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  if (a2 <= 1)
    v4 = 1;
  else
    v4 = a2;
  v5 = &v9;
  if (a2)
    v5 = a1;
  v10 = v5;
  v11 = v5;
  v12 = (uint64_t)&v5[v4 - 1];
  LODWORD(v14) = 0;
  BYTE4(v14) = 0;
  dopr((uint64_t)&v10, a3, a4);
  v6 = (int)v10;
  *v10 = 0;
  v7 = v14 + v6 - (_DWORD)v11;
  if (BYTE4(v14))
    return 0xFFFFFFFFLL;
  else
    return v7;
}

size_t dopr(uint64_t a1, char *a2, size_t *a3)
{
  size_t result;
  char v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v12;
  const char **v13;
  char *v14;
  const char *v15;
  int v16;
  char *v17;
  uint64_t v18;
  int v19;
  size_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  _BOOL4 v35;
  int v36;
  char *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  char v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int *v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  _BOOL4 v59;
  char v60;
  int v61;
  int *v62;
  uint64_t v63;
  int *v64;
  int *v65;
  int v66;
  int v67;
  int v68;
  double v69;
  int v70;
  int v71;
  int v72;
  size_t *v73;
  double *v74;
  unsigned int v75;
  uint64_t v76;
  BOOL v77;
  int v78;
  int v79;
  int v80;
  int v81;
  size_t v82;
  unint64_t v83;
  _BYTE *v84;
  BOOL v85;
  FILE *v86;
  _BYTE *v87;
  uint64_t v88;
  int v89;
  int v90;
  const void *v91;
  int v92;
  int v93;
  int v94;
  const char *v95;
  int v96;
  char *v97;
  int v98;
  int v99;
  int *v100;
  int v101;
  int v102;
  unint64_t v103;
  _BYTE *v104;
  FILE *v105;
  _BYTE *v106;
  const void **v107;
  const char **v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  char v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v126[65];
  char __s[16];
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  char v135[8];
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  result = (size_t)__error();
  v6 = 0;
  v7 = 0;
  v8 = *(unsigned int *)result;
  do
  {
    if (*a2 != 37)
    {
      if (!*a2)
        break;
      v9 = 0;
      do
        v10 = a2[++v9];
      while (v10 != 37 && v10 != 0);
      result = dostr((size_t)a2, v9, a1);
      if (*(_BYTE *)(a1 + 36))
        break;
      a2 += v9;
      if (!*a2)
        break;
    }
    if (!v7)
      v7 = a2;
    v12 = a2[1];
    if (v12 == 115)
    {
      a2 += 2;
      v13 = (const char **)a3++;
      v14 = (char *)*v13;
      v15 = *v13;
LABEL_16:
      v16 = strlen(v15);
      v17 = v14;
LABEL_17:
      result = dostr((size_t)v17, v16, a1);
    }
    else
    {
      v18 = v8;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v123 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      result = 0;
      v28 = 0;
      ++a2;
      while (2)
      {
        v30 = (char)v12;
        v29 = 1;
        ++a2;
        switch((char)v12)
        {
          case '$':
            if ((v6 & 1) != 0)
            {
              if ((result & 1) == 0)
                goto LABEL_134;
            }
            else
            {
              *(_QWORD *)v135 = a3;
              v120 = v21;
              v121 = v24;
              v118 = v19;
              v119 = v25;
              v116 = v26;
              v117 = v22;
              v112 = v18;
              v115 = result;
              v133 = 0u;
              v134 = 0u;
              v131 = 0u;
              v132 = 0u;
              v129 = 0u;
              v130 = 0u;
              *(_OWORD *)__s = 0u;
              v128 = 0u;
              v36 = 0;
              v37 = v7;
LABEL_55:
              v38 = v28;
              if (*v37 == 37 || *v37 && (v37 = strchr(v37 + 1, 37)) != 0)
              {
                v39 = 0;
                v40 = 0;
                v41 = 0;
                v42 = 0;
                v43 = 0;
                v44 = v37 + 2;
                v28 = v38;
                while (1)
                {
                  v45 = v43;
                  v46 = *(v44 - 1);
                  v47 = v42;
                  v48 = v41;
                  v37 = v44;
                  v42 = 0;
                  ++v44;
                  switch(v46)
                  {
                    case '$':
                      if ((v47 - 32) < 0xFFFFFFE1)
                        goto LABEL_284;
                      v42 = 0;
                      v43 = 0;
                      v41 = v47;
                      if ((v45 & 1) == 0)
                        continue;
                      if (*(_DWORD *)&__s[4 * v47] > 1u)
                        goto LABEL_284;
                      v42 = 0;
                      v43 = 0;
                      *(_DWORD *)&__s[4 * v47] = 1;
                      if (v36 <= (int)v47)
                        v36 = v47;
                      v41 = v48;
                      break;
                    case '%':
                    case 'm':
                      if ((v43 & 1) != 0)
                        goto LABEL_284;
                      goto LABEL_55;
                    case '\'':
                    case '+':
                    case '-':
                    case 'h':
                      goto LABEL_62;
                    case '*':
                      v42 = 0;
                      v43 = 1;
                      if ((v45 & 1) != 0)
                        goto LABEL_284;
                      continue;
                    case '.':
                      continue;
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                      v42 = (v46 + 10 * v47 - 48);
                      continue;
                    case 'E':
                    case 'G':
                    case 'e':
                    case 'f':
                    case 'g':
                      if (!(_DWORD)v41 || (*(_DWORD *)&__s[4 * (int)v41] | 4) != 4)
                        goto LABEL_284;
                      *(_DWORD *)&__s[4 * (int)v41] = 4;
                      if (v36 <= (int)v41)
                        v36 = v41;
                      if ((v43 & 1) != 0)
                        goto LABEL_284;
                      goto LABEL_55;
                    case 'X':
                    case 'd':
                    case 'i':
                    case 'o':
                    case 'u':
                    case 'x':
                      if (!(_DWORD)v41)
                        goto LABEL_284;
                      v49 = v40 ? 2 : 1;
                      v50 = v39 ? 3 : v49;
                      v51 = *(_DWORD *)&__s[4 * (int)v41];
                      if (v51)
                      {
                        if (v51 != v50)
                          goto LABEL_284;
                      }
                      *(_DWORD *)&__s[4 * (int)v41] = v50;
                      if (v36 <= (int)v41)
                        v36 = v41;
                      if ((v43 & 1) != 0)
                        goto LABEL_284;
                      goto LABEL_55;
                    case 'c':
                      if (!(_DWORD)v41 || *(_DWORD *)&__s[4 * (int)v41] > 1u)
                        goto LABEL_284;
                      *(_DWORD *)&__s[4 * (int)v41] = 1;
                      if (v36 <= (int)v41)
                        v36 = v41;
                      if ((v43 & 1) != 0)
                        goto LABEL_284;
                      goto LABEL_55;
                    case 'l':
                      if (v40)
                        v39 = 1;
                      goto LABEL_61;
                    case 'p':
                    case 's':
                      if (!(_DWORD)v41)
                        goto LABEL_284;
                      v52 = *(_DWORD *)&__s[4 * (int)v41];
                      if (v52 != 5 && v52 != 0)
                        goto LABEL_284;
                      *(_DWORD *)&__s[4 * (int)v41] = 5;
                      if (v36 <= (int)v41)
                        v36 = v41;
                      if ((v43 & 1) != 0)
                        goto LABEL_284;
                      goto LABEL_55;
                    case 'z':
LABEL_61:
                      v40 = 1;
LABEL_62:
                      v42 = v47;
                      continue;
                    default:
                      goto LABEL_284;
                  }
                }
              }
              v21 = v120;
              v24 = v121;
              v19 = v118;
              v25 = v119;
              v26 = v116;
              v22 = v117;
              v60 = v115;
              v28 = v38;
              if (v36 >= 1)
              {
                v61 = 1;
                do
                {
                  v63 = v61;
                  switch(*(_DWORD *)&__s[4 * v61])
                  {
                    case 0:
                      goto LABEL_284;
                    case 1:
                      v64 = *(int **)v135;
                      *(_QWORD *)v135 += 8;
                      v126[2 * v63 + 1] = *v64;
                      goto LABEL_128;
                    case 2:
                    case 3:
                    case 5:
                      v62 = *(int **)v135;
                      *(_QWORD *)v135 += 8;
                      *(_QWORD *)&v126[2 * v63 + 1] = *(_QWORD *)v62;
                      goto LABEL_128;
                    case 4:
                      v65 = *(int **)v135;
                      *(_QWORD *)v135 += 8;
                      *(_QWORD *)&v126[2 * v63 + 1] = *(_QWORD *)v65;
LABEL_128:
                      v21 = v120;
                      v24 = v121;
                      v19 = v118;
                      v25 = v119;
                      v26 = v116;
                      v22 = v117;
                      v60 = v115;
                      break;
                    default:
                      break;
                  }
                  v61 = v63 + 1;
                }
                while ((int)v63 + 1 <= v36);
              }
              v18 = v112;
              if ((v60 & 1) == 0)
              {
LABEL_134:
                result = 0;
                v6 = 1;
                v123 = v27;
                v29 = v23;
                v27 = 0;
                goto LABEL_26;
              }
            }
            v31 = v126[2 * v27 + 1];
            if (v31 >= 0)
              v32 = v126[2 * v27 + 1];
            else
              v32 = -v31;
            if (v31 < 0)
              v33 = 1;
            else
              v33 = v23;
            v34 = v31 & ~(v31 >> 31);
            v35 = v31 >= 0;
            if (v24)
              v19 = v34;
            else
              v22 = v32;
            if (v24)
              v29 = v23;
            else
              v29 = v33;
            if (!v24)
              v35 = 0;
            v27 = 0;
            result = 0;
            v6 = 1;
            v24 = v35;
LABEL_26:
            LOBYTE(v12) = *a2;
            v23 = v29;
            continue;
          case '%':
            v83 = *(_QWORD *)(a1 + 16);
            v84 = *(_BYTE **)a1;
            if (v83)
              v85 = (unint64_t)v84 >= v83;
            else
              v85 = 0;
            v8 = v18;
            if (!v85)
              goto LABEL_204;
            v86 = *(FILE **)(a1 + 24);
            if (v86)
            {
              if (!*(_BYTE *)(a1 + 36))
              {
                result = *(_QWORD *)(a1 + 8);
                v87 = &v84[-result];
                if (v84 != (_BYTE *)result)
                {
                  result = fwrite((const void *)result, 1uLL, (size_t)&v84[-result], v86);
                  *(_DWORD *)(a1 + 32) += result;
                  if ((_BYTE *)result != v87)
                    *(_BYTE *)(a1 + 36) = 1;
                }
              }
              v84 = *(_BYTE **)(a1 + 8);
LABEL_204:
              *(_QWORD *)a1 = v84 + 1;
              *v84 = 37;
            }
            else
            {
              ++*(_DWORD *)(a1 + 32);
            }
            goto LABEL_18;
          case '\'':
          case 'h':
            goto LABEL_25;
          case '*':
            if ((v6 & 1) != 0)
            {
              v27 = 0;
              result = 1;
              v29 = v23;
              v28 = 1;
              v6 = 1;
            }
            else
            {
              v54 = (int *)a3++;
              v55 = *v54;
              if (v55 >= 0)
                v56 = v55;
              else
                v56 = -v55;
              if (v55 < 0)
                v57 = 1;
              else
                v57 = v23;
              v58 = v55 & ~(v55 >> 31);
              v59 = v55 >= 0;
              if (v24)
                v19 = v58;
              else
                v22 = v56;
              if (v24)
                v29 = v23;
              else
                v29 = v57;
              if (!v24)
                v59 = 0;
              v27 = 0;
              v28 = 1;
              v6 = 0;
              v24 = v59;
            }
            goto LABEL_26;
          case '+':
            v21 = 1;
            goto LABEL_25;
          case '-':
            goto LABEL_26;
          case '.':
            if ((v28 & 1) == 0)
              v22 = v27;
            v24 = 1;
            v29 = v23;
            v27 = 0;
            v28 = 0;
            goto LABEL_26;
          case '0':
            if (v27 | v24)
              v20 = v20;
            else
              v20 = 48;
            goto LABEL_24;
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
LABEL_24:
            v27 = (char)v12 + 10 * v27 - 48;
            goto LABEL_25;
          case 'E':
          case 'G':
          case 'e':
          case 'f':
          case 'g':
            v113 = v18;
            if (v24)
              v66 = v22;
            else
              v66 = v27;
            if (v28 & 1 | (v24 == 0))
              v67 = v19;
            else
              v67 = v27;
            if ((v28 & 1) != 0)
              v68 = v22;
            else
              v68 = v66;
            if ((v6 & 1) != 0)
            {
              v69 = *(double *)&v126[2 * v123 + 1];
            }
            else
            {
              v74 = (double *)a3++;
              v69 = *v74;
            }
            v75 = v67 & ~(v67 >> 31);
            if (v75 >= 0x15E)
              v76 = 350;
            else
              v76 = v75;
            if (v69 >= 0.0 && (v69 == 0.0 ? (v77 = *(_QWORD *)&v69 == 0) : (v77 = 1), v77))
            {
              if (v21)
                v78 = 43;
              else
                v78 = 0;
            }
            else
            {
              v69 = -v69;
              v78 = 45;
            }
            if (fabs(v69) == INFINITY)
            {
              v79 = 0;
              strcpy(__s, "Infinity");
              v80 = 8;
            }
            else
            {
              v122 = v78;
              v124 = v68;
              if (v24)
              {
                v79 = v75 - v76;
                qmemcpy(v135, "%.*", 3);
                v135[3] = v12;
                v135[4] = 0;
                result = sprintf(__s, v135, v76, *(_QWORD *)&v69);
                v80 = result;
              }
              else
              {
                v135[0] = 37;
                v135[1] = v12;
                v135[2] = 0;
                result = sprintf(__s, v135, *(_QWORD *)&v69);
                v80 = result;
                v79 = 0;
              }
              v78 = v122;
              v68 = v124;
              if (v80 < 0)
              {
                *(_BYTE *)(a1 + 36) = 1;
                v8 = v113;
                goto LABEL_18;
              }
            }
            v96 = (v68 - (v80 + v79)) & ~((v68 - (v80 + v79)) >> 31);
            if ((_DWORD)v23)
              v96 = -v96;
            v126[0] = v96;
            leading_pad(v20, v78, v126, a1);
            if (v79 < 1)
            {
              result = dostr((size_t)__s, v80, a1);
              v8 = v113;
              v98 = v126[0];
              if ((v126[0] & 0x80000000) == 0)
                goto LABEL_18;
              goto LABEL_241;
            }
            v97 = strrchr(__s, 101);
            if (v97 || (v97 = strrchr(__s, 69)) != 0)
            {
              dostr((size_t)__s, (_DWORD)v97 - __s, a1);
              dopr_outchmulti(0x30uLL, v79, a1);
              result = dostr((size_t)v97, v80 - (v97 - __s), a1);
              v8 = v113;
              v98 = v126[0];
              if ((v126[0] & 0x80000000) == 0)
                goto LABEL_18;
LABEL_241:
              v99 = -v98;
              goto LABEL_242;
            }
            dostr((size_t)__s, v80, a1);
            result = dopr_outchmulti(0x30uLL, v79, a1);
            v8 = v113;
            v98 = v126[0];
            if (v126[0] < 0)
              goto LABEL_241;
            break;
          case 'X':
          case 'o':
          case 'u':
          case 'x':
            if (v24)
              v70 = v22;
            else
              v70 = v27;
            if (v28 & 1 | (v24 == 0))
              v71 = v19;
            else
              v71 = v27;
            if ((v28 & 1) != 0)
              v72 = v22;
            else
              v72 = v70;
            if ((v6 & 1) != 0)
            {
              v8 = v18;
              if (v26)
                goto LABEL_188;
              v73 = (size_t *)&v126[2 * v123 + 1];
              if (!v25)
                goto LABEL_192;
              goto LABEL_229;
            }
            v8 = v18;
            if (!v26 && !v25)
            {
              v73 = a3++;
LABEL_192:
              v82 = *(unsigned int *)v73;
              goto LABEL_230;
            }
            goto LABEL_228;
          case 'c':
            v88 = v18;
            if (v24)
              v89 = v22;
            else
              v89 = v27;
            if ((v28 & 1) != 0)
              v89 = v22;
            if ((v6 & 1) != 0)
            {
              v90 = v126[2 * v123 + 1];
            }
            else
            {
              v100 = (int *)a3++;
              v90 = *v100;
            }
            v101 = (v89 - 1) & ~((v89 - 1) >> 31);
            if ((_DWORD)v23)
              v102 = -v101;
            else
              v102 = v101;
            if (v102 >= 1)
            {
              result = dopr_outchmulti(0x20uLL, v102, a1);
              v102 = 0;
            }
            v103 = *(_QWORD *)(a1 + 16);
            v104 = *(_BYTE **)a1;
            if (!v103 || (unint64_t)v104 < v103)
              goto LABEL_258;
            v105 = *(FILE **)(a1 + 24);
            if (v105)
            {
              if (!*(_BYTE *)(a1 + 36))
              {
                result = *(_QWORD *)(a1 + 8);
                v106 = &v104[-result];
                if (v104 != (_BYTE *)result)
                {
                  result = fwrite((const void *)result, 1uLL, (size_t)&v104[-result], v105);
                  *(_DWORD *)(a1 + 32) += result;
                  if ((_BYTE *)result != v106)
                    *(_BYTE *)(a1 + 36) = 1;
                }
              }
              v104 = *(_BYTE **)(a1 + 8);
LABEL_258:
              *(_QWORD *)a1 = v104 + 1;
              *v104 = v90;
              v8 = v88;
              if (v102 < 0)
              {
LABEL_259:
                v99 = -v102;
                goto LABEL_242;
              }
            }
            else
            {
              ++*(_DWORD *)(a1 + 32);
              v8 = v88;
              if (v102 < 0)
                goto LABEL_259;
            }
            goto LABEL_18;
          case 'd':
          case 'i':
            if (v24)
              v81 = v22;
            else
              v81 = v27;
            if (v28 & 1 | (v24 == 0))
              v71 = v19;
            else
              v71 = v27;
            if ((v28 & 1) != 0)
              v72 = v22;
            else
              v72 = v81;
            if ((v6 & 1) != 0)
            {
              v8 = v18;
              if (v26)
              {
LABEL_188:
                v82 = *(_QWORD *)&v126[2 * v123 + 1];
                goto LABEL_230;
              }
              v73 = (size_t *)&v126[2 * v123 + 1];
              if (!v25)
                goto LABEL_283;
            }
            else
            {
              v8 = v18;
              if (!v26 && !v25)
              {
                v73 = a3++;
LABEL_283:
                v82 = *(int *)v73;
                goto LABEL_230;
              }
LABEL_228:
              v73 = a3++;
            }
LABEL_229:
            v82 = *v73;
LABEL_230:
            result = fmtint(v82, v30, v21, v23, v72, v20, v71, v24, a1);
            goto LABEL_18;
          case 'l':
            if (v25)
              v26 = 1;
            goto LABEL_53;
          case 'm':
            v8 = v18;
            v15 = pg_strerror_r(v18, __s, 0x100uLL);
            v14 = (char *)v15;
            goto LABEL_16;
          case 'p':
            if ((v6 & 1) != 0)
            {
              v91 = *(const void **)&v126[2 * v123 + 1];
            }
            else
            {
              v107 = (const void **)a3++;
              v91 = *v107;
            }
            v8 = v18;
            result = sprintf(__s, "%p", v91);
            if ((result & 0x80000000) == 0)
            {
              v16 = result;
              v17 = __s;
              goto LABEL_17;
            }
            *(_BYTE *)(a1 + 36) = 1;
            goto LABEL_18;
          case 's':
            v114 = v18;
            if (v24)
              v92 = v22;
            else
              v92 = v27;
            if (v28 & 1 | (v24 == 0))
              v93 = v19;
            else
              v93 = v27;
            if ((v28 & 1) != 0)
              v94 = v22;
            else
              v94 = v92;
            if ((v6 & 1) != 0)
            {
              v95 = *(const char **)&v126[2 * v123 + 1];
            }
            else
            {
              v108 = (const char **)a3++;
              v95 = *v108;
            }
            if (v24)
              v109 = strnlen(v95, v93);
            else
              v109 = strlen(v95);
            v110 = v109;
            if ((_DWORD)v23)
              v111 = -((v94 - v109) & ~((v94 - v109) >> 31));
            else
              v111 = (v94 - v109) & ~((v94 - v109) >> 31);
            if (v111 < 1)
            {
              result = dostr((size_t)v95, v109, a1);
              v8 = v114;
              if (v111 < 0)
              {
                v99 = -v111;
LABEL_242:
                result = dopr_outchmulti(0x20uLL, v99, a1);
              }
            }
            else
            {
              dopr_outchmulti(0x20uLL, v111, a1);
              result = dostr((size_t)v95, v110, a1);
              v8 = v114;
            }
            goto LABEL_18;
          case 'z':
LABEL_53:
            v25 = 1;
LABEL_25:
            v29 = v23;
            goto LABEL_26;
          default:
LABEL_284:
            result = (size_t)__error();
            *(_DWORD *)result = 22;
            *(_BYTE *)(a1 + 36) = 1;
            return result;
        }
        break;
      }
    }
LABEL_18:
    ;
  }
  while (!*(_BYTE *)(a1 + 36));
  return result;
}

uint64_t pg_snprintf(char *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  char *v10;
  int v11;
  unsigned int v12;
  char v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = 0;
  v19 = 0;
  if (a2 <= 1)
    v9 = 1;
  else
    v9 = a2;
  v10 = &v14;
  if (a2)
    v10 = a1;
  v15 = v10;
  v16 = v10;
  v17 = (uint64_t)&v10[v9 - 1];
  dopr(&v15, a3, &a9);
  v11 = (int)v15;
  *v15 = 0;
  v12 = v19 + v11 - (_DWORD)v16;
  if (BYTE4(v19))
    return 0xFFFFFFFFLL;
  else
    return v12;
}

uint64_t pg_vsprintf(_BYTE *a1, char *a2, size_t *a3)
{
  int v3;
  unsigned int v4;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  __int128 v9;

  v6 = a1;
  v7 = a1;
  *(_QWORD *)&v9 = 0;
  HIDWORD(v9) = 0;
  v8 = 0;
  *(_QWORD *)((char *)&v9 + 5) = 0;
  dopr((uint64_t)&v6, a2, a3);
  v3 = (int)v6;
  *v6 = 0;
  v4 = DWORD2(v9) + v3 - (_DWORD)v7;
  if (BYTE12(v9))
    return 0xFFFFFFFFLL;
  else
    return v4;
}

uint64_t pg_sprintf(_BYTE *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  int v9;
  unsigned int v10;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  __int128 v15;

  v12 = a1;
  v13 = a1;
  v14 = 0;
  *(_QWORD *)&v15 = 0;
  HIDWORD(v15) = 0;
  *(_QWORD *)((char *)&v15 + 5) = 0;
  dopr((uint64_t)&v12, a2, &a9);
  v9 = (int)v12;
  *v12 = 0;
  v10 = DWORD2(v15) + v9 - (_DWORD)v13;
  if (BYTE12(v15))
    return 0xFFFFFFFFLL;
  else
    return v10;
}

uint64_t pg_vfprintf(FILE *a1, char *a2, size_t *a3)
{
  uint64_t v3;
  size_t v4;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t *v8;
  FILE *__stream;
  uint64_t v10;
  _BYTE v11[1024];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    __stream = a1;
    v10 = 0;
    v6 = v11;
    v7 = v11;
    v8 = &v12;
    dopr((uint64_t)&v6, a2, a3);
    if (BYTE4(v10) || (v3 = v6 - v7, v6 == v7))
    {
      if (BYTE4(v10))
        return 0xFFFFFFFFLL;
      else
        return v10;
    }
    else
    {
      v4 = fwrite(v7, 1uLL, v6 - v7, __stream);
      if (v4 == v3)
        return (v10 + v4);
      else
        return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
}

uint64_t pg_fprintf(FILE *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  uint64_t v9;
  size_t v10;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t *v14;
  FILE *__stream;
  uint64_t v16;
  _BYTE v17[1024];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    __stream = a1;
    v16 = 0;
    v12 = v17;
    v13 = v17;
    v14 = &v18;
    dopr((uint64_t)&v12, a2, &a9);
    if (BYTE4(v16) || (v9 = v12 - v13, v12 == v13))
    {
      if (BYTE4(v16))
        return 0xFFFFFFFFLL;
      else
        return v16;
    }
    else
    {
      v10 = fwrite(v13, 1uLL, v12 - v13, __stream);
      if (v10 == v9)
        return (v16 + v10);
      else
        return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
}

uint64_t pg_printf(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  uint64_t v9;
  size_t v10;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t *v14;
  FILE *__stream;
  uint64_t v16;
  _BYTE v17[1024];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C80C20])
  {
    __stream = (FILE *)*MEMORY[0x1E0C80C20];
    v16 = 0;
    v12 = v17;
    v13 = v17;
    v14 = &v18;
    dopr((uint64_t)&v12, a1, &a9);
    if (BYTE4(v16) || (v9 = v12 - v13, v12 == v13))
    {
      if (BYTE4(v16))
        return 0xFFFFFFFFLL;
      else
        return v16;
    }
    else
    {
      v10 = fwrite(v13, 1uLL, v12 - v13, __stream);
      if (v10 == v9)
        return (v16 + v10);
      else
        return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
}

size_t dostr(size_t __src, int a2, uint64_t a3)
{
  char *v4;
  char v5;
  unint64_t v6;
  _BYTE *v7;
  BOOL v8;
  FILE *v9;
  _BYTE *v10;
  int v11;
  size_t v12;
  uint64_t v13;
  int v14;
  FILE *v15;
  uint64_t v16;
  size_t v17;
  size_t v18;

  v4 = (char *)__src;
  if (a2 == 1)
  {
    v5 = *(_BYTE *)__src;
    v6 = *(_QWORD *)(a3 + 16);
    v7 = *(_BYTE **)a3;
    if (v6)
      v8 = (unint64_t)v7 >= v6;
    else
      v8 = 0;
    if (v8)
    {
      v9 = *(FILE **)(a3 + 24);
      if (!v9)
      {
        ++*(_DWORD *)(a3 + 32);
        return __src;
      }
      if (!*(_BYTE *)(a3 + 36))
      {
        __src = *(_QWORD *)(a3 + 8);
        v10 = &v7[-__src];
        if (v7 != (_BYTE *)__src)
        {
          __src = fwrite((const void *)__src, 1uLL, (size_t)&v7[-__src], v9);
          *(_DWORD *)(a3 + 32) += __src;
          if ((_BYTE *)__src != v10)
            *(_BYTE *)(a3 + 36) = 1;
        }
      }
      v7 = *(_BYTE **)(a3 + 8);
    }
    *(_QWORD *)a3 = v7 + 1;
    *v7 = v5;
  }
  else if (a2 >= 1)
  {
    v11 = a2;
    for (__src = *(_QWORD *)a3; ; *(_QWORD *)a3 = __src)
    {
      while (1)
      {
        v13 = *(_QWORD *)(a3 + 16);
        v14 = v11;
        if (v13)
        {
          v14 = v13 - __src;
          if ((int)v13 - (int)__src <= 0)
            break;
        }
        if (v14 >= v11)
          v12 = v11;
        else
          v12 = v14;
        memmove((void *)__src, v4, v12);
        __src = *(_QWORD *)a3 + v12;
        *(_QWORD *)a3 = __src;
        v4 += v12;
        v11 -= v12;
        if (v11 <= 0)
          return __src;
      }
      v15 = *(FILE **)(a3 + 24);
      if (!v15)
        break;
      if (!*(_BYTE *)(a3 + 36))
      {
        v16 = *(_QWORD *)(a3 + 8);
        v17 = __src - v16;
        if (__src != v16)
        {
          v18 = fwrite(*(const void **)(a3 + 8), 1uLL, v17, v15);
          *(_DWORD *)(a3 + 32) += v18;
          if (v18 != v17)
            *(_BYTE *)(a3 + 36) = 1;
        }
      }
      __src = *(_QWORD *)(a3 + 8);
    }
    *(_DWORD *)(a3 + 32) += v11;
  }
  return __src;
}

size_t fmtint(size_t result, int a2, int a3, int a4, int a5, size_t __c, int a7, int a8, uint64_t a9)
{
  int v9;
  int v10;
  const char *v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  _BYTE v18[64];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v9 = a2 - 88;
  v10 = 0;
  v11 = "0123456789abcdef";
  v12 = 8;
  switch(v9)
  {
    case 0:
      v10 = 0;
      v11 = "0123456789ABCDEF";
      v12 = 16;
      if (!a7)
        goto LABEL_12;
      goto LABEL_18;
    case 12:
    case 17:
      if ((result & 0x8000000000000000) != 0)
      {
        result = -(uint64_t)result;
        v10 = 45;
        v12 = 10;
      }
      else
      {
        if (a3)
          v10 = 43;
        else
          v10 = 0;
        v11 = "0123456789abcdef";
LABEL_10:
        v12 = 10;
LABEL_11:
        if (!a7)
        {
LABEL_12:
          if (!result && a8)
          {
            v13 = 0;
            goto LABEL_21;
          }
        }
      }
LABEL_18:
      v13 = 0;
      do
      {
        v18[-++v13 + 64] = v11[result % v12];
        v14 = v12 > result;
        result /= v12;
      }
      while (!v14);
LABEL_21:
      v15 = a7 - v13;
      v16 = (a5 - v13 - (v15 & ~(v15 >> 31))) & ~((a5 - v13 - (v15 & ~(v15 >> 31))) >> 31);
      if (a4)
        v16 = -v16;
      v17 = v16;
      leading_pad(__c, v10, &v17, a9);
      if (v15 >= 1)
        dopr_outchmulti(0x30uLL, v15 & ~(v15 >> 31), a9);
      result = dostr((size_t)&v18[-v13 + 64], v13, a9);
      if (v17 < 0)
        return dopr_outchmulti(0x20uLL, -v17, a9);
      return result;
    case 23:
      goto LABEL_11;
    case 29:
      v10 = 0;
      goto LABEL_10;
    case 32:
      v10 = 0;
      v12 = 16;
      if (a7)
        goto LABEL_18;
      goto LABEL_12;
    default:
      return result;
  }
}

size_t leading_pad(size_t __c, int a2, int *a3, uint64_t a4)
{
  int v7;
  size_t v8;
  unint64_t v9;
  _BYTE *v10;
  FILE *v11;
  _BYTE *v12;
  _BOOL4 v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  _BYTE *v17;
  FILE *v18;
  _BYTE *v19;
  int v20;
  int v21;

  v7 = *a3;
  if ((_DWORD)__c && v7 >= 1)
  {
    v8 = __c;
    if (!a2)
    {
LABEL_13:
      __c = dopr_outchmulti(v8, v7, a4);
      *a3 = 0;
      return __c;
    }
    v9 = *(_QWORD *)(a4 + 16);
    v10 = *(_BYTE **)a4;
    if (v9 && (unint64_t)v10 >= v9)
    {
      v11 = *(FILE **)(a4 + 24);
      if (!v11)
      {
        ++*(_DWORD *)(a4 + 32);
        v7 = *a3 - 1;
        *a3 = v7;
        if (v7 >= 1)
          goto LABEL_13;
LABEL_15:
        a2 = 0;
        goto LABEL_16;
      }
      if (!*(_BYTE *)(a4 + 36))
      {
        __c = *(_QWORD *)(a4 + 8);
        v12 = &v10[-__c];
        if (v10 != (_BYTE *)__c)
        {
          __c = fwrite((const void *)__c, 1uLL, (size_t)&v10[-__c], v11);
          *(_DWORD *)(a4 + 32) += __c;
          if ((_BYTE *)__c != v12)
            *(_BYTE *)(a4 + 36) = 1;
        }
      }
      v10 = *(_BYTE **)(a4 + 8);
    }
    *(_QWORD *)a4 = v10 + 1;
    *v10 = a2;
    v7 = *a3 - 1;
    *a3 = v7;
    if (v7 >= 1)
      goto LABEL_13;
    goto LABEL_15;
  }
LABEL_16:
  v13 = a2 != 0;
  v14 = __OFSUB__(v7, v13);
  v15 = v7 - v13;
  if (!((v15 < 0) ^ v14 | (v15 == 0)))
  {
    __c = dopr_outchmulti(0x20uLL, v15, a4);
    *a3 = v13;
  }
  if (a2)
  {
    v16 = *(_QWORD *)(a4 + 16);
    v17 = *(_BYTE **)a4;
    if (v16 && (unint64_t)v17 >= v16)
    {
      v18 = *(FILE **)(a4 + 24);
      if (!v18)
      {
        ++*(_DWORD *)(a4 + 32);
        v20 = *a3;
        v21 = *a3 - 1;
        if (*a3 < 1)
        {
LABEL_28:
          if (v20 < 0)
            *a3 = v20 + 1;
          return __c;
        }
LABEL_31:
        *a3 = v21;
        return __c;
      }
      if (!*(_BYTE *)(a4 + 36))
      {
        __c = *(_QWORD *)(a4 + 8);
        v19 = &v17[-__c];
        if (v17 != (_BYTE *)__c)
        {
          __c = fwrite((const void *)__c, 1uLL, (size_t)&v17[-__c], v18);
          *(_DWORD *)(a4 + 32) += __c;
          if ((_BYTE *)__c != v19)
            *(_BYTE *)(a4 + 36) = 1;
        }
      }
      v17 = *(_BYTE **)(a4 + 8);
    }
    *(_QWORD *)a4 = v17 + 1;
    *v17 = a2;
    v20 = *a3;
    v21 = *a3 - 1;
    if (*a3 < 1)
      goto LABEL_28;
    goto LABEL_31;
  }
  return __c;
}

size_t dopr_outchmulti(size_t __c, int a2, uint64_t a3)
{
  int v4;
  unint64_t v5;
  _BYTE *v6;
  BOOL v7;
  FILE *v8;
  _BYTE *v9;
  int v10;
  size_t v11;
  uint64_t v12;
  int v13;
  FILE *v14;
  uint64_t v15;
  size_t v16;
  size_t v17;

  v4 = __c;
  if (a2 == 1)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_BYTE **)a3;
    if (v5)
      v7 = (unint64_t)v6 >= v5;
    else
      v7 = 0;
    if (v7)
    {
      v8 = *(FILE **)(a3 + 24);
      if (!v8)
      {
        ++*(_DWORD *)(a3 + 32);
        return __c;
      }
      if (!*(_BYTE *)(a3 + 36))
      {
        __c = *(_QWORD *)(a3 + 8);
        v9 = &v6[-__c];
        if (v6 != (_BYTE *)__c)
        {
          __c = fwrite((const void *)__c, 1uLL, (size_t)&v6[-__c], v8);
          *(_DWORD *)(a3 + 32) += __c;
          if ((_BYTE *)__c != v9)
            *(_BYTE *)(a3 + 36) = 1;
        }
      }
      v6 = *(_BYTE **)(a3 + 8);
    }
    *(_QWORD *)a3 = v6 + 1;
    *v6 = v4;
  }
  else if (a2 >= 1)
  {
    v10 = a2;
    for (__c = *(_QWORD *)a3; ; *(_QWORD *)a3 = __c)
    {
      while (1)
      {
        v12 = *(_QWORD *)(a3 + 16);
        v13 = v10;
        if (v12)
        {
          v13 = v12 - __c;
          if ((int)v12 - (int)__c <= 0)
            break;
        }
        if (v13 >= v10)
          v11 = v10;
        else
          v11 = v13;
        memset((void *)__c, v4, v11);
        __c = *(_QWORD *)a3 + v11;
        *(_QWORD *)a3 = __c;
        v10 -= v11;
        if (v10 <= 0)
          return __c;
      }
      v14 = *(FILE **)(a3 + 24);
      if (!v14)
        break;
      if (!*(_BYTE *)(a3 + 36))
      {
        v15 = *(_QWORD *)(a3 + 8);
        v16 = __c - v15;
        if (__c != v15)
        {
          v17 = fwrite(*(const void **)(a3 + 8), 1uLL, v16, v14);
          *(_DWORD *)(a3 + 32) += v17;
          if (v17 != v16)
            *(_BYTE *)(a3 + 36) = 1;
        }
      }
      __c = *(_QWORD *)(a3 + 8);
    }
    *(_DWORD *)(a3 + 32) += v10;
  }
  return __c;
}

const char *pg_strerror_r(uint64_t a1, char *a2, size_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *result;

  v6 = strerror_r(a1, a2, a3);
  if (a2 && !v6)
  {
    v12 = *a2;
    if (v12 != 63 && v12 != 0)
      return a2;
  }
  result = "E2BIG";
  switch((int)a1)
  {
    case 1:
      result = "EPERM";
      break;
    case 2:
      result = "ENOENT";
      break;
    case 3:
      result = "ESRCH";
      break;
    case 4:
      result = "EINTR";
      break;
    case 5:
      result = "EIO";
      break;
    case 6:
      result = "ENXIO";
      break;
    case 7:
      return result;
    case 8:
      result = "ENOEXEC";
      break;
    case 9:
      result = "EBADF";
      break;
    case 10:
      result = "ECHILD";
      break;
    case 11:
      result = "EDEADLK";
      break;
    case 12:
      result = "ENOMEM";
      break;
    case 13:
      result = "EACCES";
      break;
    case 14:
      result = "EFAULT";
      break;
    case 16:
      result = "EBUSY";
      break;
    case 17:
      result = "EEXIST";
      break;
    case 18:
      result = "EXDEV";
      break;
    case 19:
      result = "ENODEV";
      break;
    case 20:
      result = "ENOTDIR";
      break;
    case 21:
      result = "EISDIR";
      break;
    case 22:
      result = "EINVAL";
      break;
    case 23:
      result = "ENFILE";
      break;
    case 24:
      result = "EMFILE";
      break;
    case 25:
      result = "ENOTTY";
      break;
    case 26:
      result = "ETXTBSY";
      break;
    case 27:
      result = "EFBIG";
      break;
    case 28:
      result = "ENOSPC";
      break;
    case 30:
      result = "EROFS";
      break;
    case 31:
      result = "EMLINK";
      break;
    case 32:
      result = "EPIPE";
      break;
    case 33:
      result = "EDOM";
      break;
    case 34:
      result = "ERANGE";
      break;
    case 35:
      result = "EAGAIN";
      break;
    case 36:
      result = "EINPROGRESS";
      break;
    case 37:
      result = "EALREADY";
      break;
    case 38:
      result = "ENOTSOCK";
      break;
    case 40:
      result = "EMSGSIZE";
      break;
    case 43:
      result = "EPROTONOSUPPORT";
      break;
    case 45:
      result = "ENOTSUP";
      break;
    case 47:
      result = "EAFNOSUPPORT";
      break;
    case 48:
      result = "EADDRINUSE";
      break;
    case 49:
      result = "EADDRNOTAVAIL";
      break;
    case 53:
      result = "ECONNABORTED";
      break;
    case 54:
      result = "ECONNRESET";
      break;
    case 55:
      result = "ENOBUFS";
      break;
    case 56:
      result = "EISCONN";
      break;
    case 57:
      result = "ENOTCONN";
      break;
    case 60:
      result = "ETIMEDOUT";
      break;
    case 61:
      result = "ECONNREFUSED";
      break;
    case 62:
      result = "ELOOP";
      break;
    case 63:
      result = "ENAMETOOLONG";
      break;
    case 65:
      result = "EHOSTUNREACH";
      break;
    case 66:
      result = "ENOTEMPTY";
      break;
    case 78:
      result = "ENOSYS";
      break;
    case 84:
      result = "EOVERFLOW";
      break;
    case 90:
      result = "EIDRM";
      break;
    case 94:
      result = "EBADMSG";
      break;
    case 102:
      result = "EOPNOTSUPP";
      break;
    default:
      pg_snprintf(a2, a3, (uint64_t)"operating system error %d", v7, v8, v9, v10, v11, a1);
      return a2;
  }
  return result;
}

size_t strnlen(const char *__s1, size_t __n)
{
  const char *v2;
  const char *v3;

  v2 = __s1;
  if (__n)
  {
    v3 = &__s1[__n];
    v2 = __s1;
    while (*v2)
    {
      ++v2;
      if (!--__n)
      {
        v2 = v3;
        return v2 - __s1;
      }
    }
  }
  return v2 - __s1;
}

const char *protobuf_c_version()
{
  return "1.4.0";
}

uint64_t protobuf_c_version_number()
{
  return 1004000;
}

char *protobuf_c_buffer_simple_append(uint64_t a1, size_t __n, void *__src)
{
  uint64_t v6;
  size_t v7;
  size_t v8;
  uint64_t (**v9)(int, size_t);
  char *result;
  char *v11;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = v6 + __n;
  if (v6 + __n <= v7)
  {
    v11 = *(char **)(a1 + 24);
LABEL_13:
    result = (char *)memcpy(&v11[v6], __src, __n);
    *(_QWORD *)(a1 + 16) = v8;
    return result;
  }
  do
    v7 *= 2;
  while (v7 < v8);
  if (*(_QWORD *)(a1 + 40))
    v9 = *(uint64_t (***)(int, size_t))(a1 + 40);
  else
    v9 = &protobuf_c__allocator;
  result = (char *)(*v9)((int)v9[2], v7);
  if (result)
  {
    v11 = result;
    memcpy(result, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 16));
    if (*(_DWORD *)(a1 + 32))
    {
      if (*(_QWORD *)(a1 + 24))
        ((void (*)(uint64_t (*)(int, size_t)))v9[1])(v9[2]);
    }
    else
    {
      *(_DWORD *)(a1 + 32) = 1;
    }
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 8) = v7;
    v6 = *(_QWORD *)(a1 + 16);
    goto LABEL_13;
  }
  return result;
}

uint64_t protobuf_c_message_get_packed_size(uint64_t a1)
{
  _DWORD *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  int v12;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v55;
  unsigned int v56;
  uint64_t packed_size;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v1 = *(_DWORD **)a1;
  if (**(_DWORD **)a1 != 682290937)
    protobuf_c_message_get_packed_size_cold_1();
  if (v1[12])
  {
    v3 = 0;
    v4 = 0;
    while (1)
    {
      v6 = *((_QWORD *)v1 + 7);
      v7 = (_DWORD *)(v6 + 72 * v3);
      v8 = v7[5];
      v9 = (unsigned int *)(a1 + v7[6]);
      v10 = v7[3];
      if (v10 != 3 && v10 != 1)
      {
        if (v10)
          goto LABEL_22;
        goto LABEL_5;
      }
      if ((*(_BYTE *)(v6 + 72 * v3 + 48) & 4) != 0)
      {
        if (*(_DWORD *)(v6 + 72 * v3 + 8) != *(_DWORD *)(a1 + v8))
          goto LABEL_49;
        v25 = *(_DWORD *)(v6 + 72 * v3 + 16);
        if (v25 != 16 && v25 != 14)
          goto LABEL_5;
      }
      else
      {
        if (v10 == 3)
        {
          switch(v7[4])
          {
            case 0:
            case 1:
            case 2:
            case 6:
            case 7:
            case 0xC:
            case 0xD:
              if (!*v9)
                goto LABEL_49;
              goto LABEL_5;
            case 3:
            case 4:
            case 5:
            case 8:
            case 9:
            case 0xF:
            case 0x10:
              if (*(_QWORD *)v9)
                goto LABEL_5;
              goto LABEL_49;
            case 0xA:
              if (*(float *)v9 != 0.0)
                goto LABEL_5;
              goto LABEL_49;
            case 0xB:
              if (*(double *)v9 != 0.0)
                goto LABEL_5;
              goto LABEL_49;
            case 0xE:
              if (!*(_QWORD *)v9 || !**(_BYTE **)v9)
                goto LABEL_49;
              goto LABEL_5;
            default:
              goto LABEL_49;
          }
        }
        if (v10 != 1)
        {
LABEL_22:
          v14 = *(_QWORD *)(a1 + v8);
          if (v14)
          {
            v15 = *(_DWORD *)(v6 + 72 * v3 + 8);
            if (v15 >> 25)
              v16 = 5;
            else
              v16 = 4;
            if (v15 < 0x40000)
              v16 = 3;
            if (v15 < 0x800)
              v16 = 2;
            if (v15 >= 0x10)
              v17 = v16;
            else
              v17 = 1;
            v18 = v6 + 72 * v3;
            v20 = *(_DWORD *)(v18 + 48);
            v19 = (_DWORD *)(v18 + 48);
            v21 = v20 & 1;
            if ((v20 & 1) != 0)
              v22 = 1;
            else
              v22 = v14;
            v23 = *(_QWORD **)v9;
            switch(*(v19 - 8))
            {
              case 0:
              case 0xD:
                v27 = 0;
                v24 = 0;
                do
                {
                  v29 = *((_DWORD *)v23 + v27);
                  if ((v29 & 0x80000000) != 0)
                  {
                    v28 = 10;
                  }
                  else if (v29 >= 0x80)
                  {
                    if (v29 >= 0x4000)
                    {
                      if (v29 >> 28)
                        v30 = 5;
                      else
                        v30 = 4;
                      if (v29 >= 0x200000)
                        v28 = v30;
                      else
                        v28 = 3;
                    }
                    else
                    {
                      v28 = 2;
                    }
                  }
                  else
                  {
                    v28 = 1;
                  }
                  v24 += v28;
                  ++v27;
                }
                while (v14 > v27);
                break;
              case 1:
                v37 = 0;
                v24 = 0;
                do
                {
                  v39 = (2 * *((_DWORD *)v23 + v37)) ^ (*((int *)v23 + v37) >> 31);
                  if (v39 < 0x80)
                  {
                    v38 = 1;
                  }
                  else if (v39 >= 0x4000)
                  {
                    if (v39 >= 0x200000)
                    {
                      if (v39 >> 28)
                        v38 = 5;
                      else
                        v38 = 4;
                    }
                    else
                    {
                      v38 = 3;
                    }
                  }
                  else
                  {
                    v38 = 2;
                  }
                  v24 += v38;
                  ++v37;
                }
                while (v14 > v37);
                break;
              case 2:
              case 7:
              case 0xA:
                v24 = 4 * v14;
                break;
              case 3:
              case 8:
                v31 = 0;
                v24 = 0;
                do
                {
                  v33 = v23[v31];
                  if (HIDWORD(v33))
                  {
                    if (v33 >> 35)
                    {
                      if (v33 >> 42)
                      {
                        v35 = v33 >> 49;
                        v36 = HIBYTE(v33);
                        if ((v33 & 0x8000000000000000) == 0)
                          v32 = 9;
                        else
                          v32 = 10;
                        if (!v36)
                          v32 = 8;
                        if (!v35)
                          v32 = 7;
                      }
                      else
                      {
                        v32 = 6;
                      }
                    }
                    else
                    {
                      v32 = 5;
                    }
                  }
                  else if (v33 < 0x80)
                  {
                    v32 = 1;
                  }
                  else if (v33 >= 0x4000)
                  {
                    if (v33 >> 28)
                      v34 = 5;
                    else
                      v34 = 4;
                    if (v33 >= 0x200000)
                      v32 = v34;
                    else
                      v32 = 3;
                  }
                  else
                  {
                    v32 = 2;
                  }
                  v24 += v32;
                  ++v31;
                }
                while (v14 > v31);
                break;
              case 4:
                v40 = 0;
                v24 = 0;
                do
                {
                  v42 = (2 * v23[v40]) ^ ((uint64_t)v23[v40] >> 63);
                  if (HIDWORD(v42))
                  {
                    if (v42 >> 35)
                    {
                      if (v42 >> 42)
                      {
                        if (v42 >> 49)
                        {
                          if (HIBYTE(v42))
                          {
                            if ((v42 & 0x8000000000000000) == 0)
                              v41 = 9;
                            else
                              v41 = 10;
                          }
                          else
                          {
                            v41 = 8;
                          }
                        }
                        else
                        {
                          v41 = 7;
                        }
                      }
                      else
                      {
                        v41 = 6;
                      }
                    }
                    else
                    {
                      v41 = 5;
                    }
                  }
                  else if (v42 < 0x80)
                  {
                    v41 = 1;
                  }
                  else if (v42 >= 0x4000)
                  {
                    if (v42 >= 0x200000)
                    {
                      if (v42 >> 28)
                        v41 = 5;
                      else
                        v41 = 4;
                    }
                    else
                    {
                      v41 = 3;
                    }
                  }
                  else
                  {
                    v41 = 2;
                  }
                  v24 += v41;
                  ++v40;
                }
                while (v14 > v40);
                break;
              case 5:
              case 9:
              case 0xB:
                v24 = 8 * v14;
                break;
              case 6:
                v43 = 0;
                v24 = 0;
                do
                {
                  v45 = *((_DWORD *)v23 + v43);
                  if (v45 < 0x80)
                  {
                    v44 = 1;
                  }
                  else if (v45 >= 0x4000)
                  {
                    if (v45 >> 28)
                      v46 = 5;
                    else
                      v46 = 4;
                    if (v45 >= 0x200000)
                      v44 = v46;
                    else
                      v44 = 3;
                  }
                  else
                  {
                    v44 = 2;
                  }
                  v24 += v44;
                  ++v43;
                }
                while (v14 > v43);
                break;
              case 0xC:
                v24 = v14;
                break;
              case 0xE:
                v70 = v21;
                v71 = v22;
                v73 = v17;
                v47 = 0;
                v24 = 0;
                do
                {
                  v48 = strlen((const char *)v23[v47]);
                  if (v48 >> 28)
                    v49 = 5;
                  else
                    v49 = 4;
                  if (v48 < 0x200000)
                    v49 = 3;
                  if (v48 < 0x4000)
                    v49 = 2;
                  if (v48 < 0x80)
                    v49 = 1;
                  v24 += v48 + v49;
                  ++v47;
                }
                while (v14 > v47);
                v22 = v71;
                v17 = v73;
                v21 = v70;
                break;
              case 0xF:
                v24 = 0;
                v50 = 1;
                do
                {
                  v52 = *v23;
                  v23 += 2;
                  v51 = v52;
                  if (v52 >> 28)
                    v53 = 5;
                  else
                    v53 = 4;
                  if (v51 < 0x200000)
                    v53 = 3;
                  if (v51 < 0x4000)
                    v53 = 2;
                  if (v51 < 0x80)
                    v53 = 1;
                  v24 += v51 + v53;
                }
                while (v14 > v50++);
                break;
              case 0x10:
                v72 = v22;
                v74 = v17;
                v55 = 0;
                v24 = 0;
                v56 = 1;
                do
                {
                  packed_size = protobuf_c_message_get_packed_size(v23[v55]);
                  v58 = 4;
                  if (packed_size >> 28)
                    v58 = 5;
                  if (packed_size < 0x200000)
                    v58 = 3;
                  if (packed_size < 0x4000)
                    v58 = 2;
                  if (packed_size < 0x80)
                    v58 = 1;
                  v24 += packed_size + v58;
                  v55 = v56++;
                }
                while (v14 > v55);
                v21 = *v19 & 1;
                v22 = v72;
                v17 = v74;
                break;
              default:
                v24 = 0;
                break;
            }
            v59 = v22 * v17;
            if (v24 >> 28)
              v60 = 5;
            else
              v60 = 4;
            if (v24 < 0x200000)
              v60 = 3;
            if (v24 < 0x4000)
              v60 = 2;
            if (v24 < 0x80)
              v60 = 1;
            v61 = v60 + v59;
            if (v21)
              v59 = v61;
            v5 = v59 + v24;
            goto LABEL_6;
          }
LABEL_49:
          v5 = 0;
          goto LABEL_6;
        }
        v12 = *(_DWORD *)(v6 + 72 * v3 + 16);
        if (v12 != 16 && v12 != 14)
        {
          if (!*(_DWORD *)(a1 + v8))
            goto LABEL_49;
          goto LABEL_5;
        }
      }
      if (!*(_QWORD *)v9 || *(_QWORD *)v9 == *(_QWORD *)(v6 + 72 * v3 + 40))
        goto LABEL_49;
LABEL_5:
      v5 = required_field_get_packed_size((uint64_t)v7, v9);
LABEL_6:
      v4 += v5;
      ++v3;
      v1 = *(_DWORD **)a1;
      if (v3 >= *(unsigned int *)(*(_QWORD *)a1 + 48))
        goto LABEL_193;
    }
  }
  v4 = 0;
LABEL_193:
  v62 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v62)
  {
    v63 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v64 = *((_DWORD *)v63 - 2);
      v66 = *v63;
      v63 += 3;
      v65 = v66;
      if (v64 >> 25)
        v67 = 5;
      else
        v67 = 4;
      if (v64 < 0x40000)
        v67 = 3;
      if (v64 < 0x800)
        v67 = 2;
      if (v64 >= 0x10)
        v68 = v67;
      else
        v68 = 1;
      v4 += v68 + v65;
      --v62;
    }
    while (v62);
  }
  return v4;
}

uint64_t required_field_get_packed_size(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *packed_size;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = 2;
  v4 = 3;
  v5 = 4;
  if (v2 >> 25)
    v5 = 5;
  if (v2 >= 0x40000)
    v4 = v5;
  if (v2 >= 0x800)
    v3 = v4;
  if (v2 >= 0x10)
    v6 = v3;
  else
    v6 = 1;
  switch(*(_DWORD *)(a1 + 16))
  {
    case 0:
    case 0xD:
      v8 = *a2;
      if ((*a2 & 0x80000000) != 0)
        return v6 + 10;
      if (v8 < 0x80)
        return v6 + 1;
LABEL_26:
      v12 = 3;
      v13 = 4;
      if (v8 >> 28)
        v13 = 5;
      if (v8 >= 0x200000)
        v12 = v13;
      if (v8 >= 0x4000)
        v14 = v12;
      else
        v14 = 2;
      return v14 + v6;
    case 1:
      v10 = (2 * *a2) ^ ((int)*a2 >> 31);
      if (v10 < 0x80)
        return v6 + 1;
      if (v10 < 0x4000)
        return v6 + 2;
      if (v10 < 0x200000)
        return v6 + 3;
      v31 = v10 >> 28;
      goto LABEL_94;
    case 2:
    case 7:
    case 0xA:
      return v6 + 4;
    case 3:
    case 8:
      v9 = *(_QWORD *)a2;
      if (HIDWORD(*(_QWORD *)a2))
      {
        if (v9 >> 35)
        {
          v24 = v9 >> 42;
          v25 = v9 >> 49;
          v26 = HIBYTE(v9);
          v27 = (v9 & 0x8000000000000000) != 0;
          v28 = 9;
          if (v27)
            v28 = 10;
          if (!v26)
            v28 = 8;
          if (!v25)
            v28 = 7;
          if (!v24)
            v28 = 6;
          return v28 + v6;
        }
        else
        {
          return v6 + 5;
        }
      }
      else if (v9 >= 0x80)
      {
        v21 = 3;
        v22 = 4;
        if (v9 >> 28)
          v22 = 5;
        if (v9 >= 0x200000)
          v21 = v22;
        if (v9 >= 0x4000)
          v23 = v21;
        else
          v23 = 2;
        return v23 + v6;
      }
      else
      {
        return v6 + 1;
      }
    case 4:
      v11 = (2 * *(_QWORD *)a2) ^ (*(uint64_t *)a2 >> 63);
      if (HIDWORD(v11))
      {
        if (v11 >> 35)
        {
          if (v11 >> 42)
          {
            if (v11 >> 49)
            {
              if (HIBYTE(v11))
              {
                v27 = (v11 & 0x8000000000000000) != 0;
                v34 = 9;
                if (v27)
                  v34 = 10;
                return v34 + v6;
              }
              else
              {
                return v6 + 8;
              }
            }
            else
            {
              return v6 + 7;
            }
          }
          else
          {
            return v6 + 6;
          }
        }
        else
        {
          return v6 + 5;
        }
      }
      else if (v11 >= 0x80)
      {
        if (v11 >= 0x4000)
        {
          if (v11 >= 0x200000)
          {
            v31 = v11 >> 28;
LABEL_94:
            v32 = v31 == 0;
            v33 = 4;
            if (!v32)
              v33 = 5;
            return v33 + v6;
          }
          else
          {
            return v6 + 3;
          }
        }
        else
        {
          return v6 + 2;
        }
      }
      else
      {
        return v6 + 1;
      }
    case 5:
    case 9:
    case 0xB:
      return v6 | 8;
    case 6:
      v8 = *a2;
      if (*a2 >= 0x80)
        goto LABEL_26;
      return v6 + 1;
    case 0xC:
      return v6 + 1;
    case 0xE:
      packed_size = *(const char **)a2;
      if (!*(_QWORD *)a2)
        return (uint64_t)&packed_size[v6 + 1];
      packed_size = (const char *)strlen(packed_size);
      if (packed_size < 0x80)
        return (uint64_t)&packed_size[v6 + 1];
      if (packed_size >= 0x4000)
        goto LABEL_77;
      return (uint64_t)&packed_size[v6 + 2];
    case 0xF:
      v16 = *(_QWORD *)a2;
      v17 = 1;
      v18 = 2;
      v19 = 3;
      v20 = 4;
      if (*(_QWORD *)a2 >> 28)
        v20 = 5;
      if (v16 >= 0x200000)
        v19 = v20;
      if (v16 >= 0x4000)
        v18 = v19;
      if (v16 >= 0x80)
        v17 = v18;
      return v16 + v6 + v17;
    case 0x10:
      packed_size = *(const char **)a2;
      if (!*(_QWORD *)a2)
        return (uint64_t)&packed_size[v6 + 1];
      packed_size = (const char *)protobuf_c_message_get_packed_size();
      if (packed_size < 0x80)
        return (uint64_t)&packed_size[v6 + 1];
      if (packed_size < 0x4000)
        return (uint64_t)&packed_size[v6 + 2];
LABEL_77:
      v29 = 3;
      v30 = 4;
      if (packed_size >> 28)
        v30 = 5;
      if (packed_size >= 0x200000)
        v29 = v30;
      return (uint64_t)&packed_size[v6 + v29];
    default:
      required_field_get_packed_size_cold_1();
  }
}

uint64_t protobuf_c_message_pack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v17;
  unint64_t v18;
  char *v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v25;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  size_t v42;
  BOOL *v43;
  unsigned int v44;
  int v45;
  char *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int16x8_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  BOOL *v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  BOOL *v77;
  unsigned int v78;
  unsigned int v79;
  unint64_t v80;
  int v81;
  unsigned int v82;
  int32x4_t *v83;
  int8x16_t *v84;
  unint64_t v85;
  int8x16_t v86;
  int8x16_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v101;

  v3 = *(_DWORD **)a1;
  if (**(_DWORD **)a1 != 682290937)
    protobuf_c_message_pack_cold_4();
  v4 = a1;
  if (v3[12])
  {
    v5 = 0;
    v6 = 0;
    v101 = a2 + 16;
    while (1)
    {
      v8 = *((_QWORD *)v3 + 7);
      v9 = (_DWORD *)(v8 + 72 * v5);
      v10 = (unint64_t *)(v4 + v9[6]);
      v11 = v9[3];
      if (!v11)
        goto LABEL_5;
      v12 = v9[5];
      v13 = v8 + 72 * v5;
      if (v11 != 1 && v11 != 3)
      {
        v17 = *(_DWORD *)(v13 + 48);
LABEL_22:
        v18 = *(_QWORD *)(v4 + v12);
        v19 = (char *)(a2 + v6);
        v20 = (unint64_t *)*v10;
        if ((v17 & 1) == 0)
        {
          v21 = *(int *)(v8 + 72 * v5 + 16);
          if (v21 >= 0x11)
            protobuf_c_message_pack_cold_1(a1, (uint64_t)v10, a3);
          v7 = 0;
          if (v18)
          {
            v22 = qword_18DCB7E88[v21];
            v23 = 1;
            do
            {
              a1 = (uint64_t)required_field_pack((uint64_t)v9, v20, &v19[v7]);
              v7 += a1;
              v20 = (unint64_t *)((char *)v20 + v22);
            }
            while (v18 > v23++);
          }
          goto LABEL_6;
        }
        if (v18)
        {
          v27 = *(_DWORD *)(v8 + 72 * v5 + 8);
          if (v27 >> 29)
          {
            v31 = (8 * v27) | 0x80;
            v19[1] = (v27 >> 4) | 0x80;
            v19[2] = (v27 >> 11) | 0x80;
            v19[3] = (v27 >> 18) | 0x80;
            HIDWORD(v32) = v27 >> 29;
            LODWORD(v32) = 8 * v27;
            v19[4] = v32 >> 28;
            v33 = 5;
          }
          else
          {
            LOBYTE(v28) = 8 * v27;
            if (v27 < 0x10)
            {
              v30 = 0;
            }
            else
            {
              *v19 = v28 | 0x80;
              v28 = v27 >> 4;
              if (v27 < 0x800)
              {
                v30 = 1;
              }
              else
              {
                v19[1] = v28 | 0x80;
                v28 = v27 >> 11;
                if (v27 < 0x40000)
                {
                  v30 = 2;
                }
                else
                {
                  v19[2] = v28 | 0x80;
                  v28 = v27 >> 18;
                  v29 = v27 >> 25;
                  if (v29)
                  {
                    v19[3] = v28 | 0x80;
                    LOBYTE(v28) = v29;
                    v30 = 4;
                  }
                  else
                  {
                    v30 = 3;
                  }
                }
              }
            }
            v33 = v30 + 1;
            v19[v30] = v28;
            v31 = *v19;
          }
          *v19 = v31 | 2;
          v34 = *(_DWORD *)(v8 + 72 * v5 + 16);
          if (v34 - 2 > 9)
          {
            v35 = v18;
            if (v18 >= 0x80)
              goto LABEL_62;
          }
          else
          {
            v35 = dword_18DCB7E60[v34 - 2] * v18;
            if (v35 >= 0x80)
            {
LABEL_62:
              if (v35 >= 0x4000)
              {
                if (v35 >> 28)
                  v37 = 5;
                else
                  v37 = 4;
                if (v35 >= 0x200000)
                  v36 = v37;
                else
                  v36 = 3;
              }
              else
              {
                v36 = 2;
                if (v34 > 0xD)
                  goto LABEL_211;
              }
              goto LABEL_74;
            }
          }
          v36 = 1;
          if (v34 > 0xD)
LABEL_211:
            protobuf_c_message_pack_cold_2();
LABEL_74:
          v38 = (v36 + v33);
          v39 = (unint64_t)&v19[v38];
          switch(v34)
          {
            case 0u:
            case 0xDu:
              v49 = 0;
              v43 = (BOOL *)&v19[v38];
              do
              {
                while (1)
                {
                  v53 = *((_DWORD *)v20 + v49);
                  if ((v53 & 0x80000000) == 0)
                    break;
                  v50 = vdupq_n_s32(v53);
                  *v43 = v53 | 0x80;
                  v51 = (int32x4_t)vshlq_u32((uint32x4_t)v50, (uint32x4_t)xmmword_18DCB7F80);
                  v52 = (int16x8_t)vshlq_s32(v50, (int32x4_t)xmmword_18DCB7F80);
                  v51.i32[3] = v52.i32[3];
                  v52.i64[0] = *(_QWORD *)&vmovn_s32(v51) | 0x80008000800080;
                  *(_DWORD *)(v43 + 1) = vmovn_s16(v52).u32[0];
                  *(_DWORD *)(v43 + 5) = -1;
                  v43[9] = 1;
                  v43 += 10;
                  if (v18 <= ++v49)
                    goto LABEL_78;
                }
                if (v53 < 0x80)
                {
                  v55 = 0;
                }
                else
                {
                  *v43 = v53 | 0x80;
                  if (v53 < 0x4000)
                  {
                    v53 >>= 7;
                    v55 = 1;
                  }
                  else
                  {
                    v43[1] = (v53 >> 7) | 0x80;
                    if (v53 < 0x200000)
                    {
                      v53 >>= 14;
                      v55 = 2;
                    }
                    else
                    {
                      v43[2] = (v53 >> 14) | 0x80;
                      v54 = v53 >> 21;
                      v53 >>= 28;
                      if (v53)
                      {
                        v43[3] = v54 | 0x80;
                        v55 = 4;
                      }
                      else
                      {
                        LOBYTE(v53) = v54;
                        v55 = 3;
                      }
                    }
                  }
                }
                v43[v55] = v53;
                v43 += v55 + 1;
                ++v49;
              }
              while (v18 > v49);
              goto LABEL_78;
            case 1u:
              v63 = 0;
              v43 = (BOOL *)&v19[v38];
              do
              {
                v66 = (2 * *((_DWORD *)v20 + v63)) ^ (*((int *)v20 + v63) >> 31);
                if (v66 < 0x80)
                {
                  v64 = 0;
                }
                else
                {
                  *v43 = v66 | 0x80;
                  if (v66 < 0x4000)
                  {
                    v66 >>= 7;
                    v64 = 1;
                  }
                  else
                  {
                    v43[1] = (v66 >> 7) | 0x80;
                    if (v66 < 0x200000)
                    {
                      v66 >>= 14;
                      v64 = 2;
                    }
                    else
                    {
                      v43[2] = (v66 >> 14) | 0x80;
                      v67 = v66 >> 21;
                      v66 >>= 28;
                      if (v66)
                      {
                        v43[3] = v67 | 0x80;
                        v64 = 4;
                      }
                      else
                      {
                        LOBYTE(v66) = v67;
                        v64 = 3;
                      }
                    }
                  }
                }
                v65 = &v43[v64];
                *v65 = v66;
                v43 = v65 + 1;
                ++v63;
              }
              while (v18 > v63);
              goto LABEL_78;
            case 2u:
            case 7u:
            case 0xAu:
              v40 = v33;
              v41 = 4 * v18;
              v42 = (4 * v18) & 0xFFFFFFFC;
              goto LABEL_77;
            case 3u:
            case 8u:
              v56 = 0;
              v43 = (BOOL *)&v19[v38];
              while (2)
              {
                while (1)
                {
                  v58 = v20[v56];
                  v59 = HIDWORD(v58);
                  if (!HIDWORD(v58))
                    break;
                  *v43 = v58 | 0x80;
                  v43[1] = (v58 >> 7) | 0x80;
                  v43[2] = (v58 >> 14) | 0x80;
                  v43[3] = (v58 >> 21) | 0x80;
                  v60 = v58 >> 28;
                  if (v59 >= 8)
                  {
                    v43[4] = v60 | 0x80;
                    LODWORD(v58) = v59 >> 3;
                    if (v59 < 0x400)
                    {
                      LODWORD(v57) = 5;
                    }
                    else
                    {
                      v57 = 5;
                      do
                      {
                        v43[v57++] = v58 | 0x80;
                        v62 = v58 >> 14;
                        LODWORD(v58) = v58 >> 7;
                      }
                      while (v62);
                    }
                    goto LABEL_114;
                  }
                  v43[4] = v60;
                  v43 += 5;
                  v56 = (v56 + 1);
                  if (v18 <= v56)
                    goto LABEL_78;
                }
                if (v58 < 0x80)
                {
                  LODWORD(v57) = 0;
                }
                else
                {
                  *v43 = v58 | 0x80;
                  if (v58 < 0x4000)
                  {
                    LODWORD(v57) = 1;
                    LODWORD(v58) = v58 >> 7;
                  }
                  else
                  {
                    v43[1] = (v58 >> 7) | 0x80;
                    if (v58 < 0x200000)
                    {
                      LODWORD(v57) = 2;
                      LODWORD(v58) = v58 >> 14;
                    }
                    else
                    {
                      v43[2] = (v58 >> 14) | 0x80;
                      v61 = v58 >> 21;
                      LODWORD(v58) = v58 >> 28;
                      if ((_DWORD)v58)
                      {
                        v43[3] = v61 | 0x80;
                        LODWORD(v57) = 4;
                      }
                      else
                      {
                        LODWORD(v57) = 3;
                        LOBYTE(v58) = v61;
                      }
                    }
                  }
                }
LABEL_114:
                v43[v57] = v58;
                v43 += (v57 + 1);
                v56 = (v56 + 1);
                if (v18 <= v56)
                  goto LABEL_78;
                continue;
              }
            case 4u:
              v68 = 0;
              v43 = (BOOL *)&v19[v38];
              while (2)
              {
                while (1)
                {
                  v70 = (2 * v20[v68]) ^ ((uint64_t)v20[v68] >> 63);
                  v71 = HIDWORD(v70);
                  if (!HIDWORD(v70))
                    break;
                  *v43 = v70 | 0x80;
                  v43[1] = (v70 >> 7) | 0x80;
                  v43[2] = (v70 >> 14) | 0x80;
                  v43[3] = (v70 >> 21) | 0x80;
                  v72 = v70 >> 28;
                  if (v71 >= 8)
                  {
                    v43[4] = v72 | 0x80;
                    LODWORD(v70) = v71 >> 3;
                    if (v71 < 0x400)
                    {
                      LODWORD(v69) = 5;
                    }
                    else
                    {
                      v69 = 5;
                      do
                      {
                        v43[v69++] = v70 | 0x80;
                        v74 = v70 >> 14;
                        LODWORD(v70) = v70 >> 7;
                      }
                      while (v74);
                    }
                    goto LABEL_146;
                  }
                  v43[4] = v72;
                  v43 += 5;
                  v68 = (v68 + 1);
                  if (v18 <= v68)
                    goto LABEL_78;
                }
                if (v70 < 0x80)
                {
                  LODWORD(v69) = 0;
                }
                else
                {
                  *v43 = v70 | 0x80;
                  if (v70 < 0x4000)
                  {
                    LODWORD(v69) = 1;
                    LODWORD(v70) = v70 >> 7;
                  }
                  else
                  {
                    v43[1] = (v70 >> 7) | 0x80;
                    if (v70 < 0x200000)
                    {
                      LODWORD(v69) = 2;
                      LODWORD(v70) = v70 >> 14;
                    }
                    else
                    {
                      v43[2] = (v70 >> 14) | 0x80;
                      v73 = v70 >> 21;
                      LODWORD(v70) = v70 >> 28;
                      if ((_DWORD)v70)
                      {
                        v43[3] = v73 | 0x80;
                        LODWORD(v69) = 4;
                      }
                      else
                      {
                        LODWORD(v69) = 3;
                        LOBYTE(v70) = v73;
                      }
                    }
                  }
                }
LABEL_146:
                v43[v69] = v70;
                v43 += (v69 + 1);
                v68 = (v68 + 1);
                if (v18 <= v68)
                  goto LABEL_78;
                continue;
              }
            case 5u:
            case 9u:
            case 0xBu:
              v40 = v33;
              v41 = 8 * v18;
              v42 = (8 * v18) & 0xFFFFFFF8;
LABEL_77:
              a1 = (uint64_t)memcpy(&v19[v38], v20, v42);
              v39 = (unint64_t)&v19[v38];
              LODWORD(v43) = (_DWORD)v19 + v38 + v41;
              v33 = v40;
              goto LABEL_78;
            case 6u:
              v75 = 0;
              v43 = (BOOL *)&v19[v38];
              do
              {
                v78 = *((_DWORD *)v20 + v75);
                if (v78 < 0x80)
                {
                  v76 = 0;
                }
                else
                {
                  *v43 = v78 | 0x80;
                  if (v78 < 0x4000)
                  {
                    v78 >>= 7;
                    v76 = 1;
                  }
                  else
                  {
                    v43[1] = (v78 >> 7) | 0x80;
                    if (v78 < 0x200000)
                    {
                      v78 >>= 14;
                      v76 = 2;
                    }
                    else
                    {
                      v43[2] = (v78 >> 14) | 0x80;
                      v79 = v78 >> 21;
                      v78 >>= 28;
                      if (v78)
                      {
                        v43[3] = v79 | 0x80;
                        v76 = 4;
                      }
                      else
                      {
                        LOBYTE(v78) = v79;
                        v76 = 3;
                      }
                    }
                  }
                }
                v77 = &v43[v76];
                *v77 = v78;
                v43 = v77 + 1;
                ++v75;
              }
              while (v18 > v75);
              goto LABEL_78;
            case 0xCu:
              if (v18 < 0x20)
                goto LABEL_176;
              v81 = 0;
              v80 = 0;
              if (!(_DWORD)v18)
                goto LABEL_177;
              v43 = (BOOL *)&v19[v38];
              if ((v18 - 1) >> 32)
                goto LABEL_178;
              if (v39 < (unint64_t)v20 + 4 * v18 && (unint64_t)v20 < a2 + v38 + v6 + v18)
              {
LABEL_176:
                v80 = 0;
                v81 = 0;
LABEL_177:
                v43 = (BOOL *)&v19[v38];
LABEL_178:
                v82 = v81 + 1;
                do
                {
                  *v43++ = *((_DWORD *)v20 + v80) != 0;
                  v80 = v82++;
                }
                while (v18 > v80);
                goto LABEL_78;
              }
              v80 = v18 & 0xFFFFFFFFFFFFFFE0;
              v43 = (BOOL *)(v39 + (v18 & 0xFFFFFFFFFFFFFFE0));
              v83 = (int32x4_t *)(v20 + 8);
              v84 = (int8x16_t *)(v101 + v6 + v38);
              v85 = v18 & 0xFFFFFFFFFFFFFFE0;
              v86.i64[0] = 0x101010101010101;
              v86.i64[1] = 0x101010101010101;
              do
              {
                v87 = vbicq_s8(v86, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(*v83), (int16x8_t)vceqzq_s32(v83[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v83[2]), (int16x8_t)vceqzq_s32(v83[3]))));
                v84[-1] = vbicq_s8(v86, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v83[-4]), (int16x8_t)vceqzq_s32(v83[-3])), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v83[-2]), (int16x8_t)vceqzq_s32(v83[-1]))));
                *v84 = v87;
                v83 += 8;
                v84 += 2;
                v85 -= 32;
              }
              while (v85);
              v81 = v18 & 0xFFFFFFE0;
              if (v18 != v80)
                goto LABEL_178;
LABEL_78:
              v44 = (_DWORD)v43 - v39;
              if (((_DWORD)v43 - v39) < 0x80)
              {
                v45 = 1;
                if (v36 == 1)
                  goto LABEL_80;
LABEL_94:
                if (v36 + 1 != v45)
                  protobuf_c_message_pack_cold_3();
                a1 = (uint64_t)memmove((void *)(v39 + 1), (const void *)v39, v44);
                LODWORD(v38) = v38 + 1;
                v46 = &v19[v33];
                if (v44 >= 0x80)
                  goto LABEL_81;
                goto LABEL_96;
              }
              if (v44 >= 0x4000)
              {
                if (v44 >> 28)
                  v45 = 5;
                else
                  v45 = 4;
                if (v44 < 0x200000)
                  v45 = 3;
                if (v36 != v45)
                  goto LABEL_94;
              }
              else
              {
                v45 = 2;
                if (v36 != 2)
                  goto LABEL_94;
              }
LABEL_80:
              v46 = &v19[v33];
              if (v44 >= 0x80)
              {
LABEL_81:
                *v46 = v44 | 0x80;
                v47 = v44 >> 7;
                if (v44 < 0x4000)
                {
                  v48 = 1;
                }
                else
                {
                  v46[1] = v47 | 0x80;
                  v47 = v44 >> 14;
                  if (v44 < 0x200000)
                  {
                    v48 = 2;
                  }
                  else
                  {
                    v46[2] = v47 | 0x80;
                    v47 = v44 >> 21;
                    if (v44 >> 28)
                    {
                      v46[3] = v47 | 0x80;
                      v47 = v44 >> 28;
                      v48 = 4;
                    }
                    else
                    {
                      v48 = 3;
                    }
                  }
                }
                goto LABEL_182;
              }
LABEL_96:
              v48 = 0;
              LOBYTE(v47) = v44;
LABEL_182:
              v46[v48] = v47;
              v7 = v38 + v44;
              goto LABEL_6;
            default:
              goto LABEL_211;
          }
        }
LABEL_46:
        v7 = 0;
        goto LABEL_6;
      }
      v17 = *(_DWORD *)(v13 + 48);
      if ((v17 & 4) != 0)
      {
        if (*(_DWORD *)(v8 + 72 * v5 + 8) != *(_DWORD *)(v4 + v12))
          goto LABEL_46;
        v25 = *(_DWORD *)(v8 + 72 * v5 + 16);
        if (v25 != 16 && v25 != 14)
          goto LABEL_5;
      }
      else
      {
        if (v11 == 3)
        {
          switch(v9[4])
          {
            case 0:
            case 1:
            case 2:
            case 6:
            case 7:
            case 0xC:
            case 0xD:
              if (*(_DWORD *)v10)
                goto LABEL_5;
              goto LABEL_46;
            case 3:
            case 4:
            case 5:
            case 8:
            case 9:
            case 0xF:
            case 0x10:
              if (!*v10)
                goto LABEL_46;
              goto LABEL_5;
            case 0xA:
              if (*(float *)v10 != 0.0)
                goto LABEL_5;
              goto LABEL_46;
            case 0xB:
              if (*(double *)v10 != 0.0)
                goto LABEL_5;
              goto LABEL_46;
            case 0xE:
              if (!*v10 || !*(_BYTE *)*v10)
                goto LABEL_46;
              goto LABEL_5;
            default:
              goto LABEL_46;
          }
        }
        if (v11 != 1)
          goto LABEL_22;
        v15 = *(_DWORD *)(v8 + 72 * v5 + 16);
        if (v15 != 16 && v15 != 14)
        {
          if (!*(_DWORD *)(v4 + v12))
            goto LABEL_46;
          goto LABEL_5;
        }
      }
      if (!*v10 || *v10 == *(_QWORD *)(v8 + 72 * v5 + 40))
        goto LABEL_46;
LABEL_5:
      a1 = (uint64_t)required_field_pack((uint64_t)v9, v10, (_BYTE *)(a2 + v6));
      v7 = a1;
LABEL_6:
      v6 += v7;
      ++v5;
      v3 = *(_DWORD **)v4;
      if (v5 >= *(unsigned int *)(*(_QWORD *)v4 + 48))
        goto LABEL_192;
    }
  }
  v6 = 0;
LABEL_192:
  if (*(_DWORD *)(v4 + 8))
  {
    v88 = 0;
    v89 = 0;
    do
    {
      v94 = *(_QWORD *)(v4 + 16);
      v95 = (char *)(a2 + v6);
      v96 = *(_DWORD *)(v94 + v88);
      if (v96 >> 29)
      {
        v90 = (8 * v96) | 0x80;
        *v95 = v90;
        v95[1] = (v96 >> 4) | 0x80;
        v95[2] = (v96 >> 11) | 0x80;
        v95[3] = (v96 >> 18) | 0x80;
        HIDWORD(v91) = v96 >> 29;
        LODWORD(v91) = 8 * v96;
        v95[4] = v91 >> 28;
        v92 = 5;
      }
      else
      {
        LOBYTE(v97) = 8 * v96;
        if (v96 < 0x10)
        {
          v99 = 0;
        }
        else
        {
          *v95 = v97 | 0x80;
          v97 = v96 >> 4;
          if (v96 < 0x800)
          {
            v99 = 1;
          }
          else
          {
            v95[1] = v97 | 0x80;
            v97 = v96 >> 11;
            if (v96 < 0x40000)
            {
              v99 = 2;
            }
            else
            {
              v95[2] = v97 | 0x80;
              v97 = v96 >> 18;
              v98 = v96 >> 25;
              if (v98)
              {
                v95[3] = v97 | 0x80;
                LOBYTE(v97) = v98;
                v99 = 4;
              }
              else
              {
                v99 = 3;
              }
            }
          }
        }
        v92 = v99 + 1;
        v95[v99] = v97;
        v90 = *v95;
      }
      v93 = v94 + v88;
      *v95 = v90 | *(_BYTE *)(v94 + v88 + 4);
      memcpy(&v95[v92], *(const void **)(v94 + v88 + 16), *(_QWORD *)(v94 + v88 + 8));
      v6 += v92 + *(_QWORD *)(v93 + 8);
      ++v89;
      v88 += 24;
    }
    while (v89 < *(unsigned int *)(v4 + 8));
  }
  return v6;
}

const char *required_field_pack(uint64_t a1, unint64_t *a2, _BYTE *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  const void *v22;
  _BYTE *v23;
  size_t v24;
  size_t v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE *v28;
  const char *v29;
  const char *v30;
  unsigned int v31;
  size_t v32;
  size_t v33;
  unsigned int v34;
  unsigned int v35;
  int32x4_t v36;
  int32x4_t v37;
  int16x8_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >> 29)
  {
    *a3 = (8 * v3) | 0x80;
    a3[1] = (v3 >> 4) | 0x80;
    a3[2] = (v3 >> 11) | 0x80;
    a3[3] = (v3 >> 18) | 0x80;
    HIDWORD(v7) = v3 >> 29;
    LODWORD(v7) = 8 * v3;
    a3[4] = v7 >> 28;
    v8 = 5;
  }
  else
  {
    LOBYTE(v4) = 8 * v3;
    if (v3 < 0x10)
    {
      v6 = 0;
    }
    else
    {
      *a3 = v4 | 0x80;
      v4 = v3 >> 4;
      if (v3 < 0x800)
      {
        v6 = 1;
      }
      else
      {
        a3[1] = v4 | 0x80;
        v4 = v3 >> 11;
        if (v3 < 0x40000)
        {
          v6 = 2;
        }
        else
        {
          a3[2] = v4 | 0x80;
          v4 = v3 >> 18;
          v5 = v3 >> 25;
          if (v3 >> 25)
          {
            a3[3] = v4 | 0x80;
            v6 = 4;
            LOBYTE(v4) = v5;
          }
          else
          {
            v6 = 3;
          }
        }
      }
    }
    v8 = v6 + 1;
    a3[v6] = v4;
  }
  switch(*(_DWORD *)(a1 + 16))
  {
    case 0:
    case 0xD:
      v10 = *(_DWORD *)a2;
      v11 = &a3[v8];
      if ((*(_DWORD *)a2 & 0x80000000) != 0)
      {
        *v11 = v10 | 0x80;
        v36 = vdupq_n_s32(v10);
        v37 = (int32x4_t)vshlq_u32((uint32x4_t)v36, (uint32x4_t)xmmword_18DCB7F80);
        v38 = (int16x8_t)vshlq_s32(v36, (int32x4_t)xmmword_18DCB7F80);
        v37.i32[3] = v38.i32[3];
        v38.i64[0] = *(_QWORD *)&vmovn_s32(v37) | 0x80008000800080;
        *(_DWORD *)(v11 + 1) = vmovn_s16(v38).u32[0];
        *(_DWORD *)(v11 + 5) = -1;
        v11[9] = 1;
        return (const char *)(v8 + 10);
      }
      if (v10 < 0x80)
      {
LABEL_29:
        v13 = 0;
      }
      else
      {
LABEL_18:
        *v11 = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 < 0x4000)
        {
          v13 = 1;
        }
        else
        {
          v11[1] = v12 | 0x80;
          v12 = v10 >> 14;
          if (v10 < 0x200000)
          {
            v13 = 2;
          }
          else
          {
            v11[2] = v12 | 0x80;
            v12 = v10 >> 21;
            v10 >>= 28;
            if (v10)
            {
              v11[3] = v12 | 0x80;
              v13 = 4;
              goto LABEL_74;
            }
            v13 = 3;
          }
        }
        LOBYTE(v10) = v12;
      }
LABEL_74:
      v11[v13] = v10;
      return (const char *)(v13 + 1 + v8);
    case 1:
      v11 = &a3[v8];
      v10 = (2 * *(_DWORD *)a2) ^ (*(int *)a2 >> 31);
      if (v10 < 0x80)
        goto LABEL_29;
      goto LABEL_18;
    case 2:
    case 7:
    case 0xA:
      *a3 |= 5u;
      *(_DWORD *)&a3[v8] = *(_DWORD *)a2;
      return (const char *)(v8 + 4);
    case 3:
    case 8:
      v14 = *a2;
      v15 = &a3[v8];
      v16 = HIDWORD(*a2);
      if (!(_DWORD)v16)
        goto LABEL_33;
      *v15 = v14 | 0x80;
      v15[1] = (v14 >> 7) | 0x80;
      v15[2] = (v14 >> 14) | 0x80;
      v15[3] = (v14 >> 21) | 0x80;
      LOBYTE(v14) = __PAIR64__(v16, v14) >> 28;
      if (v16 < 8)
        goto LABEL_32;
      v15[4] = v14 | 0x80;
      LODWORD(v14) = v16 >> 3;
      if (v16 < 0x400)
        goto LABEL_66;
      v17 = 5;
      do
      {
        v15[v17++] = v14 | 0x80;
        v18 = v14 >> 14;
        LODWORD(v14) = v14 >> 7;
      }
      while (v18);
      goto LABEL_91;
    case 4:
      v15 = &a3[v8];
      v14 = (2 * *a2) ^ ((uint64_t)*a2 >> 63);
      v19 = HIDWORD(v14);
      if (HIDWORD(v14))
      {
        *v15 = v14 | 0x80;
        v15[1] = (v14 >> 7) | 0x80;
        v15[2] = (v14 >> 14) | 0x80;
        v15[3] = (v14 >> 21) | 0x80;
        LOBYTE(v14) = v14 >> 28;
        if (v19 < 8)
        {
LABEL_32:
          v20 = 5;
          LODWORD(v17) = 4;
          goto LABEL_92;
        }
        v15[4] = v14 | 0x80;
        LODWORD(v14) = v19 >> 3;
        if (v19 < 0x400)
        {
LABEL_66:
          LODWORD(v17) = 5;
        }
        else
        {
          v17 = 5;
          do
          {
            v15[v17++] = v14 | 0x80;
            v39 = v14 >> 14;
            LODWORD(v14) = v14 >> 7;
          }
          while (v39);
        }
      }
      else
      {
LABEL_33:
        if (v14 < 0x80)
        {
          LODWORD(v17) = 0;
        }
        else
        {
          *v15 = v14 | 0x80;
          v21 = v14 >> 7;
          if (v14 < 0x4000)
          {
            LODWORD(v17) = 1;
          }
          else
          {
            v15[1] = v21 | 0x80;
            v21 = v14 >> 14;
            if (v14 < 0x200000)
            {
              LODWORD(v17) = 2;
            }
            else
            {
              v15[2] = v21 | 0x80;
              v21 = v14 >> 21;
              LODWORD(v14) = v14 >> 28;
              if ((_DWORD)v14)
              {
                v15[3] = v21 | 0x80;
                LODWORD(v17) = 4;
                goto LABEL_91;
              }
              LODWORD(v17) = 3;
            }
          }
          LOBYTE(v14) = v21;
        }
      }
LABEL_91:
      v20 = v17 + 1;
LABEL_92:
      v15[v17] = v14;
      return (const char *)(v20 + v8);
    case 5:
    case 9:
    case 0xB:
      *a3 |= 1u;
      *(_QWORD *)&a3[v8] = *a2;
      return (const char *)(v8 + 8);
    case 6:
      v10 = *(_DWORD *)a2;
      v11 = &a3[v8];
      if (*(_DWORD *)a2 >= 0x80u)
        goto LABEL_18;
      goto LABEL_29;
    case 0xC:
      a3[v8] = *(_DWORD *)a2 != 0;
      return (const char *)(v8 + 1);
    case 0xE:
      *a3 |= 2u;
      v22 = (const void *)*a2;
      v23 = &a3[v8];
      if (!*a2)
        goto LABEL_57;
      v24 = strlen((const char *)*a2);
      v25 = v24;
      if (v24 < 0x80)
      {
        v27 = 0;
        LOBYTE(v26) = v24;
      }
      else
      {
        *v23 = v24 | 0x80;
        v26 = v24 >> 7;
        if (v24 < 0x4000)
        {
          v27 = 1;
        }
        else
        {
          v23[1] = v26 | 0x80;
          v26 = v24 >> 14;
          if (v24 < 0x200000)
          {
            v27 = 2;
          }
          else
          {
            v23[2] = v26 | 0x80;
            v26 = v24 >> 21;
            if (v24 >> 28)
            {
              v23[3] = v26 | 0x80;
              v27 = 4;
              v26 = v24 >> 28;
            }
            else
            {
              v27 = 3;
            }
          }
        }
      }
      v43 = v27 + 1;
      v23[v27] = v26;
      memcpy(&v23[v43], v22, v24);
      return (const char *)(v25 + v43 + v8);
    case 0xF:
      *a3 |= 2u;
      v28 = &a3[v8];
      v29 = (const char *)*a2;
      if (*a2 < 0x80)
      {
        v31 = 0;
        v30 = (const char *)*a2;
      }
      else
      {
        *v28 = v29 | 0x80;
        LODWORD(v30) = v29 >> 7;
        if (v29 < 0x4000)
        {
          v31 = 1;
        }
        else
        {
          v28[1] = v30 | 0x80;
          LODWORD(v30) = v29 >> 14;
          if (v29 < 0x200000)
          {
            v31 = 2;
          }
          else
          {
            v28[2] = v30 | 0x80;
            LODWORD(v30) = v29 >> 21;
            if (v29 >> 28)
            {
              v28[3] = v30 | 0x80;
              v31 = 4;
              LODWORD(v30) = v29 >> 28;
            }
            else
            {
              v31 = 3;
            }
          }
        }
      }
      v42 = v31 + 1;
      v28[v31] = (_BYTE)v30;
      memcpy(&v28[v42], (const void *)a2[1], (size_t)v29);
      return &v29[v42 + v8];
    case 0x10:
      *a3 |= 2u;
      v23 = &a3[v8];
      if (*a2)
      {
        v32 = protobuf_c_message_pack(*a2, v23 + 1);
        v33 = v32;
        if (v32 >= 0x80)
        {
          if (v32 >= 0x4000)
          {
            v40 = 3;
            v41 = 4;
            if (v32 >> 28)
              v41 = 5;
            if (v32 >= 0x200000)
              v40 = v41;
          }
          else
          {
            v40 = 2;
          }
          memmove(&v23[v40], v23 + 1, v32);
          *v23 = v33 | 0x80;
          v35 = v33 >> 7;
          if (v33 < 0x4000)
          {
            v34 = 1;
          }
          else
          {
            v23[1] = v35 | 0x80;
            v35 = v33 >> 14;
            if (v33 < 0x200000)
            {
              v34 = 2;
            }
            else
            {
              v23[2] = v35 | 0x80;
              v35 = v33 >> 21;
              if (v33 >> 28)
              {
                v23[3] = v35 | 0x80;
                v34 = 4;
                v35 = v33 >> 28;
              }
              else
              {
                v34 = 3;
              }
            }
          }
        }
        else
        {
          v34 = 0;
          LOBYTE(v35) = v32;
        }
        v23[v34] = v35;
        return (const char *)(v33 + v34 + 1 + v8);
      }
      else
      {
LABEL_57:
        *v23 = 0;
        return (const char *)(v8 + 1);
      }
    default:
      required_field_pack_cold_1();
  }
}

uint64_t protobuf_c_message_pack_to_buffer(_QWORD *a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  _DWORD *v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int **v12;
  int v13;
  int v15;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  char *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int *v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int16x8_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v117;
  char v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;
  unsigned __int32 v124;
  int v125;
  char v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (*(_DWORD *)*a1 != 682290937)
    protobuf_c_message_pack_to_buffer_cold_5();
  v5 = a1;
  if (v3[12])
  {
    v6 = 0;
    v7 = 0;
LABEL_7:
    v9 = *((_QWORD *)v3 + 7);
    v10 = (_DWORD *)(v9 + 72 * v6);
    v11 = v10[5];
    v12 = (unsigned int **)((char *)v5 + v10[6]);
    v13 = v10[3];
    if (v13 == 3 || v13 == 1)
    {
      if ((*(_BYTE *)(v9 + 72 * v6 + 48) & 4) != 0)
      {
        if (*(_DWORD *)(v9 + 72 * v6 + 8) != *(_DWORD *)((char *)v5 + v11))
          goto LABEL_59;
        v22 = *(_DWORD *)(v9 + 72 * v6 + 16);
        if (v22 != 16 && v22 != 14)
          goto LABEL_5;
        v17 = *v12;
        if (!*v12)
          goto LABEL_59;
        goto LABEL_36;
      }
      if (v13 == 3)
      {
        switch(v10[4])
        {
          case 0:
          case 1:
          case 2:
          case 6:
          case 7:
          case 0xC:
          case 0xD:
            if (!*(_DWORD *)v12)
              goto LABEL_59;
            goto LABEL_5;
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
          case 0xF:
          case 0x10:
            if (*v12)
              goto LABEL_5;
            goto LABEL_59;
          case 0xA:
            if (*(float *)v12 != 0.0)
              goto LABEL_5;
            goto LABEL_59;
          case 0xB:
            if (*(double *)v12 != 0.0)
              goto LABEL_5;
            goto LABEL_59;
          case 0xE:
            if (!*v12 || !*(_BYTE *)*v12)
              goto LABEL_59;
            goto LABEL_5;
          default:
            goto LABEL_59;
        }
      }
      if (v13 == 1)
      {
        v15 = *(_DWORD *)(v9 + 72 * v6 + 16);
        if (v15 != 16 && v15 != 14)
        {
          if (!*(_DWORD *)((char *)v5 + v11))
            goto LABEL_59;
LABEL_5:
          a1 = (_QWORD *)required_field_pack_to_buffer((uint64_t)v10, (uint64_t)v12, a2);
          v8 = (uint64_t)a1;
          goto LABEL_6;
        }
        v17 = *v12;
        if (!*v12)
        {
LABEL_59:
          v8 = 0;
          goto LABEL_6;
        }
LABEL_36:
        if (v17 != *(unsigned int **)(v9 + 72 * v6 + 40))
          goto LABEL_5;
        goto LABEL_59;
      }
    }
    else if (!v13)
    {
      goto LABEL_5;
    }
    v18 = *(_QWORD *)((char *)v5 + v11);
    if (!(_DWORD)v18)
      goto LABEL_59;
    v19 = *v12;
    if ((*(_BYTE *)(v9 + 72 * v6 + 48) & 1) == 0)
    {
      v20 = *(int *)(v9 + 72 * v6 + 16);
      if (v20 >= 0x11)
        protobuf_c_message_pack_cold_1((uint64_t)a1, (uint64_t)v12, a3);
      LODWORD(v8) = 0;
      v21 = qword_18DCB7E88[v20];
      do
      {
        a1 = (_QWORD *)required_field_pack_to_buffer((uint64_t)v10, (uint64_t)v19, a2);
        v8 = (v8 + (_DWORD)a1);
        v19 = (unsigned int *)((char *)v19 + v21);
        LODWORD(v18) = v18 - 1;
      }
      while ((_DWORD)v18);
      goto LABEL_6;
    }
    v24 = *(_DWORD *)(v9 + 72 * v6 + 8);
    if (v24 >> 29)
    {
      v118 = (8 * v24) | 0x80;
      v119 = (v24 >> 4) | 0x80;
      v120 = (v24 >> 11) | 0x80;
      v121 = (v24 >> 18) | 0x80;
      HIDWORD(v28) = v24 >> 29;
      LODWORD(v28) = 8 * v24;
      v122 = v28 >> 28;
      v29 = 5;
    }
    else
    {
      LOBYTE(v25) = 8 * v24;
      if (v24 < 0x10)
      {
        v27 = 0;
      }
      else
      {
        v118 = v25 | 0x80;
        v25 = v24 >> 4;
        if (v24 < 0x800)
        {
          v27 = 1;
        }
        else
        {
          v119 = v25 | 0x80;
          v25 = v24 >> 11;
          if (v24 < 0x40000)
          {
            v27 = 2;
          }
          else
          {
            v120 = v25 | 0x80;
            v25 = v24 >> 18;
            v26 = v24 >> 25;
            if (v26)
            {
              v121 = v25 | 0x80;
              LOBYTE(v25) = v26;
              v27 = 4;
            }
            else
            {
              v27 = 3;
            }
          }
        }
      }
      v29 = v27 + 1;
      *(&v118 + v27) = v25;
    }
    v30 = v18;
    v31 = v18;
    switch(v10[4])
    {
      case 0:
      case 0xD:
        v31 = 0;
        v35 = v19;
        v36 = v18;
        do
        {
          v39 = *v35++;
          v38 = v39;
          if ((v39 & 0x80000000) != 0)
          {
            v37 = 10;
          }
          else if (v38 >= 0x80)
          {
            if (v38 >> 28)
              v40 = 5;
            else
              v40 = 4;
            if (v38 < 0x200000)
              v40 = 3;
            if (v38 >= 0x4000)
              v37 = v40;
            else
              v37 = 2;
          }
          else
          {
            v37 = 1;
          }
          v31 += v37;
          --v36;
        }
        while (v36);
        goto LABEL_65;
      case 1:
        v31 = 0;
        v50 = (int *)v19;
        v51 = v18;
        do
        {
          v53 = *v50++;
          v54 = (2 * v53) ^ (v53 >> 31);
          if (v54 < 0x80)
          {
            v52 = 1;
          }
          else if (v54 >= 0x4000)
          {
            if (v54 >= 0x200000)
            {
              if (v54 >> 28)
                v52 = 5;
              else
                v52 = 4;
            }
            else
            {
              v52 = 3;
            }
          }
          else
          {
            v52 = 2;
          }
          v31 += v52;
          --v51;
        }
        while (v51);
        goto LABEL_65;
      case 2:
      case 7:
      case 0xA:
        v31 = 4 * v18;
        goto LABEL_65;
      case 3:
      case 8:
        v31 = 0;
        v41 = (unint64_t *)v19;
        v42 = v18;
        do
        {
          v48 = *v41++;
          v47 = v48;
          if (HIDWORD(v48))
          {
            if (v47 >> 35)
            {
              v43 = v47 >> 42;
              v44 = v47 >> 49;
              v45 = HIBYTE(v47);
              if ((v47 & 0x8000000000000000) == 0)
                v46 = 9;
              else
                v46 = 10;
              if (!v45)
                v46 = 8;
              if (!v44)
                v46 = 7;
              if (!v43)
                v46 = 6;
            }
            else
            {
              v46 = 5;
            }
          }
          else if (v47 >= 0x80)
          {
            if (v47 >> 28)
              v49 = 5;
            else
              v49 = 4;
            if (v47 < 0x200000)
              v49 = 3;
            if (v47 >= 0x4000)
              v46 = v49;
            else
              v46 = 2;
          }
          else
          {
            v46 = 1;
          }
          v31 += v46;
          --v42;
        }
        while (v42);
        goto LABEL_65;
      case 4:
        v31 = 0;
        v55 = (uint64_t *)v19;
        v56 = v18;
        do
        {
          v58 = *v55++;
          v59 = (2 * v58) ^ (v58 >> 63);
          if (HIDWORD(v59))
          {
            if (v59 >> 35)
            {
              if (v59 >> 42)
              {
                if (v59 >> 49)
                {
                  if (HIBYTE(v59))
                  {
                    if ((v59 & 0x8000000000000000) == 0)
                      v57 = 9;
                    else
                      v57 = 10;
                  }
                  else
                  {
                    v57 = 8;
                  }
                }
                else
                {
                  v57 = 7;
                }
              }
              else
              {
                v57 = 6;
              }
            }
            else
            {
              v57 = 5;
            }
          }
          else if (v59 < 0x80)
          {
            v57 = 1;
          }
          else if (v59 >= 0x4000)
          {
            if (v59 >= 0x200000)
            {
              if (v59 >> 28)
                v57 = 5;
              else
                v57 = 4;
            }
            else
            {
              v57 = 3;
            }
          }
          else
          {
            v57 = 2;
          }
          v31 += v57;
          --v56;
        }
        while (v56);
        goto LABEL_65;
      case 5:
      case 9:
      case 0xB:
        v31 = 8 * v18;
        goto LABEL_65;
      case 6:
        v31 = 0;
        v60 = v19;
        v61 = v18;
        break;
      case 0xC:
        goto LABEL_65;
      default:
        protobuf_c_message_pack_to_buffer_cold_2();
    }
    do
    {
      while (1)
      {
        v65 = *v60++;
        v64 = v65;
        if (v65 >= 0x80)
          break;
        ++v31;
        if (!--v61)
          goto LABEL_65;
      }
      if (v64 >> 28)
        v62 = 5;
      else
        v62 = 4;
      if (v64 < 0x200000)
        v62 = 3;
      if (v64 >= 0x4000)
        v63 = v62;
      else
        v63 = 2;
      v31 += v63;
      --v61;
    }
    while (v61);
LABEL_65:
    v118 |= 2u;
    v32 = &v118 + v29;
    if (v31 < 0x80)
    {
      v34 = 0;
      LOBYTE(v33) = v31;
    }
    else
    {
      *v32 = v31 | 0x80;
      v33 = v31 >> 7;
      if (v31 < 0x4000)
      {
        v34 = 1;
      }
      else
      {
        v32[1] = v33 | 0x80;
        v33 = v31 >> 14;
        if (v31 < 0x200000)
        {
          v34 = 2;
        }
        else
        {
          v32[2] = v33 | 0x80;
          v33 = v31 >> 21;
          if (v31 >> 28)
          {
            v32[3] = v33 | 0x80;
            v33 = v31 >> 28;
            v34 = 4;
          }
          else
          {
            v34 = 3;
          }
        }
      }
    }
    v32[v34] = v33;
    v66 = v34 + v29 + 1;
    (*a2)(a2, v66, &v118);
    v67 = 2;
    v117 = v66;
    switch(v10[4])
    {
      case 0:
      case 0xD:
        v68 = 0;
        do
        {
          v74 = *v19++;
          v73 = v74;
          if ((v74 & 0x80000000) != 0)
          {
            v69 = vdupq_n_s32(v73);
            v123 = v73 | 0x80;
            v70 = (int32x4_t)vshlq_u32((uint32x4_t)v69, (uint32x4_t)xmmword_18DCB7F80);
            v71 = (int16x8_t)vshlq_s32(v69, (int32x4_t)xmmword_18DCB7F80);
            v70.i32[3] = v71.i32[3];
            v71.i64[0] = *(_QWORD *)&vmovn_s32(v70) | 0x80008000800080;
            v124 = vmovn_s16(v71).u32[0];
            v125 = -1;
            v126 = 1;
            v72 = 10;
          }
          else
          {
            if (v73 < 0x80)
            {
              v76 = 0;
            }
            else
            {
              v123 = v73 | 0x80;
              if (v73 < 0x4000)
              {
                v73 >>= 7;
                v76 = 1;
              }
              else
              {
                LOBYTE(v124) = (v73 >> 7) | 0x80;
                if (v73 < 0x200000)
                {
                  v73 >>= 14;
                  v76 = 2;
                }
                else
                {
                  BYTE1(v124) = (v73 >> 14) | 0x80;
                  v75 = v73 >> 21;
                  v73 >>= 28;
                  if (v73)
                  {
                    BYTE2(v124) = v75 | 0x80;
                    v76 = 4;
                  }
                  else
                  {
                    LOBYTE(v73) = v75;
                    v76 = 3;
                  }
                }
              }
            }
            v72 = v76 + 1;
            *(&v123 + v76) = v73;
          }
          a1 = (_QWORD *)((uint64_t (*)(_QWORD, uint64_t, char *))*a2)(a2, v72, &v123);
          v68 += v72;
          --v30;
        }
        while (v30);
        goto LABEL_162;
      case 1:
        v68 = 0;
        do
        {
          v87 = *v19++;
          v88 = (2 * v87) ^ (v87 >> 31);
          if (v88 < 0x80)
          {
            v85 = 0;
          }
          else
          {
            v123 = v88 | 0x80;
            if (v88 < 0x4000)
            {
              v88 >>= 7;
              v85 = 1;
            }
            else
            {
              LOBYTE(v124) = (v88 >> 7) | 0x80;
              if (v88 < 0x200000)
              {
                v88 >>= 14;
                v85 = 2;
              }
              else
              {
                BYTE1(v124) = (v88 >> 14) | 0x80;
                v89 = v88 >> 21;
                v88 >>= 28;
                if (v88)
                {
                  BYTE2(v124) = v89 | 0x80;
                  v85 = 4;
                }
                else
                {
                  LOBYTE(v88) = v89;
                  v85 = 3;
                }
              }
            }
          }
          v86 = v85 + 1;
          *(&v123 + v85) = v88;
          a1 = (_QWORD *)((uint64_t (*)(_QWORD, uint64_t, char *))*a2)(a2, v85 + 1, &v123);
          v68 += v86;
          --v30;
        }
        while (v30);
        goto LABEL_162;
      case 2:
      case 7:
      case 0xA:
        goto LABEL_161;
      case 3:
      case 8:
        v77 = 0;
        v68 = 0;
        while (1)
        {
          v81 = *(_QWORD *)&v19[2 * v77];
          v82 = HIDWORD(v81);
          if (HIDWORD(v81))
          {
            v123 = v81 | 0x80;
            LOBYTE(v124) = (v81 >> 7) | 0x80;
            BYTE1(v124) = (v81 >> 14) | 0x80;
            BYTE2(v124) = (v81 >> 21) | 0x80;
            LOBYTE(v81) = v81 >> 28;
            if (v82 < 8)
            {
              v79 = 5;
              LODWORD(v78) = 4;
              goto LABEL_181;
            }
            HIBYTE(v124) = v81 | 0x80;
            LODWORD(v81) = v82 >> 3;
            if (v82 < 0x400)
            {
              LODWORD(v78) = 5;
            }
            else
            {
              v78 = 5;
              do
              {
                *(&v123 + v78++) = v81 | 0x80;
                v84 = v81 >> 14;
                LODWORD(v81) = v81 >> 7;
              }
              while (v84);
            }
          }
          else if (v81 < 0x80)
          {
            LODWORD(v78) = 0;
          }
          else
          {
            v123 = v81 | 0x80;
            if (v81 < 0x4000)
            {
              LODWORD(v78) = 1;
              LODWORD(v81) = v81 >> 7;
            }
            else
            {
              LOBYTE(v124) = (v81 >> 7) | 0x80;
              if (v81 < 0x200000)
              {
                LODWORD(v78) = 2;
                LODWORD(v81) = v81 >> 14;
              }
              else
              {
                BYTE1(v124) = (v81 >> 14) | 0x80;
                v83 = v81 >> 21;
                LODWORD(v81) = v81 >> 28;
                if ((_DWORD)v81)
                {
                  BYTE2(v124) = v83 | 0x80;
                  LODWORD(v78) = 4;
                }
                else
                {
                  LODWORD(v78) = 3;
                  LOBYTE(v81) = v83;
                }
              }
            }
          }
          v79 = v78 + 1;
LABEL_181:
          *(&v123 + v78) = v81;
          v80 = v79;
          a1 = (_QWORD *)((uint64_t (*)(_QWORD, _QWORD, char *))*a2)(a2, v79, &v123);
          v68 += v80;
          if (++v77 == v30)
            goto LABEL_162;
        }
      case 4:
        v90 = 0;
        v68 = 0;
        break;
      case 5:
      case 9:
      case 0xB:
        v67 = 3;
LABEL_161:
        v68 = ((_DWORD)v18 << v67);
        a1 = (_QWORD *)((uint64_t (*)(_QWORD, uint64_t, unsigned int *))*a2)(a2, v68, v19);
        goto LABEL_162;
      case 6:
        v68 = 0;
        do
        {
          v101 = *v19++;
          v100 = v101;
          if (v101 < 0x80)
          {
            v98 = 0;
          }
          else
          {
            v123 = v100 | 0x80;
            if (v100 < 0x4000)
            {
              v100 >>= 7;
              v98 = 1;
            }
            else
            {
              LOBYTE(v124) = (v100 >> 7) | 0x80;
              if (v100 < 0x200000)
              {
                v100 >>= 14;
                v98 = 2;
              }
              else
              {
                BYTE1(v124) = (v100 >> 14) | 0x80;
                v102 = v100 >> 21;
                v100 >>= 28;
                if (v100)
                {
                  BYTE2(v124) = v102 | 0x80;
                  v98 = 4;
                }
                else
                {
                  LOBYTE(v100) = v102;
                  v98 = 3;
                }
              }
            }
          }
          v99 = v98 + 1;
          *(&v123 + v98) = v100;
          a1 = (_QWORD *)((uint64_t (*)(_QWORD, uint64_t, char *))*a2)(a2, v98 + 1, &v123);
          v68 += v99;
          --v30;
        }
        while (v30);
        goto LABEL_162;
      case 0xC:
        v103 = v18;
        do
        {
          v104 = *v19++;
          v123 = v104 != 0;
          a1 = (_QWORD *)((uint64_t (*)(_QWORD, uint64_t, char *))*a2)(a2, 1, &v123);
          --v103;
        }
        while (v103);
        v68 = v18;
        goto LABEL_162;
      default:
        protobuf_c_message_pack_to_buffer_cold_3();
    }
    while (1)
    {
      v94 = (2 * *(_QWORD *)&v19[2 * v90]) ^ (*(uint64_t *)&v19[2 * v90] >> 63);
      v95 = HIDWORD(v94);
      if (HIDWORD(v94))
      {
        v123 = v94 | 0x80;
        LOBYTE(v124) = (v94 >> 7) | 0x80;
        BYTE1(v124) = (v94 >> 14) | 0x80;
        BYTE2(v124) = (v94 >> 21) | 0x80;
        LOBYTE(v94) = v94 >> 28;
        if (v95 < 8)
        {
          v92 = 5;
          LODWORD(v91) = 4;
          goto LABEL_212;
        }
        HIBYTE(v124) = v94 | 0x80;
        LODWORD(v94) = v95 >> 3;
        if (v95 < 0x400)
        {
          LODWORD(v91) = 5;
        }
        else
        {
          v91 = 5;
          do
          {
            *(&v123 + v91++) = v94 | 0x80;
            v97 = v94 >> 14;
            LODWORD(v94) = v94 >> 7;
          }
          while (v97);
        }
      }
      else if (v94 < 0x80)
      {
        LODWORD(v91) = 0;
      }
      else
      {
        v123 = v94 | 0x80;
        if (v94 < 0x4000)
        {
          LODWORD(v91) = 1;
          LODWORD(v94) = v94 >> 7;
        }
        else
        {
          LOBYTE(v124) = (v94 >> 7) | 0x80;
          if (v94 < 0x200000)
          {
            LODWORD(v91) = 2;
            LODWORD(v94) = v94 >> 14;
          }
          else
          {
            BYTE1(v124) = (v94 >> 14) | 0x80;
            v96 = v94 >> 21;
            LODWORD(v94) = v94 >> 28;
            if ((_DWORD)v94)
            {
              BYTE2(v124) = v96 | 0x80;
              LODWORD(v91) = 4;
            }
            else
            {
              LODWORD(v91) = 3;
              LOBYTE(v94) = v96;
            }
          }
        }
      }
      v92 = v91 + 1;
LABEL_212:
      *(&v123 + v91) = v94;
      v93 = v92;
      a1 = (_QWORD *)((uint64_t (*)(_QWORD, _QWORD, char *))*a2)(a2, v92, &v123);
      v68 += v93;
      if (++v90 == v30)
      {
LABEL_162:
        if (v68 != v31)
          protobuf_c_message_pack_to_buffer_cold_4();
        v8 = v117 + v31;
LABEL_6:
        v7 += v8;
        ++v6;
        v3 = (_DWORD *)*v5;
        if (v6 >= *(unsigned int *)(*v5 + 48))
          goto LABEL_244;
        goto LABEL_7;
      }
    }
  }
  v7 = 0;
LABEL_244:
  if (*((_DWORD *)v5 + 2))
  {
    v105 = 0;
    v106 = 0;
    do
    {
      v111 = v5[2];
      v112 = *(_DWORD *)(v111 + v105);
      if (v112 >> 29)
      {
        v107 = (8 * v112) | 0x80;
        v119 = (v112 >> 4) | 0x80;
        v120 = (v112 >> 11) | 0x80;
        v121 = (v112 >> 18) | 0x80;
        HIDWORD(v108) = v112 >> 29;
        LODWORD(v108) = 8 * v112;
        v122 = v108 >> 28;
        v109 = 5;
      }
      else
      {
        LOBYTE(v113) = 8 * v112;
        if (v112 < 0x10)
        {
          v115 = 0;
        }
        else
        {
          v118 = v113 | 0x80;
          v113 = v112 >> 4;
          if (v112 < 0x800)
          {
            v115 = 1;
          }
          else
          {
            v119 = v113 | 0x80;
            v113 = v112 >> 11;
            if (v112 < 0x40000)
            {
              v115 = 2;
            }
            else
            {
              v120 = v113 | 0x80;
              v113 = v112 >> 18;
              v114 = v112 >> 25;
              if (v114)
              {
                v121 = v113 | 0x80;
                LOBYTE(v113) = v114;
                v115 = 4;
              }
              else
              {
                v115 = 3;
              }
            }
          }
        }
        v109 = v115 + 1;
        *(&v118 + v115) = v113;
        v107 = v118;
      }
      v110 = v111 + v105;
      v118 = v107 | *(_DWORD *)(v111 + v105 + 4);
      (*a2)(a2, v109, &v118);
      (*a2)(a2, *(_QWORD *)(v110 + 8), *(char **)(v110 + 16));
      v7 += v109 + *(_QWORD *)(v110 + 8);
      ++v106;
      v105 += 24;
    }
    while (v106 < *((unsigned int *)v5 + 2));
  }
  return v7;
}

uint64_t required_field_pack_to_buffer(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, uint64_t, char *))
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  const char *v28;
  size_t v29;
  size_t v30;
  unsigned int v31;
  char *v32;
  unsigned int v33;
  unsigned int v34;
  char *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t packed_size;
  char *v40;
  unsigned int v41;
  unsigned int v42;
  int32x4_t v43;
  int32x4_t v44;
  int16x8_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a1 + 8);
  if (v5 >> 29)
  {
    v50 = (8 * v5) | 0x80;
    v51 = (v5 >> 4) | 0x80;
    v52 = (v5 >> 11) | 0x80;
    v53 = (v5 >> 18) | 0x80;
    HIDWORD(v9) = v5 >> 29;
    LODWORD(v9) = 8 * v5;
    v54 = v9 >> 28;
    v10 = 5;
  }
  else
  {
    LOBYTE(v6) = 8 * v5;
    if (v5 < 0x10)
    {
      v8 = 0;
    }
    else
    {
      v50 = v6 | 0x80;
      v6 = v5 >> 4;
      if (v5 < 0x800)
      {
        v8 = 1;
      }
      else
      {
        v51 = v6 | 0x80;
        v6 = v5 >> 11;
        if (v5 < 0x40000)
        {
          v8 = 2;
        }
        else
        {
          v52 = v6 | 0x80;
          v6 = v5 >> 18;
          v7 = v5 >> 25;
          if (v5 >> 25)
          {
            v53 = v6 | 0x80;
            v8 = 4;
            LOBYTE(v6) = v7;
          }
          else
          {
            v8 = 3;
          }
        }
      }
    }
    v10 = v8 + 1;
    *(&v50 + v8) = v6;
  }
  switch(*(_DWORD *)(a1 + 16))
  {
    case 0:
    case 0xD:
      v12 = *(_DWORD *)a2;
      v13 = &v50 + v10;
      if ((*(_DWORD *)a2 & 0x80000000) != 0)
      {
        *v13 = v12 | 0x80;
        v43 = vdupq_n_s32(v12);
        v44 = (int32x4_t)vshlq_u32((uint32x4_t)v43, (uint32x4_t)xmmword_18DCB7F80);
        v45 = (int16x8_t)vshlq_s32(v43, (int32x4_t)xmmword_18DCB7F80);
        v44.i32[3] = v45.i32[3];
        v45.i64[0] = *(_QWORD *)&vmovn_s32(v44) | 0x80008000800080;
        *(_DWORD *)(v13 + 1) = vmovn_s16(v45).u32[0];
        *(_DWORD *)(v13 + 5) = -1;
        v13[9] = 1;
        v46 = 10;
        goto LABEL_90;
      }
      if (v12 < 0x80)
      {
        v15 = 0;
      }
      else
      {
        *v13 = v12 | 0x80;
        v14 = v12 >> 7;
        if (v12 < 0x4000)
        {
          v15 = 1;
        }
        else
        {
          v13[1] = v14 | 0x80;
          v14 = v12 >> 14;
          if (v12 < 0x200000)
          {
            v15 = 2;
          }
          else
          {
            v13[2] = v14 | 0x80;
            v14 = v12 >> 21;
            v12 >>= 28;
            if (v12)
            {
              v13[3] = v14 | 0x80;
              v15 = 4;
              goto LABEL_89;
            }
            v15 = 3;
          }
        }
        LOBYTE(v12) = v14;
      }
LABEL_89:
      v46 = v15 + 1;
      v13[v15] = v12;
LABEL_90:
      v11 = v46 + v10;
      goto LABEL_91;
    case 1:
      v21 = &v50 + v10;
      v22 = (2 * *(_DWORD *)a2) ^ (*(int *)a2 >> 31);
      if (v22 >= 0x80)
        goto LABEL_29;
      goto LABEL_42;
    case 2:
    case 7:
    case 0xA:
      v50 |= 5u;
      *(_DWORD *)(&v50 + v10) = *(_DWORD *)a2;
      v11 = v10 + 4;
      goto LABEL_91;
    case 3:
    case 8:
      v16 = *(_QWORD *)a2;
      v17 = &v50 + v10;
      v18 = HIDWORD(*(_QWORD *)a2);
      if (!(_DWORD)v18)
        goto LABEL_36;
      *v17 = v16 | 0x80;
      v17[1] = (v16 >> 7) | 0x80;
      v17[2] = (v16 >> 14) | 0x80;
      v17[3] = (v16 >> 21) | 0x80;
      LOBYTE(v16) = __PAIR64__(v18, v16) >> 28;
      if (v18 < 8)
        goto LABEL_35;
      v17[4] = v16 | 0x80;
      LODWORD(v16) = v18 >> 3;
      if (v18 < 0x400)
        goto LABEL_73;
      v19 = 5;
      do
      {
        v17[v19++] = v16 | 0x80;
        v20 = v16 >> 14;
        LODWORD(v16) = v16 >> 7;
      }
      while (v20);
      goto LABEL_96;
    case 4:
      v17 = &v50 + v10;
      v16 = (2 * *(_QWORD *)a2) ^ (*(uint64_t *)a2 >> 63);
      v25 = HIDWORD(v16);
      if (HIDWORD(v16))
      {
        *v17 = v16 | 0x80;
        v17[1] = (v16 >> 7) | 0x80;
        v17[2] = (v16 >> 14) | 0x80;
        v17[3] = (v16 >> 21) | 0x80;
        LOBYTE(v16) = v16 >> 28;
        if (v25 < 8)
        {
LABEL_35:
          v26 = 5;
          LODWORD(v19) = 4;
          goto LABEL_97;
        }
        v17[4] = v16 | 0x80;
        LODWORD(v16) = v25 >> 3;
        if (v25 < 0x400)
        {
LABEL_73:
          LODWORD(v19) = 5;
        }
        else
        {
          v19 = 5;
          do
          {
            v17[v19++] = v16 | 0x80;
            v47 = v16 >> 14;
            LODWORD(v16) = v16 >> 7;
          }
          while (v47);
        }
      }
      else
      {
LABEL_36:
        if (v16 < 0x80)
        {
          LODWORD(v19) = 0;
        }
        else
        {
          *v17 = v16 | 0x80;
          v27 = v16 >> 7;
          if (v16 < 0x4000)
          {
            LODWORD(v19) = 1;
          }
          else
          {
            v17[1] = v27 | 0x80;
            v27 = v16 >> 14;
            if (v16 < 0x200000)
            {
              LODWORD(v19) = 2;
            }
            else
            {
              v17[2] = v27 | 0x80;
              v27 = v16 >> 21;
              LODWORD(v16) = v16 >> 28;
              if ((_DWORD)v16)
              {
                v17[3] = v27 | 0x80;
                LODWORD(v19) = 4;
                goto LABEL_96;
              }
              LODWORD(v19) = 3;
            }
          }
          LOBYTE(v16) = v27;
        }
      }
LABEL_96:
      v26 = v19 + 1;
LABEL_97:
      v17[v19] = v16;
      v11 = v10 + v26;
      (*a3)(a3, v11, &v50);
      return v11;
    case 5:
    case 9:
    case 0xB:
      v50 |= 1u;
      *(_QWORD *)(&v50 + v10) = *(_QWORD *)a2;
      v11 = v10 + 8;
      goto LABEL_91;
    case 6:
      v22 = *(_DWORD *)a2;
      v21 = &v50 + v10;
      if (*(_DWORD *)a2 >= 0x80u)
      {
LABEL_29:
        *v21 = v22 | 0x80;
        v23 = v22 >> 7;
        if (v22 < 0x4000)
        {
          v24 = 1;
        }
        else
        {
          v21[1] = v23 | 0x80;
          v23 = v22 >> 14;
          if (v22 < 0x200000)
          {
            v24 = 2;
          }
          else
          {
            v21[2] = v23 | 0x80;
            v23 = v22 >> 21;
            v22 >>= 28;
            if (v22)
            {
              v21[3] = v23 | 0x80;
              v24 = 4;
              goto LABEL_85;
            }
            v24 = 3;
          }
        }
        LOBYTE(v22) = v23;
      }
      else
      {
LABEL_42:
        v24 = 0;
      }
LABEL_85:
      v21[v24] = v22;
      v11 = v10 + v24 + 1;
      goto LABEL_91;
    case 0xC:
      *(&v50 + v10) = *(_DWORD *)a2 != 0;
      v11 = v10 + 1;
      goto LABEL_91;
    case 0xE:
      v28 = *(const char **)a2;
      if (*(_QWORD *)a2)
      {
        v29 = strlen(v28);
        v30 = v29;
        v50 |= 2u;
        LOBYTE(v31) = v29;
        if (v29 < 0x80)
        {
          v34 = 0;
        }
        else
        {
          v32 = &v50 + v10;
          *(&v50 + v10) = v29 | 0x80;
          v33 = v29 >> 7;
          if (v29 < 0x4000)
          {
            v34 = 1;
          }
          else
          {
            v32[1] = v33 | 0x80;
            v33 = v29 >> 14;
            if (v29 < 0x200000)
            {
              v34 = 2;
            }
            else
            {
              v32[2] = v33 | 0x80;
              v33 = v29 >> 21;
              v31 = v29 >> 28;
              if (v29 >> 28)
              {
                v32[3] = v33 | 0x80;
                v34 = 4;
                goto LABEL_103;
              }
              v34 = 3;
            }
          }
          LOBYTE(v31) = v33;
        }
      }
      else
      {
        v30 = 0;
        LOBYTE(v31) = 0;
        v34 = 0;
        v50 |= 2u;
      }
LABEL_103:
      *(&v50 + v10 + v34) = v31;
      v49 = v10 + v34 + 1;
      (*a3)(a3, v49, &v50);
      (*a3)(a3, v30, (char *)v28);
      return v49 + v30;
    case 0xF:
      v30 = *(_QWORD *)a2;
      v50 |= 2u;
      v35 = &v50 + v10;
      if (v30 < 0x80)
      {
        v37 = 0;
        LOBYTE(v36) = v30;
      }
      else
      {
        *v35 = v30 | 0x80;
        v36 = v30 >> 7;
        if (v30 < 0x4000)
        {
          v37 = 1;
        }
        else
        {
          v35[1] = v36 | 0x80;
          v36 = v30 >> 14;
          if (v30 < 0x200000)
          {
            v37 = 2;
          }
          else
          {
            v35[2] = v36 | 0x80;
            v36 = v30 >> 21;
            if (v30 >> 28)
            {
              v35[3] = v36 | 0x80;
              v37 = 4;
              v36 = v30 >> 28;
            }
            else
            {
              v37 = 3;
            }
          }
        }
      }
      v35[v37] = v36;
      v49 = v10 + v37 + 1;
      (*a3)(a3, v49, &v50);
      (*a3)(a3, v30, *(char **)(a2 + 8));
      return v49 + v30;
    case 0x10:
      v38 = *(_QWORD *)a2;
      v50 |= 2u;
      if (v38)
      {
        packed_size = protobuf_c_message_get_packed_size(v38);
        v30 = packed_size;
        v40 = &v50 + v10;
        if (packed_size < 0x80)
        {
          v42 = 0;
          LOBYTE(v41) = packed_size;
        }
        else
        {
          *v40 = packed_size | 0x80;
          v41 = packed_size >> 7;
          if (packed_size < 0x4000)
          {
            v42 = 1;
          }
          else
          {
            v40[1] = v41 | 0x80;
            v41 = packed_size >> 14;
            if (packed_size < 0x200000)
            {
              v42 = 2;
            }
            else
            {
              v40[2] = v41 | 0x80;
              v41 = packed_size >> 21;
              if (packed_size >> 28)
              {
                v40[3] = v41 | 0x80;
                v42 = 4;
                v41 = packed_size >> 28;
              }
              else
              {
                v42 = 3;
              }
            }
          }
        }
        v40[v42] = v41;
        v49 = v10 + v42 + 1;
        (*a3)(a3, v49, &v50);
        protobuf_c_message_pack_to_buffer(v38, a3);
        return v49 + v30;
      }
      else
      {
        *(&v50 + v10) = 0;
        v11 = v10 + 1;
LABEL_91:
        (*a3)(a3, v11, &v50);
      }
      return v11;
    default:
      required_field_pack_to_buffer_cold_1();
  }
}

_QWORD *protobuf_c_message_unpack(uint64_t a1, uint64_t (**a2)(int, size_t size), unint64_t a3, unsigned __int8 *a4)
{
  uint64_t v4;
  uint64_t (**v8)(int, size_t);
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  char *v12;
  _QWORD *v13;
  uint64_t (*v14)(_QWORD *);
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int8x16_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  int *v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned __int8 *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unint64_t v70;
  int v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int8x16_t *v76;
  int64x2_t v77;
  unint64_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  uint8x16_t v90;
  uint16x8_t v91;
  uint32x4_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int64x2_t v95;
  uint32x4_t v96;
  int64x2_t v97;
  uint16x8_t v98;
  uint32x4_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  uint32x4_t v103;
  int64x2_t v104;
  int64x2_t v105;
  uint8x16_t v106;
  uint16x8_t v107;
  uint32x4_t v108;
  int64x2_t v109;
  int64x2_t v110;
  uint32x4_t v111;
  int64x2_t v112;
  uint16x8_t v113;
  uint32x4_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  uint32x4_t v118;
  int64x2_t v119;
  uint64_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int8x8_t *v123;
  unint64_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int8x8_t v127;
  uint16x8_t v128;
  uint32x4_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int64x2_t v132;
  int64x2_t v133;
  uint32x4_t v134;
  int64x2_t v135;
  BOOL v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  _DWORD *v141;
  uint64_t v142;
  int v143;
  _DWORD *v144;
  uint64_t v145;
  unint64_t v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  unsigned int v160;
  int32x4_t v161;
  int8x16_t v162;
  int32x4_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  size_t *v174;
  void *v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  char *v180;
  uint64_t v181;
  unint64_t v182;
  char v183;
  unint64_t v184;
  uint64_t v185;
  int v186;
  unsigned int v187;
  uint64_t v188;
  unsigned int v189;
  unsigned int v190;
  uint64_t v191;
  int v192;
  int v193;
  int v194;
  uint64_t v195;
  int *v196;
  int v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  size_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int8x8_t v216;
  unint64_t v217;
  unsigned int v218;
  unint64_t v219;
  unint64_t v220;
  int32x4_t v221;
  int8x16_t v222;
  int8x16_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int8x8_t *v226;
  unint64_t v227;
  int8x16_t v228;
  int8x16_t v229;
  int8x8_t v230;
  uint16x8_t v231;
  uint32x4_t v232;
  uint64x2_t v233;
  uint64x2_t v234;
  uint64x2_t v235;
  uint32x4_t v236;
  uint64x2_t v237;
  uint64x2_t v238;
  uint64x2_t v239;
  uint64x2_t v240;
  uint64x2_t v241;
  int8x16_t v242;
  int8x16_t v243;
  unsigned __int128 v244;
  int8x16_t *v245;
  unint64_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  int8x16_t v251;
  int8x16_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int8x16_t v257;
  uint8x16_t v258;
  uint16x8_t v259;
  uint32x4_t v260;
  uint64x2_t v261;
  uint64x2_t v262;
  uint64x2_t v263;
  uint32x4_t v264;
  uint64x2_t v265;
  uint16x8_t v266;
  uint32x4_t v267;
  uint64x2_t v268;
  uint64x2_t v269;
  uint64x2_t v270;
  uint32x4_t v271;
  uint64x2_t v272;
  uint64x2_t v273;
  uint64x2_t v274;
  uint64x2_t v275;
  uint64x2_t v276;
  uint64x2_t v277;
  uint64x2_t v278;
  uint64x2_t v279;
  uint64x2_t v280;
  int8x16_t v281;
  uint64_t v282;
  char *v283;
  char v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int8x8_t v294;
  unint64_t v295;
  unsigned int v296;
  unint64_t v297;
  unint64_t v298;
  int32x4_t v299;
  int8x16_t v300;
  int8x16_t v301;
  int32x4_t v302;
  int32x4_t v303;
  int8x8_t *v304;
  unint64_t v305;
  int8x16_t v306;
  int8x16_t v307;
  int8x8_t v308;
  uint16x8_t v309;
  uint32x4_t v310;
  uint64x2_t v311;
  uint64x2_t v312;
  uint64x2_t v313;
  uint32x4_t v314;
  uint64x2_t v315;
  uint64x2_t v316;
  uint64x2_t v317;
  uint64x2_t v318;
  uint64x2_t v319;
  int8x16_t v320;
  int8x16_t v321;
  unsigned __int128 v322;
  int32x4_t v323;
  int32x4_t v324;
  int32x4_t v325;
  int32x4_t v326;
  int8x16_t *v327;
  unint64_t v328;
  int8x16_t v329;
  int8x16_t v330;
  int8x16_t v331;
  int8x16_t v332;
  int8x16_t v333;
  int8x16_t v334;
  int8x16_t v335;
  uint8x16_t v336;
  uint16x8_t v337;
  uint32x4_t v338;
  uint64x2_t v339;
  uint64x2_t v340;
  uint64x2_t v341;
  uint32x4_t v342;
  uint64x2_t v343;
  uint16x8_t v344;
  uint32x4_t v345;
  uint64x2_t v346;
  uint64x2_t v347;
  uint64x2_t v348;
  uint32x4_t v349;
  uint64x2_t v350;
  uint64x2_t v351;
  uint64x2_t v352;
  uint64x2_t v353;
  uint64x2_t v354;
  uint64x2_t v355;
  uint64x2_t v356;
  uint64x2_t v357;
  uint64x2_t v358;
  int8x16_t v359;
  uint64_t v360;
  char *v361;
  char v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unsigned int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  char *v372;
  uint64_t v373;
  char v374;
  int v375;
  unsigned int v376;
  unsigned int i;
  unint64_t v378;
  unsigned int k;
  uint64_t v380;
  unsigned int j;
  unsigned int v383;
  unsigned int v384;
  char v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  int64x2_t v391;
  char *v392;
  char *v393;
  _QWORD *v394;
  uint64_t v395;
  char v396;
  char *v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  char v409;
  uint64_t v410;

  v410 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 56);
  v408 = 0u;
  v407 = 0u;
  v406 = 0u;
  v405 = 0u;
  v404 = 0u;
  v403 = 0u;
  v401 = 0u;
  v402 = 0u;
  v399 = 0u;
  v400 = 0u;
  v398 = 0u;
  if (*(_DWORD *)a1 != 682290937)
    protobuf_c_message_unpack_cold_8();
  if (a2)
    v8 = a2;
  else
    v8 = &protobuf_c__allocator;
  v9 = (*v8)((int)v8[2], *(_QWORD *)(a1 + 40));
  if (!v9)
    return 0;
  v10 = (_QWORD *)v9;
  v397 = &v409;
  v11 = *(_DWORD *)(a1 + 48) + 7;
  if (v11 >= 0x88)
  {
    v12 = (char *)(*v8)((int)v8[2], v11 >> 3);
    if (!v12)
      goto LABEL_397;
  }
  else
  {
    v12 = &v396;
  }
  v395 = (uint64_t)v8;
  bzero(v12, v11 >> 3);
  v14 = *(uint64_t (**)(_QWORD *))(a1 + 88);
  v384 = v11;
  if (v14)
  {
    v15 = v14(v10);
    v19 = v4;
  }
  else
  {
    bzero(v10, *(_QWORD *)(a1 + 40));
    *v10 = a1;
    v19 = v4;
    if (*(_DWORD *)(a1 + 48))
    {
      v138 = 0;
      v139 = 0;
      do
      {
        v140 = *(_QWORD *)(a1 + 56);
        v141 = *(_DWORD **)(v140 + v138 + 40);
        if (v141 && *(_DWORD *)(v140 + v138 + 12) != 2)
        {
          v142 = v140 + v138;
          v143 = *(_DWORD *)(v142 + 16);
          v144 = (_DWORD *)((char *)v10 + *(unsigned int *)(v142 + 24));
          switch(v143)
          {
            case 0:
            case 1:
            case 2:
            case 6:
            case 7:
            case 10:
            case 12:
            case 13:
              *v144 = *v141;
              break;
            case 3:
            case 4:
            case 5:
            case 8:
            case 9:
            case 11:
              v141 = *(_DWORD **)v141;
              goto LABEL_143;
            case 14:
            case 16:
LABEL_143:
              *(_QWORD *)v144 = v141;
              break;
            case 15:
              *(_OWORD *)v144 = *(_OWORD *)v141;
              break;
            default:
              break;
          }
        }
        ++v139;
        v138 += 72;
      }
      while (v139 < *(unsigned int *)(a1 + 48));
    }
  }
  v393 = v12;
  v394 = v10;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v383 = 0;
  v23.i64[0] = -1;
  v23.i64[1] = -1;
  while (a3)
  {
    if (a3 >= 5)
      v25 = 5;
    else
      v25 = a3;
    v26 = *a4;
    if (v26 < 8)
      goto LABEL_378;
    v27 = (v26 >> 3) & 0xF;
    if ((v26 & 0x80) != 0)
    {
      if (v25 < 2)
        goto LABEL_378;
      v29 = a4[1];
      if ((char)a4[1] < 0)
      {
        if (v25 == 2)
          goto LABEL_378;
        v30 = (v26 >> 3) & 0xF | (16 * (v29 & 0x7F));
        v31 = a4[2];
        if ((char)a4[2] < 0)
        {
          if (v25 == 3)
            goto LABEL_378;
          v32 = v30 & 0xFFFC07FF | ((v31 & 0x7F) << 11);
          v33 = a4[3];
          if ((char)a4[3] < 0)
          {
            if (v25 == 4)
              goto LABEL_378;
            v34 = (char)a4[4];
            if (v34 < 0)
              goto LABEL_378;
            v28 = 5;
            v27 = (v34 << 25) | v32 & 0xFE03FFFF | ((v33 & 0x7F) << 18);
            if (!v19)
              goto LABEL_43;
          }
          else
          {
            v28 = 4;
            v27 = (v33 << 18) | v32;
            if (!v19)
              goto LABEL_43;
          }
        }
        else
        {
          v28 = 3;
          v27 = (v31 << 11) | v30;
          if (!v19)
            goto LABEL_43;
        }
      }
      else
      {
        v28 = 2;
        v27 |= 16 * v29;
        if (!v19)
          goto LABEL_43;
      }
    }
    else
    {
      v28 = 1;
      if (!v19)
        goto LABEL_43;
    }
    if (*(_DWORD *)(v19 + 8) == v27)
    {
      v35 = v19;
      if (!*(_DWORD *)(v19 + 12))
        goto LABEL_57;
      goto LABEL_41;
    }
LABEL_43:
    v38 = *(_DWORD *)(a1 + 72);
    if (!v38)
      goto LABEL_60;
    v39 = *(_QWORD *)(a1 + 80);
    if (v38 != 1)
    {
      v40 = 0;
      while (1)
      {
        while (1)
        {
          v41 = v38 >> 1;
          v42 = (v38 >> 1) + v40;
          v43 = *(_DWORD *)(v39 + 8 * v42);
          if (v27 >= v43)
            break;
          v38 >>= 1;
          if (v41 <= 1)
            goto LABEL_51;
        }
        v44 = *(_DWORD *)(v39 + 8 * v42 + 4);
        if (*(_DWORD *)(v39 + 8 * (v42 + 1) + 4) + v43 - v44 > v27)
          break;
        v38 += v40 + ~(_DWORD)v42;
        v40 = v42 + 1;
        if (v38 <= 1)
        {
LABEL_51:
          if (v38)
            goto LABEL_52;
          goto LABEL_60;
        }
      }
      v48 = v27 - v43 + v44;
      if ((v48 & 0x80000000) != 0)
        goto LABEL_60;
LABEL_55:
      v35 = *(_QWORD *)(a1 + 56) + 72 * v48;
      if (!v35)
      {
        v19 = 0;
        v36 = 1;
        v383 = v48;
        v37 = v26 & 7;
        if (v37 > 5)
          goto LABEL_378;
        goto LABEL_61;
      }
      v383 = v48;
      if (!*(_DWORD *)(v35 + 12))
      {
LABEL_57:
        v36 = 0;
        v393[(unint64_t)v383 >> 3] |= 1 << (v383 & 7);
        v19 = v35;
        v37 = v26 & 7;
        if (v37 > 5)
          goto LABEL_378;
        goto LABEL_61;
      }
LABEL_41:
      v36 = 0;
      v19 = v35;
      v37 = v26 & 7;
      if (v37 > 5)
        goto LABEL_378;
      goto LABEL_61;
    }
    v40 = 0;
LABEL_52:
    v45 = (int *)(v39 + 8 * v40);
    v46 = *v45;
    if (*v45 <= v27)
    {
      v47 = v45[1];
      if (v46 - v47 + *(_DWORD *)(v39 + 8 * (v40 + 1) + 4) > v27)
      {
        v48 = v47 + v27 - v46;
        if ((v48 & 0x80000000) == 0)
          goto LABEL_55;
      }
    }
LABEL_60:
    v35 = 0;
    ++v22;
    v36 = 1;
    v37 = v26 & 7;
LABEL_61:
    v49 = &a4[v28];
    v50 = a3 - v28;
    switch(v37)
    {
      case 0u:
        v51 = 10;
        if (v50 < 0xA)
          v51 = v50;
        if (v51)
        {
          v52 = 0;
          while ((char)v49[v52] < 0)
          {
            if (v51 == (_DWORD)++v52)
              goto LABEL_378;
          }
        }
        else
        {
          LODWORD(v52) = 0;
        }
        if ((_DWORD)v52 == v51)
          goto LABEL_378;
        v53 = 0;
        v54 = (v52 + 1);
        v55 = v20;
        if (1 << (v20 + 4) != v21)
          goto LABEL_76;
        goto LABEL_71;
      case 1u:
        if (v50 < 8)
          goto LABEL_378;
        v53 = 0;
        v54 = 8;
        v55 = v20;
        if (1 << (v20 + 4) == v21)
          goto LABEL_71;
        goto LABEL_76;
      case 2u:
        if (v50 >= 5)
          v64 = 5;
        else
          v64 = v50;
        if (!(_DWORD)v64)
          goto LABEL_378;
        v65 = *v49 & 0x7F;
        if ((*v49 & 0x80) != 0)
        {
          if (v64 == 1)
            goto LABEL_378;
          v67 = (char)v49[1];
          v65 |= (unint64_t)(v67 & 0x7F) << 7;
          if (v67 < 0)
          {
            if (v64 == 2)
              goto LABEL_378;
            v68 = (char)v49[2];
            v65 |= (unint64_t)(v68 & 0x7F) << 14;
            if (v68 < 0)
            {
              if (v64 == 3)
                goto LABEL_378;
              v69 = (char)v49[3];
              v65 |= (unint64_t)(v69 & 0x7F) << 21;
              if (v69 < 0)
              {
                if (v64 == 4)
                  goto LABEL_378;
                v71 = (char)v49[4];
                if (v71 < 0)
                  goto LABEL_378;
                v65 |= (unint64_t)(v71 & 0x7F) << 28;
                v66 = 4;
              }
              else
              {
                v66 = 3;
              }
            }
            else
            {
              v66 = 2;
            }
          }
          else
          {
            v66 = 1;
          }
        }
        else
        {
          v66 = 0;
        }
        if ((_DWORD)v66 == (_DWORD)v64 || v65 >> 31 || v65 + v66 >= v50)
          goto LABEL_378;
        v53 = v66 + 1;
        v54 = v65 + v66 + 1;
        v55 = v20;
        if (1 << (v20 + 4) == v21)
        {
LABEL_71:
          if (v55 == 22)
          {
            v20 = 22;
LABEL_378:
            v8 = (uint64_t (**)(int, size_t))v395;
            (*(void (**)(_QWORD, _QWORD *))(v395 + 8))(*(_QWORD *)(v395 + 16), v394);
            v10 = v393;
            if (v20)
            {
              v376 = v20;
              for (i = 1; i <= v376; ++i)
              {
                if ((&v397)[i])
                  (*(void (**)(_QWORD))(v395 + 8))(*(_QWORD *)(v395 + 16));
              }
            }
            v13 = 0;
            if (v384 < 0x88)
              return v13;
LABEL_384:
            if (v10)
              goto LABEL_398;
            return v13;
          }
          v385 = v36;
          v386 = v53;
          v387 = v35;
          v388 = v54;
          v390 = v28;
          v56 = a4;
          v57 = v18;
          v20 = v55 + 1;
          v15 = (*(uint64_t (**)(_QWORD, uint64_t))v395)(*(_QWORD *)(v395 + 16), 32 << (v55 + 5));
          (&v397)[v20] = (char *)v15;
          v21 = 0;
          if (!v15)
            goto LABEL_378;
          v18 = v57;
          v23.i64[0] = -1;
          v23.i64[1] = -1;
          a4 = v56;
          v54 = v388;
          v28 = v390;
          v35 = v387;
          v53 = v386;
          v36 = v385;
        }
        else
        {
LABEL_76:
          v15 = (uint64_t)(&v397)[v55];
        }
        v58 = v15 + 32 * v21;
        *(_DWORD *)v58 = v27;
        *(_BYTE *)(v58 + 4) = v37;
        *(_BYTE *)(v58 + 5) = v53;
        *(_WORD *)(v58 + 6) = 0;
        *(_QWORD *)(v58 + 8) = v35;
        *(_QWORD *)(v58 + 16) = v54;
        *(_QWORD *)(v58 + 24) = v49;
        if ((v36 & 1) != 0 || *(_DWORD *)(v35 + 12) != 2)
          goto LABEL_15;
        v59 = *(unsigned int *)(v35 + 20);
        if (v37 == 2
          && ((v60 = *(_DWORD *)(v35 + 16), (*(_BYTE *)(v35 + 48) & 1) != 0) || (v60 - 14) >= 3))
        {
          v24 = v54 - v53;
          switch(v60)
          {
            case 0:
            case 1:
            case 3:
            case 4:
            case 6:
            case 8:
            case 13:
              if (!v24)
                break;
              v61 = &v49[v53];
              if (v24 < 8)
              {
                v62 = 0;
                v63 = v54 - v53;
                goto LABEL_132;
              }
              if (v24 >= 0x20)
              {
                v72 = 0uLL;
                v70 = v24 & 0xFFFFFFFFFFFFFFE0;
                v73 = 0uLL;
                v74 = 0uLL;
                v75 = 0uLL;
                v76 = (int8x16_t *)&a4[v28 + 16 + v53];
                v77 = 0uLL;
                v78 = v24 & 0xFFFFFFFFFFFFFFE0;
                v79 = 0uLL;
                v80 = 0uLL;
                v81 = 0uLL;
                v82 = 0uLL;
                v83 = 0uLL;
                v84 = 0uLL;
                v85 = 0uLL;
                v86 = 0uLL;
                v87 = 0uLL;
                v88 = 0uLL;
                v89 = 0uLL;
                do
                {
                  v90 = (uint8x16_t)vcgtq_s8(v76[-1], v23);
                  v91 = vmovl_u8(*(uint8x8_t *)v90.i8);
                  v92 = vmovl_u16(*(uint16x4_t *)v91.i8);
                  v93.i64[0] = v92.u32[0];
                  v93.i64[1] = v92.u32[1];
                  v94 = (int8x16_t)vdupq_n_s64(1uLL);
                  v391 = (int64x2_t)vandq_s8(v93, v94);
                  v93.i64[0] = v92.u32[2];
                  v93.i64[1] = v92.u32[3];
                  v95 = (int64x2_t)vandq_s8(v93, v94);
                  v96 = vmovl_high_u16(v91);
                  v93.i64[0] = v96.u32[0];
                  v93.i64[1] = v96.u32[1];
                  v97 = (int64x2_t)vandq_s8(v93, v94);
                  v98 = vmovl_high_u8(v90);
                  v99 = vmovl_u16(*(uint16x4_t *)v98.i8);
                  v93.i64[0] = v99.u32[0];
                  v93.i64[1] = v99.u32[1];
                  v100 = (int64x2_t)vandq_s8(v93, v94);
                  v93.i64[0] = v96.u32[2];
                  v93.i64[1] = v96.u32[3];
                  v101 = (int64x2_t)vandq_s8(v93, v94);
                  v93.i64[0] = v99.u32[2];
                  v93.i64[1] = v99.u32[3];
                  v102 = (int64x2_t)vandq_s8(v93, v94);
                  v103 = vmovl_high_u16(v98);
                  v93.i64[0] = v103.u32[0];
                  v93.i64[1] = v103.u32[1];
                  v104 = (int64x2_t)vandq_s8(v93, v94);
                  v93.i64[0] = v103.u32[2];
                  v93.i64[1] = v103.u32[3];
                  v105 = (int64x2_t)vandq_s8(v93, v94);
                  v106 = (uint8x16_t)vcgtq_s8(*v76, v23);
                  v107 = vmovl_u8(*(uint8x8_t *)v106.i8);
                  v108 = vmovl_u16(*(uint16x4_t *)v107.i8);
                  v93.i64[0] = v108.u32[0];
                  v93.i64[1] = v108.u32[1];
                  v109 = (int64x2_t)vandq_s8(v93, v94);
                  v93.i64[0] = v108.u32[2];
                  v93.i64[1] = v108.u32[3];
                  v110 = (int64x2_t)vandq_s8(v93, v94);
                  v111 = vmovl_high_u16(v107);
                  v93.i64[0] = v111.u32[0];
                  v93.i64[1] = v111.u32[1];
                  v112 = (int64x2_t)vandq_s8(v93, v94);
                  v113 = vmovl_high_u8(v106);
                  v114 = vmovl_u16(*(uint16x4_t *)v113.i8);
                  v93.i64[0] = v114.u32[0];
                  v93.i64[1] = v114.u32[1];
                  v115 = (int64x2_t)vandq_s8(v93, v94);
                  v93.i64[0] = v111.u32[2];
                  v93.i64[1] = v111.u32[3];
                  v116 = (int64x2_t)vandq_s8(v93, v94);
                  v93.i64[0] = v114.u32[2];
                  v93.i64[1] = v114.u32[3];
                  v117 = (int64x2_t)vandq_s8(v93, v94);
                  v118 = vmovl_high_u16(v113);
                  v93.i64[0] = v118.u32[0];
                  v93.i64[1] = v118.u32[1];
                  v119 = (int64x2_t)vandq_s8(v93, v94);
                  v93.i64[0] = v118.u32[2];
                  v93.i64[1] = v118.u32[3];
                  v81 = vaddq_s64(v81, v105);
                  v80 = vaddq_s64(v80, v104);
                  v79 = vaddq_s64(v79, v102);
                  v75 = vaddq_s64(v75, v101);
                  v77 = vaddq_s64(v77, v100);
                  v74 = vaddq_s64(v74, v97);
                  v73 = vaddq_s64(v73, v95);
                  v72 = vaddq_s64(v72, v391);
                  v89 = vaddq_s64(v89, (int64x2_t)vandq_s8(v93, v94));
                  v88 = vaddq_s64(v88, v119);
                  v87 = vaddq_s64(v87, v117);
                  v85 = vaddq_s64(v85, v116);
                  v23.i64[0] = -1;
                  v23.i64[1] = -1;
                  v86 = vaddq_s64(v86, v115);
                  v84 = vaddq_s64(v84, v112);
                  v83 = vaddq_s64(v83, v110);
                  v82 = vaddq_s64(v82, v109);
                  v76 += 2;
                  v78 -= 32;
                }
                while (v78);
                v120 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v82, v72), vaddq_s64(v86, v77)), vaddq_s64(vaddq_s64(v84, v74), vaddq_s64(v88, v80))), vaddq_s64(vaddq_s64(vaddq_s64(v83, v73), vaddq_s64(v87, v79)), vaddq_s64(vaddq_s64(v85, v75), vaddq_s64(v89, v81)))));
                v62 = v120;
                if (v24 == v70)
                {
                  v24 = v120;
                  break;
                }
                if ((v24 & 0x18) == 0)
                {
                  v63 = v24 & 0x1F;
                  v61 += v70;
LABEL_132:
                  v24 = v62;
                  do
                  {
                    v137 = *v61++;
                    v24 += (v137 >> 7) ^ 1;
                    --v63;
                  }
                  while (v63);
                  break;
                }
              }
              else
              {
                v62 = 0;
                v70 = 0;
              }
              v61 += v24 & 0xFFFFFFFFFFFFFFF8;
              v63 = v24 & 7;
              v121 = 0uLL;
              v122 = (int64x2_t)(unint64_t)v62;
              v123 = (int8x8_t *)&a4[v53 + v28 + v70];
              v124 = v70 - (v24 & 0xFFFFFFFFFFFFFFF8);
              v125 = 0uLL;
              v126 = 0uLL;
              do
              {
                v127 = *v123++;
                v128 = vmovl_u8((uint8x8_t)vcgt_s8(v127, (int8x8_t)-1));
                v129 = vmovl_u16(*(uint16x4_t *)v128.i8);
                v130.i64[0] = v129.u32[0];
                v130.i64[1] = v129.u32[1];
                v131 = (int8x16_t)vdupq_n_s64(1uLL);
                v132 = (int64x2_t)vandq_s8(v130, v131);
                v130.i64[0] = v129.u32[2];
                v130.i64[1] = v129.u32[3];
                v133 = (int64x2_t)vandq_s8(v130, v131);
                v134 = vmovl_high_u16(v128);
                v130.i64[0] = v134.u32[0];
                v130.i64[1] = v134.u32[1];
                v135 = (int64x2_t)vandq_s8(v130, v131);
                v130.i64[0] = v134.u32[2];
                v130.i64[1] = v134.u32[3];
                v126 = vaddq_s64(v126, (int64x2_t)vandq_s8(v130, v131));
                v125 = vaddq_s64(v125, v135);
                v121 = vaddq_s64(v121, v133);
                v122 = vaddq_s64(v122, v132);
                v124 += 8;
              }
              while (v124);
              v62 = vaddvq_s64(vaddq_s64(vaddq_s64(v122, v125), vaddq_s64(v121, v126)));
              v136 = v24 == (v24 & 0xFFFFFFFFFFFFFFF8);
              v24 = v62;
              if (!v136)
                goto LABEL_132;
              break;
            case 2:
            case 7:
            case 10:
              if ((v24 & 3) != 0)
                goto LABEL_378;
              v24 >>= 2;
              break;
            case 5:
            case 9:
            case 11:
              if ((v24 & 7) != 0)
                goto LABEL_378;
              v24 >>= 3;
              break;
            case 12:
              break;
            default:
              goto LABEL_378;
          }
        }
        else
        {
          v24 = 1;
        }
        *(_QWORD *)((char *)v394 + v59) += v24;
LABEL_15:
        ++v21;
        a3 = v50 - v54;
        a4 = &v49[v54];
        break;
      case 5u:
        if (v50 < 4)
          goto LABEL_378;
        v53 = 0;
        v54 = 4;
        v55 = v20;
        if (1 << (v20 + 4) != v21)
          goto LABEL_76;
        goto LABEL_71;
      default:
        goto LABEL_378;
    }
  }
  v145 = v22;
  v146 = *(unsigned int *)(a1 + 48);
  v13 = v394;
  v8 = (uint64_t (**)(int, size_t))v395;
  v147 = v20;
  v148 = v21;
  if ((_DWORD)v146)
  {
    v149 = 0;
    v150 = 1;
    do
    {
      v152 = *(_QWORD *)(a1 + 56);
      v153 = *(_DWORD *)(v152 + v149 + 12);
      if (v153)
      {
        if (v153 == 2)
        {
          v154 = *(int *)(v152 + v149 + 16);
          if (v154 >= 0x11)
            protobuf_c_message_pack_cold_1(v15, (uint64_t)v16, v17);
          v155 = *(unsigned int *)(v152 + v149 + 20);
          v156 = *(_QWORD *)((char *)v394 + v155);
          if (v156)
          {
            v157 = qword_18DCB7E88[v154];
            *(_QWORD *)((char *)v394 + v155) = 0;
            if (!*v394)
              protobuf_c_message_unpack_cold_6();
            v15 = (*(uint64_t (**)(_QWORD, uint64_t))v395)(*(_QWORD *)(v395 + 16), v156 * v157);
            if (!v15)
            {
              v378 = *(unsigned int *)(a1 + 48);
              if (v378 > v150)
              {
                do
                {
                  v380 = *(_QWORD *)(a1 + 56) + v149;
                  if (*(_DWORD *)(v380 + 84) == 2)
                  {
                    *(_QWORD *)((char *)v394 + *(unsigned int *)(v380 + 92)) = 0;
                    v378 = *(unsigned int *)(a1 + 48);
                  }
                  ++v150;
                  v149 += 72;
                }
                while (v150 < v378);
              }
              goto LABEL_387;
            }
            *(_QWORD *)((char *)v394 + *(unsigned int *)(v152 + v149 + 24)) = v15;
            v146 = *(unsigned int *)(a1 + 48);
            v21 = v148;
          }
        }
      }
      else if (!*(_QWORD *)(v152 + v149 + 40)
             && ((v393[(v150 - 1) >> 3] >> ((v150 - 1) & 7)) & 1) == 0)
      {
        if (v146 > v150)
        {
          do
          {
            v158 = *(_QWORD *)(a1 + 56) + v149;
            if (*(_DWORD *)(v158 + 84) == 2)
            {
              *(_QWORD *)((char *)v394 + *(unsigned int *)(v158 + 92)) = 0;
              v146 = *(unsigned int *)(a1 + 48);
            }
            ++v150;
            v149 += 72;
          }
          while (v150 < v146);
        }
        goto LABEL_387;
      }
      v149 += 72;
    }
    while (v150++ < v146);
  }
  if (v145)
  {
    v15 = (*(uint64_t (**)(_QWORD, uint64_t))v395)(*(_QWORD *)(v395 + 16), 24 * v145);
    v21 = v148;
    v394[2] = v15;
    if (!v15)
      goto LABEL_387;
  }
  v159 = 0;
  v160 = v21;
  v161.i64[0] = 0x3800000038;
  v161.i64[1] = 0x3800000038;
  v162.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
  v162.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
  v163.i64[0] = 0x7000000070;
  v163.i64[1] = 0x7000000070;
  while (1)
  {
    v164 = 1 << (v159 + 4);
    if (v159 == v147)
      LODWORD(v164) = v160;
    v389 = v164;
    if ((_DWORD)v164)
      break;
LABEL_165:
    if (++v159 > v147)
    {
      v10 = v393;
      if (v147)
      {
        for (j = 1; j <= v147; ++j)
        {
          if ((&v397)[j])
            (*(void (**)(_QWORD))(v395 + 8))(*(_QWORD *)(v395 + 16));
        }
      }
      if (v384 < 0x88)
        return v13;
      goto LABEL_384;
    }
  }
  v165 = 0;
  v392 = (&v397)[v159];
  while (2)
  {
    v166 = (uint64_t)&v392[32 * v165];
    v167 = *(_QWORD *)(v166 + 8);
    if (!v167)
    {
      v171 = v13[2];
      v172 = *((_DWORD *)v13 + 2);
      *((_DWORD *)v13 + 2) = v172 + 1;
      v173 = v171 + 24 * v172;
      *(_DWORD *)v173 = *(_DWORD *)v166;
      *(_DWORD *)(v173 + 4) = *(unsigned __int8 *)(v166 + 4);
      *(_QWORD *)(v173 + 8) = *(_QWORD *)(v166 + 16);
      v174 = (size_t *)(v173 + 8);
      v175 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))v395)(*(_QWORD *)(v395 + 16), *(_QWORD *)(v166 + 16));
      v174[1] = (size_t)v175;
      if (!v175)
        goto LABEL_387;
      v15 = (uint64_t)memcpy(v175, *(const void **)&v392[32 * v165 + 24], *v174);
      v163.i64[0] = 0x7000000070;
      v163.i64[1] = 0x7000000070;
      v162.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
      v162.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
      v161.i64[0] = 0x3800000038;
      v161.i64[1] = 0x3800000038;
      goto LABEL_171;
    }
    v168 = *(unsigned int *)(v167 + 24);
    v169 = (_QWORD *)((char *)v13 + v168);
    switch(*(_DWORD *)(v167 + 12))
    {
      case 0:
        v15 = parse_required_member((uint64_t)&v392[32 * v165], (_QWORD *)((char *)v13 + v168), v395, 1);
        v163.i64[0] = 0x7000000070;
        v163.i64[1] = 0x7000000070;
        v162.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
        v162.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
        v161.i64[0] = 0x3800000038;
        v161.i64[1] = 0x3800000038;
        if ((_DWORD)v15)
          goto LABEL_171;
        goto LABEL_387;
      case 1:
      case 3:
        if ((*(_BYTE *)(v167 + 48) & 4) != 0)
        {
          v185 = *(unsigned int *)(v167 + 20);
          v186 = *(_DWORD *)((char *)v13 + v185);
          if (v186)
          {
            v187 = *(_DWORD *)(*v13 + 72);
            v188 = *(_QWORD *)(*v13 + 80);
            if (v187 == 1)
            {
              v189 = 0;
              goto LABEL_203;
            }
            if (!v187)
              goto LABEL_387;
            v189 = 0;
            do
            {
              while (1)
              {
                v190 = v187 >> 1;
                v191 = (v187 >> 1) + v189;
                v192 = *(_DWORD *)(v188 + 8 * v191);
                v193 = v186 - v192;
                if (v186 >= v192)
                  break;
                v187 >>= 1;
                if (v190 <= 1)
                  goto LABEL_196;
              }
              v15 = *(unsigned int *)(v188 + 8 * (v191 + 1) + 4);
              v194 = *(_DWORD *)(v188 + 8 * v191 + 4);
              if ((int)v15 + v192 - v194 > v186)
              {
                v199 = v193 + v194;
                if (((v193 + v194) & 0x80000000) == 0)
                  goto LABEL_206;
                goto LABEL_387;
              }
              v187 += v189 + ~(_DWORD)v191;
              v189 = v191 + 1;
            }
            while (v187 > 1);
LABEL_196:
            if (!v187)
              goto LABEL_387;
LABEL_203:
            v196 = (int *)(v188 + 8 * v189);
            v197 = *v196;
            if (*v196 > v186)
              goto LABEL_387;
            v198 = v196[1];
            if (v197 - v198 + *(_DWORD *)(v188 + 8 * (v189 + 1) + 4) <= v186)
              goto LABEL_387;
            v199 = v198 + v186 - v197;
            if ((v199 & 0x80000000) != 0)
              goto LABEL_387;
LABEL_206:
            v200 = *(_QWORD *)(*v13 + 56);
            v201 = *(_DWORD *)(v200 + 72 * v199 + 16);
            v202 = 4;
            v203 = 16;
            switch(v201)
            {
              case 0:
              case 1:
              case 2:
              case 6:
              case 7:
              case 10:
              case 12:
              case 13:
                goto LABEL_208;
              case 3:
              case 4:
              case 5:
              case 8:
              case 9:
              case 11:
              case 14:
              case 16:
                v202 = 8;
LABEL_208:
                if (v201 == 16)
                {
                  v204 = (_QWORD *)*v169;
                  if (*v169 && v204 != *(_QWORD **)(v200 + 72 * v199 + 40))
                    protobuf_c_message_free_unpacked(v204, (uint64_t (**)(int, size_t))v395);
                  goto LABEL_217;
                }
                if (v201 != 15)
                {
                  if (v201 == 14 && *v169 && *v169 != *(_QWORD *)(v200 + 72 * v199 + 40))
                    (*(void (**)(_QWORD))(v395 + 8))(*(_QWORD *)(v395 + 16));
LABEL_217:
                  v203 = v202;
                  goto LABEL_218;
                }
                v203 = v202;
LABEL_222:
                v205 = v169[1];
                if (v205)
                {
                  v206 = *(_QWORD *)(v200 + 72 * v199 + 40);
                  if (!v206 || v205 != *(_QWORD *)(v206 + 8))
                    (*(void (**)(_QWORD))(v395 + 8))(*(_QWORD *)(v395 + 16));
                }
LABEL_218:
                bzero(v169, v203);
                v13 = v394;
                break;
              case 15:
                goto LABEL_222;
              default:
                protobuf_c_message_pack_cold_1(v15, (uint64_t)v16, v17);
            }
          }
          v15 = parse_required_member(v166, v169, v395, 1);
          v163.i64[0] = 0x7000000070;
          v163.i64[1] = 0x7000000070;
          v162.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
          v162.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
          v161.i64[0] = 0x3800000038;
          v161.i64[1] = 0x3800000038;
          if (!(_DWORD)v15)
            goto LABEL_387;
          *(_DWORD *)((char *)v13 + v185) = *(_DWORD *)v166;
        }
        else
        {
          v15 = parse_required_member((uint64_t)&v392[32 * v165], (_QWORD *)((char *)v13 + v168), v395, 1);
          v163.i64[0] = 0x7000000070;
          v163.i64[1] = 0x7000000070;
          v162.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
          v162.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
          v161.i64[0] = 0x3800000038;
          v161.i64[1] = 0x3800000038;
          if (!(_DWORD)v15)
            goto LABEL_387;
          v170 = *(unsigned int *)(*(_QWORD *)(v166 + 8) + 20);
          if ((_DWORD)v170)
            *(_DWORD *)((char *)v13 + v170) = 1;
        }
        goto LABEL_171;
      case 2:
        if (v392[32 * v165 + 4] != 2)
        {
          v176 = *(_DWORD *)(v167 + 16);
LABEL_199:
          if (v176 >= 0x11)
            protobuf_c_message_pack_cold_1(v15, (uint64_t)v16, v17);
          v195 = *(unsigned int *)(v167 + 20);
          v15 = parse_required_member((uint64_t)&v392[32 * v165], (_QWORD *)(*v169 + *(_QWORD *)((char *)v13 + v195) * qword_18DCB7E88[v176]), v395, 0);
          v161.i64[0] = 0x3800000038;
          v161.i64[1] = 0x3800000038;
          v162.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
          v162.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
          v163.i64[0] = 0x7000000070;
          v163.i64[1] = 0x7000000070;
          if (!(_DWORD)v15)
            goto LABEL_387;
          ++*(_QWORD *)((char *)v13 + v195);
          goto LABEL_171;
        }
        v176 = *(_DWORD *)(v167 + 16);
        if ((*(_BYTE *)(v167 + 48) & 1) == 0 && v176 - 14 < 3)
          goto LABEL_199;
        v177 = *(unsigned int *)(v167 + 20);
        v178 = 4;
        switch(v176)
        {
          case 0u:
          case 1u:
          case 2u:
          case 6u:
          case 7u:
          case 0xAu:
          case 0xCu:
          case 0xDu:
            break;
          case 3u:
          case 4u:
          case 5u:
          case 8u:
          case 9u:
          case 0xBu:
          case 0xEu:
          case 0x10u:
            v178 = 8;
            break;
          case 0xFu:
LABEL_412:
            protobuf_c_message_unpack_cold_5();
          default:
            protobuf_c_message_pack_cold_1(v15, (uint64_t)v16, v17);
        }
        v179 = *(_DWORD *)(v167 + 16);
        v15 = *v169 + *(_QWORD *)((char *)v13 + v177) * v178;
        v180 = &v392[32 * v165];
        v181 = v180[5];
        v16 = (_BYTE *)(*((_QWORD *)v180 + 3) + v181);
        v182 = *((_QWORD *)v180 + 2) - v181;
        v183 = 2;
        switch(v179)
        {
          case 0:
          case 13:
            if (!v182)
              goto LABEL_375;
            v207 = 0;
            while (1)
            {
              v208 = v182 >= 0xA ? 10 : v182;
              if ((_DWORD)v208)
              {
                v209 = 0;
                while ((char)v16[v209] < 0)
                {
                  if (v208 == ++v209)
                    goto LABEL_387;
                }
              }
              else
              {
                LODWORD(v209) = 0;
              }
              v210 = (v209 + 1);
              if ((_DWORD)v209 == (_DWORD)v208 || (_DWORD)v209 == -1)
                goto LABEL_387;
              v211 = *v16 & 0x7F;
              if (v210 >= 2)
              {
                v211 = *v16 & 0x7F | ((v16[1] & 0x7F) << 7);
                if ((_DWORD)v209 != 1)
                {
                  v211 = *v16 & 0x7F | ((v16[1] & 0x7F) << 7) & 0x3FFF | ((v16[2] & 0x7F) << 14);
                  if (v210 >= 4)
                  {
                    v211 = *v16 & 0x7F | ((v16[1] & 0x7F) << 7) & 0x3FFF | ((v16[2] & 0x7F) << 14) & 0xF01FFFFF | ((v16[3] & 0x7F) << 21);
                    if ((_DWORD)v209 != 3)
                      v211 |= v16[4] << 28;
                  }
                }
              }
              v184 = v207 + 1;
              *(_DWORD *)(v15 + 4 * v207) = v211;
              v16 += v210;
              ++v207;
              v182 -= v210;
              if (!v182)
                goto LABEL_376;
            }
          case 1:
            if (!v182)
              goto LABEL_375;
            v285 = 0;
            while (1)
            {
              v286 = v182 >= 0xA ? 10 : v182;
              if ((_DWORD)v286)
              {
                v287 = 0;
                while ((char)v16[v287] < 0)
                {
                  if (v286 == ++v287)
                    goto LABEL_387;
                }
              }
              else
              {
                LODWORD(v287) = 0;
              }
              v288 = (v287 + 1);
              if ((_DWORD)v287 == (_DWORD)v286 || (_DWORD)v287 == -1)
                goto LABEL_387;
              v289 = *v16 & 0x7F;
              if (v288 >= 2)
              {
                v289 = *v16 & 0x7F | ((v16[1] & 0x7F) << 7);
                if ((_DWORD)v287 != 1)
                {
                  v289 = *v16 & 0x7F | ((v16[1] & 0x7F) << 7) & 0x3FFF | ((v16[2] & 0x7F) << 14);
                  if (v288 >= 4)
                  {
                    v289 = *v16 & 0x7F | ((v16[1] & 0x7F) << 7) & 0x3FFF | ((v16[2] & 0x7F) << 14) & 0xF01FFFFF | ((v16[3] & 0x7F) << 21);
                    if ((_DWORD)v287 != 3)
                      v289 |= v16[4] << 28;
                  }
                }
              }
              v184 = v285 + 1;
              *(_DWORD *)(v15 + 4 * v285) = -(v289 & 1) ^ (v289 >> 1);
              v16 += v288;
              ++v285;
              v182 -= v288;
              if (!v182)
                goto LABEL_376;
            }
          case 2:
          case 7:
          case 10:
            goto LABEL_187;
          case 3:
          case 8:
            if (!v182)
              goto LABEL_375;
            v212 = 0;
            while (2)
            {
              if (v182 >= 0xA)
                v213 = 10;
              else
                v213 = v182;
              if ((_DWORD)v213)
              {
                v214 = 0;
                while ((char)v16[v214] < 0)
                {
                  if (v213 == ++v214)
                    goto LABEL_387;
                }
              }
              else
              {
                LODWORD(v214) = 0;
              }
              v215 = (v214 + 1);
              if ((_DWORD)v214 == (_DWORD)v213 || (_DWORD)v214 == -1)
                goto LABEL_387;
              v216 = (int8x8_t)(*v16 & 0x7F);
              if (v215 <= 4)
              {
                if (v215 >= 2)
                {
                  v216 = (int8x8_t)(*v16 & 0x7F | ((unint64_t)(v16[1] & 0x7F) << 7));
                  if ((_DWORD)v214 != 1)
                  {
                    v216 = (int8x8_t)(*v16 & 0x7F | (unint64_t)(((v16[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v16[2] & 0x7F) << 14));
                    if (v215 >= 4)
                      v216 = (int8x8_t)(*v16 & 0x7F | (unint64_t)(((v16[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v16[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | ((unint64_t)(v16[3] & 0x7F) << 21));
                  }
                }
LABEL_249:
                v184 = v212 + 1;
                *(int8x8_t *)(v15 + 8 * v212) = v216;
                v16 += v215;
                ++v212;
                v182 -= v215;
                if (!v182)
                  goto LABEL_376;
                continue;
              }
              break;
            }
            v216 = (int8x8_t)(*v16 & 0x7F | (unint64_t)(((v16[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v16[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | ((unint64_t)(v16[3] & 0x7F) << 21));
            v217 = v215 - 4;
            if ((unint64_t)(v215 - 4) < 8)
            {
              v218 = 28;
              v219 = 4;
              goto LABEL_279;
            }
            if (v217 >= 0x10)
            {
              v220 = v217 & 0xFFFFFFFFFFFFFFF0;
              v243 = 0uLL;
              v244 = *v16 & 0x7F | (unint64_t)(((v16[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v16[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | (unsigned __int128)((unint64_t)(v16[3] & 0x7F) << 21);
              v218 = 7 * (v217 & 0xFFFFFFF0) + 28;
              v245 = (int8x16_t *)(v16 + 4);
              v246 = v217 & 0xFFFFFFFFFFFFFFF0;
              v247 = 0uLL;
              v248 = 0uLL;
              v249 = 0uLL;
              v250 = 0uLL;
              v251 = 0uLL;
              v252 = 0uLL;
              v253 = (int32x4_t)xmmword_18DCB7FC0;
              v254 = (int32x4_t)xmmword_18DCB7FB0;
              v255 = (int32x4_t)xmmword_18DCB7FA0;
              v256 = (int32x4_t)xmmword_18DCB7F90;
              do
              {
                v257 = *v245++;
                v258 = (uint8x16_t)vandq_s8(v257, v162);
                v259 = vmovl_high_u8(v258);
                v260 = vmovl_high_u16(v259);
                v261.i64[0] = v260.u32[2];
                v261.i64[1] = v260.u32[3];
                v262 = v261;
                v261.i64[0] = v260.u32[0];
                v261.i64[1] = v260.u32[1];
                v263 = v261;
                v264 = vmovl_u16(*(uint16x4_t *)v259.i8);
                v261.i64[0] = v264.u32[2];
                v261.i64[1] = v264.u32[3];
                v265 = v261;
                v266 = vmovl_u8(*(uint8x8_t *)v258.i8);
                v267 = vmovl_high_u16(v266);
                v261.i64[0] = v267.u32[2];
                v261.i64[1] = v267.u32[3];
                v268 = v261;
                v261.i64[0] = v264.u32[0];
                v261.i64[1] = v264.u32[1];
                v269 = v261;
                v261.i64[0] = v267.u32[0];
                v261.i64[1] = v267.u32[1];
                v270 = v261;
                v271 = vmovl_u16(*(uint16x4_t *)v266.i8);
                v261.i64[0] = v271.u32[2];
                v261.i64[1] = v271.u32[3];
                v272 = v261;
                v261.i64[0] = v271.u32[0];
                v261.i64[1] = v271.u32[1];
                v273 = v261;
                v261.i64[0] = v256.u32[2];
                v261.i64[1] = v256.u32[3];
                v274 = v261;
                v261.i64[0] = v256.u32[0];
                v261.i64[1] = v256.u32[1];
                v275 = v261;
                v261.i64[0] = v255.u32[2];
                v261.i64[1] = v255.u32[3];
                v276 = v261;
                v261.i64[0] = v254.u32[2];
                v261.i64[1] = v254.u32[3];
                v277 = v261;
                v261.i64[0] = v255.u32[0];
                v261.i64[1] = v255.u32[1];
                v278 = v261;
                v261.i64[0] = v254.u32[0];
                v261.i64[1] = v254.u32[1];
                v279 = v261;
                v261.i64[0] = v253.u32[2];
                v261.i64[1] = v253.u32[3];
                v280 = v261;
                v261.i64[0] = v253.u32[0];
                v261.i64[1] = v253.u32[1];
                v252 = vorrq_s8((int8x16_t)vshlq_u64(v262, v274), v252);
                v251 = vorrq_s8((int8x16_t)vshlq_u64(v263, v275), v251);
                v250 = vorrq_s8((int8x16_t)vshlq_u64(v265, v276), v250);
                v248 = vorrq_s8((int8x16_t)vshlq_u64(v268, v277), v248);
                v249 = vorrq_s8((int8x16_t)vshlq_u64(v269, v278), v249);
                v247 = vorrq_s8((int8x16_t)vshlq_u64(v270, v279), v247);
                v243 = vorrq_s8((int8x16_t)vshlq_u64(v272, v280), v243);
                v244 = (unsigned __int128)vorrq_s8((int8x16_t)vshlq_u64(v273, v261), (int8x16_t)v244);
                v253 = vaddq_s32(v253, v163);
                v254 = vaddq_s32(v254, v163);
                v255 = vaddq_s32(v255, v163);
                v256 = vaddq_s32(v256, v163);
                v246 -= 16;
              }
              while (v246);
              v281 = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v244, v249), vorrq_s8(v247, v251)), vorrq_s8(vorrq_s8(v243, v250), vorrq_s8(v248, v252)));
              v216 = vorr_s8(*(int8x8_t *)v281.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v281, v281, 8uLL));
              if (v217 == v220)
                goto LABEL_249;
              if ((v217 & 8) == 0)
              {
                v219 = v220 | 4;
                goto LABEL_279;
              }
            }
            else
            {
              v220 = 0;
              v218 = 28;
            }
            v219 = v217 & 0xFFFFFFFFFFFFFFF8 | 4;
            v221 = vdupq_n_s32(v218);
            v218 = 7 * (v217 & 0xFFFFFFF8) + 28;
            v222 = 0uLL;
            v223 = (int8x16_t)(unint64_t)v216;
            v224 = vaddq_s32(v221, (int32x4_t)xmmword_18DCB7FC0);
            v225 = vaddq_s32(v221, (int32x4_t)xmmword_18DCB7FD0);
            v226 = (int8x8_t *)&v16[v220 + 4];
            v227 = v220 - (v217 & 0xFFFFFFFFFFFFFFF8);
            v228 = 0uLL;
            v229 = 0uLL;
            do
            {
              v230 = *v226++;
              v231 = vmovl_u8((uint8x8_t)vand_s8(v230, (int8x8_t)0x7F7F7F7F7F7F7F7FLL));
              v232 = vmovl_high_u16(v231);
              v233.i64[0] = v232.u32[2];
              v233.i64[1] = v232.u32[3];
              v234 = v233;
              v233.i64[0] = v232.u32[0];
              v233.i64[1] = v232.u32[1];
              v235 = v233;
              v236 = vmovl_u16(*(uint16x4_t *)v231.i8);
              v233.i64[0] = v236.u32[2];
              v233.i64[1] = v236.u32[3];
              v237 = v233;
              v233.i64[0] = v236.u32[0];
              v233.i64[1] = v236.u32[1];
              v238 = v233;
              v233.i64[0] = v224.u32[2];
              v233.i64[1] = v224.u32[3];
              v239 = v233;
              v233.i64[0] = v224.u32[0];
              v233.i64[1] = v224.u32[1];
              v240 = v233;
              v233.i64[0] = v225.u32[2];
              v233.i64[1] = v225.u32[3];
              v241 = v233;
              v233.i64[0] = v225.u32[0];
              v233.i64[1] = v225.u32[1];
              v229 = vorrq_s8((int8x16_t)vshlq_u64(v234, v239), v229);
              v228 = vorrq_s8((int8x16_t)vshlq_u64(v235, v240), v228);
              v222 = vorrq_s8((int8x16_t)vshlq_u64(v237, v241), v222);
              v223 = vorrq_s8((int8x16_t)vshlq_u64(v238, v233), v223);
              v225 = vaddq_s32(v225, v161);
              v224 = vaddq_s32(v224, v161);
              v227 += 8;
            }
            while (v227);
            v242 = vorrq_s8(vorrq_s8(v223, v228), vorrq_s8(v222, v229));
            v216 = vorr_s8(*(int8x8_t *)v242.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v242, v242, 8uLL));
            if (v217 == (v217 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_249;
LABEL_279:
            v282 = v215 - v219;
            v283 = &v16[v219];
            do
            {
              v284 = *v283++;
              *(_QWORD *)&v216 |= (unint64_t)(v284 & 0x7F) << v218;
              v218 += 7;
              --v282;
            }
            while (v282);
            goto LABEL_249;
          case 4:
            if (!v182)
              goto LABEL_375;
            v290 = 0;
            while (2)
            {
              if (v182 >= 0xA)
                v291 = 10;
              else
                v291 = v182;
              if ((_DWORD)v291)
              {
                v292 = 0;
                while ((char)v16[v292] < 0)
                {
                  if (v291 == ++v292)
                    goto LABEL_387;
                }
              }
              else
              {
                LODWORD(v292) = 0;
              }
              v293 = (v292 + 1);
              if ((_DWORD)v292 == (_DWORD)v291 || (_DWORD)v292 == -1)
                goto LABEL_387;
              v294 = (int8x8_t)(*v16 & 0x7F);
              if (v293 <= 4)
              {
                if (v293 >= 2)
                {
                  v294 = (int8x8_t)(*v16 & 0x7F | ((unint64_t)(v16[1] & 0x7F) << 7));
                  if ((_DWORD)v292 != 1)
                  {
                    v294 = (int8x8_t)(*v16 & 0x7F | (unint64_t)(((v16[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v16[2] & 0x7F) << 14));
                    if (v293 >= 4)
                      v294 = (int8x8_t)(*v16 & 0x7F | (unint64_t)(((v16[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v16[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | ((unint64_t)(v16[3] & 0x7F) << 21));
                  }
                }
LABEL_303:
                v184 = v290 + 1;
                *(_QWORD *)(v15 + 8 * v290) = -(uint64_t)(v294.i8[0] & 1) ^ (*(_QWORD *)&v294 >> 1);
                v16 += v293;
                ++v290;
                v182 -= v293;
                if (!v182)
                  goto LABEL_376;
                continue;
              }
              break;
            }
            v294 = (int8x8_t)(*v16 & 0x7F | (unint64_t)(((v16[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v16[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | ((unint64_t)(v16[3] & 0x7F) << 21));
            v295 = v293 - 4;
            if ((unint64_t)(v293 - 4) < 8)
            {
              v296 = 28;
              v297 = 4;
              goto LABEL_333;
            }
            if (v295 >= 0x10)
            {
              v298 = v295 & 0xFFFFFFFFFFFFFFF0;
              v321 = 0uLL;
              v322 = *v16 & 0x7F | (unint64_t)(((v16[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v16[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | (unsigned __int128)((unint64_t)(v16[3] & 0x7F) << 21);
              v296 = 7 * (v295 & 0xFFFFFFF0) + 28;
              v323 = (int32x4_t)xmmword_18DCB7F90;
              v324 = (int32x4_t)xmmword_18DCB7FA0;
              v325 = (int32x4_t)xmmword_18DCB7FB0;
              v326 = (int32x4_t)xmmword_18DCB7FC0;
              v327 = (int8x16_t *)(v16 + 4);
              v328 = v295 & 0xFFFFFFFFFFFFFFF0;
              v329 = 0uLL;
              v330 = 0uLL;
              v331 = 0uLL;
              v332 = 0uLL;
              v333 = 0uLL;
              v334 = 0uLL;
              do
              {
                v335 = *v327++;
                v336 = (uint8x16_t)vandq_s8(v335, v162);
                v337 = vmovl_high_u8(v336);
                v338 = vmovl_high_u16(v337);
                v339.i64[0] = v338.u32[2];
                v339.i64[1] = v338.u32[3];
                v340 = v339;
                v339.i64[0] = v338.u32[0];
                v339.i64[1] = v338.u32[1];
                v341 = v339;
                v342 = vmovl_u16(*(uint16x4_t *)v337.i8);
                v339.i64[0] = v342.u32[2];
                v339.i64[1] = v342.u32[3];
                v343 = v339;
                v344 = vmovl_u8(*(uint8x8_t *)v336.i8);
                v345 = vmovl_high_u16(v344);
                v339.i64[0] = v345.u32[2];
                v339.i64[1] = v345.u32[3];
                v346 = v339;
                v339.i64[0] = v342.u32[0];
                v339.i64[1] = v342.u32[1];
                v347 = v339;
                v339.i64[0] = v345.u32[0];
                v339.i64[1] = v345.u32[1];
                v348 = v339;
                v349 = vmovl_u16(*(uint16x4_t *)v344.i8);
                v339.i64[0] = v349.u32[2];
                v339.i64[1] = v349.u32[3];
                v350 = v339;
                v339.i64[0] = v349.u32[0];
                v339.i64[1] = v349.u32[1];
                v351 = v339;
                v339.i64[0] = v323.u32[2];
                v339.i64[1] = v323.u32[3];
                v352 = v339;
                v339.i64[0] = v323.u32[0];
                v339.i64[1] = v323.u32[1];
                v353 = v339;
                v339.i64[0] = v324.u32[2];
                v339.i64[1] = v324.u32[3];
                v354 = v339;
                v339.i64[0] = v325.u32[2];
                v339.i64[1] = v325.u32[3];
                v355 = v339;
                v339.i64[0] = v324.u32[0];
                v339.i64[1] = v324.u32[1];
                v356 = v339;
                v339.i64[0] = v325.u32[0];
                v339.i64[1] = v325.u32[1];
                v357 = v339;
                v339.i64[0] = v326.u32[2];
                v339.i64[1] = v326.u32[3];
                v358 = v339;
                v339.i64[0] = v326.u32[0];
                v339.i64[1] = v326.u32[1];
                v334 = vorrq_s8((int8x16_t)vshlq_u64(v340, v352), v334);
                v333 = vorrq_s8((int8x16_t)vshlq_u64(v341, v353), v333);
                v332 = vorrq_s8((int8x16_t)vshlq_u64(v343, v354), v332);
                v330 = vorrq_s8((int8x16_t)vshlq_u64(v346, v355), v330);
                v331 = vorrq_s8((int8x16_t)vshlq_u64(v347, v356), v331);
                v329 = vorrq_s8((int8x16_t)vshlq_u64(v348, v357), v329);
                v321 = vorrq_s8((int8x16_t)vshlq_u64(v350, v358), v321);
                v322 = (unsigned __int128)vorrq_s8((int8x16_t)vshlq_u64(v351, v339), (int8x16_t)v322);
                v326 = vaddq_s32(v326, v163);
                v325 = vaddq_s32(v325, v163);
                v324 = vaddq_s32(v324, v163);
                v323 = vaddq_s32(v323, v163);
                v328 -= 16;
              }
              while (v328);
              v359 = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v322, v331), vorrq_s8(v329, v333)), vorrq_s8(vorrq_s8(v321, v332), vorrq_s8(v330, v334)));
              v294 = vorr_s8(*(int8x8_t *)v359.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v359, v359, 8uLL));
              if (v295 == v298)
                goto LABEL_303;
              if ((v295 & 8) == 0)
              {
                v297 = v298 | 4;
                goto LABEL_333;
              }
            }
            else
            {
              v298 = 0;
              v296 = 28;
            }
            v297 = v295 & 0xFFFFFFFFFFFFFFF8 | 4;
            v299 = vdupq_n_s32(v296);
            v296 = 7 * (v295 & 0xFFFFFFF8) + 28;
            v300 = 0uLL;
            v301 = (int8x16_t)(unint64_t)v294;
            v302 = vaddq_s32(v299, (int32x4_t)xmmword_18DCB7FC0);
            v303 = vaddq_s32(v299, (int32x4_t)xmmword_18DCB7FD0);
            v304 = (int8x8_t *)&v16[v298 + 4];
            v305 = v298 - (v295 & 0xFFFFFFFFFFFFFFF8);
            v306 = 0uLL;
            v307 = 0uLL;
            do
            {
              v308 = *v304++;
              v309 = vmovl_u8((uint8x8_t)vand_s8(v308, (int8x8_t)0x7F7F7F7F7F7F7F7FLL));
              v310 = vmovl_high_u16(v309);
              v311.i64[0] = v310.u32[2];
              v311.i64[1] = v310.u32[3];
              v312 = v311;
              v311.i64[0] = v310.u32[0];
              v311.i64[1] = v310.u32[1];
              v313 = v311;
              v314 = vmovl_u16(*(uint16x4_t *)v309.i8);
              v311.i64[0] = v314.u32[2];
              v311.i64[1] = v314.u32[3];
              v315 = v311;
              v311.i64[0] = v314.u32[0];
              v311.i64[1] = v314.u32[1];
              v316 = v311;
              v311.i64[0] = v302.u32[2];
              v311.i64[1] = v302.u32[3];
              v317 = v311;
              v311.i64[0] = v302.u32[0];
              v311.i64[1] = v302.u32[1];
              v318 = v311;
              v311.i64[0] = v303.u32[2];
              v311.i64[1] = v303.u32[3];
              v319 = v311;
              v311.i64[0] = v303.u32[0];
              v311.i64[1] = v303.u32[1];
              v307 = vorrq_s8((int8x16_t)vshlq_u64(v312, v317), v307);
              v306 = vorrq_s8((int8x16_t)vshlq_u64(v313, v318), v306);
              v300 = vorrq_s8((int8x16_t)vshlq_u64(v315, v319), v300);
              v301 = vorrq_s8((int8x16_t)vshlq_u64(v316, v311), v301);
              v303 = vaddq_s32(v303, v161);
              v302 = vaddq_s32(v302, v161);
              v305 += 8;
            }
            while (v305);
            v320 = vorrq_s8(vorrq_s8(v301, v306), vorrq_s8(v300, v307));
            v294 = vorr_s8(*(int8x8_t *)v320.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v320, v320, 8uLL));
            if (v295 == (v295 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_303;
LABEL_333:
            v360 = v293 - v297;
            v361 = &v16[v297];
            do
            {
              v362 = *v361++;
              *(_QWORD *)&v294 |= (unint64_t)(v362 & 0x7F) << v296;
              v296 += 7;
              --v360;
            }
            while (v360);
            goto LABEL_303;
          case 5:
          case 9:
          case 11:
            v183 = 3;
LABEL_187:
            v184 = v182 >> v183;
            v15 = (uint64_t)memcpy((void *)v15, v16, (v182 >> v183) * v178);
            v163.i64[0] = 0x7000000070;
            v163.i64[1] = 0x7000000070;
            v162.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
            v162.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
            v161.i64[0] = 0x3800000038;
            v161.i64[1] = 0x3800000038;
            goto LABEL_376;
          case 6:
            if (!v182)
              goto LABEL_375;
            v363 = 0;
            while (1)
            {
              v364 = v182 >= 0xA ? 10 : v182;
              if ((_DWORD)v364)
              {
                v365 = 0;
                while ((char)v16[v365] < 0)
                {
                  if (v364 == ++v365)
                    goto LABEL_387;
                }
              }
              else
              {
                LODWORD(v365) = 0;
              }
              v366 = (v365 + 1);
              if ((_DWORD)v365 == (_DWORD)v364 || (_DWORD)v365 == -1)
                goto LABEL_387;
              v367 = *v16 & 0x7F;
              if (v366 >= 2)
              {
                v367 = *v16 & 0x7F | ((v16[1] & 0x7F) << 7);
                if ((_DWORD)v365 != 1)
                {
                  v367 = *v16 & 0x7F | ((v16[1] & 0x7F) << 7) & 0x3FFF | ((v16[2] & 0x7F) << 14);
                  if (v366 >= 4)
                  {
                    v367 = *v16 & 0x7F | ((v16[1] & 0x7F) << 7) & 0x3FFF | ((v16[2] & 0x7F) << 14) & 0xF01FFFFF | ((v16[3] & 0x7F) << 21);
                    if ((_DWORD)v365 != 3)
                      v367 |= v16[4] << 28;
                  }
                }
              }
              v184 = v363 + 1;
              *(_DWORD *)(v15 + 4 * v363) = v367;
              v16 += v366;
              ++v363;
              v182 -= v366;
              if (!v182)
                goto LABEL_376;
            }
          case 12:
            if (!v182)
            {
LABEL_375:
              v184 = 0;
LABEL_376:
              *(_QWORD *)((char *)v13 + v177) += v184;
LABEL_171:
              if (++v165 == v389)
                goto LABEL_165;
              continue;
            }
            v368 = 0;
            while (1)
            {
              v369 = v182 >= 0xA ? 10 : v182;
              if ((_DWORD)v369)
              {
                v370 = 0;
                while ((char)v16[v370] < 0)
                {
                  if (v369 == ++v370)
                    goto LABEL_387;
                }
              }
              else
              {
                LODWORD(v370) = 0;
              }
              v371 = (v370 + 1);
              if ((_DWORD)v370 == (_DWORD)v369 || (_DWORD)v370 == -1)
                break;
              v372 = v16;
              v373 = (v370 + 1);
              while (1)
              {
                v374 = *v372++;
                if ((v374 & 0x7F) != 0)
                  break;
                if (!--v373)
                {
                  v375 = 0;
                  goto LABEL_373;
                }
              }
              v375 = 1;
LABEL_373:
              v184 = v368 + 1;
              *(_DWORD *)(v15 + 4 * v368) = v375;
              v16 += v371;
              ++v368;
              v182 -= v371;
              if (!v182)
                goto LABEL_376;
            }
LABEL_387:
            protobuf_c_message_free_unpacked(v13, (uint64_t (**)(int, size_t))v395);
            if (v147)
            {
              for (k = 1; k <= v147; ++k)
              {
                if ((&v397)[k])
                  (*(void (**)(_QWORD))(v395 + 8))(*(_QWORD *)(v395 + 16));
              }
            }
            v13 = 0;
            v10 = v393;
            if (v384 >= 0x88 && v393)
            {
LABEL_397:
              v13 = 0;
LABEL_398:
              v8[1]((int)v8[2], (size_t)v10);
            }
            return v13;
          default:
            goto LABEL_412;
        }
      default:
        protobuf_c_message_unpack_cold_1();
    }
  }
}

uint64_t protobuf_c_message_init(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 88))(a2);
}

_QWORD *protobuf_c_message_free_unpacked(_QWORD *result, uint64_t (**a2)(int, size_t size))
{
  _QWORD *v2;
  _DWORD *v3;
  uint64_t (**v4)(int, size_t);
  unsigned int *v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  int v11;
  unint64_t v13;
  unsigned int v14;
  int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  if (result)
  {
    v2 = result;
    v3 = (_DWORD *)*result;
    if (*(_DWORD *)*result != 682290937)
      protobuf_c_message_free_unpacked_cold_1();
    if (a2)
      v4 = a2;
    else
      v4 = &protobuf_c__allocator;
    *result = 0;
    v5 = (unsigned int *)(result + 1);
    if (v3[12])
    {
      for (i = 0; i < v3[12]; ++i)
      {
        v7 = *((_QWORD *)v3 + 7);
        if ((*(_BYTE *)(v7 + 72 * i + 48) & 4) != 0
          && *(_DWORD *)(v7 + 72 * i + 8) != *(_DWORD *)((char *)v2 + *(unsigned int *)(v7 + 72 * i + 20)))
        {
          continue;
        }
        if (*(_DWORD *)(v7 + 72 * i + 12) == 2)
        {
          v8 = v7 + 72 * i;
          v9 = *(_QWORD *)((char *)v2 + *(unsigned int *)(v8 + 24));
          if (v9)
          {
            v10 = *(_QWORD *)((char *)v2 + *(unsigned int *)(v8 + 20));
            v11 = *(_DWORD *)(v7 + 72 * i + 16);
            if (v11 == 14)
            {
              if (v10)
              {
                v20 = 0;
                v21 = 1;
                do
                {
                  if (*(_QWORD *)(v9 + 8 * v20))
                    ((void (*)(uint64_t (*)(int, size_t)))v4[1])(v4[2]);
                  v20 = v21++;
                }
                while (v10 > v20);
              }
            }
            else if (v11 == 15)
            {
              if (v10)
              {
                v22 = 0;
                v23 = 1;
                do
                {
                  if (*(_QWORD *)(v9 + 16 * v22 + 8))
                    ((void (*)(uint64_t (*)(int, size_t)))v4[1])(v4[2]);
                  v22 = v23++;
                }
                while (v10 > v22);
              }
            }
            else if (v11 == 16 && v10 != 0)
            {
              v13 = 0;
              v14 = 1;
              do
              {
                protobuf_c_message_free_unpacked(*(_QWORD *)(v9 + 8 * v13), v4);
                v13 = v14++;
              }
              while (v10 > v13);
            }
            v4[1]((int)v4[2], v9);
          }
          continue;
        }
        v15 = *(_DWORD *)(v7 + 72 * i + 16);
        switch(v15)
        {
          case 16:
            v17 = *(_QWORD *)((char *)v2 + *(unsigned int *)(v7 + 72 * i + 24));
            if (v17 && v17 != *(_QWORD *)(v7 + 72 * i + 40))
              protobuf_c_message_free_unpacked(v17, v4);
            continue;
          case 15:
            v18 = v7 + 72 * i;
            v16 = *(_QWORD *)((char *)v5 + *(unsigned int *)(v18 + 24));
            if (!v16)
              continue;
            v19 = *(_QWORD *)(v18 + 40);
            if (v19)
            {
              if (*(_QWORD *)(v19 + 8) == v16)
                continue;
            }
            break;
          case 14:
            v16 = *(_QWORD *)((char *)v2 + *(unsigned int *)(v7 + 72 * i + 24));
            if (!v16 || v16 == *(_QWORD *)(v7 + 72 * i + 40))
              continue;
            break;
          default:
            continue;
        }
        v4[1]((int)v4[2], v16);
      }
    }
    v24 = *v5;
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = 16;
      do
      {
        if (*(_QWORD *)(v2[2] + v26))
        {
          ((void (*)(uint64_t (*)(int, size_t)))v4[1])(v4[2]);
          v24 = *v5;
        }
        ++v25;
        v26 += 24;
      }
      while (v25 < v24);
    }
    if (v2[2])
      ((void (*)(uint64_t (*)(int, size_t)))v4[1])(v4[2]);
    return (_QWORD *)v4[1]((int)v4[2], (size_t)v2);
  }
  return result;
}

uint64_t protobuf_c_message_check(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;

  if (!result)
    return result;
  v1 = result;
  v2 = *(_QWORD *)result;
  if (!*(_QWORD *)result || *(_DWORD *)v2 != 682290937)
    return 0;
  v3 = *(unsigned int *)(v2 + 48);
  if (!(_DWORD)v3)
    return 1;
  v4 = 0;
  v5 = *(_QWORD *)(v2 + 56);
  while (1)
  {
    v8 = v5 + 72 * v4;
    v10 = *(_DWORD *)(v8 + 12);
    v9 = *(_DWORD *)(v8 + 16);
    if ((*(_BYTE *)(v8 + 48) & 4) != 0
      && *(_DWORD *)(v5 + 72 * v4 + 8) != *(_DWORD *)(v1 + *(unsigned int *)(v5 + 72 * v4 + 20)))
    {
      goto LABEL_10;
    }
    v11 = (uint64_t *)(v1 + *(unsigned int *)(v8 + 24));
    if (v10 != 2)
    {
      if (v9 == 14)
      {
        v6 = *v11;
        if (v10)
          v7 = 0;
        else
          v7 = v6 == 0;
        if (v7)
          return 0;
      }
      else if (v9 == 15)
      {
        if ((!v10 || *(_DWORD *)(v1 + *(unsigned int *)(v5 + 72 * v4 + 20)) == 1) && *v11 && !v11[1])
          return 0;
      }
      else if (v9 == 16 && (!v10 || *v11 != 0))
      {
        result = ((uint64_t (*)(void))protobuf_c_message_check)();
        if (!(_DWORD)result)
          return result;
      }
      goto LABEL_10;
    }
    v12 = *(_QWORD *)(v1 + *(unsigned int *)(v5 + 72 * v4 + 20));
    if (v12 && !*v11)
      return 0;
    if (v9 == 14)
      break;
    if (v9 == 15)
    {
      if (v12)
      {
        v20 = 0;
        v21 = *v11;
        v22 = 1;
        while (!*(_QWORD *)(v21 + 16 * v20) || *(_QWORD *)(v21 + 16 * v20 + 8))
        {
          v20 = v22++;
          if (v12 <= v20)
            goto LABEL_10;
        }
        return 0;
      }
    }
    else if (v9 == 16 && v12)
    {
      v13 = 0;
      v14 = *v11;
      v15 = 1;
      do
      {
        result = protobuf_c_message_check(*(_QWORD *)(v14 + 8 * v13));
        if (!(_DWORD)result)
          return result;
        v13 = v15++;
      }
      while (v12 > v13);
    }
LABEL_10:
    if (++v4 == v3)
      return 1;
  }
  if (!v12)
    goto LABEL_10;
  v17 = 0;
  v18 = *v11;
  v19 = 1;
  while (*(_QWORD *)(v18 + 8 * v17))
  {
    v17 = v19++;
    if (v12 <= v17)
      goto LABEL_10;
  }
  return 0;
}

uint64_t protobuf_c_service_invoke_internal(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(*(_QWORD *)a1 + 40) <= a2)
    protobuf_c_service_invoke_internal_cold_1();
  return (*(uint64_t (**)(void))(a1 + 8 * a2 + 24))();
}

void protobuf_c_service_generated_init(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  if (*a2 != 336960451)
    protobuf_c_service_generated_init_cold_1();
  *a1 = a2;
  a1[1] = protobuf_c_service_invoke_internal;
  a1[2] = a3;
  bzero(a1 + 3, 8 * a2[10]);
}

uint64_t protobuf_c_service_destroy(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t protobuf_c_enum_descriptor_get_value_by_name(uint64_t result, char *__s2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;

  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 64);
    if (v3)
    {
      v5 = *(_DWORD *)(result + 56);
      if (v5 >= 2)
      {
        LODWORD(v6) = 0;
        while (1)
        {
          v7 = (v5 >> 1) + v6;
          v8 = strcmp(*(const char **)(v3 + 16 * v7), __s2);
          if (!v8)
            return *(_QWORD *)(v2 + 48) + 24 * *(unsigned int *)(v3 + 16 * v7 + 8);
          v9 = v5 + v6 + ~(_DWORD)v7;
          if (v8 < 0)
            v6 = (v7 + 1);
          else
            v6 = v6;
          if (v8 >= 0)
            v5 >>= 1;
          else
            v5 = v9;
          if (v5 <= 1)
          {
            v7 = v6;
            if (v5)
              goto LABEL_16;
            return 0;
          }
        }
      }
      v7 = 0;
      if (v5)
      {
LABEL_16:
        if (!strcmp(*(const char **)(v3 + 16 * v7), __s2))
          return *(_QWORD *)(v2 + 48) + 24 * *(unsigned int *)(v3 + 16 * v7 + 8);
      }
    }
    return 0;
  }
  return result;
}

uint64_t protobuf_c_enum_descriptor_get_value(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  int v11;
  int v12;
  unsigned int v13;

  v2 = *(_DWORD *)(a1 + 72);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(a1 + 80);
  if (v2 == 1)
  {
    v4 = 0;
LABEL_10:
    v10 = (int *)(v3 + 8 * v4);
    v11 = *v10;
    if (*v10 > a2)
      return 0;
    v12 = v10[1];
    if (v11 - v12 + *(_DWORD *)(v3 + 8 * (v4 + 1) + 4) <= a2)
      return 0;
    v13 = v12 + a2 - v11;
    if ((v13 & 0x80000000) != 0)
      return 0;
  }
  else
  {
    v4 = 0;
    while (1)
    {
      while (1)
      {
        v5 = v2 >> 1;
        v6 = (v2 >> 1) + v4;
        v7 = *(_DWORD *)(v3 + 8 * v6);
        v8 = a2 - v7;
        if (a2 >= v7)
          break;
        v2 >>= 1;
        if (v5 <= 1)
          goto LABEL_9;
      }
      v9 = *(_DWORD *)(v3 + 8 * v6 + 4);
      if (*(_DWORD *)(v3 + 8 * (v6 + 1) + 4) + v7 - v9 > a2)
        break;
      v2 += v4 + ~(_DWORD)v6;
      v4 = v6 + 1;
      if (v2 <= 1)
      {
LABEL_9:
        if (!v2)
          return 0;
        goto LABEL_10;
      }
    }
    v13 = v8 + v9;
    if (v8 + v9 < 0)
      return 0;
  }
  return *(_QWORD *)(a1 + 48) + 24 * v13;
}

const char **protobuf_c_message_descriptor_get_field_by_name(uint64_t a1, char *__s2)
{
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  const char **v9;
  int v10;
  unsigned int v11;
  const char **v12;

  if (!a1)
    return 0;
  v3 = *(_QWORD *)(a1 + 64);
  if (!v3)
    return 0;
  v5 = *(_DWORD *)(a1 + 48);
  if (v5 < 2)
  {
    v6 = 0;
    if (v5)
    {
LABEL_14:
      v12 = (const char **)(*(_QWORD *)(a1 + 56) + 72 * *(unsigned int *)(v3 + 4 * v6));
      if (!strcmp(*v12, __s2))
        return v12;
      else
        return 0;
    }
    return 0;
  }
  LODWORD(v6) = 0;
  v7 = *(_QWORD *)(a1 + 56);
  while (1)
  {
    v8 = (v5 >> 1) + v6;
    v9 = (const char **)(v7 + 72 * *(unsigned int *)(v3 + 4 * v8));
    v10 = strcmp(*v9, __s2);
    if (!v10)
      return v9;
    v11 = v5 + v6 + ~v8;
    if (v10 < 0)
      v6 = v8 + 1;
    else
      v6 = v6;
    if (v10 >= 0)
      v5 >>= 1;
    else
      v5 = v11;
    if (v5 <= 1)
    {
      if (!v5)
        return 0;
      goto LABEL_14;
    }
  }
}

uint64_t protobuf_c_message_descriptor_get_field(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  int v11;
  int v12;
  unsigned int v13;

  v2 = *(_DWORD *)(a1 + 72);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(a1 + 80);
  if (v2 == 1)
  {
    v4 = 0;
LABEL_10:
    v10 = (int *)(v3 + 8 * v4);
    v11 = *v10;
    if (*v10 > a2)
      return 0;
    v12 = v10[1];
    if (v11 - v12 + *(_DWORD *)(v3 + 8 * (v4 + 1) + 4) <= a2)
      return 0;
    v13 = v12 + a2 - v11;
    if ((v13 & 0x80000000) != 0)
      return 0;
  }
  else
  {
    v4 = 0;
    while (1)
    {
      while (1)
      {
        v5 = v2 >> 1;
        v6 = (v2 >> 1) + v4;
        v7 = *(_DWORD *)(v3 + 8 * v6);
        v8 = a2 - v7;
        if (a2 >= v7)
          break;
        v2 >>= 1;
        if (v5 <= 1)
          goto LABEL_9;
      }
      v9 = *(_DWORD *)(v3 + 8 * v6 + 4);
      if (*(_DWORD *)(v3 + 8 * (v6 + 1) + 4) + v7 - v9 > a2)
        break;
      v2 += v4 + ~(_DWORD)v6;
      v4 = v6 + 1;
      if (v2 <= 1)
      {
LABEL_9:
        if (!v2)
          return 0;
        goto LABEL_10;
      }
    }
    v13 = v8 + v9;
    if (v8 + v9 < 0)
      return 0;
  }
  return *(_QWORD *)(a1 + 56) + 72 * v13;
}

const char **protobuf_c_service_descriptor_get_method_by_name(uint64_t a1, char *__s2)
{
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  const char **v9;
  int v10;
  const char **v11;

  if (!a1)
    return 0;
  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    return 0;
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 < 2)
  {
    v6 = 0;
    if (v5)
    {
LABEL_14:
      v11 = (const char **)(*(_QWORD *)(a1 + 48) + 24 * *(unsigned int *)(v3 + 4 * v6));
      if (!strcmp(*v11, __s2))
        return v11;
      else
        return 0;
    }
    return 0;
  }
  LODWORD(v6) = 0;
  v7 = *(_QWORD *)(a1 + 48);
  while (1)
  {
    v8 = v6 + (v5 >> 1);
    v9 = (const char **)(v7 + 24 * *(unsigned int *)(v3 + 4 * v8));
    v10 = strcmp(*v9, __s2);
    if (!v10)
      return v9;
    if (v10 >= 0)
      v5 >>= 1;
    else
      v5 += v6 + ~v8;
    if (v10 < 0)
      v6 = v8 + 1;
    else
      v6 = v6;
    if (v5 <= 1)
    {
      if (!v5)
        return 0;
      goto LABEL_14;
    }
  }
}

void *system_alloc(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x3E951BD8uLL);
}

void system_free(int a1, void *a2)
{
  free(a2);
}

uint64_t parse_required_member(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  size_t v19;
  uint64_t result;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  size_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int8x8_t *v43;
  unint64_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x8_t v48;
  uint16x8_t v49;
  uint32x4_t v50;
  uint64x2_t v51;
  uint64x2_t v52;
  uint64x2_t v53;
  uint32x4_t v54;
  uint64x2_t v55;
  uint64x2_t v56;
  uint64x2_t v57;
  uint64x2_t v58;
  uint64x2_t v59;
  int8x16_t v60;
  unint64_t v61;
  int32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int8x8_t *v67;
  unint64_t v68;
  int32x4_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x8_t v72;
  uint16x8_t v73;
  uint32x4_t v74;
  uint64x2_t v75;
  uint64x2_t v76;
  uint64x2_t v77;
  uint32x4_t v78;
  uint64x2_t v79;
  uint64x2_t v80;
  uint64x2_t v81;
  uint64x2_t v82;
  uint64x2_t v83;
  int8x16_t v84;
  int8x16_t v85;
  unsigned __int128 v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int8x16_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int8x16_t *v93;
  unint64_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  uint8x16_t v102;
  uint16x8_t v103;
  uint32x4_t v104;
  uint64x2_t v105;
  uint64x2_t v106;
  uint64x2_t v107;
  uint32x4_t v108;
  uint64x2_t v109;
  uint16x8_t v110;
  uint32x4_t v111;
  uint64x2_t v112;
  uint64x2_t v113;
  uint64x2_t v114;
  uint32x4_t v115;
  uint64x2_t v116;
  uint64x2_t v117;
  uint64x2_t v118;
  uint64x2_t v119;
  uint64x2_t v120;
  uint64x2_t v121;
  uint64x2_t v122;
  uint64x2_t v123;
  uint64x2_t v124;
  int8x16_t v125;
  unint64_t v126;
  char *v127;
  char v128;
  int8x16_t v129;
  unsigned __int128 v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int8x16_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int8x16_t *v137;
  unint64_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  uint8x16_t v146;
  uint16x8_t v147;
  uint32x4_t v148;
  uint64x2_t v149;
  uint64x2_t v150;
  uint64x2_t v151;
  uint32x4_t v152;
  uint64x2_t v153;
  uint16x8_t v154;
  uint32x4_t v155;
  uint64x2_t v156;
  uint64x2_t v157;
  uint64x2_t v158;
  uint32x4_t v159;
  uint64x2_t v160;
  uint64x2_t v161;
  uint64x2_t v162;
  uint64x2_t v163;
  uint64x2_t v164;
  uint64x2_t v165;
  uint64x2_t v166;
  uint64x2_t v167;
  uint64x2_t v168;
  int8x16_t v169;
  unint64_t v170;
  char *v171;
  char v172;

  v4 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)(a1 + 24);
  v10 = *(unsigned __int8 *)(a1 + 4);
  switch(*(_DWORD *)(v4 + 16))
  {
    case 0:
    case 6:
    case 0xD:
      if (*(_BYTE *)(a1 + 4))
        return 0;
      LODWORD(v11) = *v9 & 0x7F;
      if (v8 >= 2)
      {
        LODWORD(v11) = *v9 & 0x7F | ((v9[1] & 0x7F) << 7);
        if ((_DWORD)v8 != 2)
        {
          LODWORD(v11) = *v9 & 0x7F | ((v9[1] & 0x7F) << 7) & 0x3FFF | ((v9[2] & 0x7F) << 14);
          if (v8 >= 4)
          {
            LODWORD(v11) = *v9 & 0x7F | ((v9[1] & 0x7F) << 7) & 0x3FFF | ((v9[2] & 0x7F) << 14) & 0xF01FFFFF | ((v9[3] & 0x7F) << 21);
            if ((_DWORD)v8 != 4)
              LODWORD(v11) = v11 | (v9[4] << 28);
          }
        }
      }
      goto LABEL_68;
    case 1:
      if (*(_BYTE *)(a1 + 4))
        return 0;
      v14 = *v9 & 0x7F;
      if (v8 >= 2)
      {
        v14 = *v9 & 0x7F | ((v9[1] & 0x7F) << 7);
        if ((_DWORD)v8 != 2)
        {
          v14 = *v9 & 0x7F | ((v9[1] & 0x7F) << 7) & 0x3FFF | ((v9[2] & 0x7F) << 14);
          if (v8 >= 4)
          {
            v14 = *v9 & 0x7F | ((v9[1] & 0x7F) << 7) & 0x3FFF | ((v9[2] & 0x7F) << 14) & 0xF01FFFFF | ((v9[3] & 0x7F) << 21);
            if ((_DWORD)v8 != 4)
              v14 |= v9[4] << 28;
          }
        }
      }
      LODWORD(v11) = -(v14 & 1) ^ (v14 >> 1);
      goto LABEL_68;
    case 2:
    case 7:
    case 0xA:
      if (v10 != 5)
        return 0;
      LODWORD(v11) = *(_DWORD *)v9;
      goto LABEL_68;
    case 3:
    case 8:
      if (*(_BYTE *)(a1 + 4))
        return 0;
      LODWORD(v13) = *v9 & 0x7F;
      if (v8 <= 4)
      {
        if (v8 >= 2)
        {
          LODWORD(v13) = *v9 & 0x7F | ((v9[1] & 0x7F) << 7);
          if ((_DWORD)v8 != 2)
          {
            LODWORD(v13) = *v9 & 0x7F | ((v9[1] & 0x7F) << 7) & 0x3FFF | ((v9[2] & 0x7F) << 14);
            if (v8 >= 4)
              LODWORD(v13) = *v9 & 0x7F | ((v9[1] & 0x7F) << 7) & 0x3FFF | ((v9[2] & 0x7F) << 14) & 0xF01FFFFF | ((v9[3] & 0x7F) << 21);
          }
        }
        v13 = v13;
        goto LABEL_100;
      }
      v13 = *v9 & 0x7F | (unint64_t)(((v9[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v9[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | ((unint64_t)(v9[3] & 0x7F) << 21);
      v30 = *(_QWORD *)(a1 + 16) - 4;
      if (v30 < 8)
      {
        v31 = 28;
        v32 = 4;
        goto LABEL_98;
      }
      if (v30 >= 0x10)
      {
        v37 = v30 & 0xFFFFFFFFFFFFFFF0;
        v85 = 0uLL;
        v86 = *v9 & 0x7F | (unint64_t)(((v9[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v9[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | (unsigned __int128)((unint64_t)(v9[3] & 0x7F) << 21);
        v31 = 7 * ((v8 - 4) & 0xFFFFFFF0) + 28;
        v87 = (int32x4_t)xmmword_18DCB7F90;
        v88 = (int32x4_t)xmmword_18DCB7FA0;
        v89 = (int32x4_t)xmmword_18DCB7FB0;
        v90.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
        v90.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
        v91.i64[0] = 0x7000000070;
        v91.i64[1] = 0x7000000070;
        v92 = (int32x4_t)xmmword_18DCB7FC0;
        v93 = (int8x16_t *)(v9 + 4);
        v94 = v30 & 0xFFFFFFFFFFFFFFF0;
        v95 = 0uLL;
        v96 = 0uLL;
        v97 = 0uLL;
        v98 = 0uLL;
        v99 = 0uLL;
        v100 = 0uLL;
        do
        {
          v101 = *v93++;
          v102 = (uint8x16_t)vandq_s8(v101, v90);
          v103 = vmovl_high_u8(v102);
          v104 = vmovl_high_u16(v103);
          v105.i64[0] = v104.u32[2];
          v105.i64[1] = v104.u32[3];
          v106 = v105;
          v105.i64[0] = v104.u32[0];
          v105.i64[1] = v104.u32[1];
          v107 = v105;
          v108 = vmovl_u16(*(uint16x4_t *)v103.i8);
          v105.i64[0] = v108.u32[2];
          v105.i64[1] = v108.u32[3];
          v109 = v105;
          v110 = vmovl_u8(*(uint8x8_t *)v102.i8);
          v111 = vmovl_high_u16(v110);
          v105.i64[0] = v111.u32[2];
          v105.i64[1] = v111.u32[3];
          v112 = v105;
          v105.i64[0] = v108.u32[0];
          v105.i64[1] = v108.u32[1];
          v113 = v105;
          v105.i64[0] = v111.u32[0];
          v105.i64[1] = v111.u32[1];
          v114 = v105;
          v115 = vmovl_u16(*(uint16x4_t *)v110.i8);
          v105.i64[0] = v115.u32[2];
          v105.i64[1] = v115.u32[3];
          v116 = v105;
          v105.i64[0] = v115.u32[0];
          v105.i64[1] = v115.u32[1];
          v117 = v105;
          v105.i64[0] = v87.u32[2];
          v105.i64[1] = v87.u32[3];
          v118 = v105;
          v105.i64[0] = v87.u32[0];
          v105.i64[1] = v87.u32[1];
          v119 = v105;
          v105.i64[0] = v88.u32[2];
          v105.i64[1] = v88.u32[3];
          v120 = v105;
          v105.i64[0] = v89.u32[2];
          v105.i64[1] = v89.u32[3];
          v121 = v105;
          v105.i64[0] = v88.u32[0];
          v105.i64[1] = v88.u32[1];
          v122 = v105;
          v105.i64[0] = v89.u32[0];
          v105.i64[1] = v89.u32[1];
          v123 = v105;
          v105.i64[0] = v92.u32[2];
          v105.i64[1] = v92.u32[3];
          v124 = v105;
          v105.i64[0] = v92.u32[0];
          v105.i64[1] = v92.u32[1];
          v100 = vorrq_s8((int8x16_t)vshlq_u64(v106, v118), v100);
          v99 = vorrq_s8((int8x16_t)vshlq_u64(v107, v119), v99);
          v98 = vorrq_s8((int8x16_t)vshlq_u64(v109, v120), v98);
          v96 = vorrq_s8((int8x16_t)vshlq_u64(v112, v121), v96);
          v97 = vorrq_s8((int8x16_t)vshlq_u64(v113, v122), v97);
          v95 = vorrq_s8((int8x16_t)vshlq_u64(v114, v123), v95);
          v85 = vorrq_s8((int8x16_t)vshlq_u64(v116, v124), v85);
          v86 = (unsigned __int128)vorrq_s8((int8x16_t)vshlq_u64(v117, v105), (int8x16_t)v86);
          v92 = vaddq_s32(v92, v91);
          v89 = vaddq_s32(v89, v91);
          v88 = vaddq_s32(v88, v91);
          v87 = vaddq_s32(v87, v91);
          v94 -= 16;
        }
        while (v94);
        v125 = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v86, v97), vorrq_s8(v95, v99)), vorrq_s8(vorrq_s8(v85, v98), vorrq_s8(v96, v100)));
        v13 = (unint64_t)vorr_s8(*(int8x8_t *)v125.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL));
        if (v30 == v37)
          goto LABEL_100;
        if ((((_DWORD)v8 - 4) & 8) == 0)
        {
          v32 = v37 | 4;
LABEL_98:
          v126 = *(_QWORD *)(a1 + 16) - v32;
          v127 = &v9[v32];
          do
          {
            v128 = *v127++;
            v13 |= (unint64_t)(v128 & 0x7F) << v31;
            v31 += 7;
            --v126;
          }
          while (v126);
          goto LABEL_100;
        }
      }
      else
      {
        v37 = 0;
        v31 = 28;
      }
      v32 = v30 & 0xFFFFFFFFFFFFFFF8 | 4;
      v38 = vdupq_n_s32(v31);
      v31 = 7 * ((v8 - 4) & 0xFFFFFFF8) + 28;
      v39 = 0uLL;
      v40 = (int8x16_t)v13;
      v41 = vaddq_s32(v38, (int32x4_t)xmmword_18DCB7FC0);
      v42 = vaddq_s32(v38, (int32x4_t)xmmword_18DCB7FD0);
      v43 = (int8x8_t *)&v9[v37 + 4];
      v44 = v37 - (v30 & 0xFFFFFFFFFFFFFFF8);
      v45.i64[0] = 0x3800000038;
      v45.i64[1] = 0x3800000038;
      v46 = 0uLL;
      v47 = 0uLL;
      do
      {
        v48 = *v43++;
        v49 = vmovl_u8((uint8x8_t)vand_s8(v48, (int8x8_t)0x7F7F7F7F7F7F7F7FLL));
        v50 = vmovl_high_u16(v49);
        v51.i64[0] = v50.u32[2];
        v51.i64[1] = v50.u32[3];
        v52 = v51;
        v51.i64[0] = v50.u32[0];
        v51.i64[1] = v50.u32[1];
        v53 = v51;
        v54 = vmovl_u16(*(uint16x4_t *)v49.i8);
        v51.i64[0] = v54.u32[2];
        v51.i64[1] = v54.u32[3];
        v55 = v51;
        v51.i64[0] = v54.u32[0];
        v51.i64[1] = v54.u32[1];
        v56 = v51;
        v51.i64[0] = v41.u32[2];
        v51.i64[1] = v41.u32[3];
        v57 = v51;
        v51.i64[0] = v41.u32[0];
        v51.i64[1] = v41.u32[1];
        v58 = v51;
        v51.i64[0] = v42.u32[2];
        v51.i64[1] = v42.u32[3];
        v59 = v51;
        v51.i64[0] = v42.u32[0];
        v51.i64[1] = v42.u32[1];
        v47 = vorrq_s8((int8x16_t)vshlq_u64(v52, v57), v47);
        v46 = vorrq_s8((int8x16_t)vshlq_u64(v53, v58), v46);
        v39 = vorrq_s8((int8x16_t)vshlq_u64(v55, v59), v39);
        v40 = vorrq_s8((int8x16_t)vshlq_u64(v56, v51), v40);
        v42 = vaddq_s32(v42, v45);
        v41 = vaddq_s32(v41, v45);
        v44 += 8;
      }
      while (v44);
      v60 = vorrq_s8(vorrq_s8(v40, v46), vorrq_s8(v39, v47));
      v13 = (unint64_t)vorr_s8(*(int8x8_t *)v60.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL));
      if (v30 != (v30 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_98;
LABEL_100:
      *a2 = v13;
      return 1;
    case 4:
      if (*(_BYTE *)(a1 + 4))
        return 0;
      LODWORD(v15) = *v9 & 0x7F;
      if (v8 <= 4)
      {
        if (v8 >= 2)
        {
          LODWORD(v15) = *v9 & 0x7F | ((v9[1] & 0x7F) << 7);
          if ((_DWORD)v8 != 2)
          {
            LODWORD(v15) = *v9 & 0x7F | ((v9[1] & 0x7F) << 7) & 0x3FFF | ((v9[2] & 0x7F) << 14);
            if (v8 >= 4)
              LODWORD(v15) = *v9 & 0x7F | ((v9[1] & 0x7F) << 7) & 0x3FFF | ((v9[2] & 0x7F) << 14) & 0xF01FFFFF | ((v9[3] & 0x7F) << 21);
          }
        }
        v15 = v15;
LABEL_108:
        v12 = -(uint64_t)(v15 & 1) ^ (v15 >> 1);
LABEL_12:
        *a2 = v12;
        return 1;
      }
      v15 = *v9 & 0x7F | (unint64_t)(((v9[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v9[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | ((unint64_t)(v9[3] & 0x7F) << 21);
      v34 = *(_QWORD *)(a1 + 16) - 4;
      if (v34 < 8)
      {
        v35 = 28;
        v36 = 4;
        goto LABEL_106;
      }
      if (v34 >= 0x10)
      {
        v61 = v34 & 0xFFFFFFFFFFFFFFF0;
        v129 = 0uLL;
        v130 = *v9 & 0x7F | (unint64_t)(((v9[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v9[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | (unsigned __int128)((unint64_t)(v9[3] & 0x7F) << 21);
        v35 = 7 * ((v8 - 4) & 0xFFFFFFF0) + 28;
        v131 = (int32x4_t)xmmword_18DCB7F90;
        v132 = (int32x4_t)xmmword_18DCB7FA0;
        v133 = (int32x4_t)xmmword_18DCB7FB0;
        v134.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
        v134.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
        v135.i64[0] = 0x7000000070;
        v135.i64[1] = 0x7000000070;
        v136 = (int32x4_t)xmmword_18DCB7FC0;
        v137 = (int8x16_t *)(v9 + 4);
        v138 = v34 & 0xFFFFFFFFFFFFFFF0;
        v139 = 0uLL;
        v140 = 0uLL;
        v141 = 0uLL;
        v142 = 0uLL;
        v143 = 0uLL;
        v144 = 0uLL;
        do
        {
          v145 = *v137++;
          v146 = (uint8x16_t)vandq_s8(v145, v134);
          v147 = vmovl_high_u8(v146);
          v148 = vmovl_high_u16(v147);
          v149.i64[0] = v148.u32[2];
          v149.i64[1] = v148.u32[3];
          v150 = v149;
          v149.i64[0] = v148.u32[0];
          v149.i64[1] = v148.u32[1];
          v151 = v149;
          v152 = vmovl_u16(*(uint16x4_t *)v147.i8);
          v149.i64[0] = v152.u32[2];
          v149.i64[1] = v152.u32[3];
          v153 = v149;
          v154 = vmovl_u8(*(uint8x8_t *)v146.i8);
          v155 = vmovl_high_u16(v154);
          v149.i64[0] = v155.u32[2];
          v149.i64[1] = v155.u32[3];
          v156 = v149;
          v149.i64[0] = v152.u32[0];
          v149.i64[1] = v152.u32[1];
          v157 = v149;
          v149.i64[0] = v155.u32[0];
          v149.i64[1] = v155.u32[1];
          v158 = v149;
          v159 = vmovl_u16(*(uint16x4_t *)v154.i8);
          v149.i64[0] = v159.u32[2];
          v149.i64[1] = v159.u32[3];
          v160 = v149;
          v149.i64[0] = v159.u32[0];
          v149.i64[1] = v159.u32[1];
          v161 = v149;
          v149.i64[0] = v131.u32[2];
          v149.i64[1] = v131.u32[3];
          v162 = v149;
          v149.i64[0] = v131.u32[0];
          v149.i64[1] = v131.u32[1];
          v163 = v149;
          v149.i64[0] = v132.u32[2];
          v149.i64[1] = v132.u32[3];
          v164 = v149;
          v149.i64[0] = v133.u32[2];
          v149.i64[1] = v133.u32[3];
          v165 = v149;
          v149.i64[0] = v132.u32[0];
          v149.i64[1] = v132.u32[1];
          v166 = v149;
          v149.i64[0] = v133.u32[0];
          v149.i64[1] = v133.u32[1];
          v167 = v149;
          v149.i64[0] = v136.u32[2];
          v149.i64[1] = v136.u32[3];
          v168 = v149;
          v149.i64[0] = v136.u32[0];
          v149.i64[1] = v136.u32[1];
          v144 = vorrq_s8((int8x16_t)vshlq_u64(v150, v162), v144);
          v143 = vorrq_s8((int8x16_t)vshlq_u64(v151, v163), v143);
          v142 = vorrq_s8((int8x16_t)vshlq_u64(v153, v164), v142);
          v140 = vorrq_s8((int8x16_t)vshlq_u64(v156, v165), v140);
          v141 = vorrq_s8((int8x16_t)vshlq_u64(v157, v166), v141);
          v139 = vorrq_s8((int8x16_t)vshlq_u64(v158, v167), v139);
          v129 = vorrq_s8((int8x16_t)vshlq_u64(v160, v168), v129);
          v130 = (unsigned __int128)vorrq_s8((int8x16_t)vshlq_u64(v161, v149), (int8x16_t)v130);
          v136 = vaddq_s32(v136, v135);
          v133 = vaddq_s32(v133, v135);
          v132 = vaddq_s32(v132, v135);
          v131 = vaddq_s32(v131, v135);
          v138 -= 16;
        }
        while (v138);
        v169 = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v130, v141), vorrq_s8(v139, v143)), vorrq_s8(vorrq_s8(v129, v142), vorrq_s8(v140, v144)));
        v15 = (unint64_t)vorr_s8(*(int8x8_t *)v169.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v169, v169, 8uLL));
        if (v34 == v61)
          goto LABEL_108;
        if ((((_DWORD)v8 - 4) & 8) == 0)
        {
          v36 = v61 | 4;
          goto LABEL_106;
        }
      }
      else
      {
        v61 = 0;
        v35 = 28;
      }
      v36 = v34 & 0xFFFFFFFFFFFFFFF8 | 4;
      v62 = vdupq_n_s32(v35);
      v35 = 7 * ((v8 - 4) & 0xFFFFFFF8) + 28;
      v63 = 0uLL;
      v64 = (int8x16_t)v15;
      v65 = vaddq_s32(v62, (int32x4_t)xmmword_18DCB7FC0);
      v66 = vaddq_s32(v62, (int32x4_t)xmmword_18DCB7FD0);
      v67 = (int8x8_t *)&v9[v61 + 4];
      v68 = v61 - (v34 & 0xFFFFFFFFFFFFFFF8);
      v69.i64[0] = 0x3800000038;
      v69.i64[1] = 0x3800000038;
      v70 = 0uLL;
      v71 = 0uLL;
      do
      {
        v72 = *v67++;
        v73 = vmovl_u8((uint8x8_t)vand_s8(v72, (int8x8_t)0x7F7F7F7F7F7F7F7FLL));
        v74 = vmovl_high_u16(v73);
        v75.i64[0] = v74.u32[2];
        v75.i64[1] = v74.u32[3];
        v76 = v75;
        v75.i64[0] = v74.u32[0];
        v75.i64[1] = v74.u32[1];
        v77 = v75;
        v78 = vmovl_u16(*(uint16x4_t *)v73.i8);
        v75.i64[0] = v78.u32[2];
        v75.i64[1] = v78.u32[3];
        v79 = v75;
        v75.i64[0] = v78.u32[0];
        v75.i64[1] = v78.u32[1];
        v80 = v75;
        v75.i64[0] = v65.u32[2];
        v75.i64[1] = v65.u32[3];
        v81 = v75;
        v75.i64[0] = v65.u32[0];
        v75.i64[1] = v65.u32[1];
        v82 = v75;
        v75.i64[0] = v66.u32[2];
        v75.i64[1] = v66.u32[3];
        v83 = v75;
        v75.i64[0] = v66.u32[0];
        v75.i64[1] = v66.u32[1];
        v71 = vorrq_s8((int8x16_t)vshlq_u64(v76, v81), v71);
        v70 = vorrq_s8((int8x16_t)vshlq_u64(v77, v82), v70);
        v63 = vorrq_s8((int8x16_t)vshlq_u64(v79, v83), v63);
        v64 = vorrq_s8((int8x16_t)vshlq_u64(v80, v75), v64);
        v66 = vaddq_s32(v66, v69);
        v65 = vaddq_s32(v65, v69);
        v68 += 8;
      }
      while (v68);
      v84 = vorrq_s8(vorrq_s8(v64, v70), vorrq_s8(v63, v71));
      v15 = (unint64_t)vorr_s8(*(int8x8_t *)v84.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL));
      if (v34 == (v34 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_108;
LABEL_106:
      v170 = *(_QWORD *)(a1 + 16) - v36;
      v171 = &v9[v36];
      do
      {
        v172 = *v171++;
        v15 |= (unint64_t)(v172 & 0x7F) << v35;
        v35 += 7;
        --v170;
      }
      while (v170);
      goto LABEL_108;
    case 5:
    case 9:
    case 0xB:
      if (v10 != 1)
        return 0;
      v12 = *(_QWORD *)v9;
      goto LABEL_12;
    case 0xC:
      if ((_DWORD)v8)
      {
        v11 = *(_QWORD *)(a1 + 16);
        while (1)
        {
          v16 = *v9++;
          if ((v16 & 0x7F) != 0)
            break;
          if (!--v11)
            goto LABEL_68;
        }
        LODWORD(v11) = 1;
      }
      else
      {
        LODWORD(v11) = 0;
      }
LABEL_68:
      *(_DWORD *)a2 = v11;
      return 1;
    case 0xE:
      if (v10 != 2)
        return 0;
      v17 = *(unsigned __int8 *)(a1 + 5);
      if (a4)
      {
        v18 = *a2;
        if (*a2)
        {
          if (v18 != *(_QWORD *)(v4 + 40))
            (*(void (**)(_QWORD))(a3 + 8))(*(_QWORD *)(a3 + 16));
        }
      }
      v19 = (v8 - v17);
      result = (*(uint64_t (**)(_QWORD, _QWORD))a3)(*(_QWORD *)(a3 + 16), (v19 + 1));
      *a2 = result;
      if (!result)
        return result;
      memcpy((void *)result, &v9[v17], v19);
      *(_BYTE *)(*a2 + v19) = 0;
      return 1;
    case 0xF:
      if (v10 != 2)
        return 0;
      v21 = *(unsigned __int8 *)(a1 + 5);
      if (a4)
      {
        v22 = a2[1];
        if (v22)
        {
          v23 = *(_QWORD *)(v4 + 40);
          if (!v23 || v22 != *(_QWORD *)(v23 + 8))
            (*(void (**)(_QWORD))(a3 + 8))(*(_QWORD *)(a3 + 16));
        }
      }
      v24 = v8 >= v21;
      v25 = v8 - v21;
      if ((_DWORD)v25 != 0 && v24)
      {
        result = (*(uint64_t (**)(_QWORD, size_t))a3)(*(_QWORD *)(a3 + 16), v25);
        a2[1] = result;
        if (!result)
          return result;
        memcpy((void *)result, &v9[v21], v25);
      }
      else
      {
        a2[1] = 0;
      }
      *a2 = v25;
      return 1;
    case 0x10:
      if (v10 != 2)
        return 0;
      v26 = *(_QWORD **)(v4 + 40);
      v27 = protobuf_c_message_unpack(*(_QWORD *)(v4 + 32), a3, v8 - *(unsigned __int8 *)(a1 + 5), &v9[*(unsigned __int8 *)(a1 + 5)]);
      if (a4)
      {
        v28 = (_QWORD *)*a2;
        v29 = 1;
        if (*a2 && v28 != v26)
        {
          if (v27)
          {
            v29 = merge_messages((uint64_t)v28, v27, a3);
            v28 = (_QWORD *)*a2;
          }
          protobuf_c_message_free_unpacked(v28, (uint64_t (**)(int, size_t))a3);
        }
      }
      else
      {
        v29 = 1;
      }
      *a2 = v27;
      if (v27)
        v33 = v29 == 0;
      else
        v33 = 1;
      return !v33;
    default:
      return 0;
  }
}

uint64_t merge_messages(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int *v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = *(_QWORD *)a2;
  if (!*(_DWORD *)(*(_QWORD *)a2 + 48))
    return 1;
  v5 = a2;
  v6 = result;
  v7 = 0;
  v8 = *(_QWORD *)(v3 + 56);
  while (1)
  {
    v9 = *(_DWORD *)(v8 + 72 * v7 + 12);
    if (v9 != 1 && v9 != 3)
    {
      if (v9 == 2)
      {
        v13 = v8 + 72 * v7;
        v14 = *(unsigned int *)(v13 + 20);
        v15 = *(_QWORD *)(v6 + v14);
        if (v15)
        {
          v16 = *(unsigned int *)(v13 + 24);
          v17 = *(_QWORD *)(v5 + v14);
          if (v17)
          {
            v18 = *(int *)(v8 + 72 * v7 + 16);
            if (v18 >= 0x11)
              protobuf_c_message_pack_cold_1(result, a2, a3);
            v19 = qword_18DCB7E88[v18];
            result = (*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 16), v19 * (v17 + v15));
            if (!result)
              return result;
            v20 = result;
            memcpy((void *)result, *(const void **)(v6 + v16), *(_QWORD *)(v6 + v14) * v19);
            result = (uint64_t)memcpy((void *)(v20 + *(_QWORD *)(v6 + v14) * v19), *(const void **)(v5 + v16), *(_QWORD *)(v5 + v14) * v19);
            if (*(_QWORD *)(v5 + v16))
              result = (*(uint64_t (**)(_QWORD))(a3 + 8))(*(_QWORD *)(a3 + 16));
            a2 = *(_QWORD *)(v6 + v16);
            if (a2)
              result = (*(uint64_t (**)(_QWORD))(a3 + 8))(*(_QWORD *)(a3 + 16));
            *(_QWORD *)(v5 + v16) = v20;
            *(_QWORD *)(v5 + v14) += *(_QWORD *)(v6 + v14);
          }
          else
          {
            *(_QWORD *)(v5 + v14) = v15;
            *(_QWORD *)(v5 + v16) = *(_QWORD *)(v6 + v16);
          }
          *(_QWORD *)(v6 + v14) = 0;
          *(_QWORD *)(v6 + v16) = 0;
        }
      }
      goto LABEL_4;
    }
    v11 = v8 + 72 * v7;
    v12 = *(unsigned int *)(v11 + 20);
    if ((*(_BYTE *)(v11 + 48) & 4) != 0)
      break;
LABEL_38:
    v33 = *(unsigned int *)(v11 + 24);
    v34 = (_QWORD *)(v6 + v33);
    result = v5 + v33;
    v35 = *(_QWORD *)(v11 + 40);
    v36 = *(_DWORD *)(v11 + 16);
    switch(v36)
    {
      case 0xEu:
        if (*v34 != v35 && *(_QWORD *)result == v35)
        {
LABEL_50:
          v38 = 8;
          goto LABEL_66;
        }
        break;
      case 0xFu:
        v39 = v34[1];
        if (v39)
        {
          v40 = *(_QWORD *)(result + 8);
          if (v35)
          {
            v41 = *(_QWORD *)(v35 + 8);
            if (v39 != v41 && (!v40 || v40 == v41))
            {
LABEL_65:
              v38 = 16;
LABEL_66:
              memcpy((void *)result, v34, v38);
              bzero(v34, v38);
              if (*(_DWORD *)(v11 + 20))
              {
                *(_DWORD *)(v5 + v12) = *(_DWORD *)(v6 + v12);
                *(_DWORD *)(v6 + v12) = 0;
              }
            }
          }
          else if (!v40)
          {
            goto LABEL_65;
          }
        }
        break;
      case 0x10u:
        if (*v34)
        {
          if (!*(_QWORD *)result)
            goto LABEL_50;
          result = merge_messages(*v34, *(_QWORD *)result, a3);
          if (!(_DWORD)result)
            return result;
        }
        break;
      default:
        if (*(_DWORD *)(v6 + v12) && !*(_DWORD *)(v5 + v12))
        {
          if (v36 >= 0xE)
            protobuf_c_message_pack_cold_1(result, a2, a3);
          v38 = qword_18DCB7F10[v36];
          goto LABEL_66;
        }
        break;
    }
LABEL_4:
    ++v7;
    v3 = *(_QWORD *)v5;
    if (v7 >= *(unsigned int *)(*(_QWORD *)v5 + 48))
      return 1;
  }
  if (*(_DWORD *)(v5 + v12))
    goto LABEL_4;
  result = *(unsigned int *)(v3 + 72);
  v21 = *(_QWORD *)(v3 + 80);
  v22 = *(_DWORD *)(v6 + v12);
  if ((_DWORD)result == 1)
  {
    v23 = 0;
LABEL_34:
    v29 = (int *)(v21 + 8 * v23);
    v30 = *v29;
    if (*v29 > v22)
      return 0;
    v31 = v29[1];
    if (v30 - v31 + *(_DWORD *)(v21 + 8 * (v23 + 1) + 4) <= v22)
      return 0;
    v32 = v31 + v22 - v30;
    if ((v32 & 0x80000000) != 0)
      return 0;
LABEL_37:
    v11 = *(_QWORD *)(v3 + 56) + 72 * v32;
    goto LABEL_38;
  }
  if (!(_DWORD)result)
    return result;
  v23 = 0;
  while (1)
  {
    while (1)
    {
      v24 = result >> 1;
      v25 = (result >> 1) + v23;
      v26 = *(_DWORD *)(v21 + 8 * v25);
      v27 = v22 - v26;
      if (v22 >= v26)
        break;
      result = result >> 1;
      if (v24 <= 1)
        goto LABEL_29;
    }
    v28 = *(_DWORD *)(v21 + 8 * v25 + 4);
    if (*(_DWORD *)(v21 + 8 * (v25 + 1) + 4) + v26 - v28 > v22)
      break;
    result = result + v23 + ~(_DWORD)v25;
    v23 = v25 + 1;
    if (result <= 1)
    {
LABEL_29:
      if ((_DWORD)result)
        goto LABEL_34;
      return result;
    }
  }
  v32 = v27 + v28;
  if (((v27 + v28) & 0x80000000) == 0)
    goto LABEL_37;
  return 0;
}

void protobuf_c_message_get_packed_size_cold_1()
{
  __assert_rtn("protobuf_c_message_get_packed_size", "protobuf-c.c", 715, "((message)->descriptor)->magic == PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC");
}

void required_field_get_packed_size_cold_1()
{
  __assert_rtn("required_field_get_packed_size", "protobuf-c.c", 461, "0");
}

void protobuf_c_message_pack_cold_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_27("sizeof_elt_in_repeated_array", "protobuf-c.c", a3, "0");
}

void protobuf_c_message_pack_cold_2()
{
  __assert_rtn("repeated_field_pack", "protobuf-c.c", 1434, "0");
}

void protobuf_c_message_pack_cold_3()
{
  __assert_rtn("repeated_field_pack", "protobuf-c.c", 1440, "actual_length_size == length_size_min + 1");
}

void protobuf_c_message_pack_cold_4()
{
  __assert_rtn("protobuf_c_message_pack", "protobuf-c.c", 1478, "((message)->descriptor)->magic == PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC");
}

void required_field_pack_cold_1()
{
  __assert_rtn("required_field_pack", "protobuf-c.c", 1137, "0");
}

void protobuf_c_message_pack_to_buffer_cold_2()
{
  __assert_rtn("get_packed_payload_length", "protobuf-c.c", 1794, "0");
}

void protobuf_c_message_pack_to_buffer_cold_3()
{
  __assert_rtn("pack_buffer_packed_payload", "protobuf-c.c", 1896, "0");
}

void protobuf_c_message_pack_to_buffer_cold_4()
{
  __assert_rtn("repeated_field_pack_to_buffer", "protobuf-c.c", 1926, "tmp == payload_len");
}

void protobuf_c_message_pack_to_buffer_cold_5()
{
  __assert_rtn("protobuf_c_message_pack_to_buffer", "protobuf-c.c", 1965, "((message)->descriptor)->magic == PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC");
}

void required_field_pack_to_buffer_cold_1()
{
  __assert_rtn("required_field_pack_to_buffer", "protobuf-c.c", 1641, "0");
}

void protobuf_c_message_unpack_cold_1()
{
  __assert_rtn("parse_member", "protobuf-c.c", 2931, "0");
}

void protobuf_c_message_unpack_cold_5()
{
  __assert_rtn("parse_packed_repeated_member", "protobuf-c.c", 2860, "0");
}

void protobuf_c_message_unpack_cold_6()
{
  __assert_rtn("protobuf_c_message_unpack", "protobuf-c.c", 3242, "rv->descriptor != NULL");
}

void protobuf_c_message_unpack_cold_8()
{
  __assert_rtn("protobuf_c_message_unpack", "protobuf-c.c", 3056, "(desc)->magic == PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC");
}

void protobuf_c_message_free_unpacked_cold_1()
{
  __assert_rtn("protobuf_c_message_free_unpacked", "protobuf-c.c", 3330, "((message)->descriptor)->magic == PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC");
}

void protobuf_c_service_invoke_internal_cold_1()
{
  __assert_rtn("protobuf_c_service_invoke_internal", "protobuf-c.c", 3516, "method_index < service->descriptor->n_methods");
}

void protobuf_c_service_generated_init_cold_1()
{
  __assert_rtn("protobuf_c_service_generated_init", "protobuf-c.c", 3537, "(descriptor)->magic == PROTOBUF_C__SERVICE_DESCRIPTOR_MAGIC");
}

double pg_query__parse_result__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__parse_result__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264B9B0;
  result = 0.0;
  a1[2] = xmmword_1E264B9C0;
  return result;
}

uint64_t pg_query__parse_result__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__parse_result__descriptor)
    pg_query__parse_result__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__parse_result__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__parse_result__descriptor)
    pg_query__parse_result__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__parse_result__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__parse_result__descriptor)
    pg_query__parse_result__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__parse_result__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__parse_result__descriptor, a1, a2, a3);
}

void **pg_query__parse_result__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__parse_result__descriptor)
      pg_query__parse_result__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__scan_result__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__scan_result__init_init_value;
  a1[1] = unk_1E264B9E0;
  result = 0.0;
  a1[2] = xmmword_1E264B9F0;
  return result;
}

uint64_t pg_query__scan_result__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__scan_result__descriptor)
    pg_query__scan_result__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__scan_result__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__scan_result__descriptor)
    pg_query__scan_result__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__scan_result__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__scan_result__descriptor)
    pg_query__scan_result__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__scan_result__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__scan_result__descriptor, a1, a2, a3);
}

void **pg_query__scan_result__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__scan_result__descriptor)
      pg_query__scan_result__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__node__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__node__init_init_value;
  *(_OWORD *)a1 = pg_query__node__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264BA10;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__node__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__node__descriptor)
    pg_query__node__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__node__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__node__descriptor)
    pg_query__node__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__node__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__node__descriptor)
    pg_query__node__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__node__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__node__descriptor, a1, a2, a3);
}

void **pg_query__node__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__node__descriptor)
      pg_query__node__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__integer__init(_OWORD *a1)
{
  double result;

  result = *(double *)&pg_query__integer__init_init_value;
  *a1 = pg_query__integer__init_init_value;
  a1[1] = unk_1E264BA38;
  return result;
}

uint64_t pg_query__integer__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__integer__descriptor)
    pg_query__integer__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__integer__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__integer__descriptor)
    pg_query__integer__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__integer__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__integer__descriptor)
    pg_query__integer__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__integer__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__integer__descriptor, a1, a2, a3);
}

void **pg_query__integer__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__integer__descriptor)
      pg_query__integer__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__float__init(_OWORD *a1)
{
  double result;

  result = *(double *)&pg_query__float__init_init_value;
  *a1 = pg_query__float__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264BA58;
  return result;
}

uint64_t pg_query__float__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__float__descriptor)
    pg_query__float__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__float__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__float__descriptor)
    pg_query__float__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__float__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__float__descriptor)
    pg_query__float__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__float__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__float__descriptor, a1, a2, a3);
}

void **pg_query__float__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__float__descriptor)
      pg_query__float__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__string__init(_OWORD *a1)
{
  double result;

  result = *(double *)&pg_query__string__init_init_value;
  *a1 = pg_query__string__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264BA78;
  return result;
}

uint64_t pg_query__string__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__string__descriptor)
    pg_query__string__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__string__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__string__descriptor)
    pg_query__string__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__string__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__string__descriptor)
    pg_query__string__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__string__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__string__descriptor, a1, a2, a3);
}

void **pg_query__string__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__string__descriptor)
      pg_query__string__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__bit_string__init(_OWORD *a1)
{
  double result;

  result = *(double *)&pg_query__bit_string__init_init_value;
  *a1 = pg_query__bit_string__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264BA98;
  return result;
}

uint64_t pg_query__bit_string__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__bit_string__descriptor)
    pg_query__bit_string__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__bit_string__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__bit_string__descriptor)
    pg_query__bit_string__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__bit_string__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__bit_string__descriptor)
    pg_query__bit_string__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__bit_string__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__bit_string__descriptor, a1, a2, a3);
}

void **pg_query__bit_string__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__bit_string__descriptor)
      pg_query__bit_string__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__null__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__null__init_init_value;
  *(_OWORD *)a1 = pg_query__null__init_init_value;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t pg_query__null__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__null__descriptor)
    pg_query__null__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__null__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__null__descriptor)
    pg_query__null__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__null__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__null__descriptor)
    pg_query__null__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__null__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__null__descriptor, a1, a2, a3);
}

void **pg_query__null__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__null__descriptor)
      pg_query__null__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__list__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__list__init_init_value;
  *(_OWORD *)a1 = pg_query__list__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264BAD0;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__list__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__list__descriptor)
    pg_query__list__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__list__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__list__descriptor)
    pg_query__list__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__list__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__list__descriptor)
    pg_query__list__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__list__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__list__descriptor, a1, a2, a3);
}

void **pg_query__list__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__list__descriptor)
      pg_query__list__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__oid_list__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__oid_list__init_init_value;
  *(_OWORD *)a1 = pg_query__oid_list__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264BAF8;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__oid_list__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__oid_list__descriptor)
    pg_query__oid_list__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__oid_list__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__oid_list__descriptor)
    pg_query__oid_list__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__oid_list__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__oid_list__descriptor)
    pg_query__oid_list__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__oid_list__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__oid_list__descriptor, a1, a2, a3);
}

void **pg_query__oid_list__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__oid_list__descriptor)
      pg_query__oid_list__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__int_list__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__int_list__init_init_value;
  *(_OWORD *)a1 = pg_query__int_list__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264BB20;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__int_list__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__int_list__descriptor)
    pg_query__int_list__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__int_list__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__int_list__descriptor)
    pg_query__int_list__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__int_list__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__int_list__descriptor)
    pg_query__int_list__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__int_list__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__int_list__descriptor, a1, a2, a3);
}

void **pg_query__int_list__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__int_list__descriptor)
      pg_query__int_list__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alias__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__alias__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264BB48;
  result = 0.0;
  a1[2] = xmmword_1E264BB58;
  return result;
}

uint64_t pg_query__alias__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alias__descriptor)
    pg_query__alias__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alias__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alias__descriptor)
    pg_query__alias__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alias__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alias__descriptor)
    pg_query__alias__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alias__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alias__descriptor, a1, a2, a3);
}

void **pg_query__alias__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alias__descriptor)
      pg_query__alias__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__range_var__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264BB88;
  a1[3] = unk_1E264BB98;
  a1[4] = xmmword_1E264BBA8;
  result = 0.0;
  *a1 = pg_query__range_var__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264BB78;
  return result;
}

uint64_t pg_query__range_var__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__range_var__descriptor)
    pg_query__range_var__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__range_var__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__range_var__descriptor)
    pg_query__range_var__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__range_var__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__range_var__descriptor)
    pg_query__range_var__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__range_var__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__range_var__descriptor, a1, a2, a3);
}

void **pg_query__range_var__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__range_var__descriptor)
      pg_query__range_var__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__table_func__init(_OWORD *a1)
{
  double result;

  a1[8] = xmmword_1E264BC38;
  a1[9] = unk_1E264BC48;
  a1[10] = xmmword_1E264BC58;
  a1[11] = unk_1E264BC68;
  a1[4] = xmmword_1E264BBF8;
  a1[5] = unk_1E264BC08;
  a1[6] = xmmword_1E264BC18;
  a1[7] = unk_1E264BC28;
  *a1 = pg_query__table_func__init_init_value;
  a1[1] = unk_1E264BBC8;
  result = 0.0;
  a1[2] = xmmword_1E264BBD8;
  a1[3] = unk_1E264BBE8;
  return result;
}

uint64_t pg_query__table_func__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__table_func__descriptor)
    pg_query__table_func__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__table_func__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__table_func__descriptor)
    pg_query__table_func__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__table_func__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__table_func__descriptor)
    pg_query__table_func__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__table_func__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__table_func__descriptor, a1, a2, a3);
}

void **pg_query__table_func__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__table_func__descriptor)
      pg_query__table_func__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__expr__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__expr__init_init_value;
  *(_OWORD *)a1 = pg_query__expr__init_init_value;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t pg_query__expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__expr__descriptor)
    pg_query__expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__expr__descriptor)
    pg_query__expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__expr__descriptor)
    pg_query__expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__expr__descriptor, a1, a2, a3);
}

void **pg_query__expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__expr__descriptor)
      pg_query__expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__var__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264BCB0;
  *(_OWORD *)(a1 + 48) = unk_1E264BCC0;
  *(_QWORD *)(a1 + 64) = 0;
  result = dbl_1E264BCA0[0];
  *(_OWORD *)a1 = pg_query__var__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E264BCA0;
  return result;
}

uint64_t pg_query__var__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__var__descriptor)
    pg_query__var__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__var__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__var__descriptor)
    pg_query__var__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__var__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__var__descriptor)
    pg_query__var__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__var__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__var__descriptor, a1, a2, a3);
}

void **pg_query__var__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__var__descriptor)
      pg_query__var__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__param__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__param__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264BCE8;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264BCF8;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__param__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__param__descriptor)
    pg_query__param__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__param__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__param__descriptor)
    pg_query__param__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__param__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__param__descriptor)
    pg_query__param__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__param__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__param__descriptor, a1, a2, a3);
}

void **pg_query__param__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__param__descriptor)
      pg_query__param__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__aggref__init(_OWORD *a1)
{
  double result;

  a1[8] = xmmword_1E264BD90;
  a1[9] = unk_1E264BDA0;
  a1[10] = xmmword_1E264BDB0;
  a1[4] = xmmword_1E264BD50;
  a1[5] = unk_1E264BD60;
  a1[6] = xmmword_1E264BD70;
  a1[7] = unk_1E264BD80;
  *a1 = pg_query__aggref__init_init_value;
  a1[1] = unk_1E264BD20;
  result = dbl_1E264BD40[0];
  a1[2] = xmmword_1E264BD30;
  a1[3] = *(_OWORD *)dbl_1E264BD40;
  return result;
}

uint64_t pg_query__aggref__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__aggref__descriptor)
    pg_query__aggref__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__aggref__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__aggref__descriptor)
    pg_query__aggref__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__aggref__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__aggref__descriptor)
    pg_query__aggref__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__aggref__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__aggref__descriptor, a1, a2, a3);
}

void **pg_query__aggref__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__aggref__descriptor)
      pg_query__aggref__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__grouping_func__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264BDE0;
  *(_OWORD *)(a1 + 48) = unk_1E264BDF0;
  *(_OWORD *)(a1 + 64) = xmmword_1E264BE00;
  *(_QWORD *)(a1 + 80) = 0;
  result = *(double *)&pg_query__grouping_func__init_init_value;
  *(_OWORD *)a1 = pg_query__grouping_func__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264BDD0;
  return result;
}

uint64_t pg_query__grouping_func__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__grouping_func__descriptor)
    pg_query__grouping_func__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__grouping_func__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__grouping_func__descriptor)
    pg_query__grouping_func__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__grouping_func__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__grouping_func__descriptor)
    pg_query__grouping_func__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__grouping_func__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__grouping_func__descriptor, a1, a2, a3);
}

void **pg_query__grouping_func__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__grouping_func__descriptor)
      pg_query__grouping_func__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__window_func__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264BE38;
  *(_OWORD *)(a1 + 48) = unk_1E264BE48;
  *(_OWORD *)(a1 + 64) = xmmword_1E264BE58;
  *(_QWORD *)(a1 + 80) = 0;
  result = *(double *)&pg_query__window_func__init_init_value;
  *(_OWORD *)a1 = pg_query__window_func__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264BE28;
  return result;
}

uint64_t pg_query__window_func__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__window_func__descriptor)
    pg_query__window_func__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__window_func__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__window_func__descriptor)
    pg_query__window_func__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__window_func__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__window_func__descriptor)
    pg_query__window_func__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__window_func__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__window_func__descriptor, a1, a2, a3);
}

void **pg_query__window_func__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__window_func__descriptor)
      pg_query__window_func__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__subscripting_ref__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264BE90;
  a1[3] = unk_1E264BEA0;
  a1[4] = xmmword_1E264BEB0;
  a1[5] = unk_1E264BEC0;
  result = *(double *)&pg_query__subscripting_ref__init_init_value;
  *a1 = pg_query__subscripting_ref__init_init_value;
  a1[1] = unk_1E264BE80;
  return result;
}

uint64_t pg_query__subscripting_ref__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__subscripting_ref__descriptor)
    pg_query__subscripting_ref__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__subscripting_ref__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__subscripting_ref__descriptor)
    pg_query__subscripting_ref__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__subscripting_ref__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__subscripting_ref__descriptor)
    pg_query__subscripting_ref__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__subscripting_ref__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__subscripting_ref__descriptor, a1, a2, a3);
}

void **pg_query__subscripting_ref__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__subscripting_ref__descriptor)
      pg_query__subscripting_ref__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__func_expr__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264BEF0;
  *(_OWORD *)(a1 + 48) = unk_1E264BF00;
  *(_OWORD *)(a1 + 64) = xmmword_1E264BF10;
  *(_QWORD *)(a1 + 80) = 0;
  result = *(double *)&pg_query__func_expr__init_init_value;
  *(_OWORD *)a1 = pg_query__func_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264BEE0;
  return result;
}

uint64_t pg_query__func_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__func_expr__descriptor)
    pg_query__func_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__func_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__func_expr__descriptor)
    pg_query__func_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__func_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__func_expr__descriptor)
    pg_query__func_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__func_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__func_expr__descriptor, a1, a2, a3);
}

void **pg_query__func_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__func_expr__descriptor)
      pg_query__func_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__named_arg_expr__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__named_arg_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264BF38;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264BF48;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__named_arg_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__named_arg_expr__descriptor)
    pg_query__named_arg_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__named_arg_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__named_arg_expr__descriptor)
    pg_query__named_arg_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__named_arg_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__named_arg_expr__descriptor)
    pg_query__named_arg_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__named_arg_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__named_arg_expr__descriptor, a1, a2, a3);
}

void **pg_query__named_arg_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__named_arg_expr__descriptor)
      pg_query__named_arg_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__op_expr__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264BF80;
  a1[3] = unk_1E264BF90;
  a1[4] = xmmword_1E264BFA0;
  result = 0.0;
  *a1 = pg_query__op_expr__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264BF70;
  return result;
}

uint64_t pg_query__op_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__op_expr__descriptor)
    pg_query__op_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__op_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__op_expr__descriptor)
    pg_query__op_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__op_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__op_expr__descriptor)
    pg_query__op_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__op_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__op_expr__descriptor, a1, a2, a3);
}

void **pg_query__op_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__op_expr__descriptor)
      pg_query__op_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__distinct_expr__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264BFD0;
  a1[3] = unk_1E264BFE0;
  a1[4] = xmmword_1E264BFF0;
  result = dbl_1E264BFC0[0];
  *a1 = pg_query__distinct_expr__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E264BFC0;
  return result;
}

uint64_t pg_query__distinct_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__distinct_expr__descriptor)
    pg_query__distinct_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__distinct_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__distinct_expr__descriptor)
    pg_query__distinct_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__distinct_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__distinct_expr__descriptor)
    pg_query__distinct_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__distinct_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__distinct_expr__descriptor, a1, a2, a3);
}

void **pg_query__distinct_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__distinct_expr__descriptor)
      pg_query__distinct_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__null_if_expr__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264C020;
  a1[3] = unk_1E264C030;
  a1[4] = xmmword_1E264C040;
  result = 0.0;
  *a1 = pg_query__null_if_expr__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264C010;
  return result;
}

uint64_t pg_query__null_if_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__null_if_expr__descriptor)
    pg_query__null_if_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__null_if_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__null_if_expr__descriptor)
    pg_query__null_if_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__null_if_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__null_if_expr__descriptor)
    pg_query__null_if_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__null_if_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__null_if_expr__descriptor, a1, a2, a3);
}

void **pg_query__null_if_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__null_if_expr__descriptor)
      pg_query__null_if_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__scalar_array_op_expr__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264C070;
  *(_OWORD *)(a1 + 48) = unk_1E264C080;
  *(_QWORD *)(a1 + 64) = 0;
  result = dbl_1E264C060[0];
  *(_OWORD *)a1 = pg_query__scalar_array_op_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E264C060;
  return result;
}

uint64_t pg_query__scalar_array_op_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__scalar_array_op_expr__descriptor)
    pg_query__scalar_array_op_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__scalar_array_op_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__scalar_array_op_expr__descriptor)
    pg_query__scalar_array_op_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__scalar_array_op_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__scalar_array_op_expr__descriptor)
    pg_query__scalar_array_op_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__scalar_array_op_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__scalar_array_op_expr__descriptor, a1, a2, a3);
}

void **pg_query__scalar_array_op_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__scalar_array_op_expr__descriptor)
      pg_query__scalar_array_op_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__BOOL_expr__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__BOOL_expr__init_init_value;
  a1[1] = unk_1E264C0A8;
  result = 0.0;
  a1[2] = xmmword_1E264C0B8;
  a1[3] = unk_1E264C0C8;
  return result;
}

uint64_t pg_query__BOOL_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__BOOL_expr__descriptor)
    pg_query__BOOL_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__BOOL_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__BOOL_expr__descriptor)
    pg_query__BOOL_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__BOOL_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__BOOL_expr__descriptor)
    pg_query__BOOL_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__BOOL_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__BOOL_expr__descriptor, a1, a2, a3);
}

void **pg_query__BOOL_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__BOOL_expr__descriptor)
      pg_query__BOOL_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__sub_link__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264C0F8;
  a1[3] = unk_1E264C108;
  a1[4] = xmmword_1E264C118;
  result = dbl_1E264C0E8[0];
  *a1 = pg_query__sub_link__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E264C0E8;
  return result;
}

uint64_t pg_query__sub_link__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__sub_link__descriptor)
    pg_query__sub_link__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__sub_link__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__sub_link__descriptor)
    pg_query__sub_link__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__sub_link__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__sub_link__descriptor)
    pg_query__sub_link__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__sub_link__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__sub_link__descriptor, a1, a2, a3);
}

void **pg_query__sub_link__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__sub_link__descriptor)
      pg_query__sub_link__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__sub_plan__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 128) = xmmword_1E264C1A8;
  *(_OWORD *)(a1 + 144) = unk_1E264C1B8;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_1E264C168;
  *(_OWORD *)(a1 + 80) = unk_1E264C178;
  *(_OWORD *)(a1 + 96) = xmmword_1E264C188;
  *(_OWORD *)(a1 + 112) = unk_1E264C198;
  *(_OWORD *)a1 = pg_query__sub_plan__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264C138;
  result = dbl_1E264C158[0];
  *(_OWORD *)(a1 + 32) = xmmword_1E264C148;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)dbl_1E264C158;
  return result;
}

uint64_t pg_query__sub_plan__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__sub_plan__descriptor)
    pg_query__sub_plan__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__sub_plan__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__sub_plan__descriptor)
    pg_query__sub_plan__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__sub_plan__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__sub_plan__descriptor)
    pg_query__sub_plan__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__sub_plan__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__sub_plan__descriptor, a1, a2, a3);
}

void **pg_query__sub_plan__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__sub_plan__descriptor)
      pg_query__sub_plan__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alternative_sub_plan__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__alternative_sub_plan__init_init_value;
  a1[1] = unk_1E264C1E0;
  result = 0.0;
  a1[2] = xmmword_1E264C1F0;
  return result;
}

uint64_t pg_query__alternative_sub_plan__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alternative_sub_plan__descriptor)
    pg_query__alternative_sub_plan__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alternative_sub_plan__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alternative_sub_plan__descriptor)
    pg_query__alternative_sub_plan__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alternative_sub_plan__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alternative_sub_plan__descriptor)
    pg_query__alternative_sub_plan__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alternative_sub_plan__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alternative_sub_plan__descriptor, a1, a2, a3);
}

void **pg_query__alternative_sub_plan__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alternative_sub_plan__descriptor)
      pg_query__alternative_sub_plan__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__field_select__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__field_select__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264C210;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264C220;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__field_select__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__field_select__descriptor)
    pg_query__field_select__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__field_select__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__field_select__descriptor)
    pg_query__field_select__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__field_select__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__field_select__descriptor)
    pg_query__field_select__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__field_select__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__field_select__descriptor, a1, a2, a3);
}

void **pg_query__field_select__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__field_select__descriptor)
      pg_query__field_select__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__field_store__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264C258;
  a1[3] = unk_1E264C268;
  a1[4] = xmmword_1E264C278;
  result = dbl_1E264C248[0];
  *a1 = pg_query__field_store__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E264C248;
  return result;
}

uint64_t pg_query__field_store__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__field_store__descriptor)
    pg_query__field_store__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__field_store__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__field_store__descriptor)
    pg_query__field_store__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__field_store__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__field_store__descriptor)
    pg_query__field_store__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__field_store__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__field_store__descriptor, a1, a2, a3);
}

void **pg_query__field_store__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__field_store__descriptor)
      pg_query__field_store__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__relabel_type__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__relabel_type__init_init_value;
  a1[1] = unk_1E264C298;
  result = 0.0;
  a1[2] = xmmword_1E264C2A8;
  a1[3] = unk_1E264C2B8;
  return result;
}

uint64_t pg_query__relabel_type__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__relabel_type__descriptor)
    pg_query__relabel_type__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__relabel_type__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__relabel_type__descriptor)
    pg_query__relabel_type__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__relabel_type__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__relabel_type__descriptor)
    pg_query__relabel_type__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__relabel_type__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__relabel_type__descriptor, a1, a2, a3);
}

void **pg_query__relabel_type__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__relabel_type__descriptor)
      pg_query__relabel_type__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__coerce_via_io__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__coerce_via_io__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264C2D8;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264C2E8;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__coerce_via_io__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__coerce_via_io__descriptor)
    pg_query__coerce_via_io__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__coerce_via_io__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__coerce_via_io__descriptor)
    pg_query__coerce_via_io__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__coerce_via_io__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__coerce_via_io__descriptor)
    pg_query__coerce_via_io__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__coerce_via_io__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__coerce_via_io__descriptor, a1, a2, a3);
}

void **pg_query__coerce_via_io__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__coerce_via_io__descriptor)
      pg_query__coerce_via_io__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__array_coerce_expr__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264C320;
  *(_OWORD *)(a1 + 48) = unk_1E264C330;
  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)a1 = pg_query__array_coerce_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264C310;
  return result;
}

uint64_t pg_query__array_coerce_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__array_coerce_expr__descriptor)
    pg_query__array_coerce_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__array_coerce_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__array_coerce_expr__descriptor)
    pg_query__array_coerce_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__array_coerce_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__array_coerce_expr__descriptor)
    pg_query__array_coerce_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__array_coerce_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__array_coerce_expr__descriptor, a1, a2, a3);
}

void **pg_query__array_coerce_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__array_coerce_expr__descriptor)
      pg_query__array_coerce_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__convert_rowtype_expr__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__convert_rowtype_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264C358;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264C368;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__convert_rowtype_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__convert_rowtype_expr__descriptor)
    pg_query__convert_rowtype_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__convert_rowtype_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__convert_rowtype_expr__descriptor)
    pg_query__convert_rowtype_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__convert_rowtype_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__convert_rowtype_expr__descriptor)
    pg_query__convert_rowtype_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__convert_rowtype_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__convert_rowtype_expr__descriptor, a1, a2, a3);
}

void **pg_query__convert_rowtype_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__convert_rowtype_expr__descriptor)
      pg_query__convert_rowtype_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__collate_expr__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__collate_expr__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264C390;
  result = 0.0;
  a1[2] = xmmword_1E264C3A0;
  return result;
}

uint64_t pg_query__collate_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__collate_expr__descriptor)
    pg_query__collate_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__collate_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__collate_expr__descriptor)
    pg_query__collate_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__collate_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__collate_expr__descriptor)
    pg_query__collate_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__collate_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__collate_expr__descriptor, a1, a2, a3);
}

void **pg_query__collate_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__collate_expr__descriptor)
      pg_query__collate_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__case_expr__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264C3D0;
  a1[3] = unk_1E264C3E0;
  a1[4] = xmmword_1E264C3F0;
  result = dbl_1E264C3C0[0];
  *a1 = pg_query__case_expr__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E264C3C0;
  return result;
}

uint64_t pg_query__case_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__case_expr__descriptor)
    pg_query__case_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__case_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__case_expr__descriptor)
    pg_query__case_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__case_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__case_expr__descriptor)
    pg_query__case_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__case_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__case_expr__descriptor, a1, a2, a3);
}

void **pg_query__case_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__case_expr__descriptor)
      pg_query__case_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__case_when__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__case_when__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264C410;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264C420;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__case_when__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__case_when__descriptor)
    pg_query__case_when__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__case_when__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__case_when__descriptor)
    pg_query__case_when__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__case_when__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__case_when__descriptor)
    pg_query__case_when__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__case_when__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__case_when__descriptor, a1, a2, a3);
}

void **pg_query__case_when__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__case_when__descriptor)
      pg_query__case_when__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__case_test_expr__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__case_test_expr__init_init_value;
  a1[1] = unk_1E264C448;
  result = 0.0;
  a1[2] = xmmword_1E264C458;
  return result;
}

uint64_t pg_query__case_test_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__case_test_expr__descriptor)
    pg_query__case_test_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__case_test_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__case_test_expr__descriptor)
    pg_query__case_test_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__case_test_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__case_test_expr__descriptor)
    pg_query__case_test_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__case_test_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__case_test_expr__descriptor, a1, a2, a3);
}

void **pg_query__case_test_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__case_test_expr__descriptor)
      pg_query__case_test_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__array_expr__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264C488;
  *(_OWORD *)(a1 + 48) = unk_1E264C498;
  *(_QWORD *)(a1 + 64) = 0;
  result = dbl_1E264C478[0];
  *(_OWORD *)a1 = pg_query__array_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E264C478;
  return result;
}

uint64_t pg_query__array_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__array_expr__descriptor)
    pg_query__array_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__array_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__array_expr__descriptor)
    pg_query__array_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__array_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__array_expr__descriptor)
    pg_query__array_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__array_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__array_expr__descriptor, a1, a2, a3);
}

void **pg_query__array_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__array_expr__descriptor)
      pg_query__array_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__row_expr__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264C4D0;
  a1[3] = unk_1E264C4E0;
  a1[4] = xmmword_1E264C4F0;
  result = dbl_1E264C4C0[0];
  *a1 = pg_query__row_expr__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E264C4C0;
  return result;
}

uint64_t pg_query__row_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__row_expr__descriptor)
    pg_query__row_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__row_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__row_expr__descriptor)
    pg_query__row_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__row_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__row_expr__descriptor)
    pg_query__row_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__row_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__row_expr__descriptor, a1, a2, a3);
}

void **pg_query__row_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__row_expr__descriptor)
      pg_query__row_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__row_compare_expr__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 64) = xmmword_1E264C540;
  *(_OWORD *)(a1 + 80) = unk_1E264C550;
  *(_OWORD *)(a1 + 96) = xmmword_1E264C560;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)a1 = pg_query__row_compare_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264C510;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264C520;
  *(_OWORD *)(a1 + 48) = unk_1E264C530;
  return result;
}

uint64_t pg_query__row_compare_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__row_compare_expr__descriptor)
    pg_query__row_compare_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__row_compare_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__row_compare_expr__descriptor)
    pg_query__row_compare_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__row_compare_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__row_compare_expr__descriptor)
    pg_query__row_compare_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__row_compare_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__row_compare_expr__descriptor, a1, a2, a3);
}

void **pg_query__row_compare_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__row_compare_expr__descriptor)
      pg_query__row_compare_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__coalesce_expr__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__coalesce_expr__init_init_value;
  a1[1] = unk_1E264C588;
  result = 0.0;
  a1[2] = xmmword_1E264C598;
  a1[3] = unk_1E264C5A8;
  return result;
}

uint64_t pg_query__coalesce_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__coalesce_expr__descriptor)
    pg_query__coalesce_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__coalesce_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__coalesce_expr__descriptor)
    pg_query__coalesce_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__coalesce_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__coalesce_expr__descriptor)
    pg_query__coalesce_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__coalesce_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__coalesce_expr__descriptor, a1, a2, a3);
}

void **pg_query__coalesce_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__coalesce_expr__descriptor)
      pg_query__coalesce_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__min_max_expr__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264C5D8;
  *(_OWORD *)(a1 + 48) = unk_1E264C5E8;
  *(_QWORD *)(a1 + 64) = 0;
  result = dbl_1E264C5C8[0];
  *(_OWORD *)a1 = pg_query__min_max_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E264C5C8;
  return result;
}

uint64_t pg_query__min_max_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__min_max_expr__descriptor)
    pg_query__min_max_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__min_max_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__min_max_expr__descriptor)
    pg_query__min_max_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__min_max_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__min_max_expr__descriptor)
    pg_query__min_max_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__min_max_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__min_max_expr__descriptor, a1, a2, a3);
}

void **pg_query__min_max_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__min_max_expr__descriptor)
      pg_query__min_max_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__sqlvalue_function__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__sqlvalue_function__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264C610;
  result = 0.0;
  a1[2] = xmmword_1E264C620;
  return result;
}

uint64_t pg_query__sqlvalue_function__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__sqlvalue_function__descriptor)
    pg_query__sqlvalue_function__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__sqlvalue_function__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__sqlvalue_function__descriptor)
    pg_query__sqlvalue_function__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__sqlvalue_function__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__sqlvalue_function__descriptor)
    pg_query__sqlvalue_function__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__sqlvalue_function__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__sqlvalue_function__descriptor, a1, a2, a3);
}

void **pg_query__sqlvalue_function__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__sqlvalue_function__descriptor)
      pg_query__sqlvalue_function__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__xml_expr__init(_OWORD *a1)
{
  double result;

  a1[4] = xmmword_1E264C670;
  a1[5] = unk_1E264C680;
  a1[6] = xmmword_1E264C690;
  *a1 = pg_query__xml_expr__init_init_value;
  a1[1] = unk_1E264C640;
  result = dbl_1E264C660[0];
  a1[2] = xmmword_1E264C650;
  a1[3] = *(_OWORD *)dbl_1E264C660;
  return result;
}

uint64_t pg_query__xml_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__xml_expr__descriptor)
    pg_query__xml_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__xml_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__xml_expr__descriptor)
    pg_query__xml_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__xml_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__xml_expr__descriptor)
    pg_query__xml_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__xml_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__xml_expr__descriptor, a1, a2, a3);
}

void **pg_query__xml_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__xml_expr__descriptor)
      pg_query__xml_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__null_test__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__null_test__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264C6B0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264C6C0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__null_test__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__null_test__descriptor)
    pg_query__null_test__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__null_test__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__null_test__descriptor)
    pg_query__null_test__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__null_test__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__null_test__descriptor)
    pg_query__null_test__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__null_test__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__null_test__descriptor, a1, a2, a3);
}

void **pg_query__null_test__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__null_test__descriptor)
      pg_query__null_test__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__BOOLean_test__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__BOOLean_test__init_init_value;
  a1[1] = unk_1E264C6E8;
  result = 0.0;
  a1[2] = xmmword_1E264C6F8;
  return result;
}

uint64_t pg_query__BOOLean_test__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__BOOLean_test__descriptor)
    pg_query__BOOLean_test__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__BOOLean_test__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__BOOLean_test__descriptor)
    pg_query__BOOLean_test__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__BOOLean_test__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__BOOLean_test__descriptor)
    pg_query__BOOLean_test__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__BOOLean_test__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__BOOLean_test__descriptor, a1, a2, a3);
}

void **pg_query__BOOLean_test__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__BOOLean_test__descriptor)
      pg_query__BOOLean_test__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__coerce_to_domain__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__coerce_to_domain__init_init_value;
  a1[1] = unk_1E264C718;
  result = 0.0;
  a1[2] = xmmword_1E264C728;
  a1[3] = unk_1E264C738;
  return result;
}

uint64_t pg_query__coerce_to_domain__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__coerce_to_domain__descriptor)
    pg_query__coerce_to_domain__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__coerce_to_domain__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__coerce_to_domain__descriptor)
    pg_query__coerce_to_domain__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__coerce_to_domain__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__coerce_to_domain__descriptor)
    pg_query__coerce_to_domain__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__coerce_to_domain__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__coerce_to_domain__descriptor, a1, a2, a3);
}

void **pg_query__coerce_to_domain__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__coerce_to_domain__descriptor)
      pg_query__coerce_to_domain__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__coerce_to_domain_value__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__coerce_to_domain_value__init_init_value;
  a1[1] = unk_1E264C758;
  result = 0.0;
  a1[2] = xmmword_1E264C768;
  return result;
}

uint64_t pg_query__coerce_to_domain_value__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__coerce_to_domain_value__descriptor)
    pg_query__coerce_to_domain_value__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__coerce_to_domain_value__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__coerce_to_domain_value__descriptor)
    pg_query__coerce_to_domain_value__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__coerce_to_domain_value__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__coerce_to_domain_value__descriptor)
    pg_query__coerce_to_domain_value__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__coerce_to_domain_value__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__coerce_to_domain_value__descriptor, a1, a2, a3);
}

void **pg_query__coerce_to_domain_value__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__coerce_to_domain_value__descriptor)
      pg_query__coerce_to_domain_value__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__set_to_default__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__set_to_default__init_init_value;
  a1[1] = unk_1E264C788;
  result = 0.0;
  a1[2] = xmmword_1E264C798;
  return result;
}

uint64_t pg_query__set_to_default__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__set_to_default__descriptor)
    pg_query__set_to_default__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__set_to_default__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__set_to_default__descriptor)
    pg_query__set_to_default__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__set_to_default__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__set_to_default__descriptor)
    pg_query__set_to_default__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__set_to_default__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__set_to_default__descriptor, a1, a2, a3);
}

void **pg_query__set_to_default__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__set_to_default__descriptor)
      pg_query__set_to_default__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__current_of_expr__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__current_of_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264C7B8;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264C7C8;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__current_of_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__current_of_expr__descriptor)
    pg_query__current_of_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__current_of_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__current_of_expr__descriptor)
    pg_query__current_of_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__current_of_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__current_of_expr__descriptor)
    pg_query__current_of_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__current_of_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__current_of_expr__descriptor, a1, a2, a3);
}

void **pg_query__current_of_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__current_of_expr__descriptor)
      pg_query__current_of_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__next_value_expr__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__next_value_expr__init_init_value;
  *(_OWORD *)a1 = pg_query__next_value_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264C7F0;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__next_value_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__next_value_expr__descriptor)
    pg_query__next_value_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__next_value_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__next_value_expr__descriptor)
    pg_query__next_value_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__next_value_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__next_value_expr__descriptor)
    pg_query__next_value_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__next_value_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__next_value_expr__descriptor, a1, a2, a3);
}

void **pg_query__next_value_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__next_value_expr__descriptor)
      pg_query__next_value_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__inference_elem__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__inference_elem__init_init_value;
  a1[1] = unk_1E264C818;
  result = 0.0;
  a1[2] = xmmword_1E264C828;
  return result;
}

uint64_t pg_query__inference_elem__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__inference_elem__descriptor)
    pg_query__inference_elem__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__inference_elem__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__inference_elem__descriptor)
    pg_query__inference_elem__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__inference_elem__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__inference_elem__descriptor)
    pg_query__inference_elem__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__inference_elem__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__inference_elem__descriptor, a1, a2, a3);
}

void **pg_query__inference_elem__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__inference_elem__descriptor)
      pg_query__inference_elem__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__target_entry__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264C858;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)&off_1E264C868;
  *(_QWORD *)(a1 + 64) = 0;
  result = dbl_1E264C848[0];
  *(_OWORD *)a1 = pg_query__target_entry__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E264C848;
  return result;
}

uint64_t pg_query__target_entry__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__target_entry__descriptor)
    pg_query__target_entry__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__target_entry__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__target_entry__descriptor)
    pg_query__target_entry__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__target_entry__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__target_entry__descriptor)
    pg_query__target_entry__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__target_entry__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__target_entry__descriptor, a1, a2, a3);
}

void **pg_query__target_entry__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__target_entry__descriptor)
      pg_query__target_entry__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__range_tbl_ref__init(_OWORD *a1)
{
  double result;

  result = *(double *)&pg_query__range_tbl_ref__init_init_value;
  *a1 = pg_query__range_tbl_ref__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264C890;
  return result;
}

uint64_t pg_query__range_tbl_ref__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__range_tbl_ref__descriptor)
    pg_query__range_tbl_ref__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__range_tbl_ref__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__range_tbl_ref__descriptor)
    pg_query__range_tbl_ref__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__range_tbl_ref__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__range_tbl_ref__descriptor)
    pg_query__range_tbl_ref__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__range_tbl_ref__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__range_tbl_ref__descriptor, a1, a2, a3);
}

void **pg_query__range_tbl_ref__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__range_tbl_ref__descriptor)
      pg_query__range_tbl_ref__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__join_expr__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264C8C0;
  *(_OWORD *)(a1 + 48) = unk_1E264C8D0;
  *(_OWORD *)(a1 + 64) = xmmword_1E264C8E0;
  *(_QWORD *)(a1 + 80) = 0;
  result = *(double *)&pg_query__join_expr__init_init_value;
  *(_OWORD *)a1 = pg_query__join_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264C8B0;
  return result;
}

uint64_t pg_query__join_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__join_expr__descriptor)
    pg_query__join_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__join_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__join_expr__descriptor)
    pg_query__join_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__join_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__join_expr__descriptor)
    pg_query__join_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__join_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__join_expr__descriptor, a1, a2, a3);
}

void **pg_query__join_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__join_expr__descriptor)
      pg_query__join_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__from_expr__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__from_expr__init_init_value;
  a1[1] = unk_1E264C908;
  result = 0.0;
  a1[2] = xmmword_1E264C918;
  return result;
}

uint64_t pg_query__from_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__from_expr__descriptor)
    pg_query__from_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__from_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__from_expr__descriptor)
    pg_query__from_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__from_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__from_expr__descriptor)
    pg_query__from_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__from_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__from_expr__descriptor, a1, a2, a3);
}

void **pg_query__from_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__from_expr__descriptor)
      pg_query__from_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__on_conflict_expr__init(_OWORD *a1)
{
  double result;

  a1[4] = xmmword_1E264C968;
  a1[5] = unk_1E264C978;
  a1[6] = xmmword_1E264C988;
  *a1 = pg_query__on_conflict_expr__init_init_value;
  a1[1] = unk_1E264C938;
  result = dbl_1E264C958[0];
  a1[2] = xmmword_1E264C948;
  a1[3] = *(_OWORD *)dbl_1E264C958;
  return result;
}

uint64_t pg_query__on_conflict_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__on_conflict_expr__descriptor)
    pg_query__on_conflict_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__on_conflict_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__on_conflict_expr__descriptor)
    pg_query__on_conflict_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__on_conflict_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__on_conflict_expr__descriptor)
    pg_query__on_conflict_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__on_conflict_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__on_conflict_expr__descriptor, a1, a2, a3);
}

void **pg_query__on_conflict_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__on_conflict_expr__descriptor)
      pg_query__on_conflict_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__into_clause__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 64) = xmmword_1E264C9D8;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)&off_1E264C9E8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)a1 = pg_query__into_clause__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264C9A8;
  result = COERCE_DOUBLE(&protobuf_c_empty_string);
  *(_OWORD *)(a1 + 32) = xmmword_1E264C9B8;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)&off_1E264C9C8;
  return result;
}

uint64_t pg_query__into_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__into_clause__descriptor)
    pg_query__into_clause__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__into_clause__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__into_clause__descriptor)
    pg_query__into_clause__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__into_clause__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__into_clause__descriptor)
    pg_query__into_clause__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__into_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__into_clause__descriptor, a1, a2, a3);
}

void **pg_query__into_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__into_clause__descriptor)
      pg_query__into_clause__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__raw_stmt__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__raw_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__raw_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264CA10;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__raw_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__raw_stmt__descriptor)
    pg_query__raw_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__raw_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__raw_stmt__descriptor)
    pg_query__raw_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__raw_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__raw_stmt__descriptor)
    pg_query__raw_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__raw_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__raw_stmt__descriptor, a1, a2, a3);
}

void **pg_query__raw_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__raw_stmt__descriptor)
      pg_query__raw_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

void *pg_query__query__init(void *a1)
{
  return memcpy(a1, &pg_query__query__init_init_value, 0x160uLL);
}

uint64_t pg_query__query__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__query__descriptor)
    pg_query__query__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__query__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__query__descriptor)
    pg_query__query__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__query__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__query__descriptor)
    pg_query__query__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__query__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__query__descriptor, a1, a2, a3);
}

void **pg_query__query__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__query__descriptor)
      pg_query__query__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__insert_stmt__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264CBA8;
  a1[3] = unk_1E264CBB8;
  a1[4] = xmmword_1E264CBC8;
  a1[5] = unk_1E264CBD8;
  result = *(double *)&pg_query__insert_stmt__init_init_value;
  *a1 = pg_query__insert_stmt__init_init_value;
  a1[1] = unk_1E264CB98;
  return result;
}

uint64_t pg_query__insert_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__insert_stmt__descriptor)
    pg_query__insert_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__insert_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__insert_stmt__descriptor)
    pg_query__insert_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__insert_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__insert_stmt__descriptor)
    pg_query__insert_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__insert_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__insert_stmt__descriptor, a1, a2, a3);
}

void **pg_query__insert_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__insert_stmt__descriptor)
      pg_query__insert_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__delete_stmt__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264CC08;
  a1[3] = unk_1E264CC18;
  a1[4] = xmmword_1E264CC28;
  result = dbl_1E264CBF8[0];
  *a1 = pg_query__delete_stmt__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E264CBF8;
  return result;
}

uint64_t pg_query__delete_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__delete_stmt__descriptor)
    pg_query__delete_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__delete_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__delete_stmt__descriptor)
    pg_query__delete_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__delete_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__delete_stmt__descriptor)
    pg_query__delete_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__delete_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__delete_stmt__descriptor, a1, a2, a3);
}

void **pg_query__delete_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__delete_stmt__descriptor)
      pg_query__delete_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__update_stmt__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264CC58;
  a1[3] = unk_1E264CC68;
  a1[4] = xmmword_1E264CC78;
  a1[5] = unk_1E264CC88;
  result = *(double *)&pg_query__update_stmt__init_init_value;
  *a1 = pg_query__update_stmt__init_init_value;
  a1[1] = unk_1E264CC48;
  return result;
}

uint64_t pg_query__update_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__update_stmt__descriptor)
    pg_query__update_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__update_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__update_stmt__descriptor)
    pg_query__update_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__update_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__update_stmt__descriptor)
    pg_query__update_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__update_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__update_stmt__descriptor, a1, a2, a3);
}

void **pg_query__update_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__update_stmt__descriptor)
      pg_query__update_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__select_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 192) = xmmword_1E264CD58;
  *(_OWORD *)(a1 + 208) = unk_1E264CD68;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 128) = xmmword_1E264CD18;
  *(_OWORD *)(a1 + 144) = unk_1E264CD28;
  *(_OWORD *)(a1 + 160) = xmmword_1E264CD38;
  *(_OWORD *)(a1 + 176) = unk_1E264CD48;
  *(_OWORD *)(a1 + 64) = xmmword_1E264CCD8;
  *(_OWORD *)(a1 + 80) = unk_1E264CCE8;
  *(_OWORD *)(a1 + 96) = xmmword_1E264CCF8;
  *(_OWORD *)(a1 + 112) = unk_1E264CD08;
  *(_OWORD *)a1 = pg_query__select_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264CCA8;
  result = dbl_1E264CCC8[0];
  *(_OWORD *)(a1 + 32) = xmmword_1E264CCB8;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)dbl_1E264CCC8;
  return result;
}

uint64_t pg_query__select_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__select_stmt__descriptor)
    pg_query__select_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__select_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__select_stmt__descriptor)
    pg_query__select_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__select_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__select_stmt__descriptor)
    pg_query__select_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__select_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__select_stmt__descriptor, a1, a2, a3);
}

void **pg_query__select_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__select_stmt__descriptor)
      pg_query__select_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_table_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__alter_table_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264CD90;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264CDA0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__alter_table_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_table_stmt__descriptor)
    pg_query__alter_table_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_table_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_table_stmt__descriptor)
    pg_query__alter_table_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_table_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_table_stmt__descriptor)
    pg_query__alter_table_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_table_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_table_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_table_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_table_stmt__descriptor)
      pg_query__alter_table_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_table_cmd__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264CDD8;
  *(_OWORD *)(a1 + 48) = unk_1E264CDE8;
  *(_QWORD *)(a1 + 64) = 0;
  result = dbl_1E264CDC8[0];
  *(_OWORD *)a1 = pg_query__alter_table_cmd__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E264CDC8;
  return result;
}

uint64_t pg_query__alter_table_cmd__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_table_cmd__descriptor)
    pg_query__alter_table_cmd__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_table_cmd__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_table_cmd__descriptor)
    pg_query__alter_table_cmd__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_table_cmd__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_table_cmd__descriptor)
    pg_query__alter_table_cmd__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_table_cmd__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_table_cmd__descriptor, a1, a2, a3);
}

void **pg_query__alter_table_cmd__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_table_cmd__descriptor)
      pg_query__alter_table_cmd__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_domain_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264CE20;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)&off_1E264CE30;
  *(_QWORD *)(a1 + 64) = 0;
  result = dbl_1E264CE10[0];
  *(_OWORD *)a1 = pg_query__alter_domain_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E264CE10;
  return result;
}

uint64_t pg_query__alter_domain_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_domain_stmt__descriptor)
    pg_query__alter_domain_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_domain_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_domain_stmt__descriptor)
    pg_query__alter_domain_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_domain_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_domain_stmt__descriptor)
    pg_query__alter_domain_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_domain_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_domain_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_domain_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_domain_stmt__descriptor)
      pg_query__alter_domain_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__set_operation_stmt__init(_OWORD *a1)
{
  double result;

  a1[4] = xmmword_1E264CE88;
  a1[5] = unk_1E264CE98;
  a1[6] = xmmword_1E264CEA8;
  *a1 = pg_query__set_operation_stmt__init_init_value;
  a1[1] = unk_1E264CE58;
  result = dbl_1E264CE78[0];
  a1[2] = xmmword_1E264CE68;
  a1[3] = *(_OWORD *)dbl_1E264CE78;
  return result;
}

uint64_t pg_query__set_operation_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__set_operation_stmt__descriptor)
    pg_query__set_operation_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__set_operation_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__set_operation_stmt__descriptor)
    pg_query__set_operation_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__set_operation_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__set_operation_stmt__descriptor)
    pg_query__set_operation_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__set_operation_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__set_operation_stmt__descriptor, a1, a2, a3);
}

void **pg_query__set_operation_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__set_operation_stmt__descriptor)
      pg_query__set_operation_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__grant_stmt__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264CED8;
  a1[3] = unk_1E264CEE8;
  a1[4] = xmmword_1E264CEF8;
  a1[5] = unk_1E264CF08;
  result = *(double *)&pg_query__grant_stmt__init_init_value;
  *a1 = pg_query__grant_stmt__init_init_value;
  a1[1] = unk_1E264CEC8;
  return result;
}

uint64_t pg_query__grant_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__grant_stmt__descriptor)
    pg_query__grant_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__grant_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__grant_stmt__descriptor)
    pg_query__grant_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__grant_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__grant_stmt__descriptor)
    pg_query__grant_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__grant_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__grant_stmt__descriptor, a1, a2, a3);
}

void **pg_query__grant_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__grant_stmt__descriptor)
      pg_query__grant_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__grant_role_stmt__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264CF38;
  a1[3] = unk_1E264CF48;
  a1[4] = xmmword_1E264CF58;
  result = dbl_1E264CF28[0];
  *a1 = pg_query__grant_role_stmt__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E264CF28;
  return result;
}

uint64_t pg_query__grant_role_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__grant_role_stmt__descriptor)
    pg_query__grant_role_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__grant_role_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__grant_role_stmt__descriptor)
    pg_query__grant_role_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__grant_role_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__grant_role_stmt__descriptor)
    pg_query__grant_role_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__grant_role_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__grant_role_stmt__descriptor, a1, a2, a3);
}

void **pg_query__grant_role_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__grant_role_stmt__descriptor)
      pg_query__grant_role_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_default_privileges_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__alter_default_privileges_stmt__init_init_value;
  a1[1] = unk_1E264CF78;
  result = 0.0;
  a1[2] = xmmword_1E264CF88;
  return result;
}

uint64_t pg_query__alter_default_privileges_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_default_privileges_stmt__descriptor)
    pg_query__alter_default_privileges_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_default_privileges_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_default_privileges_stmt__descriptor)
    pg_query__alter_default_privileges_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_default_privileges_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_default_privileges_stmt__descriptor)
    pg_query__alter_default_privileges_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_default_privileges_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_default_privileges_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_default_privileges_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_default_privileges_stmt__descriptor)
      pg_query__alter_default_privileges_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__close_portal_stmt__init(_OWORD *a1)
{
  double result;

  result = *(double *)&pg_query__close_portal_stmt__init_init_value;
  *a1 = pg_query__close_portal_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264CFA8;
  return result;
}

uint64_t pg_query__close_portal_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__close_portal_stmt__descriptor)
    pg_query__close_portal_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__close_portal_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__close_portal_stmt__descriptor)
    pg_query__close_portal_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__close_portal_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__close_portal_stmt__descriptor)
    pg_query__close_portal_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__close_portal_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__close_portal_stmt__descriptor, a1, a2, a3);
}

void **pg_query__close_portal_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__close_portal_stmt__descriptor)
      pg_query__close_portal_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__cluster_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__cluster_stmt__init_init_value;
  a1[1] = unk_1E264CFC8;
  *(_QWORD *)&result = 0x18DCB7E5CLL;
  a1[2] = xmmword_1E264CFD8;
  return result;
}

uint64_t pg_query__cluster_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__cluster_stmt__descriptor)
    pg_query__cluster_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__cluster_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__cluster_stmt__descriptor)
    pg_query__cluster_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__cluster_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__cluster_stmt__descriptor)
    pg_query__cluster_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__cluster_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__cluster_stmt__descriptor, a1, a2, a3);
}

void **pg_query__cluster_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__cluster_stmt__descriptor)
      pg_query__cluster_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__copy_stmt__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264D008;
  a1[3] = unk_1E264D018;
  a1[4] = xmmword_1E264D028;
  a1[5] = unk_1E264D038;
  result = *(double *)&pg_query__copy_stmt__init_init_value;
  *a1 = pg_query__copy_stmt__init_init_value;
  a1[1] = unk_1E264CFF8;
  return result;
}

uint64_t pg_query__copy_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__copy_stmt__descriptor)
    pg_query__copy_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__copy_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__copy_stmt__descriptor)
    pg_query__copy_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__copy_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__copy_stmt__descriptor)
    pg_query__copy_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__copy_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__copy_stmt__descriptor, a1, a2, a3);
}

void **pg_query__copy_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__copy_stmt__descriptor)
      pg_query__copy_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 96) = xmmword_1E264D0A8;
  *(_OWORD *)(a1 + 112) = unk_1E264D0B8;
  *(_OWORD *)(a1 + 128) = xmmword_1E264D0C8;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264D068;
  *(_OWORD *)(a1 + 48) = unk_1E264D078;
  *(_OWORD *)(a1 + 64) = xmmword_1E264D088;
  *(_OWORD *)(a1 + 80) = unk_1E264D098;
  result = *(double *)&pg_query__create_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__create_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264D058;
  return result;
}

uint64_t pg_query__create_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_stmt__descriptor)
    pg_query__create_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_stmt__descriptor)
    pg_query__create_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_stmt__descriptor)
    pg_query__create_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_stmt__descriptor)
      pg_query__create_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__define_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264D100;
  *(_OWORD *)(a1 + 48) = unk_1E264D110;
  *(_OWORD *)(a1 + 64) = xmmword_1E264D120;
  *(_QWORD *)(a1 + 80) = 0;
  result = *(double *)&pg_query__define_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__define_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264D0F0;
  return result;
}

uint64_t pg_query__define_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__define_stmt__descriptor)
    pg_query__define_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__define_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__define_stmt__descriptor)
    pg_query__define_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__define_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__define_stmt__descriptor)
    pg_query__define_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__define_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__define_stmt__descriptor, a1, a2, a3);
}

void **pg_query__define_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__define_stmt__descriptor)
      pg_query__define_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__drop_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__drop_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264D148;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264D158;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__drop_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__drop_stmt__descriptor)
    pg_query__drop_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__drop_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__drop_stmt__descriptor)
    pg_query__drop_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__drop_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__drop_stmt__descriptor)
    pg_query__drop_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__drop_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__drop_stmt__descriptor, a1, a2, a3);
}

void **pg_query__drop_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__drop_stmt__descriptor)
      pg_query__drop_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__truncate_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__truncate_stmt__init_init_value;
  a1[1] = unk_1E264D180;
  result = 0.0;
  a1[2] = xmmword_1E264D190;
  return result;
}

uint64_t pg_query__truncate_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__truncate_stmt__descriptor)
    pg_query__truncate_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__truncate_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__truncate_stmt__descriptor)
    pg_query__truncate_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__truncate_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__truncate_stmt__descriptor)
    pg_query__truncate_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__truncate_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__truncate_stmt__descriptor, a1, a2, a3);
}

void **pg_query__truncate_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__truncate_stmt__descriptor)
      pg_query__truncate_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__comment_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__comment_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264D1B0;
  result = 0.0;
  a1[2] = xmmword_1E264D1C0;
  return result;
}

uint64_t pg_query__comment_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__comment_stmt__descriptor)
    pg_query__comment_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__comment_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__comment_stmt__descriptor)
    pg_query__comment_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__comment_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__comment_stmt__descriptor)
    pg_query__comment_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__comment_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__comment_stmt__descriptor, a1, a2, a3);
}

void **pg_query__comment_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__comment_stmt__descriptor)
      pg_query__comment_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__fetch_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__fetch_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264D1E0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264D1F0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__fetch_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__fetch_stmt__descriptor)
    pg_query__fetch_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__fetch_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__fetch_stmt__descriptor)
    pg_query__fetch_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__fetch_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__fetch_stmt__descriptor)
    pg_query__fetch_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__fetch_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__fetch_stmt__descriptor, a1, a2, a3);
}

void **pg_query__fetch_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__fetch_stmt__descriptor)
      pg_query__fetch_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__index_stmt__init(_OWORD *a1)
{
  double result;

  a1[8] = xmmword_1E264D288;
  a1[9] = unk_1E264D298;
  a1[10] = xmmword_1E264D2A8;
  a1[11] = unk_1E264D2B8;
  a1[4] = xmmword_1E264D248;
  a1[5] = unk_1E264D258;
  a1[6] = xmmword_1E264D268;
  a1[7] = unk_1E264D278;
  *a1 = pg_query__index_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264D218;
  result = 0.0;
  a1[2] = xmmword_1E264D228;
  a1[3] = *(_OWORD *)&off_1E264D238;
  return result;
}

uint64_t pg_query__index_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__index_stmt__descriptor)
    pg_query__index_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__index_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__index_stmt__descriptor)
    pg_query__index_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__index_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__index_stmt__descriptor)
    pg_query__index_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__index_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__index_stmt__descriptor, a1, a2, a3);
}

void **pg_query__index_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__index_stmt__descriptor)
      pg_query__index_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_function_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264D2E8;
  *(_OWORD *)(a1 + 48) = unk_1E264D2F8;
  *(_OWORD *)(a1 + 64) = xmmword_1E264D308;
  *(_QWORD *)(a1 + 80) = 0;
  result = *(double *)&pg_query__create_function_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__create_function_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264D2D8;
  return result;
}

uint64_t pg_query__create_function_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_function_stmt__descriptor)
    pg_query__create_function_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_function_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_function_stmt__descriptor)
    pg_query__create_function_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_function_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_function_stmt__descriptor)
    pg_query__create_function_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_function_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_function_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_function_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_function_stmt__descriptor)
      pg_query__create_function_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_function_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__alter_function_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264D330;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264D340;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__alter_function_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_function_stmt__descriptor)
    pg_query__alter_function_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_function_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_function_stmt__descriptor)
    pg_query__alter_function_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_function_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_function_stmt__descriptor)
    pg_query__alter_function_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_function_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_function_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_function_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_function_stmt__descriptor)
      pg_query__alter_function_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__do_stmt__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__do_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__do_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264D368;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__do_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__do_stmt__descriptor)
    pg_query__do_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__do_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__do_stmt__descriptor)
    pg_query__do_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__do_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__do_stmt__descriptor)
    pg_query__do_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__do_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__do_stmt__descriptor, a1, a2, a3);
}

void **pg_query__do_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__do_stmt__descriptor)
      pg_query__do_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__rename_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264D3A0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)&off_1E264D3B0;
  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)a1 = pg_query__rename_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264D390;
  return result;
}

uint64_t pg_query__rename_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__rename_stmt__descriptor)
    pg_query__rename_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__rename_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__rename_stmt__descriptor)
    pg_query__rename_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__rename_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__rename_stmt__descriptor)
    pg_query__rename_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__rename_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__rename_stmt__descriptor, a1, a2, a3);
}

void **pg_query__rename_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__rename_stmt__descriptor)
      pg_query__rename_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__rule_stmt__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264D3E8;
  a1[3] = unk_1E264D3F8;
  a1[4] = xmmword_1E264D408;
  result = dbl_1E264D3D8[0];
  *a1 = pg_query__rule_stmt__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E264D3D8;
  return result;
}

uint64_t pg_query__rule_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__rule_stmt__descriptor)
    pg_query__rule_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__rule_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__rule_stmt__descriptor)
    pg_query__rule_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__rule_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__rule_stmt__descriptor)
    pg_query__rule_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__rule_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__rule_stmt__descriptor, a1, a2, a3);
}

void **pg_query__rule_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__rule_stmt__descriptor)
      pg_query__rule_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__notify_stmt__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__notify_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__notify_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264D428;
  *(_QWORD *)(a1 + 32) = &protobuf_c_empty_string;
  return result;
}

uint64_t pg_query__notify_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__notify_stmt__descriptor)
    pg_query__notify_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__notify_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__notify_stmt__descriptor)
    pg_query__notify_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__notify_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__notify_stmt__descriptor)
    pg_query__notify_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__notify_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__notify_stmt__descriptor, a1, a2, a3);
}

void **pg_query__notify_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__notify_stmt__descriptor)
      pg_query__notify_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__listen_stmt__init(_OWORD *a1)
{
  double result;

  result = *(double *)&pg_query__listen_stmt__init_init_value;
  *a1 = pg_query__listen_stmt__init_init_value;
  a1[1] = unk_1E264D450;
  return result;
}

uint64_t pg_query__listen_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__listen_stmt__descriptor)
    pg_query__listen_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__listen_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__listen_stmt__descriptor)
    pg_query__listen_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__listen_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__listen_stmt__descriptor)
    pg_query__listen_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__listen_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__listen_stmt__descriptor, a1, a2, a3);
}

void **pg_query__listen_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__listen_stmt__descriptor)
      pg_query__listen_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__unlisten_stmt__init(_OWORD *a1)
{
  double result;

  result = *(double *)&pg_query__unlisten_stmt__init_init_value;
  *a1 = pg_query__unlisten_stmt__init_init_value;
  a1[1] = unk_1E264D470;
  return result;
}

uint64_t pg_query__unlisten_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__unlisten_stmt__descriptor)
    pg_query__unlisten_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__unlisten_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__unlisten_stmt__descriptor)
    pg_query__unlisten_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__unlisten_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__unlisten_stmt__descriptor)
    pg_query__unlisten_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__unlisten_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__unlisten_stmt__descriptor, a1, a2, a3);
}

void **pg_query__unlisten_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__unlisten_stmt__descriptor)
      pg_query__unlisten_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__transaction_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264D4A0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)&off_1E264D4B0;
  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)a1 = pg_query__transaction_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264D490;
  return result;
}

uint64_t pg_query__transaction_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__transaction_stmt__descriptor)
    pg_query__transaction_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__transaction_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__transaction_stmt__descriptor)
    pg_query__transaction_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__transaction_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__transaction_stmt__descriptor)
    pg_query__transaction_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__transaction_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__transaction_stmt__descriptor, a1, a2, a3);
}

void **pg_query__transaction_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__transaction_stmt__descriptor)
      pg_query__transaction_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__view_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264D4E8;
  *(_OWORD *)(a1 + 48) = unk_1E264D4F8;
  *(_OWORD *)(a1 + 64) = xmmword_1E264D508;
  *(_QWORD *)(a1 + 80) = 0;
  result = *(double *)&pg_query__view_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__view_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264D4D8;
  return result;
}

uint64_t pg_query__view_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__view_stmt__descriptor)
    pg_query__view_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__view_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__view_stmt__descriptor)
    pg_query__view_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__view_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__view_stmt__descriptor)
    pg_query__view_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__view_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__view_stmt__descriptor, a1, a2, a3);
}

void **pg_query__view_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__view_stmt__descriptor)
      pg_query__view_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__load_stmt__init(_OWORD *a1)
{
  double result;

  result = *(double *)&pg_query__load_stmt__init_init_value;
  *a1 = pg_query__load_stmt__init_init_value;
  a1[1] = unk_1E264D530;
  return result;
}

uint64_t pg_query__load_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__load_stmt__descriptor)
    pg_query__load_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__load_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__load_stmt__descriptor)
    pg_query__load_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__load_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__load_stmt__descriptor)
    pg_query__load_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__load_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__load_stmt__descriptor, a1, a2, a3);
}

void **pg_query__load_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__load_stmt__descriptor)
      pg_query__load_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_domain_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264D560;
  *(_OWORD *)(a1 + 48) = unk_1E264D570;
  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)a1 = pg_query__create_domain_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264D550;
  return result;
}

uint64_t pg_query__create_domain_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_domain_stmt__descriptor)
    pg_query__create_domain_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_domain_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_domain_stmt__descriptor)
    pg_query__create_domain_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_domain_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_domain_stmt__descriptor)
    pg_query__create_domain_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_domain_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_domain_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_domain_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_domain_stmt__descriptor)
      pg_query__create_domain_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__createdb_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__createdb_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264D598;
  result = 0.0;
  a1[2] = xmmword_1E264D5A8;
  return result;
}

uint64_t pg_query__createdb_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__createdb_stmt__descriptor)
    pg_query__createdb_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__createdb_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__createdb_stmt__descriptor)
    pg_query__createdb_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__createdb_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__createdb_stmt__descriptor)
    pg_query__createdb_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__createdb_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__createdb_stmt__descriptor, a1, a2, a3);
}

void **pg_query__createdb_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__createdb_stmt__descriptor)
      pg_query__createdb_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__dropdb_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__dropdb_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264D5C8;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264D5D8;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__dropdb_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__dropdb_stmt__descriptor)
    pg_query__dropdb_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__dropdb_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__dropdb_stmt__descriptor)
    pg_query__dropdb_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__dropdb_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__dropdb_stmt__descriptor)
    pg_query__dropdb_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__dropdb_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__dropdb_stmt__descriptor, a1, a2, a3);
}

void **pg_query__dropdb_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__dropdb_stmt__descriptor)
      pg_query__dropdb_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__vacuum_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__vacuum_stmt__init_init_value;
  a1[1] = unk_1E264D600;
  result = 0.0;
  a1[2] = xmmword_1E264D610;
  a1[3] = unk_1E264D620;
  return result;
}

uint64_t pg_query__vacuum_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__vacuum_stmt__descriptor)
    pg_query__vacuum_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__vacuum_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__vacuum_stmt__descriptor)
    pg_query__vacuum_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__vacuum_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__vacuum_stmt__descriptor)
    pg_query__vacuum_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__vacuum_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__vacuum_stmt__descriptor, a1, a2, a3);
}

void **pg_query__vacuum_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__vacuum_stmt__descriptor)
      pg_query__vacuum_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__explain_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__explain_stmt__init_init_value;
  a1[1] = unk_1E264D640;
  result = 0.0;
  a1[2] = xmmword_1E264D650;
  return result;
}

uint64_t pg_query__explain_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__explain_stmt__descriptor)
    pg_query__explain_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__explain_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__explain_stmt__descriptor)
    pg_query__explain_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__explain_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__explain_stmt__descriptor)
    pg_query__explain_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__explain_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__explain_stmt__descriptor, a1, a2, a3);
}

void **pg_query__explain_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__explain_stmt__descriptor)
      pg_query__explain_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_table_as_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__create_table_as_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264D670;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264D680;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__create_table_as_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_table_as_stmt__descriptor)
    pg_query__create_table_as_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_table_as_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_table_as_stmt__descriptor)
    pg_query__create_table_as_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_table_as_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_table_as_stmt__descriptor)
    pg_query__create_table_as_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_table_as_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_table_as_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_table_as_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_table_as_stmt__descriptor)
      pg_query__create_table_as_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_seq_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__create_seq_stmt__init_init_value;
  a1[1] = unk_1E264D6A8;
  result = 0.0;
  a1[2] = xmmword_1E264D6B8;
  a1[3] = unk_1E264D6C8;
  return result;
}

uint64_t pg_query__create_seq_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_seq_stmt__descriptor)
    pg_query__create_seq_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_seq_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_seq_stmt__descriptor)
    pg_query__create_seq_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_seq_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_seq_stmt__descriptor)
    pg_query__create_seq_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_seq_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_seq_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_seq_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_seq_stmt__descriptor)
      pg_query__create_seq_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_seq_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__alter_seq_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264D6E8;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264D6F8;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__alter_seq_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_seq_stmt__descriptor)
    pg_query__alter_seq_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_seq_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_seq_stmt__descriptor)
    pg_query__alter_seq_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_seq_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_seq_stmt__descriptor)
    pg_query__alter_seq_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_seq_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_seq_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_seq_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_seq_stmt__descriptor)
      pg_query__alter_seq_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__variable_set_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__variable_set_stmt__init_init_value;
  a1[1] = unk_1E264D720;
  *(_QWORD *)&result = 0x18DCB7E5CLL;
  a1[2] = xmmword_1E264D730;
  a1[3] = unk_1E264D740;
  return result;
}

uint64_t pg_query__variable_set_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__variable_set_stmt__descriptor)
    pg_query__variable_set_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__variable_set_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__variable_set_stmt__descriptor)
    pg_query__variable_set_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__variable_set_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__variable_set_stmt__descriptor)
    pg_query__variable_set_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__variable_set_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__variable_set_stmt__descriptor, a1, a2, a3);
}

void **pg_query__variable_set_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__variable_set_stmt__descriptor)
      pg_query__variable_set_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__variable_show_stmt__init(_OWORD *a1)
{
  double result;

  result = *(double *)&pg_query__variable_show_stmt__init_init_value;
  *a1 = pg_query__variable_show_stmt__init_init_value;
  a1[1] = unk_1E264D760;
  return result;
}

uint64_t pg_query__variable_show_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__variable_show_stmt__descriptor)
    pg_query__variable_show_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__variable_show_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__variable_show_stmt__descriptor)
    pg_query__variable_show_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__variable_show_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__variable_show_stmt__descriptor)
    pg_query__variable_show_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__variable_show_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__variable_show_stmt__descriptor, a1, a2, a3);
}

void **pg_query__variable_show_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__variable_show_stmt__descriptor)
      pg_query__variable_show_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__discard_stmt__init(_OWORD *a1)
{
  double result;

  result = *(double *)&pg_query__discard_stmt__init_init_value;
  *a1 = pg_query__discard_stmt__init_init_value;
  a1[1] = unk_1E264D780;
  return result;
}

uint64_t pg_query__discard_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__discard_stmt__descriptor)
    pg_query__discard_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__discard_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__discard_stmt__descriptor)
    pg_query__discard_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__discard_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__discard_stmt__descriptor)
    pg_query__discard_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__discard_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__discard_stmt__descriptor, a1, a2, a3);
}

void **pg_query__discard_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__discard_stmt__descriptor)
      pg_query__discard_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_trig_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 96) = xmmword_1E264D7F0;
  *(_OWORD *)(a1 + 112) = unk_1E264D800;
  *(_OWORD *)(a1 + 128) = xmmword_1E264D810;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264D7B0;
  *(_OWORD *)(a1 + 48) = unk_1E264D7C0;
  *(_OWORD *)(a1 + 64) = xmmword_1E264D7D0;
  *(_OWORD *)(a1 + 80) = unk_1E264D7E0;
  result = *(double *)&pg_query__create_trig_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__create_trig_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264D7A0;
  return result;
}

uint64_t pg_query__create_trig_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_trig_stmt__descriptor)
    pg_query__create_trig_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_trig_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_trig_stmt__descriptor)
    pg_query__create_trig_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_trig_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_trig_stmt__descriptor)
    pg_query__create_trig_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_trig_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_trig_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_trig_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_trig_stmt__descriptor)
      pg_query__create_trig_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_plang_stmt__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264D848;
  a1[3] = unk_1E264D858;
  a1[4] = xmmword_1E264D868;
  a1[5] = unk_1E264D878;
  result = *(double *)&pg_query__create_plang_stmt__init_init_value;
  *a1 = pg_query__create_plang_stmt__init_init_value;
  a1[1] = unk_1E264D838;
  return result;
}

uint64_t pg_query__create_plang_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_plang_stmt__descriptor)
    pg_query__create_plang_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_plang_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_plang_stmt__descriptor)
    pg_query__create_plang_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_plang_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_plang_stmt__descriptor)
    pg_query__create_plang_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_plang_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_plang_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_plang_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_plang_stmt__descriptor)
      pg_query__create_plang_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_role_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__create_role_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264D898;
  *(_QWORD *)&result = 0x18DCB7E5CLL;
  *(_OWORD *)(a1 + 32) = xmmword_1E264D8A8;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__create_role_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_role_stmt__descriptor)
    pg_query__create_role_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_role_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_role_stmt__descriptor)
    pg_query__create_role_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_role_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_role_stmt__descriptor)
    pg_query__create_role_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_role_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_role_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_role_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_role_stmt__descriptor)
      pg_query__create_role_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_role_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__alter_role_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264D8D0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264D8E0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__alter_role_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_role_stmt__descriptor)
    pg_query__alter_role_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_role_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_role_stmt__descriptor)
    pg_query__alter_role_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_role_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_role_stmt__descriptor)
    pg_query__alter_role_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_role_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_role_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_role_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_role_stmt__descriptor)
      pg_query__alter_role_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__drop_role_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__drop_role_stmt__init_init_value;
  a1[1] = unk_1E264D908;
  result = 0.0;
  a1[2] = xmmword_1E264D918;
  return result;
}

uint64_t pg_query__drop_role_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__drop_role_stmt__descriptor)
    pg_query__drop_role_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__drop_role_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__drop_role_stmt__descriptor)
    pg_query__drop_role_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__drop_role_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__drop_role_stmt__descriptor)
    pg_query__drop_role_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__drop_role_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__drop_role_stmt__descriptor, a1, a2, a3);
}

void **pg_query__drop_role_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__drop_role_stmt__descriptor)
      pg_query__drop_role_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__lock_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__lock_stmt__init_init_value;
  a1[1] = unk_1E264D938;
  result = 0.0;
  a1[2] = xmmword_1E264D948;
  return result;
}

uint64_t pg_query__lock_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__lock_stmt__descriptor)
    pg_query__lock_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__lock_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__lock_stmt__descriptor)
    pg_query__lock_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__lock_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__lock_stmt__descriptor)
    pg_query__lock_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__lock_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__lock_stmt__descriptor, a1, a2, a3);
}

void **pg_query__lock_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__lock_stmt__descriptor)
      pg_query__lock_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__constraints_set_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__constraints_set_stmt__init_init_value;
  a1[1] = unk_1E264D968;
  result = 0.0;
  a1[2] = xmmword_1E264D978;
  return result;
}

uint64_t pg_query__constraints_set_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__constraints_set_stmt__descriptor)
    pg_query__constraints_set_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__constraints_set_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__constraints_set_stmt__descriptor)
    pg_query__constraints_set_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__constraints_set_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__constraints_set_stmt__descriptor)
    pg_query__constraints_set_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__constraints_set_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__constraints_set_stmt__descriptor, a1, a2, a3);
}

void **pg_query__constraints_set_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__constraints_set_stmt__descriptor)
      pg_query__constraints_set_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__reindex_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__reindex_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264D998;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264D9A8;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__reindex_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__reindex_stmt__descriptor)
    pg_query__reindex_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__reindex_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__reindex_stmt__descriptor)
    pg_query__reindex_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__reindex_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__reindex_stmt__descriptor)
    pg_query__reindex_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__reindex_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__reindex_stmt__descriptor, a1, a2, a3);
}

void **pg_query__reindex_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__reindex_stmt__descriptor)
      pg_query__reindex_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__check_point_stmt__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__check_point_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__check_point_stmt__init_init_value;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t pg_query__check_point_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__check_point_stmt__descriptor)
    pg_query__check_point_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__check_point_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__check_point_stmt__descriptor)
    pg_query__check_point_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__check_point_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__check_point_stmt__descriptor)
    pg_query__check_point_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__check_point_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__check_point_stmt__descriptor, a1, a2, a3);
}

void **pg_query__check_point_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__check_point_stmt__descriptor)
      pg_query__check_point_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_schema_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__create_schema_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264D9E8;
  result = 0.0;
  a1[2] = xmmword_1E264D9F8;
  a1[3] = unk_1E264DA08;
  return result;
}

uint64_t pg_query__create_schema_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_schema_stmt__descriptor)
    pg_query__create_schema_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_schema_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_schema_stmt__descriptor)
    pg_query__create_schema_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_schema_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_schema_stmt__descriptor)
    pg_query__create_schema_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_schema_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_schema_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_schema_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_schema_stmt__descriptor)
      pg_query__create_schema_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_database_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__alter_database_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264DA28;
  result = 0.0;
  a1[2] = xmmword_1E264DA38;
  return result;
}

uint64_t pg_query__alter_database_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_database_stmt__descriptor)
    pg_query__alter_database_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_database_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_database_stmt__descriptor)
    pg_query__alter_database_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_database_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_database_stmt__descriptor)
    pg_query__alter_database_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_database_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_database_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_database_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_database_stmt__descriptor)
      pg_query__alter_database_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_database_set_stmt__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__alter_database_set_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__alter_database_set_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264DA58;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__alter_database_set_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_database_set_stmt__descriptor)
    pg_query__alter_database_set_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_database_set_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_database_set_stmt__descriptor)
    pg_query__alter_database_set_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_database_set_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_database_set_stmt__descriptor)
    pg_query__alter_database_set_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_database_set_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_database_set_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_database_set_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_database_set_stmt__descriptor)
      pg_query__alter_database_set_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_role_set_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__alter_role_set_stmt__init_init_value;
  a1[1] = unk_1E264DA80;
  *(_QWORD *)&result = 0x18DCB7E5CLL;
  a1[2] = xmmword_1E264DA90;
  return result;
}

uint64_t pg_query__alter_role_set_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_role_set_stmt__descriptor)
    pg_query__alter_role_set_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_role_set_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_role_set_stmt__descriptor)
    pg_query__alter_role_set_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_role_set_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_role_set_stmt__descriptor)
    pg_query__alter_role_set_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_role_set_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_role_set_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_role_set_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_role_set_stmt__descriptor)
      pg_query__alter_role_set_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_conversion_stmt__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264DAC0;
  a1[3] = *(_OWORD *)&off_1E264DAD0;
  a1[4] = xmmword_1E264DAE0;
  result = 0.0;
  *a1 = pg_query__create_conversion_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264DAB0;
  return result;
}

uint64_t pg_query__create_conversion_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_conversion_stmt__descriptor)
    pg_query__create_conversion_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_conversion_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_conversion_stmt__descriptor)
    pg_query__create_conversion_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_conversion_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_conversion_stmt__descriptor)
    pg_query__create_conversion_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_conversion_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_conversion_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_conversion_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_conversion_stmt__descriptor)
      pg_query__create_conversion_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_cast_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__create_cast_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264DB00;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264DB10;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__create_cast_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_cast_stmt__descriptor)
    pg_query__create_cast_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_cast_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_cast_stmt__descriptor)
    pg_query__create_cast_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_cast_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_cast_stmt__descriptor)
    pg_query__create_cast_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_cast_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_cast_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_cast_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_cast_stmt__descriptor)
      pg_query__create_cast_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_op_class_stmt__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264DB48;
  a1[3] = unk_1E264DB58;
  a1[4] = xmmword_1E264DB68;
  a1[5] = unk_1E264DB78;
  result = *(double *)&pg_query__create_op_class_stmt__init_init_value;
  *a1 = pg_query__create_op_class_stmt__init_init_value;
  a1[1] = unk_1E264DB38;
  return result;
}

uint64_t pg_query__create_op_class_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_op_class_stmt__descriptor)
    pg_query__create_op_class_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_op_class_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_op_class_stmt__descriptor)
    pg_query__create_op_class_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_op_class_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_op_class_stmt__descriptor)
    pg_query__create_op_class_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_op_class_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_op_class_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_op_class_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_op_class_stmt__descriptor)
      pg_query__create_op_class_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_op_family_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__create_op_family_stmt__init_init_value;
  a1[1] = unk_1E264DB98;
  result = 0.0;
  a1[2] = xmmword_1E264DBA8;
  return result;
}

uint64_t pg_query__create_op_family_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_op_family_stmt__descriptor)
    pg_query__create_op_family_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_op_family_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_op_family_stmt__descriptor)
    pg_query__create_op_family_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_op_family_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_op_family_stmt__descriptor)
    pg_query__create_op_family_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_op_family_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_op_family_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_op_family_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_op_family_stmt__descriptor)
      pg_query__create_op_family_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_op_family_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264DBD8;
  *(_OWORD *)(a1 + 48) = unk_1E264DBE8;
  *(_QWORD *)(a1 + 64) = 0;
  result = dbl_1E264DBC8[0];
  *(_OWORD *)a1 = pg_query__alter_op_family_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E264DBC8;
  return result;
}

uint64_t pg_query__alter_op_family_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_op_family_stmt__descriptor)
    pg_query__alter_op_family_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_op_family_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_op_family_stmt__descriptor)
    pg_query__alter_op_family_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_op_family_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_op_family_stmt__descriptor)
    pg_query__alter_op_family_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_op_family_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_op_family_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_op_family_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_op_family_stmt__descriptor)
      pg_query__alter_op_family_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__prepare_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__prepare_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264DC10;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264DC20;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__prepare_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__prepare_stmt__descriptor)
    pg_query__prepare_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__prepare_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__prepare_stmt__descriptor)
    pg_query__prepare_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__prepare_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__prepare_stmt__descriptor)
    pg_query__prepare_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__prepare_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__prepare_stmt__descriptor, a1, a2, a3);
}

void **pg_query__prepare_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__prepare_stmt__descriptor)
      pg_query__prepare_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__execute_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__execute_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264DC48;
  result = 0.0;
  a1[2] = xmmword_1E264DC58;
  return result;
}

uint64_t pg_query__execute_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__execute_stmt__descriptor)
    pg_query__execute_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__execute_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__execute_stmt__descriptor)
    pg_query__execute_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__execute_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__execute_stmt__descriptor)
    pg_query__execute_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__execute_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__execute_stmt__descriptor, a1, a2, a3);
}

void **pg_query__execute_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__execute_stmt__descriptor)
      pg_query__execute_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__deallocate_stmt__init(_OWORD *a1)
{
  double result;

  result = *(double *)&pg_query__deallocate_stmt__init_init_value;
  *a1 = pg_query__deallocate_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264DC78;
  return result;
}

uint64_t pg_query__deallocate_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__deallocate_stmt__descriptor)
    pg_query__deallocate_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__deallocate_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__deallocate_stmt__descriptor)
    pg_query__deallocate_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__deallocate_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__deallocate_stmt__descriptor)
    pg_query__deallocate_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__deallocate_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__deallocate_stmt__descriptor, a1, a2, a3);
}

void **pg_query__deallocate_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__deallocate_stmt__descriptor)
      pg_query__deallocate_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__declare_cursor_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__declare_cursor_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264DC98;
  result = 0.0;
  a1[2] = xmmword_1E264DCA8;
  return result;
}

uint64_t pg_query__declare_cursor_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__declare_cursor_stmt__descriptor)
    pg_query__declare_cursor_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__declare_cursor_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__declare_cursor_stmt__descriptor)
    pg_query__declare_cursor_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__declare_cursor_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__declare_cursor_stmt__descriptor)
    pg_query__declare_cursor_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__declare_cursor_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__declare_cursor_stmt__descriptor, a1, a2, a3);
}

void **pg_query__declare_cursor_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__declare_cursor_stmt__descriptor)
      pg_query__declare_cursor_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_table_space_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__create_table_space_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264DCC8;
  result = 0.0;
  a1[2] = xmmword_1E264DCD8;
  a1[3] = unk_1E264DCE8;
  return result;
}

uint64_t pg_query__create_table_space_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_table_space_stmt__descriptor)
    pg_query__create_table_space_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_table_space_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_table_space_stmt__descriptor)
    pg_query__create_table_space_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_table_space_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_table_space_stmt__descriptor)
    pg_query__create_table_space_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_table_space_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_table_space_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_table_space_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_table_space_stmt__descriptor)
      pg_query__create_table_space_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__drop_table_space_stmt__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__drop_table_space_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__drop_table_space_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264DD08;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__drop_table_space_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__drop_table_space_stmt__descriptor)
    pg_query__drop_table_space_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__drop_table_space_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__drop_table_space_stmt__descriptor)
    pg_query__drop_table_space_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__drop_table_space_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__drop_table_space_stmt__descriptor)
    pg_query__drop_table_space_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__drop_table_space_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__drop_table_space_stmt__descriptor, a1, a2, a3);
}

void **pg_query__drop_table_space_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__drop_table_space_stmt__descriptor)
      pg_query__drop_table_space_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_object_depends_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__alter_object_depends_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264DD30;
  result = 0.0;
  a1[2] = xmmword_1E264DD40;
  a1[3] = unk_1E264DD50;
  return result;
}

uint64_t pg_query__alter_object_depends_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_object_depends_stmt__descriptor)
    pg_query__alter_object_depends_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_object_depends_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_object_depends_stmt__descriptor)
    pg_query__alter_object_depends_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_object_depends_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_object_depends_stmt__descriptor)
    pg_query__alter_object_depends_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_object_depends_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_object_depends_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_object_depends_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_object_depends_stmt__descriptor)
      pg_query__alter_object_depends_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_object_schema_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__alter_object_schema_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264DD70;
  result = 0.0;
  a1[2] = xmmword_1E264DD80;
  a1[3] = *(_OWORD *)&off_1E264DD90;
  return result;
}

uint64_t pg_query__alter_object_schema_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_object_schema_stmt__descriptor)
    pg_query__alter_object_schema_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_object_schema_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_object_schema_stmt__descriptor)
    pg_query__alter_object_schema_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_object_schema_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_object_schema_stmt__descriptor)
    pg_query__alter_object_schema_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_object_schema_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_object_schema_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_object_schema_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_object_schema_stmt__descriptor)
      pg_query__alter_object_schema_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_owner_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__alter_owner_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264DDB0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264DDC0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__alter_owner_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_owner_stmt__descriptor)
    pg_query__alter_owner_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_owner_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_owner_stmt__descriptor)
    pg_query__alter_owner_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_owner_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_owner_stmt__descriptor)
    pg_query__alter_owner_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_owner_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_owner_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_owner_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_owner_stmt__descriptor)
      pg_query__alter_owner_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_operator_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__alter_operator_stmt__init_init_value;
  a1[1] = unk_1E264DDE8;
  result = 0.0;
  a1[2] = xmmword_1E264DDF8;
  return result;
}

uint64_t pg_query__alter_operator_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_operator_stmt__descriptor)
    pg_query__alter_operator_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_operator_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_operator_stmt__descriptor)
    pg_query__alter_operator_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_operator_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_operator_stmt__descriptor)
    pg_query__alter_operator_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_operator_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_operator_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_operator_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_operator_stmt__descriptor)
      pg_query__alter_operator_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_type_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__alter_type_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264DE18;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264DE28;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__alter_type_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_type_stmt__descriptor)
    pg_query__alter_type_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_type_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_type_stmt__descriptor)
    pg_query__alter_type_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_type_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_type_stmt__descriptor)
    pg_query__alter_type_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_type_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_type_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_type_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_type_stmt__descriptor)
      pg_query__alter_type_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__drop_owned_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__drop_owned_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264DE50;
  result = 0.0;
  a1[2] = xmmword_1E264DE60;
  return result;
}

uint64_t pg_query__drop_owned_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__drop_owned_stmt__descriptor)
    pg_query__drop_owned_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__drop_owned_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__drop_owned_stmt__descriptor)
    pg_query__drop_owned_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__drop_owned_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__drop_owned_stmt__descriptor)
    pg_query__drop_owned_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__drop_owned_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__drop_owned_stmt__descriptor, a1, a2, a3);
}

void **pg_query__drop_owned_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__drop_owned_stmt__descriptor)
      pg_query__drop_owned_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__reassign_owned_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__reassign_owned_stmt__init_init_value;
  a1[1] = unk_1E264DE80;
  result = 0.0;
  a1[2] = xmmword_1E264DE90;
  return result;
}

uint64_t pg_query__reassign_owned_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__reassign_owned_stmt__descriptor)
    pg_query__reassign_owned_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__reassign_owned_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__reassign_owned_stmt__descriptor)
    pg_query__reassign_owned_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__reassign_owned_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__reassign_owned_stmt__descriptor)
    pg_query__reassign_owned_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__reassign_owned_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__reassign_owned_stmt__descriptor, a1, a2, a3);
}

void **pg_query__reassign_owned_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__reassign_owned_stmt__descriptor)
      pg_query__reassign_owned_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__composite_type_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__composite_type_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264DEB0;
  result = 0.0;
  a1[2] = xmmword_1E264DEC0;
  return result;
}

uint64_t pg_query__composite_type_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__composite_type_stmt__descriptor)
    pg_query__composite_type_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__composite_type_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__composite_type_stmt__descriptor)
    pg_query__composite_type_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__composite_type_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__composite_type_stmt__descriptor)
    pg_query__composite_type_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__composite_type_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__composite_type_stmt__descriptor, a1, a2, a3);
}

void **pg_query__composite_type_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__composite_type_stmt__descriptor)
      pg_query__composite_type_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_enum_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__create_enum_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264DEE0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264DEF0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__create_enum_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_enum_stmt__descriptor)
    pg_query__create_enum_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_enum_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_enum_stmt__descriptor)
    pg_query__create_enum_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_enum_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_enum_stmt__descriptor)
    pg_query__create_enum_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_enum_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_enum_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_enum_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_enum_stmt__descriptor)
      pg_query__create_enum_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_range_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__create_range_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264DF18;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264DF28;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__create_range_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_range_stmt__descriptor)
    pg_query__create_range_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_range_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_range_stmt__descriptor)
    pg_query__create_range_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_range_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_range_stmt__descriptor)
    pg_query__create_range_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_range_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_range_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_range_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_range_stmt__descriptor)
      pg_query__create_range_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_enum_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264DF60;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)&off_1E264DF70;
  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)a1 = pg_query__alter_enum_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264DF50;
  return result;
}

uint64_t pg_query__alter_enum_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_enum_stmt__descriptor)
    pg_query__alter_enum_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_enum_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_enum_stmt__descriptor)
    pg_query__alter_enum_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_enum_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_enum_stmt__descriptor)
    pg_query__alter_enum_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_enum_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_enum_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_enum_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_enum_stmt__descriptor)
      pg_query__alter_enum_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_tsdictionary_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__alter_tsdictionary_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264DF98;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264DFA8;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__alter_tsdictionary_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_tsdictionary_stmt__descriptor)
    pg_query__alter_tsdictionary_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_tsdictionary_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_tsdictionary_stmt__descriptor)
    pg_query__alter_tsdictionary_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_tsdictionary_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_tsdictionary_stmt__descriptor)
    pg_query__alter_tsdictionary_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_tsdictionary_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_tsdictionary_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_tsdictionary_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_tsdictionary_stmt__descriptor)
      pg_query__alter_tsdictionary_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_tsconfiguration_stmt__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264DFE0;
  a1[3] = unk_1E264DFF0;
  a1[4] = xmmword_1E264E000;
  a1[5] = unk_1E264E010;
  result = *(double *)&pg_query__alter_tsconfiguration_stmt__init_init_value;
  *a1 = pg_query__alter_tsconfiguration_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264DFD0;
  return result;
}

uint64_t pg_query__alter_tsconfiguration_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_tsconfiguration_stmt__descriptor)
    pg_query__alter_tsconfiguration_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_tsconfiguration_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_tsconfiguration_stmt__descriptor)
    pg_query__alter_tsconfiguration_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_tsconfiguration_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_tsconfiguration_stmt__descriptor)
    pg_query__alter_tsconfiguration_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_tsconfiguration_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_tsconfiguration_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_tsconfiguration_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_tsconfiguration_stmt__descriptor)
      pg_query__alter_tsconfiguration_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_fdw_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__create_fdw_stmt__init_init_value;
  a1[1] = unk_1E264E030;
  result = 0.0;
  a1[2] = xmmword_1E264E040;
  a1[3] = unk_1E264E050;
  return result;
}

uint64_t pg_query__create_fdw_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_fdw_stmt__descriptor)
    pg_query__create_fdw_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_fdw_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_fdw_stmt__descriptor)
    pg_query__create_fdw_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_fdw_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_fdw_stmt__descriptor)
    pg_query__create_fdw_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_fdw_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_fdw_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_fdw_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_fdw_stmt__descriptor)
      pg_query__create_fdw_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_fdw_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__alter_fdw_stmt__init_init_value;
  a1[1] = unk_1E264E070;
  result = 0.0;
  a1[2] = xmmword_1E264E080;
  a1[3] = unk_1E264E090;
  return result;
}

uint64_t pg_query__alter_fdw_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_fdw_stmt__descriptor)
    pg_query__alter_fdw_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_fdw_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_fdw_stmt__descriptor)
    pg_query__alter_fdw_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_fdw_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_fdw_stmt__descriptor)
    pg_query__alter_fdw_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_fdw_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_fdw_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_fdw_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_fdw_stmt__descriptor)
      pg_query__alter_fdw_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_foreign_server_stmt__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264E0C0;
  a1[3] = *(_OWORD *)&off_1E264E0D0;
  a1[4] = xmmword_1E264E0E0;
  result = dbl_1E264E0B0[0];
  *a1 = pg_query__create_foreign_server_stmt__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E264E0B0;
  return result;
}

uint64_t pg_query__create_foreign_server_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_foreign_server_stmt__descriptor)
    pg_query__create_foreign_server_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_foreign_server_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_foreign_server_stmt__descriptor)
    pg_query__create_foreign_server_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_foreign_server_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_foreign_server_stmt__descriptor)
    pg_query__create_foreign_server_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_foreign_server_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_foreign_server_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_foreign_server_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_foreign_server_stmt__descriptor)
      pg_query__create_foreign_server_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_foreign_server_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__alter_foreign_server_stmt__init_init_value;
  a1[1] = unk_1E264E100;
  *(_QWORD *)&result = 0x18DCB7E5CLL;
  a1[2] = xmmword_1E264E110;
  a1[3] = unk_1E264E120;
  return result;
}

uint64_t pg_query__alter_foreign_server_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_foreign_server_stmt__descriptor)
    pg_query__alter_foreign_server_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_foreign_server_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_foreign_server_stmt__descriptor)
    pg_query__alter_foreign_server_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_foreign_server_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_foreign_server_stmt__descriptor)
    pg_query__alter_foreign_server_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_foreign_server_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_foreign_server_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_foreign_server_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_foreign_server_stmt__descriptor)
      pg_query__alter_foreign_server_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_user_mapping_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__create_user_mapping_stmt__init_init_value;
  a1[1] = unk_1E264E140;
  *(_QWORD *)&result = 0x18DCB7E5CLL;
  a1[2] = xmmword_1E264E150;
  a1[3] = unk_1E264E160;
  return result;
}

uint64_t pg_query__create_user_mapping_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_user_mapping_stmt__descriptor)
    pg_query__create_user_mapping_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_user_mapping_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_user_mapping_stmt__descriptor)
    pg_query__create_user_mapping_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_user_mapping_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_user_mapping_stmt__descriptor)
    pg_query__create_user_mapping_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_user_mapping_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_user_mapping_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_user_mapping_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_user_mapping_stmt__descriptor)
      pg_query__create_user_mapping_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_user_mapping_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__alter_user_mapping_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264E180;
  *(_QWORD *)&result = 0x18DCB7E5CLL;
  *(_OWORD *)(a1 + 32) = xmmword_1E264E190;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__alter_user_mapping_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_user_mapping_stmt__descriptor)
    pg_query__alter_user_mapping_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_user_mapping_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_user_mapping_stmt__descriptor)
    pg_query__alter_user_mapping_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_user_mapping_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_user_mapping_stmt__descriptor)
    pg_query__alter_user_mapping_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_user_mapping_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_user_mapping_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_user_mapping_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_user_mapping_stmt__descriptor)
      pg_query__alter_user_mapping_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__drop_user_mapping_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__drop_user_mapping_stmt__init_init_value;
  a1[1] = unk_1E264E1B8;
  *(_QWORD *)&result = 0x18DCB7E5CLL;
  a1[2] = xmmword_1E264E1C8;
  return result;
}

uint64_t pg_query__drop_user_mapping_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__drop_user_mapping_stmt__descriptor)
    pg_query__drop_user_mapping_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__drop_user_mapping_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__drop_user_mapping_stmt__descriptor)
    pg_query__drop_user_mapping_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__drop_user_mapping_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__drop_user_mapping_stmt__descriptor)
    pg_query__drop_user_mapping_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__drop_user_mapping_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__drop_user_mapping_stmt__descriptor, a1, a2, a3);
}

void **pg_query__drop_user_mapping_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__drop_user_mapping_stmt__descriptor)
      pg_query__drop_user_mapping_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_table_space_options_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__alter_table_space_options_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264E1E8;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264E1F8;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__alter_table_space_options_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_table_space_options_stmt__descriptor)
    pg_query__alter_table_space_options_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_table_space_options_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_table_space_options_stmt__descriptor)
    pg_query__alter_table_space_options_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_table_space_options_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_table_space_options_stmt__descriptor)
    pg_query__alter_table_space_options_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_table_space_options_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_table_space_options_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_table_space_options_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_table_space_options_stmt__descriptor)
      pg_query__alter_table_space_options_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_table_move_all_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264E230;
  *(_OWORD *)(a1 + 48) = unk_1E264E240;
  *(_QWORD *)(a1 + 64) = 0;
  result = dbl_1E264E220[0];
  *(_OWORD *)a1 = pg_query__alter_table_move_all_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E264E220;
  return result;
}

uint64_t pg_query__alter_table_move_all_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_table_move_all_stmt__descriptor)
    pg_query__alter_table_move_all_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_table_move_all_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_table_move_all_stmt__descriptor)
    pg_query__alter_table_move_all_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_table_move_all_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_table_move_all_stmt__descriptor)
    pg_query__alter_table_move_all_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_table_move_all_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_table_move_all_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_table_move_all_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_table_move_all_stmt__descriptor)
      pg_query__alter_table_move_all_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__sec_label_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__sec_label_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264E268;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264E278;
  *(_QWORD *)(a1 + 48) = &protobuf_c_empty_string;
  return result;
}

uint64_t pg_query__sec_label_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__sec_label_stmt__descriptor)
    pg_query__sec_label_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__sec_label_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__sec_label_stmt__descriptor)
    pg_query__sec_label_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__sec_label_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__sec_label_stmt__descriptor)
    pg_query__sec_label_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__sec_label_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__sec_label_stmt__descriptor, a1, a2, a3);
}

void **pg_query__sec_label_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__sec_label_stmt__descriptor)
      pg_query__sec_label_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_foreign_table_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__create_foreign_table_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264E2A0;
  *(_QWORD *)&result = 0x18DCB7E5CLL;
  *(_OWORD *)(a1 + 32) = xmmword_1E264E2B0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__create_foreign_table_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_foreign_table_stmt__descriptor)
    pg_query__create_foreign_table_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_foreign_table_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_foreign_table_stmt__descriptor)
    pg_query__create_foreign_table_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_foreign_table_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_foreign_table_stmt__descriptor)
    pg_query__create_foreign_table_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_foreign_table_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_foreign_table_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_foreign_table_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_foreign_table_stmt__descriptor)
      pg_query__create_foreign_table_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__import_foreign_schema_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264E2E8;
  *(_OWORD *)(a1 + 48) = unk_1E264E2F8;
  *(_OWORD *)(a1 + 64) = xmmword_1E264E308;
  *(_QWORD *)(a1 + 80) = 0;
  result = *(double *)&pg_query__import_foreign_schema_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__import_foreign_schema_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264E2D8;
  return result;
}

uint64_t pg_query__import_foreign_schema_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__import_foreign_schema_stmt__descriptor)
    pg_query__import_foreign_schema_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__import_foreign_schema_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__import_foreign_schema_stmt__descriptor)
    pg_query__import_foreign_schema_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__import_foreign_schema_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__import_foreign_schema_stmt__descriptor)
    pg_query__import_foreign_schema_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__import_foreign_schema_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__import_foreign_schema_stmt__descriptor, a1, a2, a3);
}

void **pg_query__import_foreign_schema_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__import_foreign_schema_stmt__descriptor)
      pg_query__import_foreign_schema_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_extension_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__create_extension_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264E330;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264E340;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__create_extension_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_extension_stmt__descriptor)
    pg_query__create_extension_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_extension_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_extension_stmt__descriptor)
    pg_query__create_extension_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_extension_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_extension_stmt__descriptor)
    pg_query__create_extension_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_extension_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_extension_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_extension_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_extension_stmt__descriptor)
      pg_query__create_extension_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_extension_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__alter_extension_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264E368;
  result = 0.0;
  a1[2] = xmmword_1E264E378;
  return result;
}

uint64_t pg_query__alter_extension_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_extension_stmt__descriptor)
    pg_query__alter_extension_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_extension_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_extension_stmt__descriptor)
    pg_query__alter_extension_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_extension_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_extension_stmt__descriptor)
    pg_query__alter_extension_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_extension_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_extension_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_extension_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_extension_stmt__descriptor)
      pg_query__alter_extension_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_extension_contents_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__alter_extension_contents_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264E398;
  result = 0.0;
  a1[2] = xmmword_1E264E3A8;
  return result;
}

uint64_t pg_query__alter_extension_contents_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_extension_contents_stmt__descriptor)
    pg_query__alter_extension_contents_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_extension_contents_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_extension_contents_stmt__descriptor)
    pg_query__alter_extension_contents_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_extension_contents_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_extension_contents_stmt__descriptor)
    pg_query__alter_extension_contents_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_extension_contents_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_extension_contents_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_extension_contents_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_extension_contents_stmt__descriptor)
      pg_query__alter_extension_contents_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_event_trig_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264E3D8;
  *(_OWORD *)(a1 + 48) = unk_1E264E3E8;
  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)a1 = pg_query__create_event_trig_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264E3C8;
  return result;
}

uint64_t pg_query__create_event_trig_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_event_trig_stmt__descriptor)
    pg_query__create_event_trig_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_event_trig_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_event_trig_stmt__descriptor)
    pg_query__create_event_trig_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_event_trig_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_event_trig_stmt__descriptor)
    pg_query__create_event_trig_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_event_trig_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_event_trig_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_event_trig_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_event_trig_stmt__descriptor)
      pg_query__create_event_trig_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_event_trig_stmt__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__alter_event_trig_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__alter_event_trig_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264E410;
  *(_QWORD *)(a1 + 32) = &protobuf_c_empty_string;
  return result;
}

uint64_t pg_query__alter_event_trig_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_event_trig_stmt__descriptor)
    pg_query__alter_event_trig_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_event_trig_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_event_trig_stmt__descriptor)
    pg_query__alter_event_trig_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_event_trig_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_event_trig_stmt__descriptor)
    pg_query__alter_event_trig_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_event_trig_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_event_trig_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_event_trig_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_event_trig_stmt__descriptor)
      pg_query__alter_event_trig_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__refresh_mat_view_stmt__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__refresh_mat_view_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__refresh_mat_view_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264E438;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__refresh_mat_view_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__refresh_mat_view_stmt__descriptor)
    pg_query__refresh_mat_view_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__refresh_mat_view_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__refresh_mat_view_stmt__descriptor)
    pg_query__refresh_mat_view_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__refresh_mat_view_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__refresh_mat_view_stmt__descriptor)
    pg_query__refresh_mat_view_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__refresh_mat_view_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__refresh_mat_view_stmt__descriptor, a1, a2, a3);
}

void **pg_query__refresh_mat_view_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__refresh_mat_view_stmt__descriptor)
      pg_query__refresh_mat_view_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__replica_identity_stmt__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__replica_identity_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__replica_identity_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264E460;
  *(_QWORD *)(a1 + 32) = &protobuf_c_empty_string;
  return result;
}

uint64_t pg_query__replica_identity_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__replica_identity_stmt__descriptor)
    pg_query__replica_identity_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__replica_identity_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__replica_identity_stmt__descriptor)
    pg_query__replica_identity_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__replica_identity_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__replica_identity_stmt__descriptor)
    pg_query__replica_identity_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__replica_identity_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__replica_identity_stmt__descriptor, a1, a2, a3);
}

void **pg_query__replica_identity_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__replica_identity_stmt__descriptor)
      pg_query__replica_identity_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_system_stmt__init(_OWORD *a1)
{
  double result;

  result = *(double *)&pg_query__alter_system_stmt__init_init_value;
  *a1 = pg_query__alter_system_stmt__init_init_value;
  a1[1] = unk_1E264E488;
  return result;
}

uint64_t pg_query__alter_system_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_system_stmt__descriptor)
    pg_query__alter_system_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_system_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_system_stmt__descriptor)
    pg_query__alter_system_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_system_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_system_stmt__descriptor)
    pg_query__alter_system_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_system_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_system_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_system_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_system_stmt__descriptor)
      pg_query__alter_system_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_policy_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264E4B8;
  *(_OWORD *)(a1 + 48) = unk_1E264E4C8;
  *(_OWORD *)(a1 + 64) = xmmword_1E264E4D8;
  *(_QWORD *)(a1 + 80) = 0;
  result = *(double *)&pg_query__create_policy_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__create_policy_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264E4A8;
  return result;
}

uint64_t pg_query__create_policy_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_policy_stmt__descriptor)
    pg_query__create_policy_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_policy_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_policy_stmt__descriptor)
    pg_query__create_policy_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_policy_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_policy_stmt__descriptor)
    pg_query__create_policy_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_policy_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_policy_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_policy_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_policy_stmt__descriptor)
      pg_query__create_policy_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_policy_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264E510;
  *(_OWORD *)(a1 + 48) = unk_1E264E520;
  *(_QWORD *)(a1 + 64) = 0;
  result = dbl_1E264E500[0];
  *(_OWORD *)a1 = pg_query__alter_policy_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E264E500;
  return result;
}

uint64_t pg_query__alter_policy_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_policy_stmt__descriptor)
    pg_query__alter_policy_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_policy_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_policy_stmt__descriptor)
    pg_query__alter_policy_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_policy_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_policy_stmt__descriptor)
    pg_query__alter_policy_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_policy_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_policy_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_policy_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_policy_stmt__descriptor)
      pg_query__alter_policy_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_transform_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__create_transform_stmt__init_init_value;
  a1[1] = unk_1E264E548;
  result = 0.0;
  a1[2] = xmmword_1E264E558;
  a1[3] = unk_1E264E568;
  return result;
}

uint64_t pg_query__create_transform_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_transform_stmt__descriptor)
    pg_query__create_transform_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_transform_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_transform_stmt__descriptor)
    pg_query__create_transform_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_transform_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_transform_stmt__descriptor)
    pg_query__create_transform_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_transform_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_transform_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_transform_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_transform_stmt__descriptor)
      pg_query__create_transform_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_am_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__create_am_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264E588;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264E598;
  *(_QWORD *)(a1 + 48) = &protobuf_c_empty_string;
  return result;
}

uint64_t pg_query__create_am_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_am_stmt__descriptor)
    pg_query__create_am_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_am_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_am_stmt__descriptor)
    pg_query__create_am_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_am_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_am_stmt__descriptor)
    pg_query__create_am_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_am_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_am_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_am_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_am_stmt__descriptor)
      pg_query__create_am_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_publication_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264E5D0;
  *(_OWORD *)(a1 + 48) = unk_1E264E5E0;
  *(_QWORD *)(a1 + 64) = 0;
  result = dbl_1E264E5C0[0];
  *(_OWORD *)a1 = pg_query__create_publication_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E264E5C0;
  return result;
}

uint64_t pg_query__create_publication_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_publication_stmt__descriptor)
    pg_query__create_publication_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_publication_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_publication_stmt__descriptor)
    pg_query__create_publication_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_publication_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_publication_stmt__descriptor)
    pg_query__create_publication_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_publication_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_publication_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_publication_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_publication_stmt__descriptor)
      pg_query__create_publication_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_publication_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264E618;
  *(_OWORD *)(a1 + 48) = unk_1E264E628;
  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)a1 = pg_query__alter_publication_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264E608;
  return result;
}

uint64_t pg_query__alter_publication_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_publication_stmt__descriptor)
    pg_query__alter_publication_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_publication_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_publication_stmt__descriptor)
    pg_query__alter_publication_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_publication_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_publication_stmt__descriptor)
    pg_query__alter_publication_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_publication_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_publication_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_publication_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_publication_stmt__descriptor)
      pg_query__alter_publication_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_subscription_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264E660;
  *(_OWORD *)(a1 + 48) = unk_1E264E670;
  *(_QWORD *)(a1 + 64) = 0;
  result = dbl_1E264E650[0];
  *(_OWORD *)a1 = pg_query__create_subscription_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E264E650;
  return result;
}

uint64_t pg_query__create_subscription_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_subscription_stmt__descriptor)
    pg_query__create_subscription_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_subscription_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_subscription_stmt__descriptor)
    pg_query__create_subscription_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_subscription_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_subscription_stmt__descriptor)
    pg_query__create_subscription_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_subscription_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_subscription_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_subscription_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_subscription_stmt__descriptor)
      pg_query__create_subscription_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_subscription_stmt__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264E6A8;
  a1[3] = unk_1E264E6B8;
  a1[4] = xmmword_1E264E6C8;
  result = dbl_1E264E698[0];
  *a1 = pg_query__alter_subscription_stmt__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E264E698;
  return result;
}

uint64_t pg_query__alter_subscription_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_subscription_stmt__descriptor)
    pg_query__alter_subscription_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_subscription_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_subscription_stmt__descriptor)
    pg_query__alter_subscription_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_subscription_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_subscription_stmt__descriptor)
    pg_query__alter_subscription_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_subscription_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_subscription_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_subscription_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_subscription_stmt__descriptor)
      pg_query__alter_subscription_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__drop_subscription_stmt__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__drop_subscription_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__drop_subscription_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264E6E8;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__drop_subscription_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__drop_subscription_stmt__descriptor)
    pg_query__drop_subscription_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__drop_subscription_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__drop_subscription_stmt__descriptor)
    pg_query__drop_subscription_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__drop_subscription_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__drop_subscription_stmt__descriptor)
    pg_query__drop_subscription_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__drop_subscription_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__drop_subscription_stmt__descriptor, a1, a2, a3);
}

void **pg_query__drop_subscription_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__drop_subscription_stmt__descriptor)
      pg_query__drop_subscription_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_stats_stmt__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 64) = xmmword_1E264E740;
  *(_OWORD *)(a1 + 80) = unk_1E264E750;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)a1 = pg_query__create_stats_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264E710;
  result = dbl_1E264E730[0];
  *(_OWORD *)(a1 + 32) = xmmword_1E264E720;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)dbl_1E264E730;
  return result;
}

uint64_t pg_query__create_stats_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_stats_stmt__descriptor)
    pg_query__create_stats_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_stats_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_stats_stmt__descriptor)
    pg_query__create_stats_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_stats_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_stats_stmt__descriptor)
    pg_query__create_stats_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_stats_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_stats_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_stats_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_stats_stmt__descriptor)
      pg_query__create_stats_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_collation_stmt__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__alter_collation_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__alter_collation_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264E778;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__alter_collation_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_collation_stmt__descriptor)
    pg_query__alter_collation_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_collation_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_collation_stmt__descriptor)
    pg_query__alter_collation_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_collation_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_collation_stmt__descriptor)
    pg_query__alter_collation_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_collation_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_collation_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_collation_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_collation_stmt__descriptor)
      pg_query__alter_collation_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__call_stmt__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__call_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__call_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264E7A0;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__call_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__call_stmt__descriptor)
    pg_query__call_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__call_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__call_stmt__descriptor)
    pg_query__call_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__call_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__call_stmt__descriptor)
    pg_query__call_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__call_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__call_stmt__descriptor, a1, a2, a3);
}

void **pg_query__call_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__call_stmt__descriptor)
      pg_query__call_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_stats_stmt__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__alter_stats_stmt__init_init_value;
  a1[1] = unk_1E264E7C8;
  result = 0.0;
  a1[2] = xmmword_1E264E7D8;
  return result;
}

uint64_t pg_query__alter_stats_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_stats_stmt__descriptor)
    pg_query__alter_stats_stmt__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_stats_stmt__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__alter_stats_stmt__descriptor)
    pg_query__alter_stats_stmt__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__alter_stats_stmt__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__alter_stats_stmt__descriptor)
    pg_query__alter_stats_stmt__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__alter_stats_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_stats_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_stats_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_stats_stmt__descriptor)
      pg_query__alter_stats_stmt__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__a__expr__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264E808;
  *(_OWORD *)(a1 + 48) = unk_1E264E818;
  *(_QWORD *)(a1 + 64) = 0;
  result = dbl_1E264E7F8[0];
  *(_OWORD *)a1 = pg_query__a__expr__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E264E7F8;
  return result;
}

uint64_t pg_query__a__expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__a__expr__descriptor)
    pg_query__a__expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__a__expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__a__expr__descriptor)
    pg_query__a__expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__a__expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__a__expr__descriptor)
    pg_query__a__expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__a__expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__a__expr__descriptor, a1, a2, a3);
}

void **pg_query__a__expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__a__expr__descriptor)
      pg_query__a__expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__column_ref__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__column_ref__init_init_value;
  a1[1] = unk_1E264E840;
  result = 0.0;
  a1[2] = xmmword_1E264E850;
  return result;
}

uint64_t pg_query__column_ref__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__column_ref__descriptor)
    pg_query__column_ref__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__column_ref__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__column_ref__descriptor)
    pg_query__column_ref__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__column_ref__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__column_ref__descriptor)
    pg_query__column_ref__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__column_ref__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__column_ref__descriptor, a1, a2, a3);
}

void **pg_query__column_ref__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__column_ref__descriptor)
      pg_query__column_ref__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__param_ref__init(_OWORD *a1)
{
  double result;

  result = *(double *)&pg_query__param_ref__init_init_value;
  *a1 = pg_query__param_ref__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264E870;
  return result;
}

uint64_t pg_query__param_ref__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__param_ref__descriptor)
    pg_query__param_ref__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__param_ref__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__param_ref__descriptor)
    pg_query__param_ref__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__param_ref__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__param_ref__descriptor)
    pg_query__param_ref__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__param_ref__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__param_ref__descriptor, a1, a2, a3);
}

void **pg_query__param_ref__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__param_ref__descriptor)
      pg_query__param_ref__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__a__const__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__a__const__init_init_value;
  *(_OWORD *)a1 = pg_query__a__const__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264E890;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__a__const__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__a__const__descriptor)
    pg_query__a__const__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__a__const__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__a__const__descriptor)
    pg_query__a__const__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__a__const__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__a__const__descriptor)
    pg_query__a__const__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__a__const__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__a__const__descriptor, a1, a2, a3);
}

void **pg_query__a__const__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__a__const__descriptor)
      pg_query__a__const__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__func_call__init(_OWORD *a1)
{
  double result;

  a1[4] = xmmword_1E264E8E8;
  a1[5] = unk_1E264E8F8;
  a1[6] = xmmword_1E264E908;
  *a1 = pg_query__func_call__init_init_value;
  a1[1] = unk_1E264E8B8;
  result = dbl_1E264E8D8[0];
  a1[2] = xmmword_1E264E8C8;
  a1[3] = *(_OWORD *)dbl_1E264E8D8;
  return result;
}

uint64_t pg_query__func_call__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__func_call__descriptor)
    pg_query__func_call__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__func_call__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__func_call__descriptor)
    pg_query__func_call__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__func_call__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__func_call__descriptor)
    pg_query__func_call__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__func_call__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__func_call__descriptor, a1, a2, a3);
}

void **pg_query__func_call__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__func_call__descriptor)
      pg_query__func_call__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__a__star__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__a__star__init_init_value;
  *(_OWORD *)a1 = pg_query__a__star__init_init_value;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t pg_query__a__star__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__a__star__descriptor)
    pg_query__a__star__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__a__star__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__a__star__descriptor)
    pg_query__a__star__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__a__star__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__a__star__descriptor)
    pg_query__a__star__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__a__star__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__a__star__descriptor, a1, a2, a3);
}

void **pg_query__a__star__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__a__star__descriptor)
      pg_query__a__star__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__a__indices__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__a__indices__init_init_value;
  a1[1] = unk_1E264E940;
  result = 0.0;
  a1[2] = xmmword_1E264E950;
  return result;
}

uint64_t pg_query__a__indices__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__a__indices__descriptor)
    pg_query__a__indices__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__a__indices__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__a__indices__descriptor)
    pg_query__a__indices__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__a__indices__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__a__indices__descriptor)
    pg_query__a__indices__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__a__indices__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__a__indices__descriptor, a1, a2, a3);
}

void **pg_query__a__indices__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__a__indices__descriptor)
      pg_query__a__indices__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__a__indirection__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__a__indirection__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264E970;
  result = 0.0;
  a1[2] = xmmword_1E264E980;
  return result;
}

uint64_t pg_query__a__indirection__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__a__indirection__descriptor)
    pg_query__a__indirection__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__a__indirection__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__a__indirection__descriptor)
    pg_query__a__indirection__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__a__indirection__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__a__indirection__descriptor)
    pg_query__a__indirection__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__a__indirection__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__a__indirection__descriptor, a1, a2, a3);
}

void **pg_query__a__indirection__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__a__indirection__descriptor)
      pg_query__a__indirection__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__a__array_expr__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__a__array_expr__init_init_value;
  a1[1] = unk_1E264E9A0;
  result = 0.0;
  a1[2] = xmmword_1E264E9B0;
  return result;
}

uint64_t pg_query__a__array_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__a__array_expr__descriptor)
    pg_query__a__array_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__a__array_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__a__array_expr__descriptor)
    pg_query__a__array_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__a__array_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__a__array_expr__descriptor)
    pg_query__a__array_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__a__array_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__a__array_expr__descriptor, a1, a2, a3);
}

void **pg_query__a__array_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__a__array_expr__descriptor)
      pg_query__a__array_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__res_target__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__res_target__init_init_value;
  a1[1] = unk_1E264E9D0;
  result = 0.0;
  a1[2] = xmmword_1E264E9E0;
  a1[3] = unk_1E264E9F0;
  return result;
}

uint64_t pg_query__res_target__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__res_target__descriptor)
    pg_query__res_target__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__res_target__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__res_target__descriptor)
    pg_query__res_target__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__res_target__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__res_target__descriptor)
    pg_query__res_target__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__res_target__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__res_target__descriptor, a1, a2, a3);
}

void **pg_query__res_target__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__res_target__descriptor)
      pg_query__res_target__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__multi_assign_ref__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__multi_assign_ref__init_init_value;
  *(_OWORD *)a1 = pg_query__multi_assign_ref__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264EA10;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__multi_assign_ref__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__multi_assign_ref__descriptor)
    pg_query__multi_assign_ref__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__multi_assign_ref__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__multi_assign_ref__descriptor)
    pg_query__multi_assign_ref__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__multi_assign_ref__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__multi_assign_ref__descriptor)
    pg_query__multi_assign_ref__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__multi_assign_ref__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__multi_assign_ref__descriptor, a1, a2, a3);
}

void **pg_query__multi_assign_ref__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__multi_assign_ref__descriptor)
      pg_query__multi_assign_ref__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__type_cast__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__type_cast__init_init_value;
  a1[1] = unk_1E264EA38;
  result = 0.0;
  a1[2] = xmmword_1E264EA48;
  return result;
}

uint64_t pg_query__type_cast__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__type_cast__descriptor)
    pg_query__type_cast__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__type_cast__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__type_cast__descriptor)
    pg_query__type_cast__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__type_cast__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__type_cast__descriptor)
    pg_query__type_cast__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__type_cast__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__type_cast__descriptor, a1, a2, a3);
}

void **pg_query__type_cast__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__type_cast__descriptor)
      pg_query__type_cast__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__collate_clause__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__collate_clause__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264EA68;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264EA78;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__collate_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__collate_clause__descriptor)
    pg_query__collate_clause__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__collate_clause__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__collate_clause__descriptor)
    pg_query__collate_clause__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__collate_clause__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__collate_clause__descriptor)
    pg_query__collate_clause__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__collate_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__collate_clause__descriptor, a1, a2, a3);
}

void **pg_query__collate_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__collate_clause__descriptor)
      pg_query__collate_clause__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__sort_by__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__sort_by__init_init_value;
  a1[1] = unk_1E264EAA0;
  result = 0.0;
  a1[2] = xmmword_1E264EAB0;
  a1[3] = unk_1E264EAC0;
  return result;
}

uint64_t pg_query__sort_by__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__sort_by__descriptor)
    pg_query__sort_by__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__sort_by__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__sort_by__descriptor)
    pg_query__sort_by__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__sort_by__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__sort_by__descriptor)
    pg_query__sort_by__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__sort_by__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__sort_by__descriptor, a1, a2, a3);
}

void **pg_query__sort_by__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__sort_by__descriptor)
      pg_query__sort_by__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__window_def__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 64) = xmmword_1E264EB10;
  *(_OWORD *)(a1 + 80) = unk_1E264EB20;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)a1 = pg_query__window_def__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264EAE0;
  result = dbl_1E264EB00[0];
  *(_OWORD *)(a1 + 32) = xmmword_1E264EAF0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)dbl_1E264EB00;
  return result;
}

uint64_t pg_query__window_def__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__window_def__descriptor)
    pg_query__window_def__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__window_def__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__window_def__descriptor)
    pg_query__window_def__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__window_def__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__window_def__descriptor)
    pg_query__window_def__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__window_def__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__window_def__descriptor, a1, a2, a3);
}

void **pg_query__window_def__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__window_def__descriptor)
      pg_query__window_def__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__range_subselect__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__range_subselect__init_init_value;
  a1[1] = unk_1E264EB48;
  result = 0.0;
  a1[2] = xmmword_1E264EB58;
  return result;
}

uint64_t pg_query__range_subselect__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__range_subselect__descriptor)
    pg_query__range_subselect__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__range_subselect__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__range_subselect__descriptor)
    pg_query__range_subselect__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__range_subselect__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__range_subselect__descriptor)
    pg_query__range_subselect__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__range_subselect__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__range_subselect__descriptor, a1, a2, a3);
}

void **pg_query__range_subselect__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__range_subselect__descriptor)
      pg_query__range_subselect__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__range_function__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264EB88;
  a1[3] = unk_1E264EB98;
  a1[4] = xmmword_1E264EBA8;
  result = dbl_1E264EB78[0];
  *a1 = pg_query__range_function__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E264EB78;
  return result;
}

uint64_t pg_query__range_function__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__range_function__descriptor)
    pg_query__range_function__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__range_function__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__range_function__descriptor)
    pg_query__range_function__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__range_function__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__range_function__descriptor)
    pg_query__range_function__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__range_function__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__range_function__descriptor, a1, a2, a3);
}

void **pg_query__range_function__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__range_function__descriptor)
      pg_query__range_function__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__range_table_sample__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264EBD8;
  a1[3] = unk_1E264EBE8;
  a1[4] = xmmword_1E264EBF8;
  result = dbl_1E264EBC8[0];
  *a1 = pg_query__range_table_sample__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E264EBC8;
  return result;
}

uint64_t pg_query__range_table_sample__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__range_table_sample__descriptor)
    pg_query__range_table_sample__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__range_table_sample__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__range_table_sample__descriptor)
    pg_query__range_table_sample__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__range_table_sample__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__range_table_sample__descriptor)
    pg_query__range_table_sample__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__range_table_sample__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__range_table_sample__descriptor, a1, a2, a3);
}

void **pg_query__range_table_sample__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__range_table_sample__descriptor)
      pg_query__range_table_sample__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__range_table_func__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264EC28;
  a1[3] = unk_1E264EC38;
  a1[4] = xmmword_1E264EC48;
  a1[5] = unk_1E264EC58;
  result = *(double *)&pg_query__range_table_func__init_init_value;
  *a1 = pg_query__range_table_func__init_init_value;
  a1[1] = unk_1E264EC18;
  return result;
}

uint64_t pg_query__range_table_func__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__range_table_func__descriptor)
    pg_query__range_table_func__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__range_table_func__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__range_table_func__descriptor)
    pg_query__range_table_func__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__range_table_func__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__range_table_func__descriptor)
    pg_query__range_table_func__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__range_table_func__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__range_table_func__descriptor, a1, a2, a3);
}

void **pg_query__range_table_func__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__range_table_func__descriptor)
      pg_query__range_table_func__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__range_table_func_col__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264EC88;
  *(_OWORD *)(a1 + 48) = unk_1E264EC98;
  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)a1 = pg_query__range_table_func_col__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264EC78;
  return result;
}

uint64_t pg_query__range_table_func_col__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__range_table_func_col__descriptor)
    pg_query__range_table_func_col__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__range_table_func_col__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__range_table_func_col__descriptor)
    pg_query__range_table_func_col__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__range_table_func_col__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__range_table_func_col__descriptor)
    pg_query__range_table_func_col__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__range_table_func_col__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__range_table_func_col__descriptor, a1, a2, a3);
}

void **pg_query__range_table_func_col__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__range_table_func_col__descriptor)
      pg_query__range_table_func_col__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__type_name__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 64) = xmmword_1E264ECF0;
  *(_OWORD *)(a1 + 80) = unk_1E264ED00;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)a1 = pg_query__type_name__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264ECC0;
  result = dbl_1E264ECE0[0];
  *(_OWORD *)(a1 + 32) = xmmword_1E264ECD0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)dbl_1E264ECE0;
  return result;
}

uint64_t pg_query__type_name__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__type_name__descriptor)
    pg_query__type_name__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__type_name__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__type_name__descriptor)
    pg_query__type_name__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__type_name__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__type_name__descriptor)
    pg_query__type_name__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__type_name__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__type_name__descriptor, a1, a2, a3);
}

void **pg_query__type_name__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__type_name__descriptor)
      pg_query__type_name__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__column_def__init(_OWORD *a1)
{
  double result;

  a1[6] = xmmword_1E264ED78;
  a1[7] = unk_1E264ED88;
  a1[8] = xmmword_1E264ED98;
  a1[9] = unk_1E264EDA8;
  a1[2] = xmmword_1E264ED38;
  a1[3] = unk_1E264ED48;
  a1[4] = xmmword_1E264ED58;
  a1[5] = *(_OWORD *)&off_1E264ED68;
  result = *(double *)&pg_query__column_def__init_init_value;
  *a1 = pg_query__column_def__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264ED28;
  return result;
}

uint64_t pg_query__column_def__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__column_def__descriptor)
    pg_query__column_def__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__column_def__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__column_def__descriptor)
    pg_query__column_def__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__column_def__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__column_def__descriptor)
    pg_query__column_def__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__column_def__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__column_def__descriptor, a1, a2, a3);
}

void **pg_query__column_def__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__column_def__descriptor)
      pg_query__column_def__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__index_elem__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 64) = xmmword_1E264EDF8;
  *(_OWORD *)(a1 + 80) = unk_1E264EE08;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)a1 = pg_query__index_elem__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264EDC8;
  result = dbl_1E264EDE8[0];
  *(_OWORD *)(a1 + 32) = xmmword_1E264EDD8;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)dbl_1E264EDE8;
  return result;
}

uint64_t pg_query__index_elem__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__index_elem__descriptor)
    pg_query__index_elem__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__index_elem__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__index_elem__descriptor)
    pg_query__index_elem__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__index_elem__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__index_elem__descriptor)
    pg_query__index_elem__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__index_elem__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__index_elem__descriptor, a1, a2, a3);
}

void **pg_query__index_elem__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__index_elem__descriptor)
      pg_query__index_elem__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

void *pg_query__constraint__init(void *a1)
{
  return memcpy(a1, &pg_query__constraint__init_init_value, 0x118uLL);
}

uint64_t pg_query__constraint__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__constraint__descriptor)
    pg_query__constraint__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__constraint__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__constraint__descriptor)
    pg_query__constraint__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__constraint__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__constraint__descriptor)
    pg_query__constraint__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__constraint__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__constraint__descriptor, a1, a2, a3);
}

void **pg_query__constraint__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__constraint__descriptor)
      pg_query__constraint__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__def_elem__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__def_elem__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264EF48;
  *(_QWORD *)&result = 0x18DCB7E5CLL;
  *(_OWORD *)(a1 + 32) = xmmword_1E264EF58;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__def_elem__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__def_elem__descriptor)
    pg_query__def_elem__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__def_elem__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__def_elem__descriptor)
    pg_query__def_elem__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__def_elem__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__def_elem__descriptor)
    pg_query__def_elem__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__def_elem__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__def_elem__descriptor, a1, a2, a3);
}

void **pg_query__def_elem__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__def_elem__descriptor)
      pg_query__def_elem__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

void *pg_query__range_tbl_entry__init(void *a1)
{
  return memcpy(a1, &pg_query__range_tbl_entry__init_init_value, 0x178uLL);
}

uint64_t pg_query__range_tbl_entry__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__range_tbl_entry__descriptor)
    pg_query__range_tbl_entry__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__range_tbl_entry__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__range_tbl_entry__descriptor)
    pg_query__range_tbl_entry__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__range_tbl_entry__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__range_tbl_entry__descriptor)
    pg_query__range_tbl_entry__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__range_tbl_entry__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__range_tbl_entry__descriptor, a1, a2, a3);
}

void **pg_query__range_tbl_entry__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__range_tbl_entry__descriptor)
      pg_query__range_tbl_entry__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__range_tbl_function__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 64) = xmmword_1E264F128;
  *(_OWORD *)(a1 + 80) = unk_1E264F138;
  *(_OWORD *)(a1 + 96) = xmmword_1E264F148;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)a1 = pg_query__range_tbl_function__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264F0F8;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264F108;
  *(_OWORD *)(a1 + 48) = unk_1E264F118;
  return result;
}

uint64_t pg_query__range_tbl_function__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__range_tbl_function__descriptor)
    pg_query__range_tbl_function__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__range_tbl_function__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__range_tbl_function__descriptor)
    pg_query__range_tbl_function__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__range_tbl_function__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__range_tbl_function__descriptor)
    pg_query__range_tbl_function__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__range_tbl_function__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__range_tbl_function__descriptor, a1, a2, a3);
}

void **pg_query__range_tbl_function__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__range_tbl_function__descriptor)
      pg_query__range_tbl_function__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__table_sample_clause__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__table_sample_clause__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264F170;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264F180;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__table_sample_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__table_sample_clause__descriptor)
    pg_query__table_sample_clause__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__table_sample_clause__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__table_sample_clause__descriptor)
    pg_query__table_sample_clause__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__table_sample_clause__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__table_sample_clause__descriptor)
    pg_query__table_sample_clause__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__table_sample_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__table_sample_clause__descriptor, a1, a2, a3);
}

void **pg_query__table_sample_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__table_sample_clause__descriptor)
      pg_query__table_sample_clause__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__with_check_option__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__with_check_option__init_init_value;
  a1[1] = unk_1E264F1A8;
  *(_QWORD *)&result = 0x18DCB7E5CLL;
  a1[2] = xmmword_1E264F1B8;
  a1[3] = unk_1E264F1C8;
  return result;
}

uint64_t pg_query__with_check_option__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__with_check_option__descriptor)
    pg_query__with_check_option__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__with_check_option__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__with_check_option__descriptor)
    pg_query__with_check_option__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__with_check_option__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__with_check_option__descriptor)
    pg_query__with_check_option__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__with_check_option__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__with_check_option__descriptor, a1, a2, a3);
}

void **pg_query__with_check_option__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__with_check_option__descriptor)
      pg_query__with_check_option__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__sort_group_clause__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__sort_group_clause__init_init_value;
  a1[1] = unk_1E264F1E8;
  result = 0.0;
  a1[2] = xmmword_1E264F1F8;
  return result;
}

uint64_t pg_query__sort_group_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__sort_group_clause__descriptor)
    pg_query__sort_group_clause__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__sort_group_clause__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__sort_group_clause__descriptor)
    pg_query__sort_group_clause__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__sort_group_clause__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__sort_group_clause__descriptor)
    pg_query__sort_group_clause__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__sort_group_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__sort_group_clause__descriptor, a1, a2, a3);
}

void **pg_query__sort_group_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__sort_group_clause__descriptor)
      pg_query__sort_group_clause__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__grouping_set__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__grouping_set__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264F218;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264F228;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__grouping_set__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__grouping_set__descriptor)
    pg_query__grouping_set__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__grouping_set__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__grouping_set__descriptor)
    pg_query__grouping_set__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__grouping_set__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__grouping_set__descriptor)
    pg_query__grouping_set__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__grouping_set__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__grouping_set__descriptor, a1, a2, a3);
}

void **pg_query__grouping_set__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__grouping_set__descriptor)
      pg_query__grouping_set__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__window_clause__init(_OWORD *a1)
{
  double result;

  a1[4] = xmmword_1E264F280;
  a1[5] = unk_1E264F290;
  a1[6] = xmmword_1E264F2A0;
  a1[7] = unk_1E264F2B0;
  *a1 = pg_query__window_clause__init_init_value;
  a1[1] = unk_1E264F250;
  *(_QWORD *)&result = 0x18DCB7E5CLL;
  a1[2] = xmmword_1E264F260;
  a1[3] = unk_1E264F270;
  return result;
}

uint64_t pg_query__window_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__window_clause__descriptor)
    pg_query__window_clause__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__window_clause__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__window_clause__descriptor)
    pg_query__window_clause__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__window_clause__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__window_clause__descriptor)
    pg_query__window_clause__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__window_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__window_clause__descriptor, a1, a2, a3);
}

void **pg_query__window_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__window_clause__descriptor)
      pg_query__window_clause__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__object_with_args__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__object_with_args__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264F2D0;
  result = 0.0;
  a1[2] = xmmword_1E264F2E0;
  a1[3] = unk_1E264F2F0;
  return result;
}

uint64_t pg_query__object_with_args__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__object_with_args__descriptor)
    pg_query__object_with_args__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__object_with_args__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__object_with_args__descriptor)
    pg_query__object_with_args__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__object_with_args__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__object_with_args__descriptor)
    pg_query__object_with_args__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__object_with_args__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__object_with_args__descriptor, a1, a2, a3);
}

void **pg_query__object_with_args__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__object_with_args__descriptor)
      pg_query__object_with_args__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__access_priv__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__access_priv__init_init_value;
  a1[1] = unk_1E264F310;
  result = 0.0;
  a1[2] = xmmword_1E264F320;
  return result;
}

uint64_t pg_query__access_priv__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__access_priv__descriptor)
    pg_query__access_priv__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__access_priv__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__access_priv__descriptor)
    pg_query__access_priv__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__access_priv__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__access_priv__descriptor)
    pg_query__access_priv__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__access_priv__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__access_priv__descriptor, a1, a2, a3);
}

void **pg_query__access_priv__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__access_priv__descriptor)
      pg_query__access_priv__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_op_class_item__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264F350;
  *(_OWORD *)(a1 + 48) = unk_1E264F360;
  *(_OWORD *)(a1 + 64) = xmmword_1E264F370;
  *(_QWORD *)(a1 + 80) = 0;
  result = *(double *)&pg_query__create_op_class_item__init_init_value;
  *(_OWORD *)a1 = pg_query__create_op_class_item__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264F340;
  return result;
}

uint64_t pg_query__create_op_class_item__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_op_class_item__descriptor)
    pg_query__create_op_class_item__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_op_class_item__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__create_op_class_item__descriptor)
    pg_query__create_op_class_item__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__create_op_class_item__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__create_op_class_item__descriptor)
    pg_query__create_op_class_item__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__create_op_class_item__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_op_class_item__descriptor, a1, a2, a3);
}

void **pg_query__create_op_class_item__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_op_class_item__descriptor)
      pg_query__create_op_class_item__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__table_like_clause__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__table_like_clause__init_init_value;
  *(_OWORD *)a1 = pg_query__table_like_clause__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264F398;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__table_like_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__table_like_clause__descriptor)
    pg_query__table_like_clause__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__table_like_clause__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__table_like_clause__descriptor)
    pg_query__table_like_clause__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__table_like_clause__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__table_like_clause__descriptor)
    pg_query__table_like_clause__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__table_like_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__table_like_clause__descriptor, a1, a2, a3);
}

void **pg_query__table_like_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__table_like_clause__descriptor)
      pg_query__table_like_clause__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__function_parameter__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__function_parameter__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264F3C0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264F3D0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__function_parameter__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__function_parameter__descriptor)
    pg_query__function_parameter__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__function_parameter__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__function_parameter__descriptor)
    pg_query__function_parameter__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__function_parameter__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__function_parameter__descriptor)
    pg_query__function_parameter__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__function_parameter__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__function_parameter__descriptor, a1, a2, a3);
}

void **pg_query__function_parameter__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__function_parameter__descriptor)
      pg_query__function_parameter__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__locking_clause__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__locking_clause__init_init_value;
  a1[1] = unk_1E264F3F8;
  result = 0.0;
  a1[2] = xmmword_1E264F408;
  return result;
}

uint64_t pg_query__locking_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__locking_clause__descriptor)
    pg_query__locking_clause__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__locking_clause__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__locking_clause__descriptor)
    pg_query__locking_clause__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__locking_clause__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__locking_clause__descriptor)
    pg_query__locking_clause__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__locking_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__locking_clause__descriptor, a1, a2, a3);
}

void **pg_query__locking_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__locking_clause__descriptor)
      pg_query__locking_clause__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__row_mark_clause__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__row_mark_clause__init_init_value;
  *(_OWORD *)a1 = pg_query__row_mark_clause__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264F428;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__row_mark_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__row_mark_clause__descriptor)
    pg_query__row_mark_clause__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__row_mark_clause__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__row_mark_clause__descriptor)
    pg_query__row_mark_clause__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__row_mark_clause__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__row_mark_clause__descriptor)
    pg_query__row_mark_clause__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__row_mark_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__row_mark_clause__descriptor, a1, a2, a3);
}

void **pg_query__row_mark_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__row_mark_clause__descriptor)
      pg_query__row_mark_clause__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__xml_serialize__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__xml_serialize__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264F450;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264F460;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__xml_serialize__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__xml_serialize__descriptor)
    pg_query__xml_serialize__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__xml_serialize__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__xml_serialize__descriptor)
    pg_query__xml_serialize__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__xml_serialize__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__xml_serialize__descriptor)
    pg_query__xml_serialize__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__xml_serialize__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__xml_serialize__descriptor, a1, a2, a3);
}

void **pg_query__xml_serialize__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__xml_serialize__descriptor)
      pg_query__xml_serialize__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__with_clause__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__with_clause__init_init_value;
  a1[1] = unk_1E264F488;
  result = 0.0;
  a1[2] = xmmword_1E264F498;
  return result;
}

uint64_t pg_query__with_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__with_clause__descriptor)
    pg_query__with_clause__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__with_clause__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__with_clause__descriptor)
    pg_query__with_clause__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__with_clause__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__with_clause__descriptor)
    pg_query__with_clause__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__with_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__with_clause__descriptor, a1, a2, a3);
}

void **pg_query__with_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__with_clause__descriptor)
      pg_query__with_clause__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__infer_clause__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__infer_clause__init_init_value;
  a1[1] = unk_1E264F4B8;
  result = 0.0;
  a1[2] = xmmword_1E264F4C8;
  a1[3] = *(_OWORD *)&off_1E264F4D8;
  return result;
}

uint64_t pg_query__infer_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__infer_clause__descriptor)
    pg_query__infer_clause__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__infer_clause__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__infer_clause__descriptor)
    pg_query__infer_clause__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__infer_clause__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__infer_clause__descriptor)
    pg_query__infer_clause__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__infer_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__infer_clause__descriptor, a1, a2, a3);
}

void **pg_query__infer_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__infer_clause__descriptor)
      pg_query__infer_clause__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__on_conflict_clause__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 32) = xmmword_1E264F508;
  *(_OWORD *)(a1 + 48) = unk_1E264F518;
  *(_QWORD *)(a1 + 64) = 0;
  result = dbl_1E264F4F8[0];
  *(_OWORD *)a1 = pg_query__on_conflict_clause__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E264F4F8;
  return result;
}

uint64_t pg_query__on_conflict_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__on_conflict_clause__descriptor)
    pg_query__on_conflict_clause__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__on_conflict_clause__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__on_conflict_clause__descriptor)
    pg_query__on_conflict_clause__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__on_conflict_clause__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__on_conflict_clause__descriptor)
    pg_query__on_conflict_clause__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__on_conflict_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__on_conflict_clause__descriptor, a1, a2, a3);
}

void **pg_query__on_conflict_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__on_conflict_clause__descriptor)
      pg_query__on_conflict_clause__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__common_table_expr__init(_OWORD *a1)
{
  double result;

  a1[6] = xmmword_1E264F590;
  a1[7] = unk_1E264F5A0;
  a1[8] = xmmword_1E264F5B0;
  a1[2] = xmmword_1E264F550;
  a1[3] = unk_1E264F560;
  a1[4] = xmmword_1E264F570;
  a1[5] = unk_1E264F580;
  result = dbl_1E264F540[0];
  *a1 = pg_query__common_table_expr__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E264F540;
  return result;
}

uint64_t pg_query__common_table_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__common_table_expr__descriptor)
    pg_query__common_table_expr__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__common_table_expr__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__common_table_expr__descriptor)
    pg_query__common_table_expr__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__common_table_expr__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__common_table_expr__descriptor)
    pg_query__common_table_expr__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__common_table_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__common_table_expr__descriptor, a1, a2, a3);
}

void **pg_query__common_table_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__common_table_expr__descriptor)
      pg_query__common_table_expr__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__role_spec__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__role_spec__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264F5D0;
  *(_QWORD *)&result = 0x18DCB7E5CLL;
  a1[2] = xmmword_1E264F5E0;
  return result;
}

uint64_t pg_query__role_spec__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__role_spec__descriptor)
    pg_query__role_spec__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__role_spec__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__role_spec__descriptor)
    pg_query__role_spec__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__role_spec__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__role_spec__descriptor)
    pg_query__role_spec__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__role_spec__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__role_spec__descriptor, a1, a2, a3);
}

void **pg_query__role_spec__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__role_spec__descriptor)
      pg_query__role_spec__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__trigger_transition__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__trigger_transition__init_init_value;
  *(_OWORD *)a1 = pg_query__trigger_transition__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264F600;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__trigger_transition__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__trigger_transition__descriptor)
    pg_query__trigger_transition__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__trigger_transition__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__trigger_transition__descriptor)
    pg_query__trigger_transition__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__trigger_transition__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__trigger_transition__descriptor)
    pg_query__trigger_transition__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__trigger_transition__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__trigger_transition__descriptor, a1, a2, a3);
}

void **pg_query__trigger_transition__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__trigger_transition__descriptor)
      pg_query__trigger_transition__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__partition_elem__init(_OWORD *a1)
{
  double result;

  a1[2] = xmmword_1E264F638;
  a1[3] = unk_1E264F648;
  a1[4] = xmmword_1E264F658;
  result = 0.0;
  *a1 = pg_query__partition_elem__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264F628;
  return result;
}

uint64_t pg_query__partition_elem__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__partition_elem__descriptor)
    pg_query__partition_elem__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__partition_elem__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__partition_elem__descriptor)
    pg_query__partition_elem__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__partition_elem__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__partition_elem__descriptor)
    pg_query__partition_elem__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__partition_elem__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__partition_elem__descriptor, a1, a2, a3);
}

void **pg_query__partition_elem__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__partition_elem__descriptor)
      pg_query__partition_elem__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__partition_spec__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__partition_spec__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264F678;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264F688;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__partition_spec__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__partition_spec__descriptor)
    pg_query__partition_spec__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__partition_spec__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__partition_spec__descriptor)
    pg_query__partition_spec__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__partition_spec__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__partition_spec__descriptor)
    pg_query__partition_spec__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__partition_spec__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__partition_spec__descriptor, a1, a2, a3);
}

void **pg_query__partition_spec__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__partition_spec__descriptor)
      pg_query__partition_spec__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__partition_bound_spec__init(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 64) = xmmword_1E264F6E0;
  *(_OWORD *)(a1 + 80) = unk_1E264F6F0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)a1 = pg_query__partition_bound_spec__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264F6B0;
  result = dbl_1E264F6D0[0];
  *(_OWORD *)(a1 + 32) = xmmword_1E264F6C0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)dbl_1E264F6D0;
  return result;
}

uint64_t pg_query__partition_bound_spec__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__partition_bound_spec__descriptor)
    pg_query__partition_bound_spec__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__partition_bound_spec__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__partition_bound_spec__descriptor)
    pg_query__partition_bound_spec__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__partition_bound_spec__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__partition_bound_spec__descriptor)
    pg_query__partition_bound_spec__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__partition_bound_spec__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__partition_bound_spec__descriptor, a1, a2, a3);
}

void **pg_query__partition_bound_spec__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__partition_bound_spec__descriptor)
      pg_query__partition_bound_spec__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__partition_range_datum__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__partition_range_datum__init_init_value;
  a1[1] = unk_1E264F718;
  result = 0.0;
  a1[2] = xmmword_1E264F728;
  return result;
}

uint64_t pg_query__partition_range_datum__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__partition_range_datum__descriptor)
    pg_query__partition_range_datum__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__partition_range_datum__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__partition_range_datum__descriptor)
    pg_query__partition_range_datum__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__partition_range_datum__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__partition_range_datum__descriptor)
    pg_query__partition_range_datum__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__partition_range_datum__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__partition_range_datum__descriptor, a1, a2, a3);
}

void **pg_query__partition_range_datum__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__partition_range_datum__descriptor)
      pg_query__partition_range_datum__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__partition_cmd__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__partition_cmd__init_init_value;
  *(_OWORD *)a1 = pg_query__partition_cmd__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264F748;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__partition_cmd__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__partition_cmd__descriptor)
    pg_query__partition_cmd__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__partition_cmd__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__partition_cmd__descriptor)
    pg_query__partition_cmd__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__partition_cmd__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__partition_cmd__descriptor)
    pg_query__partition_cmd__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__partition_cmd__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__partition_cmd__descriptor, a1, a2, a3);
}

void **pg_query__partition_cmd__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__partition_cmd__descriptor)
      pg_query__partition_cmd__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__vacuum_relation__init(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = pg_query__vacuum_relation__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E264F770;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E264F780;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__vacuum_relation__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__vacuum_relation__descriptor)
    pg_query__vacuum_relation__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__vacuum_relation__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__vacuum_relation__descriptor)
    pg_query__vacuum_relation__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__vacuum_relation__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__vacuum_relation__descriptor)
    pg_query__vacuum_relation__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__vacuum_relation__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__vacuum_relation__descriptor, a1, a2, a3);
}

void **pg_query__vacuum_relation__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__vacuum_relation__descriptor)
      pg_query__vacuum_relation__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__inline_code_block__init(_OWORD *a1)
{
  double result;

  *a1 = pg_query__inline_code_block__init_init_value;
  a1[1] = *(_OWORD *)algn_1E264F7A8;
  result = 0.0;
  a1[2] = xmmword_1E264F7B8;
  return result;
}

uint64_t pg_query__inline_code_block__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__inline_code_block__descriptor)
    pg_query__inline_code_block__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__inline_code_block__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__inline_code_block__descriptor)
    pg_query__inline_code_block__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__inline_code_block__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__inline_code_block__descriptor)
    pg_query__inline_code_block__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__inline_code_block__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__inline_code_block__descriptor, a1, a2, a3);
}

void **pg_query__inline_code_block__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__inline_code_block__descriptor)
      pg_query__inline_code_block__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__call_context__init(_OWORD *a1)
{
  double result;

  result = *(double *)&pg_query__call_context__init_init_value;
  *a1 = pg_query__call_context__init_init_value;
  a1[1] = unk_1E264F7D8;
  return result;
}

uint64_t pg_query__call_context__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__call_context__descriptor)
    pg_query__call_context__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__call_context__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__call_context__descriptor)
    pg_query__call_context__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__call_context__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__call_context__descriptor)
    pg_query__call_context__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__call_context__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__call_context__descriptor, a1, a2, a3);
}

void **pg_query__call_context__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__call_context__descriptor)
      pg_query__call_context__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__scan_token__init(uint64_t a1)
{
  double result;

  result = *(double *)&pg_query__scan_token__init_init_value;
  *(_OWORD *)a1 = pg_query__scan_token__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E264F7F8;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__scan_token__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__scan_token__descriptor)
    pg_query__scan_token__get_packed_size_cold_1();
  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__scan_token__pack(void **a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != &pg_query__scan_token__descriptor)
    pg_query__scan_token__pack_cold_1();
  return protobuf_c_message_pack((uint64_t)a1, a2, a3);
}

uint64_t pg_query__scan_token__pack_to_buffer(void **a1, void (**a2)(_QWORD, uint64_t, char *), uint64_t a3)
{
  if (*a1 != &pg_query__scan_token__descriptor)
    pg_query__scan_token__pack_to_buffer_cold_1();
  return protobuf_c_message_pack_to_buffer(a1, a2, a3);
}

_QWORD *pg_query__scan_token__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__scan_token__descriptor, a1, a2, a3);
}

void **pg_query__scan_token__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__scan_token__descriptor)
      pg_query__scan_token__free_unpacked_cold_1();
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

void pg_query__parse_result__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__parse_result__get_packed_size", "pg_query.pb-c.c", 19, "message->base.descriptor == &pg_query__parse_result__descriptor");
}

void pg_query__parse_result__pack_cold_1()
{
  __assert_rtn("pg_query__parse_result__pack", "pg_query.pb-c.c", 26, "message->base.descriptor == &pg_query__parse_result__descriptor");
}

void pg_query__parse_result__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__parse_result__pack_to_buffer", "pg_query.pb-c.c", 33, "message->base.descriptor == &pg_query__parse_result__descriptor");
}

void pg_query__parse_result__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__parse_result__free_unpacked", "pg_query.pb-c.c", 52, "message->base.descriptor == &pg_query__parse_result__descriptor");
}

void pg_query__scan_result__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__scan_result__get_packed_size", "pg_query.pb-c.c", 64, "message->base.descriptor == &pg_query__scan_result__descriptor");
}

void pg_query__scan_result__pack_cold_1()
{
  __assert_rtn("pg_query__scan_result__pack", "pg_query.pb-c.c", 71, "message->base.descriptor == &pg_query__scan_result__descriptor");
}

void pg_query__scan_result__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__scan_result__pack_to_buffer", "pg_query.pb-c.c", 78, "message->base.descriptor == &pg_query__scan_result__descriptor");
}

void pg_query__scan_result__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__scan_result__free_unpacked", "pg_query.pb-c.c", 97, "message->base.descriptor == &pg_query__scan_result__descriptor");
}

void pg_query__node__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__node__get_packed_size", "pg_query.pb-c.c", 109, "message->base.descriptor == &pg_query__node__descriptor");
}

void pg_query__node__pack_cold_1()
{
  __assert_rtn("pg_query__node__pack", "pg_query.pb-c.c", 116, "message->base.descriptor == &pg_query__node__descriptor");
}

void pg_query__node__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__node__pack_to_buffer", "pg_query.pb-c.c", 123, "message->base.descriptor == &pg_query__node__descriptor");
}

void pg_query__node__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__node__free_unpacked", "pg_query.pb-c.c", 142, "message->base.descriptor == &pg_query__node__descriptor");
}

void pg_query__integer__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__integer__get_packed_size", "pg_query.pb-c.c", 154, "message->base.descriptor == &pg_query__integer__descriptor");
}

void pg_query__integer__pack_cold_1()
{
  __assert_rtn("pg_query__integer__pack", "pg_query.pb-c.c", 161, "message->base.descriptor == &pg_query__integer__descriptor");
}

void pg_query__integer__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__integer__pack_to_buffer", "pg_query.pb-c.c", 168, "message->base.descriptor == &pg_query__integer__descriptor");
}

void pg_query__integer__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__integer__free_unpacked", "pg_query.pb-c.c", 187, "message->base.descriptor == &pg_query__integer__descriptor");
}

void pg_query__float__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__float__get_packed_size", "pg_query.pb-c.c", 199, "message->base.descriptor == &pg_query__float__descriptor");
}

void pg_query__float__pack_cold_1()
{
  __assert_rtn("pg_query__float__pack", "pg_query.pb-c.c", 206, "message->base.descriptor == &pg_query__float__descriptor");
}

void pg_query__float__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__float__pack_to_buffer", "pg_query.pb-c.c", 213, "message->base.descriptor == &pg_query__float__descriptor");
}

void pg_query__float__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__float__free_unpacked", "pg_query.pb-c.c", 232, "message->base.descriptor == &pg_query__float__descriptor");
}

void pg_query__string__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__string__get_packed_size", "pg_query.pb-c.c", 244, "message->base.descriptor == &pg_query__string__descriptor");
}

void pg_query__string__pack_cold_1()
{
  __assert_rtn("pg_query__string__pack", "pg_query.pb-c.c", 251, "message->base.descriptor == &pg_query__string__descriptor");
}

void pg_query__string__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__string__pack_to_buffer", "pg_query.pb-c.c", 258, "message->base.descriptor == &pg_query__string__descriptor");
}

void pg_query__string__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__string__free_unpacked", "pg_query.pb-c.c", 277, "message->base.descriptor == &pg_query__string__descriptor");
}

void pg_query__bit_string__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__bit_string__get_packed_size", "pg_query.pb-c.c", 289, "message->base.descriptor == &pg_query__bit_string__descriptor");
}

void pg_query__bit_string__pack_cold_1()
{
  __assert_rtn("pg_query__bit_string__pack", "pg_query.pb-c.c", 296, "message->base.descriptor == &pg_query__bit_string__descriptor");
}

void pg_query__bit_string__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__bit_string__pack_to_buffer", "pg_query.pb-c.c", 303, "message->base.descriptor == &pg_query__bit_string__descriptor");
}

void pg_query__bit_string__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__bit_string__free_unpacked", "pg_query.pb-c.c", 322, "message->base.descriptor == &pg_query__bit_string__descriptor");
}

void pg_query__null__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__null__get_packed_size", "pg_query.pb-c.c", 334, "message->base.descriptor == &pg_query__null__descriptor");
}

void pg_query__null__pack_cold_1()
{
  __assert_rtn("pg_query__null__pack", "pg_query.pb-c.c", 341, "message->base.descriptor == &pg_query__null__descriptor");
}

void pg_query__null__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__null__pack_to_buffer", "pg_query.pb-c.c", 348, "message->base.descriptor == &pg_query__null__descriptor");
}

void pg_query__null__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__null__free_unpacked", "pg_query.pb-c.c", 367, "message->base.descriptor == &pg_query__null__descriptor");
}

void pg_query__list__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__list__get_packed_size", "pg_query.pb-c.c", 379, "message->base.descriptor == &pg_query__list__descriptor");
}

void pg_query__list__pack_cold_1()
{
  __assert_rtn("pg_query__list__pack", "pg_query.pb-c.c", 386, "message->base.descriptor == &pg_query__list__descriptor");
}

void pg_query__list__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__list__pack_to_buffer", "pg_query.pb-c.c", 393, "message->base.descriptor == &pg_query__list__descriptor");
}

void pg_query__list__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__list__free_unpacked", "pg_query.pb-c.c", 412, "message->base.descriptor == &pg_query__list__descriptor");
}

void pg_query__oid_list__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__oid_list__get_packed_size", "pg_query.pb-c.c", 424, "message->base.descriptor == &pg_query__oid_list__descriptor");
}

void pg_query__oid_list__pack_cold_1()
{
  __assert_rtn("pg_query__oid_list__pack", "pg_query.pb-c.c", 431, "message->base.descriptor == &pg_query__oid_list__descriptor");
}

void pg_query__oid_list__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__oid_list__pack_to_buffer", "pg_query.pb-c.c", 438, "message->base.descriptor == &pg_query__oid_list__descriptor");
}

void pg_query__oid_list__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__oid_list__free_unpacked", "pg_query.pb-c.c", 457, "message->base.descriptor == &pg_query__oid_list__descriptor");
}

void pg_query__int_list__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__int_list__get_packed_size", "pg_query.pb-c.c", 469, "message->base.descriptor == &pg_query__int_list__descriptor");
}

void pg_query__int_list__pack_cold_1()
{
  __assert_rtn("pg_query__int_list__pack", "pg_query.pb-c.c", 476, "message->base.descriptor == &pg_query__int_list__descriptor");
}

void pg_query__int_list__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__int_list__pack_to_buffer", "pg_query.pb-c.c", 483, "message->base.descriptor == &pg_query__int_list__descriptor");
}

void pg_query__int_list__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__int_list__free_unpacked", "pg_query.pb-c.c", 502, "message->base.descriptor == &pg_query__int_list__descriptor");
}

void pg_query__alias__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alias__get_packed_size", "pg_query.pb-c.c", 514, "message->base.descriptor == &pg_query__alias__descriptor");
}

void pg_query__alias__pack_cold_1()
{
  __assert_rtn("pg_query__alias__pack", "pg_query.pb-c.c", 521, "message->base.descriptor == &pg_query__alias__descriptor");
}

void pg_query__alias__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alias__pack_to_buffer", "pg_query.pb-c.c", 528, "message->base.descriptor == &pg_query__alias__descriptor");
}

void pg_query__alias__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alias__free_unpacked", "pg_query.pb-c.c", 547, "message->base.descriptor == &pg_query__alias__descriptor");
}

void pg_query__range_var__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__range_var__get_packed_size", "pg_query.pb-c.c", 559, "message->base.descriptor == &pg_query__range_var__descriptor");
}

void pg_query__range_var__pack_cold_1()
{
  __assert_rtn("pg_query__range_var__pack", "pg_query.pb-c.c", 566, "message->base.descriptor == &pg_query__range_var__descriptor");
}

void pg_query__range_var__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__range_var__pack_to_buffer", "pg_query.pb-c.c", 573, "message->base.descriptor == &pg_query__range_var__descriptor");
}

void pg_query__range_var__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__range_var__free_unpacked", "pg_query.pb-c.c", 592, "message->base.descriptor == &pg_query__range_var__descriptor");
}

void pg_query__table_func__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__table_func__get_packed_size", "pg_query.pb-c.c", 604, "message->base.descriptor == &pg_query__table_func__descriptor");
}

void pg_query__table_func__pack_cold_1()
{
  __assert_rtn("pg_query__table_func__pack", "pg_query.pb-c.c", 611, "message->base.descriptor == &pg_query__table_func__descriptor");
}

void pg_query__table_func__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__table_func__pack_to_buffer", "pg_query.pb-c.c", 618, "message->base.descriptor == &pg_query__table_func__descriptor");
}

void pg_query__table_func__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__table_func__free_unpacked", "pg_query.pb-c.c", 637, "message->base.descriptor == &pg_query__table_func__descriptor");
}

void pg_query__expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__expr__get_packed_size", "pg_query.pb-c.c", 649, "message->base.descriptor == &pg_query__expr__descriptor");
}

void pg_query__expr__pack_cold_1()
{
  __assert_rtn("pg_query__expr__pack", "pg_query.pb-c.c", 656, "message->base.descriptor == &pg_query__expr__descriptor");
}

void pg_query__expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__expr__pack_to_buffer", "pg_query.pb-c.c", 663, "message->base.descriptor == &pg_query__expr__descriptor");
}

void pg_query__expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__expr__free_unpacked", "pg_query.pb-c.c", 682, "message->base.descriptor == &pg_query__expr__descriptor");
}

void pg_query__var__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__var__get_packed_size", "pg_query.pb-c.c", 694, "message->base.descriptor == &pg_query__var__descriptor");
}

void pg_query__var__pack_cold_1()
{
  __assert_rtn("pg_query__var__pack", "pg_query.pb-c.c", 701, "message->base.descriptor == &pg_query__var__descriptor");
}

void pg_query__var__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__var__pack_to_buffer", "pg_query.pb-c.c", 708, "message->base.descriptor == &pg_query__var__descriptor");
}

void pg_query__var__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__var__free_unpacked", "pg_query.pb-c.c", 727, "message->base.descriptor == &pg_query__var__descriptor");
}

void pg_query__param__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__param__get_packed_size", "pg_query.pb-c.c", 739, "message->base.descriptor == &pg_query__param__descriptor");
}

void pg_query__param__pack_cold_1()
{
  __assert_rtn("pg_query__param__pack", "pg_query.pb-c.c", 746, "message->base.descriptor == &pg_query__param__descriptor");
}

void pg_query__param__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__param__pack_to_buffer", "pg_query.pb-c.c", 753, "message->base.descriptor == &pg_query__param__descriptor");
}

void pg_query__param__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__param__free_unpacked", "pg_query.pb-c.c", 772, "message->base.descriptor == &pg_query__param__descriptor");
}

void pg_query__aggref__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__aggref__get_packed_size", "pg_query.pb-c.c", 784, "message->base.descriptor == &pg_query__aggref__descriptor");
}

void pg_query__aggref__pack_cold_1()
{
  __assert_rtn("pg_query__aggref__pack", "pg_query.pb-c.c", 791, "message->base.descriptor == &pg_query__aggref__descriptor");
}

void pg_query__aggref__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__aggref__pack_to_buffer", "pg_query.pb-c.c", 798, "message->base.descriptor == &pg_query__aggref__descriptor");
}

void pg_query__aggref__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__aggref__free_unpacked", "pg_query.pb-c.c", 817, "message->base.descriptor == &pg_query__aggref__descriptor");
}

void pg_query__grouping_func__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__grouping_func__get_packed_size", "pg_query.pb-c.c", 829, "message->base.descriptor == &pg_query__grouping_func__descriptor");
}

void pg_query__grouping_func__pack_cold_1()
{
  __assert_rtn("pg_query__grouping_func__pack", "pg_query.pb-c.c", 836, "message->base.descriptor == &pg_query__grouping_func__descriptor");
}

void pg_query__grouping_func__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__grouping_func__pack_to_buffer", "pg_query.pb-c.c", 843, "message->base.descriptor == &pg_query__grouping_func__descriptor");
}

void pg_query__grouping_func__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__grouping_func__free_unpacked", "pg_query.pb-c.c", 862, "message->base.descriptor == &pg_query__grouping_func__descriptor");
}

void pg_query__window_func__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__window_func__get_packed_size", "pg_query.pb-c.c", 874, "message->base.descriptor == &pg_query__window_func__descriptor");
}

void pg_query__window_func__pack_cold_1()
{
  __assert_rtn("pg_query__window_func__pack", "pg_query.pb-c.c", 881, "message->base.descriptor == &pg_query__window_func__descriptor");
}

void pg_query__window_func__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__window_func__pack_to_buffer", "pg_query.pb-c.c", 888, "message->base.descriptor == &pg_query__window_func__descriptor");
}

void pg_query__window_func__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__window_func__free_unpacked", "pg_query.pb-c.c", 907, "message->base.descriptor == &pg_query__window_func__descriptor");
}

void pg_query__subscripting_ref__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__subscripting_ref__get_packed_size", "pg_query.pb-c.c", 919, "message->base.descriptor == &pg_query__subscripting_ref__descriptor");
}

void pg_query__subscripting_ref__pack_cold_1()
{
  __assert_rtn("pg_query__subscripting_ref__pack", "pg_query.pb-c.c", 926, "message->base.descriptor == &pg_query__subscripting_ref__descriptor");
}

void pg_query__subscripting_ref__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__subscripting_ref__pack_to_buffer", "pg_query.pb-c.c", 933, "message->base.descriptor == &pg_query__subscripting_ref__descriptor");
}

void pg_query__subscripting_ref__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__subscripting_ref__free_unpacked", "pg_query.pb-c.c", 952, "message->base.descriptor == &pg_query__subscripting_ref__descriptor");
}

void pg_query__func_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__func_expr__get_packed_size", "pg_query.pb-c.c", 964, "message->base.descriptor == &pg_query__func_expr__descriptor");
}

void pg_query__func_expr__pack_cold_1()
{
  __assert_rtn("pg_query__func_expr__pack", "pg_query.pb-c.c", 971, "message->base.descriptor == &pg_query__func_expr__descriptor");
}

void pg_query__func_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__func_expr__pack_to_buffer", "pg_query.pb-c.c", 978, "message->base.descriptor == &pg_query__func_expr__descriptor");
}

void pg_query__func_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__func_expr__free_unpacked", "pg_query.pb-c.c", 997, "message->base.descriptor == &pg_query__func_expr__descriptor");
}

void pg_query__named_arg_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__named_arg_expr__get_packed_size", "pg_query.pb-c.c", 1009, "message->base.descriptor == &pg_query__named_arg_expr__descriptor");
}

void pg_query__named_arg_expr__pack_cold_1()
{
  __assert_rtn("pg_query__named_arg_expr__pack", "pg_query.pb-c.c", 1016, "message->base.descriptor == &pg_query__named_arg_expr__descriptor");
}

void pg_query__named_arg_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__named_arg_expr__pack_to_buffer", "pg_query.pb-c.c", 1023, "message->base.descriptor == &pg_query__named_arg_expr__descriptor");
}

void pg_query__named_arg_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__named_arg_expr__free_unpacked", "pg_query.pb-c.c", 1042, "message->base.descriptor == &pg_query__named_arg_expr__descriptor");
}

void pg_query__op_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__op_expr__get_packed_size", "pg_query.pb-c.c", 1054, "message->base.descriptor == &pg_query__op_expr__descriptor");
}

void pg_query__op_expr__pack_cold_1()
{
  __assert_rtn("pg_query__op_expr__pack", "pg_query.pb-c.c", 1061, "message->base.descriptor == &pg_query__op_expr__descriptor");
}

void pg_query__op_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__op_expr__pack_to_buffer", "pg_query.pb-c.c", 1068, "message->base.descriptor == &pg_query__op_expr__descriptor");
}

void pg_query__op_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__op_expr__free_unpacked", "pg_query.pb-c.c", 1087, "message->base.descriptor == &pg_query__op_expr__descriptor");
}

void pg_query__distinct_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__distinct_expr__get_packed_size", "pg_query.pb-c.c", 1099, "message->base.descriptor == &pg_query__distinct_expr__descriptor");
}

void pg_query__distinct_expr__pack_cold_1()
{
  __assert_rtn("pg_query__distinct_expr__pack", "pg_query.pb-c.c", 1106, "message->base.descriptor == &pg_query__distinct_expr__descriptor");
}

void pg_query__distinct_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__distinct_expr__pack_to_buffer", "pg_query.pb-c.c", 1113, "message->base.descriptor == &pg_query__distinct_expr__descriptor");
}

void pg_query__distinct_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__distinct_expr__free_unpacked", "pg_query.pb-c.c", 1132, "message->base.descriptor == &pg_query__distinct_expr__descriptor");
}

void pg_query__null_if_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__null_if_expr__get_packed_size", "pg_query.pb-c.c", 1144, "message->base.descriptor == &pg_query__null_if_expr__descriptor");
}

void pg_query__null_if_expr__pack_cold_1()
{
  __assert_rtn("pg_query__null_if_expr__pack", "pg_query.pb-c.c", 1151, "message->base.descriptor == &pg_query__null_if_expr__descriptor");
}

void pg_query__null_if_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__null_if_expr__pack_to_buffer", "pg_query.pb-c.c", 1158, "message->base.descriptor == &pg_query__null_if_expr__descriptor");
}

void pg_query__null_if_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__null_if_expr__free_unpacked", "pg_query.pb-c.c", 1177, "message->base.descriptor == &pg_query__null_if_expr__descriptor");
}

void pg_query__scalar_array_op_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__scalar_array_op_expr__get_packed_size", "pg_query.pb-c.c", 1189, "message->base.descriptor == &pg_query__scalar_array_op_expr__descriptor");
}

void pg_query__scalar_array_op_expr__pack_cold_1()
{
  __assert_rtn("pg_query__scalar_array_op_expr__pack", "pg_query.pb-c.c", 1196, "message->base.descriptor == &pg_query__scalar_array_op_expr__descriptor");
}

void pg_query__scalar_array_op_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__scalar_array_op_expr__pack_to_buffer", "pg_query.pb-c.c", 1203, "message->base.descriptor == &pg_query__scalar_array_op_expr__descriptor");
}

void pg_query__scalar_array_op_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__scalar_array_op_expr__free_unpacked", "pg_query.pb-c.c", 1222, "message->base.descriptor == &pg_query__scalar_array_op_expr__descriptor");
}

void pg_query__BOOL_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__BOOL_expr__get_packed_size", "pg_query.pb-c.c", 1234, "message->base.descriptor == &pg_query__BOOL_expr__descriptor");
}

void pg_query__BOOL_expr__pack_cold_1()
{
  __assert_rtn("pg_query__BOOL_expr__pack", "pg_query.pb-c.c", 1241, "message->base.descriptor == &pg_query__BOOL_expr__descriptor");
}

void pg_query__BOOL_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__BOOL_expr__pack_to_buffer", "pg_query.pb-c.c", 1248, "message->base.descriptor == &pg_query__BOOL_expr__descriptor");
}

void pg_query__BOOL_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__BOOL_expr__free_unpacked", "pg_query.pb-c.c", 1267, "message->base.descriptor == &pg_query__BOOL_expr__descriptor");
}

void pg_query__sub_link__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__sub_link__get_packed_size", "pg_query.pb-c.c", 1279, "message->base.descriptor == &pg_query__sub_link__descriptor");
}

void pg_query__sub_link__pack_cold_1()
{
  __assert_rtn("pg_query__sub_link__pack", "pg_query.pb-c.c", 1286, "message->base.descriptor == &pg_query__sub_link__descriptor");
}

void pg_query__sub_link__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__sub_link__pack_to_buffer", "pg_query.pb-c.c", 1293, "message->base.descriptor == &pg_query__sub_link__descriptor");
}

void pg_query__sub_link__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__sub_link__free_unpacked", "pg_query.pb-c.c", 1312, "message->base.descriptor == &pg_query__sub_link__descriptor");
}

void pg_query__sub_plan__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__sub_plan__get_packed_size", "pg_query.pb-c.c", 1324, "message->base.descriptor == &pg_query__sub_plan__descriptor");
}

void pg_query__sub_plan__pack_cold_1()
{
  __assert_rtn("pg_query__sub_plan__pack", "pg_query.pb-c.c", 1331, "message->base.descriptor == &pg_query__sub_plan__descriptor");
}

void pg_query__sub_plan__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__sub_plan__pack_to_buffer", "pg_query.pb-c.c", 1338, "message->base.descriptor == &pg_query__sub_plan__descriptor");
}

void pg_query__sub_plan__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__sub_plan__free_unpacked", "pg_query.pb-c.c", 1357, "message->base.descriptor == &pg_query__sub_plan__descriptor");
}

void pg_query__alternative_sub_plan__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alternative_sub_plan__get_packed_size", "pg_query.pb-c.c", 1369, "message->base.descriptor == &pg_query__alternative_sub_plan__descriptor");
}

void pg_query__alternative_sub_plan__pack_cold_1()
{
  __assert_rtn("pg_query__alternative_sub_plan__pack", "pg_query.pb-c.c", 1376, "message->base.descriptor == &pg_query__alternative_sub_plan__descriptor");
}

void pg_query__alternative_sub_plan__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alternative_sub_plan__pack_to_buffer", "pg_query.pb-c.c", 1383, "message->base.descriptor == &pg_query__alternative_sub_plan__descriptor");
}

void pg_query__alternative_sub_plan__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alternative_sub_plan__free_unpacked", "pg_query.pb-c.c", 1402, "message->base.descriptor == &pg_query__alternative_sub_plan__descriptor");
}

void pg_query__field_select__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__field_select__get_packed_size", "pg_query.pb-c.c", 1414, "message->base.descriptor == &pg_query__field_select__descriptor");
}

void pg_query__field_select__pack_cold_1()
{
  __assert_rtn("pg_query__field_select__pack", "pg_query.pb-c.c", 1421, "message->base.descriptor == &pg_query__field_select__descriptor");
}

void pg_query__field_select__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__field_select__pack_to_buffer", "pg_query.pb-c.c", 1428, "message->base.descriptor == &pg_query__field_select__descriptor");
}

void pg_query__field_select__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__field_select__free_unpacked", "pg_query.pb-c.c", 1447, "message->base.descriptor == &pg_query__field_select__descriptor");
}

void pg_query__field_store__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__field_store__get_packed_size", "pg_query.pb-c.c", 1459, "message->base.descriptor == &pg_query__field_store__descriptor");
}

void pg_query__field_store__pack_cold_1()
{
  __assert_rtn("pg_query__field_store__pack", "pg_query.pb-c.c", 1466, "message->base.descriptor == &pg_query__field_store__descriptor");
}

void pg_query__field_store__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__field_store__pack_to_buffer", "pg_query.pb-c.c", 1473, "message->base.descriptor == &pg_query__field_store__descriptor");
}

void pg_query__field_store__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__field_store__free_unpacked", "pg_query.pb-c.c", 1492, "message->base.descriptor == &pg_query__field_store__descriptor");
}

void pg_query__relabel_type__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__relabel_type__get_packed_size", "pg_query.pb-c.c", 1504, "message->base.descriptor == &pg_query__relabel_type__descriptor");
}

void pg_query__relabel_type__pack_cold_1()
{
  __assert_rtn("pg_query__relabel_type__pack", "pg_query.pb-c.c", 1511, "message->base.descriptor == &pg_query__relabel_type__descriptor");
}

void pg_query__relabel_type__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__relabel_type__pack_to_buffer", "pg_query.pb-c.c", 1518, "message->base.descriptor == &pg_query__relabel_type__descriptor");
}

void pg_query__relabel_type__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__relabel_type__free_unpacked", "pg_query.pb-c.c", 1537, "message->base.descriptor == &pg_query__relabel_type__descriptor");
}

void pg_query__coerce_via_io__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__coerce_via_io__get_packed_size", "pg_query.pb-c.c", 1549, "message->base.descriptor == &pg_query__coerce_via_io__descriptor");
}

void pg_query__coerce_via_io__pack_cold_1()
{
  __assert_rtn("pg_query__coerce_via_io__pack", "pg_query.pb-c.c", 1556, "message->base.descriptor == &pg_query__coerce_via_io__descriptor");
}

void pg_query__coerce_via_io__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__coerce_via_io__pack_to_buffer", "pg_query.pb-c.c", 1563, "message->base.descriptor == &pg_query__coerce_via_io__descriptor");
}

void pg_query__coerce_via_io__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__coerce_via_io__free_unpacked", "pg_query.pb-c.c", 1582, "message->base.descriptor == &pg_query__coerce_via_io__descriptor");
}

void pg_query__array_coerce_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__array_coerce_expr__get_packed_size", "pg_query.pb-c.c", 1594, "message->base.descriptor == &pg_query__array_coerce_expr__descriptor");
}

void pg_query__array_coerce_expr__pack_cold_1()
{
  __assert_rtn("pg_query__array_coerce_expr__pack", "pg_query.pb-c.c", 1601, "message->base.descriptor == &pg_query__array_coerce_expr__descriptor");
}

void pg_query__array_coerce_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__array_coerce_expr__pack_to_buffer", "pg_query.pb-c.c", 1608, "message->base.descriptor == &pg_query__array_coerce_expr__descriptor");
}

void pg_query__array_coerce_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__array_coerce_expr__free_unpacked", "pg_query.pb-c.c", 1627, "message->base.descriptor == &pg_query__array_coerce_expr__descriptor");
}

void pg_query__convert_rowtype_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__convert_rowtype_expr__get_packed_size", "pg_query.pb-c.c", 1639, "message->base.descriptor == &pg_query__convert_rowtype_expr__descriptor");
}

void pg_query__convert_rowtype_expr__pack_cold_1()
{
  __assert_rtn("pg_query__convert_rowtype_expr__pack", "pg_query.pb-c.c", 1646, "message->base.descriptor == &pg_query__convert_rowtype_expr__descriptor");
}

void pg_query__convert_rowtype_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__convert_rowtype_expr__pack_to_buffer", "pg_query.pb-c.c", 1653, "message->base.descriptor == &pg_query__convert_rowtype_expr__descriptor");
}

void pg_query__convert_rowtype_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__convert_rowtype_expr__free_unpacked", "pg_query.pb-c.c", 1672, "message->base.descriptor == &pg_query__convert_rowtype_expr__descriptor");
}

void pg_query__collate_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__collate_expr__get_packed_size", "pg_query.pb-c.c", 1684, "message->base.descriptor == &pg_query__collate_expr__descriptor");
}

void pg_query__collate_expr__pack_cold_1()
{
  __assert_rtn("pg_query__collate_expr__pack", "pg_query.pb-c.c", 1691, "message->base.descriptor == &pg_query__collate_expr__descriptor");
}

void pg_query__collate_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__collate_expr__pack_to_buffer", "pg_query.pb-c.c", 1698, "message->base.descriptor == &pg_query__collate_expr__descriptor");
}

void pg_query__collate_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__collate_expr__free_unpacked", "pg_query.pb-c.c", 1717, "message->base.descriptor == &pg_query__collate_expr__descriptor");
}

void pg_query__case_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__case_expr__get_packed_size", "pg_query.pb-c.c", 1729, "message->base.descriptor == &pg_query__case_expr__descriptor");
}

void pg_query__case_expr__pack_cold_1()
{
  __assert_rtn("pg_query__case_expr__pack", "pg_query.pb-c.c", 1736, "message->base.descriptor == &pg_query__case_expr__descriptor");
}

void pg_query__case_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__case_expr__pack_to_buffer", "pg_query.pb-c.c", 1743, "message->base.descriptor == &pg_query__case_expr__descriptor");
}

void pg_query__case_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__case_expr__free_unpacked", "pg_query.pb-c.c", 1762, "message->base.descriptor == &pg_query__case_expr__descriptor");
}

void pg_query__case_when__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__case_when__get_packed_size", "pg_query.pb-c.c", 1774, "message->base.descriptor == &pg_query__case_when__descriptor");
}

void pg_query__case_when__pack_cold_1()
{
  __assert_rtn("pg_query__case_when__pack", "pg_query.pb-c.c", 1781, "message->base.descriptor == &pg_query__case_when__descriptor");
}

void pg_query__case_when__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__case_when__pack_to_buffer", "pg_query.pb-c.c", 1788, "message->base.descriptor == &pg_query__case_when__descriptor");
}

void pg_query__case_when__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__case_when__free_unpacked", "pg_query.pb-c.c", 1807, "message->base.descriptor == &pg_query__case_when__descriptor");
}

void pg_query__case_test_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__case_test_expr__get_packed_size", "pg_query.pb-c.c", 1819, "message->base.descriptor == &pg_query__case_test_expr__descriptor");
}

void pg_query__case_test_expr__pack_cold_1()
{
  __assert_rtn("pg_query__case_test_expr__pack", "pg_query.pb-c.c", 1826, "message->base.descriptor == &pg_query__case_test_expr__descriptor");
}

void pg_query__case_test_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__case_test_expr__pack_to_buffer", "pg_query.pb-c.c", 1833, "message->base.descriptor == &pg_query__case_test_expr__descriptor");
}

void pg_query__case_test_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__case_test_expr__free_unpacked", "pg_query.pb-c.c", 1852, "message->base.descriptor == &pg_query__case_test_expr__descriptor");
}

void pg_query__array_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__array_expr__get_packed_size", "pg_query.pb-c.c", 1864, "message->base.descriptor == &pg_query__array_expr__descriptor");
}

void pg_query__array_expr__pack_cold_1()
{
  __assert_rtn("pg_query__array_expr__pack", "pg_query.pb-c.c", 1871, "message->base.descriptor == &pg_query__array_expr__descriptor");
}

void pg_query__array_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__array_expr__pack_to_buffer", "pg_query.pb-c.c", 1878, "message->base.descriptor == &pg_query__array_expr__descriptor");
}

void pg_query__array_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__array_expr__free_unpacked", "pg_query.pb-c.c", 1897, "message->base.descriptor == &pg_query__array_expr__descriptor");
}

void pg_query__row_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__row_expr__get_packed_size", "pg_query.pb-c.c", 1909, "message->base.descriptor == &pg_query__row_expr__descriptor");
}

void pg_query__row_expr__pack_cold_1()
{
  __assert_rtn("pg_query__row_expr__pack", "pg_query.pb-c.c", 1916, "message->base.descriptor == &pg_query__row_expr__descriptor");
}

void pg_query__row_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__row_expr__pack_to_buffer", "pg_query.pb-c.c", 1923, "message->base.descriptor == &pg_query__row_expr__descriptor");
}

void pg_query__row_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__row_expr__free_unpacked", "pg_query.pb-c.c", 1942, "message->base.descriptor == &pg_query__row_expr__descriptor");
}

void pg_query__row_compare_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__row_compare_expr__get_packed_size", "pg_query.pb-c.c", 1954, "message->base.descriptor == &pg_query__row_compare_expr__descriptor");
}

void pg_query__row_compare_expr__pack_cold_1()
{
  __assert_rtn("pg_query__row_compare_expr__pack", "pg_query.pb-c.c", 1961, "message->base.descriptor == &pg_query__row_compare_expr__descriptor");
}

void pg_query__row_compare_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__row_compare_expr__pack_to_buffer", "pg_query.pb-c.c", 1968, "message->base.descriptor == &pg_query__row_compare_expr__descriptor");
}

void pg_query__row_compare_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__row_compare_expr__free_unpacked", "pg_query.pb-c.c", 1987, "message->base.descriptor == &pg_query__row_compare_expr__descriptor");
}

void pg_query__coalesce_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__coalesce_expr__get_packed_size", "pg_query.pb-c.c", 1999, "message->base.descriptor == &pg_query__coalesce_expr__descriptor");
}

void pg_query__coalesce_expr__pack_cold_1()
{
  __assert_rtn("pg_query__coalesce_expr__pack", "pg_query.pb-c.c", 2006, "message->base.descriptor == &pg_query__coalesce_expr__descriptor");
}

void pg_query__coalesce_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__coalesce_expr__pack_to_buffer", "pg_query.pb-c.c", 2013, "message->base.descriptor == &pg_query__coalesce_expr__descriptor");
}

void pg_query__coalesce_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__coalesce_expr__free_unpacked", "pg_query.pb-c.c", 2032, "message->base.descriptor == &pg_query__coalesce_expr__descriptor");
}

void pg_query__min_max_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__min_max_expr__get_packed_size", "pg_query.pb-c.c", 2044, "message->base.descriptor == &pg_query__min_max_expr__descriptor");
}

void pg_query__min_max_expr__pack_cold_1()
{
  __assert_rtn("pg_query__min_max_expr__pack", "pg_query.pb-c.c", 2051, "message->base.descriptor == &pg_query__min_max_expr__descriptor");
}

void pg_query__min_max_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__min_max_expr__pack_to_buffer", "pg_query.pb-c.c", 2058, "message->base.descriptor == &pg_query__min_max_expr__descriptor");
}

void pg_query__min_max_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__min_max_expr__free_unpacked", "pg_query.pb-c.c", 2077, "message->base.descriptor == &pg_query__min_max_expr__descriptor");
}

void pg_query__sqlvalue_function__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__sqlvalue_function__get_packed_size", "pg_query.pb-c.c", 2089, "message->base.descriptor == &pg_query__sqlvalue_function__descriptor");
}

void pg_query__sqlvalue_function__pack_cold_1()
{
  __assert_rtn("pg_query__sqlvalue_function__pack", "pg_query.pb-c.c", 2096, "message->base.descriptor == &pg_query__sqlvalue_function__descriptor");
}

void pg_query__sqlvalue_function__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__sqlvalue_function__pack_to_buffer", "pg_query.pb-c.c", 2103, "message->base.descriptor == &pg_query__sqlvalue_function__descriptor");
}

void pg_query__sqlvalue_function__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__sqlvalue_function__free_unpacked", "pg_query.pb-c.c", 2122, "message->base.descriptor == &pg_query__sqlvalue_function__descriptor");
}

void pg_query__xml_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__xml_expr__get_packed_size", "pg_query.pb-c.c", 2134, "message->base.descriptor == &pg_query__xml_expr__descriptor");
}

void pg_query__xml_expr__pack_cold_1()
{
  __assert_rtn("pg_query__xml_expr__pack", "pg_query.pb-c.c", 2141, "message->base.descriptor == &pg_query__xml_expr__descriptor");
}

void pg_query__xml_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__xml_expr__pack_to_buffer", "pg_query.pb-c.c", 2148, "message->base.descriptor == &pg_query__xml_expr__descriptor");
}

void pg_query__xml_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__xml_expr__free_unpacked", "pg_query.pb-c.c", 2167, "message->base.descriptor == &pg_query__xml_expr__descriptor");
}

void pg_query__null_test__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__null_test__get_packed_size", "pg_query.pb-c.c", 2179, "message->base.descriptor == &pg_query__null_test__descriptor");
}

void pg_query__null_test__pack_cold_1()
{
  __assert_rtn("pg_query__null_test__pack", "pg_query.pb-c.c", 2186, "message->base.descriptor == &pg_query__null_test__descriptor");
}

void pg_query__null_test__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__null_test__pack_to_buffer", "pg_query.pb-c.c", 2193, "message->base.descriptor == &pg_query__null_test__descriptor");
}

void pg_query__null_test__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__null_test__free_unpacked", "pg_query.pb-c.c", 2212, "message->base.descriptor == &pg_query__null_test__descriptor");
}

void pg_query__BOOLean_test__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__BOOLean_test__get_packed_size", "pg_query.pb-c.c", 2224, "message->base.descriptor == &pg_query__BOOLean_test__descriptor");
}

void pg_query__BOOLean_test__pack_cold_1()
{
  __assert_rtn("pg_query__BOOLean_test__pack", "pg_query.pb-c.c", 2231, "message->base.descriptor == &pg_query__BOOLean_test__descriptor");
}

void pg_query__BOOLean_test__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__BOOLean_test__pack_to_buffer", "pg_query.pb-c.c", 2238, "message->base.descriptor == &pg_query__BOOLean_test__descriptor");
}

void pg_query__BOOLean_test__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__BOOLean_test__free_unpacked", "pg_query.pb-c.c", 2257, "message->base.descriptor == &pg_query__BOOLean_test__descriptor");
}

void pg_query__coerce_to_domain__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__coerce_to_domain__get_packed_size", "pg_query.pb-c.c", 2269, "message->base.descriptor == &pg_query__coerce_to_domain__descriptor");
}

void pg_query__coerce_to_domain__pack_cold_1()
{
  __assert_rtn("pg_query__coerce_to_domain__pack", "pg_query.pb-c.c", 2276, "message->base.descriptor == &pg_query__coerce_to_domain__descriptor");
}

void pg_query__coerce_to_domain__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__coerce_to_domain__pack_to_buffer", "pg_query.pb-c.c", 2283, "message->base.descriptor == &pg_query__coerce_to_domain__descriptor");
}

void pg_query__coerce_to_domain__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__coerce_to_domain__free_unpacked", "pg_query.pb-c.c", 2302, "message->base.descriptor == &pg_query__coerce_to_domain__descriptor");
}

void pg_query__coerce_to_domain_value__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__coerce_to_domain_value__get_packed_size", "pg_query.pb-c.c", 2314, "message->base.descriptor == &pg_query__coerce_to_domain_value__descriptor");
}

void pg_query__coerce_to_domain_value__pack_cold_1()
{
  __assert_rtn("pg_query__coerce_to_domain_value__pack", "pg_query.pb-c.c", 2321, "message->base.descriptor == &pg_query__coerce_to_domain_value__descriptor");
}

void pg_query__coerce_to_domain_value__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__coerce_to_domain_value__pack_to_buffer", "pg_query.pb-c.c", 2328, "message->base.descriptor == &pg_query__coerce_to_domain_value__descriptor");
}

void pg_query__coerce_to_domain_value__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__coerce_to_domain_value__free_unpacked", "pg_query.pb-c.c", 2347, "message->base.descriptor == &pg_query__coerce_to_domain_value__descriptor");
}

void pg_query__set_to_default__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__set_to_default__get_packed_size", "pg_query.pb-c.c", 2359, "message->base.descriptor == &pg_query__set_to_default__descriptor");
}

void pg_query__set_to_default__pack_cold_1()
{
  __assert_rtn("pg_query__set_to_default__pack", "pg_query.pb-c.c", 2366, "message->base.descriptor == &pg_query__set_to_default__descriptor");
}

void pg_query__set_to_default__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__set_to_default__pack_to_buffer", "pg_query.pb-c.c", 2373, "message->base.descriptor == &pg_query__set_to_default__descriptor");
}

void pg_query__set_to_default__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__set_to_default__free_unpacked", "pg_query.pb-c.c", 2392, "message->base.descriptor == &pg_query__set_to_default__descriptor");
}

void pg_query__current_of_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__current_of_expr__get_packed_size", "pg_query.pb-c.c", 2404, "message->base.descriptor == &pg_query__current_of_expr__descriptor");
}

void pg_query__current_of_expr__pack_cold_1()
{
  __assert_rtn("pg_query__current_of_expr__pack", "pg_query.pb-c.c", 2411, "message->base.descriptor == &pg_query__current_of_expr__descriptor");
}

void pg_query__current_of_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__current_of_expr__pack_to_buffer", "pg_query.pb-c.c", 2418, "message->base.descriptor == &pg_query__current_of_expr__descriptor");
}

void pg_query__current_of_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__current_of_expr__free_unpacked", "pg_query.pb-c.c", 2437, "message->base.descriptor == &pg_query__current_of_expr__descriptor");
}

void pg_query__next_value_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__next_value_expr__get_packed_size", "pg_query.pb-c.c", 2449, "message->base.descriptor == &pg_query__next_value_expr__descriptor");
}

void pg_query__next_value_expr__pack_cold_1()
{
  __assert_rtn("pg_query__next_value_expr__pack", "pg_query.pb-c.c", 2456, "message->base.descriptor == &pg_query__next_value_expr__descriptor");
}

void pg_query__next_value_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__next_value_expr__pack_to_buffer", "pg_query.pb-c.c", 2463, "message->base.descriptor == &pg_query__next_value_expr__descriptor");
}

void pg_query__next_value_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__next_value_expr__free_unpacked", "pg_query.pb-c.c", 2482, "message->base.descriptor == &pg_query__next_value_expr__descriptor");
}

void pg_query__inference_elem__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__inference_elem__get_packed_size", "pg_query.pb-c.c", 2494, "message->base.descriptor == &pg_query__inference_elem__descriptor");
}

void pg_query__inference_elem__pack_cold_1()
{
  __assert_rtn("pg_query__inference_elem__pack", "pg_query.pb-c.c", 2501, "message->base.descriptor == &pg_query__inference_elem__descriptor");
}

void pg_query__inference_elem__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__inference_elem__pack_to_buffer", "pg_query.pb-c.c", 2508, "message->base.descriptor == &pg_query__inference_elem__descriptor");
}

void pg_query__inference_elem__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__inference_elem__free_unpacked", "pg_query.pb-c.c", 2527, "message->base.descriptor == &pg_query__inference_elem__descriptor");
}

void pg_query__target_entry__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__target_entry__get_packed_size", "pg_query.pb-c.c", 2539, "message->base.descriptor == &pg_query__target_entry__descriptor");
}

void pg_query__target_entry__pack_cold_1()
{
  __assert_rtn("pg_query__target_entry__pack", "pg_query.pb-c.c", 2546, "message->base.descriptor == &pg_query__target_entry__descriptor");
}

void pg_query__target_entry__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__target_entry__pack_to_buffer", "pg_query.pb-c.c", 2553, "message->base.descriptor == &pg_query__target_entry__descriptor");
}

void pg_query__target_entry__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__target_entry__free_unpacked", "pg_query.pb-c.c", 2572, "message->base.descriptor == &pg_query__target_entry__descriptor");
}

void pg_query__range_tbl_ref__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__range_tbl_ref__get_packed_size", "pg_query.pb-c.c", 2584, "message->base.descriptor == &pg_query__range_tbl_ref__descriptor");
}

void pg_query__range_tbl_ref__pack_cold_1()
{
  __assert_rtn("pg_query__range_tbl_ref__pack", "pg_query.pb-c.c", 2591, "message->base.descriptor == &pg_query__range_tbl_ref__descriptor");
}

void pg_query__range_tbl_ref__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__range_tbl_ref__pack_to_buffer", "pg_query.pb-c.c", 2598, "message->base.descriptor == &pg_query__range_tbl_ref__descriptor");
}

void pg_query__range_tbl_ref__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__range_tbl_ref__free_unpacked", "pg_query.pb-c.c", 2617, "message->base.descriptor == &pg_query__range_tbl_ref__descriptor");
}

void pg_query__join_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__join_expr__get_packed_size", "pg_query.pb-c.c", 2629, "message->base.descriptor == &pg_query__join_expr__descriptor");
}

void pg_query__join_expr__pack_cold_1()
{
  __assert_rtn("pg_query__join_expr__pack", "pg_query.pb-c.c", 2636, "message->base.descriptor == &pg_query__join_expr__descriptor");
}

void pg_query__join_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__join_expr__pack_to_buffer", "pg_query.pb-c.c", 2643, "message->base.descriptor == &pg_query__join_expr__descriptor");
}

void pg_query__join_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__join_expr__free_unpacked", "pg_query.pb-c.c", 2662, "message->base.descriptor == &pg_query__join_expr__descriptor");
}

void pg_query__from_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__from_expr__get_packed_size", "pg_query.pb-c.c", 2674, "message->base.descriptor == &pg_query__from_expr__descriptor");
}

void pg_query__from_expr__pack_cold_1()
{
  __assert_rtn("pg_query__from_expr__pack", "pg_query.pb-c.c", 2681, "message->base.descriptor == &pg_query__from_expr__descriptor");
}

void pg_query__from_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__from_expr__pack_to_buffer", "pg_query.pb-c.c", 2688, "message->base.descriptor == &pg_query__from_expr__descriptor");
}

void pg_query__from_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__from_expr__free_unpacked", "pg_query.pb-c.c", 2707, "message->base.descriptor == &pg_query__from_expr__descriptor");
}

void pg_query__on_conflict_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__on_conflict_expr__get_packed_size", "pg_query.pb-c.c", 2719, "message->base.descriptor == &pg_query__on_conflict_expr__descriptor");
}

void pg_query__on_conflict_expr__pack_cold_1()
{
  __assert_rtn("pg_query__on_conflict_expr__pack", "pg_query.pb-c.c", 2726, "message->base.descriptor == &pg_query__on_conflict_expr__descriptor");
}

void pg_query__on_conflict_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__on_conflict_expr__pack_to_buffer", "pg_query.pb-c.c", 2733, "message->base.descriptor == &pg_query__on_conflict_expr__descriptor");
}

void pg_query__on_conflict_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__on_conflict_expr__free_unpacked", "pg_query.pb-c.c", 2752, "message->base.descriptor == &pg_query__on_conflict_expr__descriptor");
}

void pg_query__into_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__into_clause__get_packed_size", "pg_query.pb-c.c", 2764, "message->base.descriptor == &pg_query__into_clause__descriptor");
}

void pg_query__into_clause__pack_cold_1()
{
  __assert_rtn("pg_query__into_clause__pack", "pg_query.pb-c.c", 2771, "message->base.descriptor == &pg_query__into_clause__descriptor");
}

void pg_query__into_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__into_clause__pack_to_buffer", "pg_query.pb-c.c", 2778, "message->base.descriptor == &pg_query__into_clause__descriptor");
}

void pg_query__into_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__into_clause__free_unpacked", "pg_query.pb-c.c", 2797, "message->base.descriptor == &pg_query__into_clause__descriptor");
}

void pg_query__raw_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__raw_stmt__get_packed_size", "pg_query.pb-c.c", 2809, "message->base.descriptor == &pg_query__raw_stmt__descriptor");
}

void pg_query__raw_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__raw_stmt__pack", "pg_query.pb-c.c", 2816, "message->base.descriptor == &pg_query__raw_stmt__descriptor");
}

void pg_query__raw_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__raw_stmt__pack_to_buffer", "pg_query.pb-c.c", 2823, "message->base.descriptor == &pg_query__raw_stmt__descriptor");
}

void pg_query__raw_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__raw_stmt__free_unpacked", "pg_query.pb-c.c", 2842, "message->base.descriptor == &pg_query__raw_stmt__descriptor");
}

void pg_query__query__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__query__get_packed_size", "pg_query.pb-c.c", 2854, "message->base.descriptor == &pg_query__query__descriptor");
}

void pg_query__query__pack_cold_1()
{
  __assert_rtn("pg_query__query__pack", "pg_query.pb-c.c", 2861, "message->base.descriptor == &pg_query__query__descriptor");
}

void pg_query__query__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__query__pack_to_buffer", "pg_query.pb-c.c", 2868, "message->base.descriptor == &pg_query__query__descriptor");
}

void pg_query__query__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__query__free_unpacked", "pg_query.pb-c.c", 2887, "message->base.descriptor == &pg_query__query__descriptor");
}

void pg_query__insert_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__insert_stmt__get_packed_size", "pg_query.pb-c.c", 2899, "message->base.descriptor == &pg_query__insert_stmt__descriptor");
}

void pg_query__insert_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__insert_stmt__pack", "pg_query.pb-c.c", 2906, "message->base.descriptor == &pg_query__insert_stmt__descriptor");
}

void pg_query__insert_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__insert_stmt__pack_to_buffer", "pg_query.pb-c.c", 2913, "message->base.descriptor == &pg_query__insert_stmt__descriptor");
}

void pg_query__insert_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__insert_stmt__free_unpacked", "pg_query.pb-c.c", 2932, "message->base.descriptor == &pg_query__insert_stmt__descriptor");
}

void pg_query__delete_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__delete_stmt__get_packed_size", "pg_query.pb-c.c", 2944, "message->base.descriptor == &pg_query__delete_stmt__descriptor");
}

void pg_query__delete_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__delete_stmt__pack", "pg_query.pb-c.c", 2951, "message->base.descriptor == &pg_query__delete_stmt__descriptor");
}

void pg_query__delete_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__delete_stmt__pack_to_buffer", "pg_query.pb-c.c", 2958, "message->base.descriptor == &pg_query__delete_stmt__descriptor");
}

void pg_query__delete_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__delete_stmt__free_unpacked", "pg_query.pb-c.c", 2977, "message->base.descriptor == &pg_query__delete_stmt__descriptor");
}

void pg_query__update_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__update_stmt__get_packed_size", "pg_query.pb-c.c", 2989, "message->base.descriptor == &pg_query__update_stmt__descriptor");
}

void pg_query__update_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__update_stmt__pack", "pg_query.pb-c.c", 2996, "message->base.descriptor == &pg_query__update_stmt__descriptor");
}

void pg_query__update_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__update_stmt__pack_to_buffer", "pg_query.pb-c.c", 3003, "message->base.descriptor == &pg_query__update_stmt__descriptor");
}

void pg_query__update_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__update_stmt__free_unpacked", "pg_query.pb-c.c", 3022, "message->base.descriptor == &pg_query__update_stmt__descriptor");
}

void pg_query__select_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__select_stmt__get_packed_size", "pg_query.pb-c.c", 3034, "message->base.descriptor == &pg_query__select_stmt__descriptor");
}

void pg_query__select_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__select_stmt__pack", "pg_query.pb-c.c", 3041, "message->base.descriptor == &pg_query__select_stmt__descriptor");
}

void pg_query__select_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__select_stmt__pack_to_buffer", "pg_query.pb-c.c", 3048, "message->base.descriptor == &pg_query__select_stmt__descriptor");
}

void pg_query__select_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__select_stmt__free_unpacked", "pg_query.pb-c.c", 3067, "message->base.descriptor == &pg_query__select_stmt__descriptor");
}

void pg_query__alter_table_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_table_stmt__get_packed_size", "pg_query.pb-c.c", 3079, "message->base.descriptor == &pg_query__alter_table_stmt__descriptor");
}

void pg_query__alter_table_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_table_stmt__pack", "pg_query.pb-c.c", 3086, "message->base.descriptor == &pg_query__alter_table_stmt__descriptor");
}

void pg_query__alter_table_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_table_stmt__pack_to_buffer", "pg_query.pb-c.c", 3093, "message->base.descriptor == &pg_query__alter_table_stmt__descriptor");
}

void pg_query__alter_table_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_table_stmt__free_unpacked", "pg_query.pb-c.c", 3112, "message->base.descriptor == &pg_query__alter_table_stmt__descriptor");
}

void pg_query__alter_table_cmd__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_table_cmd__get_packed_size", "pg_query.pb-c.c", 3124, "message->base.descriptor == &pg_query__alter_table_cmd__descriptor");
}

void pg_query__alter_table_cmd__pack_cold_1()
{
  __assert_rtn("pg_query__alter_table_cmd__pack", "pg_query.pb-c.c", 3131, "message->base.descriptor == &pg_query__alter_table_cmd__descriptor");
}

void pg_query__alter_table_cmd__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_table_cmd__pack_to_buffer", "pg_query.pb-c.c", 3138, "message->base.descriptor == &pg_query__alter_table_cmd__descriptor");
}

void pg_query__alter_table_cmd__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_table_cmd__free_unpacked", "pg_query.pb-c.c", 3157, "message->base.descriptor == &pg_query__alter_table_cmd__descriptor");
}

void pg_query__alter_domain_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_domain_stmt__get_packed_size", "pg_query.pb-c.c", 3169, "message->base.descriptor == &pg_query__alter_domain_stmt__descriptor");
}

void pg_query__alter_domain_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_domain_stmt__pack", "pg_query.pb-c.c", 3176, "message->base.descriptor == &pg_query__alter_domain_stmt__descriptor");
}

void pg_query__alter_domain_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_domain_stmt__pack_to_buffer", "pg_query.pb-c.c", 3183, "message->base.descriptor == &pg_query__alter_domain_stmt__descriptor");
}

void pg_query__alter_domain_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_domain_stmt__free_unpacked", "pg_query.pb-c.c", 3202, "message->base.descriptor == &pg_query__alter_domain_stmt__descriptor");
}

void pg_query__set_operation_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__set_operation_stmt__get_packed_size", "pg_query.pb-c.c", 3214, "message->base.descriptor == &pg_query__set_operation_stmt__descriptor");
}

void pg_query__set_operation_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__set_operation_stmt__pack", "pg_query.pb-c.c", 3221, "message->base.descriptor == &pg_query__set_operation_stmt__descriptor");
}

void pg_query__set_operation_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__set_operation_stmt__pack_to_buffer", "pg_query.pb-c.c", 3228, "message->base.descriptor == &pg_query__set_operation_stmt__descriptor");
}

void pg_query__set_operation_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__set_operation_stmt__free_unpacked", "pg_query.pb-c.c", 3247, "message->base.descriptor == &pg_query__set_operation_stmt__descriptor");
}

void pg_query__grant_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__grant_stmt__get_packed_size", "pg_query.pb-c.c", 3259, "message->base.descriptor == &pg_query__grant_stmt__descriptor");
}

void pg_query__grant_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__grant_stmt__pack", "pg_query.pb-c.c", 3266, "message->base.descriptor == &pg_query__grant_stmt__descriptor");
}

void pg_query__grant_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__grant_stmt__pack_to_buffer", "pg_query.pb-c.c", 3273, "message->base.descriptor == &pg_query__grant_stmt__descriptor");
}

void pg_query__grant_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__grant_stmt__free_unpacked", "pg_query.pb-c.c", 3292, "message->base.descriptor == &pg_query__grant_stmt__descriptor");
}

void pg_query__grant_role_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__grant_role_stmt__get_packed_size", "pg_query.pb-c.c", 3304, "message->base.descriptor == &pg_query__grant_role_stmt__descriptor");
}

void pg_query__grant_role_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__grant_role_stmt__pack", "pg_query.pb-c.c", 3311, "message->base.descriptor == &pg_query__grant_role_stmt__descriptor");
}

void pg_query__grant_role_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__grant_role_stmt__pack_to_buffer", "pg_query.pb-c.c", 3318, "message->base.descriptor == &pg_query__grant_role_stmt__descriptor");
}

void pg_query__grant_role_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__grant_role_stmt__free_unpacked", "pg_query.pb-c.c", 3337, "message->base.descriptor == &pg_query__grant_role_stmt__descriptor");
}

void pg_query__alter_default_privileges_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_default_privileges_stmt__get_packed_size", "pg_query.pb-c.c", 3349, "message->base.descriptor == &pg_query__alter_default_privileges_stmt__descriptor");
}

void pg_query__alter_default_privileges_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_default_privileges_stmt__pack", "pg_query.pb-c.c", 3356, "message->base.descriptor == &pg_query__alter_default_privileges_stmt__descriptor");
}

void pg_query__alter_default_privileges_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_default_privileges_stmt__pack_to_buffer", "pg_query.pb-c.c", 3363, "message->base.descriptor == &pg_query__alter_default_privileges_stmt__descriptor");
}

void pg_query__alter_default_privileges_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_default_privileges_stmt__free_unpacked", "pg_query.pb-c.c", 3382, "message->base.descriptor == &pg_query__alter_default_privileges_stmt__descriptor");
}

void pg_query__close_portal_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__close_portal_stmt__get_packed_size", "pg_query.pb-c.c", 3394, "message->base.descriptor == &pg_query__close_portal_stmt__descriptor");
}

void pg_query__close_portal_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__close_portal_stmt__pack", "pg_query.pb-c.c", 3401, "message->base.descriptor == &pg_query__close_portal_stmt__descriptor");
}

void pg_query__close_portal_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__close_portal_stmt__pack_to_buffer", "pg_query.pb-c.c", 3408, "message->base.descriptor == &pg_query__close_portal_stmt__descriptor");
}

void pg_query__close_portal_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__close_portal_stmt__free_unpacked", "pg_query.pb-c.c", 3427, "message->base.descriptor == &pg_query__close_portal_stmt__descriptor");
}

void pg_query__cluster_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__cluster_stmt__get_packed_size", "pg_query.pb-c.c", 3439, "message->base.descriptor == &pg_query__cluster_stmt__descriptor");
}

void pg_query__cluster_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__cluster_stmt__pack", "pg_query.pb-c.c", 3446, "message->base.descriptor == &pg_query__cluster_stmt__descriptor");
}

void pg_query__cluster_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__cluster_stmt__pack_to_buffer", "pg_query.pb-c.c", 3453, "message->base.descriptor == &pg_query__cluster_stmt__descriptor");
}

void pg_query__cluster_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__cluster_stmt__free_unpacked", "pg_query.pb-c.c", 3472, "message->base.descriptor == &pg_query__cluster_stmt__descriptor");
}

void pg_query__copy_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__copy_stmt__get_packed_size", "pg_query.pb-c.c", 3484, "message->base.descriptor == &pg_query__copy_stmt__descriptor");
}

void pg_query__copy_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__copy_stmt__pack", "pg_query.pb-c.c", 3491, "message->base.descriptor == &pg_query__copy_stmt__descriptor");
}

void pg_query__copy_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__copy_stmt__pack_to_buffer", "pg_query.pb-c.c", 3498, "message->base.descriptor == &pg_query__copy_stmt__descriptor");
}

void pg_query__copy_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__copy_stmt__free_unpacked", "pg_query.pb-c.c", 3517, "message->base.descriptor == &pg_query__copy_stmt__descriptor");
}

void pg_query__create_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_stmt__get_packed_size", "pg_query.pb-c.c", 3529, "message->base.descriptor == &pg_query__create_stmt__descriptor");
}

void pg_query__create_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_stmt__pack", "pg_query.pb-c.c", 3536, "message->base.descriptor == &pg_query__create_stmt__descriptor");
}

void pg_query__create_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_stmt__pack_to_buffer", "pg_query.pb-c.c", 3543, "message->base.descriptor == &pg_query__create_stmt__descriptor");
}

void pg_query__create_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_stmt__free_unpacked", "pg_query.pb-c.c", 3562, "message->base.descriptor == &pg_query__create_stmt__descriptor");
}

void pg_query__define_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__define_stmt__get_packed_size", "pg_query.pb-c.c", 3574, "message->base.descriptor == &pg_query__define_stmt__descriptor");
}

void pg_query__define_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__define_stmt__pack", "pg_query.pb-c.c", 3581, "message->base.descriptor == &pg_query__define_stmt__descriptor");
}

void pg_query__define_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__define_stmt__pack_to_buffer", "pg_query.pb-c.c", 3588, "message->base.descriptor == &pg_query__define_stmt__descriptor");
}

void pg_query__define_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__define_stmt__free_unpacked", "pg_query.pb-c.c", 3607, "message->base.descriptor == &pg_query__define_stmt__descriptor");
}

void pg_query__drop_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__drop_stmt__get_packed_size", "pg_query.pb-c.c", 3619, "message->base.descriptor == &pg_query__drop_stmt__descriptor");
}

void pg_query__drop_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__drop_stmt__pack", "pg_query.pb-c.c", 3626, "message->base.descriptor == &pg_query__drop_stmt__descriptor");
}

void pg_query__drop_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__drop_stmt__pack_to_buffer", "pg_query.pb-c.c", 3633, "message->base.descriptor == &pg_query__drop_stmt__descriptor");
}

void pg_query__drop_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__drop_stmt__free_unpacked", "pg_query.pb-c.c", 3652, "message->base.descriptor == &pg_query__drop_stmt__descriptor");
}

void pg_query__truncate_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__truncate_stmt__get_packed_size", "pg_query.pb-c.c", 3664, "message->base.descriptor == &pg_query__truncate_stmt__descriptor");
}

void pg_query__truncate_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__truncate_stmt__pack", "pg_query.pb-c.c", 3671, "message->base.descriptor == &pg_query__truncate_stmt__descriptor");
}

void pg_query__truncate_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__truncate_stmt__pack_to_buffer", "pg_query.pb-c.c", 3678, "message->base.descriptor == &pg_query__truncate_stmt__descriptor");
}

void pg_query__truncate_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__truncate_stmt__free_unpacked", "pg_query.pb-c.c", 3697, "message->base.descriptor == &pg_query__truncate_stmt__descriptor");
}

void pg_query__comment_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__comment_stmt__get_packed_size", "pg_query.pb-c.c", 3709, "message->base.descriptor == &pg_query__comment_stmt__descriptor");
}

void pg_query__comment_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__comment_stmt__pack", "pg_query.pb-c.c", 3716, "message->base.descriptor == &pg_query__comment_stmt__descriptor");
}

void pg_query__comment_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__comment_stmt__pack_to_buffer", "pg_query.pb-c.c", 3723, "message->base.descriptor == &pg_query__comment_stmt__descriptor");
}

void pg_query__comment_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__comment_stmt__free_unpacked", "pg_query.pb-c.c", 3742, "message->base.descriptor == &pg_query__comment_stmt__descriptor");
}

void pg_query__fetch_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__fetch_stmt__get_packed_size", "pg_query.pb-c.c", 3754, "message->base.descriptor == &pg_query__fetch_stmt__descriptor");
}

void pg_query__fetch_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__fetch_stmt__pack", "pg_query.pb-c.c", 3761, "message->base.descriptor == &pg_query__fetch_stmt__descriptor");
}

void pg_query__fetch_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__fetch_stmt__pack_to_buffer", "pg_query.pb-c.c", 3768, "message->base.descriptor == &pg_query__fetch_stmt__descriptor");
}

void pg_query__fetch_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__fetch_stmt__free_unpacked", "pg_query.pb-c.c", 3787, "message->base.descriptor == &pg_query__fetch_stmt__descriptor");
}

void pg_query__index_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__index_stmt__get_packed_size", "pg_query.pb-c.c", 3799, "message->base.descriptor == &pg_query__index_stmt__descriptor");
}

void pg_query__index_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__index_stmt__pack", "pg_query.pb-c.c", 3806, "message->base.descriptor == &pg_query__index_stmt__descriptor");
}

void pg_query__index_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__index_stmt__pack_to_buffer", "pg_query.pb-c.c", 3813, "message->base.descriptor == &pg_query__index_stmt__descriptor");
}

void pg_query__index_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__index_stmt__free_unpacked", "pg_query.pb-c.c", 3832, "message->base.descriptor == &pg_query__index_stmt__descriptor");
}

void pg_query__create_function_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_function_stmt__get_packed_size", "pg_query.pb-c.c", 3844, "message->base.descriptor == &pg_query__create_function_stmt__descriptor");
}

void pg_query__create_function_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_function_stmt__pack", "pg_query.pb-c.c", 3851, "message->base.descriptor == &pg_query__create_function_stmt__descriptor");
}

void pg_query__create_function_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_function_stmt__pack_to_buffer", "pg_query.pb-c.c", 3858, "message->base.descriptor == &pg_query__create_function_stmt__descriptor");
}

void pg_query__create_function_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_function_stmt__free_unpacked", "pg_query.pb-c.c", 3877, "message->base.descriptor == &pg_query__create_function_stmt__descriptor");
}

void pg_query__alter_function_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_function_stmt__get_packed_size", "pg_query.pb-c.c", 3889, "message->base.descriptor == &pg_query__alter_function_stmt__descriptor");
}

void pg_query__alter_function_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_function_stmt__pack", "pg_query.pb-c.c", 3896, "message->base.descriptor == &pg_query__alter_function_stmt__descriptor");
}

void pg_query__alter_function_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_function_stmt__pack_to_buffer", "pg_query.pb-c.c", 3903, "message->base.descriptor == &pg_query__alter_function_stmt__descriptor");
}

void pg_query__alter_function_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_function_stmt__free_unpacked", "pg_query.pb-c.c", 3922, "message->base.descriptor == &pg_query__alter_function_stmt__descriptor");
}

void pg_query__do_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__do_stmt__get_packed_size", "pg_query.pb-c.c", 3934, "message->base.descriptor == &pg_query__do_stmt__descriptor");
}

void pg_query__do_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__do_stmt__pack", "pg_query.pb-c.c", 3941, "message->base.descriptor == &pg_query__do_stmt__descriptor");
}

void pg_query__do_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__do_stmt__pack_to_buffer", "pg_query.pb-c.c", 3948, "message->base.descriptor == &pg_query__do_stmt__descriptor");
}

void pg_query__do_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__do_stmt__free_unpacked", "pg_query.pb-c.c", 3967, "message->base.descriptor == &pg_query__do_stmt__descriptor");
}

void pg_query__rename_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__rename_stmt__get_packed_size", "pg_query.pb-c.c", 3979, "message->base.descriptor == &pg_query__rename_stmt__descriptor");
}

void pg_query__rename_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__rename_stmt__pack", "pg_query.pb-c.c", 3986, "message->base.descriptor == &pg_query__rename_stmt__descriptor");
}

void pg_query__rename_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__rename_stmt__pack_to_buffer", "pg_query.pb-c.c", 3993, "message->base.descriptor == &pg_query__rename_stmt__descriptor");
}

void pg_query__rename_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__rename_stmt__free_unpacked", "pg_query.pb-c.c", 4012, "message->base.descriptor == &pg_query__rename_stmt__descriptor");
}

void pg_query__rule_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__rule_stmt__get_packed_size", "pg_query.pb-c.c", 4024, "message->base.descriptor == &pg_query__rule_stmt__descriptor");
}

void pg_query__rule_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__rule_stmt__pack", "pg_query.pb-c.c", 4031, "message->base.descriptor == &pg_query__rule_stmt__descriptor");
}

void pg_query__rule_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__rule_stmt__pack_to_buffer", "pg_query.pb-c.c", 4038, "message->base.descriptor == &pg_query__rule_stmt__descriptor");
}

void pg_query__rule_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__rule_stmt__free_unpacked", "pg_query.pb-c.c", 4057, "message->base.descriptor == &pg_query__rule_stmt__descriptor");
}

void pg_query__notify_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__notify_stmt__get_packed_size", "pg_query.pb-c.c", 4069, "message->base.descriptor == &pg_query__notify_stmt__descriptor");
}

void pg_query__notify_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__notify_stmt__pack", "pg_query.pb-c.c", 4076, "message->base.descriptor == &pg_query__notify_stmt__descriptor");
}

void pg_query__notify_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__notify_stmt__pack_to_buffer", "pg_query.pb-c.c", 4083, "message->base.descriptor == &pg_query__notify_stmt__descriptor");
}

void pg_query__notify_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__notify_stmt__free_unpacked", "pg_query.pb-c.c", 4102, "message->base.descriptor == &pg_query__notify_stmt__descriptor");
}

void pg_query__listen_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__listen_stmt__get_packed_size", "pg_query.pb-c.c", 4114, "message->base.descriptor == &pg_query__listen_stmt__descriptor");
}

void pg_query__listen_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__listen_stmt__pack", "pg_query.pb-c.c", 4121, "message->base.descriptor == &pg_query__listen_stmt__descriptor");
}

void pg_query__listen_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__listen_stmt__pack_to_buffer", "pg_query.pb-c.c", 4128, "message->base.descriptor == &pg_query__listen_stmt__descriptor");
}

void pg_query__listen_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__listen_stmt__free_unpacked", "pg_query.pb-c.c", 4147, "message->base.descriptor == &pg_query__listen_stmt__descriptor");
}

void pg_query__unlisten_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__unlisten_stmt__get_packed_size", "pg_query.pb-c.c", 4159, "message->base.descriptor == &pg_query__unlisten_stmt__descriptor");
}

void pg_query__unlisten_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__unlisten_stmt__pack", "pg_query.pb-c.c", 4166, "message->base.descriptor == &pg_query__unlisten_stmt__descriptor");
}

void pg_query__unlisten_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__unlisten_stmt__pack_to_buffer", "pg_query.pb-c.c", 4173, "message->base.descriptor == &pg_query__unlisten_stmt__descriptor");
}

void pg_query__unlisten_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__unlisten_stmt__free_unpacked", "pg_query.pb-c.c", 4192, "message->base.descriptor == &pg_query__unlisten_stmt__descriptor");
}

void pg_query__transaction_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__transaction_stmt__get_packed_size", "pg_query.pb-c.c", 4204, "message->base.descriptor == &pg_query__transaction_stmt__descriptor");
}

void pg_query__transaction_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__transaction_stmt__pack", "pg_query.pb-c.c", 4211, "message->base.descriptor == &pg_query__transaction_stmt__descriptor");
}

void pg_query__transaction_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__transaction_stmt__pack_to_buffer", "pg_query.pb-c.c", 4218, "message->base.descriptor == &pg_query__transaction_stmt__descriptor");
}

void pg_query__transaction_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__transaction_stmt__free_unpacked", "pg_query.pb-c.c", 4237, "message->base.descriptor == &pg_query__transaction_stmt__descriptor");
}

void pg_query__view_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__view_stmt__get_packed_size", "pg_query.pb-c.c", 4249, "message->base.descriptor == &pg_query__view_stmt__descriptor");
}

void pg_query__view_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__view_stmt__pack", "pg_query.pb-c.c", 4256, "message->base.descriptor == &pg_query__view_stmt__descriptor");
}

void pg_query__view_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__view_stmt__pack_to_buffer", "pg_query.pb-c.c", 4263, "message->base.descriptor == &pg_query__view_stmt__descriptor");
}

void pg_query__view_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__view_stmt__free_unpacked", "pg_query.pb-c.c", 4282, "message->base.descriptor == &pg_query__view_stmt__descriptor");
}

void pg_query__load_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__load_stmt__get_packed_size", "pg_query.pb-c.c", 4294, "message->base.descriptor == &pg_query__load_stmt__descriptor");
}

void pg_query__load_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__load_stmt__pack", "pg_query.pb-c.c", 4301, "message->base.descriptor == &pg_query__load_stmt__descriptor");
}

void pg_query__load_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__load_stmt__pack_to_buffer", "pg_query.pb-c.c", 4308, "message->base.descriptor == &pg_query__load_stmt__descriptor");
}

void pg_query__load_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__load_stmt__free_unpacked", "pg_query.pb-c.c", 4327, "message->base.descriptor == &pg_query__load_stmt__descriptor");
}

void pg_query__create_domain_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_domain_stmt__get_packed_size", "pg_query.pb-c.c", 4339, "message->base.descriptor == &pg_query__create_domain_stmt__descriptor");
}

void pg_query__create_domain_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_domain_stmt__pack", "pg_query.pb-c.c", 4346, "message->base.descriptor == &pg_query__create_domain_stmt__descriptor");
}

void pg_query__create_domain_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_domain_stmt__pack_to_buffer", "pg_query.pb-c.c", 4353, "message->base.descriptor == &pg_query__create_domain_stmt__descriptor");
}

void pg_query__create_domain_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_domain_stmt__free_unpacked", "pg_query.pb-c.c", 4372, "message->base.descriptor == &pg_query__create_domain_stmt__descriptor");
}

void pg_query__createdb_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__createdb_stmt__get_packed_size", "pg_query.pb-c.c", 4384, "message->base.descriptor == &pg_query__createdb_stmt__descriptor");
}

void pg_query__createdb_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__createdb_stmt__pack", "pg_query.pb-c.c", 4391, "message->base.descriptor == &pg_query__createdb_stmt__descriptor");
}

void pg_query__createdb_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__createdb_stmt__pack_to_buffer", "pg_query.pb-c.c", 4398, "message->base.descriptor == &pg_query__createdb_stmt__descriptor");
}

void pg_query__createdb_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__createdb_stmt__free_unpacked", "pg_query.pb-c.c", 4417, "message->base.descriptor == &pg_query__createdb_stmt__descriptor");
}

void pg_query__dropdb_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__dropdb_stmt__get_packed_size", "pg_query.pb-c.c", 4429, "message->base.descriptor == &pg_query__dropdb_stmt__descriptor");
}

void pg_query__dropdb_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__dropdb_stmt__pack", "pg_query.pb-c.c", 4436, "message->base.descriptor == &pg_query__dropdb_stmt__descriptor");
}

void pg_query__dropdb_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__dropdb_stmt__pack_to_buffer", "pg_query.pb-c.c", 4443, "message->base.descriptor == &pg_query__dropdb_stmt__descriptor");
}

void pg_query__dropdb_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__dropdb_stmt__free_unpacked", "pg_query.pb-c.c", 4462, "message->base.descriptor == &pg_query__dropdb_stmt__descriptor");
}

void pg_query__vacuum_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__vacuum_stmt__get_packed_size", "pg_query.pb-c.c", 4474, "message->base.descriptor == &pg_query__vacuum_stmt__descriptor");
}

void pg_query__vacuum_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__vacuum_stmt__pack", "pg_query.pb-c.c", 4481, "message->base.descriptor == &pg_query__vacuum_stmt__descriptor");
}

void pg_query__vacuum_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__vacuum_stmt__pack_to_buffer", "pg_query.pb-c.c", 4488, "message->base.descriptor == &pg_query__vacuum_stmt__descriptor");
}

void pg_query__vacuum_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__vacuum_stmt__free_unpacked", "pg_query.pb-c.c", 4507, "message->base.descriptor == &pg_query__vacuum_stmt__descriptor");
}

void pg_query__explain_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__explain_stmt__get_packed_size", "pg_query.pb-c.c", 4519, "message->base.descriptor == &pg_query__explain_stmt__descriptor");
}

void pg_query__explain_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__explain_stmt__pack", "pg_query.pb-c.c", 4526, "message->base.descriptor == &pg_query__explain_stmt__descriptor");
}

void pg_query__explain_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__explain_stmt__pack_to_buffer", "pg_query.pb-c.c", 4533, "message->base.descriptor == &pg_query__explain_stmt__descriptor");
}

void pg_query__explain_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__explain_stmt__free_unpacked", "pg_query.pb-c.c", 4552, "message->base.descriptor == &pg_query__explain_stmt__descriptor");
}

void pg_query__create_table_as_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_table_as_stmt__get_packed_size", "pg_query.pb-c.c", 4564, "message->base.descriptor == &pg_query__create_table_as_stmt__descriptor");
}

void pg_query__create_table_as_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_table_as_stmt__pack", "pg_query.pb-c.c", 4571, "message->base.descriptor == &pg_query__create_table_as_stmt__descriptor");
}

void pg_query__create_table_as_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_table_as_stmt__pack_to_buffer", "pg_query.pb-c.c", 4578, "message->base.descriptor == &pg_query__create_table_as_stmt__descriptor");
}

void pg_query__create_table_as_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_table_as_stmt__free_unpacked", "pg_query.pb-c.c", 4597, "message->base.descriptor == &pg_query__create_table_as_stmt__descriptor");
}

void pg_query__create_seq_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_seq_stmt__get_packed_size", "pg_query.pb-c.c", 4609, "message->base.descriptor == &pg_query__create_seq_stmt__descriptor");
}

void pg_query__create_seq_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_seq_stmt__pack", "pg_query.pb-c.c", 4616, "message->base.descriptor == &pg_query__create_seq_stmt__descriptor");
}

void pg_query__create_seq_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_seq_stmt__pack_to_buffer", "pg_query.pb-c.c", 4623, "message->base.descriptor == &pg_query__create_seq_stmt__descriptor");
}

void pg_query__create_seq_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_seq_stmt__free_unpacked", "pg_query.pb-c.c", 4642, "message->base.descriptor == &pg_query__create_seq_stmt__descriptor");
}

void pg_query__alter_seq_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_seq_stmt__get_packed_size", "pg_query.pb-c.c", 4654, "message->base.descriptor == &pg_query__alter_seq_stmt__descriptor");
}

void pg_query__alter_seq_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_seq_stmt__pack", "pg_query.pb-c.c", 4661, "message->base.descriptor == &pg_query__alter_seq_stmt__descriptor");
}

void pg_query__alter_seq_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_seq_stmt__pack_to_buffer", "pg_query.pb-c.c", 4668, "message->base.descriptor == &pg_query__alter_seq_stmt__descriptor");
}

void pg_query__alter_seq_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_seq_stmt__free_unpacked", "pg_query.pb-c.c", 4687, "message->base.descriptor == &pg_query__alter_seq_stmt__descriptor");
}

void pg_query__variable_set_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__variable_set_stmt__get_packed_size", "pg_query.pb-c.c", 4699, "message->base.descriptor == &pg_query__variable_set_stmt__descriptor");
}

void pg_query__variable_set_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__variable_set_stmt__pack", "pg_query.pb-c.c", 4706, "message->base.descriptor == &pg_query__variable_set_stmt__descriptor");
}

void pg_query__variable_set_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__variable_set_stmt__pack_to_buffer", "pg_query.pb-c.c", 4713, "message->base.descriptor == &pg_query__variable_set_stmt__descriptor");
}

void pg_query__variable_set_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__variable_set_stmt__free_unpacked", "pg_query.pb-c.c", 4732, "message->base.descriptor == &pg_query__variable_set_stmt__descriptor");
}

void pg_query__variable_show_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__variable_show_stmt__get_packed_size", "pg_query.pb-c.c", 4744, "message->base.descriptor == &pg_query__variable_show_stmt__descriptor");
}

void pg_query__variable_show_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__variable_show_stmt__pack", "pg_query.pb-c.c", 4751, "message->base.descriptor == &pg_query__variable_show_stmt__descriptor");
}

void pg_query__variable_show_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__variable_show_stmt__pack_to_buffer", "pg_query.pb-c.c", 4758, "message->base.descriptor == &pg_query__variable_show_stmt__descriptor");
}

void pg_query__variable_show_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__variable_show_stmt__free_unpacked", "pg_query.pb-c.c", 4777, "message->base.descriptor == &pg_query__variable_show_stmt__descriptor");
}

void pg_query__discard_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__discard_stmt__get_packed_size", "pg_query.pb-c.c", 4789, "message->base.descriptor == &pg_query__discard_stmt__descriptor");
}

void pg_query__discard_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__discard_stmt__pack", "pg_query.pb-c.c", 4796, "message->base.descriptor == &pg_query__discard_stmt__descriptor");
}

void pg_query__discard_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__discard_stmt__pack_to_buffer", "pg_query.pb-c.c", 4803, "message->base.descriptor == &pg_query__discard_stmt__descriptor");
}

void pg_query__discard_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__discard_stmt__free_unpacked", "pg_query.pb-c.c", 4822, "message->base.descriptor == &pg_query__discard_stmt__descriptor");
}

void pg_query__create_trig_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_trig_stmt__get_packed_size", "pg_query.pb-c.c", 4834, "message->base.descriptor == &pg_query__create_trig_stmt__descriptor");
}

void pg_query__create_trig_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_trig_stmt__pack", "pg_query.pb-c.c", 4841, "message->base.descriptor == &pg_query__create_trig_stmt__descriptor");
}

void pg_query__create_trig_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_trig_stmt__pack_to_buffer", "pg_query.pb-c.c", 4848, "message->base.descriptor == &pg_query__create_trig_stmt__descriptor");
}

void pg_query__create_trig_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_trig_stmt__free_unpacked", "pg_query.pb-c.c", 4867, "message->base.descriptor == &pg_query__create_trig_stmt__descriptor");
}

void pg_query__create_plang_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_plang_stmt__get_packed_size", "pg_query.pb-c.c", 4879, "message->base.descriptor == &pg_query__create_plang_stmt__descriptor");
}

void pg_query__create_plang_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_plang_stmt__pack", "pg_query.pb-c.c", 4886, "message->base.descriptor == &pg_query__create_plang_stmt__descriptor");
}

void pg_query__create_plang_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_plang_stmt__pack_to_buffer", "pg_query.pb-c.c", 4893, "message->base.descriptor == &pg_query__create_plang_stmt__descriptor");
}

void pg_query__create_plang_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_plang_stmt__free_unpacked", "pg_query.pb-c.c", 4912, "message->base.descriptor == &pg_query__create_plang_stmt__descriptor");
}

void pg_query__create_role_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_role_stmt__get_packed_size", "pg_query.pb-c.c", 4924, "message->base.descriptor == &pg_query__create_role_stmt__descriptor");
}

void pg_query__create_role_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_role_stmt__pack", "pg_query.pb-c.c", 4931, "message->base.descriptor == &pg_query__create_role_stmt__descriptor");
}

void pg_query__create_role_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_role_stmt__pack_to_buffer", "pg_query.pb-c.c", 4938, "message->base.descriptor == &pg_query__create_role_stmt__descriptor");
}

void pg_query__create_role_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_role_stmt__free_unpacked", "pg_query.pb-c.c", 4957, "message->base.descriptor == &pg_query__create_role_stmt__descriptor");
}

void pg_query__alter_role_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_role_stmt__get_packed_size", "pg_query.pb-c.c", 4969, "message->base.descriptor == &pg_query__alter_role_stmt__descriptor");
}

void pg_query__alter_role_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_role_stmt__pack", "pg_query.pb-c.c", 4976, "message->base.descriptor == &pg_query__alter_role_stmt__descriptor");
}

void pg_query__alter_role_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_role_stmt__pack_to_buffer", "pg_query.pb-c.c", 4983, "message->base.descriptor == &pg_query__alter_role_stmt__descriptor");
}

void pg_query__alter_role_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_role_stmt__free_unpacked", "pg_query.pb-c.c", 5002, "message->base.descriptor == &pg_query__alter_role_stmt__descriptor");
}

void pg_query__drop_role_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__drop_role_stmt__get_packed_size", "pg_query.pb-c.c", 5014, "message->base.descriptor == &pg_query__drop_role_stmt__descriptor");
}

void pg_query__drop_role_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__drop_role_stmt__pack", "pg_query.pb-c.c", 5021, "message->base.descriptor == &pg_query__drop_role_stmt__descriptor");
}

void pg_query__drop_role_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__drop_role_stmt__pack_to_buffer", "pg_query.pb-c.c", 5028, "message->base.descriptor == &pg_query__drop_role_stmt__descriptor");
}

void pg_query__drop_role_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__drop_role_stmt__free_unpacked", "pg_query.pb-c.c", 5047, "message->base.descriptor == &pg_query__drop_role_stmt__descriptor");
}

void pg_query__lock_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__lock_stmt__get_packed_size", "pg_query.pb-c.c", 5059, "message->base.descriptor == &pg_query__lock_stmt__descriptor");
}

void pg_query__lock_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__lock_stmt__pack", "pg_query.pb-c.c", 5066, "message->base.descriptor == &pg_query__lock_stmt__descriptor");
}

void pg_query__lock_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__lock_stmt__pack_to_buffer", "pg_query.pb-c.c", 5073, "message->base.descriptor == &pg_query__lock_stmt__descriptor");
}

void pg_query__lock_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__lock_stmt__free_unpacked", "pg_query.pb-c.c", 5092, "message->base.descriptor == &pg_query__lock_stmt__descriptor");
}

void pg_query__constraints_set_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__constraints_set_stmt__get_packed_size", "pg_query.pb-c.c", 5104, "message->base.descriptor == &pg_query__constraints_set_stmt__descriptor");
}

void pg_query__constraints_set_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__constraints_set_stmt__pack", "pg_query.pb-c.c", 5111, "message->base.descriptor == &pg_query__constraints_set_stmt__descriptor");
}

void pg_query__constraints_set_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__constraints_set_stmt__pack_to_buffer", "pg_query.pb-c.c", 5118, "message->base.descriptor == &pg_query__constraints_set_stmt__descriptor");
}

void pg_query__constraints_set_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__constraints_set_stmt__free_unpacked", "pg_query.pb-c.c", 5137, "message->base.descriptor == &pg_query__constraints_set_stmt__descriptor");
}

void pg_query__reindex_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__reindex_stmt__get_packed_size", "pg_query.pb-c.c", 5149, "message->base.descriptor == &pg_query__reindex_stmt__descriptor");
}

void pg_query__reindex_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__reindex_stmt__pack", "pg_query.pb-c.c", 5156, "message->base.descriptor == &pg_query__reindex_stmt__descriptor");
}

void pg_query__reindex_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__reindex_stmt__pack_to_buffer", "pg_query.pb-c.c", 5163, "message->base.descriptor == &pg_query__reindex_stmt__descriptor");
}

void pg_query__reindex_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__reindex_stmt__free_unpacked", "pg_query.pb-c.c", 5182, "message->base.descriptor == &pg_query__reindex_stmt__descriptor");
}

void pg_query__check_point_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__check_point_stmt__get_packed_size", "pg_query.pb-c.c", 5194, "message->base.descriptor == &pg_query__check_point_stmt__descriptor");
}

void pg_query__check_point_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__check_point_stmt__pack", "pg_query.pb-c.c", 5201, "message->base.descriptor == &pg_query__check_point_stmt__descriptor");
}

void pg_query__check_point_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__check_point_stmt__pack_to_buffer", "pg_query.pb-c.c", 5208, "message->base.descriptor == &pg_query__check_point_stmt__descriptor");
}

void pg_query__check_point_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__check_point_stmt__free_unpacked", "pg_query.pb-c.c", 5227, "message->base.descriptor == &pg_query__check_point_stmt__descriptor");
}

void pg_query__create_schema_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_schema_stmt__get_packed_size", "pg_query.pb-c.c", 5239, "message->base.descriptor == &pg_query__create_schema_stmt__descriptor");
}

void pg_query__create_schema_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_schema_stmt__pack", "pg_query.pb-c.c", 5246, "message->base.descriptor == &pg_query__create_schema_stmt__descriptor");
}

void pg_query__create_schema_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_schema_stmt__pack_to_buffer", "pg_query.pb-c.c", 5253, "message->base.descriptor == &pg_query__create_schema_stmt__descriptor");
}

void pg_query__create_schema_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_schema_stmt__free_unpacked", "pg_query.pb-c.c", 5272, "message->base.descriptor == &pg_query__create_schema_stmt__descriptor");
}

void pg_query__alter_database_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_database_stmt__get_packed_size", "pg_query.pb-c.c", 5284, "message->base.descriptor == &pg_query__alter_database_stmt__descriptor");
}

void pg_query__alter_database_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_database_stmt__pack", "pg_query.pb-c.c", 5291, "message->base.descriptor == &pg_query__alter_database_stmt__descriptor");
}

void pg_query__alter_database_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_database_stmt__pack_to_buffer", "pg_query.pb-c.c", 5298, "message->base.descriptor == &pg_query__alter_database_stmt__descriptor");
}

void pg_query__alter_database_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_database_stmt__free_unpacked", "pg_query.pb-c.c", 5317, "message->base.descriptor == &pg_query__alter_database_stmt__descriptor");
}

void pg_query__alter_database_set_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_database_set_stmt__get_packed_size", "pg_query.pb-c.c", 5329, "message->base.descriptor == &pg_query__alter_database_set_stmt__descriptor");
}

void pg_query__alter_database_set_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_database_set_stmt__pack", "pg_query.pb-c.c", 5336, "message->base.descriptor == &pg_query__alter_database_set_stmt__descriptor");
}

void pg_query__alter_database_set_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_database_set_stmt__pack_to_buffer", "pg_query.pb-c.c", 5343, "message->base.descriptor == &pg_query__alter_database_set_stmt__descriptor");
}

void pg_query__alter_database_set_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_database_set_stmt__free_unpacked", "pg_query.pb-c.c", 5362, "message->base.descriptor == &pg_query__alter_database_set_stmt__descriptor");
}

void pg_query__alter_role_set_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_role_set_stmt__get_packed_size", "pg_query.pb-c.c", 5374, "message->base.descriptor == &pg_query__alter_role_set_stmt__descriptor");
}

void pg_query__alter_role_set_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_role_set_stmt__pack", "pg_query.pb-c.c", 5381, "message->base.descriptor == &pg_query__alter_role_set_stmt__descriptor");
}

void pg_query__alter_role_set_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_role_set_stmt__pack_to_buffer", "pg_query.pb-c.c", 5388, "message->base.descriptor == &pg_query__alter_role_set_stmt__descriptor");
}

void pg_query__alter_role_set_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_role_set_stmt__free_unpacked", "pg_query.pb-c.c", 5407, "message->base.descriptor == &pg_query__alter_role_set_stmt__descriptor");
}

void pg_query__create_conversion_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_conversion_stmt__get_packed_size", "pg_query.pb-c.c", 5419, "message->base.descriptor == &pg_query__create_conversion_stmt__descriptor");
}

void pg_query__create_conversion_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_conversion_stmt__pack", "pg_query.pb-c.c", 5426, "message->base.descriptor == &pg_query__create_conversion_stmt__descriptor");
}

void pg_query__create_conversion_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_conversion_stmt__pack_to_buffer", "pg_query.pb-c.c", 5433, "message->base.descriptor == &pg_query__create_conversion_stmt__descriptor");
}

void pg_query__create_conversion_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_conversion_stmt__free_unpacked", "pg_query.pb-c.c", 5452, "message->base.descriptor == &pg_query__create_conversion_stmt__descriptor");
}

void pg_query__create_cast_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_cast_stmt__get_packed_size", "pg_query.pb-c.c", 5464, "message->base.descriptor == &pg_query__create_cast_stmt__descriptor");
}

void pg_query__create_cast_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_cast_stmt__pack", "pg_query.pb-c.c", 5471, "message->base.descriptor == &pg_query__create_cast_stmt__descriptor");
}

void pg_query__create_cast_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_cast_stmt__pack_to_buffer", "pg_query.pb-c.c", 5478, "message->base.descriptor == &pg_query__create_cast_stmt__descriptor");
}

void pg_query__create_cast_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_cast_stmt__free_unpacked", "pg_query.pb-c.c", 5497, "message->base.descriptor == &pg_query__create_cast_stmt__descriptor");
}

void pg_query__create_op_class_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_op_class_stmt__get_packed_size", "pg_query.pb-c.c", 5509, "message->base.descriptor == &pg_query__create_op_class_stmt__descriptor");
}

void pg_query__create_op_class_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_op_class_stmt__pack", "pg_query.pb-c.c", 5516, "message->base.descriptor == &pg_query__create_op_class_stmt__descriptor");
}

void pg_query__create_op_class_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_op_class_stmt__pack_to_buffer", "pg_query.pb-c.c", 5523, "message->base.descriptor == &pg_query__create_op_class_stmt__descriptor");
}

void pg_query__create_op_class_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_op_class_stmt__free_unpacked", "pg_query.pb-c.c", 5542, "message->base.descriptor == &pg_query__create_op_class_stmt__descriptor");
}

void pg_query__create_op_family_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_op_family_stmt__get_packed_size", "pg_query.pb-c.c", 5554, "message->base.descriptor == &pg_query__create_op_family_stmt__descriptor");
}

void pg_query__create_op_family_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_op_family_stmt__pack", "pg_query.pb-c.c", 5561, "message->base.descriptor == &pg_query__create_op_family_stmt__descriptor");
}

void pg_query__create_op_family_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_op_family_stmt__pack_to_buffer", "pg_query.pb-c.c", 5568, "message->base.descriptor == &pg_query__create_op_family_stmt__descriptor");
}

void pg_query__create_op_family_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_op_family_stmt__free_unpacked", "pg_query.pb-c.c", 5587, "message->base.descriptor == &pg_query__create_op_family_stmt__descriptor");
}

void pg_query__alter_op_family_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_op_family_stmt__get_packed_size", "pg_query.pb-c.c", 5599, "message->base.descriptor == &pg_query__alter_op_family_stmt__descriptor");
}

void pg_query__alter_op_family_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_op_family_stmt__pack", "pg_query.pb-c.c", 5606, "message->base.descriptor == &pg_query__alter_op_family_stmt__descriptor");
}

void pg_query__alter_op_family_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_op_family_stmt__pack_to_buffer", "pg_query.pb-c.c", 5613, "message->base.descriptor == &pg_query__alter_op_family_stmt__descriptor");
}

void pg_query__alter_op_family_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_op_family_stmt__free_unpacked", "pg_query.pb-c.c", 5632, "message->base.descriptor == &pg_query__alter_op_family_stmt__descriptor");
}

void pg_query__prepare_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__prepare_stmt__get_packed_size", "pg_query.pb-c.c", 5644, "message->base.descriptor == &pg_query__prepare_stmt__descriptor");
}

void pg_query__prepare_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__prepare_stmt__pack", "pg_query.pb-c.c", 5651, "message->base.descriptor == &pg_query__prepare_stmt__descriptor");
}

void pg_query__prepare_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__prepare_stmt__pack_to_buffer", "pg_query.pb-c.c", 5658, "message->base.descriptor == &pg_query__prepare_stmt__descriptor");
}

void pg_query__prepare_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__prepare_stmt__free_unpacked", "pg_query.pb-c.c", 5677, "message->base.descriptor == &pg_query__prepare_stmt__descriptor");
}

void pg_query__execute_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__execute_stmt__get_packed_size", "pg_query.pb-c.c", 5689, "message->base.descriptor == &pg_query__execute_stmt__descriptor");
}

void pg_query__execute_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__execute_stmt__pack", "pg_query.pb-c.c", 5696, "message->base.descriptor == &pg_query__execute_stmt__descriptor");
}

void pg_query__execute_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__execute_stmt__pack_to_buffer", "pg_query.pb-c.c", 5703, "message->base.descriptor == &pg_query__execute_stmt__descriptor");
}

void pg_query__execute_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__execute_stmt__free_unpacked", "pg_query.pb-c.c", 5722, "message->base.descriptor == &pg_query__execute_stmt__descriptor");
}

void pg_query__deallocate_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__deallocate_stmt__get_packed_size", "pg_query.pb-c.c", 5734, "message->base.descriptor == &pg_query__deallocate_stmt__descriptor");
}

void pg_query__deallocate_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__deallocate_stmt__pack", "pg_query.pb-c.c", 5741, "message->base.descriptor == &pg_query__deallocate_stmt__descriptor");
}

void pg_query__deallocate_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__deallocate_stmt__pack_to_buffer", "pg_query.pb-c.c", 5748, "message->base.descriptor == &pg_query__deallocate_stmt__descriptor");
}

void pg_query__deallocate_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__deallocate_stmt__free_unpacked", "pg_query.pb-c.c", 5767, "message->base.descriptor == &pg_query__deallocate_stmt__descriptor");
}

void pg_query__declare_cursor_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__declare_cursor_stmt__get_packed_size", "pg_query.pb-c.c", 5779, "message->base.descriptor == &pg_query__declare_cursor_stmt__descriptor");
}

void pg_query__declare_cursor_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__declare_cursor_stmt__pack", "pg_query.pb-c.c", 5786, "message->base.descriptor == &pg_query__declare_cursor_stmt__descriptor");
}

void pg_query__declare_cursor_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__declare_cursor_stmt__pack_to_buffer", "pg_query.pb-c.c", 5793, "message->base.descriptor == &pg_query__declare_cursor_stmt__descriptor");
}

void pg_query__declare_cursor_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__declare_cursor_stmt__free_unpacked", "pg_query.pb-c.c", 5812, "message->base.descriptor == &pg_query__declare_cursor_stmt__descriptor");
}

void pg_query__create_table_space_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_table_space_stmt__get_packed_size", "pg_query.pb-c.c", 5824, "message->base.descriptor == &pg_query__create_table_space_stmt__descriptor");
}

void pg_query__create_table_space_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_table_space_stmt__pack", "pg_query.pb-c.c", 5831, "message->base.descriptor == &pg_query__create_table_space_stmt__descriptor");
}

void pg_query__create_table_space_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_table_space_stmt__pack_to_buffer", "pg_query.pb-c.c", 5838, "message->base.descriptor == &pg_query__create_table_space_stmt__descriptor");
}

void pg_query__create_table_space_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_table_space_stmt__free_unpacked", "pg_query.pb-c.c", 5857, "message->base.descriptor == &pg_query__create_table_space_stmt__descriptor");
}

void pg_query__drop_table_space_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__drop_table_space_stmt__get_packed_size", "pg_query.pb-c.c", 5869, "message->base.descriptor == &pg_query__drop_table_space_stmt__descriptor");
}

void pg_query__drop_table_space_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__drop_table_space_stmt__pack", "pg_query.pb-c.c", 5876, "message->base.descriptor == &pg_query__drop_table_space_stmt__descriptor");
}

void pg_query__drop_table_space_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__drop_table_space_stmt__pack_to_buffer", "pg_query.pb-c.c", 5883, "message->base.descriptor == &pg_query__drop_table_space_stmt__descriptor");
}

void pg_query__drop_table_space_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__drop_table_space_stmt__free_unpacked", "pg_query.pb-c.c", 5902, "message->base.descriptor == &pg_query__drop_table_space_stmt__descriptor");
}

void pg_query__alter_object_depends_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_object_depends_stmt__get_packed_size", "pg_query.pb-c.c", 5914, "message->base.descriptor == &pg_query__alter_object_depends_stmt__descriptor");
}

void pg_query__alter_object_depends_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_object_depends_stmt__pack", "pg_query.pb-c.c", 5921, "message->base.descriptor == &pg_query__alter_object_depends_stmt__descriptor");
}

void pg_query__alter_object_depends_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_object_depends_stmt__pack_to_buffer", "pg_query.pb-c.c", 5928, "message->base.descriptor == &pg_query__alter_object_depends_stmt__descriptor");
}

void pg_query__alter_object_depends_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_object_depends_stmt__free_unpacked", "pg_query.pb-c.c", 5947, "message->base.descriptor == &pg_query__alter_object_depends_stmt__descriptor");
}

void pg_query__alter_object_schema_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_object_schema_stmt__get_packed_size", "pg_query.pb-c.c", 5959, "message->base.descriptor == &pg_query__alter_object_schema_stmt__descriptor");
}

void pg_query__alter_object_schema_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_object_schema_stmt__pack", "pg_query.pb-c.c", 5966, "message->base.descriptor == &pg_query__alter_object_schema_stmt__descriptor");
}

void pg_query__alter_object_schema_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_object_schema_stmt__pack_to_buffer", "pg_query.pb-c.c", 5973, "message->base.descriptor == &pg_query__alter_object_schema_stmt__descriptor");
}

void pg_query__alter_object_schema_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_object_schema_stmt__free_unpacked", "pg_query.pb-c.c", 5992, "message->base.descriptor == &pg_query__alter_object_schema_stmt__descriptor");
}

void pg_query__alter_owner_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_owner_stmt__get_packed_size", "pg_query.pb-c.c", 6004, "message->base.descriptor == &pg_query__alter_owner_stmt__descriptor");
}

void pg_query__alter_owner_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_owner_stmt__pack", "pg_query.pb-c.c", 6011, "message->base.descriptor == &pg_query__alter_owner_stmt__descriptor");
}

void pg_query__alter_owner_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_owner_stmt__pack_to_buffer", "pg_query.pb-c.c", 6018, "message->base.descriptor == &pg_query__alter_owner_stmt__descriptor");
}

void pg_query__alter_owner_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_owner_stmt__free_unpacked", "pg_query.pb-c.c", 6037, "message->base.descriptor == &pg_query__alter_owner_stmt__descriptor");
}

void pg_query__alter_operator_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_operator_stmt__get_packed_size", "pg_query.pb-c.c", 6049, "message->base.descriptor == &pg_query__alter_operator_stmt__descriptor");
}

void pg_query__alter_operator_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_operator_stmt__pack", "pg_query.pb-c.c", 6056, "message->base.descriptor == &pg_query__alter_operator_stmt__descriptor");
}

void pg_query__alter_operator_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_operator_stmt__pack_to_buffer", "pg_query.pb-c.c", 6063, "message->base.descriptor == &pg_query__alter_operator_stmt__descriptor");
}

void pg_query__alter_operator_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_operator_stmt__free_unpacked", "pg_query.pb-c.c", 6082, "message->base.descriptor == &pg_query__alter_operator_stmt__descriptor");
}

void pg_query__alter_type_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_type_stmt__get_packed_size", "pg_query.pb-c.c", 6094, "message->base.descriptor == &pg_query__alter_type_stmt__descriptor");
}

void pg_query__alter_type_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_type_stmt__pack", "pg_query.pb-c.c", 6101, "message->base.descriptor == &pg_query__alter_type_stmt__descriptor");
}

void pg_query__alter_type_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_type_stmt__pack_to_buffer", "pg_query.pb-c.c", 6108, "message->base.descriptor == &pg_query__alter_type_stmt__descriptor");
}

void pg_query__alter_type_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_type_stmt__free_unpacked", "pg_query.pb-c.c", 6127, "message->base.descriptor == &pg_query__alter_type_stmt__descriptor");
}

void pg_query__drop_owned_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__drop_owned_stmt__get_packed_size", "pg_query.pb-c.c", 6139, "message->base.descriptor == &pg_query__drop_owned_stmt__descriptor");
}

void pg_query__drop_owned_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__drop_owned_stmt__pack", "pg_query.pb-c.c", 6146, "message->base.descriptor == &pg_query__drop_owned_stmt__descriptor");
}

void pg_query__drop_owned_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__drop_owned_stmt__pack_to_buffer", "pg_query.pb-c.c", 6153, "message->base.descriptor == &pg_query__drop_owned_stmt__descriptor");
}

void pg_query__drop_owned_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__drop_owned_stmt__free_unpacked", "pg_query.pb-c.c", 6172, "message->base.descriptor == &pg_query__drop_owned_stmt__descriptor");
}

void pg_query__reassign_owned_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__reassign_owned_stmt__get_packed_size", "pg_query.pb-c.c", 6184, "message->base.descriptor == &pg_query__reassign_owned_stmt__descriptor");
}

void pg_query__reassign_owned_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__reassign_owned_stmt__pack", "pg_query.pb-c.c", 6191, "message->base.descriptor == &pg_query__reassign_owned_stmt__descriptor");
}

void pg_query__reassign_owned_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__reassign_owned_stmt__pack_to_buffer", "pg_query.pb-c.c", 6198, "message->base.descriptor == &pg_query__reassign_owned_stmt__descriptor");
}

void pg_query__reassign_owned_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__reassign_owned_stmt__free_unpacked", "pg_query.pb-c.c", 6217, "message->base.descriptor == &pg_query__reassign_owned_stmt__descriptor");
}

void pg_query__composite_type_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__composite_type_stmt__get_packed_size", "pg_query.pb-c.c", 6229, "message->base.descriptor == &pg_query__composite_type_stmt__descriptor");
}

void pg_query__composite_type_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__composite_type_stmt__pack", "pg_query.pb-c.c", 6236, "message->base.descriptor == &pg_query__composite_type_stmt__descriptor");
}

void pg_query__composite_type_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__composite_type_stmt__pack_to_buffer", "pg_query.pb-c.c", 6243, "message->base.descriptor == &pg_query__composite_type_stmt__descriptor");
}

void pg_query__composite_type_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__composite_type_stmt__free_unpacked", "pg_query.pb-c.c", 6262, "message->base.descriptor == &pg_query__composite_type_stmt__descriptor");
}

void pg_query__create_enum_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_enum_stmt__get_packed_size", "pg_query.pb-c.c", 6274, "message->base.descriptor == &pg_query__create_enum_stmt__descriptor");
}

void pg_query__create_enum_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_enum_stmt__pack", "pg_query.pb-c.c", 6281, "message->base.descriptor == &pg_query__create_enum_stmt__descriptor");
}

void pg_query__create_enum_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_enum_stmt__pack_to_buffer", "pg_query.pb-c.c", 6288, "message->base.descriptor == &pg_query__create_enum_stmt__descriptor");
}

void pg_query__create_enum_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_enum_stmt__free_unpacked", "pg_query.pb-c.c", 6307, "message->base.descriptor == &pg_query__create_enum_stmt__descriptor");
}

void pg_query__create_range_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_range_stmt__get_packed_size", "pg_query.pb-c.c", 6319, "message->base.descriptor == &pg_query__create_range_stmt__descriptor");
}

void pg_query__create_range_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_range_stmt__pack", "pg_query.pb-c.c", 6326, "message->base.descriptor == &pg_query__create_range_stmt__descriptor");
}

void pg_query__create_range_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_range_stmt__pack_to_buffer", "pg_query.pb-c.c", 6333, "message->base.descriptor == &pg_query__create_range_stmt__descriptor");
}

void pg_query__create_range_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_range_stmt__free_unpacked", "pg_query.pb-c.c", 6352, "message->base.descriptor == &pg_query__create_range_stmt__descriptor");
}

void pg_query__alter_enum_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_enum_stmt__get_packed_size", "pg_query.pb-c.c", 6364, "message->base.descriptor == &pg_query__alter_enum_stmt__descriptor");
}

void pg_query__alter_enum_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_enum_stmt__pack", "pg_query.pb-c.c", 6371, "message->base.descriptor == &pg_query__alter_enum_stmt__descriptor");
}

void pg_query__alter_enum_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_enum_stmt__pack_to_buffer", "pg_query.pb-c.c", 6378, "message->base.descriptor == &pg_query__alter_enum_stmt__descriptor");
}

void pg_query__alter_enum_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_enum_stmt__free_unpacked", "pg_query.pb-c.c", 6397, "message->base.descriptor == &pg_query__alter_enum_stmt__descriptor");
}

void pg_query__alter_tsdictionary_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_tsdictionary_stmt__get_packed_size", "pg_query.pb-c.c", 6409, "message->base.descriptor == &pg_query__alter_tsdictionary_stmt__descriptor");
}

void pg_query__alter_tsdictionary_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_tsdictionary_stmt__pack", "pg_query.pb-c.c", 6416, "message->base.descriptor == &pg_query__alter_tsdictionary_stmt__descriptor");
}

void pg_query__alter_tsdictionary_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_tsdictionary_stmt__pack_to_buffer", "pg_query.pb-c.c", 6423, "message->base.descriptor == &pg_query__alter_tsdictionary_stmt__descriptor");
}

void pg_query__alter_tsdictionary_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_tsdictionary_stmt__free_unpacked", "pg_query.pb-c.c", 6442, "message->base.descriptor == &pg_query__alter_tsdictionary_stmt__descriptor");
}

void pg_query__alter_tsconfiguration_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_tsconfiguration_stmt__get_packed_size", "pg_query.pb-c.c", 6454, "message->base.descriptor == &pg_query__alter_tsconfiguration_stmt__descriptor");
}

void pg_query__alter_tsconfiguration_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_tsconfiguration_stmt__pack", "pg_query.pb-c.c", 6461, "message->base.descriptor == &pg_query__alter_tsconfiguration_stmt__descriptor");
}

void pg_query__alter_tsconfiguration_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_tsconfiguration_stmt__pack_to_buffer", "pg_query.pb-c.c", 6468, "message->base.descriptor == &pg_query__alter_tsconfiguration_stmt__descriptor");
}

void pg_query__alter_tsconfiguration_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_tsconfiguration_stmt__free_unpacked", "pg_query.pb-c.c", 6487, "message->base.descriptor == &pg_query__alter_tsconfiguration_stmt__descriptor");
}

void pg_query__create_fdw_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_fdw_stmt__get_packed_size", "pg_query.pb-c.c", 6499, "message->base.descriptor == &pg_query__create_fdw_stmt__descriptor");
}

void pg_query__create_fdw_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_fdw_stmt__pack", "pg_query.pb-c.c", 6506, "message->base.descriptor == &pg_query__create_fdw_stmt__descriptor");
}

void pg_query__create_fdw_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_fdw_stmt__pack_to_buffer", "pg_query.pb-c.c", 6513, "message->base.descriptor == &pg_query__create_fdw_stmt__descriptor");
}

void pg_query__create_fdw_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_fdw_stmt__free_unpacked", "pg_query.pb-c.c", 6532, "message->base.descriptor == &pg_query__create_fdw_stmt__descriptor");
}

void pg_query__alter_fdw_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_fdw_stmt__get_packed_size", "pg_query.pb-c.c", 6544, "message->base.descriptor == &pg_query__alter_fdw_stmt__descriptor");
}

void pg_query__alter_fdw_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_fdw_stmt__pack", "pg_query.pb-c.c", 6551, "message->base.descriptor == &pg_query__alter_fdw_stmt__descriptor");
}

void pg_query__alter_fdw_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_fdw_stmt__pack_to_buffer", "pg_query.pb-c.c", 6558, "message->base.descriptor == &pg_query__alter_fdw_stmt__descriptor");
}

void pg_query__alter_fdw_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_fdw_stmt__free_unpacked", "pg_query.pb-c.c", 6577, "message->base.descriptor == &pg_query__alter_fdw_stmt__descriptor");
}

void pg_query__create_foreign_server_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_foreign_server_stmt__get_packed_size", "pg_query.pb-c.c", 6589, "message->base.descriptor == &pg_query__create_foreign_server_stmt__descriptor");
}

void pg_query__create_foreign_server_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_foreign_server_stmt__pack", "pg_query.pb-c.c", 6596, "message->base.descriptor == &pg_query__create_foreign_server_stmt__descriptor");
}

void pg_query__create_foreign_server_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_foreign_server_stmt__pack_to_buffer", "pg_query.pb-c.c", 6603, "message->base.descriptor == &pg_query__create_foreign_server_stmt__descriptor");
}

void pg_query__create_foreign_server_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_foreign_server_stmt__free_unpacked", "pg_query.pb-c.c", 6622, "message->base.descriptor == &pg_query__create_foreign_server_stmt__descriptor");
}

void pg_query__alter_foreign_server_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_foreign_server_stmt__get_packed_size", "pg_query.pb-c.c", 6634, "message->base.descriptor == &pg_query__alter_foreign_server_stmt__descriptor");
}

void pg_query__alter_foreign_server_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_foreign_server_stmt__pack", "pg_query.pb-c.c", 6641, "message->base.descriptor == &pg_query__alter_foreign_server_stmt__descriptor");
}

void pg_query__alter_foreign_server_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_foreign_server_stmt__pack_to_buffer", "pg_query.pb-c.c", 6648, "message->base.descriptor == &pg_query__alter_foreign_server_stmt__descriptor");
}

void pg_query__alter_foreign_server_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_foreign_server_stmt__free_unpacked", "pg_query.pb-c.c", 6667, "message->base.descriptor == &pg_query__alter_foreign_server_stmt__descriptor");
}

void pg_query__create_user_mapping_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_user_mapping_stmt__get_packed_size", "pg_query.pb-c.c", 6679, "message->base.descriptor == &pg_query__create_user_mapping_stmt__descriptor");
}

void pg_query__create_user_mapping_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_user_mapping_stmt__pack", "pg_query.pb-c.c", 6686, "message->base.descriptor == &pg_query__create_user_mapping_stmt__descriptor");
}

void pg_query__create_user_mapping_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_user_mapping_stmt__pack_to_buffer", "pg_query.pb-c.c", 6693, "message->base.descriptor == &pg_query__create_user_mapping_stmt__descriptor");
}

void pg_query__create_user_mapping_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_user_mapping_stmt__free_unpacked", "pg_query.pb-c.c", 6712, "message->base.descriptor == &pg_query__create_user_mapping_stmt__descriptor");
}

void pg_query__alter_user_mapping_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_user_mapping_stmt__get_packed_size", "pg_query.pb-c.c", 6724, "message->base.descriptor == &pg_query__alter_user_mapping_stmt__descriptor");
}

void pg_query__alter_user_mapping_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_user_mapping_stmt__pack", "pg_query.pb-c.c", 6731, "message->base.descriptor == &pg_query__alter_user_mapping_stmt__descriptor");
}

void pg_query__alter_user_mapping_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_user_mapping_stmt__pack_to_buffer", "pg_query.pb-c.c", 6738, "message->base.descriptor == &pg_query__alter_user_mapping_stmt__descriptor");
}

void pg_query__alter_user_mapping_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_user_mapping_stmt__free_unpacked", "pg_query.pb-c.c", 6757, "message->base.descriptor == &pg_query__alter_user_mapping_stmt__descriptor");
}

void pg_query__drop_user_mapping_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__drop_user_mapping_stmt__get_packed_size", "pg_query.pb-c.c", 6769, "message->base.descriptor == &pg_query__drop_user_mapping_stmt__descriptor");
}

void pg_query__drop_user_mapping_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__drop_user_mapping_stmt__pack", "pg_query.pb-c.c", 6776, "message->base.descriptor == &pg_query__drop_user_mapping_stmt__descriptor");
}

void pg_query__drop_user_mapping_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__drop_user_mapping_stmt__pack_to_buffer", "pg_query.pb-c.c", 6783, "message->base.descriptor == &pg_query__drop_user_mapping_stmt__descriptor");
}

void pg_query__drop_user_mapping_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__drop_user_mapping_stmt__free_unpacked", "pg_query.pb-c.c", 6802, "message->base.descriptor == &pg_query__drop_user_mapping_stmt__descriptor");
}

void pg_query__alter_table_space_options_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_table_space_options_stmt__get_packed_size", "pg_query.pb-c.c", 6814, "message->base.descriptor == &pg_query__alter_table_space_options_stmt__descriptor");
}

void pg_query__alter_table_space_options_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_table_space_options_stmt__pack", "pg_query.pb-c.c", 6821, "message->base.descriptor == &pg_query__alter_table_space_options_stmt__descriptor");
}

void pg_query__alter_table_space_options_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_table_space_options_stmt__pack_to_buffer", "pg_query.pb-c.c", 6828, "message->base.descriptor == &pg_query__alter_table_space_options_stmt__descriptor");
}

void pg_query__alter_table_space_options_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_table_space_options_stmt__free_unpacked", "pg_query.pb-c.c", 6847, "message->base.descriptor == &pg_query__alter_table_space_options_stmt__descriptor");
}

void pg_query__alter_table_move_all_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_table_move_all_stmt__get_packed_size", "pg_query.pb-c.c", 6859, "message->base.descriptor == &pg_query__alter_table_move_all_stmt__descriptor");
}

void pg_query__alter_table_move_all_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_table_move_all_stmt__pack", "pg_query.pb-c.c", 6866, "message->base.descriptor == &pg_query__alter_table_move_all_stmt__descriptor");
}

void pg_query__alter_table_move_all_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_table_move_all_stmt__pack_to_buffer", "pg_query.pb-c.c", 6873, "message->base.descriptor == &pg_query__alter_table_move_all_stmt__descriptor");
}

void pg_query__alter_table_move_all_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_table_move_all_stmt__free_unpacked", "pg_query.pb-c.c", 6892, "message->base.descriptor == &pg_query__alter_table_move_all_stmt__descriptor");
}

void pg_query__sec_label_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__sec_label_stmt__get_packed_size", "pg_query.pb-c.c", 6904, "message->base.descriptor == &pg_query__sec_label_stmt__descriptor");
}

void pg_query__sec_label_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__sec_label_stmt__pack", "pg_query.pb-c.c", 6911, "message->base.descriptor == &pg_query__sec_label_stmt__descriptor");
}

void pg_query__sec_label_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__sec_label_stmt__pack_to_buffer", "pg_query.pb-c.c", 6918, "message->base.descriptor == &pg_query__sec_label_stmt__descriptor");
}

void pg_query__sec_label_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__sec_label_stmt__free_unpacked", "pg_query.pb-c.c", 6937, "message->base.descriptor == &pg_query__sec_label_stmt__descriptor");
}

void pg_query__create_foreign_table_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_foreign_table_stmt__get_packed_size", "pg_query.pb-c.c", 6949, "message->base.descriptor == &pg_query__create_foreign_table_stmt__descriptor");
}

void pg_query__create_foreign_table_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_foreign_table_stmt__pack", "pg_query.pb-c.c", 6956, "message->base.descriptor == &pg_query__create_foreign_table_stmt__descriptor");
}

void pg_query__create_foreign_table_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_foreign_table_stmt__pack_to_buffer", "pg_query.pb-c.c", 6963, "message->base.descriptor == &pg_query__create_foreign_table_stmt__descriptor");
}

void pg_query__create_foreign_table_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_foreign_table_stmt__free_unpacked", "pg_query.pb-c.c", 6982, "message->base.descriptor == &pg_query__create_foreign_table_stmt__descriptor");
}

void pg_query__import_foreign_schema_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__import_foreign_schema_stmt__get_packed_size", "pg_query.pb-c.c", 6994, "message->base.descriptor == &pg_query__import_foreign_schema_stmt__descriptor");
}

void pg_query__import_foreign_schema_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__import_foreign_schema_stmt__pack", "pg_query.pb-c.c", 7001, "message->base.descriptor == &pg_query__import_foreign_schema_stmt__descriptor");
}

void pg_query__import_foreign_schema_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__import_foreign_schema_stmt__pack_to_buffer", "pg_query.pb-c.c", 7008, "message->base.descriptor == &pg_query__import_foreign_schema_stmt__descriptor");
}

void pg_query__import_foreign_schema_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__import_foreign_schema_stmt__free_unpacked", "pg_query.pb-c.c", 7027, "message->base.descriptor == &pg_query__import_foreign_schema_stmt__descriptor");
}

void pg_query__create_extension_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_extension_stmt__get_packed_size", "pg_query.pb-c.c", 7039, "message->base.descriptor == &pg_query__create_extension_stmt__descriptor");
}

void pg_query__create_extension_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_extension_stmt__pack", "pg_query.pb-c.c", 7046, "message->base.descriptor == &pg_query__create_extension_stmt__descriptor");
}

void pg_query__create_extension_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_extension_stmt__pack_to_buffer", "pg_query.pb-c.c", 7053, "message->base.descriptor == &pg_query__create_extension_stmt__descriptor");
}

void pg_query__create_extension_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_extension_stmt__free_unpacked", "pg_query.pb-c.c", 7072, "message->base.descriptor == &pg_query__create_extension_stmt__descriptor");
}

void pg_query__alter_extension_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_extension_stmt__get_packed_size", "pg_query.pb-c.c", 7084, "message->base.descriptor == &pg_query__alter_extension_stmt__descriptor");
}

void pg_query__alter_extension_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_extension_stmt__pack", "pg_query.pb-c.c", 7091, "message->base.descriptor == &pg_query__alter_extension_stmt__descriptor");
}

void pg_query__alter_extension_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_extension_stmt__pack_to_buffer", "pg_query.pb-c.c", 7098, "message->base.descriptor == &pg_query__alter_extension_stmt__descriptor");
}

void pg_query__alter_extension_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_extension_stmt__free_unpacked", "pg_query.pb-c.c", 7117, "message->base.descriptor == &pg_query__alter_extension_stmt__descriptor");
}

void pg_query__alter_extension_contents_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_extension_contents_stmt__get_packed_size", "pg_query.pb-c.c", 7129, "message->base.descriptor == &pg_query__alter_extension_contents_stmt__descriptor");
}

void pg_query__alter_extension_contents_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_extension_contents_stmt__pack", "pg_query.pb-c.c", 7136, "message->base.descriptor == &pg_query__alter_extension_contents_stmt__descriptor");
}

void pg_query__alter_extension_contents_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_extension_contents_stmt__pack_to_buffer", "pg_query.pb-c.c", 7143, "message->base.descriptor == &pg_query__alter_extension_contents_stmt__descriptor");
}

void pg_query__alter_extension_contents_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_extension_contents_stmt__free_unpacked", "pg_query.pb-c.c", 7162, "message->base.descriptor == &pg_query__alter_extension_contents_stmt__descriptor");
}

void pg_query__create_event_trig_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_event_trig_stmt__get_packed_size", "pg_query.pb-c.c", 7174, "message->base.descriptor == &pg_query__create_event_trig_stmt__descriptor");
}

void pg_query__create_event_trig_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_event_trig_stmt__pack", "pg_query.pb-c.c", 7181, "message->base.descriptor == &pg_query__create_event_trig_stmt__descriptor");
}

void pg_query__create_event_trig_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_event_trig_stmt__pack_to_buffer", "pg_query.pb-c.c", 7188, "message->base.descriptor == &pg_query__create_event_trig_stmt__descriptor");
}

void pg_query__create_event_trig_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_event_trig_stmt__free_unpacked", "pg_query.pb-c.c", 7207, "message->base.descriptor == &pg_query__create_event_trig_stmt__descriptor");
}

void pg_query__alter_event_trig_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_event_trig_stmt__get_packed_size", "pg_query.pb-c.c", 7219, "message->base.descriptor == &pg_query__alter_event_trig_stmt__descriptor");
}

void pg_query__alter_event_trig_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_event_trig_stmt__pack", "pg_query.pb-c.c", 7226, "message->base.descriptor == &pg_query__alter_event_trig_stmt__descriptor");
}

void pg_query__alter_event_trig_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_event_trig_stmt__pack_to_buffer", "pg_query.pb-c.c", 7233, "message->base.descriptor == &pg_query__alter_event_trig_stmt__descriptor");
}

void pg_query__alter_event_trig_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_event_trig_stmt__free_unpacked", "pg_query.pb-c.c", 7252, "message->base.descriptor == &pg_query__alter_event_trig_stmt__descriptor");
}

void pg_query__refresh_mat_view_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__refresh_mat_view_stmt__get_packed_size", "pg_query.pb-c.c", 7264, "message->base.descriptor == &pg_query__refresh_mat_view_stmt__descriptor");
}

void pg_query__refresh_mat_view_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__refresh_mat_view_stmt__pack", "pg_query.pb-c.c", 7271, "message->base.descriptor == &pg_query__refresh_mat_view_stmt__descriptor");
}

void pg_query__refresh_mat_view_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__refresh_mat_view_stmt__pack_to_buffer", "pg_query.pb-c.c", 7278, "message->base.descriptor == &pg_query__refresh_mat_view_stmt__descriptor");
}

void pg_query__refresh_mat_view_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__refresh_mat_view_stmt__free_unpacked", "pg_query.pb-c.c", 7297, "message->base.descriptor == &pg_query__refresh_mat_view_stmt__descriptor");
}

void pg_query__replica_identity_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__replica_identity_stmt__get_packed_size", "pg_query.pb-c.c", 7309, "message->base.descriptor == &pg_query__replica_identity_stmt__descriptor");
}

void pg_query__replica_identity_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__replica_identity_stmt__pack", "pg_query.pb-c.c", 7316, "message->base.descriptor == &pg_query__replica_identity_stmt__descriptor");
}

void pg_query__replica_identity_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__replica_identity_stmt__pack_to_buffer", "pg_query.pb-c.c", 7323, "message->base.descriptor == &pg_query__replica_identity_stmt__descriptor");
}

void pg_query__replica_identity_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__replica_identity_stmt__free_unpacked", "pg_query.pb-c.c", 7342, "message->base.descriptor == &pg_query__replica_identity_stmt__descriptor");
}

void pg_query__alter_system_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_system_stmt__get_packed_size", "pg_query.pb-c.c", 7354, "message->base.descriptor == &pg_query__alter_system_stmt__descriptor");
}

void pg_query__alter_system_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_system_stmt__pack", "pg_query.pb-c.c", 7361, "message->base.descriptor == &pg_query__alter_system_stmt__descriptor");
}

void pg_query__alter_system_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_system_stmt__pack_to_buffer", "pg_query.pb-c.c", 7368, "message->base.descriptor == &pg_query__alter_system_stmt__descriptor");
}

void pg_query__alter_system_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_system_stmt__free_unpacked", "pg_query.pb-c.c", 7387, "message->base.descriptor == &pg_query__alter_system_stmt__descriptor");
}

void pg_query__create_policy_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_policy_stmt__get_packed_size", "pg_query.pb-c.c", 7399, "message->base.descriptor == &pg_query__create_policy_stmt__descriptor");
}

void pg_query__create_policy_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_policy_stmt__pack", "pg_query.pb-c.c", 7406, "message->base.descriptor == &pg_query__create_policy_stmt__descriptor");
}

void pg_query__create_policy_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_policy_stmt__pack_to_buffer", "pg_query.pb-c.c", 7413, "message->base.descriptor == &pg_query__create_policy_stmt__descriptor");
}

void pg_query__create_policy_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_policy_stmt__free_unpacked", "pg_query.pb-c.c", 7432, "message->base.descriptor == &pg_query__create_policy_stmt__descriptor");
}

void pg_query__alter_policy_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_policy_stmt__get_packed_size", "pg_query.pb-c.c", 7444, "message->base.descriptor == &pg_query__alter_policy_stmt__descriptor");
}

void pg_query__alter_policy_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_policy_stmt__pack", "pg_query.pb-c.c", 7451, "message->base.descriptor == &pg_query__alter_policy_stmt__descriptor");
}

void pg_query__alter_policy_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_policy_stmt__pack_to_buffer", "pg_query.pb-c.c", 7458, "message->base.descriptor == &pg_query__alter_policy_stmt__descriptor");
}

void pg_query__alter_policy_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_policy_stmt__free_unpacked", "pg_query.pb-c.c", 7477, "message->base.descriptor == &pg_query__alter_policy_stmt__descriptor");
}

void pg_query__create_transform_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_transform_stmt__get_packed_size", "pg_query.pb-c.c", 7489, "message->base.descriptor == &pg_query__create_transform_stmt__descriptor");
}

void pg_query__create_transform_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_transform_stmt__pack", "pg_query.pb-c.c", 7496, "message->base.descriptor == &pg_query__create_transform_stmt__descriptor");
}

void pg_query__create_transform_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_transform_stmt__pack_to_buffer", "pg_query.pb-c.c", 7503, "message->base.descriptor == &pg_query__create_transform_stmt__descriptor");
}

void pg_query__create_transform_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_transform_stmt__free_unpacked", "pg_query.pb-c.c", 7522, "message->base.descriptor == &pg_query__create_transform_stmt__descriptor");
}

void pg_query__create_am_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_am_stmt__get_packed_size", "pg_query.pb-c.c", 7534, "message->base.descriptor == &pg_query__create_am_stmt__descriptor");
}

void pg_query__create_am_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_am_stmt__pack", "pg_query.pb-c.c", 7541, "message->base.descriptor == &pg_query__create_am_stmt__descriptor");
}

void pg_query__create_am_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_am_stmt__pack_to_buffer", "pg_query.pb-c.c", 7548, "message->base.descriptor == &pg_query__create_am_stmt__descriptor");
}

void pg_query__create_am_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_am_stmt__free_unpacked", "pg_query.pb-c.c", 7567, "message->base.descriptor == &pg_query__create_am_stmt__descriptor");
}

void pg_query__create_publication_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_publication_stmt__get_packed_size", "pg_query.pb-c.c", 7579, "message->base.descriptor == &pg_query__create_publication_stmt__descriptor");
}

void pg_query__create_publication_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_publication_stmt__pack", "pg_query.pb-c.c", 7586, "message->base.descriptor == &pg_query__create_publication_stmt__descriptor");
}

void pg_query__create_publication_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_publication_stmt__pack_to_buffer", "pg_query.pb-c.c", 7593, "message->base.descriptor == &pg_query__create_publication_stmt__descriptor");
}

void pg_query__create_publication_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_publication_stmt__free_unpacked", "pg_query.pb-c.c", 7612, "message->base.descriptor == &pg_query__create_publication_stmt__descriptor");
}

void pg_query__alter_publication_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_publication_stmt__get_packed_size", "pg_query.pb-c.c", 7624, "message->base.descriptor == &pg_query__alter_publication_stmt__descriptor");
}

void pg_query__alter_publication_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_publication_stmt__pack", "pg_query.pb-c.c", 7631, "message->base.descriptor == &pg_query__alter_publication_stmt__descriptor");
}

void pg_query__alter_publication_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_publication_stmt__pack_to_buffer", "pg_query.pb-c.c", 7638, "message->base.descriptor == &pg_query__alter_publication_stmt__descriptor");
}

void pg_query__alter_publication_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_publication_stmt__free_unpacked", "pg_query.pb-c.c", 7657, "message->base.descriptor == &pg_query__alter_publication_stmt__descriptor");
}

void pg_query__create_subscription_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_subscription_stmt__get_packed_size", "pg_query.pb-c.c", 7669, "message->base.descriptor == &pg_query__create_subscription_stmt__descriptor");
}

void pg_query__create_subscription_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_subscription_stmt__pack", "pg_query.pb-c.c", 7676, "message->base.descriptor == &pg_query__create_subscription_stmt__descriptor");
}

void pg_query__create_subscription_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_subscription_stmt__pack_to_buffer", "pg_query.pb-c.c", 7683, "message->base.descriptor == &pg_query__create_subscription_stmt__descriptor");
}

void pg_query__create_subscription_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_subscription_stmt__free_unpacked", "pg_query.pb-c.c", 7702, "message->base.descriptor == &pg_query__create_subscription_stmt__descriptor");
}

void pg_query__alter_subscription_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_subscription_stmt__get_packed_size", "pg_query.pb-c.c", 7714, "message->base.descriptor == &pg_query__alter_subscription_stmt__descriptor");
}

void pg_query__alter_subscription_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_subscription_stmt__pack", "pg_query.pb-c.c", 7721, "message->base.descriptor == &pg_query__alter_subscription_stmt__descriptor");
}

void pg_query__alter_subscription_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_subscription_stmt__pack_to_buffer", "pg_query.pb-c.c", 7728, "message->base.descriptor == &pg_query__alter_subscription_stmt__descriptor");
}

void pg_query__alter_subscription_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_subscription_stmt__free_unpacked", "pg_query.pb-c.c", 7747, "message->base.descriptor == &pg_query__alter_subscription_stmt__descriptor");
}

void pg_query__drop_subscription_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__drop_subscription_stmt__get_packed_size", "pg_query.pb-c.c", 7759, "message->base.descriptor == &pg_query__drop_subscription_stmt__descriptor");
}

void pg_query__drop_subscription_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__drop_subscription_stmt__pack", "pg_query.pb-c.c", 7766, "message->base.descriptor == &pg_query__drop_subscription_stmt__descriptor");
}

void pg_query__drop_subscription_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__drop_subscription_stmt__pack_to_buffer", "pg_query.pb-c.c", 7773, "message->base.descriptor == &pg_query__drop_subscription_stmt__descriptor");
}

void pg_query__drop_subscription_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__drop_subscription_stmt__free_unpacked", "pg_query.pb-c.c", 7792, "message->base.descriptor == &pg_query__drop_subscription_stmt__descriptor");
}

void pg_query__create_stats_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_stats_stmt__get_packed_size", "pg_query.pb-c.c", 7804, "message->base.descriptor == &pg_query__create_stats_stmt__descriptor");
}

void pg_query__create_stats_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_stats_stmt__pack", "pg_query.pb-c.c", 7811, "message->base.descriptor == &pg_query__create_stats_stmt__descriptor");
}

void pg_query__create_stats_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_stats_stmt__pack_to_buffer", "pg_query.pb-c.c", 7818, "message->base.descriptor == &pg_query__create_stats_stmt__descriptor");
}

void pg_query__create_stats_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_stats_stmt__free_unpacked", "pg_query.pb-c.c", 7837, "message->base.descriptor == &pg_query__create_stats_stmt__descriptor");
}

void pg_query__alter_collation_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_collation_stmt__get_packed_size", "pg_query.pb-c.c", 7849, "message->base.descriptor == &pg_query__alter_collation_stmt__descriptor");
}

void pg_query__alter_collation_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_collation_stmt__pack", "pg_query.pb-c.c", 7856, "message->base.descriptor == &pg_query__alter_collation_stmt__descriptor");
}

void pg_query__alter_collation_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_collation_stmt__pack_to_buffer", "pg_query.pb-c.c", 7863, "message->base.descriptor == &pg_query__alter_collation_stmt__descriptor");
}

void pg_query__alter_collation_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_collation_stmt__free_unpacked", "pg_query.pb-c.c", 7882, "message->base.descriptor == &pg_query__alter_collation_stmt__descriptor");
}

void pg_query__call_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__call_stmt__get_packed_size", "pg_query.pb-c.c", 7894, "message->base.descriptor == &pg_query__call_stmt__descriptor");
}

void pg_query__call_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__call_stmt__pack", "pg_query.pb-c.c", 7901, "message->base.descriptor == &pg_query__call_stmt__descriptor");
}

void pg_query__call_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__call_stmt__pack_to_buffer", "pg_query.pb-c.c", 7908, "message->base.descriptor == &pg_query__call_stmt__descriptor");
}

void pg_query__call_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__call_stmt__free_unpacked", "pg_query.pb-c.c", 7927, "message->base.descriptor == &pg_query__call_stmt__descriptor");
}

void pg_query__alter_stats_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_stats_stmt__get_packed_size", "pg_query.pb-c.c", 7939, "message->base.descriptor == &pg_query__alter_stats_stmt__descriptor");
}

void pg_query__alter_stats_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_stats_stmt__pack", "pg_query.pb-c.c", 7946, "message->base.descriptor == &pg_query__alter_stats_stmt__descriptor");
}

void pg_query__alter_stats_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_stats_stmt__pack_to_buffer", "pg_query.pb-c.c", 7953, "message->base.descriptor == &pg_query__alter_stats_stmt__descriptor");
}

void pg_query__alter_stats_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_stats_stmt__free_unpacked", "pg_query.pb-c.c", 7972, "message->base.descriptor == &pg_query__alter_stats_stmt__descriptor");
}

void pg_query__a__expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__a__expr__get_packed_size", "pg_query.pb-c.c", 7984, "message->base.descriptor == &pg_query__a__expr__descriptor");
}

void pg_query__a__expr__pack_cold_1()
{
  __assert_rtn("pg_query__a__expr__pack", "pg_query.pb-c.c", 7991, "message->base.descriptor == &pg_query__a__expr__descriptor");
}

void pg_query__a__expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__a__expr__pack_to_buffer", "pg_query.pb-c.c", 7998, "message->base.descriptor == &pg_query__a__expr__descriptor");
}

void pg_query__a__expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__a__expr__free_unpacked", "pg_query.pb-c.c", 8017, "message->base.descriptor == &pg_query__a__expr__descriptor");
}

void pg_query__column_ref__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__column_ref__get_packed_size", "pg_query.pb-c.c", 8029, "message->base.descriptor == &pg_query__column_ref__descriptor");
}

void pg_query__column_ref__pack_cold_1()
{
  __assert_rtn("pg_query__column_ref__pack", "pg_query.pb-c.c", 8036, "message->base.descriptor == &pg_query__column_ref__descriptor");
}

void pg_query__column_ref__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__column_ref__pack_to_buffer", "pg_query.pb-c.c", 8043, "message->base.descriptor == &pg_query__column_ref__descriptor");
}

void pg_query__column_ref__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__column_ref__free_unpacked", "pg_query.pb-c.c", 8062, "message->base.descriptor == &pg_query__column_ref__descriptor");
}

void pg_query__param_ref__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__param_ref__get_packed_size", "pg_query.pb-c.c", 8074, "message->base.descriptor == &pg_query__param_ref__descriptor");
}

void pg_query__param_ref__pack_cold_1()
{
  __assert_rtn("pg_query__param_ref__pack", "pg_query.pb-c.c", 8081, "message->base.descriptor == &pg_query__param_ref__descriptor");
}

void pg_query__param_ref__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__param_ref__pack_to_buffer", "pg_query.pb-c.c", 8088, "message->base.descriptor == &pg_query__param_ref__descriptor");
}

void pg_query__param_ref__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__param_ref__free_unpacked", "pg_query.pb-c.c", 8107, "message->base.descriptor == &pg_query__param_ref__descriptor");
}

void pg_query__a__const__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__a__const__get_packed_size", "pg_query.pb-c.c", 8119, "message->base.descriptor == &pg_query__a__const__descriptor");
}

void pg_query__a__const__pack_cold_1()
{
  __assert_rtn("pg_query__a__const__pack", "pg_query.pb-c.c", 8126, "message->base.descriptor == &pg_query__a__const__descriptor");
}

void pg_query__a__const__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__a__const__pack_to_buffer", "pg_query.pb-c.c", 8133, "message->base.descriptor == &pg_query__a__const__descriptor");
}

void pg_query__a__const__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__a__const__free_unpacked", "pg_query.pb-c.c", 8152, "message->base.descriptor == &pg_query__a__const__descriptor");
}

void pg_query__func_call__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__func_call__get_packed_size", "pg_query.pb-c.c", 8164, "message->base.descriptor == &pg_query__func_call__descriptor");
}

void pg_query__func_call__pack_cold_1()
{
  __assert_rtn("pg_query__func_call__pack", "pg_query.pb-c.c", 8171, "message->base.descriptor == &pg_query__func_call__descriptor");
}

void pg_query__func_call__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__func_call__pack_to_buffer", "pg_query.pb-c.c", 8178, "message->base.descriptor == &pg_query__func_call__descriptor");
}

void pg_query__func_call__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__func_call__free_unpacked", "pg_query.pb-c.c", 8197, "message->base.descriptor == &pg_query__func_call__descriptor");
}

void pg_query__a__star__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__a__star__get_packed_size", "pg_query.pb-c.c", 8209, "message->base.descriptor == &pg_query__a__star__descriptor");
}

void pg_query__a__star__pack_cold_1()
{
  __assert_rtn("pg_query__a__star__pack", "pg_query.pb-c.c", 8216, "message->base.descriptor == &pg_query__a__star__descriptor");
}

void pg_query__a__star__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__a__star__pack_to_buffer", "pg_query.pb-c.c", 8223, "message->base.descriptor == &pg_query__a__star__descriptor");
}

void pg_query__a__star__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__a__star__free_unpacked", "pg_query.pb-c.c", 8242, "message->base.descriptor == &pg_query__a__star__descriptor");
}

void pg_query__a__indices__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__a__indices__get_packed_size", "pg_query.pb-c.c", 8254, "message->base.descriptor == &pg_query__a__indices__descriptor");
}

void pg_query__a__indices__pack_cold_1()
{
  __assert_rtn("pg_query__a__indices__pack", "pg_query.pb-c.c", 8261, "message->base.descriptor == &pg_query__a__indices__descriptor");
}

void pg_query__a__indices__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__a__indices__pack_to_buffer", "pg_query.pb-c.c", 8268, "message->base.descriptor == &pg_query__a__indices__descriptor");
}

void pg_query__a__indices__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__a__indices__free_unpacked", "pg_query.pb-c.c", 8287, "message->base.descriptor == &pg_query__a__indices__descriptor");
}

void pg_query__a__indirection__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__a__indirection__get_packed_size", "pg_query.pb-c.c", 8299, "message->base.descriptor == &pg_query__a__indirection__descriptor");
}

void pg_query__a__indirection__pack_cold_1()
{
  __assert_rtn("pg_query__a__indirection__pack", "pg_query.pb-c.c", 8306, "message->base.descriptor == &pg_query__a__indirection__descriptor");
}

void pg_query__a__indirection__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__a__indirection__pack_to_buffer", "pg_query.pb-c.c", 8313, "message->base.descriptor == &pg_query__a__indirection__descriptor");
}

void pg_query__a__indirection__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__a__indirection__free_unpacked", "pg_query.pb-c.c", 8332, "message->base.descriptor == &pg_query__a__indirection__descriptor");
}

void pg_query__a__array_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__a__array_expr__get_packed_size", "pg_query.pb-c.c", 8344, "message->base.descriptor == &pg_query__a__array_expr__descriptor");
}

void pg_query__a__array_expr__pack_cold_1()
{
  __assert_rtn("pg_query__a__array_expr__pack", "pg_query.pb-c.c", 8351, "message->base.descriptor == &pg_query__a__array_expr__descriptor");
}

void pg_query__a__array_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__a__array_expr__pack_to_buffer", "pg_query.pb-c.c", 8358, "message->base.descriptor == &pg_query__a__array_expr__descriptor");
}

void pg_query__a__array_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__a__array_expr__free_unpacked", "pg_query.pb-c.c", 8377, "message->base.descriptor == &pg_query__a__array_expr__descriptor");
}

void pg_query__res_target__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__res_target__get_packed_size", "pg_query.pb-c.c", 8389, "message->base.descriptor == &pg_query__res_target__descriptor");
}

void pg_query__res_target__pack_cold_1()
{
  __assert_rtn("pg_query__res_target__pack", "pg_query.pb-c.c", 8396, "message->base.descriptor == &pg_query__res_target__descriptor");
}

void pg_query__res_target__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__res_target__pack_to_buffer", "pg_query.pb-c.c", 8403, "message->base.descriptor == &pg_query__res_target__descriptor");
}

void pg_query__res_target__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__res_target__free_unpacked", "pg_query.pb-c.c", 8422, "message->base.descriptor == &pg_query__res_target__descriptor");
}

void pg_query__multi_assign_ref__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__multi_assign_ref__get_packed_size", "pg_query.pb-c.c", 8434, "message->base.descriptor == &pg_query__multi_assign_ref__descriptor");
}

void pg_query__multi_assign_ref__pack_cold_1()
{
  __assert_rtn("pg_query__multi_assign_ref__pack", "pg_query.pb-c.c", 8441, "message->base.descriptor == &pg_query__multi_assign_ref__descriptor");
}

void pg_query__multi_assign_ref__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__multi_assign_ref__pack_to_buffer", "pg_query.pb-c.c", 8448, "message->base.descriptor == &pg_query__multi_assign_ref__descriptor");
}

void pg_query__multi_assign_ref__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__multi_assign_ref__free_unpacked", "pg_query.pb-c.c", 8467, "message->base.descriptor == &pg_query__multi_assign_ref__descriptor");
}

void pg_query__type_cast__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__type_cast__get_packed_size", "pg_query.pb-c.c", 8479, "message->base.descriptor == &pg_query__type_cast__descriptor");
}

void pg_query__type_cast__pack_cold_1()
{
  __assert_rtn("pg_query__type_cast__pack", "pg_query.pb-c.c", 8486, "message->base.descriptor == &pg_query__type_cast__descriptor");
}

void pg_query__type_cast__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__type_cast__pack_to_buffer", "pg_query.pb-c.c", 8493, "message->base.descriptor == &pg_query__type_cast__descriptor");
}

void pg_query__type_cast__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__type_cast__free_unpacked", "pg_query.pb-c.c", 8512, "message->base.descriptor == &pg_query__type_cast__descriptor");
}

void pg_query__collate_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__collate_clause__get_packed_size", "pg_query.pb-c.c", 8524, "message->base.descriptor == &pg_query__collate_clause__descriptor");
}

void pg_query__collate_clause__pack_cold_1()
{
  __assert_rtn("pg_query__collate_clause__pack", "pg_query.pb-c.c", 8531, "message->base.descriptor == &pg_query__collate_clause__descriptor");
}

void pg_query__collate_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__collate_clause__pack_to_buffer", "pg_query.pb-c.c", 8538, "message->base.descriptor == &pg_query__collate_clause__descriptor");
}

void pg_query__collate_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__collate_clause__free_unpacked", "pg_query.pb-c.c", 8557, "message->base.descriptor == &pg_query__collate_clause__descriptor");
}

void pg_query__sort_by__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__sort_by__get_packed_size", "pg_query.pb-c.c", 8569, "message->base.descriptor == &pg_query__sort_by__descriptor");
}

void pg_query__sort_by__pack_cold_1()
{
  __assert_rtn("pg_query__sort_by__pack", "pg_query.pb-c.c", 8576, "message->base.descriptor == &pg_query__sort_by__descriptor");
}

void pg_query__sort_by__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__sort_by__pack_to_buffer", "pg_query.pb-c.c", 8583, "message->base.descriptor == &pg_query__sort_by__descriptor");
}

void pg_query__sort_by__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__sort_by__free_unpacked", "pg_query.pb-c.c", 8602, "message->base.descriptor == &pg_query__sort_by__descriptor");
}

void pg_query__window_def__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__window_def__get_packed_size", "pg_query.pb-c.c", 8614, "message->base.descriptor == &pg_query__window_def__descriptor");
}

void pg_query__window_def__pack_cold_1()
{
  __assert_rtn("pg_query__window_def__pack", "pg_query.pb-c.c", 8621, "message->base.descriptor == &pg_query__window_def__descriptor");
}

void pg_query__window_def__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__window_def__pack_to_buffer", "pg_query.pb-c.c", 8628, "message->base.descriptor == &pg_query__window_def__descriptor");
}

void pg_query__window_def__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__window_def__free_unpacked", "pg_query.pb-c.c", 8647, "message->base.descriptor == &pg_query__window_def__descriptor");
}

void pg_query__range_subselect__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__range_subselect__get_packed_size", "pg_query.pb-c.c", 8659, "message->base.descriptor == &pg_query__range_subselect__descriptor");
}

void pg_query__range_subselect__pack_cold_1()
{
  __assert_rtn("pg_query__range_subselect__pack", "pg_query.pb-c.c", 8666, "message->base.descriptor == &pg_query__range_subselect__descriptor");
}

void pg_query__range_subselect__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__range_subselect__pack_to_buffer", "pg_query.pb-c.c", 8673, "message->base.descriptor == &pg_query__range_subselect__descriptor");
}

void pg_query__range_subselect__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__range_subselect__free_unpacked", "pg_query.pb-c.c", 8692, "message->base.descriptor == &pg_query__range_subselect__descriptor");
}

void pg_query__range_function__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__range_function__get_packed_size", "pg_query.pb-c.c", 8704, "message->base.descriptor == &pg_query__range_function__descriptor");
}

void pg_query__range_function__pack_cold_1()
{
  __assert_rtn("pg_query__range_function__pack", "pg_query.pb-c.c", 8711, "message->base.descriptor == &pg_query__range_function__descriptor");
}

void pg_query__range_function__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__range_function__pack_to_buffer", "pg_query.pb-c.c", 8718, "message->base.descriptor == &pg_query__range_function__descriptor");
}

void pg_query__range_function__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__range_function__free_unpacked", "pg_query.pb-c.c", 8737, "message->base.descriptor == &pg_query__range_function__descriptor");
}

void pg_query__range_table_sample__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__range_table_sample__get_packed_size", "pg_query.pb-c.c", 8749, "message->base.descriptor == &pg_query__range_table_sample__descriptor");
}

void pg_query__range_table_sample__pack_cold_1()
{
  __assert_rtn("pg_query__range_table_sample__pack", "pg_query.pb-c.c", 8756, "message->base.descriptor == &pg_query__range_table_sample__descriptor");
}

void pg_query__range_table_sample__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__range_table_sample__pack_to_buffer", "pg_query.pb-c.c", 8763, "message->base.descriptor == &pg_query__range_table_sample__descriptor");
}

void pg_query__range_table_sample__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__range_table_sample__free_unpacked", "pg_query.pb-c.c", 8782, "message->base.descriptor == &pg_query__range_table_sample__descriptor");
}

void pg_query__range_table_func__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__range_table_func__get_packed_size", "pg_query.pb-c.c", 8794, "message->base.descriptor == &pg_query__range_table_func__descriptor");
}

void pg_query__range_table_func__pack_cold_1()
{
  __assert_rtn("pg_query__range_table_func__pack", "pg_query.pb-c.c", 8801, "message->base.descriptor == &pg_query__range_table_func__descriptor");
}

void pg_query__range_table_func__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__range_table_func__pack_to_buffer", "pg_query.pb-c.c", 8808, "message->base.descriptor == &pg_query__range_table_func__descriptor");
}

void pg_query__range_table_func__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__range_table_func__free_unpacked", "pg_query.pb-c.c", 8827, "message->base.descriptor == &pg_query__range_table_func__descriptor");
}

void pg_query__range_table_func_col__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__range_table_func_col__get_packed_size", "pg_query.pb-c.c", 8839, "message->base.descriptor == &pg_query__range_table_func_col__descriptor");
}

void pg_query__range_table_func_col__pack_cold_1()
{
  __assert_rtn("pg_query__range_table_func_col__pack", "pg_query.pb-c.c", 8846, "message->base.descriptor == &pg_query__range_table_func_col__descriptor");
}

void pg_query__range_table_func_col__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__range_table_func_col__pack_to_buffer", "pg_query.pb-c.c", 8853, "message->base.descriptor == &pg_query__range_table_func_col__descriptor");
}

void pg_query__range_table_func_col__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__range_table_func_col__free_unpacked", "pg_query.pb-c.c", 8872, "message->base.descriptor == &pg_query__range_table_func_col__descriptor");
}

void pg_query__type_name__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__type_name__get_packed_size", "pg_query.pb-c.c", 8884, "message->base.descriptor == &pg_query__type_name__descriptor");
}

void pg_query__type_name__pack_cold_1()
{
  __assert_rtn("pg_query__type_name__pack", "pg_query.pb-c.c", 8891, "message->base.descriptor == &pg_query__type_name__descriptor");
}

void pg_query__type_name__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__type_name__pack_to_buffer", "pg_query.pb-c.c", 8898, "message->base.descriptor == &pg_query__type_name__descriptor");
}

void pg_query__type_name__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__type_name__free_unpacked", "pg_query.pb-c.c", 8917, "message->base.descriptor == &pg_query__type_name__descriptor");
}

void pg_query__column_def__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__column_def__get_packed_size", "pg_query.pb-c.c", 8929, "message->base.descriptor == &pg_query__column_def__descriptor");
}

void pg_query__column_def__pack_cold_1()
{
  __assert_rtn("pg_query__column_def__pack", "pg_query.pb-c.c", 8936, "message->base.descriptor == &pg_query__column_def__descriptor");
}

void pg_query__column_def__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__column_def__pack_to_buffer", "pg_query.pb-c.c", 8943, "message->base.descriptor == &pg_query__column_def__descriptor");
}

void pg_query__column_def__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__column_def__free_unpacked", "pg_query.pb-c.c", 8962, "message->base.descriptor == &pg_query__column_def__descriptor");
}

void pg_query__index_elem__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__index_elem__get_packed_size", "pg_query.pb-c.c", 8974, "message->base.descriptor == &pg_query__index_elem__descriptor");
}

void pg_query__index_elem__pack_cold_1()
{
  __assert_rtn("pg_query__index_elem__pack", "pg_query.pb-c.c", 8981, "message->base.descriptor == &pg_query__index_elem__descriptor");
}

void pg_query__index_elem__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__index_elem__pack_to_buffer", "pg_query.pb-c.c", 8988, "message->base.descriptor == &pg_query__index_elem__descriptor");
}

void pg_query__index_elem__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__index_elem__free_unpacked", "pg_query.pb-c.c", 9007, "message->base.descriptor == &pg_query__index_elem__descriptor");
}

void pg_query__constraint__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__constraint__get_packed_size", "pg_query.pb-c.c", 9019, "message->base.descriptor == &pg_query__constraint__descriptor");
}

void pg_query__constraint__pack_cold_1()
{
  __assert_rtn("pg_query__constraint__pack", "pg_query.pb-c.c", 9026, "message->base.descriptor == &pg_query__constraint__descriptor");
}

void pg_query__constraint__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__constraint__pack_to_buffer", "pg_query.pb-c.c", 9033, "message->base.descriptor == &pg_query__constraint__descriptor");
}

void pg_query__constraint__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__constraint__free_unpacked", "pg_query.pb-c.c", 9052, "message->base.descriptor == &pg_query__constraint__descriptor");
}

void pg_query__def_elem__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__def_elem__get_packed_size", "pg_query.pb-c.c", 9064, "message->base.descriptor == &pg_query__def_elem__descriptor");
}

void pg_query__def_elem__pack_cold_1()
{
  __assert_rtn("pg_query__def_elem__pack", "pg_query.pb-c.c", 9071, "message->base.descriptor == &pg_query__def_elem__descriptor");
}

void pg_query__def_elem__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__def_elem__pack_to_buffer", "pg_query.pb-c.c", 9078, "message->base.descriptor == &pg_query__def_elem__descriptor");
}

void pg_query__def_elem__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__def_elem__free_unpacked", "pg_query.pb-c.c", 9097, "message->base.descriptor == &pg_query__def_elem__descriptor");
}

void pg_query__range_tbl_entry__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__range_tbl_entry__get_packed_size", "pg_query.pb-c.c", 9109, "message->base.descriptor == &pg_query__range_tbl_entry__descriptor");
}

void pg_query__range_tbl_entry__pack_cold_1()
{
  __assert_rtn("pg_query__range_tbl_entry__pack", "pg_query.pb-c.c", 9116, "message->base.descriptor == &pg_query__range_tbl_entry__descriptor");
}

void pg_query__range_tbl_entry__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__range_tbl_entry__pack_to_buffer", "pg_query.pb-c.c", 9123, "message->base.descriptor == &pg_query__range_tbl_entry__descriptor");
}

void pg_query__range_tbl_entry__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__range_tbl_entry__free_unpacked", "pg_query.pb-c.c", 9142, "message->base.descriptor == &pg_query__range_tbl_entry__descriptor");
}

void pg_query__range_tbl_function__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__range_tbl_function__get_packed_size", "pg_query.pb-c.c", 9154, "message->base.descriptor == &pg_query__range_tbl_function__descriptor");
}

void pg_query__range_tbl_function__pack_cold_1()
{
  __assert_rtn("pg_query__range_tbl_function__pack", "pg_query.pb-c.c", 9161, "message->base.descriptor == &pg_query__range_tbl_function__descriptor");
}

void pg_query__range_tbl_function__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__range_tbl_function__pack_to_buffer", "pg_query.pb-c.c", 9168, "message->base.descriptor == &pg_query__range_tbl_function__descriptor");
}

void pg_query__range_tbl_function__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__range_tbl_function__free_unpacked", "pg_query.pb-c.c", 9187, "message->base.descriptor == &pg_query__range_tbl_function__descriptor");
}

void pg_query__table_sample_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__table_sample_clause__get_packed_size", "pg_query.pb-c.c", 9199, "message->base.descriptor == &pg_query__table_sample_clause__descriptor");
}

void pg_query__table_sample_clause__pack_cold_1()
{
  __assert_rtn("pg_query__table_sample_clause__pack", "pg_query.pb-c.c", 9206, "message->base.descriptor == &pg_query__table_sample_clause__descriptor");
}

void pg_query__table_sample_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__table_sample_clause__pack_to_buffer", "pg_query.pb-c.c", 9213, "message->base.descriptor == &pg_query__table_sample_clause__descriptor");
}

void pg_query__table_sample_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__table_sample_clause__free_unpacked", "pg_query.pb-c.c", 9232, "message->base.descriptor == &pg_query__table_sample_clause__descriptor");
}

void pg_query__with_check_option__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__with_check_option__get_packed_size", "pg_query.pb-c.c", 9244, "message->base.descriptor == &pg_query__with_check_option__descriptor");
}

void pg_query__with_check_option__pack_cold_1()
{
  __assert_rtn("pg_query__with_check_option__pack", "pg_query.pb-c.c", 9251, "message->base.descriptor == &pg_query__with_check_option__descriptor");
}

void pg_query__with_check_option__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__with_check_option__pack_to_buffer", "pg_query.pb-c.c", 9258, "message->base.descriptor == &pg_query__with_check_option__descriptor");
}

void pg_query__with_check_option__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__with_check_option__free_unpacked", "pg_query.pb-c.c", 9277, "message->base.descriptor == &pg_query__with_check_option__descriptor");
}

void pg_query__sort_group_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__sort_group_clause__get_packed_size", "pg_query.pb-c.c", 9289, "message->base.descriptor == &pg_query__sort_group_clause__descriptor");
}

void pg_query__sort_group_clause__pack_cold_1()
{
  __assert_rtn("pg_query__sort_group_clause__pack", "pg_query.pb-c.c", 9296, "message->base.descriptor == &pg_query__sort_group_clause__descriptor");
}

void pg_query__sort_group_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__sort_group_clause__pack_to_buffer", "pg_query.pb-c.c", 9303, "message->base.descriptor == &pg_query__sort_group_clause__descriptor");
}

void pg_query__sort_group_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__sort_group_clause__free_unpacked", "pg_query.pb-c.c", 9322, "message->base.descriptor == &pg_query__sort_group_clause__descriptor");
}

void pg_query__grouping_set__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__grouping_set__get_packed_size", "pg_query.pb-c.c", 9334, "message->base.descriptor == &pg_query__grouping_set__descriptor");
}

void pg_query__grouping_set__pack_cold_1()
{
  __assert_rtn("pg_query__grouping_set__pack", "pg_query.pb-c.c", 9341, "message->base.descriptor == &pg_query__grouping_set__descriptor");
}

void pg_query__grouping_set__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__grouping_set__pack_to_buffer", "pg_query.pb-c.c", 9348, "message->base.descriptor == &pg_query__grouping_set__descriptor");
}

void pg_query__grouping_set__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__grouping_set__free_unpacked", "pg_query.pb-c.c", 9367, "message->base.descriptor == &pg_query__grouping_set__descriptor");
}

void pg_query__window_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__window_clause__get_packed_size", "pg_query.pb-c.c", 9379, "message->base.descriptor == &pg_query__window_clause__descriptor");
}

void pg_query__window_clause__pack_cold_1()
{
  __assert_rtn("pg_query__window_clause__pack", "pg_query.pb-c.c", 9386, "message->base.descriptor == &pg_query__window_clause__descriptor");
}

void pg_query__window_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__window_clause__pack_to_buffer", "pg_query.pb-c.c", 9393, "message->base.descriptor == &pg_query__window_clause__descriptor");
}

void pg_query__window_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__window_clause__free_unpacked", "pg_query.pb-c.c", 9412, "message->base.descriptor == &pg_query__window_clause__descriptor");
}

void pg_query__object_with_args__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__object_with_args__get_packed_size", "pg_query.pb-c.c", 9424, "message->base.descriptor == &pg_query__object_with_args__descriptor");
}

void pg_query__object_with_args__pack_cold_1()
{
  __assert_rtn("pg_query__object_with_args__pack", "pg_query.pb-c.c", 9431, "message->base.descriptor == &pg_query__object_with_args__descriptor");
}

void pg_query__object_with_args__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__object_with_args__pack_to_buffer", "pg_query.pb-c.c", 9438, "message->base.descriptor == &pg_query__object_with_args__descriptor");
}

void pg_query__object_with_args__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__object_with_args__free_unpacked", "pg_query.pb-c.c", 9457, "message->base.descriptor == &pg_query__object_with_args__descriptor");
}

void pg_query__access_priv__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__access_priv__get_packed_size", "pg_query.pb-c.c", 9469, "message->base.descriptor == &pg_query__access_priv__descriptor");
}

void pg_query__access_priv__pack_cold_1()
{
  __assert_rtn("pg_query__access_priv__pack", "pg_query.pb-c.c", 9476, "message->base.descriptor == &pg_query__access_priv__descriptor");
}

void pg_query__access_priv__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__access_priv__pack_to_buffer", "pg_query.pb-c.c", 9483, "message->base.descriptor == &pg_query__access_priv__descriptor");
}

void pg_query__access_priv__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__access_priv__free_unpacked", "pg_query.pb-c.c", 9502, "message->base.descriptor == &pg_query__access_priv__descriptor");
}

void pg_query__create_op_class_item__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_op_class_item__get_packed_size", "pg_query.pb-c.c", 9514, "message->base.descriptor == &pg_query__create_op_class_item__descriptor");
}

void pg_query__create_op_class_item__pack_cold_1()
{
  __assert_rtn("pg_query__create_op_class_item__pack", "pg_query.pb-c.c", 9521, "message->base.descriptor == &pg_query__create_op_class_item__descriptor");
}

void pg_query__create_op_class_item__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_op_class_item__pack_to_buffer", "pg_query.pb-c.c", 9528, "message->base.descriptor == &pg_query__create_op_class_item__descriptor");
}

void pg_query__create_op_class_item__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_op_class_item__free_unpacked", "pg_query.pb-c.c", 9547, "message->base.descriptor == &pg_query__create_op_class_item__descriptor");
}

void pg_query__table_like_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__table_like_clause__get_packed_size", "pg_query.pb-c.c", 9559, "message->base.descriptor == &pg_query__table_like_clause__descriptor");
}

void pg_query__table_like_clause__pack_cold_1()
{
  __assert_rtn("pg_query__table_like_clause__pack", "pg_query.pb-c.c", 9566, "message->base.descriptor == &pg_query__table_like_clause__descriptor");
}

void pg_query__table_like_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__table_like_clause__pack_to_buffer", "pg_query.pb-c.c", 9573, "message->base.descriptor == &pg_query__table_like_clause__descriptor");
}

void pg_query__table_like_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__table_like_clause__free_unpacked", "pg_query.pb-c.c", 9592, "message->base.descriptor == &pg_query__table_like_clause__descriptor");
}

void pg_query__function_parameter__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__function_parameter__get_packed_size", "pg_query.pb-c.c", 9604, "message->base.descriptor == &pg_query__function_parameter__descriptor");
}

void pg_query__function_parameter__pack_cold_1()
{
  __assert_rtn("pg_query__function_parameter__pack", "pg_query.pb-c.c", 9611, "message->base.descriptor == &pg_query__function_parameter__descriptor");
}

void pg_query__function_parameter__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__function_parameter__pack_to_buffer", "pg_query.pb-c.c", 9618, "message->base.descriptor == &pg_query__function_parameter__descriptor");
}

void pg_query__function_parameter__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__function_parameter__free_unpacked", "pg_query.pb-c.c", 9637, "message->base.descriptor == &pg_query__function_parameter__descriptor");
}

void pg_query__locking_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__locking_clause__get_packed_size", "pg_query.pb-c.c", 9649, "message->base.descriptor == &pg_query__locking_clause__descriptor");
}

void pg_query__locking_clause__pack_cold_1()
{
  __assert_rtn("pg_query__locking_clause__pack", "pg_query.pb-c.c", 9656, "message->base.descriptor == &pg_query__locking_clause__descriptor");
}

void pg_query__locking_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__locking_clause__pack_to_buffer", "pg_query.pb-c.c", 9663, "message->base.descriptor == &pg_query__locking_clause__descriptor");
}

void pg_query__locking_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__locking_clause__free_unpacked", "pg_query.pb-c.c", 9682, "message->base.descriptor == &pg_query__locking_clause__descriptor");
}

void pg_query__row_mark_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__row_mark_clause__get_packed_size", "pg_query.pb-c.c", 9694, "message->base.descriptor == &pg_query__row_mark_clause__descriptor");
}

void pg_query__row_mark_clause__pack_cold_1()
{
  __assert_rtn("pg_query__row_mark_clause__pack", "pg_query.pb-c.c", 9701, "message->base.descriptor == &pg_query__row_mark_clause__descriptor");
}

void pg_query__row_mark_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__row_mark_clause__pack_to_buffer", "pg_query.pb-c.c", 9708, "message->base.descriptor == &pg_query__row_mark_clause__descriptor");
}

void pg_query__row_mark_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__row_mark_clause__free_unpacked", "pg_query.pb-c.c", 9727, "message->base.descriptor == &pg_query__row_mark_clause__descriptor");
}

void pg_query__xml_serialize__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__xml_serialize__get_packed_size", "pg_query.pb-c.c", 9739, "message->base.descriptor == &pg_query__xml_serialize__descriptor");
}

void pg_query__xml_serialize__pack_cold_1()
{
  __assert_rtn("pg_query__xml_serialize__pack", "pg_query.pb-c.c", 9746, "message->base.descriptor == &pg_query__xml_serialize__descriptor");
}

void pg_query__xml_serialize__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__xml_serialize__pack_to_buffer", "pg_query.pb-c.c", 9753, "message->base.descriptor == &pg_query__xml_serialize__descriptor");
}

void pg_query__xml_serialize__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__xml_serialize__free_unpacked", "pg_query.pb-c.c", 9772, "message->base.descriptor == &pg_query__xml_serialize__descriptor");
}

void pg_query__with_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__with_clause__get_packed_size", "pg_query.pb-c.c", 9784, "message->base.descriptor == &pg_query__with_clause__descriptor");
}

void pg_query__with_clause__pack_cold_1()
{
  __assert_rtn("pg_query__with_clause__pack", "pg_query.pb-c.c", 9791, "message->base.descriptor == &pg_query__with_clause__descriptor");
}

void pg_query__with_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__with_clause__pack_to_buffer", "pg_query.pb-c.c", 9798, "message->base.descriptor == &pg_query__with_clause__descriptor");
}

void pg_query__with_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__with_clause__free_unpacked", "pg_query.pb-c.c", 9817, "message->base.descriptor == &pg_query__with_clause__descriptor");
}

void pg_query__infer_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__infer_clause__get_packed_size", "pg_query.pb-c.c", 9829, "message->base.descriptor == &pg_query__infer_clause__descriptor");
}

void pg_query__infer_clause__pack_cold_1()
{
  __assert_rtn("pg_query__infer_clause__pack", "pg_query.pb-c.c", 9836, "message->base.descriptor == &pg_query__infer_clause__descriptor");
}

void pg_query__infer_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__infer_clause__pack_to_buffer", "pg_query.pb-c.c", 9843, "message->base.descriptor == &pg_query__infer_clause__descriptor");
}

void pg_query__infer_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__infer_clause__free_unpacked", "pg_query.pb-c.c", 9862, "message->base.descriptor == &pg_query__infer_clause__descriptor");
}

void pg_query__on_conflict_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__on_conflict_clause__get_packed_size", "pg_query.pb-c.c", 9874, "message->base.descriptor == &pg_query__on_conflict_clause__descriptor");
}

void pg_query__on_conflict_clause__pack_cold_1()
{
  __assert_rtn("pg_query__on_conflict_clause__pack", "pg_query.pb-c.c", 9881, "message->base.descriptor == &pg_query__on_conflict_clause__descriptor");
}

void pg_query__on_conflict_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__on_conflict_clause__pack_to_buffer", "pg_query.pb-c.c", 9888, "message->base.descriptor == &pg_query__on_conflict_clause__descriptor");
}

void pg_query__on_conflict_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__on_conflict_clause__free_unpacked", "pg_query.pb-c.c", 9907, "message->base.descriptor == &pg_query__on_conflict_clause__descriptor");
}

void pg_query__common_table_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__common_table_expr__get_packed_size", "pg_query.pb-c.c", 9919, "message->base.descriptor == &pg_query__common_table_expr__descriptor");
}

void pg_query__common_table_expr__pack_cold_1()
{
  __assert_rtn("pg_query__common_table_expr__pack", "pg_query.pb-c.c", 9926, "message->base.descriptor == &pg_query__common_table_expr__descriptor");
}

void pg_query__common_table_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__common_table_expr__pack_to_buffer", "pg_query.pb-c.c", 9933, "message->base.descriptor == &pg_query__common_table_expr__descriptor");
}

void pg_query__common_table_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__common_table_expr__free_unpacked", "pg_query.pb-c.c", 9952, "message->base.descriptor == &pg_query__common_table_expr__descriptor");
}

void pg_query__role_spec__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__role_spec__get_packed_size", "pg_query.pb-c.c", 9964, "message->base.descriptor == &pg_query__role_spec__descriptor");
}

void pg_query__role_spec__pack_cold_1()
{
  __assert_rtn("pg_query__role_spec__pack", "pg_query.pb-c.c", 9971, "message->base.descriptor == &pg_query__role_spec__descriptor");
}

void pg_query__role_spec__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__role_spec__pack_to_buffer", "pg_query.pb-c.c", 9978, "message->base.descriptor == &pg_query__role_spec__descriptor");
}

void pg_query__role_spec__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__role_spec__free_unpacked", "pg_query.pb-c.c", 9997, "message->base.descriptor == &pg_query__role_spec__descriptor");
}

void pg_query__trigger_transition__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__trigger_transition__get_packed_size", "pg_query.pb-c.c", 10009, "message->base.descriptor == &pg_query__trigger_transition__descriptor");
}

void pg_query__trigger_transition__pack_cold_1()
{
  __assert_rtn("pg_query__trigger_transition__pack", "pg_query.pb-c.c", 10016, "message->base.descriptor == &pg_query__trigger_transition__descriptor");
}

void pg_query__trigger_transition__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__trigger_transition__pack_to_buffer", "pg_query.pb-c.c", 10023, "message->base.descriptor == &pg_query__trigger_transition__descriptor");
}

void pg_query__trigger_transition__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__trigger_transition__free_unpacked", "pg_query.pb-c.c", 10042, "message->base.descriptor == &pg_query__trigger_transition__descriptor");
}

void pg_query__partition_elem__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__partition_elem__get_packed_size", "pg_query.pb-c.c", 10054, "message->base.descriptor == &pg_query__partition_elem__descriptor");
}

void pg_query__partition_elem__pack_cold_1()
{
  __assert_rtn("pg_query__partition_elem__pack", "pg_query.pb-c.c", 10061, "message->base.descriptor == &pg_query__partition_elem__descriptor");
}

void pg_query__partition_elem__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__partition_elem__pack_to_buffer", "pg_query.pb-c.c", 10068, "message->base.descriptor == &pg_query__partition_elem__descriptor");
}

void pg_query__partition_elem__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__partition_elem__free_unpacked", "pg_query.pb-c.c", 10087, "message->base.descriptor == &pg_query__partition_elem__descriptor");
}

void pg_query__partition_spec__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__partition_spec__get_packed_size", "pg_query.pb-c.c", 10099, "message->base.descriptor == &pg_query__partition_spec__descriptor");
}

void pg_query__partition_spec__pack_cold_1()
{
  __assert_rtn("pg_query__partition_spec__pack", "pg_query.pb-c.c", 10106, "message->base.descriptor == &pg_query__partition_spec__descriptor");
}

void pg_query__partition_spec__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__partition_spec__pack_to_buffer", "pg_query.pb-c.c", 10113, "message->base.descriptor == &pg_query__partition_spec__descriptor");
}

void pg_query__partition_spec__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__partition_spec__free_unpacked", "pg_query.pb-c.c", 10132, "message->base.descriptor == &pg_query__partition_spec__descriptor");
}

void pg_query__partition_bound_spec__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__partition_bound_spec__get_packed_size", "pg_query.pb-c.c", 10144, "message->base.descriptor == &pg_query__partition_bound_spec__descriptor");
}

void pg_query__partition_bound_spec__pack_cold_1()
{
  __assert_rtn("pg_query__partition_bound_spec__pack", "pg_query.pb-c.c", 10151, "message->base.descriptor == &pg_query__partition_bound_spec__descriptor");
}

void pg_query__partition_bound_spec__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__partition_bound_spec__pack_to_buffer", "pg_query.pb-c.c", 10158, "message->base.descriptor == &pg_query__partition_bound_spec__descriptor");
}

void pg_query__partition_bound_spec__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__partition_bound_spec__free_unpacked", "pg_query.pb-c.c", 10177, "message->base.descriptor == &pg_query__partition_bound_spec__descriptor");
}

void pg_query__partition_range_datum__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__partition_range_datum__get_packed_size", "pg_query.pb-c.c", 10189, "message->base.descriptor == &pg_query__partition_range_datum__descriptor");
}

void pg_query__partition_range_datum__pack_cold_1()
{
  __assert_rtn("pg_query__partition_range_datum__pack", "pg_query.pb-c.c", 10196, "message->base.descriptor == &pg_query__partition_range_datum__descriptor");
}

void pg_query__partition_range_datum__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__partition_range_datum__pack_to_buffer", "pg_query.pb-c.c", 10203, "message->base.descriptor == &pg_query__partition_range_datum__descriptor");
}

void pg_query__partition_range_datum__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__partition_range_datum__free_unpacked", "pg_query.pb-c.c", 10222, "message->base.descriptor == &pg_query__partition_range_datum__descriptor");
}

void pg_query__partition_cmd__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__partition_cmd__get_packed_size", "pg_query.pb-c.c", 10234, "message->base.descriptor == &pg_query__partition_cmd__descriptor");
}

void pg_query__partition_cmd__pack_cold_1()
{
  __assert_rtn("pg_query__partition_cmd__pack", "pg_query.pb-c.c", 10241, "message->base.descriptor == &pg_query__partition_cmd__descriptor");
}

void pg_query__partition_cmd__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__partition_cmd__pack_to_buffer", "pg_query.pb-c.c", 10248, "message->base.descriptor == &pg_query__partition_cmd__descriptor");
}

void pg_query__partition_cmd__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__partition_cmd__free_unpacked", "pg_query.pb-c.c", 10267, "message->base.descriptor == &pg_query__partition_cmd__descriptor");
}

void pg_query__vacuum_relation__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__vacuum_relation__get_packed_size", "pg_query.pb-c.c", 10279, "message->base.descriptor == &pg_query__vacuum_relation__descriptor");
}

void pg_query__vacuum_relation__pack_cold_1()
{
  __assert_rtn("pg_query__vacuum_relation__pack", "pg_query.pb-c.c", 10286, "message->base.descriptor == &pg_query__vacuum_relation__descriptor");
}

void pg_query__vacuum_relation__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__vacuum_relation__pack_to_buffer", "pg_query.pb-c.c", 10293, "message->base.descriptor == &pg_query__vacuum_relation__descriptor");
}

void pg_query__vacuum_relation__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__vacuum_relation__free_unpacked", "pg_query.pb-c.c", 10312, "message->base.descriptor == &pg_query__vacuum_relation__descriptor");
}

void pg_query__inline_code_block__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__inline_code_block__get_packed_size", "pg_query.pb-c.c", 10324, "message->base.descriptor == &pg_query__inline_code_block__descriptor");
}

void pg_query__inline_code_block__pack_cold_1()
{
  __assert_rtn("pg_query__inline_code_block__pack", "pg_query.pb-c.c", 10331, "message->base.descriptor == &pg_query__inline_code_block__descriptor");
}

void pg_query__inline_code_block__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__inline_code_block__pack_to_buffer", "pg_query.pb-c.c", 10338, "message->base.descriptor == &pg_query__inline_code_block__descriptor");
}

void pg_query__inline_code_block__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__inline_code_block__free_unpacked", "pg_query.pb-c.c", 10357, "message->base.descriptor == &pg_query__inline_code_block__descriptor");
}

void pg_query__call_context__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__call_context__get_packed_size", "pg_query.pb-c.c", 10369, "message->base.descriptor == &pg_query__call_context__descriptor");
}

void pg_query__call_context__pack_cold_1()
{
  __assert_rtn("pg_query__call_context__pack", "pg_query.pb-c.c", 10376, "message->base.descriptor == &pg_query__call_context__descriptor");
}

void pg_query__call_context__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__call_context__pack_to_buffer", "pg_query.pb-c.c", 10383, "message->base.descriptor == &pg_query__call_context__descriptor");
}

void pg_query__call_context__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__call_context__free_unpacked", "pg_query.pb-c.c", 10402, "message->base.descriptor == &pg_query__call_context__descriptor");
}

void pg_query__scan_token__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__scan_token__get_packed_size", "pg_query.pb-c.c", 10414, "message->base.descriptor == &pg_query__scan_token__descriptor");
}

void pg_query__scan_token__pack_cold_1()
{
  __assert_rtn("pg_query__scan_token__pack", "pg_query.pb-c.c", 10421, "message->base.descriptor == &pg_query__scan_token__descriptor");
}

void pg_query__scan_token__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__scan_token__pack_to_buffer", "pg_query.pb-c.c", 10428, "message->base.descriptor == &pg_query__scan_token__descriptor");
}

void pg_query__scan_token__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__scan_token__free_unpacked", "pg_query.pb-c.c", 10447, "message->base.descriptor == &pg_query__scan_token__descriptor");
}

void biome_each_bestindex_cold_1()
{
  __assert_rtn("biome_each_bestindex", "BMSQLProtoUDFs.m", 188, "pIdxInfo->aConstraint[i].op == SQLITE_INDEX_CONSTRAINT_EQ");
}

void biome_each_filter_cold_1()
{
  __assert_rtn("biome_each_filter", "BMSQLProtoUDFs.m", 212, "argc == 3");
}

void biome_each_column_cold_1()
{
  __assert_rtn("biome_each_column", "BMSQLProtoUDFs.m", 261, "0");
}

void CoreDuetLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreDuetLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("BMKnowledgeContextMapping.m"), 16, CFSTR("%s"), *a1);

  __break(1u);
}

void BMUserFocusComputedModeUpdateReasonFromReason_cold_1()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  OUTLINED_FUNCTION_4_2();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_1_5(&dword_18D810000, v1, v2, "BMUserFocusComputedModeEvent: unable to convert BMPBModeUpdateReason enum value: %@", v3, v4, v5, v6, v7);

  OUTLINED_FUNCTION_0_0();
}

void BMUserFocusComputedModeUpdateSourceFromSource_cold_1()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  OUTLINED_FUNCTION_4_2();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_1_5(&dword_18D810000, v1, v2, "BMUserFocusComputedModeEvent: unable to convert BMPBModeUpdateSource enum value: %@", v3, v4, v5, v6, v7);

  OUTLINED_FUNCTION_0_0();
}

void activityTypeWithState_cold_1(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_1_5(&dword_18D810000, v2, v3, "BMFindMyLocationChangeEvent: unable to convert BMPBActivityState enum value: %@", v4, v5, v6, v7, v8);

  OUTLINED_FUNCTION_0_0();
}

void typeWithBMPBIntentType_cold_1()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  OUTLINED_FUNCTION_4_2();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_1_5(&dword_18D810000, v1, v2, "BMIntentEvent: unable to convert BMPBIntentType enum value: %@", v3, v4, v5, v6, v7);

  OUTLINED_FUNCTION_0_0();
}

void interactionDirectionWithPB_cold_1()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  OUTLINED_FUNCTION_4_2();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_1_5(&dword_18D810000, v1, v2, "BMIntentEvent: unable to convert BMPBInteractionDirection enum value: %@", v3, v4, v5, v6, v7);

  OUTLINED_FUNCTION_0_0();
}

void BMSQLDataTypeToString_cold_1(uint64_t a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = 138412290;
  v5 = v3;
  _os_log_error_impl(&dword_18D810000, a2, OS_LOG_TYPE_ERROR, "BMSQLTableDataTypeString unknown column datatype %@", (uint8_t *)&v4, 0xCu);

}

void CoreDuetLibrary_cold_1_0(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreDuetLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("BMAppStreams.m"), 31, CFSTR("%s"), *a1);

  __break(1u);
}

void CoreDuetContextLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreDuetContextLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("BMAppStreams.m"), 39, CFSTR("%s"), *a1);

  __break(1u);
}

void CoreDuetLibrary_cold_1_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreDuetLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("_BMDKEventCodec_DKPREvent.m"), 19, CFSTR("%s"), *a1);

  __break(1u);
}

void getBMAppInFocusIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMAppInFocusIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 18, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMAppIntentIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMAppIntentIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 20, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMSiriRemembersInteractionHistoryIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMSiriRemembersInteractionHistoryIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 22, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMSiriRemembersMessageHistoryIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMSiriRemembersMessageHistoryIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 24, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMSiriRemembersCallHistoryIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMSiriRemembersCallHistoryIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 26, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMSiriRemembersAudioHistoryIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMSiriRemembersAudioHistoryIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 38, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMFrontBoardDisplayElementIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMFrontBoardDisplayElementIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 30, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMScreenTimeAppUsageIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMScreenTimeAppUsageIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 40, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMIntelligenceEngineInteractionDonationIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMIntelligenceEngineInteractionDonationIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 48, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMAppLocationActivityIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMAppLocationActivityIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 64, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMSiriRemembersAssistantSuggestionsIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMSiriRemembersAssistantSuggestionsIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 28, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMSiriAppSelectionMusicIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMSiriAppSelectionMusicIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 34, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMSiriExecutionIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMSiriExecutionIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 51, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMSiriFeedbackLearningUserInteractionsIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMSiriFeedbackLearningUserInteractionsIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 53, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMSiriPostSiriEngagementIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMSiriPostSiriEngagementIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 55, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMSiriPrivateLearningSELFEventIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMSiriPrivateLearningSELFEventIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 56, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMSiriRemembersIntentIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMSiriRemembersIntentIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 57, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMSiriSELFProcessedEventIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMSiriSELFProcessedEventIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 58, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMDictationUserEditIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMDictationUserEditIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 59, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMProactiveHarvestingSiriQueryIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMProactiveHarvestingSiriQueryIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 60, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMSiriDictationIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMSiriDictationIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 61, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMSiriRemembersExplicitRequestsIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMSiriRemembersExplicitRequestsIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 62, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void getBMSiriServiceIdentifier_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getBMSiriServiceIdentifier(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BMLibraryStreamsPruner.m"), 63, CFSTR("%s"), OUTLINED_FUNCTION_0_11());

  __break(1u);
}

void BiomeLibraryLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *BiomeLibraryLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("BMLibraryStreamsPruner.m"), 16, CFSTR("%s"), *a1);

  __break(1u);
}

void __getBMAppInFocusClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBMAppInFocusClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMLibraryStreamsPruner.m"), 19, CFSTR("Unable to find class %s"), "BMAppInFocus");

  __break(1u);
}

void __getBMAppIntentClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBMAppIntentClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMLibraryStreamsPruner.m"), 21, CFSTR("Unable to find class %s"), "BMAppIntent");

  __break(1u);
}

void __getBMSiriInteractionHistoryClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBMSiriInteractionHistoryClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMLibraryStreamsPruner.m"), 23, CFSTR("Unable to find class %s"), "BMSiriInteractionHistory");

  __break(1u);
}

void __getBMSiriMessageHistoryClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBMSiriMessageHistoryClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMLibraryStreamsPruner.m"), 25, CFSTR("Unable to find class %s"), "BMSiriMessageHistory");

  __break(1u);
}

void __getBMSiriCallHistoryClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBMSiriCallHistoryClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMLibraryStreamsPruner.m"), 27, CFSTR("Unable to find class %s"), "BMSiriCallHistory");

  __break(1u);
}

void __getBMSiriAssistantSuggestionsClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBMSiriAssistantSuggestionsClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMLibraryStreamsPruner.m"), 29, CFSTR("Unable to find class %s"), "BMSiriAssistantSuggestions");

  __break(1u);
}

void __getBMSiriAudioHistoryClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBMSiriAudioHistoryClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMLibraryStreamsPruner.m"), 39, CFSTR("Unable to find class %s"), "BMSiriAudioHistory");

  __break(1u);
}

void __getBMFrontBoardDisplayElementClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBMFrontBoardDisplayElementClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMLibraryStreamsPruner.m"), 31, CFSTR("Unable to find class %s"), "BMFrontBoardDisplayElement");

  __break(1u);
}

void __getBMScreenTimeAppUsageClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBMScreenTimeAppUsageClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMLibraryStreamsPruner.m"), 41, CFSTR("Unable to find class %s"), "BMScreenTimeAppUsage");

  __break(1u);
}

void __getBMIntelligenceEngineInteractionClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBMIntelligenceEngineInteractionClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMLibraryStreamsPruner.m"), 49, CFSTR("Unable to find class %s"), "BMIntelligenceEngineInteraction");

  __break(1u);
}

void __getBMAppLocationActivityClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBMAppLocationActivityClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMLibraryStreamsPruner.m"), 65, CFSTR("Unable to find class %s"), "BMAppLocationActivity");

  __break(1u);
}

void CoreDuetLibrary_cold_1_2(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreDuetLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("BMTipsStreams.m"), 24, CFSTR("%s"), *a1);

  __break(1u);
}

void __getBMDiscoverabilitySignalsClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *BiomeLibraryLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("BMTipsStreams.m"), 46, CFSTR("%s"), *a1);

  __break(1u);
}

void __getBMDiscoverabilitySignalsClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBMDiscoverabilitySignalsClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMTipsStreams.m"), 47, CFSTR("Unable to find class %s"), "BMDiscoverabilitySignals");

  __break(1u);
}

void CoreDuetContextLibrary_cold_1_0(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreDuetContextLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("BMTipsStreams.m"), 31, CFSTR("%s"), *a1);

  __break(1u);
}

void _BiomeLibrary_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "id<BMRootLibrary> _BiomeLibrary(void)");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMDaemon+LaunchDonations.m"), 22, CFSTR("%s"), dlerror());

  __break(1u);
}

void BiomeLibraryLibrary_cold_1_0(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *BiomeLibraryLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("BMDaemon+LaunchDonations.m"), 21, CFSTR("%s"), *a1);

  __break(1u);
}

void __getBMDeviceMetadataClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBMDeviceMetadataClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMDaemon+LaunchDonations.m"), 23, CFSTR("Unable to find class %s"), "BMDeviceMetadata");

  __break(1u);
}

void __getBMDeviceBootSessionClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBMDeviceBootSessionClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMDaemon+LaunchDonations.m"), 24, CFSTR("Unable to find class %s"), "BMDeviceBootSession");

  __break(1u);
}

void BiomeLibraryInternalLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *BiomeLibraryInternalLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("BMLibraryBridge.m"), 17, CFSTR("%s"), *a1);

  __break(1u);
}

void BiomeLibraryNodeBridge_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "id<BMLibraryNode> __softlink__BiomeLibraryNode(void)");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMLibraryBridge.m"), 14, CFSTR("%s"), dlerror());

  __break(1u);
}

void BiomeLibraryNodeBridge_cold_2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_6_0(&dword_18D810000, a1, a3, "Failed to load root library node from BiomeLibrary", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_2();
}

void BiomeLibraryInternalNodeBridge_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_6_0(&dword_18D810000, a1, a3, "BiomeLibraryInternal unavailable", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_2();
}

void BiomeLibraryInternalNodeBridge_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "id<BMLibraryNode> __softlink__BiomeLibraryInternalNode(void)");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMLibraryBridge.m"), 18, CFSTR("%s"), dlerror());

  __break(1u);
}

void BiomeLibraryInternalNodeBridge_cold_3(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_6_0(&dword_18D810000, a1, a3, "Failed to load root library node from BiomeLibraryInternal", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_2();
}

void __getBiomeLibraryNodeSymbolLoc_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *BiomeLibraryLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("BMLibraryBridge.m"), 13, CFSTR("%s"), *a1);

  __break(1u);
}

void bmstream_vtab_connect_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_0_12(&dword_18D810000, v0, v1, "bmstream_vtab_connect declare vtab '%@'", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5();
}

void bmstream_vtab_connect_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_0_12(&dword_18D810000, v0, v1, "bmstream_vtab_connect create virtual table %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5();
}

void bmstream_vtab_bestindex_cold_1(unsigned int *a1, NSObject *a2)
{
  void *v3;
  uint8_t v4[24];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_10();
  _os_log_debug_impl(&dword_18D810000, a2, OS_LOG_TYPE_DEBUG, "bmstream_vtab_bestindex idxNum: %@", v4, 0xCu);

}

void bmstream_vtab_filter_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_0_12(&dword_18D810000, v0, v1, "bmstream_vtab_filter resetting cursor publisher with options: %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5();
}

void bmstream_vtab_filter_cold_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 138412546;
  v8 = v5;
  v9 = 2112;
  v10 = v6;
  _os_log_debug_impl(&dword_18D810000, a3, OS_LOG_TYPE_DEBUG, "bmstream_vtab_filter idxNum: %@; argc: %@",
    (uint8_t *)&v7,
    0x16u);

}

void typeWithBMPBMindfulnessSessionStateType_cold_1(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_1_5(&dword_18D810000, v2, v3, "BMMindfulnessSessionEvent: unable to convert BMPBMindfulnessSessionStateType enum value: %@", v4, v5, v6, v7, v8);

  OUTLINED_FUNCTION_0_0();
}

void CoreDuetLibrary_cold_1_3(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreDuetLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("BMCoreDuetStream.m"), 22, CFSTR("%s"), *a1);

  __break(1u);
}

void BMSleepModeChangeReasonFromReason_cold_1(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_1_5(&dword_18D810000, v2, v3, "BMSleepModeEvent: unable to convert BMPBSleepModeChangeReason enum value: %@", v4, v5, v6, v7, v8);

  OUTLINED_FUNCTION_0_0();
}

void typeFromBMPBSemanticLocationUserSpecificPlaceType_cold_1(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_1_5(&dword_18D810000, v2, v3, "BMSemanticLocationEvent: unable to convert BMPBSemanticLocationUserSpecificPlaceType enum value: %@", v4, v5, v6, v7, v8);

  OUTLINED_FUNCTION_0_0();
}

void __getFSFUtilsClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *FeatureStoreLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("BMDaemon+Pruning.m"), 27, CFSTR("%s"), *a1);

  __break(1u);
}

void __getFSFUtilsClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getFSFUtilsClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMDaemon+Pruning.m"), 28, CFSTR("Unable to find class %s"), "FSFUtils");

  __break(1u);
}

void __getSAPathInfoClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSAPathInfoClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMDaemon+Pruning.m"), 37, CFSTR("Unable to find class %s"), "SAPathInfo");

  __break(1u);
}

void SpaceAttributionLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SpaceAttributionLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("BMDaemon+Pruning.m"), 35, CFSTR("%s"), *a1);

  __break(1u);
}

void __getSAPathManagerClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSAPathManagerClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BMDaemon+Pruning.m"), 36, CFSTR("Unable to find class %s"), "SAPathManager");

  __break(1u);
}

void BMPBLastAlarmEventTypeFromType_cold_1(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_1_5(&dword_18D810000, v2, v3, "BMAlarmEvent: unable to convert BMLastAlarmEventType enum value: %@", v4, v5, v6, v7, v8);

  OUTLINED_FUNCTION_0_0();
}

uint64_t static CharacterSet.whitespaces.getter()
{
  return MEMORY[0x1E0CAE390]();
}

uint64_t static CharacterSet.whitespacesAndNewlines.getter()
{
  return MEMORY[0x1E0CAE430]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x1E0CAE4B8]();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x1E0CAE8B8]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x1E0CAE8D0]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x1E0CAE8F0]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x1E0CAE8F8]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x1E0CAE910]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t URL.standardizedFileURL.getter()
{
  return MEMORY[0x1E0CAFD20]();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return MEMORY[0x1E0CAFD90]();
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x1E0CAFF30](percentEncoded);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t URL.path.getter()
{
  return MEMORY[0x1E0CAFF40]();
}

uint64_t URL.init(filePath:directoryHint:relativeTo:)()
{
  return MEMORY[0x1E0CAFF98]();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return MEMORY[0x1E0CAFFD0]();
}

uint64_t URL.appending<A>(component:directoryHint:)()
{
  return MEMORY[0x1E0CAFFE0]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t Data.makeIterator()()
{
  return MEMORY[0x1E0CB0120]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x1E0CB0140]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x1E0CB01F0]();
}

uint64_t static Data.== infix(_:_:)()
{
  return MEMORY[0x1E0CB0218]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t Data.init(bytes:count:)()
{
  return MEMORY[0x1E0CB0248]();
}

uint64_t Data.count.getter()
{
  return MEMORY[0x1E0CB0260]();
}

uint64_t type metadata accessor for Data.Iterator()
{
  return MEMORY[0x1E0CB02C0]();
}

uint64_t Date.ISO8601Format(_:)()
{
  return MEMORY[0x1E0CB05A0]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return MEMORY[0x1E0CB05E8]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.DateSeparator()
{
  return MEMORY[0x1E0CB05F8]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator()
{
  return MEMORY[0x1E0CB0608]();
}

uint64_t Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)()
{
  return MEMORY[0x1E0CB0610]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return MEMORY[0x1E0CB0630]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle()
{
  return MEMORY[0x1E0CB0670]();
}

uint64_t Date.init(timeIntervalSince1970:)()
{
  return MEMORY[0x1E0CB07B0]();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return MEMORY[0x1E0CB07C0]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x1E0CB0870]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x1E0CB0910]();
}

uint64_t UUID.init(uuid:)()
{
  return MEMORY[0x1E0CB0970]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x1E0CB0E38]();
}

uint64_t TimeZone.init(secondsFromGMT:)()
{
  return MEMORY[0x1E0CB1438]();
}

uint64_t type metadata accessor for TimeZone()
{
  return MEMORY[0x1E0CB1470]();
}

uint64_t BookmarkablePublisher.init(_:)()
{
  return MEMORY[0x1E0D023D0]();
}

uint64_t isFeatureEnabled(_:)()
{
  return MEMORY[0x1E0D20EF8]();
}

uint64_t Schematizer.RepeatableFieldIterator.next()()
{
  return MEMORY[0x1E0D7F468]();
}

uint64_t type metadata accessor for Schematizer.RepeatableFieldIterator()
{
  return MEMORY[0x1E0D7F470]();
}

uint64_t static Schematizer.makeRepeatableFieldIterator(in:withFieldNumber:type:)()
{
  return MEMORY[0x1E0D7F480]();
}

uint64_t type metadata accessor for TypeSchema()
{
  return MEMORY[0x1E0D7F500]();
}

uint64_t type metadata accessor for SchematizedData()
{
  return MEMORY[0x1E0D7F508]();
}

uint64_t type metadata accessor for AnyValue()
{
  return MEMORY[0x1E0D7F510]();
}

uint64_t type metadata accessor for EnumValue()
{
  return MEMORY[0x1E0D7F520]();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return MEMORY[0x1E0D3E988]();
}

uint64_t UnknownStorage.init()()
{
  return MEMORY[0x1E0D3E990]();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return MEMORY[0x1E0D3E998]();
}

uint64_t BinaryDecodingOptions.init()()
{
  return MEMORY[0x1E0D3EA60]();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return MEMORY[0x1E0D3EA68]();
}

uint64_t _MessageImplementationBase._protobuf_generated_isEqualTo(other:)()
{
  return MEMORY[0x1E0D3EA80]();
}

uint64_t _MessageImplementationBase.isEqualTo(message:)()
{
  return MEMORY[0x1E0D3EA90]();
}

uint64_t Enum.hash(into:)()
{
  return MEMORY[0x1E0D3EA98]();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return MEMORY[0x1E0D3EAB8]();
}

uint64_t dispatch thunk of Decoder.handleConflictingOneOf()()
{
  return MEMORY[0x1E0D3EAC0]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBoolField(value:)()
{
  return MEMORY[0x1E0D3EAD8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)()
{
  return MEMORY[0x1E0D3EAE8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt32Field(value:)()
{
  return MEMORY[0x1E0D3EB38]();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt64Field(value:)()
{
  return MEMORY[0x1E0D3EB48]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)()
{
  return MEMORY[0x1E0D3EB68]();
}

uint64_t dispatch thunk of Decoder.decodeSingularDoubleField(value:)()
{
  return MEMORY[0x1E0D3EB78]();
}

uint64_t dispatch thunk of Decoder.decodeSingularStringField(value:)()
{
  return MEMORY[0x1E0D3EB90]();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt32Field(value:)()
{
  return MEMORY[0x1E0D3EBA0]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)()
{
  return MEMORY[0x1E0D3EBC0]();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return MEMORY[0x1E0D3EBD8]();
}

uint64_t Message.isInitialized.getter()
{
  return MEMORY[0x1E0D3EC48]();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return MEMORY[0x1E0D3EC50]();
}

uint64_t Message.debugDescription.getter()
{
  return MEMORY[0x1E0D3EC68]();
}

uint64_t Message.hash(into:)()
{
  return MEMORY[0x1E0D3EC80]();
}

uint64_t dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x1E0D3ECE8]();
}

uint64_t dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)()
{
  return MEMORY[0x1E0D3ECF8]();
}

uint64_t dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)()
{
  return MEMORY[0x1E0D3ED00]();
}

uint64_t dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)()
{
  return MEMORY[0x1E0D3ED38]();
}

uint64_t dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x1E0D3ED40]();
}

uint64_t dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)()
{
  return MEMORY[0x1E0D3ED58]();
}

uint64_t dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)()
{
  return MEMORY[0x1E0D3ED68]();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)()
{
  return MEMORY[0x1E0D3ED70]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x1E0D3ED80]();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x1E0D3ED98]();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return MEMORY[0x1E0D3EF28]();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return MEMORY[0x1E0D3EF38]();
}

uint64_t _NameMap.init()()
{
  return MEMORY[0x1E0D3EF40]();
}

uint64_t type metadata accessor for _NameMap()
{
  return MEMORY[0x1E0D3EF48]();
}

uint64_t OSSignpostID.init(log:)()
{
  return MEMORY[0x1E0DF2100]();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return MEMORY[0x1E0DF2108]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x1E0DF2118]();
}

uint64_t OSSignposter.init(logger:)()
{
  return MEMORY[0x1E0DF2130]();
}

uint64_t OSSignposter.logHandle.getter()
{
  return MEMORY[0x1E0DF2150]();
}

uint64_t type metadata accessor for OSSignposter()
{
  return MEMORY[0x1E0DF2170]();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return MEMORY[0x1E0DF2198]();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return MEMORY[0x1E0DF2218]();
}

uint64_t OSSignpostIntervalState.init(id:isOpen:)()
{
  return MEMORY[0x1E0DF2220]();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return MEMORY[0x1E0DF2228]();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return MEMORY[0x1E0DF2238]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t Logger.init(_:)()
{
  return MEMORY[0x1E0DF2268]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x1E0CB17D8]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x1E0DE9E38]();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x1E0DE9E78]();
}

Swift::Void __swiftcall Dictionary._Variant.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  MEMORY[0x1E0DE9FF8](keepingCapacity);
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t BidirectionalCollection<>.firstRange<A>(of:)()
{
  return MEMORY[0x1E0DF1F68]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x1E0DEA568]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x1E0CB1940]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t String.init(data:encoding:)()
{
  return MEMORY[0x1E0CB1990]();
}

uint64_t String.init(cString:encoding:)()
{
  return MEMORY[0x1E0CB19C8]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x1E0CB19E8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x1E0CB1A18]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x1E0DEA5F8]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x1E0DEA610]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x1E0DEA630]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x1E0DEA658]();
}

uint64_t String.replaceSubrange<A>(_:with:)()
{
  return MEMORY[0x1E0DEA680]();
}

uint64_t String.init(stringInterpolation:)()
{
  return MEMORY[0x1E0DEA708]();
}

uint64_t static String.+ infix(_:_:)()
{
  return MEMORY[0x1E0DEA710]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x1E0DEA7B8]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x1E0DEA7C0]();
}

uint64_t String.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA7D8]();
}

uint64_t String.append<A>(contentsOf:)()
{
  return MEMORY[0x1E0DEA7F0]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x1E0DEA800](a1._countAndFlagsBits, a1._object);
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x1E0DEA828]();
}

{
  return MEMORY[0x1E0DEA830]();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t String.hashValue.getter()
{
  return MEMORY[0x1E0DEA950]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x1E0DEAA08]();
}

{
  return MEMORY[0x1E0DEAA50]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x1E0DEAA40]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x1E0DEAC88]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x1E0DEACA0]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x1E0DEAD18]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x1E0CB1AC0]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x1E0DEADB0]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t Double.description.getter()
{
  return MEMORY[0x1E0DEAFE8]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x1E0CB1BB0]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1BD8]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t Int.hashValue.getter()
{
  return MEMORY[0x1E0DEB408]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x1E0DF2270]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return MEMORY[0x1E0DF2298]();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return MEMORY[0x1E0DF22A0]();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return MEMORY[0x1E0DF22B0]();
}

uint64_t Optional.debugDescription.getter()
{
  return MEMORY[0x1E0DEB930]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t Optional<A>.hashValue.getter()
{
  return MEMORY[0x1E0DEB960]();
}

uint64_t Substring.distance(from:to:)()
{
  return MEMORY[0x1E0DEBAD8]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x1E0DEBB68]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x1E0CB2480]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x1E0CB24A8]();
}

uint64_t StringProtocol.range<A>(of:options:range:locale:)()
{
  return MEMORY[0x1E0CB2540]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return MEMORY[0x1E0DEC070]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x1E0DEC260]();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return MEMORY[0x1E0DEC280]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x1E0DEC2A8](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x1E0DEC470]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x1E0DEC498]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x1E0DEC8E0]();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return MEMORY[0x1E0DECAE0](isUnique, capacity);
}

Swift::Void __swiftcall _NativeDictionary.copy()()
{
  MEMORY[0x1E0DECAF8]();
}

uint64_t _NativeDictionary._delete(at:)()
{
  return MEMORY[0x1E0DECB00]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECBE0]();
}

{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t _assertionFailure(_:_:flags:)()
{
  return MEMORY[0x1E0DECBF0]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECD70]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x1E0DECF28](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1E0DECF38]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x1E0DECF40]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1E0DECF58]();
}

{
  return MEMORY[0x1E0DECF68]();
}

{
  return MEMORY[0x1E0DECFA0]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1E0DECF88]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x1E0DECFC0]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x1E0DED038]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1E0DED070]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1E0DED090]();
}

{
  return MEMORY[0x1E0DED0A0]();
}

{
  return MEMORY[0x1E0DED0D0]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1E0DED0C0]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x1E0DED0F0]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x1E0DED120]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x1E0DED1B0](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x1E0DED5F0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return MEMORY[0x1E0DED998]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x1E0CB2650]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t Int64.hashValue.getter()
{
  return MEMORY[0x1E0DEDC50]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1E0DEDEF8]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x1E0DEDF10](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x1E0DEDF18](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x1E0DEE978]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1E0D15428]();
}

uint64_t BMAccessModePrintableDescription()
{
  return MEMORY[0x1E0D01C28]();
}

uint64_t BMBiomeLibraryStreamIdentifierForPremigratedStreamIdentifier()
{
  return MEMORY[0x1E0D01C30]();
}

uint64_t BMDSLValidateDictionary()
{
  return MEMORY[0x1E0D01B70]();
}

uint64_t BMIdentifierIsPathSafe()
{
  return MEMORY[0x1E0D01C40]();
}

uint64_t BMServiceDomainForStream()
{
  return MEMORY[0x1E0D01C50]();
}

uint64_t BMStringForServiceDomain()
{
  return MEMORY[0x1E0D01C78]();
}

uint64_t BPSPipelineSupportsPullBasedPublishers()
{
  return MEMORY[0x1E0D02410]();
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80368](data, *(_QWORD *)&len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C984D8](theDate);
  return result;
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

uint64_t NSRequestConcreteImplementation()
{
  return MEMORY[0x1E0CB3158]();
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromProtocol(Protocol *proto)
{
  return (NSString *)MEMORY[0x1E0CB3218](proto);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

uint64_t PBDataWriterPlaceMark()
{
  return MEMORY[0x1E0D82BF8]();
}

uint64_t PBDataWriterRecallMark()
{
  return MEMORY[0x1E0D82C00]();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x1E0D82C10]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1E0D82C28]();
}

uint64_t PBDataWriterWriteDoubleField()
{
  return MEMORY[0x1E0D82C38]();
}

uint64_t PBDataWriterWriteFloatField()
{
  return MEMORY[0x1E0D82C50]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1E0D82C58]();
}

uint64_t PBDataWriterWriteInt64Field()
{
  return MEMORY[0x1E0D82C68]();
}

uint64_t PBDataWriterWriteSint32Field()
{
  return MEMORY[0x1E0D82C88]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1E0D82C98]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1E0D82CB0]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x1E0D82CB8]();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return MEMORY[0x1E0D82CC0]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1E0D82CE0]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1E0D82CF0]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1E0D82D00]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1E0D82D10]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1E0D82D28]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x1E0C9A800]();
}

uint64_t _PASIsAllDigits()
{
  return MEMORY[0x1E0D816D8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

uint64_t __biome_log_for_category()
{
  return MEMORY[0x1E0D01D58]();
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

uint64_t _objc_autoreleasePoolPop()
{
  return MEMORY[0x1E0DE7960]();
}

uint64_t _objc_autoreleasePoolPush()
{
  return MEMORY[0x1E0DE7970]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1E0C80FC0](dso, description, activity, *(_QWORD *)&flags);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x1E0DEEA50]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

uint64_t atol(const char *a1)
{
  return MEMORY[0x1E0C81678](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

void clearerr(FILE *a1)
{
  MEMORY[0x1E0C82648](a1);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C28](queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

int ferror(FILE *a1)
{
  return MEMORY[0x1E0C83348](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C83448](a1, a2);
  return result;
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C83488](*(_QWORD *)&a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

int getc(FILE *a1)
{
  return MEMORY[0x1E0C83638](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x1E0C83668]();
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_rethrow(void)
{
  MEMORY[0x1E0DE7C98]();
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84510](activity, state);
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84518](state);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_assert_not_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84988](lock);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84990](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1E0C849F0]();
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1E0C84DE0](a1, a2);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x1E0C85280](*(_QWORD *)&a1, a2, a3, a4, a5);
}

void siglongjmp(sigjmp_buf a1, int a2)
{
  MEMORY[0x1E0C853E8](a1, *(_QWORD *)&a2);
}

int sigsetjmp(sigjmp_buf a1, int a2)
{
  return MEMORY[0x1E0C85408](a1, *(_QWORD *)&a2);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85460](a1, a2);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE8580](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1E0DE8598](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1E0DE85A8](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1E0DE85B0](a1, *(_QWORD *)&a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE85D8](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&a4, a5);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8650](a1);
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8658](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1E0DE8660](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8668](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE8678](pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  double result;

  MEMORY[0x1E0DE8688](a1, *(_QWORD *)&iCol);
  return result;
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8698](a1, *(_QWORD *)&iCol);
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return (const char *)MEMORY[0x1E0DE86A0](a1, *(_QWORD *)&N);
}

const char *__cdecl sqlite3_column_table_name(sqlite3_stmt *a1, int a2)
{
  return (const char *)MEMORY[0x1E0DE86B0](a1, *(_QWORD *)&a2);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE86B8](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE86C8](a1, *(_QWORD *)&iCol);
}

int sqlite3_create_function_v2(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *), void (__cdecl *xDestroy)(void *))
{
  return MEMORY[0x1E0DE8710](db, zFunctionName, *(_QWORD *)&nArg, *(_QWORD *)&eTextRep, pApp, xFunc, xStep, xFinal);
}

int sqlite3_create_module_v2(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData, void (__cdecl *xDestroy)(void *))
{
  return MEMORY[0x1E0DE8720](db, zName, p, pClientData, xDestroy);
}

int sqlite3_declare_vtab(sqlite3 *a1, const char *zSQL)
{
  return MEMORY[0x1E0DE8770](a1, zSQL);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1E0DE8788](a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1E0DE8798](a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE87C8](pStmt);
}

void sqlite3_free(void *a1)
{
  MEMORY[0x1E0DE87D0](a1);
}

void *__cdecl sqlite3_malloc(int a1)
{
  return (void *)MEMORY[0x1E0DE8838](*(_QWORD *)&a1);
}

char *sqlite3_mprintf(const char *a1, ...)
{
  return (char *)MEMORY[0x1E0DE8848](a1);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1E0DE8870](filename, ppDb, *(_QWORD *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1E0DE8880](db, zSql, *(_QWORD *)&nByte, ppStmt, pzTail);
}

int sqlite3_prepare_v3(sqlite3 *db, const char *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1E0DE8888](db, zSql, *(_QWORD *)&nByte, *(_QWORD *)&prepFlags, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE88B0](pStmt);
}

void sqlite3_result_blob(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  MEMORY[0x1E0DE88B8](a1, a2, *(_QWORD *)&a3, a4);
}

void sqlite3_result_double(sqlite3_context *a1, double a2)
{
  MEMORY[0x1E0DE88C8](a1, a2);
}

void sqlite3_result_error(sqlite3_context *a1, const char *a2, int a3)
{
  MEMORY[0x1E0DE88D0](a1, a2, *(_QWORD *)&a3);
}

void sqlite3_result_int64(sqlite3_context *a1, sqlite3_int64 a2)
{
  MEMORY[0x1E0DE88F8](a1, a2);
}

void sqlite3_result_null(sqlite3_context *a1)
{
  MEMORY[0x1E0DE8900](a1);
}

void sqlite3_result_text(sqlite3_context *a1, const char *a2, int a3, void (__cdecl *a4)(void *))
{
  MEMORY[0x1E0DE8910](a1, a2, *(_QWORD *)&a3, a4);
}

int sqlite3_set_authorizer(sqlite3 *a1, int (__cdecl *xAuth)(void *, int, const char *, const char *, const char *, const char *), void *pUserData)
{
  return MEMORY[0x1E0DE8940](a1, xAuth, pUserData);
}

const char *__cdecl sqlite3_sql(sqlite3_stmt *pStmt)
{
  return (const char *)MEMORY[0x1E0DE8998](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1E0DE89A8](a1);
}

void *__cdecl sqlite3_user_data(sqlite3_context *a1)
{
  return (void *)MEMORY[0x1E0DE8A10](a1);
}

const void *__cdecl sqlite3_value_blob(sqlite3_value *a1)
{
  return (const void *)MEMORY[0x1E0DE8A18](a1);
}

int sqlite3_value_bytes(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A20](a1);
}

double sqlite3_value_double(sqlite3_value *a1)
{
  double result;

  MEMORY[0x1E0DE8A30](a1);
  return result;
}

sqlite3_int64 sqlite3_value_int64(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A50](a1);
}

const unsigned __int8 *__cdecl sqlite3_value_text(sqlite3_value *a1)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE8A60](a1);
}

int sqlite3_value_type(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A70](a1);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return MEMORY[0x1E0C85550](*(_QWORD *)&__errnum, __strerrbuf, __buflen);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C855E8](__s, *(_QWORD *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1E0C85610](__s1, __s2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85698](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1E0DEEAB8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x1E0DEEBB0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1E0DEEC50]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x1E0DEECC0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1E0DEED08]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1E0DEED58]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1E0DEED98]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1E0DEEE88]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1E0DEEEC8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1E0DEEED8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1E0C85798](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1E0C85D90](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
  MEMORY[0x1E0C85D98](identifier, criteria, handler);
}

uint64_t xpc_connection_copy_invalidation_reason()
{
  return MEMORY[0x1E0C85F80]();
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1E0C86108](object);
}

uint64_t xpc_copy_event()
{
  return MEMORY[0x1E0C86140]();
}

xpc_object_t xpc_dictionary_create_empty(void)
{
  return (xpc_object_t)MEMORY[0x1E0C86218]();
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x1E0C86278](xdict, key, length);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C86288](xdict, key);
}

double xpc_dictionary_get_double(xpc_object_t xdict, const char *key)
{
  double result;

  MEMORY[0x1E0C86298](xdict, key);
  return result;
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1E0C862C8](xdict, key);
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
  MEMORY[0x1E0C86330](xdict, key, bytes, length);
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
  MEMORY[0x1E0C86348](xdict, key, value);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x1E0C86390](xdict, key, string);
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return MEMORY[0x1E0C86420](object1, object2);
}

uint64_t xpc_event_publisher_activate()
{
  return MEMORY[0x1E0C86428]();
}

uint64_t xpc_event_publisher_create()
{
  return MEMORY[0x1E0C86438]();
}

uint64_t xpc_event_publisher_fire()
{
  return MEMORY[0x1E0C86448]();
}

uint64_t xpc_event_publisher_set_error_handler()
{
  return MEMORY[0x1E0C86470]();
}

uint64_t xpc_event_publisher_set_handler()
{
  return MEMORY[0x1E0C86488]();
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

uint64_t xpc_set_event()
{
  return MEMORY[0x1E0C866E0]();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
  MEMORY[0x1E0C866E8](stream, targetq, handler);
}

uint64_t xpc_strerror()
{
  return MEMORY[0x1E0C86710]();
}

